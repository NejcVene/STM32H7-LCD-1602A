
LCD_Display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f020  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  0800f2c0  0800f2c0  0001f2c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f468  0800f468  0001f468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f470  0800f470  0001f470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f474  0800f474  0001f474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000009c  24000000  0800f478  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  2400009c  0800f514  0002009c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000fc  0800f574  000200fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c80  2400015c  0800f5d4  0002015c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000ddc  0800f5d4  00020ddc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00032794  00000000  00000000  0002018a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000046f3  00000000  00000000  0005291e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002520  00000000  00000000  00057018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002380  00000000  00000000  00059538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000421ba  00000000  00000000  0005b8b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00030481  00000000  00000000  0009da72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001a5f5e  00000000  00000000  000cdef3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00273e51  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a8d0  00000000  00000000  00273ea4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400015c 	.word	0x2400015c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800f2a8 	.word	0x0800f2a8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000160 	.word	0x24000160
 80002dc:	0800f2a8 	.word	0x0800f2a8

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <__LCD_Delay>:
/*
 * @brief Function to delay in microseconds
 * @param delay: value in microseconds to delay
 * @retval None
 */
void __LCD_Delay(uint16_t delay) {
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	80fb      	strh	r3, [r7, #6]

	__HAL_TIM_SET_COUNTER(&timer, 0);
 800069e:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <__LCD_Delay+0x30>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	2200      	movs	r2, #0
 80006a4:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < delay);
 80006a6:	bf00      	nop
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <__LCD_Delay+0x30>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80006ae:	88fb      	ldrh	r3, [r7, #6]
 80006b0:	429a      	cmp	r2, r3
 80006b2:	d3f9      	bcc.n	80006a8 <__LCD_Delay+0x14>

}
 80006b4:	bf00      	nop
 80006b6:	bf00      	nop
 80006b8:	370c      	adds	r7, #12
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	24000750 	.word	0x24000750

080006c8 <__LCD_Write4Bits>:
/*
 * @brief Function to write individual bits to the pins
 * @param value: value to write
 * @retval None
 */
void __LCD_Write4Bits(uint8_t value) {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(DATA4_PORT, DATA4_PIN, (value >> 3) & 0x01);
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	08db      	lsrs	r3, r3, #3
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	f003 0301 	and.w	r3, r3, #1
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	461a      	mov	r2, r3
 80006e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006e4:	481a      	ldr	r0, [pc, #104]	; (8000750 <__LCD_Write4Bits+0x88>)
 80006e6:	f005 fd09 	bl	80060fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DATA3_PORT, DATA3_PIN, (value >> 2) & 0x01);
 80006ea:	79fb      	ldrb	r3, [r7, #7]
 80006ec:	089b      	lsrs	r3, r3, #2
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	f003 0301 	and.w	r3, r3, #1
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	461a      	mov	r2, r3
 80006f8:	2102      	movs	r1, #2
 80006fa:	4816      	ldr	r0, [pc, #88]	; (8000754 <__LCD_Write4Bits+0x8c>)
 80006fc:	f005 fcfe 	bl	80060fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DATA2_PORT, DATA2_PIN, (value >> 1) & 0x01);
 8000700:	79fb      	ldrb	r3, [r7, #7]
 8000702:	085b      	lsrs	r3, r3, #1
 8000704:	b2db      	uxtb	r3, r3
 8000706:	f003 0301 	and.w	r3, r3, #1
 800070a:	b2db      	uxtb	r3, r3
 800070c:	461a      	mov	r2, r3
 800070e:	2140      	movs	r1, #64	; 0x40
 8000710:	480f      	ldr	r0, [pc, #60]	; (8000750 <__LCD_Write4Bits+0x88>)
 8000712:	f005 fcf3 	bl	80060fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DATA1_PORT, DATA1_PIN, value & 0x01);
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	f003 0301 	and.w	r3, r3, #1
 800071c:	b2db      	uxtb	r3, r3
 800071e:	461a      	mov	r2, r3
 8000720:	2108      	movs	r1, #8
 8000722:	480d      	ldr	r0, [pc, #52]	; (8000758 <__LCD_Write4Bits+0x90>)
 8000724:	f005 fcea 	bl	80060fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(E_PORT, E_PIN, 1);
 8000728:	2201      	movs	r2, #1
 800072a:	2140      	movs	r1, #64	; 0x40
 800072c:	480b      	ldr	r0, [pc, #44]	; (800075c <__LCD_Write4Bits+0x94>)
 800072e:	f005 fce5 	bl	80060fc <HAL_GPIO_WritePin>
	__LCD_Delay(120);
 8000732:	2078      	movs	r0, #120	; 0x78
 8000734:	f7ff ffae 	bl	8000694 <__LCD_Delay>
	HAL_GPIO_WritePin(E_PORT, E_PIN, 0);
 8000738:	2200      	movs	r2, #0
 800073a:	2140      	movs	r1, #64	; 0x40
 800073c:	4807      	ldr	r0, [pc, #28]	; (800075c <__LCD_Write4Bits+0x94>)
 800073e:	f005 fcdd 	bl	80060fc <HAL_GPIO_WritePin>
	__LCD_Delay(120);
 8000742:	2078      	movs	r0, #120	; 0x78
 8000744:	f7ff ffa6 	bl	8000694 <__LCD_Delay>

}
 8000748:	bf00      	nop
 800074a:	3708      	adds	r7, #8
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	58020000 	.word	0x58020000
 8000754:	58022800 	.word	0x58022800
 8000758:	58021800 	.word	0x58021800
 800075c:	58020400 	.word	0x58020400

08000760 <__LCD_Send>:
 * @brief Function to send data to the LCD and enable RS pin
 * @param value: value to send
 * @param state: state to set RS (register select) pin [0, 1]
 * @retval None
 */
void __LCD_Send(uint8_t value, int state) {
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	6039      	str	r1, [r7, #0]
 800076a:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(RS_PORT, RS_PIN, state);
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	b2db      	uxtb	r3, r3
 8000770:	461a      	mov	r2, r3
 8000772:	2180      	movs	r1, #128	; 0x80
 8000774:	4808      	ldr	r0, [pc, #32]	; (8000798 <__LCD_Send+0x38>)
 8000776:	f005 fcc1 	bl	80060fc <HAL_GPIO_WritePin>
	__LCD_Write4Bits(value >> 4);
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	091b      	lsrs	r3, r3, #4
 800077e:	b2db      	uxtb	r3, r3
 8000780:	4618      	mov	r0, r3
 8000782:	f7ff ffa1 	bl	80006c8 <__LCD_Write4Bits>
	__LCD_Write4Bits(value);
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	4618      	mov	r0, r3
 800078a:	f7ff ff9d 	bl	80006c8 <__LCD_Write4Bits>

}
 800078e:	bf00      	nop
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	58020400 	.word	0x58020400

0800079c <__LCD_Cmd>:
/*
 * @brief Function to send command to the LCD
 * @param value: command to send
 * @retval None
 */
void __LCD_Cmd(uint8_t value) {
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	71fb      	strb	r3, [r7, #7]

	__LCD_Send(value, 0);
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	2100      	movs	r1, #0
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff ffd8 	bl	8000760 <__LCD_Send>

}
 80007b0:	bf00      	nop
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <__LCD_Data>:
/*
 * @brief Function to send data to the LCD
 * @param value: value to send
 * @retval None
 */
void __LCD_Data(uint8_t value) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	71fb      	strb	r3, [r7, #7]

	__LCD_Send(value, 1);
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	2101      	movs	r1, #1
 80007c6:	4618      	mov	r0, r3
 80007c8:	f7ff ffca 	bl	8000760 <__LCD_Send>

}
 80007cc:	bf00      	nop
 80007ce:	3708      	adds	r7, #8
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <LCD_Write>:
/*
 * @brief Function to write to the LCD
 * @param value: value to write to the LCD
 * @retval None
 */
void LCD_Write(char *value) {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]

	while (*value) {
 80007dc:	e00a      	b.n	80007f4 <LCD_Write+0x20>
		__LCD_Data(*value++);
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	1c5a      	adds	r2, r3, #1
 80007e2:	607a      	str	r2, [r7, #4]
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	4618      	mov	r0, r3
 80007e8:	f7ff ffe6 	bl	80007b8 <__LCD_Data>
		__LCD_Delay(5000);
 80007ec:	f241 3088 	movw	r0, #5000	; 0x1388
 80007f0:	f7ff ff50 	bl	8000694 <__LCD_Delay>
	while (*value) {
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d1f0      	bne.n	80007de <LCD_Write+0xa>
		// HAL_Delay(1000);
	}

}
 80007fc:	bf00      	nop
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}

08000806 <LCD_Pos_Cursor>:
 * @brief Function to set the cursor position
 * @param row: row to set the cursor [0, 1]
 * @param col: column to set the cursor [0, 15]
 * @retval None
 */
void LCD_Pos_Cursor(uint8_t row, uint8_t col) {
 8000806:	b580      	push	{r7, lr}
 8000808:	b082      	sub	sp, #8
 800080a:	af00      	add	r7, sp, #0
 800080c:	4603      	mov	r3, r0
 800080e:	460a      	mov	r2, r1
 8000810:	71fb      	strb	r3, [r7, #7]
 8000812:	4613      	mov	r3, r2
 8000814:	71bb      	strb	r3, [r7, #6]

	switch (row) {
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d002      	beq.n	8000822 <LCD_Pos_Cursor+0x1c>
 800081c:	2b01      	cmp	r3, #1
 800081e:	d005      	beq.n	800082c <LCD_Pos_Cursor+0x26>
 8000820:	e009      	b.n	8000836 <LCD_Pos_Cursor+0x30>
		case 0:
			col |= 0x80;
 8000822:	79bb      	ldrb	r3, [r7, #6]
 8000824:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000828:	71bb      	strb	r3, [r7, #6]
	        break;
 800082a:	e009      	b.n	8000840 <LCD_Pos_Cursor+0x3a>
	    case 1:
	        col |= 0xC0;
 800082c:	79bb      	ldrb	r3, [r7, #6]
 800082e:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000832:	71bb      	strb	r3, [r7, #6]
	        break;
 8000834:	e004      	b.n	8000840 <LCD_Pos_Cursor+0x3a>
	    default:
	    	row = 0;
 8000836:	2300      	movs	r3, #0
 8000838:	71fb      	strb	r3, [r7, #7]
	    	col = 0;
 800083a:	2300      	movs	r3, #0
 800083c:	71bb      	strb	r3, [r7, #6]
	    	break;
 800083e:	bf00      	nop
	}
	__LCD_Cmd(col);
 8000840:	79bb      	ldrb	r3, [r7, #6]
 8000842:	4618      	mov	r0, r3
 8000844:	f7ff ffaa 	bl	800079c <__LCD_Cmd>

}
 8000848:	bf00      	nop
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}

08000850 <LCD_Clear>:
/*
 * @brief Function to clear the display
 * @param None
 * @retval None
 */
void LCD_Clear(void) {
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0

	__LCD_Cmd(CLEAR);
 8000854:	2001      	movs	r0, #1
 8000856:	f7ff ffa1 	bl	800079c <__LCD_Cmd>

}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}

0800085e <LCD_Scroll_Display_Right>:
/*
 * @brief Function to scroll the display right
 * @param None
 * @retval None
 */
void LCD_Scroll_Display_Right(void) {
 800085e:	b580      	push	{r7, lr}
 8000860:	af00      	add	r7, sp, #0

	__LCD_Cmd(SCROLL_DISPLAY_RIGHT);
 8000862:	201c      	movs	r0, #28
 8000864:	f7ff ff9a 	bl	800079c <__LCD_Cmd>

}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}

0800086c <LCD_Scroll_Display_Left>:
/*
 * @brief Function to scroll the display left
 * @param None
 * @retval None
 */
void LCD_Scroll_Display_Left(void) {
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0

	__LCD_Cmd(SCROLL_DISPLAY_LEFT);
 8000870:	2018      	movs	r0, #24
 8000872:	f7ff ff93 	bl	800079c <__LCD_Cmd>

}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}

0800087a <LCD_Init>:
 * @brief Function to initialize the LCD
 * @param cursor: true/false to enable cursor
 * @param blinking: true/false to enable blinking
 * @retval None
 */
void LCD_Init(bool cursor, bool blinking) {
 800087a:	b580      	push	{r7, lr}
 800087c:	b082      	sub	sp, #8
 800087e:	af00      	add	r7, sp, #0
 8000880:	4603      	mov	r3, r0
 8000882:	460a      	mov	r2, r1
 8000884:	71fb      	strb	r3, [r7, #7]
 8000886:	4613      	mov	r3, r2
 8000888:	71bb      	strb	r3, [r7, #6]

	// Init
	__LCD_Delay(50000);
 800088a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800088e:	f7ff ff01 	bl	8000694 <__LCD_Delay>
	__LCD_Cmd(0x30);
 8000892:	2030      	movs	r0, #48	; 0x30
 8000894:	f7ff ff82 	bl	800079c <__LCD_Cmd>
	__LCD_Delay(4500);
 8000898:	f241 1094 	movw	r0, #4500	; 0x1194
 800089c:	f7ff fefa 	bl	8000694 <__LCD_Delay>
	__LCD_Cmd(0x30);
 80008a0:	2030      	movs	r0, #48	; 0x30
 80008a2:	f7ff ff7b 	bl	800079c <__LCD_Cmd>
	__LCD_Delay(150);
 80008a6:	2096      	movs	r0, #150	; 0x96
 80008a8:	f7ff fef4 	bl	8000694 <__LCD_Delay>
	__LCD_Cmd(0x30);
 80008ac:	2030      	movs	r0, #48	; 0x30
 80008ae:	f7ff ff75 	bl	800079c <__LCD_Cmd>

	// Go to 4 bit mode
	__LCD_Delay(10);
 80008b2:	200a      	movs	r0, #10
 80008b4:	f7ff feee 	bl	8000694 <__LCD_Delay>
	__LCD_Cmd(0x20);
 80008b8:	2020      	movs	r0, #32
 80008ba:	f7ff ff6f 	bl	800079c <__LCD_Cmd>
	__LCD_Delay(50);
 80008be:	2032      	movs	r0, #50	; 0x32
 80008c0:	f7ff fee8 	bl	8000694 <__LCD_Delay>

	// Set display lines and font
	__LCD_Cmd(0x28);
 80008c4:	2028      	movs	r0, #40	; 0x28
 80008c6:	f7ff ff69 	bl	800079c <__LCD_Cmd>
	__LCD_Delay(50);
 80008ca:	2032      	movs	r0, #50	; 0x32
 80008cc:	f7ff fee2 	bl	8000694 <__LCD_Delay>

	// Display on/off
	__LCD_Cmd(0x08);
 80008d0:	2008      	movs	r0, #8
 80008d2:	f7ff ff63 	bl	800079c <__LCD_Cmd>
	__LCD_Delay(50);
 80008d6:	2032      	movs	r0, #50	; 0x32
 80008d8:	f7ff fedc 	bl	8000694 <__LCD_Delay>

	// Display clear
	__LCD_Cmd(0x01);
 80008dc:	2001      	movs	r0, #1
 80008de:	f7ff ff5d 	bl	800079c <__LCD_Cmd>
	__LCD_Delay(1500);
 80008e2:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80008e6:	f7ff fed5 	bl	8000694 <__LCD_Delay>

	// Entry mode set
	__LCD_Cmd(0x06);
 80008ea:	2006      	movs	r0, #6
 80008ec:	f7ff ff56 	bl	800079c <__LCD_Cmd>
	__LCD_Delay(50);
 80008f0:	2032      	movs	r0, #50	; 0x32
 80008f2:	f7ff fecf 	bl	8000694 <__LCD_Delay>

	// Display on/off
	if (cursor && blinking) {
 80008f6:	79fb      	ldrb	r3, [r7, #7]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d006      	beq.n	800090a <LCD_Init+0x90>
 80008fc:	79bb      	ldrb	r3, [r7, #6]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d003      	beq.n	800090a <LCD_Init+0x90>
		__LCD_Cmd(CURSOR_BLINK);
 8000902:	200f      	movs	r0, #15
 8000904:	f7ff ff4a 	bl	800079c <__LCD_Cmd>
 8000908:	e010      	b.n	800092c <LCD_Init+0xb2>
	} else if (cursor) {
 800090a:	79fb      	ldrb	r3, [r7, #7]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d003      	beq.n	8000918 <LCD_Init+0x9e>
		__LCD_Cmd(CURSOR);
 8000910:	200e      	movs	r0, #14
 8000912:	f7ff ff43 	bl	800079c <__LCD_Cmd>
 8000916:	e009      	b.n	800092c <LCD_Init+0xb2>
	} else if (blinking) {
 8000918:	79bb      	ldrb	r3, [r7, #6]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d003      	beq.n	8000926 <LCD_Init+0xac>
		__LCD_Cmd(BLINK);
 800091e:	200d      	movs	r0, #13
 8000920:	f7ff ff3c 	bl	800079c <__LCD_Cmd>
 8000924:	e002      	b.n	800092c <LCD_Init+0xb2>
	} else {
		__LCD_Cmd(NO_BLINK_NO_CURSOR);
 8000926:	200c      	movs	r0, #12
 8000928:	f7ff ff38 	bl	800079c <__LCD_Cmd>
	}

	__LCD_Delay(50000);
 800092c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000930:	f7ff feb0 	bl	8000694 <__LCD_Delay>
	LCD_Pos_Cursor(0, 0);
 8000934:	2100      	movs	r1, #0
 8000936:	2000      	movs	r0, #0
 8000938:	f7ff ff65 	bl	8000806 <LCD_Pos_Cursor>

}
 800093c:	bf00      	nop
 800093e:	3708      	adds	r7, #8
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}

08000944 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800094a:	f002 fab1 	bl	8002eb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800094e:	f000 f89d 	bl	8000a8c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000952:	f000 f91d 	bl	8000b90 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000956:	f000 fed9 	bl	800170c <MX_GPIO_Init>
  MX_ADC1_Init();
 800095a:	f000 f949 	bl	8000bf0 <MX_ADC1_Init>
  MX_ADC2_Init();
 800095e:	f000 f9bd 	bl	8000cdc <MX_ADC2_Init>
  MX_ADC3_Init();
 8000962:	f000 fa1f 	bl	8000da4 <MX_ADC3_Init>
  MX_ETH_Init();
 8000966:	f000 fa7f 	bl	8000e68 <MX_ETH_Init>
  MX_FDCAN1_Init();
 800096a:	f000 fac9 	bl	8000f00 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 800096e:	f000 fb2b 	bl	8000fc8 <MX_FDCAN2_Init>
  MX_FMC_Init();
 8000972:	f000 fe7d 	bl	8001670 <MX_FMC_Init>
  MX_LTDC_Init();
 8000976:	f000 fb8b 	bl	8001090 <MX_LTDC_Init>
  MX_RTC_Init();
 800097a:	f000 fc3b 	bl	80011f4 <MX_RTC_Init>
  MX_SAI2_Init();
 800097e:	f000 fc95 	bl	80012ac <MX_SAI2_Init>
  MX_SPI2_Init();
 8000982:	f000 fd51 	bl	8001428 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 8000986:	f000 fdf5 	bl	8001574 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800098a:	f000 fe3f 	bl	800160c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 800098e:	f000 fd9f 	bl	80014d0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  STATE state = SETUP;
 8000992:	2300      	movs	r3, #0
 8000994:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  switch (state) {
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	2b06      	cmp	r3, #6
 800099a:	d864      	bhi.n	8000a66 <main+0x122>
 800099c:	a201      	add	r2, pc, #4	; (adr r2, 80009a4 <main+0x60>)
 800099e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009a2:	bf00      	nop
 80009a4:	080009c1 	.word	0x080009c1
 80009a8:	080009cf 	.word	0x080009cf
 80009ac:	080009df 	.word	0x080009df
 80009b0:	080009f3 	.word	0x080009f3
 80009b4:	08000a05 	.word	0x08000a05
 80009b8:	08000a47 	.word	0x08000a47
 80009bc:	08000a57 	.word	0x08000a57
	  	  case SETUP:
	  		  LCD_Init(true, false);
 80009c0:	2100      	movs	r1, #0
 80009c2:	2001      	movs	r0, #1
 80009c4:	f7ff ff59 	bl	800087a <LCD_Init>
	  		  state = SHOW_MENU;
 80009c8:	2301      	movs	r3, #1
 80009ca:	71fb      	strb	r3, [r7, #7]
	  		  break;
 80009cc:	e053      	b.n	8000a76 <main+0x132>
	  	  case SHOW_MENU:
	  		  if (printWelcomeText()) {
 80009ce:	f001 f8b1 	bl	8001b34 <printWelcomeText>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d049      	beq.n	8000a6c <main+0x128>
	  			  state = SHOW_PROMPT;
 80009d8:	2302      	movs	r3, #2
 80009da:	71fb      	strb	r3, [r7, #7]
	  		  }
	  		  break;
 80009dc:	e046      	b.n	8000a6c <main+0x128>
	  	  case SHOW_PROMPT:
	  		  if (printString(inputPrompt)) {
 80009de:	4b28      	ldr	r3, [pc, #160]	; (8000a80 <main+0x13c>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4618      	mov	r0, r3
 80009e4:	f001 f8c8 	bl	8001b78 <printString>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <main+0xae>
	  			  state = GET_OPTION;
 80009ee:	2303      	movs	r3, #3
 80009f0:	71fb      	strb	r3, [r7, #7]
	  		  }
	  	  case GET_OPTION:
	  		  if (receiveValue(1)) {
 80009f2:	2001      	movs	r0, #1
 80009f4:	f001 f8dc 	bl	8001bb0 <receiveValue>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d038      	beq.n	8000a70 <main+0x12c>
	  			  state = SELECT_PROGRAM;
 80009fe:	2304      	movs	r3, #4
 8000a00:	71fb      	strb	r3, [r7, #7]
	  		  }
	  		  break;
 8000a02:	e035      	b.n	8000a70 <main+0x12c>
	  	  case SELECT_PROGRAM:
	  		  if (haveReceived && printString(rxBuffer)) {
 8000a04:	4b1f      	ldr	r3, [pc, #124]	; (8000a84 <main+0x140>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d033      	beq.n	8000a74 <main+0x130>
 8000a0c:	481e      	ldr	r0, [pc, #120]	; (8000a88 <main+0x144>)
 8000a0e:	f001 f8b3 	bl	8001b78 <printString>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d02d      	beq.n	8000a74 <main+0x130>
	  			  switch (rxBuffer[0]) {
 8000a18:	4b1b      	ldr	r3, [pc, #108]	; (8000a88 <main+0x144>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	2b31      	cmp	r3, #49	; 0x31
 8000a1e:	d002      	beq.n	8000a26 <main+0xe2>
 8000a20:	2b32      	cmp	r3, #50	; 0x32
 8000a22:	d003      	beq.n	8000a2c <main+0xe8>
 8000a24:	e005      	b.n	8000a32 <main+0xee>
	  			  	  case '1':
	  			  		  state = MOVE_TEXT;
 8000a26:	2305      	movs	r3, #5
 8000a28:	71fb      	strb	r3, [r7, #7]
	  			  		  break;
 8000a2a:	e005      	b.n	8000a38 <main+0xf4>
	  			  	  case '2':
	  			  		  state = CLOCK_F;
 8000a2c:	2306      	movs	r3, #6
 8000a2e:	71fb      	strb	r3, [r7, #7]
	  			  		  break;
 8000a30:	e002      	b.n	8000a38 <main+0xf4>
	  			  	  default:
	  			  		  state = SHOW_PROMPT;
 8000a32:	2302      	movs	r3, #2
 8000a34:	71fb      	strb	r3, [r7, #7]
	  			  		  break;
 8000a36:	bf00      	nop
	  			  }
	  			  if (state != SELECT_PROGRAM) {
 8000a38:	79fb      	ldrb	r3, [r7, #7]
 8000a3a:	2b04      	cmp	r3, #4
 8000a3c:	d01a      	beq.n	8000a74 <main+0x130>
	  				  haveReceived = false;
 8000a3e:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <main+0x140>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	701a      	strb	r2, [r3, #0]
	  			  }
	  		  }
	  		  break;
 8000a44:	e016      	b.n	8000a74 <main+0x130>
	  	  case MOVE_TEXT:
	  		  moveTextLCD();
 8000a46:	f001 f8cd 	bl	8001be4 <moveTextLCD>
	  		  state = SHOW_PROMPT;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	71fb      	strb	r3, [r7, #7]
	  		  haveReceived = false;
 8000a4e:	4b0d      	ldr	r3, [pc, #52]	; (8000a84 <main+0x140>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	701a      	strb	r2, [r3, #0]
	  		  break;
 8000a54:	e00f      	b.n	8000a76 <main+0x132>
	  	  case CLOCK_F:
	  		  displayClock();
 8000a56:	f001 f92f 	bl	8001cb8 <displayClock>
	  		  state = SHOW_PROMPT;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	71fb      	strb	r3, [r7, #7]
	  		  haveReceived = false;
 8000a5e:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <main+0x140>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	701a      	strb	r2, [r3, #0]
	  		  break;
 8000a64:	e007      	b.n	8000a76 <main+0x132>
	  	  default:
	  		  return -1;
 8000a66:	f04f 33ff 	mov.w	r3, #4294967295
 8000a6a:	e005      	b.n	8000a78 <main+0x134>
	  		  break;
 8000a6c:	bf00      	nop
 8000a6e:	e792      	b.n	8000996 <main+0x52>
	  		  break;
 8000a70:	bf00      	nop
 8000a72:	e790      	b.n	8000996 <main+0x52>
	  		  break;
 8000a74:	bf00      	nop
	  switch (state) {
 8000a76:	e78e      	b.n	8000996 <main+0x52>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3708      	adds	r7, #8
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	24000020 	.word	0x24000020
 8000a84:	24000d70 	.word	0x24000d70
 8000a88:	24000d74 	.word	0x24000d74

08000a8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b09c      	sub	sp, #112	; 0x70
 8000a90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a96:	224c      	movs	r2, #76	; 0x4c
 8000a98:	2100      	movs	r1, #0
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f00d ff9c 	bl	800e9d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aa0:	1d3b      	adds	r3, r7, #4
 8000aa2:	2220      	movs	r2, #32
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f00d ff96 	bl	800e9d8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000aac:	2002      	movs	r0, #2
 8000aae:	f005 ff2f 	bl	8006910 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	603b      	str	r3, [r7, #0]
 8000ab6:	4b34      	ldr	r3, [pc, #208]	; (8000b88 <SystemClock_Config+0xfc>)
 8000ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aba:	4a33      	ldr	r2, [pc, #204]	; (8000b88 <SystemClock_Config+0xfc>)
 8000abc:	f023 0301 	bic.w	r3, r3, #1
 8000ac0:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000ac2:	4b31      	ldr	r3, [pc, #196]	; (8000b88 <SystemClock_Config+0xfc>)
 8000ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	603b      	str	r3, [r7, #0]
 8000acc:	4b2f      	ldr	r3, [pc, #188]	; (8000b8c <SystemClock_Config+0x100>)
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ad4:	4a2d      	ldr	r2, [pc, #180]	; (8000b8c <SystemClock_Config+0x100>)
 8000ad6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ada:	6193      	str	r3, [r2, #24]
 8000adc:	4b2b      	ldr	r3, [pc, #172]	; (8000b8c <SystemClock_Config+0x100>)
 8000ade:	699b      	ldr	r3, [r3, #24]
 8000ae0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ae4:	603b      	str	r3, [r7, #0]
 8000ae6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ae8:	bf00      	nop
 8000aea:	4b28      	ldr	r3, [pc, #160]	; (8000b8c <SystemClock_Config+0x100>)
 8000aec:	699b      	ldr	r3, [r3, #24]
 8000aee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000af2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000af6:	d1f8      	bne.n	8000aea <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000af8:	230b      	movs	r3, #11
 8000afa:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000afc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b00:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000b02:	2301      	movs	r3, #1
 8000b04:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b06:	2340      	movs	r3, #64	; 0x40
 8000b08:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b12:	2302      	movs	r3, #2
 8000b14:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 22;
 8000b16:	2316      	movs	r3, #22
 8000b18:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 169;
 8000b1a:	23a9      	movs	r3, #169	; 0xa9
 8000b1c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b22:	2304      	movs	r3, #4
 8000b24:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b26:	2302      	movs	r3, #2
 8000b28:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b32:	2300      	movs	r3, #0
 8000b34:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f005 ff32 	bl	80069a4 <HAL_RCC_OscConfig>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000b46:	f001 f911 	bl	8001d6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b4a:	233f      	movs	r3, #63	; 0x3f
 8000b4c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b52:	2300      	movs	r3, #0
 8000b54:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000b56:	2300      	movs	r3, #0
 8000b58:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000b62:	2300      	movs	r3, #0
 8000b64:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000b66:	2300      	movs	r3, #0
 8000b68:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b6a:	1d3b      	adds	r3, r7, #4
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f006 fb72 	bl	8007258 <HAL_RCC_ClockConfig>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000b7a:	f001 f8f7 	bl	8001d6c <Error_Handler>
  }
}
 8000b7e:	bf00      	nop
 8000b80:	3770      	adds	r7, #112	; 0x70
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	58000400 	.word	0x58000400
 8000b8c:	58024800 	.word	0x58024800

08000b90 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b0b0      	sub	sp, #192	; 0xc0
 8000b94:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b96:	463b      	mov	r3, r7
 8000b98:	22c0      	movs	r2, #192	; 0xc0
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f00d ff1b 	bl	800e9d8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000ba2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000ba6:	f04f 0300 	mov.w	r3, #0
 8000baa:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000bb2:	230c      	movs	r3, #12
 8000bb4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 8000bb6:	2305      	movs	r3, #5
 8000bb8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000bc2:	23c0      	movs	r3, #192	; 0xc0
 8000bc4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000bc6:	2320      	movs	r3, #32
 8000bc8:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bd4:	463b      	mov	r3, r7
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f006 feca 	bl	8007970 <HAL_RCCEx_PeriphCLKConfig>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000be2:	f001 f8c3 	bl	8001d6c <Error_Handler>
  }
}
 8000be6:	bf00      	nop
 8000be8:	37c0      	adds	r7, #192	; 0xc0
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
	...

08000bf0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08a      	sub	sp, #40	; 0x28
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000bf6:	f107 031c 	add.w	r3, r7, #28
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c02:	463b      	mov	r3, r7
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
 8000c0e:	611a      	str	r2, [r3, #16]
 8000c10:	615a      	str	r2, [r3, #20]
 8000c12:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c14:	4b2f      	ldr	r3, [pc, #188]	; (8000cd4 <MX_ADC1_Init+0xe4>)
 8000c16:	4a30      	ldr	r2, [pc, #192]	; (8000cd8 <MX_ADC1_Init+0xe8>)
 8000c18:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c1a:	4b2e      	ldr	r3, [pc, #184]	; (8000cd4 <MX_ADC1_Init+0xe4>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000c20:	4b2c      	ldr	r3, [pc, #176]	; (8000cd4 <MX_ADC1_Init+0xe4>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c26:	4b2b      	ldr	r3, [pc, #172]	; (8000cd4 <MX_ADC1_Init+0xe4>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c2c:	4b29      	ldr	r3, [pc, #164]	; (8000cd4 <MX_ADC1_Init+0xe4>)
 8000c2e:	2204      	movs	r2, #4
 8000c30:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c32:	4b28      	ldr	r3, [pc, #160]	; (8000cd4 <MX_ADC1_Init+0xe4>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c38:	4b26      	ldr	r3, [pc, #152]	; (8000cd4 <MX_ADC1_Init+0xe4>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000c3e:	4b25      	ldr	r3, [pc, #148]	; (8000cd4 <MX_ADC1_Init+0xe4>)
 8000c40:	2201      	movs	r2, #1
 8000c42:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c44:	4b23      	ldr	r3, [pc, #140]	; (8000cd4 <MX_ADC1_Init+0xe4>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c4a:	4b22      	ldr	r3, [pc, #136]	; (8000cd4 <MX_ADC1_Init+0xe4>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c50:	4b20      	ldr	r3, [pc, #128]	; (8000cd4 <MX_ADC1_Init+0xe4>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000c56:	4b1f      	ldr	r3, [pc, #124]	; (8000cd4 <MX_ADC1_Init+0xe4>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c5c:	4b1d      	ldr	r3, [pc, #116]	; (8000cd4 <MX_ADC1_Init+0xe4>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000c62:	4b1c      	ldr	r3, [pc, #112]	; (8000cd4 <MX_ADC1_Init+0xe4>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000c68:	4b1a      	ldr	r3, [pc, #104]	; (8000cd4 <MX_ADC1_Init+0xe4>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c70:	4818      	ldr	r0, [pc, #96]	; (8000cd4 <MX_ADC1_Init+0xe4>)
 8000c72:	f002 fb95 	bl	80033a0 <HAL_ADC_Init>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000c7c:	f001 f876 	bl	8001d6c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c80:	2300      	movs	r3, #0
 8000c82:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c84:	f107 031c 	add.w	r3, r7, #28
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4812      	ldr	r0, [pc, #72]	; (8000cd4 <MX_ADC1_Init+0xe4>)
 8000c8c:	f003 f9ac 	bl	8003fe8 <HAL_ADCEx_MultiModeConfigChannel>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000c96:	f001 f869 	bl	8001d6c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c9e:	2306      	movs	r3, #6
 8000ca0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ca6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000caa:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000cac:	2304      	movs	r3, #4
 8000cae:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cb8:	463b      	mov	r3, r7
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4805      	ldr	r0, [pc, #20]	; (8000cd4 <MX_ADC1_Init+0xe4>)
 8000cbe:	f002 fd11 	bl	80036e4 <HAL_ADC_ConfigChannel>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000cc8:	f001 f850 	bl	8001d6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ccc:	bf00      	nop
 8000cce:	3728      	adds	r7, #40	; 0x28
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	240001b0 	.word	0x240001b0
 8000cd8:	40022000 	.word	0x40022000

08000cdc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b088      	sub	sp, #32
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ce2:	1d3b      	adds	r3, r7, #4
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
 8000cee:	611a      	str	r2, [r3, #16]
 8000cf0:	615a      	str	r2, [r3, #20]
 8000cf2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000cf4:	4b29      	ldr	r3, [pc, #164]	; (8000d9c <MX_ADC2_Init+0xc0>)
 8000cf6:	4a2a      	ldr	r2, [pc, #168]	; (8000da0 <MX_ADC2_Init+0xc4>)
 8000cf8:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000cfa:	4b28      	ldr	r3, [pc, #160]	; (8000d9c <MX_ADC2_Init+0xc0>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000d00:	4b26      	ldr	r3, [pc, #152]	; (8000d9c <MX_ADC2_Init+0xc0>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d06:	4b25      	ldr	r3, [pc, #148]	; (8000d9c <MX_ADC2_Init+0xc0>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d0c:	4b23      	ldr	r3, [pc, #140]	; (8000d9c <MX_ADC2_Init+0xc0>)
 8000d0e:	2204      	movs	r2, #4
 8000d10:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000d12:	4b22      	ldr	r3, [pc, #136]	; (8000d9c <MX_ADC2_Init+0xc0>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000d18:	4b20      	ldr	r3, [pc, #128]	; (8000d9c <MX_ADC2_Init+0xc0>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000d1e:	4b1f      	ldr	r3, [pc, #124]	; (8000d9c <MX_ADC2_Init+0xc0>)
 8000d20:	2201      	movs	r2, #1
 8000d22:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000d24:	4b1d      	ldr	r3, [pc, #116]	; (8000d9c <MX_ADC2_Init+0xc0>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d2a:	4b1c      	ldr	r3, [pc, #112]	; (8000d9c <MX_ADC2_Init+0xc0>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d30:	4b1a      	ldr	r3, [pc, #104]	; (8000d9c <MX_ADC2_Init+0xc0>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000d36:	4b19      	ldr	r3, [pc, #100]	; (8000d9c <MX_ADC2_Init+0xc0>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d3c:	4b17      	ldr	r3, [pc, #92]	; (8000d9c <MX_ADC2_Init+0xc0>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000d42:	4b16      	ldr	r3, [pc, #88]	; (8000d9c <MX_ADC2_Init+0xc0>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000d48:	4b14      	ldr	r3, [pc, #80]	; (8000d9c <MX_ADC2_Init+0xc0>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000d50:	4812      	ldr	r0, [pc, #72]	; (8000d9c <MX_ADC2_Init+0xc0>)
 8000d52:	f002 fb25 	bl	80033a0 <HAL_ADC_Init>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8000d5c:	f001 f806 	bl	8001d6c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000d60:	2301      	movs	r3, #1
 8000d62:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d64:	2306      	movs	r3, #6
 8000d66:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d6c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000d70:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d72:	2304      	movs	r3, #4
 8000d74:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000d76:	2300      	movs	r3, #0
 8000d78:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000d7e:	1d3b      	adds	r3, r7, #4
 8000d80:	4619      	mov	r1, r3
 8000d82:	4806      	ldr	r0, [pc, #24]	; (8000d9c <MX_ADC2_Init+0xc0>)
 8000d84:	f002 fcae 	bl	80036e4 <HAL_ADC_ConfigChannel>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000d8e:	f000 ffed 	bl	8001d6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000d92:	bf00      	nop
 8000d94:	3720      	adds	r7, #32
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	24000214 	.word	0x24000214
 8000da0:	40022100 	.word	0x40022100

08000da4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b088      	sub	sp, #32
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000daa:	1d3b      	adds	r3, r7, #4
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]
 8000db8:	615a      	str	r2, [r3, #20]
 8000dba:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000dbc:	4b27      	ldr	r3, [pc, #156]	; (8000e5c <MX_ADC3_Init+0xb8>)
 8000dbe:	4a28      	ldr	r2, [pc, #160]	; (8000e60 <MX_ADC3_Init+0xbc>)
 8000dc0:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000dc2:	4b26      	ldr	r3, [pc, #152]	; (8000e5c <MX_ADC3_Init+0xb8>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000dc8:	4b24      	ldr	r3, [pc, #144]	; (8000e5c <MX_ADC3_Init+0xb8>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dce:	4b23      	ldr	r3, [pc, #140]	; (8000e5c <MX_ADC3_Init+0xb8>)
 8000dd0:	2204      	movs	r2, #4
 8000dd2:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000dd4:	4b21      	ldr	r3, [pc, #132]	; (8000e5c <MX_ADC3_Init+0xb8>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000dda:	4b20      	ldr	r3, [pc, #128]	; (8000e5c <MX_ADC3_Init+0xb8>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000de0:	4b1e      	ldr	r3, [pc, #120]	; (8000e5c <MX_ADC3_Init+0xb8>)
 8000de2:	2201      	movs	r2, #1
 8000de4:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000de6:	4b1d      	ldr	r3, [pc, #116]	; (8000e5c <MX_ADC3_Init+0xb8>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dec:	4b1b      	ldr	r3, [pc, #108]	; (8000e5c <MX_ADC3_Init+0xb8>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000df2:	4b1a      	ldr	r3, [pc, #104]	; (8000e5c <MX_ADC3_Init+0xb8>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000df8:	4b18      	ldr	r3, [pc, #96]	; (8000e5c <MX_ADC3_Init+0xb8>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000dfe:	4b17      	ldr	r3, [pc, #92]	; (8000e5c <MX_ADC3_Init+0xb8>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000e04:	4b15      	ldr	r3, [pc, #84]	; (8000e5c <MX_ADC3_Init+0xb8>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000e0a:	4b14      	ldr	r3, [pc, #80]	; (8000e5c <MX_ADC3_Init+0xb8>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000e12:	4812      	ldr	r0, [pc, #72]	; (8000e5c <MX_ADC3_Init+0xb8>)
 8000e14:	f002 fac4 	bl	80033a0 <HAL_ADC_Init>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_ADC3_Init+0x7e>
  {
    Error_Handler();
 8000e1e:	f000 ffa5 	bl	8001d6c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000e22:	4b10      	ldr	r3, [pc, #64]	; (8000e64 <MX_ADC3_Init+0xc0>)
 8000e24:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e26:	2306      	movs	r3, #6
 8000e28:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e2e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000e32:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e34:	2304      	movs	r3, #4
 8000e36:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000e40:	1d3b      	adds	r3, r7, #4
 8000e42:	4619      	mov	r1, r3
 8000e44:	4805      	ldr	r0, [pc, #20]	; (8000e5c <MX_ADC3_Init+0xb8>)
 8000e46:	f002 fc4d 	bl	80036e4 <HAL_ADC_ConfigChannel>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8000e50:	f000 ff8c 	bl	8001d6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000e54:	bf00      	nop
 8000e56:	3720      	adds	r7, #32
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	24000278 	.word	0x24000278
 8000e60:	58026000 	.word	0x58026000
 8000e64:	1d500080 	.word	0x1d500080

08000e68 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000e6c:	4b1e      	ldr	r3, [pc, #120]	; (8000ee8 <MX_ETH_Init+0x80>)
 8000e6e:	4a1f      	ldr	r2, [pc, #124]	; (8000eec <MX_ETH_Init+0x84>)
 8000e70:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000e72:	4b1f      	ldr	r3, [pc, #124]	; (8000ef0 <MX_ETH_Init+0x88>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000e78:	4b1d      	ldr	r3, [pc, #116]	; (8000ef0 <MX_ETH_Init+0x88>)
 8000e7a:	2280      	movs	r2, #128	; 0x80
 8000e7c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000e7e:	4b1c      	ldr	r3, [pc, #112]	; (8000ef0 <MX_ETH_Init+0x88>)
 8000e80:	22e1      	movs	r2, #225	; 0xe1
 8000e82:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000e84:	4b1a      	ldr	r3, [pc, #104]	; (8000ef0 <MX_ETH_Init+0x88>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000e8a:	4b19      	ldr	r3, [pc, #100]	; (8000ef0 <MX_ETH_Init+0x88>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000e90:	4b17      	ldr	r3, [pc, #92]	; (8000ef0 <MX_ETH_Init+0x88>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000e96:	4b14      	ldr	r3, [pc, #80]	; (8000ee8 <MX_ETH_Init+0x80>)
 8000e98:	4a15      	ldr	r2, [pc, #84]	; (8000ef0 <MX_ETH_Init+0x88>)
 8000e9a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_MII_MODE;
 8000e9c:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <MX_ETH_Init+0x80>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000ea2:	4b11      	ldr	r3, [pc, #68]	; (8000ee8 <MX_ETH_Init+0x80>)
 8000ea4:	4a13      	ldr	r2, [pc, #76]	; (8000ef4 <MX_ETH_Init+0x8c>)
 8000ea6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000ea8:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <MX_ETH_Init+0x80>)
 8000eaa:	4a13      	ldr	r2, [pc, #76]	; (8000ef8 <MX_ETH_Init+0x90>)
 8000eac:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000eae:	4b0e      	ldr	r3, [pc, #56]	; (8000ee8 <MX_ETH_Init+0x80>)
 8000eb0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000eb4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000eb6:	480c      	ldr	r0, [pc, #48]	; (8000ee8 <MX_ETH_Init+0x80>)
 8000eb8:	f003 ffe8 	bl	8004e8c <HAL_ETH_Init>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000ec2:	f000 ff53 	bl	8001d6c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000ec6:	2238      	movs	r2, #56	; 0x38
 8000ec8:	2100      	movs	r1, #0
 8000eca:	480c      	ldr	r0, [pc, #48]	; (8000efc <MX_ETH_Init+0x94>)
 8000ecc:	f00d fd84 	bl	800e9d8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000ed0:	4b0a      	ldr	r3, [pc, #40]	; (8000efc <MX_ETH_Init+0x94>)
 8000ed2:	2221      	movs	r2, #33	; 0x21
 8000ed4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000ed6:	4b09      	ldr	r3, [pc, #36]	; (8000efc <MX_ETH_Init+0x94>)
 8000ed8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000edc:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000ede:	4b07      	ldr	r3, [pc, #28]	; (8000efc <MX_ETH_Init+0x94>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	240002dc 	.word	0x240002dc
 8000eec:	40028000 	.word	0x40028000
 8000ef0:	24000dac 	.word	0x24000dac
 8000ef4:	240000fc 	.word	0x240000fc
 8000ef8:	2400009c 	.word	0x2400009c
 8000efc:	24000178 	.word	0x24000178

08000f00 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000f04:	4b2e      	ldr	r3, [pc, #184]	; (8000fc0 <MX_FDCAN1_Init+0xc0>)
 8000f06:	4a2f      	ldr	r2, [pc, #188]	; (8000fc4 <MX_FDCAN1_Init+0xc4>)
 8000f08:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000f0a:	4b2d      	ldr	r3, [pc, #180]	; (8000fc0 <MX_FDCAN1_Init+0xc0>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000f10:	4b2b      	ldr	r3, [pc, #172]	; (8000fc0 <MX_FDCAN1_Init+0xc0>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000f16:	4b2a      	ldr	r3, [pc, #168]	; (8000fc0 <MX_FDCAN1_Init+0xc0>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000f1c:	4b28      	ldr	r3, [pc, #160]	; (8000fc0 <MX_FDCAN1_Init+0xc0>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000f22:	4b27      	ldr	r3, [pc, #156]	; (8000fc0 <MX_FDCAN1_Init+0xc0>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000f28:	4b25      	ldr	r3, [pc, #148]	; (8000fc0 <MX_FDCAN1_Init+0xc0>)
 8000f2a:	2210      	movs	r2, #16
 8000f2c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000f2e:	4b24      	ldr	r3, [pc, #144]	; (8000fc0 <MX_FDCAN1_Init+0xc0>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000f34:	4b22      	ldr	r3, [pc, #136]	; (8000fc0 <MX_FDCAN1_Init+0xc0>)
 8000f36:	2202      	movs	r2, #2
 8000f38:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000f3a:	4b21      	ldr	r3, [pc, #132]	; (8000fc0 <MX_FDCAN1_Init+0xc0>)
 8000f3c:	2202      	movs	r2, #2
 8000f3e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000f40:	4b1f      	ldr	r3, [pc, #124]	; (8000fc0 <MX_FDCAN1_Init+0xc0>)
 8000f42:	2201      	movs	r2, #1
 8000f44:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000f46:	4b1e      	ldr	r3, [pc, #120]	; (8000fc0 <MX_FDCAN1_Init+0xc0>)
 8000f48:	2201      	movs	r2, #1
 8000f4a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000f4c:	4b1c      	ldr	r3, [pc, #112]	; (8000fc0 <MX_FDCAN1_Init+0xc0>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000f52:	4b1b      	ldr	r3, [pc, #108]	; (8000fc0 <MX_FDCAN1_Init+0xc0>)
 8000f54:	2201      	movs	r2, #1
 8000f56:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000f58:	4b19      	ldr	r3, [pc, #100]	; (8000fc0 <MX_FDCAN1_Init+0xc0>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000f5e:	4b18      	ldr	r3, [pc, #96]	; (8000fc0 <MX_FDCAN1_Init+0xc0>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000f64:	4b16      	ldr	r3, [pc, #88]	; (8000fc0 <MX_FDCAN1_Init+0xc0>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000f6a:	4b15      	ldr	r3, [pc, #84]	; (8000fc0 <MX_FDCAN1_Init+0xc0>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000f70:	4b13      	ldr	r3, [pc, #76]	; (8000fc0 <MX_FDCAN1_Init+0xc0>)
 8000f72:	2204      	movs	r2, #4
 8000f74:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000f76:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <MX_FDCAN1_Init+0xc0>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000f7c:	4b10      	ldr	r3, [pc, #64]	; (8000fc0 <MX_FDCAN1_Init+0xc0>)
 8000f7e:	2204      	movs	r2, #4
 8000f80:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000f82:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <MX_FDCAN1_Init+0xc0>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000f88:	4b0d      	ldr	r3, [pc, #52]	; (8000fc0 <MX_FDCAN1_Init+0xc0>)
 8000f8a:	2204      	movs	r2, #4
 8000f8c:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000f8e:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <MX_FDCAN1_Init+0xc0>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000f94:	4b0a      	ldr	r3, [pc, #40]	; (8000fc0 <MX_FDCAN1_Init+0xc0>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000f9a:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <MX_FDCAN1_Init+0xc0>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000fa0:	4b07      	ldr	r3, [pc, #28]	; (8000fc0 <MX_FDCAN1_Init+0xc0>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000fa6:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <MX_FDCAN1_Init+0xc0>)
 8000fa8:	2204      	movs	r2, #4
 8000faa:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000fac:	4804      	ldr	r0, [pc, #16]	; (8000fc0 <MX_FDCAN1_Init+0xc0>)
 8000fae:	f004 fb91 	bl	80056d4 <HAL_FDCAN_Init>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000fb8:	f000 fed8 	bl	8001d6c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	2400038c 	.word	0x2400038c
 8000fc4:	4000a000 	.word	0x4000a000

08000fc8 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000fcc:	4b2e      	ldr	r3, [pc, #184]	; (8001088 <MX_FDCAN2_Init+0xc0>)
 8000fce:	4a2f      	ldr	r2, [pc, #188]	; (800108c <MX_FDCAN2_Init+0xc4>)
 8000fd0:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000fd2:	4b2d      	ldr	r3, [pc, #180]	; (8001088 <MX_FDCAN2_Init+0xc0>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000fd8:	4b2b      	ldr	r3, [pc, #172]	; (8001088 <MX_FDCAN2_Init+0xc0>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000fde:	4b2a      	ldr	r3, [pc, #168]	; (8001088 <MX_FDCAN2_Init+0xc0>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000fe4:	4b28      	ldr	r3, [pc, #160]	; (8001088 <MX_FDCAN2_Init+0xc0>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000fea:	4b27      	ldr	r3, [pc, #156]	; (8001088 <MX_FDCAN2_Init+0xc0>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8000ff0:	4b25      	ldr	r3, [pc, #148]	; (8001088 <MX_FDCAN2_Init+0xc0>)
 8000ff2:	2210      	movs	r2, #16
 8000ff4:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000ff6:	4b24      	ldr	r3, [pc, #144]	; (8001088 <MX_FDCAN2_Init+0xc0>)
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000ffc:	4b22      	ldr	r3, [pc, #136]	; (8001088 <MX_FDCAN2_Init+0xc0>)
 8000ffe:	2202      	movs	r2, #2
 8001000:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8001002:	4b21      	ldr	r3, [pc, #132]	; (8001088 <MX_FDCAN2_Init+0xc0>)
 8001004:	2202      	movs	r2, #2
 8001006:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8001008:	4b1f      	ldr	r3, [pc, #124]	; (8001088 <MX_FDCAN2_Init+0xc0>)
 800100a:	2201      	movs	r2, #1
 800100c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 800100e:	4b1e      	ldr	r3, [pc, #120]	; (8001088 <MX_FDCAN2_Init+0xc0>)
 8001010:	2201      	movs	r2, #1
 8001012:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8001014:	4b1c      	ldr	r3, [pc, #112]	; (8001088 <MX_FDCAN2_Init+0xc0>)
 8001016:	2201      	movs	r2, #1
 8001018:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 800101a:	4b1b      	ldr	r3, [pc, #108]	; (8001088 <MX_FDCAN2_Init+0xc0>)
 800101c:	2201      	movs	r2, #1
 800101e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8001020:	4b19      	ldr	r3, [pc, #100]	; (8001088 <MX_FDCAN2_Init+0xc0>)
 8001022:	2200      	movs	r2, #0
 8001024:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8001026:	4b18      	ldr	r3, [pc, #96]	; (8001088 <MX_FDCAN2_Init+0xc0>)
 8001028:	2200      	movs	r2, #0
 800102a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 800102c:	4b16      	ldr	r3, [pc, #88]	; (8001088 <MX_FDCAN2_Init+0xc0>)
 800102e:	2200      	movs	r2, #0
 8001030:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8001032:	4b15      	ldr	r3, [pc, #84]	; (8001088 <MX_FDCAN2_Init+0xc0>)
 8001034:	2200      	movs	r2, #0
 8001036:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001038:	4b13      	ldr	r3, [pc, #76]	; (8001088 <MX_FDCAN2_Init+0xc0>)
 800103a:	2204      	movs	r2, #4
 800103c:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 800103e:	4b12      	ldr	r3, [pc, #72]	; (8001088 <MX_FDCAN2_Init+0xc0>)
 8001040:	2200      	movs	r2, #0
 8001042:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001044:	4b10      	ldr	r3, [pc, #64]	; (8001088 <MX_FDCAN2_Init+0xc0>)
 8001046:	2204      	movs	r2, #4
 8001048:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 800104a:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <MX_FDCAN2_Init+0xc0>)
 800104c:	2200      	movs	r2, #0
 800104e:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001050:	4b0d      	ldr	r3, [pc, #52]	; (8001088 <MX_FDCAN2_Init+0xc0>)
 8001052:	2204      	movs	r2, #4
 8001054:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8001056:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <MX_FDCAN2_Init+0xc0>)
 8001058:	2200      	movs	r2, #0
 800105a:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 800105c:	4b0a      	ldr	r3, [pc, #40]	; (8001088 <MX_FDCAN2_Init+0xc0>)
 800105e:	2200      	movs	r2, #0
 8001060:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8001062:	4b09      	ldr	r3, [pc, #36]	; (8001088 <MX_FDCAN2_Init+0xc0>)
 8001064:	2200      	movs	r2, #0
 8001066:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001068:	4b07      	ldr	r3, [pc, #28]	; (8001088 <MX_FDCAN2_Init+0xc0>)
 800106a:	2200      	movs	r2, #0
 800106c:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800106e:	4b06      	ldr	r3, [pc, #24]	; (8001088 <MX_FDCAN2_Init+0xc0>)
 8001070:	2204      	movs	r2, #4
 8001072:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8001074:	4804      	ldr	r0, [pc, #16]	; (8001088 <MX_FDCAN2_Init+0xc0>)
 8001076:	f004 fb2d 	bl	80056d4 <HAL_FDCAN_Init>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8001080:	f000 fe74 	bl	8001d6c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8001084:	bf00      	nop
 8001086:	bd80      	pop	{r7, pc}
 8001088:	2400042c 	.word	0x2400042c
 800108c:	4000a400 	.word	0x4000a400

08001090 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b09a      	sub	sp, #104	; 0x68
 8001094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001096:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800109a:	2234      	movs	r2, #52	; 0x34
 800109c:	2100      	movs	r1, #0
 800109e:	4618      	mov	r0, r3
 80010a0:	f00d fc9a 	bl	800e9d8 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80010a4:	463b      	mov	r3, r7
 80010a6:	2234      	movs	r2, #52	; 0x34
 80010a8:	2100      	movs	r1, #0
 80010aa:	4618      	mov	r0, r3
 80010ac:	f00d fc94 	bl	800e9d8 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80010b0:	4b4e      	ldr	r3, [pc, #312]	; (80011ec <MX_LTDC_Init+0x15c>)
 80010b2:	4a4f      	ldr	r2, [pc, #316]	; (80011f0 <MX_LTDC_Init+0x160>)
 80010b4:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80010b6:	4b4d      	ldr	r3, [pc, #308]	; (80011ec <MX_LTDC_Init+0x15c>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80010bc:	4b4b      	ldr	r3, [pc, #300]	; (80011ec <MX_LTDC_Init+0x15c>)
 80010be:	2200      	movs	r2, #0
 80010c0:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80010c2:	4b4a      	ldr	r3, [pc, #296]	; (80011ec <MX_LTDC_Init+0x15c>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80010c8:	4b48      	ldr	r3, [pc, #288]	; (80011ec <MX_LTDC_Init+0x15c>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 80010ce:	4b47      	ldr	r3, [pc, #284]	; (80011ec <MX_LTDC_Init+0x15c>)
 80010d0:	2207      	movs	r2, #7
 80010d2:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 80010d4:	4b45      	ldr	r3, [pc, #276]	; (80011ec <MX_LTDC_Init+0x15c>)
 80010d6:	2203      	movs	r2, #3
 80010d8:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80010da:	4b44      	ldr	r3, [pc, #272]	; (80011ec <MX_LTDC_Init+0x15c>)
 80010dc:	220e      	movs	r2, #14
 80010de:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80010e0:	4b42      	ldr	r3, [pc, #264]	; (80011ec <MX_LTDC_Init+0x15c>)
 80010e2:	2205      	movs	r2, #5
 80010e4:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 80010e6:	4b41      	ldr	r3, [pc, #260]	; (80011ec <MX_LTDC_Init+0x15c>)
 80010e8:	f240 228e 	movw	r2, #654	; 0x28e
 80010ec:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 80010ee:	4b3f      	ldr	r3, [pc, #252]	; (80011ec <MX_LTDC_Init+0x15c>)
 80010f0:	f240 12e5 	movw	r2, #485	; 0x1e5
 80010f4:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 80010f6:	4b3d      	ldr	r3, [pc, #244]	; (80011ec <MX_LTDC_Init+0x15c>)
 80010f8:	f44f 7225 	mov.w	r2, #660	; 0x294
 80010fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 80010fe:	4b3b      	ldr	r3, [pc, #236]	; (80011ec <MX_LTDC_Init+0x15c>)
 8001100:	f240 12e7 	movw	r2, #487	; 0x1e7
 8001104:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001106:	4b39      	ldr	r3, [pc, #228]	; (80011ec <MX_LTDC_Init+0x15c>)
 8001108:	2200      	movs	r2, #0
 800110a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800110e:	4b37      	ldr	r3, [pc, #220]	; (80011ec <MX_LTDC_Init+0x15c>)
 8001110:	2200      	movs	r2, #0
 8001112:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001116:	4b35      	ldr	r3, [pc, #212]	; (80011ec <MX_LTDC_Init+0x15c>)
 8001118:	2200      	movs	r2, #0
 800111a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800111e:	4833      	ldr	r0, [pc, #204]	; (80011ec <MX_LTDC_Init+0x15c>)
 8001120:	f005 f806 	bl	8006130 <HAL_LTDC_Init>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 800112a:	f000 fe1f 	bl	8001d6c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8001132:	2300      	movs	r3, #0
 8001134:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 800113a:	2300      	movs	r3, #0
 800113c:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800113e:	2300      	movs	r3, #0
 8001140:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8001142:	2300      	movs	r3, #0
 8001144:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8001146:	2300      	movs	r3, #0
 8001148:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800114a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800114e:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001150:	2305      	movs	r3, #5
 8001152:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8001158:	2300      	movs	r3, #0
 800115a:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 800115c:	2300      	movs	r3, #0
 800115e:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001160:	2300      	movs	r3, #0
 8001162:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8001166:	2300      	movs	r3, #0
 8001168:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 800116c:	2300      	movs	r3, #0
 800116e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001172:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001176:	2200      	movs	r2, #0
 8001178:	4619      	mov	r1, r3
 800117a:	481c      	ldr	r0, [pc, #112]	; (80011ec <MX_LTDC_Init+0x15c>)
 800117c:	f005 f8a8 	bl	80062d0 <HAL_LTDC_ConfigLayer>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8001186:	f000 fdf1 	bl	8001d6c <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 800118a:	2300      	movs	r3, #0
 800118c:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 800118e:	2300      	movs	r3, #0
 8001190:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8001192:	2300      	movs	r3, #0
 8001194:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8001196:	2300      	movs	r3, #0
 8001198:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800119a:	2300      	movs	r3, #0
 800119c:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 800119e:	2300      	movs	r3, #0
 80011a0:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 80011a2:	2300      	movs	r3, #0
 80011a4:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80011a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011aa:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80011ac:	2305      	movs	r3, #5
 80011ae:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 80011b8:	2300      	movs	r3, #0
 80011ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80011bc:	2300      	movs	r3, #0
 80011be:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80011c2:	2300      	movs	r3, #0
 80011c4:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80011ce:	463b      	mov	r3, r7
 80011d0:	2201      	movs	r2, #1
 80011d2:	4619      	mov	r1, r3
 80011d4:	4805      	ldr	r0, [pc, #20]	; (80011ec <MX_LTDC_Init+0x15c>)
 80011d6:	f005 f87b 	bl	80062d0 <HAL_LTDC_ConfigLayer>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 80011e0:	f000 fdc4 	bl	8001d6c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80011e4:	bf00      	nop
 80011e6:	3768      	adds	r7, #104	; 0x68
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	240004cc 	.word	0x240004cc
 80011f0:	50001000 	.word	0x50001000

080011f4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80011fa:	1d3b      	adds	r3, r7, #4
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001208:	2300      	movs	r3, #0
 800120a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800120c:	4b25      	ldr	r3, [pc, #148]	; (80012a4 <MX_RTC_Init+0xb0>)
 800120e:	4a26      	ldr	r2, [pc, #152]	; (80012a8 <MX_RTC_Init+0xb4>)
 8001210:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001212:	4b24      	ldr	r3, [pc, #144]	; (80012a4 <MX_RTC_Init+0xb0>)
 8001214:	2200      	movs	r2, #0
 8001216:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001218:	4b22      	ldr	r3, [pc, #136]	; (80012a4 <MX_RTC_Init+0xb0>)
 800121a:	227f      	movs	r2, #127	; 0x7f
 800121c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800121e:	4b21      	ldr	r3, [pc, #132]	; (80012a4 <MX_RTC_Init+0xb0>)
 8001220:	22ff      	movs	r2, #255	; 0xff
 8001222:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001224:	4b1f      	ldr	r3, [pc, #124]	; (80012a4 <MX_RTC_Init+0xb0>)
 8001226:	2200      	movs	r2, #0
 8001228:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800122a:	4b1e      	ldr	r3, [pc, #120]	; (80012a4 <MX_RTC_Init+0xb0>)
 800122c:	2200      	movs	r2, #0
 800122e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001230:	4b1c      	ldr	r3, [pc, #112]	; (80012a4 <MX_RTC_Init+0xb0>)
 8001232:	2200      	movs	r2, #0
 8001234:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001236:	4b1b      	ldr	r3, [pc, #108]	; (80012a4 <MX_RTC_Init+0xb0>)
 8001238:	2200      	movs	r2, #0
 800123a:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800123c:	4819      	ldr	r0, [pc, #100]	; (80012a4 <MX_RTC_Init+0xb0>)
 800123e:	f009 f895 	bl	800a36c <HAL_RTC_Init>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8001248:	f000 fd90 	bl	8001d6c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 800124c:	2300      	movs	r3, #0
 800124e:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8001250:	2300      	movs	r3, #0
 8001252:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8001254:	2300      	movs	r3, #0
 8001256:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001258:	2300      	movs	r3, #0
 800125a:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800125c:	2300      	movs	r3, #0
 800125e:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001260:	1d3b      	adds	r3, r7, #4
 8001262:	2200      	movs	r2, #0
 8001264:	4619      	mov	r1, r3
 8001266:	480f      	ldr	r0, [pc, #60]	; (80012a4 <MX_RTC_Init+0xb0>)
 8001268:	f009 f902 	bl	800a470 <HAL_RTC_SetTime>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8001272:	f000 fd7b 	bl	8001d6c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001276:	2301      	movs	r3, #1
 8001278:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800127a:	2301      	movs	r3, #1
 800127c:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 800127e:	2301      	movs	r3, #1
 8001280:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8001282:	2300      	movs	r3, #0
 8001284:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001286:	463b      	mov	r3, r7
 8001288:	2200      	movs	r2, #0
 800128a:	4619      	mov	r1, r3
 800128c:	4805      	ldr	r0, [pc, #20]	; (80012a4 <MX_RTC_Init+0xb0>)
 800128e:	f009 f9e9 	bl	800a664 <HAL_RTC_SetDate>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8001298:	f000 fd68 	bl	8001d6c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800129c:	bf00      	nop
 800129e:	3718      	adds	r7, #24
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	24000574 	.word	0x24000574
 80012a8:	58004000 	.word	0x58004000

080012ac <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 80012b0:	4b58      	ldr	r3, [pc, #352]	; (8001414 <MX_SAI2_Init+0x168>)
 80012b2:	4a59      	ldr	r2, [pc, #356]	; (8001418 <MX_SAI2_Init+0x16c>)
 80012b4:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 80012b6:	4b57      	ldr	r3, [pc, #348]	; (8001414 <MX_SAI2_Init+0x168>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 80012bc:	4b55      	ldr	r3, [pc, #340]	; (8001414 <MX_SAI2_Init+0x168>)
 80012be:	2200      	movs	r2, #0
 80012c0:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 80012c2:	4b54      	ldr	r3, [pc, #336]	; (8001414 <MX_SAI2_Init+0x168>)
 80012c4:	2240      	movs	r2, #64	; 0x40
 80012c6:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80012c8:	4b52      	ldr	r3, [pc, #328]	; (8001414 <MX_SAI2_Init+0x168>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80012ce:	4b51      	ldr	r3, [pc, #324]	; (8001414 <MX_SAI2_Init+0x168>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80012d4:	4b4f      	ldr	r3, [pc, #316]	; (8001414 <MX_SAI2_Init+0x168>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80012da:	4b4e      	ldr	r3, [pc, #312]	; (8001414 <MX_SAI2_Init+0x168>)
 80012dc:	2200      	movs	r2, #0
 80012de:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80012e0:	4b4c      	ldr	r3, [pc, #304]	; (8001414 <MX_SAI2_Init+0x168>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80012e6:	4b4b      	ldr	r3, [pc, #300]	; (8001414 <MX_SAI2_Init+0x168>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80012ec:	4b49      	ldr	r3, [pc, #292]	; (8001414 <MX_SAI2_Init+0x168>)
 80012ee:	4a4b      	ldr	r2, [pc, #300]	; (800141c <MX_SAI2_Init+0x170>)
 80012f0:	621a      	str	r2, [r3, #32]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80012f2:	4b48      	ldr	r3, [pc, #288]	; (8001414 <MX_SAI2_Init+0x168>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80012f8:	4b46      	ldr	r3, [pc, #280]	; (8001414 <MX_SAI2_Init+0x168>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80012fe:	4b45      	ldr	r3, [pc, #276]	; (8001414 <MX_SAI2_Init+0x168>)
 8001300:	2200      	movs	r2, #0
 8001302:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001304:	4b43      	ldr	r3, [pc, #268]	; (8001414 <MX_SAI2_Init+0x168>)
 8001306:	2200      	movs	r2, #0
 8001308:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.PdmInit.Activation = DISABLE;
 800130a:	4b42      	ldr	r3, [pc, #264]	; (8001414 <MX_SAI2_Init+0x168>)
 800130c:	2200      	movs	r2, #0
 800130e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.PdmInit.MicPairsNbr = 1;
 8001312:	4b40      	ldr	r3, [pc, #256]	; (8001414 <MX_SAI2_Init+0x168>)
 8001314:	2201      	movs	r2, #1
 8001316:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8001318:	4b3e      	ldr	r3, [pc, #248]	; (8001414 <MX_SAI2_Init+0x168>)
 800131a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800131e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001320:	4b3c      	ldr	r3, [pc, #240]	; (8001414 <MX_SAI2_Init+0x168>)
 8001322:	2208      	movs	r2, #8
 8001324:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001326:	4b3b      	ldr	r3, [pc, #236]	; (8001414 <MX_SAI2_Init+0x168>)
 8001328:	2201      	movs	r2, #1
 800132a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800132c:	4b39      	ldr	r3, [pc, #228]	; (8001414 <MX_SAI2_Init+0x168>)
 800132e:	2200      	movs	r2, #0
 8001330:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001332:	4b38      	ldr	r3, [pc, #224]	; (8001414 <MX_SAI2_Init+0x168>)
 8001334:	2200      	movs	r2, #0
 8001336:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001338:	4b36      	ldr	r3, [pc, #216]	; (8001414 <MX_SAI2_Init+0x168>)
 800133a:	2200      	movs	r2, #0
 800133c:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 800133e:	4b35      	ldr	r3, [pc, #212]	; (8001414 <MX_SAI2_Init+0x168>)
 8001340:	2200      	movs	r2, #0
 8001342:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001344:	4b33      	ldr	r3, [pc, #204]	; (8001414 <MX_SAI2_Init+0x168>)
 8001346:	2200      	movs	r2, #0
 8001348:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 800134a:	4b32      	ldr	r3, [pc, #200]	; (8001414 <MX_SAI2_Init+0x168>)
 800134c:	2201      	movs	r2, #1
 800134e:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001350:	4b30      	ldr	r3, [pc, #192]	; (8001414 <MX_SAI2_Init+0x168>)
 8001352:	2200      	movs	r2, #0
 8001354:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001356:	482f      	ldr	r0, [pc, #188]	; (8001414 <MX_SAI2_Init+0x168>)
 8001358:	f009 fb2a 	bl	800a9b0 <HAL_SAI_Init>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_SAI2_Init+0xba>
  {
    Error_Handler();
 8001362:	f000 fd03 	bl	8001d6c <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001366:	4b2e      	ldr	r3, [pc, #184]	; (8001420 <MX_SAI2_Init+0x174>)
 8001368:	4a2e      	ldr	r2, [pc, #184]	; (8001424 <MX_SAI2_Init+0x178>)
 800136a:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 800136c:	4b2c      	ldr	r3, [pc, #176]	; (8001420 <MX_SAI2_Init+0x174>)
 800136e:	2200      	movs	r2, #0
 8001370:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001372:	4b2b      	ldr	r3, [pc, #172]	; (8001420 <MX_SAI2_Init+0x174>)
 8001374:	2203      	movs	r2, #3
 8001376:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8001378:	4b29      	ldr	r3, [pc, #164]	; (8001420 <MX_SAI2_Init+0x174>)
 800137a:	2240      	movs	r2, #64	; 0x40
 800137c:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800137e:	4b28      	ldr	r3, [pc, #160]	; (8001420 <MX_SAI2_Init+0x174>)
 8001380:	2200      	movs	r2, #0
 8001382:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001384:	4b26      	ldr	r3, [pc, #152]	; (8001420 <MX_SAI2_Init+0x174>)
 8001386:	2200      	movs	r2, #0
 8001388:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 800138a:	4b25      	ldr	r3, [pc, #148]	; (8001420 <MX_SAI2_Init+0x174>)
 800138c:	2201      	movs	r2, #1
 800138e:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001390:	4b23      	ldr	r3, [pc, #140]	; (8001420 <MX_SAI2_Init+0x174>)
 8001392:	2200      	movs	r2, #0
 8001394:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001396:	4b22      	ldr	r3, [pc, #136]	; (8001420 <MX_SAI2_Init+0x174>)
 8001398:	2200      	movs	r2, #0
 800139a:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800139c:	4b20      	ldr	r3, [pc, #128]	; (8001420 <MX_SAI2_Init+0x174>)
 800139e:	2200      	movs	r2, #0
 80013a0:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 80013a2:	4b1f      	ldr	r3, [pc, #124]	; (8001420 <MX_SAI2_Init+0x174>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 80013a8:	4b1d      	ldr	r3, [pc, #116]	; (8001420 <MX_SAI2_Init+0x174>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80013ae:	4b1c      	ldr	r3, [pc, #112]	; (8001420 <MX_SAI2_Init+0x174>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.PdmInit.Activation = DISABLE;
 80013b4:	4b1a      	ldr	r3, [pc, #104]	; (8001420 <MX_SAI2_Init+0x174>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.PdmInit.MicPairsNbr = 1;
 80013bc:	4b18      	ldr	r3, [pc, #96]	; (8001420 <MX_SAI2_Init+0x174>)
 80013be:	2201      	movs	r2, #1
 80013c0:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 80013c2:	4b17      	ldr	r3, [pc, #92]	; (8001420 <MX_SAI2_Init+0x174>)
 80013c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013c8:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.FrameLength = 8;
 80013ca:	4b15      	ldr	r3, [pc, #84]	; (8001420 <MX_SAI2_Init+0x174>)
 80013cc:	2208      	movs	r2, #8
 80013ce:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 80013d0:	4b13      	ldr	r3, [pc, #76]	; (8001420 <MX_SAI2_Init+0x174>)
 80013d2:	2201      	movs	r2, #1
 80013d4:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80013d6:	4b12      	ldr	r3, [pc, #72]	; (8001420 <MX_SAI2_Init+0x174>)
 80013d8:	2200      	movs	r2, #0
 80013da:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80013dc:	4b10      	ldr	r3, [pc, #64]	; (8001420 <MX_SAI2_Init+0x174>)
 80013de:	2200      	movs	r2, #0
 80013e0:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80013e2:	4b0f      	ldr	r3, [pc, #60]	; (8001420 <MX_SAI2_Init+0x174>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 80013e8:	4b0d      	ldr	r3, [pc, #52]	; (8001420 <MX_SAI2_Init+0x174>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80013ee:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <MX_SAI2_Init+0x174>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 80013f4:	4b0a      	ldr	r3, [pc, #40]	; (8001420 <MX_SAI2_Init+0x174>)
 80013f6:	2201      	movs	r2, #1
 80013f8:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 80013fa:	4b09      	ldr	r3, [pc, #36]	; (8001420 <MX_SAI2_Init+0x174>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001400:	4807      	ldr	r0, [pc, #28]	; (8001420 <MX_SAI2_Init+0x174>)
 8001402:	f009 fad5 	bl	800a9b0 <HAL_SAI_Init>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_SAI2_Init+0x164>
  {
    Error_Handler();
 800140c:	f000 fcae 	bl	8001d6c <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001410:	bf00      	nop
 8001412:	bd80      	pop	{r7, pc}
 8001414:	24000598 	.word	0x24000598
 8001418:	40015c04 	.word	0x40015c04
 800141c:	0002ee00 	.word	0x0002ee00
 8001420:	24000630 	.word	0x24000630
 8001424:	40015c24 	.word	0x40015c24

08001428 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800142c:	4b26      	ldr	r3, [pc, #152]	; (80014c8 <MX_SPI2_Init+0xa0>)
 800142e:	4a27      	ldr	r2, [pc, #156]	; (80014cc <MX_SPI2_Init+0xa4>)
 8001430:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001432:	4b25      	ldr	r3, [pc, #148]	; (80014c8 <MX_SPI2_Init+0xa0>)
 8001434:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001438:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800143a:	4b23      	ldr	r3, [pc, #140]	; (80014c8 <MX_SPI2_Init+0xa0>)
 800143c:	2200      	movs	r2, #0
 800143e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001440:	4b21      	ldr	r3, [pc, #132]	; (80014c8 <MX_SPI2_Init+0xa0>)
 8001442:	2203      	movs	r2, #3
 8001444:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001446:	4b20      	ldr	r3, [pc, #128]	; (80014c8 <MX_SPI2_Init+0xa0>)
 8001448:	2200      	movs	r2, #0
 800144a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800144c:	4b1e      	ldr	r3, [pc, #120]	; (80014c8 <MX_SPI2_Init+0xa0>)
 800144e:	2200      	movs	r2, #0
 8001450:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8001452:	4b1d      	ldr	r3, [pc, #116]	; (80014c8 <MX_SPI2_Init+0xa0>)
 8001454:	2200      	movs	r2, #0
 8001456:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001458:	4b1b      	ldr	r3, [pc, #108]	; (80014c8 <MX_SPI2_Init+0xa0>)
 800145a:	2200      	movs	r2, #0
 800145c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800145e:	4b1a      	ldr	r3, [pc, #104]	; (80014c8 <MX_SPI2_Init+0xa0>)
 8001460:	2200      	movs	r2, #0
 8001462:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001464:	4b18      	ldr	r3, [pc, #96]	; (80014c8 <MX_SPI2_Init+0xa0>)
 8001466:	2200      	movs	r2, #0
 8001468:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800146a:	4b17      	ldr	r3, [pc, #92]	; (80014c8 <MX_SPI2_Init+0xa0>)
 800146c:	2200      	movs	r2, #0
 800146e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001470:	4b15      	ldr	r3, [pc, #84]	; (80014c8 <MX_SPI2_Init+0xa0>)
 8001472:	2200      	movs	r2, #0
 8001474:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001476:	4b14      	ldr	r3, [pc, #80]	; (80014c8 <MX_SPI2_Init+0xa0>)
 8001478:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800147c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800147e:	4b12      	ldr	r3, [pc, #72]	; (80014c8 <MX_SPI2_Init+0xa0>)
 8001480:	2200      	movs	r2, #0
 8001482:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001484:	4b10      	ldr	r3, [pc, #64]	; (80014c8 <MX_SPI2_Init+0xa0>)
 8001486:	2200      	movs	r2, #0
 8001488:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800148a:	4b0f      	ldr	r3, [pc, #60]	; (80014c8 <MX_SPI2_Init+0xa0>)
 800148c:	2200      	movs	r2, #0
 800148e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001490:	4b0d      	ldr	r3, [pc, #52]	; (80014c8 <MX_SPI2_Init+0xa0>)
 8001492:	2200      	movs	r2, #0
 8001494:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001496:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <MX_SPI2_Init+0xa0>)
 8001498:	2200      	movs	r2, #0
 800149a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800149c:	4b0a      	ldr	r3, [pc, #40]	; (80014c8 <MX_SPI2_Init+0xa0>)
 800149e:	2200      	movs	r2, #0
 80014a0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80014a2:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <MX_SPI2_Init+0xa0>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80014a8:	4b07      	ldr	r3, [pc, #28]	; (80014c8 <MX_SPI2_Init+0xa0>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80014ae:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <MX_SPI2_Init+0xa0>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80014b4:	4804      	ldr	r0, [pc, #16]	; (80014c8 <MX_SPI2_Init+0xa0>)
 80014b6:	f009 fd9b 	bl	800aff0 <HAL_SPI_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_SPI2_Init+0x9c>
  {
    Error_Handler();
 80014c0:	f000 fc54 	bl	8001d6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80014c4:	bf00      	nop
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	240006c8 	.word	0x240006c8
 80014cc:	40003800 	.word	0x40003800

080014d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b088      	sub	sp, #32
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014d6:	f107 0310 	add.w	r3, r7, #16
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]
 80014e0:	609a      	str	r2, [r3, #8]
 80014e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014e4:	1d3b      	adds	r3, r7, #4
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014ee:	4b1f      	ldr	r3, [pc, #124]	; (800156c <MX_TIM3_Init+0x9c>)
 80014f0:	4a1f      	ldr	r2, [pc, #124]	; (8001570 <MX_TIM3_Init+0xa0>)
 80014f2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 80014f4:	4b1d      	ldr	r3, [pc, #116]	; (800156c <MX_TIM3_Init+0x9c>)
 80014f6:	223f      	movs	r2, #63	; 0x3f
 80014f8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014fa:	4b1c      	ldr	r3, [pc, #112]	; (800156c <MX_TIM3_Init+0x9c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001500:	4b1a      	ldr	r3, [pc, #104]	; (800156c <MX_TIM3_Init+0x9c>)
 8001502:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001506:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001508:	4b18      	ldr	r3, [pc, #96]	; (800156c <MX_TIM3_Init+0x9c>)
 800150a:	2200      	movs	r2, #0
 800150c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800150e:	4b17      	ldr	r3, [pc, #92]	; (800156c <MX_TIM3_Init+0x9c>)
 8001510:	2200      	movs	r2, #0
 8001512:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001514:	4815      	ldr	r0, [pc, #84]	; (800156c <MX_TIM3_Init+0x9c>)
 8001516:	f009 feaa 	bl	800b26e <HAL_TIM_Base_Init>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001520:	f000 fc24 	bl	8001d6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001524:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001528:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800152a:	f107 0310 	add.w	r3, r7, #16
 800152e:	4619      	mov	r1, r3
 8001530:	480e      	ldr	r0, [pc, #56]	; (800156c <MX_TIM3_Init+0x9c>)
 8001532:	f009 ff63 	bl	800b3fc <HAL_TIM_ConfigClockSource>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800153c:	f000 fc16 	bl	8001d6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001540:	2300      	movs	r3, #0
 8001542:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001544:	2300      	movs	r3, #0
 8001546:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001548:	1d3b      	adds	r3, r7, #4
 800154a:	4619      	mov	r1, r3
 800154c:	4807      	ldr	r0, [pc, #28]	; (800156c <MX_TIM3_Init+0x9c>)
 800154e:	f00a f985 	bl	800b85c <HAL_TIMEx_MasterConfigSynchronization>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001558:	f000 fc08 	bl	8001d6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Base_Start(&htim3);
 800155c:	4803      	ldr	r0, [pc, #12]	; (800156c <MX_TIM3_Init+0x9c>)
 800155e:	f009 fedd 	bl	800b31c <HAL_TIM_Base_Start>

  /* USER CODE END TIM3_Init 2 */

}
 8001562:	bf00      	nop
 8001564:	3720      	adds	r7, #32
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	24000750 	.word	0x24000750
 8001570:	40000400 	.word	0x40000400

08001574 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001578:	4b22      	ldr	r3, [pc, #136]	; (8001604 <MX_USART3_UART_Init+0x90>)
 800157a:	4a23      	ldr	r2, [pc, #140]	; (8001608 <MX_USART3_UART_Init+0x94>)
 800157c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800157e:	4b21      	ldr	r3, [pc, #132]	; (8001604 <MX_USART3_UART_Init+0x90>)
 8001580:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001584:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001586:	4b1f      	ldr	r3, [pc, #124]	; (8001604 <MX_USART3_UART_Init+0x90>)
 8001588:	2200      	movs	r2, #0
 800158a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800158c:	4b1d      	ldr	r3, [pc, #116]	; (8001604 <MX_USART3_UART_Init+0x90>)
 800158e:	2200      	movs	r2, #0
 8001590:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001592:	4b1c      	ldr	r3, [pc, #112]	; (8001604 <MX_USART3_UART_Init+0x90>)
 8001594:	2200      	movs	r2, #0
 8001596:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001598:	4b1a      	ldr	r3, [pc, #104]	; (8001604 <MX_USART3_UART_Init+0x90>)
 800159a:	220c      	movs	r2, #12
 800159c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800159e:	4b19      	ldr	r3, [pc, #100]	; (8001604 <MX_USART3_UART_Init+0x90>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015a4:	4b17      	ldr	r3, [pc, #92]	; (8001604 <MX_USART3_UART_Init+0x90>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015aa:	4b16      	ldr	r3, [pc, #88]	; (8001604 <MX_USART3_UART_Init+0x90>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015b0:	4b14      	ldr	r3, [pc, #80]	; (8001604 <MX_USART3_UART_Init+0x90>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015b6:	4b13      	ldr	r3, [pc, #76]	; (8001604 <MX_USART3_UART_Init+0x90>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015bc:	4811      	ldr	r0, [pc, #68]	; (8001604 <MX_USART3_UART_Init+0x90>)
 80015be:	f00a f9db 	bl	800b978 <HAL_UART_Init>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80015c8:	f000 fbd0 	bl	8001d6c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015cc:	2100      	movs	r1, #0
 80015ce:	480d      	ldr	r0, [pc, #52]	; (8001604 <MX_USART3_UART_Init+0x90>)
 80015d0:	f00c fd2f 	bl	800e032 <HAL_UARTEx_SetTxFifoThreshold>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80015da:	f000 fbc7 	bl	8001d6c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015de:	2100      	movs	r1, #0
 80015e0:	4808      	ldr	r0, [pc, #32]	; (8001604 <MX_USART3_UART_Init+0x90>)
 80015e2:	f00c fd64 	bl	800e0ae <HAL_UARTEx_SetRxFifoThreshold>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80015ec:	f000 fbbe 	bl	8001d6c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80015f0:	4804      	ldr	r0, [pc, #16]	; (8001604 <MX_USART3_UART_Init+0x90>)
 80015f2:	f00c fce5 	bl	800dfc0 <HAL_UARTEx_DisableFifoMode>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80015fc:	f000 fbb6 	bl	8001d6c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001600:	bf00      	nop
 8001602:	bd80      	pop	{r7, pc}
 8001604:	2400079c 	.word	0x2400079c
 8001608:	40004800 	.word	0x40004800

0800160c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001610:	4b15      	ldr	r3, [pc, #84]	; (8001668 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001612:	4a16      	ldr	r2, [pc, #88]	; (800166c <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001614:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001616:	4b14      	ldr	r3, [pc, #80]	; (8001668 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001618:	2209      	movs	r2, #9
 800161a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800161c:	4b12      	ldr	r3, [pc, #72]	; (8001668 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800161e:	2202      	movs	r2, #2
 8001620:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001622:	4b11      	ldr	r3, [pc, #68]	; (8001668 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001624:	2200      	movs	r2, #0
 8001626:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001628:	4b0f      	ldr	r3, [pc, #60]	; (8001668 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800162a:	2202      	movs	r2, #2
 800162c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800162e:	4b0e      	ldr	r3, [pc, #56]	; (8001668 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001630:	2200      	movs	r2, #0
 8001632:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001634:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001636:	2200      	movs	r2, #0
 8001638:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800163a:	4b0b      	ldr	r3, [pc, #44]	; (8001668 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800163c:	2200      	movs	r2, #0
 800163e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001640:	4b09      	ldr	r3, [pc, #36]	; (8001668 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001642:	2201      	movs	r2, #1
 8001644:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001646:	4b08      	ldr	r3, [pc, #32]	; (8001668 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001648:	2201      	movs	r2, #1
 800164a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800164c:	4b06      	ldr	r3, [pc, #24]	; (8001668 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800164e:	2200      	movs	r2, #0
 8001650:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001652:	4805      	ldr	r0, [pc, #20]	; (8001668 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001654:	f005 f814 	bl	8006680 <HAL_PCD_Init>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800165e:	f000 fb85 	bl	8001d6c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	24000830 	.word	0x24000830
 800166c:	40080000 	.word	0x40080000

08001670 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b088      	sub	sp, #32
 8001674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001676:	1d3b      	adds	r3, r7, #4
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
 8001682:	611a      	str	r2, [r3, #16]
 8001684:	615a      	str	r2, [r3, #20]
 8001686:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001688:	4b1e      	ldr	r3, [pc, #120]	; (8001704 <MX_FMC_Init+0x94>)
 800168a:	4a1f      	ldr	r2, [pc, #124]	; (8001708 <MX_FMC_Init+0x98>)
 800168c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800168e:	4b1d      	ldr	r3, [pc, #116]	; (8001704 <MX_FMC_Init+0x94>)
 8001690:	2201      	movs	r2, #1
 8001692:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001694:	4b1b      	ldr	r3, [pc, #108]	; (8001704 <MX_FMC_Init+0x94>)
 8001696:	2200      	movs	r2, #0
 8001698:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800169a:	4b1a      	ldr	r3, [pc, #104]	; (8001704 <MX_FMC_Init+0x94>)
 800169c:	2204      	movs	r2, #4
 800169e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80016a0:	4b18      	ldr	r3, [pc, #96]	; (8001704 <MX_FMC_Init+0x94>)
 80016a2:	2210      	movs	r2, #16
 80016a4:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80016a6:	4b17      	ldr	r3, [pc, #92]	; (8001704 <MX_FMC_Init+0x94>)
 80016a8:	2240      	movs	r2, #64	; 0x40
 80016aa:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 80016ac:	4b15      	ldr	r3, [pc, #84]	; (8001704 <MX_FMC_Init+0x94>)
 80016ae:	2280      	movs	r2, #128	; 0x80
 80016b0:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80016b2:	4b14      	ldr	r3, [pc, #80]	; (8001704 <MX_FMC_Init+0x94>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 80016b8:	4b12      	ldr	r3, [pc, #72]	; (8001704 <MX_FMC_Init+0x94>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80016be:	4b11      	ldr	r3, [pc, #68]	; (8001704 <MX_FMC_Init+0x94>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80016c4:	4b0f      	ldr	r3, [pc, #60]	; (8001704 <MX_FMC_Init+0x94>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 80016ca:	2310      	movs	r3, #16
 80016cc:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 80016ce:	2310      	movs	r3, #16
 80016d0:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 80016d2:	2310      	movs	r3, #16
 80016d4:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 80016d6:	2310      	movs	r3, #16
 80016d8:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 80016da:	2310      	movs	r3, #16
 80016dc:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 80016de:	2310      	movs	r3, #16
 80016e0:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 80016e2:	2310      	movs	r3, #16
 80016e4:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80016e6:	1d3b      	adds	r3, r7, #4
 80016e8:	4619      	mov	r1, r3
 80016ea:	4806      	ldr	r0, [pc, #24]	; (8001704 <MX_FMC_Init+0x94>)
 80016ec:	f009 fc44 	bl	800af78 <HAL_SDRAM_Init>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 80016f6:	f000 fb39 	bl	8001d6c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80016fa:	bf00      	nop
 80016fc:	3720      	adds	r7, #32
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	24000d3c 	.word	0x24000d3c
 8001708:	52004140 	.word	0x52004140

0800170c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b090      	sub	sp, #64	; 0x40
 8001710:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001712:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]
 800171c:	609a      	str	r2, [r3, #8]
 800171e:	60da      	str	r2, [r3, #12]
 8001720:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001722:	4bc0      	ldr	r3, [pc, #768]	; (8001a24 <MX_GPIO_Init+0x318>)
 8001724:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001728:	4abe      	ldr	r2, [pc, #760]	; (8001a24 <MX_GPIO_Init+0x318>)
 800172a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800172e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001732:	4bbc      	ldr	r3, [pc, #752]	; (8001a24 <MX_GPIO_Init+0x318>)
 8001734:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800173c:	62bb      	str	r3, [r7, #40]	; 0x28
 800173e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001740:	4bb8      	ldr	r3, [pc, #736]	; (8001a24 <MX_GPIO_Init+0x318>)
 8001742:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001746:	4ab7      	ldr	r2, [pc, #732]	; (8001a24 <MX_GPIO_Init+0x318>)
 8001748:	f043 0302 	orr.w	r3, r3, #2
 800174c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001750:	4bb4      	ldr	r3, [pc, #720]	; (8001a24 <MX_GPIO_Init+0x318>)
 8001752:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	627b      	str	r3, [r7, #36]	; 0x24
 800175c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800175e:	4bb1      	ldr	r3, [pc, #708]	; (8001a24 <MX_GPIO_Init+0x318>)
 8001760:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001764:	4aaf      	ldr	r2, [pc, #700]	; (8001a24 <MX_GPIO_Init+0x318>)
 8001766:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800176a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800176e:	4bad      	ldr	r3, [pc, #692]	; (8001a24 <MX_GPIO_Init+0x318>)
 8001770:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001778:	623b      	str	r3, [r7, #32]
 800177a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800177c:	4ba9      	ldr	r3, [pc, #676]	; (8001a24 <MX_GPIO_Init+0x318>)
 800177e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001782:	4aa8      	ldr	r2, [pc, #672]	; (8001a24 <MX_GPIO_Init+0x318>)
 8001784:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001788:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800178c:	4ba5      	ldr	r3, [pc, #660]	; (8001a24 <MX_GPIO_Init+0x318>)
 800178e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001796:	61fb      	str	r3, [r7, #28]
 8001798:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800179a:	4ba2      	ldr	r3, [pc, #648]	; (8001a24 <MX_GPIO_Init+0x318>)
 800179c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017a0:	4aa0      	ldr	r2, [pc, #640]	; (8001a24 <MX_GPIO_Init+0x318>)
 80017a2:	f043 0304 	orr.w	r3, r3, #4
 80017a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017aa:	4b9e      	ldr	r3, [pc, #632]	; (8001a24 <MX_GPIO_Init+0x318>)
 80017ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017b0:	f003 0304 	and.w	r3, r3, #4
 80017b4:	61bb      	str	r3, [r7, #24]
 80017b6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b8:	4b9a      	ldr	r3, [pc, #616]	; (8001a24 <MX_GPIO_Init+0x318>)
 80017ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017be:	4a99      	ldr	r2, [pc, #612]	; (8001a24 <MX_GPIO_Init+0x318>)
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017c8:	4b96      	ldr	r3, [pc, #600]	; (8001a24 <MX_GPIO_Init+0x318>)
 80017ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	617b      	str	r3, [r7, #20]
 80017d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017d6:	4b93      	ldr	r3, [pc, #588]	; (8001a24 <MX_GPIO_Init+0x318>)
 80017d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017dc:	4a91      	ldr	r2, [pc, #580]	; (8001a24 <MX_GPIO_Init+0x318>)
 80017de:	f043 0310 	orr.w	r3, r3, #16
 80017e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017e6:	4b8f      	ldr	r3, [pc, #572]	; (8001a24 <MX_GPIO_Init+0x318>)
 80017e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017ec:	f003 0310 	and.w	r3, r3, #16
 80017f0:	613b      	str	r3, [r7, #16]
 80017f2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80017f4:	4b8b      	ldr	r3, [pc, #556]	; (8001a24 <MX_GPIO_Init+0x318>)
 80017f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017fa:	4a8a      	ldr	r2, [pc, #552]	; (8001a24 <MX_GPIO_Init+0x318>)
 80017fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001800:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001804:	4b87      	ldr	r3, [pc, #540]	; (8001a24 <MX_GPIO_Init+0x318>)
 8001806:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800180a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001812:	4b84      	ldr	r3, [pc, #528]	; (8001a24 <MX_GPIO_Init+0x318>)
 8001814:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001818:	4a82      	ldr	r2, [pc, #520]	; (8001a24 <MX_GPIO_Init+0x318>)
 800181a:	f043 0308 	orr.w	r3, r3, #8
 800181e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001822:	4b80      	ldr	r3, [pc, #512]	; (8001a24 <MX_GPIO_Init+0x318>)
 8001824:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001828:	f003 0308 	and.w	r3, r3, #8
 800182c:	60bb      	str	r3, [r7, #8]
 800182e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001830:	4b7c      	ldr	r3, [pc, #496]	; (8001a24 <MX_GPIO_Init+0x318>)
 8001832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001836:	4a7b      	ldr	r2, [pc, #492]	; (8001a24 <MX_GPIO_Init+0x318>)
 8001838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800183c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001840:	4b78      	ldr	r3, [pc, #480]	; (8001a24 <MX_GPIO_Init+0x318>)
 8001842:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800184a:	607b      	str	r3, [r7, #4]
 800184c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800184e:	4b75      	ldr	r3, [pc, #468]	; (8001a24 <MX_GPIO_Init+0x318>)
 8001850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001854:	4a73      	ldr	r2, [pc, #460]	; (8001a24 <MX_GPIO_Init+0x318>)
 8001856:	f043 0320 	orr.w	r3, r3, #32
 800185a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800185e:	4b71      	ldr	r3, [pc, #452]	; (8001a24 <MX_GPIO_Init+0x318>)
 8001860:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001864:	f003 0320 	and.w	r3, r3, #32
 8001868:	603b      	str	r3, [r7, #0]
 800186a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7|MII_TX_ER_nINT_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 800186c:	2200      	movs	r2, #0
 800186e:	f241 01c4 	movw	r1, #4292	; 0x10c4
 8001872:	486d      	ldr	r0, [pc, #436]	; (8001a28 <MX_GPIO_Init+0x31c>)
 8001874:	f004 fc42 	bl	80060fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_6, GPIO_PIN_RESET);
 8001878:	2200      	movs	r2, #0
 800187a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800187e:	486b      	ldr	r0, [pc, #428]	; (8001a2c <MX_GPIO_Init+0x320>)
 8001880:	f004 fc3c 	bl	80060fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001884:	2200      	movs	r2, #0
 8001886:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800188a:	4869      	ldr	r0, [pc, #420]	; (8001a30 <MX_GPIO_Init+0x324>)
 800188c:	f004 fc36 	bl	80060fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, GPIO_PIN_RESET);
 8001890:	2200      	movs	r2, #0
 8001892:	2108      	movs	r1, #8
 8001894:	4867      	ldr	r0, [pc, #412]	; (8001a34 <MX_GPIO_Init+0x328>)
 8001896:	f004 fc31 	bl	80060fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_1, GPIO_PIN_RESET);
 800189a:	2200      	movs	r2, #0
 800189c:	2102      	movs	r1, #2
 800189e:	4866      	ldr	r0, [pc, #408]	; (8001a38 <MX_GPIO_Init+0x32c>)
 80018a0:	f004 fc2c 	bl	80060fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80018a4:	2200      	movs	r2, #0
 80018a6:	2104      	movs	r1, #4
 80018a8:	4864      	ldr	r0, [pc, #400]	; (8001a3c <MX_GPIO_Init+0x330>)
 80018aa:	f004 fc27 	bl	80060fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB6 PB7 MII_TX_ER_nINT_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|MII_TX_ER_nINT_Pin|LCD_RST_Pin;
 80018ae:	f241 03c4 	movw	r3, #4292	; 0x10c4
 80018b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b4:	2301      	movs	r3, #1
 80018b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b8:	2300      	movs	r3, #0
 80018ba:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018bc:	2300      	movs	r3, #0
 80018be:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018c4:	4619      	mov	r1, r3
 80018c6:	4858      	ldr	r0, [pc, #352]	; (8001a28 <MX_GPIO_Init+0x31c>)
 80018c8:	f004 fa68 	bl	8005d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80018cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d2:	2302      	movs	r3, #2
 80018d4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d6:	2300      	movs	r3, #0
 80018d8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018da:	2300      	movs	r3, #0
 80018dc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80018de:	2303      	movs	r3, #3
 80018e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80018e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018e6:	4619      	mov	r1, r3
 80018e8:	4855      	ldr	r0, [pc, #340]	; (8001a40 <MX_GPIO_Init+0x334>)
 80018ea:	f004 fa57 	bl	8005d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISPD7_Pin */
  GPIO_InitStruct.Pin = LCD_DISPD7_Pin;
 80018ee:	2380      	movs	r3, #128	; 0x80
 80018f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018f2:	2300      	movs	r3, #0
 80018f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f6:	2300      	movs	r3, #0
 80018f8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_DISPD7_GPIO_Port, &GPIO_InitStruct);
 80018fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018fe:	4619      	mov	r1, r3
 8001900:	4850      	ldr	r0, [pc, #320]	; (8001a44 <MX_GPIO_Init+0x338>)
 8001902:	f004 fa4b 	bl	8005d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE5 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 8001906:	2330      	movs	r3, #48	; 0x30
 8001908:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190a:	2302      	movs	r3, #2
 800190c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190e:	2300      	movs	r3, #0
 8001910:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001912:	2300      	movs	r3, #0
 8001914:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8001916:	230a      	movs	r3, #10
 8001918:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800191a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800191e:	4619      	mov	r1, r3
 8001920:	4849      	ldr	r0, [pc, #292]	; (8001a48 <MX_GPIO_Init+0x33c>)
 8001922:	f004 fa3b 	bl	8005d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS2_ID_Pin OTG_FS2_PSO_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS2_ID_Pin|OTG_FS2_PSO_Pin;
 8001926:	f44f 6384 	mov.w	r3, #1056	; 0x420
 800192a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800192c:	2300      	movs	r3, #0
 800192e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001930:	2300      	movs	r3, #0
 8001932:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001934:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001938:	4619      	mov	r1, r3
 800193a:	483c      	ldr	r0, [pc, #240]	; (8001a2c <MX_GPIO_Init+0x320>)
 800193c:	f004 fa2e 	bl	8005d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001940:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001944:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001946:	2300      	movs	r3, #0
 8001948:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194a:	2300      	movs	r3, #0
 800194c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800194e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001952:	4619      	mov	r1, r3
 8001954:	483d      	ldr	r0, [pc, #244]	; (8001a4c <MX_GPIO_Init+0x340>)
 8001956:	f004 fa21 	bl	8005d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_6;
 800195a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800195e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001960:	2301      	movs	r3, #1
 8001962:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001968:	2300      	movs	r3, #0
 800196a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001970:	4619      	mov	r1, r3
 8001972:	482e      	ldr	r0, [pc, #184]	; (8001a2c <MX_GPIO_Init+0x320>)
 8001974:	f004 fa12 	bl	8005d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : audio_Int_Pin */
  GPIO_InitStruct.Pin = audio_Int_Pin;
 8001978:	2380      	movs	r3, #128	; 0x80
 800197a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197c:	2302      	movs	r3, #2
 800197e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001980:	2300      	movs	r3, #0
 8001982:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001984:	2300      	movs	r3, #0
 8001986:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001988:	2306      	movs	r3, #6
 800198a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(audio_Int_GPIO_Port, &GPIO_InitStruct);
 800198c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001990:	4619      	mov	r1, r3
 8001992:	4828      	ldr	r0, [pc, #160]	; (8001a34 <MX_GPIO_Init+0x328>)
 8001994:	f004 fa02 	bl	8005d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001998:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800199c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800199e:	2301      	movs	r3, #1
 80019a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a6:	2300      	movs	r3, #0
 80019a8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80019aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019ae:	4619      	mov	r1, r3
 80019b0:	481f      	ldr	r0, [pc, #124]	; (8001a30 <MX_GPIO_Init+0x324>)
 80019b2:	f004 f9f3 	bl	8005d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80019b6:	2308      	movs	r3, #8
 80019b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ba:	2301      	movs	r3, #1
 80019bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019be:	2300      	movs	r3, #0
 80019c0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c2:	2300      	movs	r3, #0
 80019c4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019ca:	4619      	mov	r1, r3
 80019cc:	4819      	ldr	r0, [pc, #100]	; (8001a34 <MX_GPIO_Init+0x328>)
 80019ce:	f004 f9e5 	bl	8005d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80019d2:	2304      	movs	r3, #4
 80019d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019d6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80019da:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019dc:	2300      	movs	r3, #0
 80019de:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80019e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019e4:	4619      	mov	r1, r3
 80019e6:	4813      	ldr	r0, [pc, #76]	; (8001a34 <MX_GPIO_Init+0x328>)
 80019e8:	f004 f9d8 	bl	8005d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 80019ec:	2301      	movs	r3, #1
 80019ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019f0:	2300      	movs	r3, #0
 80019f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 80019f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019fc:	4619      	mov	r1, r3
 80019fe:	480e      	ldr	r0, [pc, #56]	; (8001a38 <MX_GPIO_Init+0x32c>)
 8001a00:	f004 f9cc 	bl	8005d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PK1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001a04:	2302      	movs	r3, #2
 8001a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a10:	2300      	movs	r3, #0
 8001a12:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001a14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4807      	ldr	r0, [pc, #28]	; (8001a38 <MX_GPIO_Init+0x32c>)
 8001a1c:	f004 f9be 	bl	8005d9c <HAL_GPIO_Init>
 8001a20:	e016      	b.n	8001a50 <MX_GPIO_Init+0x344>
 8001a22:	bf00      	nop
 8001a24:	58024400 	.word	0x58024400
 8001a28:	58020400 	.word	0x58020400
 8001a2c:	58020000 	.word	0x58020000
 8001a30:	58022000 	.word	0x58022000
 8001a34:	58021800 	.word	0x58021800
 8001a38:	58022800 	.word	0x58022800
 8001a3c:	58022400 	.word	0x58022400
 8001a40:	58021c00 	.word	0x58021c00
 8001a44:	58020c00 	.word	0x58020c00
 8001a48:	58021000 	.word	0x58021000
 8001a4c:	58020800 	.word	0x58020800

  /*Configure GPIO pins : PF6 PF7 PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8001a50:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001a54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a56:	2302      	movs	r3, #2
 8001a58:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001a62:	2309      	movs	r3, #9
 8001a64:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4822      	ldr	r0, [pc, #136]	; (8001af8 <MX_GPIO_Init+0x3ec>)
 8001a6e:	f004 f995 	bl	8005d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a80:	2300      	movs	r3, #0
 8001a82:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001a84:	230a      	movs	r3, #10
 8001a86:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	481a      	ldr	r0, [pc, #104]	; (8001af8 <MX_GPIO_Init+0x3ec>)
 8001a90:	f004 f984 	bl	8005d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS2_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS2_OverCurrent_Pin;
 8001a94:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a9a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a9e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS2_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001aa4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4814      	ldr	r0, [pc, #80]	; (8001afc <MX_GPIO_Init+0x3f0>)
 8001aac:	f004 f976 	bl	8005d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001ab0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aba:	2300      	movs	r3, #0
 8001abc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001ac2:	2309      	movs	r3, #9
 8001ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ac6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aca:	4619      	mov	r1, r3
 8001acc:	480c      	ldr	r0, [pc, #48]	; (8001b00 <MX_GPIO_Init+0x3f4>)
 8001ace:	f004 f965 	bl	8005d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8001ad2:	2304      	movs	r3, #4
 8001ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ada:	2300      	movs	r3, #0
 8001adc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8001ae2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4806      	ldr	r0, [pc, #24]	; (8001b04 <MX_GPIO_Init+0x3f8>)
 8001aea:	f004 f957 	bl	8005d9c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001aee:	bf00      	nop
 8001af0:	3740      	adds	r7, #64	; 0x40
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	58021400 	.word	0x58021400
 8001afc:	58021c00 	.word	0x58021c00
 8001b00:	58020c00 	.word	0x58020c00
 8001b04:	58022400 	.word	0x58022400

08001b08 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]

	if (huart == &huart3) {
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4a06      	ldr	r2, [pc, #24]	; (8001b2c <HAL_UART_RxCpltCallback+0x24>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d102      	bne.n	8001b1e <HAL_UART_RxCpltCallback+0x16>
		haveReceived = true;
 8001b18:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <HAL_UART_RxCpltCallback+0x28>)
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	701a      	strb	r2, [r3, #0]
	}

}
 8001b1e:	bf00      	nop
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	2400079c 	.word	0x2400079c
 8001b30:	24000d70 	.word	0x24000d70

08001b34 <printWelcomeText>:

bool printWelcomeText(void) {
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0

	for (int i = 0; i<WELCOME_STRINGS; i++) {
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	607b      	str	r3, [r7, #4]
 8001b3e:	e011      	b.n	8001b64 <printWelcomeText+0x30>
		if (!printString(welcomeStrings[i])) {
 8001b40:	4a0c      	ldr	r2, [pc, #48]	; (8001b74 <printWelcomeText+0x40>)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f000 f815 	bl	8001b78 <printString>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	f083 0301 	eor.w	r3, r3, #1
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <printWelcomeText+0x2a>
			return false;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	e006      	b.n	8001b6c <printWelcomeText+0x38>
	for (int i = 0; i<WELCOME_STRINGS; i++) {
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	3301      	adds	r3, #1
 8001b62:	607b      	str	r3, [r7, #4]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2b07      	cmp	r3, #7
 8001b68:	ddea      	ble.n	8001b40 <printWelcomeText+0xc>
		}
	}
	return true;
 8001b6a:	2301      	movs	r3, #1

}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	24000000 	.word	0x24000000

08001b78 <printString>:

bool printString(char *string) {
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]

	if (HAL_UART_Transmit(&huart3, (const uint8_t *) string, strlen(string), 6000) != HAL_OK) {
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f7fe fbad 	bl	80002e0 <strlen>
 8001b86:	4603      	mov	r3, r0
 8001b88:	b29a      	uxth	r2, r3
 8001b8a:	f241 7370 	movw	r3, #6000	; 0x1770
 8001b8e:	6879      	ldr	r1, [r7, #4]
 8001b90:	4806      	ldr	r0, [pc, #24]	; (8001bac <printString+0x34>)
 8001b92:	f009 ff41 	bl	800ba18 <HAL_UART_Transmit>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <printString+0x28>
		return false;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	e000      	b.n	8001ba2 <printString+0x2a>
	}
	return true;
 8001ba0:	2301      	movs	r3, #1

}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	2400079c 	.word	0x2400079c

08001bb0 <receiveValue>:

bool receiveValue(int bytesToReceive) {
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]

	if (HAL_UART_Receive_IT(&huart3, rxBuffer, bytesToReceive) != HAL_OK) {
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	4907      	ldr	r1, [pc, #28]	; (8001bdc <receiveValue+0x2c>)
 8001bc0:	4807      	ldr	r0, [pc, #28]	; (8001be0 <receiveValue+0x30>)
 8001bc2:	f009 ffb7 	bl	800bb34 <HAL_UART_Receive_IT>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <receiveValue+0x20>
		return false;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	e000      	b.n	8001bd2 <receiveValue+0x22>
	}
	return true;
 8001bd0:	2301      	movs	r3, #1

}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	24000d74 	.word	0x24000d74
 8001be0:	2400079c 	.word	0x2400079c

08001be4 <moveTextLCD>:


void moveTextLCD(void) {
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0

	LCD_Clear();
 8001bea:	f7fe fe31 	bl	8000850 <LCD_Clear>
	strcpy(rxBuffer, "Hello");
 8001bee:	4b2e      	ldr	r3, [pc, #184]	; (8001ca8 <moveTextLCD+0xc4>)
 8001bf0:	4a2e      	ldr	r2, [pc, #184]	; (8001cac <moveTextLCD+0xc8>)
 8001bf2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001bf6:	6018      	str	r0, [r3, #0]
 8001bf8:	3304      	adds	r3, #4
 8001bfa:	8019      	strh	r1, [r3, #0]
	HAL_Delay(1000);
 8001bfc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c00:	f001 f9e8 	bl	8002fd4 <HAL_Delay>
	LCD_Write(rxBuffer);
 8001c04:	4828      	ldr	r0, [pc, #160]	; (8001ca8 <moveTextLCD+0xc4>)
 8001c06:	f7fe fde5 	bl	80007d4 <LCD_Write>
	int i = 0, stringLength = strlen(rxBuffer);
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60fb      	str	r3, [r7, #12]
 8001c0e:	4826      	ldr	r0, [pc, #152]	; (8001ca8 <moveTextLCD+0xc4>)
 8001c10:	f7fe fb66 	bl	80002e0 <strlen>
 8001c14:	4603      	mov	r3, r0
 8001c16:	607b      	str	r3, [r7, #4]
	bool edge = false;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	72fb      	strb	r3, [r7, #11]
	if (receiveValue(1)) {
 8001c1c:	2001      	movs	r0, #1
 8001c1e:	f7ff ffc7 	bl	8001bb0 <receiveValue>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d03a      	beq.n	8001c9e <moveTextLCD+0xba>
		if (printString(quitPrompt)) {
 8001c28:	4b21      	ldr	r3, [pc, #132]	; (8001cb0 <moveTextLCD+0xcc>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff ffa3 	bl	8001b78 <printString>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d032      	beq.n	8001c9e <moveTextLCD+0xba>
			while (!haveReceived) {
 8001c38:	e02a      	b.n	8001c90 <moveTextLCD+0xac>
				if (i < (16 - stringLength) && !edge) {
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f1c3 0310 	rsb	r3, r3, #16
 8001c40:	68fa      	ldr	r2, [r7, #12]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	da13      	bge.n	8001c6e <moveTextLCD+0x8a>
 8001c46:	7afb      	ldrb	r3, [r7, #11]
 8001c48:	f083 0301 	eor.w	r3, r3, #1
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d00d      	beq.n	8001c6e <moveTextLCD+0x8a>
					LCD_Scroll_Display_Right();
 8001c52:	f7fe fe04 	bl	800085e <LCD_Scroll_Display_Right>
					i++;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	60fb      	str	r3, [r7, #12]
					if (i == (16 - stringLength)) {
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f1c3 0310 	rsb	r3, r3, #16
 8001c62:	68fa      	ldr	r2, [r7, #12]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d10f      	bne.n	8001c88 <moveTextLCD+0xa4>
						edge = true;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	72fb      	strb	r3, [r7, #11]
					if (i == (16 - stringLength)) {
 8001c6c:	e00c      	b.n	8001c88 <moveTextLCD+0xa4>
					}
				} else if (edge) {
 8001c6e:	7afb      	ldrb	r3, [r7, #11]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d009      	beq.n	8001c88 <moveTextLCD+0xa4>
					LCD_Scroll_Display_Left();
 8001c74:	f7fe fdfa 	bl	800086c <LCD_Scroll_Display_Left>
					i--;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	60fb      	str	r3, [r7, #12]
					if (i == 0) {
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d101      	bne.n	8001c88 <moveTextLCD+0xa4>
						edge = false;
 8001c84:	2300      	movs	r3, #0
 8001c86:	72fb      	strb	r3, [r7, #11]
					}
				}
				HAL_Delay(1000);
 8001c88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c8c:	f001 f9a2 	bl	8002fd4 <HAL_Delay>
			while (!haveReceived) {
 8001c90:	4b08      	ldr	r3, [pc, #32]	; (8001cb4 <moveTextLCD+0xd0>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	f083 0301 	eor.w	r3, r3, #1
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1cd      	bne.n	8001c3a <moveTextLCD+0x56>
			}
		}
	}

}
 8001c9e:	bf00      	nop
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	24000d74 	.word	0x24000d74
 8001cac:	0800f398 	.word	0x0800f398
 8001cb0:	24000024 	.word	0x24000024
 8001cb4:	24000d70 	.word	0x24000d70

08001cb8 <displayClock>:

void displayClock() {
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af02      	add	r7, sp, #8

	uint8_t seconds, minutes, hours;
	char timeString[9];

	if (receiveValue(1)) {
 8001cbe:	2001      	movs	r0, #1
 8001cc0:	f7ff ff76 	bl	8001bb0 <receiveValue>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d03f      	beq.n	8001d4a <displayClock+0x92>
		if (printString(quitPrompt)) {
 8001cca:	4b22      	ldr	r3, [pc, #136]	; (8001d54 <displayClock+0x9c>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7ff ff52 	bl	8001b78 <printString>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d037      	beq.n	8001d4a <displayClock+0x92>
			LCD_Clear();
 8001cda:	f7fe fdb9 	bl	8000850 <LCD_Clear>
			while (!haveReceived) {
 8001cde:	e02d      	b.n	8001d3c <displayClock+0x84>
				HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	491d      	ldr	r1, [pc, #116]	; (8001d58 <displayClock+0xa0>)
 8001ce4:	481d      	ldr	r0, [pc, #116]	; (8001d5c <displayClock+0xa4>)
 8001ce6:	f008 fc61 	bl	800a5ac <HAL_RTC_GetTime>
				seconds = sTime.Seconds;
 8001cea:	4b1b      	ldr	r3, [pc, #108]	; (8001d58 <displayClock+0xa0>)
 8001cec:	789b      	ldrb	r3, [r3, #2]
 8001cee:	73fb      	strb	r3, [r7, #15]
				minutes = sTime.Minutes;
 8001cf0:	4b19      	ldr	r3, [pc, #100]	; (8001d58 <displayClock+0xa0>)
 8001cf2:	785b      	ldrb	r3, [r3, #1]
 8001cf4:	73bb      	strb	r3, [r7, #14]
				hours = sTime.Hours;
 8001cf6:	4b18      	ldr	r3, [pc, #96]	; (8001d58 <displayClock+0xa0>)
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	737b      	strb	r3, [r7, #13]
				HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	4918      	ldr	r1, [pc, #96]	; (8001d60 <displayClock+0xa8>)
 8001d00:	4816      	ldr	r0, [pc, #88]	; (8001d5c <displayClock+0xa4>)
 8001d02:	f008 fd37 	bl	800a774 <HAL_RTC_GetDate>
				sprintf(timeString, "%02u:%02u:%02u", hours, minutes, seconds);
 8001d06:	7b7a      	ldrb	r2, [r7, #13]
 8001d08:	7bb9      	ldrb	r1, [r7, #14]
 8001d0a:	7bfb      	ldrb	r3, [r7, #15]
 8001d0c:	1d38      	adds	r0, r7, #4
 8001d0e:	9300      	str	r3, [sp, #0]
 8001d10:	460b      	mov	r3, r1
 8001d12:	4914      	ldr	r1, [pc, #80]	; (8001d64 <displayClock+0xac>)
 8001d14:	f00c fe68 	bl	800e9e8 <siprintf>

				HAL_Delay(100);
 8001d18:	2064      	movs	r0, #100	; 0x64
 8001d1a:	f001 f95b 	bl	8002fd4 <HAL_Delay>
				LCD_Pos_Cursor(0, 0);
 8001d1e:	2100      	movs	r1, #0
 8001d20:	2000      	movs	r0, #0
 8001d22:	f7fe fd70 	bl	8000806 <LCD_Pos_Cursor>
				HAL_Delay(100);
 8001d26:	2064      	movs	r0, #100	; 0x64
 8001d28:	f001 f954 	bl	8002fd4 <HAL_Delay>
				LCD_Write(timeString);
 8001d2c:	1d3b      	adds	r3, r7, #4
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7fe fd50 	bl	80007d4 <LCD_Write>
				HAL_Delay(800);
 8001d34:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001d38:	f001 f94c 	bl	8002fd4 <HAL_Delay>
			while (!haveReceived) {
 8001d3c:	4b0a      	ldr	r3, [pc, #40]	; (8001d68 <displayClock+0xb0>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	f083 0301 	eor.w	r3, r3, #1
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d1ca      	bne.n	8001ce0 <displayClock+0x28>
			}
		}
	}

}
 8001d4a:	bf00      	nop
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	24000024 	.word	0x24000024
 8001d58:	24000d94 	.word	0x24000d94
 8001d5c:	24000574 	.word	0x24000574
 8001d60:	24000da8 	.word	0x24000da8
 8001d64:	0800f3a0 	.word	0x0800f3a0
 8001d68:	24000d70 	.word	0x24000d70

08001d6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d70:	b672      	cpsid	i
}
 8001d72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d74:	e7fe      	b.n	8001d74 <Error_Handler+0x8>
	...

08001d78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d7e:	4b0a      	ldr	r3, [pc, #40]	; (8001da8 <HAL_MspInit+0x30>)
 8001d80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d84:	4a08      	ldr	r2, [pc, #32]	; (8001da8 <HAL_MspInit+0x30>)
 8001d86:	f043 0302 	orr.w	r3, r3, #2
 8001d8a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001d8e:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <HAL_MspInit+0x30>)
 8001d90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	607b      	str	r3, [r7, #4]
 8001d9a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d9c:	bf00      	nop
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr
 8001da8:	58024400 	.word	0x58024400

08001dac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b090      	sub	sp, #64	; 0x40
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	605a      	str	r2, [r3, #4]
 8001dbe:	609a      	str	r2, [r3, #8]
 8001dc0:	60da      	str	r2, [r3, #12]
 8001dc2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a72      	ldr	r2, [pc, #456]	; (8001f94 <HAL_ADC_MspInit+0x1e8>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d14e      	bne.n	8001e6c <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001dce:	4b72      	ldr	r3, [pc, #456]	; (8001f98 <HAL_ADC_MspInit+0x1ec>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	4a70      	ldr	r2, [pc, #448]	; (8001f98 <HAL_ADC_MspInit+0x1ec>)
 8001dd6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001dd8:	4b6f      	ldr	r3, [pc, #444]	; (8001f98 <HAL_ADC_MspInit+0x1ec>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d10e      	bne.n	8001dfe <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001de0:	4b6e      	ldr	r3, [pc, #440]	; (8001f9c <HAL_ADC_MspInit+0x1f0>)
 8001de2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001de6:	4a6d      	ldr	r2, [pc, #436]	; (8001f9c <HAL_ADC_MspInit+0x1f0>)
 8001de8:	f043 0320 	orr.w	r3, r3, #32
 8001dec:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001df0:	4b6a      	ldr	r3, [pc, #424]	; (8001f9c <HAL_ADC_MspInit+0x1f0>)
 8001df2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001df6:	f003 0320 	and.w	r3, r3, #32
 8001dfa:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dfe:	4b67      	ldr	r3, [pc, #412]	; (8001f9c <HAL_ADC_MspInit+0x1f0>)
 8001e00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e04:	4a65      	ldr	r2, [pc, #404]	; (8001f9c <HAL_ADC_MspInit+0x1f0>)
 8001e06:	f043 0304 	orr.w	r3, r3, #4
 8001e0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e0e:	4b63      	ldr	r3, [pc, #396]	; (8001f9c <HAL_ADC_MspInit+0x1f0>)
 8001e10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e14:	f003 0304 	and.w	r3, r3, #4
 8001e18:	627b      	str	r3, [r7, #36]	; 0x24
 8001e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e1c:	4b5f      	ldr	r3, [pc, #380]	; (8001f9c <HAL_ADC_MspInit+0x1f0>)
 8001e1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e22:	4a5e      	ldr	r2, [pc, #376]	; (8001f9c <HAL_ADC_MspInit+0x1f0>)
 8001e24:	f043 0301 	orr.w	r3, r3, #1
 8001e28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e2c:	4b5b      	ldr	r3, [pc, #364]	; (8001f9c <HAL_ADC_MspInit+0x1f0>)
 8001e2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	623b      	str	r3, [r7, #32]
 8001e38:	6a3b      	ldr	r3, [r7, #32]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    PA0_C     ------> ADC1_INP0
    PA1_C     ------> ADC1_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e42:	2300      	movs	r3, #0
 8001e44:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4854      	ldr	r0, [pc, #336]	; (8001fa0 <HAL_ADC_MspInit+0x1f4>)
 8001e4e:	f003 ffa5 	bl	8005d9c <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8001e52:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8001e56:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8001e5a:	f001 f8ff 	bl	800305c <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8001e5e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e62:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8001e66:	f001 f8f9 	bl	800305c <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001e6a:	e08f      	b.n	8001f8c <HAL_ADC_MspInit+0x1e0>
  else if(hadc->Instance==ADC2)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a4c      	ldr	r2, [pc, #304]	; (8001fa4 <HAL_ADC_MspInit+0x1f8>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d133      	bne.n	8001ede <HAL_ADC_MspInit+0x132>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001e76:	4b48      	ldr	r3, [pc, #288]	; (8001f98 <HAL_ADC_MspInit+0x1ec>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	4a46      	ldr	r2, [pc, #280]	; (8001f98 <HAL_ADC_MspInit+0x1ec>)
 8001e7e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001e80:	4b45      	ldr	r3, [pc, #276]	; (8001f98 <HAL_ADC_MspInit+0x1ec>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d10e      	bne.n	8001ea6 <HAL_ADC_MspInit+0xfa>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001e88:	4b44      	ldr	r3, [pc, #272]	; (8001f9c <HAL_ADC_MspInit+0x1f0>)
 8001e8a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001e8e:	4a43      	ldr	r2, [pc, #268]	; (8001f9c <HAL_ADC_MspInit+0x1f0>)
 8001e90:	f043 0320 	orr.w	r3, r3, #32
 8001e94:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001e98:	4b40      	ldr	r3, [pc, #256]	; (8001f9c <HAL_ADC_MspInit+0x1f0>)
 8001e9a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001e9e:	f003 0320 	and.w	r3, r3, #32
 8001ea2:	61fb      	str	r3, [r7, #28]
 8001ea4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea6:	4b3d      	ldr	r3, [pc, #244]	; (8001f9c <HAL_ADC_MspInit+0x1f0>)
 8001ea8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eac:	4a3b      	ldr	r2, [pc, #236]	; (8001f9c <HAL_ADC_MspInit+0x1f0>)
 8001eae:	f043 0301 	orr.w	r3, r3, #1
 8001eb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001eb6:	4b39      	ldr	r3, [pc, #228]	; (8001f9c <HAL_ADC_MspInit+0x1f0>)
 8001eb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ebc:	f003 0301 	and.w	r3, r3, #1
 8001ec0:	61bb      	str	r3, [r7, #24]
 8001ec2:	69bb      	ldr	r3, [r7, #24]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8001ec4:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8001ec8:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8001ecc:	f001 f8c6 	bl	800305c <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8001ed0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ed4:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8001ed8:	f001 f8c0 	bl	800305c <HAL_SYSCFG_AnalogSwitchConfig>
}
 8001edc:	e056      	b.n	8001f8c <HAL_ADC_MspInit+0x1e0>
  else if(hadc->Instance==ADC3)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a31      	ldr	r2, [pc, #196]	; (8001fa8 <HAL_ADC_MspInit+0x1fc>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d151      	bne.n	8001f8c <HAL_ADC_MspInit+0x1e0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001ee8:	4b2c      	ldr	r3, [pc, #176]	; (8001f9c <HAL_ADC_MspInit+0x1f0>)
 8001eea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eee:	4a2b      	ldr	r2, [pc, #172]	; (8001f9c <HAL_ADC_MspInit+0x1f0>)
 8001ef0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ef4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ef8:	4b28      	ldr	r3, [pc, #160]	; (8001f9c <HAL_ADC_MspInit+0x1f0>)
 8001efa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001efe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f02:	617b      	str	r3, [r7, #20]
 8001f04:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f06:	4b25      	ldr	r3, [pc, #148]	; (8001f9c <HAL_ADC_MspInit+0x1f0>)
 8001f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f0c:	4a23      	ldr	r2, [pc, #140]	; (8001f9c <HAL_ADC_MspInit+0x1f0>)
 8001f0e:	f043 0320 	orr.w	r3, r3, #32
 8001f12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f16:	4b21      	ldr	r3, [pc, #132]	; (8001f9c <HAL_ADC_MspInit+0x1f0>)
 8001f18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f1c:	f003 0320 	and.w	r3, r3, #32
 8001f20:	613b      	str	r3, [r7, #16]
 8001f22:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f24:	4b1d      	ldr	r3, [pc, #116]	; (8001f9c <HAL_ADC_MspInit+0x1f0>)
 8001f26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f2a:	4a1c      	ldr	r2, [pc, #112]	; (8001f9c <HAL_ADC_MspInit+0x1f0>)
 8001f2c:	f043 0304 	orr.w	r3, r3, #4
 8001f30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f34:	4b19      	ldr	r3, [pc, #100]	; (8001f9c <HAL_ADC_MspInit+0x1f0>)
 8001f36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f3a:	f003 0304 	and.w	r3, r3, #4
 8001f3e:	60fb      	str	r3, [r7, #12]
 8001f40:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001f42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f54:	4619      	mov	r1, r3
 8001f56:	4815      	ldr	r0, [pc, #84]	; (8001fac <HAL_ADC_MspInit+0x200>)
 8001f58:	f003 ff20 	bl	8005d9c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f60:	2303      	movs	r3, #3
 8001f62:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f64:	2300      	movs	r3, #0
 8001f66:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	480c      	ldr	r0, [pc, #48]	; (8001fa0 <HAL_ADC_MspInit+0x1f4>)
 8001f70:	f003 ff14 	bl	8005d9c <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001f74:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001f78:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001f7c:	f001 f86e 	bl	800305c <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001f80:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001f84:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001f88:	f001 f868 	bl	800305c <HAL_SYSCFG_AnalogSwitchConfig>
}
 8001f8c:	bf00      	nop
 8001f8e:	3740      	adds	r7, #64	; 0x40
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40022000 	.word	0x40022000
 8001f98:	24000db4 	.word	0x24000db4
 8001f9c:	58024400 	.word	0x58024400
 8001fa0:	58020800 	.word	0x58020800
 8001fa4:	40022100 	.word	0x40022100
 8001fa8:	58026000 	.word	0x58026000
 8001fac:	58021400 	.word	0x58021400

08001fb0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b092      	sub	sp, #72	; 0x48
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	605a      	str	r2, [r3, #4]
 8001fc2:	609a      	str	r2, [r3, #8]
 8001fc4:	60da      	str	r2, [r3, #12]
 8001fc6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a87      	ldr	r2, [pc, #540]	; (80021ec <HAL_ETH_MspInit+0x23c>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	f040 8108 	bne.w	80021e4 <HAL_ETH_MspInit+0x234>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001fd4:	4b86      	ldr	r3, [pc, #536]	; (80021f0 <HAL_ETH_MspInit+0x240>)
 8001fd6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001fda:	4a85      	ldr	r2, [pc, #532]	; (80021f0 <HAL_ETH_MspInit+0x240>)
 8001fdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fe0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001fe4:	4b82      	ldr	r3, [pc, #520]	; (80021f0 <HAL_ETH_MspInit+0x240>)
 8001fe6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001fea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fee:	633b      	str	r3, [r7, #48]	; 0x30
 8001ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001ff2:	4b7f      	ldr	r3, [pc, #508]	; (80021f0 <HAL_ETH_MspInit+0x240>)
 8001ff4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ff8:	4a7d      	ldr	r2, [pc, #500]	; (80021f0 <HAL_ETH_MspInit+0x240>)
 8001ffa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ffe:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002002:	4b7b      	ldr	r3, [pc, #492]	; (80021f0 <HAL_ETH_MspInit+0x240>)
 8002004:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002008:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800200c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800200e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8002010:	4b77      	ldr	r3, [pc, #476]	; (80021f0 <HAL_ETH_MspInit+0x240>)
 8002012:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002016:	4a76      	ldr	r2, [pc, #472]	; (80021f0 <HAL_ETH_MspInit+0x240>)
 8002018:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800201c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002020:	4b73      	ldr	r3, [pc, #460]	; (80021f0 <HAL_ETH_MspInit+0x240>)
 8002022:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202a:	62bb      	str	r3, [r7, #40]	; 0x28
 800202c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800202e:	4b70      	ldr	r3, [pc, #448]	; (80021f0 <HAL_ETH_MspInit+0x240>)
 8002030:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002034:	4a6e      	ldr	r2, [pc, #440]	; (80021f0 <HAL_ETH_MspInit+0x240>)
 8002036:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800203a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800203e:	4b6c      	ldr	r3, [pc, #432]	; (80021f0 <HAL_ETH_MspInit+0x240>)
 8002040:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002048:	627b      	str	r3, [r7, #36]	; 0x24
 800204a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800204c:	4b68      	ldr	r3, [pc, #416]	; (80021f0 <HAL_ETH_MspInit+0x240>)
 800204e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002052:	4a67      	ldr	r2, [pc, #412]	; (80021f0 <HAL_ETH_MspInit+0x240>)
 8002054:	f043 0310 	orr.w	r3, r3, #16
 8002058:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800205c:	4b64      	ldr	r3, [pc, #400]	; (80021f0 <HAL_ETH_MspInit+0x240>)
 800205e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002062:	f003 0310 	and.w	r3, r3, #16
 8002066:	623b      	str	r3, [r7, #32]
 8002068:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800206a:	4b61      	ldr	r3, [pc, #388]	; (80021f0 <HAL_ETH_MspInit+0x240>)
 800206c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002070:	4a5f      	ldr	r2, [pc, #380]	; (80021f0 <HAL_ETH_MspInit+0x240>)
 8002072:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002076:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800207a:	4b5d      	ldr	r3, [pc, #372]	; (80021f0 <HAL_ETH_MspInit+0x240>)
 800207c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002084:	61fb      	str	r3, [r7, #28]
 8002086:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002088:	4b59      	ldr	r3, [pc, #356]	; (80021f0 <HAL_ETH_MspInit+0x240>)
 800208a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800208e:	4a58      	ldr	r2, [pc, #352]	; (80021f0 <HAL_ETH_MspInit+0x240>)
 8002090:	f043 0304 	orr.w	r3, r3, #4
 8002094:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002098:	4b55      	ldr	r3, [pc, #340]	; (80021f0 <HAL_ETH_MspInit+0x240>)
 800209a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800209e:	f003 0304 	and.w	r3, r3, #4
 80020a2:	61bb      	str	r3, [r7, #24]
 80020a4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80020a6:	4b52      	ldr	r3, [pc, #328]	; (80021f0 <HAL_ETH_MspInit+0x240>)
 80020a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020ac:	4a50      	ldr	r2, [pc, #320]	; (80021f0 <HAL_ETH_MspInit+0x240>)
 80020ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020b6:	4b4e      	ldr	r3, [pc, #312]	; (80021f0 <HAL_ETH_MspInit+0x240>)
 80020b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020c0:	617b      	str	r3, [r7, #20]
 80020c2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020c4:	4b4a      	ldr	r3, [pc, #296]	; (80021f0 <HAL_ETH_MspInit+0x240>)
 80020c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020ca:	4a49      	ldr	r2, [pc, #292]	; (80021f0 <HAL_ETH_MspInit+0x240>)
 80020cc:	f043 0301 	orr.w	r3, r3, #1
 80020d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020d4:	4b46      	ldr	r3, [pc, #280]	; (80021f0 <HAL_ETH_MspInit+0x240>)
 80020d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	613b      	str	r3, [r7, #16]
 80020e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020e2:	4b43      	ldr	r3, [pc, #268]	; (80021f0 <HAL_ETH_MspInit+0x240>)
 80020e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020e8:	4a41      	ldr	r2, [pc, #260]	; (80021f0 <HAL_ETH_MspInit+0x240>)
 80020ea:	f043 0302 	orr.w	r3, r3, #2
 80020ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020f2:	4b3f      	ldr	r3, [pc, #252]	; (80021f0 <HAL_ETH_MspInit+0x240>)
 80020f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020f8:	f003 0302 	and.w	r3, r3, #2
 80020fc:	60fb      	str	r3, [r7, #12]
 80020fe:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PB1     ------> ETH_RXD3
    PC5     ------> ETH_RXD1
    PB0     ------> ETH_RXD2
    */
    GPIO_InitStruct.Pin = MII_TX_EN_Pin|MII_TXD1_Pin|MII_TXD0_Pin;
 8002100:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002104:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002106:	2302      	movs	r3, #2
 8002108:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210a:	2300      	movs	r3, #0
 800210c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210e:	2300      	movs	r3, #0
 8002110:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002112:	230b      	movs	r3, #11
 8002114:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002116:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800211a:	4619      	mov	r1, r3
 800211c:	4835      	ldr	r0, [pc, #212]	; (80021f4 <HAL_ETH_MspInit+0x244>)
 800211e:	f003 fe3d 	bl	8005d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_TXD3_Pin;
 8002122:	2304      	movs	r3, #4
 8002124:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002126:	2302      	movs	r3, #2
 8002128:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212a:	2300      	movs	r3, #0
 800212c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212e:	2300      	movs	r3, #0
 8002130:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002132:	230b      	movs	r3, #11
 8002134:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(MII_TXD3_GPIO_Port, &GPIO_InitStruct);
 8002136:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800213a:	4619      	mov	r1, r3
 800213c:	482e      	ldr	r0, [pc, #184]	; (80021f8 <HAL_ETH_MspInit+0x248>)
 800213e:	f003 fe2d 	bl	8005d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RX_ER_Pin;
 8002142:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002146:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002148:	2302      	movs	r3, #2
 800214a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214c:	2300      	movs	r3, #0
 800214e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002150:	2300      	movs	r3, #0
 8002152:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002154:	230b      	movs	r3, #11
 8002156:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(MII_RX_ER_GPIO_Port, &GPIO_InitStruct);
 8002158:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800215c:	4619      	mov	r1, r3
 800215e:	4827      	ldr	r0, [pc, #156]	; (80021fc <HAL_ETH_MspInit+0x24c>)
 8002160:	f003 fe1c 	bl	8005d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDC_Pin|MII_TXD2_Pin|MII_TX_CLK_Pin|MII_RXD0_Pin
 8002164:	233e      	movs	r3, #62	; 0x3e
 8002166:	637b      	str	r3, [r7, #52]	; 0x34
                          |MII_RXD1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002168:	2302      	movs	r3, #2
 800216a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216c:	2300      	movs	r3, #0
 800216e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002170:	2300      	movs	r3, #0
 8002172:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002174:	230b      	movs	r3, #11
 8002176:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002178:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800217c:	4619      	mov	r1, r3
 800217e:	4820      	ldr	r0, [pc, #128]	; (8002200 <HAL_ETH_MspInit+0x250>)
 8002180:	f003 fe0c 	bl	8005d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_CRS_Pin|MII_COL_Pin;
 8002184:	230c      	movs	r3, #12
 8002186:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002188:	2302      	movs	r3, #2
 800218a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218c:	2300      	movs	r3, #0
 800218e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002190:	2300      	movs	r3, #0
 8002192:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002194:	230b      	movs	r3, #11
 8002196:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002198:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800219c:	4619      	mov	r1, r3
 800219e:	4819      	ldr	r0, [pc, #100]	; (8002204 <HAL_ETH_MspInit+0x254>)
 80021a0:	f003 fdfc 	bl	8005d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDIO_Pin|MII_RX_CLK_Pin|MII_RX_DV_Pin;
 80021a4:	2386      	movs	r3, #134	; 0x86
 80021a6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a8:	2302      	movs	r3, #2
 80021aa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ac:	2300      	movs	r3, #0
 80021ae:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b0:	2300      	movs	r3, #0
 80021b2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80021b4:	230b      	movs	r3, #11
 80021b6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80021bc:	4619      	mov	r1, r3
 80021be:	4812      	ldr	r0, [pc, #72]	; (8002208 <HAL_ETH_MspInit+0x258>)
 80021c0:	f003 fdec 	bl	8005d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RX_D3_Pin|MII_RX_D2_Pin;
 80021c4:	2303      	movs	r3, #3
 80021c6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c8:	2302      	movs	r3, #2
 80021ca:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021cc:	2300      	movs	r3, #0
 80021ce:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d0:	2300      	movs	r3, #0
 80021d2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80021d4:	230b      	movs	r3, #11
 80021d6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021d8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80021dc:	4619      	mov	r1, r3
 80021de:	480b      	ldr	r0, [pc, #44]	; (800220c <HAL_ETH_MspInit+0x25c>)
 80021e0:	f003 fddc 	bl	8005d9c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80021e4:	bf00      	nop
 80021e6:	3748      	adds	r7, #72	; 0x48
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40028000 	.word	0x40028000
 80021f0:	58024400 	.word	0x58024400
 80021f4:	58021800 	.word	0x58021800
 80021f8:	58021000 	.word	0x58021000
 80021fc:	58022000 	.word	0x58022000
 8002200:	58020800 	.word	0x58020800
 8002204:	58021c00 	.word	0x58021c00
 8002208:	58020000 	.word	0x58020000
 800220c:	58020400 	.word	0x58020400

08002210 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b0bc      	sub	sp, #240	; 0xf0
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002218:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	605a      	str	r2, [r3, #4]
 8002222:	609a      	str	r2, [r3, #8]
 8002224:	60da      	str	r2, [r3, #12]
 8002226:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002228:	f107 0318 	add.w	r3, r7, #24
 800222c:	22c0      	movs	r2, #192	; 0xc0
 800222e:	2100      	movs	r1, #0
 8002230:	4618      	mov	r0, r3
 8002232:	f00c fbd1 	bl	800e9d8 <memset>
  if(hfdcan->Instance==FDCAN1)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a57      	ldr	r2, [pc, #348]	; (8002398 <HAL_FDCAN_MspInit+0x188>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d151      	bne.n	80022e4 <HAL_FDCAN_MspInit+0xd4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002240:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002244:	f04f 0300 	mov.w	r3, #0
 8002248:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 800224c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002250:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002254:	f107 0318 	add.w	r3, r7, #24
 8002258:	4618      	mov	r0, r3
 800225a:	f005 fb89 	bl	8007970 <HAL_RCCEx_PeriphCLKConfig>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8002264:	f7ff fd82 	bl	8001d6c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002268:	4b4c      	ldr	r3, [pc, #304]	; (800239c <HAL_FDCAN_MspInit+0x18c>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	3301      	adds	r3, #1
 800226e:	4a4b      	ldr	r2, [pc, #300]	; (800239c <HAL_FDCAN_MspInit+0x18c>)
 8002270:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002272:	4b4a      	ldr	r3, [pc, #296]	; (800239c <HAL_FDCAN_MspInit+0x18c>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d10e      	bne.n	8002298 <HAL_FDCAN_MspInit+0x88>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800227a:	4b49      	ldr	r3, [pc, #292]	; (80023a0 <HAL_FDCAN_MspInit+0x190>)
 800227c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002280:	4a47      	ldr	r2, [pc, #284]	; (80023a0 <HAL_FDCAN_MspInit+0x190>)
 8002282:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002286:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800228a:	4b45      	ldr	r3, [pc, #276]	; (80023a0 <HAL_FDCAN_MspInit+0x190>)
 800228c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002294:	617b      	str	r3, [r7, #20]
 8002296:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002298:	4b41      	ldr	r3, [pc, #260]	; (80023a0 <HAL_FDCAN_MspInit+0x190>)
 800229a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800229e:	4a40      	ldr	r2, [pc, #256]	; (80023a0 <HAL_FDCAN_MspInit+0x190>)
 80022a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022a8:	4b3d      	ldr	r3, [pc, #244]	; (80023a0 <HAL_FDCAN_MspInit+0x190>)
 80022aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022b2:	613b      	str	r3, [r7, #16]
 80022b4:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PH14     ------> FDCAN1_RX
    PH13     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = FDCAN1_RX_Pin|FDCAN1_TX_Pin;
 80022b6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80022ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022be:	2302      	movs	r3, #2
 80022c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c4:	2300      	movs	r3, #0
 80022c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ca:	2300      	movs	r3, #0
 80022cc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80022d0:	2309      	movs	r3, #9
 80022d2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80022d6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80022da:	4619      	mov	r1, r3
 80022dc:	4831      	ldr	r0, [pc, #196]	; (80023a4 <HAL_FDCAN_MspInit+0x194>)
 80022de:	f003 fd5d 	bl	8005d9c <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 80022e2:	e055      	b.n	8002390 <HAL_FDCAN_MspInit+0x180>
  else if(hfdcan->Instance==FDCAN2)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a2f      	ldr	r2, [pc, #188]	; (80023a8 <HAL_FDCAN_MspInit+0x198>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d150      	bne.n	8002390 <HAL_FDCAN_MspInit+0x180>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80022ee:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80022f2:	f04f 0300 	mov.w	r3, #0
 80022f6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80022fa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80022fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002302:	f107 0318 	add.w	r3, r7, #24
 8002306:	4618      	mov	r0, r3
 8002308:	f005 fb32 	bl	8007970 <HAL_RCCEx_PeriphCLKConfig>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <HAL_FDCAN_MspInit+0x106>
      Error_Handler();
 8002312:	f7ff fd2b 	bl	8001d6c <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002316:	4b21      	ldr	r3, [pc, #132]	; (800239c <HAL_FDCAN_MspInit+0x18c>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	3301      	adds	r3, #1
 800231c:	4a1f      	ldr	r2, [pc, #124]	; (800239c <HAL_FDCAN_MspInit+0x18c>)
 800231e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002320:	4b1e      	ldr	r3, [pc, #120]	; (800239c <HAL_FDCAN_MspInit+0x18c>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2b01      	cmp	r3, #1
 8002326:	d10e      	bne.n	8002346 <HAL_FDCAN_MspInit+0x136>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002328:	4b1d      	ldr	r3, [pc, #116]	; (80023a0 <HAL_FDCAN_MspInit+0x190>)
 800232a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800232e:	4a1c      	ldr	r2, [pc, #112]	; (80023a0 <HAL_FDCAN_MspInit+0x190>)
 8002330:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002334:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002338:	4b19      	ldr	r3, [pc, #100]	; (80023a0 <HAL_FDCAN_MspInit+0x190>)
 800233a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800233e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002342:	60fb      	str	r3, [r7, #12]
 8002344:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002346:	4b16      	ldr	r3, [pc, #88]	; (80023a0 <HAL_FDCAN_MspInit+0x190>)
 8002348:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800234c:	4a14      	ldr	r2, [pc, #80]	; (80023a0 <HAL_FDCAN_MspInit+0x190>)
 800234e:	f043 0302 	orr.w	r3, r3, #2
 8002352:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002356:	4b12      	ldr	r3, [pc, #72]	; (80023a0 <HAL_FDCAN_MspInit+0x190>)
 8002358:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800235c:	f003 0302 	and.w	r3, r3, #2
 8002360:	60bb      	str	r3, [r7, #8]
 8002362:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FDCAN2_RX_Pin|FDCAN2_TX_Pin;
 8002364:	f242 0320 	movw	r3, #8224	; 0x2020
 8002368:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800236c:	2302      	movs	r3, #2
 800236e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002372:	2300      	movs	r3, #0
 8002374:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002378:	2300      	movs	r3, #0
 800237a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 800237e:	2309      	movs	r3, #9
 8002380:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002384:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002388:	4619      	mov	r1, r3
 800238a:	4808      	ldr	r0, [pc, #32]	; (80023ac <HAL_FDCAN_MspInit+0x19c>)
 800238c:	f003 fd06 	bl	8005d9c <HAL_GPIO_Init>
}
 8002390:	bf00      	nop
 8002392:	37f0      	adds	r7, #240	; 0xf0
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	4000a000 	.word	0x4000a000
 800239c:	24000db8 	.word	0x24000db8
 80023a0:	58024400 	.word	0x58024400
 80023a4:	58021c00 	.word	0x58021c00
 80023a8:	4000a400 	.word	0x4000a400
 80023ac:	58020400 	.word	0x58020400

080023b0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b0be      	sub	sp, #248	; 0xf8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	605a      	str	r2, [r3, #4]
 80023c2:	609a      	str	r2, [r3, #8]
 80023c4:	60da      	str	r2, [r3, #12]
 80023c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023c8:	f107 0320 	add.w	r3, r7, #32
 80023cc:	22c0      	movs	r2, #192	; 0xc0
 80023ce:	2100      	movs	r1, #0
 80023d0:	4618      	mov	r0, r3
 80023d2:	f00c fb01 	bl	800e9d8 <memset>
  if(hltdc->Instance==LTDC)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a66      	ldr	r2, [pc, #408]	; (8002574 <HAL_LTDC_MspInit+0x1c4>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	f040 80c4 	bne.w	800256a <HAL_LTDC_MspInit+0x1ba>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80023e2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80023e6:	f04f 0300 	mov.w	r3, #0
 80023ea:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.PLL3.PLL3M = 32;
 80023ee:	2320      	movs	r3, #32
 80023f0:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3N = 192;
 80023f2:	23c0      	movs	r3, #192	; 0xc0
 80023f4:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80023f6:	2302      	movs	r3, #2
 80023f8:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80023fa:	2302      	movs	r3, #2
 80023fc:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 80023fe:	2302      	movs	r3, #2
 8002400:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8002402:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002406:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8002408:	f44f 7300 	mov.w	r3, #512	; 0x200
 800240c:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800240e:	2300      	movs	r3, #0
 8002410:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002412:	f107 0320 	add.w	r3, r7, #32
 8002416:	4618      	mov	r0, r3
 8002418:	f005 faaa 	bl	8007970 <HAL_RCCEx_PeriphCLKConfig>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <HAL_LTDC_MspInit+0x76>
    {
      Error_Handler();
 8002422:	f7ff fca3 	bl	8001d6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002426:	4b54      	ldr	r3, [pc, #336]	; (8002578 <HAL_LTDC_MspInit+0x1c8>)
 8002428:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800242c:	4a52      	ldr	r2, [pc, #328]	; (8002578 <HAL_LTDC_MspInit+0x1c8>)
 800242e:	f043 0308 	orr.w	r3, r3, #8
 8002432:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8002436:	4b50      	ldr	r3, [pc, #320]	; (8002578 <HAL_LTDC_MspInit+0x1c8>)
 8002438:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800243c:	f003 0308 	and.w	r3, r3, #8
 8002440:	61fb      	str	r3, [r7, #28]
 8002442:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002444:	4b4c      	ldr	r3, [pc, #304]	; (8002578 <HAL_LTDC_MspInit+0x1c8>)
 8002446:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800244a:	4a4b      	ldr	r2, [pc, #300]	; (8002578 <HAL_LTDC_MspInit+0x1c8>)
 800244c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002450:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002454:	4b48      	ldr	r3, [pc, #288]	; (8002578 <HAL_LTDC_MspInit+0x1c8>)
 8002456:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800245a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800245e:	61bb      	str	r3, [r7, #24]
 8002460:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002462:	4b45      	ldr	r3, [pc, #276]	; (8002578 <HAL_LTDC_MspInit+0x1c8>)
 8002464:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002468:	4a43      	ldr	r2, [pc, #268]	; (8002578 <HAL_LTDC_MspInit+0x1c8>)
 800246a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800246e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002472:	4b41      	ldr	r3, [pc, #260]	; (8002578 <HAL_LTDC_MspInit+0x1c8>)
 8002474:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800247c:	617b      	str	r3, [r7, #20]
 800247e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002480:	4b3d      	ldr	r3, [pc, #244]	; (8002578 <HAL_LTDC_MspInit+0x1c8>)
 8002482:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002486:	4a3c      	ldr	r2, [pc, #240]	; (8002578 <HAL_LTDC_MspInit+0x1c8>)
 8002488:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800248c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002490:	4b39      	ldr	r3, [pc, #228]	; (8002578 <HAL_LTDC_MspInit+0x1c8>)
 8002492:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002496:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800249a:	613b      	str	r3, [r7, #16]
 800249c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800249e:	4b36      	ldr	r3, [pc, #216]	; (8002578 <HAL_LTDC_MspInit+0x1c8>)
 80024a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024a4:	4a34      	ldr	r2, [pc, #208]	; (8002578 <HAL_LTDC_MspInit+0x1c8>)
 80024a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024ae:	4b32      	ldr	r3, [pc, #200]	; (8002578 <HAL_LTDC_MspInit+0x1c8>)
 80024b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024b8:	60fb      	str	r3, [r7, #12]
 80024ba:	68fb      	ldr	r3, [r7, #12]
    PJ5     ------> LTDC_R6
    PH9     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    PJ4     ------> LTDC_R5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
 80024bc:	23fc      	movs	r3, #252	; 0xfc
 80024be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_7|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c2:	2302      	movs	r3, #2
 80024c4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c8:	2300      	movs	r3, #0
 80024ca:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ce:	2300      	movs	r3, #0
 80024d0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80024d4:	230e      	movs	r3, #14
 80024d6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80024da:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80024de:	4619      	mov	r1, r3
 80024e0:	4826      	ldr	r0, [pc, #152]	; (800257c <HAL_LTDC_MspInit+0x1cc>)
 80024e2:	f003 fc5b 	bl	8005d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
 80024e6:	f24d 2303 	movw	r3, #53763	; 0xd203
 80024ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ee:	2302      	movs	r3, #2
 80024f0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f4:	2300      	movs	r3, #0
 80024f6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024fa:	2300      	movs	r3, #0
 80024fc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002500:	230e      	movs	r3, #14
 8002502:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002506:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800250a:	4619      	mov	r1, r3
 800250c:	481c      	ldr	r0, [pc, #112]	; (8002580 <HAL_LTDC_MspInit+0x1d0>)
 800250e:	f003 fc45 	bl	8005d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DISP_Pin|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
 8002512:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8002516:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800251a:	2302      	movs	r3, #2
 800251c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002520:	2300      	movs	r3, #0
 8002522:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002526:	2300      	movs	r3, #0
 8002528:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800252c:	230e      	movs	r3, #14
 800252e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002532:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002536:	4619      	mov	r1, r3
 8002538:	4812      	ldr	r0, [pc, #72]	; (8002584 <HAL_LTDC_MspInit+0x1d4>)
 800253a:	f003 fc2f 	bl	8005d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800253e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002542:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002546:	2302      	movs	r3, #2
 8002548:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254c:	2300      	movs	r3, #0
 800254e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002552:	2300      	movs	r3, #0
 8002554:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002558:	230e      	movs	r3, #14
 800255a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800255e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002562:	4619      	mov	r1, r3
 8002564:	4808      	ldr	r0, [pc, #32]	; (8002588 <HAL_LTDC_MspInit+0x1d8>)
 8002566:	f003 fc19 	bl	8005d9c <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800256a:	bf00      	nop
 800256c:	37f8      	adds	r7, #248	; 0xf8
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	50001000 	.word	0x50001000
 8002578:	58024400 	.word	0x58024400
 800257c:	58022800 	.word	0x58022800
 8002580:	58022000 	.word	0x58022000
 8002584:	58022400 	.word	0x58022400
 8002588:	58021c00 	.word	0x58021c00

0800258c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b0b2      	sub	sp, #200	; 0xc8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002594:	f107 0308 	add.w	r3, r7, #8
 8002598:	22c0      	movs	r2, #192	; 0xc0
 800259a:	2100      	movs	r1, #0
 800259c:	4618      	mov	r0, r3
 800259e:	f00c fa1b 	bl	800e9d8 <memset>
  if(hrtc->Instance==RTC)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a10      	ldr	r2, [pc, #64]	; (80025e8 <HAL_RTC_MspInit+0x5c>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d119      	bne.n	80025e0 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80025ac:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80025b0:	f04f 0300 	mov.w	r3, #0
 80025b4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80025b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025c0:	f107 0308 	add.w	r3, r7, #8
 80025c4:	4618      	mov	r0, r3
 80025c6:	f005 f9d3 	bl	8007970 <HAL_RCCEx_PeriphCLKConfig>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 80025d0:	f7ff fbcc 	bl	8001d6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80025d4:	4b05      	ldr	r3, [pc, #20]	; (80025ec <HAL_RTC_MspInit+0x60>)
 80025d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d8:	4a04      	ldr	r2, [pc, #16]	; (80025ec <HAL_RTC_MspInit+0x60>)
 80025da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025de:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80025e0:	bf00      	nop
 80025e2:	37c8      	adds	r7, #200	; 0xc8
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	58004000 	.word	0x58004000
 80025ec:	58024400 	.word	0x58024400

080025f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b0bc      	sub	sp, #240	; 0xf0
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]
 8002600:	605a      	str	r2, [r3, #4]
 8002602:	609a      	str	r2, [r3, #8]
 8002604:	60da      	str	r2, [r3, #12]
 8002606:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002608:	f107 0318 	add.w	r3, r7, #24
 800260c:	22c0      	movs	r2, #192	; 0xc0
 800260e:	2100      	movs	r1, #0
 8002610:	4618      	mov	r0, r3
 8002612:	f00c f9e1 	bl	800e9d8 <memset>
  if(hspi->Instance==SPI2)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a55      	ldr	r2, [pc, #340]	; (8002770 <HAL_SPI_MspInit+0x180>)
 800261c:	4293      	cmp	r3, r2
 800261e:	f040 80a3 	bne.w	8002768 <HAL_SPI_MspInit+0x178>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002622:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002626:	f04f 0300 	mov.w	r3, #0
 800262a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800262e:	2300      	movs	r3, #0
 8002630:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002632:	f107 0318 	add.w	r3, r7, #24
 8002636:	4618      	mov	r0, r3
 8002638:	f005 f99a 	bl	8007970 <HAL_RCCEx_PeriphCLKConfig>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8002642:	f7ff fb93 	bl	8001d6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002646:	4b4b      	ldr	r3, [pc, #300]	; (8002774 <HAL_SPI_MspInit+0x184>)
 8002648:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800264c:	4a49      	ldr	r2, [pc, #292]	; (8002774 <HAL_SPI_MspInit+0x184>)
 800264e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002652:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002656:	4b47      	ldr	r3, [pc, #284]	; (8002774 <HAL_SPI_MspInit+0x184>)
 8002658:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800265c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002660:	617b      	str	r3, [r7, #20]
 8002662:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002664:	4b43      	ldr	r3, [pc, #268]	; (8002774 <HAL_SPI_MspInit+0x184>)
 8002666:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800266a:	4a42      	ldr	r2, [pc, #264]	; (8002774 <HAL_SPI_MspInit+0x184>)
 800266c:	f043 0302 	orr.w	r3, r3, #2
 8002670:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002674:	4b3f      	ldr	r3, [pc, #252]	; (8002774 <HAL_SPI_MspInit+0x184>)
 8002676:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	613b      	str	r3, [r7, #16]
 8002680:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002682:	4b3c      	ldr	r3, [pc, #240]	; (8002774 <HAL_SPI_MspInit+0x184>)
 8002684:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002688:	4a3a      	ldr	r2, [pc, #232]	; (8002774 <HAL_SPI_MspInit+0x184>)
 800268a:	f043 0308 	orr.w	r3, r3, #8
 800268e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002692:	4b38      	ldr	r3, [pc, #224]	; (8002774 <HAL_SPI_MspInit+0x184>)
 8002694:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002698:	f003 0308 	and.w	r3, r3, #8
 800269c:	60fb      	str	r3, [r7, #12]
 800269e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80026a0:	4b34      	ldr	r3, [pc, #208]	; (8002774 <HAL_SPI_MspInit+0x184>)
 80026a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026a6:	4a33      	ldr	r2, [pc, #204]	; (8002774 <HAL_SPI_MspInit+0x184>)
 80026a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026b0:	4b30      	ldr	r3, [pc, #192]	; (8002774 <HAL_SPI_MspInit+0x184>)
 80026b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ba:	60bb      	str	r3, [r7, #8]
 80026bc:	68bb      	ldr	r3, [r7, #8]
    PB4 (NJTRST)     ------> SPI2_NSS
    PD3     ------> SPI2_SCK
    PI2     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80026be:	2310      	movs	r3, #16
 80026c0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c4:	2302      	movs	r3, #2
 80026c6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ca:	2300      	movs	r3, #0
 80026cc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d0:	2300      	movs	r3, #0
 80026d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 80026d6:	2307      	movs	r3, #7
 80026d8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026dc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80026e0:	4619      	mov	r1, r3
 80026e2:	4825      	ldr	r0, [pc, #148]	; (8002778 <HAL_SPI_MspInit+0x188>)
 80026e4:	f003 fb5a 	bl	8005d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80026e8:	2308      	movs	r3, #8
 80026ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ee:	2302      	movs	r3, #2
 80026f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f4:	2300      	movs	r3, #0
 80026f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026fa:	2300      	movs	r3, #0
 80026fc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002700:	2305      	movs	r3, #5
 8002702:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002706:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800270a:	4619      	mov	r1, r3
 800270c:	481b      	ldr	r0, [pc, #108]	; (800277c <HAL_SPI_MspInit+0x18c>)
 800270e:	f003 fb45 	bl	8005d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002712:	2304      	movs	r3, #4
 8002714:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002718:	2302      	movs	r3, #2
 800271a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271e:	2300      	movs	r3, #0
 8002720:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002724:	2300      	movs	r3, #0
 8002726:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800272a:	2305      	movs	r3, #5
 800272c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002730:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002734:	4619      	mov	r1, r3
 8002736:	4812      	ldr	r0, [pc, #72]	; (8002780 <HAL_SPI_MspInit+0x190>)
 8002738:	f003 fb30 	bl	8005d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800273c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002740:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002744:	2302      	movs	r3, #2
 8002746:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274a:	2300      	movs	r3, #0
 800274c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002750:	2300      	movs	r3, #0
 8002752:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002756:	2305      	movs	r3, #5
 8002758:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800275c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002760:	4619      	mov	r1, r3
 8002762:	4805      	ldr	r0, [pc, #20]	; (8002778 <HAL_SPI_MspInit+0x188>)
 8002764:	f003 fb1a 	bl	8005d9c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002768:	bf00      	nop
 800276a:	37f0      	adds	r7, #240	; 0xf0
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	40003800 	.word	0x40003800
 8002774:	58024400 	.word	0x58024400
 8002778:	58020400 	.word	0x58020400
 800277c:	58020c00 	.word	0x58020c00
 8002780:	58022000 	.word	0x58022000

08002784 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002784:	b480      	push	{r7}
 8002786:	b085      	sub	sp, #20
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a0b      	ldr	r2, [pc, #44]	; (80027c0 <HAL_TIM_Base_MspInit+0x3c>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d10e      	bne.n	80027b4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002796:	4b0b      	ldr	r3, [pc, #44]	; (80027c4 <HAL_TIM_Base_MspInit+0x40>)
 8002798:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800279c:	4a09      	ldr	r2, [pc, #36]	; (80027c4 <HAL_TIM_Base_MspInit+0x40>)
 800279e:	f043 0302 	orr.w	r3, r3, #2
 80027a2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80027a6:	4b07      	ldr	r3, [pc, #28]	; (80027c4 <HAL_TIM_Base_MspInit+0x40>)
 80027a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	60fb      	str	r3, [r7, #12]
 80027b2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80027b4:	bf00      	nop
 80027b6:	3714      	adds	r7, #20
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr
 80027c0:	40000400 	.word	0x40000400
 80027c4:	58024400 	.word	0x58024400

080027c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b0ba      	sub	sp, #232	; 0xe8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	605a      	str	r2, [r3, #4]
 80027da:	609a      	str	r2, [r3, #8]
 80027dc:	60da      	str	r2, [r3, #12]
 80027de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027e0:	f107 0310 	add.w	r3, r7, #16
 80027e4:	22c0      	movs	r2, #192	; 0xc0
 80027e6:	2100      	movs	r1, #0
 80027e8:	4618      	mov	r0, r3
 80027ea:	f00c f8f5 	bl	800e9d8 <memset>
  if(huart->Instance==USART3)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a2b      	ldr	r2, [pc, #172]	; (80028a0 <HAL_UART_MspInit+0xd8>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d14e      	bne.n	8002896 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80027f8:	f04f 0202 	mov.w	r2, #2
 80027fc:	f04f 0300 	mov.w	r3, #0
 8002800:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002804:	2300      	movs	r3, #0
 8002806:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800280a:	f107 0310 	add.w	r3, r7, #16
 800280e:	4618      	mov	r0, r3
 8002810:	f005 f8ae 	bl	8007970 <HAL_RCCEx_PeriphCLKConfig>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800281a:	f7ff faa7 	bl	8001d6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800281e:	4b21      	ldr	r3, [pc, #132]	; (80028a4 <HAL_UART_MspInit+0xdc>)
 8002820:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002824:	4a1f      	ldr	r2, [pc, #124]	; (80028a4 <HAL_UART_MspInit+0xdc>)
 8002826:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800282a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800282e:	4b1d      	ldr	r3, [pc, #116]	; (80028a4 <HAL_UART_MspInit+0xdc>)
 8002830:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002834:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002838:	60fb      	str	r3, [r7, #12]
 800283a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800283c:	4b19      	ldr	r3, [pc, #100]	; (80028a4 <HAL_UART_MspInit+0xdc>)
 800283e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002842:	4a18      	ldr	r2, [pc, #96]	; (80028a4 <HAL_UART_MspInit+0xdc>)
 8002844:	f043 0302 	orr.w	r3, r3, #2
 8002848:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800284c:	4b15      	ldr	r3, [pc, #84]	; (80028a4 <HAL_UART_MspInit+0xdc>)
 800284e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	60bb      	str	r3, [r7, #8]
 8002858:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800285a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800285e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002862:	2302      	movs	r3, #2
 8002864:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002868:	2300      	movs	r3, #0
 800286a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800286e:	2300      	movs	r3, #0
 8002870:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002874:	2307      	movs	r3, #7
 8002876:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800287a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800287e:	4619      	mov	r1, r3
 8002880:	4809      	ldr	r0, [pc, #36]	; (80028a8 <HAL_UART_MspInit+0xe0>)
 8002882:	f003 fa8b 	bl	8005d9c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002886:	2200      	movs	r2, #0
 8002888:	2100      	movs	r1, #0
 800288a:	2027      	movs	r0, #39	; 0x27
 800288c:	f001 fd65 	bl	800435a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002890:	2027      	movs	r0, #39	; 0x27
 8002892:	f001 fd7c 	bl	800438e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002896:	bf00      	nop
 8002898:	37e8      	adds	r7, #232	; 0xe8
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	40004800 	.word	0x40004800
 80028a4:	58024400 	.word	0x58024400
 80028a8:	58020400 	.word	0x58020400

080028ac <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b0ba      	sub	sp, #232	; 0xe8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	605a      	str	r2, [r3, #4]
 80028be:	609a      	str	r2, [r3, #8]
 80028c0:	60da      	str	r2, [r3, #12]
 80028c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80028c4:	f107 0310 	add.w	r3, r7, #16
 80028c8:	22c0      	movs	r2, #192	; 0xc0
 80028ca:	2100      	movs	r1, #0
 80028cc:	4618      	mov	r0, r3
 80028ce:	f00c f883 	bl	800e9d8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a30      	ldr	r2, [pc, #192]	; (8002998 <HAL_PCD_MspInit+0xec>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d159      	bne.n	8002990 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80028dc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80028e0:	f04f 0300 	mov.w	r3, #0
 80028e4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80028e8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80028ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028f0:	f107 0310 	add.w	r3, r7, #16
 80028f4:	4618      	mov	r0, r3
 80028f6:	f005 f83b 	bl	8007970 <HAL_RCCEx_PeriphCLKConfig>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8002900:	f7ff fa34 	bl	8001d6c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8002904:	f004 f83e 	bl	8006984 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002908:	4b24      	ldr	r3, [pc, #144]	; (800299c <HAL_PCD_MspInit+0xf0>)
 800290a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800290e:	4a23      	ldr	r2, [pc, #140]	; (800299c <HAL_PCD_MspInit+0xf0>)
 8002910:	f043 0301 	orr.w	r3, r3, #1
 8002914:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002918:	4b20      	ldr	r3, [pc, #128]	; (800299c <HAL_PCD_MspInit+0xf0>)
 800291a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	60fb      	str	r3, [r7, #12]
 8002924:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = VBUS_FS2_Pin;
 8002926:	f44f 7300 	mov.w	r3, #512	; 0x200
 800292a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800292e:	2300      	movs	r3, #0
 8002930:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002934:	2300      	movs	r3, #0
 8002936:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(VBUS_FS2_GPIO_Port, &GPIO_InitStruct);
 800293a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800293e:	4619      	mov	r1, r3
 8002940:	4817      	ldr	r0, [pc, #92]	; (80029a0 <HAL_PCD_MspInit+0xf4>)
 8002942:	f003 fa2b 	bl	8005d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS2_P_Pin|USB_OTG_FS2_N_Pin;
 8002946:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800294a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800294e:	2302      	movs	r3, #2
 8002950:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002954:	2300      	movs	r3, #0
 8002956:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800295a:	2300      	movs	r3, #0
 800295c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002960:	230a      	movs	r3, #10
 8002962:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002966:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800296a:	4619      	mov	r1, r3
 800296c:	480c      	ldr	r0, [pc, #48]	; (80029a0 <HAL_PCD_MspInit+0xf4>)
 800296e:	f003 fa15 	bl	8005d9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002972:	4b0a      	ldr	r3, [pc, #40]	; (800299c <HAL_PCD_MspInit+0xf0>)
 8002974:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002978:	4a08      	ldr	r2, [pc, #32]	; (800299c <HAL_PCD_MspInit+0xf0>)
 800297a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800297e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002982:	4b06      	ldr	r3, [pc, #24]	; (800299c <HAL_PCD_MspInit+0xf0>)
 8002984:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002988:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800298c:	60bb      	str	r3, [r7, #8]
 800298e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002990:	bf00      	nop
 8002992:	37e8      	adds	r7, #232	; 0xe8
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	40080000 	.word	0x40080000
 800299c:	58024400 	.word	0x58024400
 80029a0:	58020000 	.word	0x58020000

080029a4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b0b8      	sub	sp, #224	; 0xe0
 80029a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80029aa:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80029ae:	2200      	movs	r2, #0
 80029b0:	601a      	str	r2, [r3, #0]
 80029b2:	605a      	str	r2, [r3, #4]
 80029b4:	609a      	str	r2, [r3, #8]
 80029b6:	60da      	str	r2, [r3, #12]
 80029b8:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80029ba:	4b51      	ldr	r3, [pc, #324]	; (8002b00 <HAL_FMC_MspInit+0x15c>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	f040 8099 	bne.w	8002af6 <HAL_FMC_MspInit+0x152>
    return;
  }
  FMC_Initialized = 1;
 80029c4:	4b4e      	ldr	r3, [pc, #312]	; (8002b00 <HAL_FMC_MspInit+0x15c>)
 80029c6:	2201      	movs	r2, #1
 80029c8:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80029ca:	f107 0308 	add.w	r3, r7, #8
 80029ce:	22c0      	movs	r2, #192	; 0xc0
 80029d0:	2100      	movs	r1, #0
 80029d2:	4618      	mov	r0, r3
 80029d4:	f00c f800 	bl	800e9d8 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80029d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80029dc:	f04f 0300 	mov.w	r3, #0
 80029e0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 80029e4:	2300      	movs	r3, #0
 80029e6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029e8:	f107 0308 	add.w	r3, r7, #8
 80029ec:	4618      	mov	r0, r3
 80029ee:	f004 ffbf 	bl	8007970 <HAL_RCCEx_PeriphCLKConfig>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 80029f8:	f7ff f9b8 	bl	8001d6c <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80029fc:	4b41      	ldr	r3, [pc, #260]	; (8002b04 <HAL_FMC_MspInit+0x160>)
 80029fe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002a02:	4a40      	ldr	r2, [pc, #256]	; (8002b04 <HAL_FMC_MspInit+0x160>)
 8002a04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a08:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8002a0c:	4b3d      	ldr	r3, [pc, #244]	; (8002b04 <HAL_FMC_MspInit+0x160>)
 8002a0e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002a12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a16:	607b      	str	r3, [r7, #4]
 8002a18:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8002a1a:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002a1e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a22:	2302      	movs	r3, #2
 8002a24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a34:	230c      	movs	r3, #12
 8002a36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a3a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002a3e:	4619      	mov	r1, r3
 8002a40:	4831      	ldr	r0, [pc, #196]	; (8002b08 <HAL_FMC_MspInit+0x164>)
 8002a42:	f003 f9ab 	bl	8005d9c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8002a46:	f248 1333 	movw	r3, #33075	; 0x8133
 8002a4a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a4e:	2302      	movs	r3, #2
 8002a50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a54:	2300      	movs	r3, #0
 8002a56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a60:	230c      	movs	r3, #12
 8002a62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002a66:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	4827      	ldr	r0, [pc, #156]	; (8002b0c <HAL_FMC_MspInit+0x168>)
 8002a6e:	f003 f995 	bl	8005d9c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8002a72:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002a76:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a80:	2300      	movs	r3, #0
 8002a82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a86:	2303      	movs	r3, #3
 8002a88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a8c:	230c      	movs	r3, #12
 8002a8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a92:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002a96:	4619      	mov	r1, r3
 8002a98:	481d      	ldr	r0, [pc, #116]	; (8002b10 <HAL_FMC_MspInit+0x16c>)
 8002a9a:	f003 f97f 	bl	8005d9c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8002a9e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002aa2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aac:	2300      	movs	r3, #0
 8002aae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002ab8:	230c      	movs	r3, #12
 8002aba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002abe:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	4813      	ldr	r0, [pc, #76]	; (8002b14 <HAL_FMC_MspInit+0x170>)
 8002ac6:	f003 f969 	bl	8005d9c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002aca:	23e0      	movs	r3, #224	; 0xe0
 8002acc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002adc:	2303      	movs	r3, #3
 8002ade:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002ae2:	230c      	movs	r3, #12
 8002ae4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002ae8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002aec:	4619      	mov	r1, r3
 8002aee:	480a      	ldr	r0, [pc, #40]	; (8002b18 <HAL_FMC_MspInit+0x174>)
 8002af0:	f003 f954 	bl	8005d9c <HAL_GPIO_Init>
 8002af4:	e000      	b.n	8002af8 <HAL_FMC_MspInit+0x154>
    return;
 8002af6:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002af8:	37e0      	adds	r7, #224	; 0xe0
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	24000dbc 	.word	0x24000dbc
 8002b04:	58024400 	.word	0x58024400
 8002b08:	58021000 	.word	0x58021000
 8002b0c:	58021800 	.word	0x58021800
 8002b10:	58020c00 	.word	0x58020c00
 8002b14:	58021400 	.word	0x58021400
 8002b18:	58021c00 	.word	0x58021c00

08002b1c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002b24:	f7ff ff3e 	bl	80029a4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002b28:	bf00      	nop
 8002b2a:	3708      	adds	r7, #8
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b0ba      	sub	sp, #232	; 0xe8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b38:	f107 0310 	add.w	r3, r7, #16
 8002b3c:	22c0      	movs	r2, #192	; 0xc0
 8002b3e:	2100      	movs	r1, #0
 8002b40:	4618      	mov	r0, r3
 8002b42:	f00b ff49 	bl	800e9d8 <memset>
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a45      	ldr	r2, [pc, #276]	; (8002c60 <HAL_SAI_MspInit+0x130>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d13e      	bne.n	8002bce <HAL_SAI_MspInit+0x9e>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8002b50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b54:	f04f 0300 	mov.w	r3, #0
 8002b58:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b60:	f107 0310 	add.w	r3, r7, #16
 8002b64:	4618      	mov	r0, r3
 8002b66:	f004 ff03 	bl	8007970 <HAL_RCCEx_PeriphCLKConfig>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d001      	beq.n	8002b74 <HAL_SAI_MspInit+0x44>
    {
      Error_Handler();
 8002b70:	f7ff f8fc 	bl	8001d6c <Error_Handler>
    }

    if (SAI2_client == 0)
 8002b74:	4b3b      	ldr	r3, [pc, #236]	; (8002c64 <HAL_SAI_MspInit+0x134>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d10e      	bne.n	8002b9a <HAL_SAI_MspInit+0x6a>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002b7c:	4b3a      	ldr	r3, [pc, #232]	; (8002c68 <HAL_SAI_MspInit+0x138>)
 8002b7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b82:	4a39      	ldr	r2, [pc, #228]	; (8002c68 <HAL_SAI_MspInit+0x138>)
 8002b84:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b88:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002b8c:	4b36      	ldr	r3, [pc, #216]	; (8002c68 <HAL_SAI_MspInit+0x138>)
 8002b8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b96:	60fb      	str	r3, [r7, #12]
 8002b98:	68fb      	ldr	r3, [r7, #12]
    }
    SAI2_client ++;
 8002b9a:	4b32      	ldr	r3, [pc, #200]	; (8002c64 <HAL_SAI_MspInit+0x134>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	4a30      	ldr	r2, [pc, #192]	; (8002c64 <HAL_SAI_MspInit+0x134>)
 8002ba2:	6013      	str	r3, [r2, #0]
    PI6     ------> SAI2_SD_A
    PI5     ------> SAI2_SCK_A
    PI4     ------> SAI2_MCLK_A
    PI7     ------> SAI2_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_7;
 8002ba4:	23f0      	movs	r3, #240	; 0xf0
 8002ba6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002baa:	2302      	movs	r3, #2
 8002bac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002bbc:	230a      	movs	r3, #10
 8002bbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002bc2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	4828      	ldr	r0, [pc, #160]	; (8002c6c <HAL_SAI_MspInit+0x13c>)
 8002bca:	f003 f8e7 	bl	8005d9c <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a27      	ldr	r2, [pc, #156]	; (8002c70 <HAL_SAI_MspInit+0x140>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d13f      	bne.n	8002c58 <HAL_SAI_MspInit+0x128>
    {
      /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8002bd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bdc:	f04f 0300 	mov.w	r3, #0
 8002be0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 8002be4:	2300      	movs	r3, #0
 8002be6:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002be8:	f107 0310 	add.w	r3, r7, #16
 8002bec:	4618      	mov	r0, r3
 8002bee:	f004 febf 	bl	8007970 <HAL_RCCEx_PeriphCLKConfig>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d001      	beq.n	8002bfc <HAL_SAI_MspInit+0xcc>
    {
      Error_Handler();
 8002bf8:	f7ff f8b8 	bl	8001d6c <Error_Handler>
    }

      if (SAI2_client == 0)
 8002bfc:	4b19      	ldr	r3, [pc, #100]	; (8002c64 <HAL_SAI_MspInit+0x134>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d10e      	bne.n	8002c22 <HAL_SAI_MspInit+0xf2>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002c04:	4b18      	ldr	r3, [pc, #96]	; (8002c68 <HAL_SAI_MspInit+0x138>)
 8002c06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c0a:	4a17      	ldr	r2, [pc, #92]	; (8002c68 <HAL_SAI_MspInit+0x138>)
 8002c0c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c10:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002c14:	4b14      	ldr	r3, [pc, #80]	; (8002c68 <HAL_SAI_MspInit+0x138>)
 8002c16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c1e:	60bb      	str	r3, [r7, #8]
 8002c20:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 8002c22:	4b10      	ldr	r3, [pc, #64]	; (8002c64 <HAL_SAI_MspInit+0x134>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	3301      	adds	r3, #1
 8002c28:	4a0e      	ldr	r2, [pc, #56]	; (8002c64 <HAL_SAI_MspInit+0x134>)
 8002c2a:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002c2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c30:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c34:	2302      	movs	r3, #2
 8002c36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c40:	2300      	movs	r3, #0
 8002c42:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002c46:	230a      	movs	r3, #10
 8002c48:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c4c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002c50:	4619      	mov	r1, r3
 8002c52:	4808      	ldr	r0, [pc, #32]	; (8002c74 <HAL_SAI_MspInit+0x144>)
 8002c54:	f003 f8a2 	bl	8005d9c <HAL_GPIO_Init>

    }
}
 8002c58:	bf00      	nop
 8002c5a:	37e8      	adds	r7, #232	; 0xe8
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	40015c04 	.word	0x40015c04
 8002c64:	24000dc0 	.word	0x24000dc0
 8002c68:	58024400 	.word	0x58024400
 8002c6c:	58022000 	.word	0x58022000
 8002c70:	40015c24 	.word	0x40015c24
 8002c74:	58021800 	.word	0x58021800

08002c78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c7c:	e7fe      	b.n	8002c7c <NMI_Handler+0x4>

08002c7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c82:	e7fe      	b.n	8002c82 <HardFault_Handler+0x4>

08002c84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c88:	e7fe      	b.n	8002c88 <MemManage_Handler+0x4>

08002c8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c8e:	e7fe      	b.n	8002c8e <BusFault_Handler+0x4>

08002c90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c94:	e7fe      	b.n	8002c94 <UsageFault_Handler+0x4>

08002c96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c96:	b480      	push	{r7}
 8002c98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c9a:	bf00      	nop
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ca8:	bf00      	nop
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr

08002cb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cb6:	bf00      	nop
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cc4:	f000 f966 	bl	8002f94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cc8:	bf00      	nop
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002cd0:	4802      	ldr	r0, [pc, #8]	; (8002cdc <USART3_IRQHandler+0x10>)
 8002cd2:	f008 ff7b 	bl	800bbcc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002cd6:	bf00      	nop
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	2400079c 	.word	0x2400079c

08002ce0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b086      	sub	sp, #24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ce8:	4a14      	ldr	r2, [pc, #80]	; (8002d3c <_sbrk+0x5c>)
 8002cea:	4b15      	ldr	r3, [pc, #84]	; (8002d40 <_sbrk+0x60>)
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cf4:	4b13      	ldr	r3, [pc, #76]	; (8002d44 <_sbrk+0x64>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d102      	bne.n	8002d02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cfc:	4b11      	ldr	r3, [pc, #68]	; (8002d44 <_sbrk+0x64>)
 8002cfe:	4a12      	ldr	r2, [pc, #72]	; (8002d48 <_sbrk+0x68>)
 8002d00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d02:	4b10      	ldr	r3, [pc, #64]	; (8002d44 <_sbrk+0x64>)
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4413      	add	r3, r2
 8002d0a:	693a      	ldr	r2, [r7, #16]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d207      	bcs.n	8002d20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d10:	f00b fe2a 	bl	800e968 <__errno>
 8002d14:	4603      	mov	r3, r0
 8002d16:	220c      	movs	r2, #12
 8002d18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d1e:	e009      	b.n	8002d34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d20:	4b08      	ldr	r3, [pc, #32]	; (8002d44 <_sbrk+0x64>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d26:	4b07      	ldr	r3, [pc, #28]	; (8002d44 <_sbrk+0x64>)
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	4a05      	ldr	r2, [pc, #20]	; (8002d44 <_sbrk+0x64>)
 8002d30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d32:	68fb      	ldr	r3, [r7, #12]
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3718      	adds	r7, #24
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	24080000 	.word	0x24080000
 8002d40:	00000400 	.word	0x00000400
 8002d44:	24000dc4 	.word	0x24000dc4
 8002d48:	24000de0 	.word	0x24000de0

08002d4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002d50:	4b37      	ldr	r3, [pc, #220]	; (8002e30 <SystemInit+0xe4>)
 8002d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d56:	4a36      	ldr	r2, [pc, #216]	; (8002e30 <SystemInit+0xe4>)
 8002d58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002d60:	4b34      	ldr	r3, [pc, #208]	; (8002e34 <SystemInit+0xe8>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 030f 	and.w	r3, r3, #15
 8002d68:	2b06      	cmp	r3, #6
 8002d6a:	d807      	bhi.n	8002d7c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002d6c:	4b31      	ldr	r3, [pc, #196]	; (8002e34 <SystemInit+0xe8>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f023 030f 	bic.w	r3, r3, #15
 8002d74:	4a2f      	ldr	r2, [pc, #188]	; (8002e34 <SystemInit+0xe8>)
 8002d76:	f043 0307 	orr.w	r3, r3, #7
 8002d7a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002d7c:	4b2e      	ldr	r3, [pc, #184]	; (8002e38 <SystemInit+0xec>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a2d      	ldr	r2, [pc, #180]	; (8002e38 <SystemInit+0xec>)
 8002d82:	f043 0301 	orr.w	r3, r3, #1
 8002d86:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002d88:	4b2b      	ldr	r3, [pc, #172]	; (8002e38 <SystemInit+0xec>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002d8e:	4b2a      	ldr	r3, [pc, #168]	; (8002e38 <SystemInit+0xec>)
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	4929      	ldr	r1, [pc, #164]	; (8002e38 <SystemInit+0xec>)
 8002d94:	4b29      	ldr	r3, [pc, #164]	; (8002e3c <SystemInit+0xf0>)
 8002d96:	4013      	ands	r3, r2
 8002d98:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002d9a:	4b26      	ldr	r3, [pc, #152]	; (8002e34 <SystemInit+0xe8>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0308 	and.w	r3, r3, #8
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d007      	beq.n	8002db6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002da6:	4b23      	ldr	r3, [pc, #140]	; (8002e34 <SystemInit+0xe8>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f023 030f 	bic.w	r3, r3, #15
 8002dae:	4a21      	ldr	r2, [pc, #132]	; (8002e34 <SystemInit+0xe8>)
 8002db0:	f043 0307 	orr.w	r3, r3, #7
 8002db4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002db6:	4b20      	ldr	r3, [pc, #128]	; (8002e38 <SystemInit+0xec>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002dbc:	4b1e      	ldr	r3, [pc, #120]	; (8002e38 <SystemInit+0xec>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002dc2:	4b1d      	ldr	r3, [pc, #116]	; (8002e38 <SystemInit+0xec>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002dc8:	4b1b      	ldr	r3, [pc, #108]	; (8002e38 <SystemInit+0xec>)
 8002dca:	4a1d      	ldr	r2, [pc, #116]	; (8002e40 <SystemInit+0xf4>)
 8002dcc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002dce:	4b1a      	ldr	r3, [pc, #104]	; (8002e38 <SystemInit+0xec>)
 8002dd0:	4a1c      	ldr	r2, [pc, #112]	; (8002e44 <SystemInit+0xf8>)
 8002dd2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002dd4:	4b18      	ldr	r3, [pc, #96]	; (8002e38 <SystemInit+0xec>)
 8002dd6:	4a1c      	ldr	r2, [pc, #112]	; (8002e48 <SystemInit+0xfc>)
 8002dd8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002dda:	4b17      	ldr	r3, [pc, #92]	; (8002e38 <SystemInit+0xec>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002de0:	4b15      	ldr	r3, [pc, #84]	; (8002e38 <SystemInit+0xec>)
 8002de2:	4a19      	ldr	r2, [pc, #100]	; (8002e48 <SystemInit+0xfc>)
 8002de4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002de6:	4b14      	ldr	r3, [pc, #80]	; (8002e38 <SystemInit+0xec>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002dec:	4b12      	ldr	r3, [pc, #72]	; (8002e38 <SystemInit+0xec>)
 8002dee:	4a16      	ldr	r2, [pc, #88]	; (8002e48 <SystemInit+0xfc>)
 8002df0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002df2:	4b11      	ldr	r3, [pc, #68]	; (8002e38 <SystemInit+0xec>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002df8:	4b0f      	ldr	r3, [pc, #60]	; (8002e38 <SystemInit+0xec>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a0e      	ldr	r2, [pc, #56]	; (8002e38 <SystemInit+0xec>)
 8002dfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e02:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002e04:	4b0c      	ldr	r3, [pc, #48]	; (8002e38 <SystemInit+0xec>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002e0a:	4b10      	ldr	r3, [pc, #64]	; (8002e4c <SystemInit+0x100>)
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	4b10      	ldr	r3, [pc, #64]	; (8002e50 <SystemInit+0x104>)
 8002e10:	4013      	ands	r3, r2
 8002e12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e16:	d202      	bcs.n	8002e1e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002e18:	4b0e      	ldr	r3, [pc, #56]	; (8002e54 <SystemInit+0x108>)
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002e1e:	4b0e      	ldr	r3, [pc, #56]	; (8002e58 <SystemInit+0x10c>)
 8002e20:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002e24:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002e26:	bf00      	nop
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr
 8002e30:	e000ed00 	.word	0xe000ed00
 8002e34:	52002000 	.word	0x52002000
 8002e38:	58024400 	.word	0x58024400
 8002e3c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002e40:	02020200 	.word	0x02020200
 8002e44:	01ff0000 	.word	0x01ff0000
 8002e48:	01010280 	.word	0x01010280
 8002e4c:	5c001000 	.word	0x5c001000
 8002e50:	ffff0000 	.word	0xffff0000
 8002e54:	51008108 	.word	0x51008108
 8002e58:	52004000 	.word	0x52004000

08002e5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002e5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e94 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002e60:	f7ff ff74 	bl	8002d4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e64:	480c      	ldr	r0, [pc, #48]	; (8002e98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e66:	490d      	ldr	r1, [pc, #52]	; (8002e9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e68:	4a0d      	ldr	r2, [pc, #52]	; (8002ea0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e6c:	e002      	b.n	8002e74 <LoopCopyDataInit>

08002e6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e72:	3304      	adds	r3, #4

08002e74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e78:	d3f9      	bcc.n	8002e6e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e7a:	4a0a      	ldr	r2, [pc, #40]	; (8002ea4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002e7c:	4c0a      	ldr	r4, [pc, #40]	; (8002ea8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002e7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e80:	e001      	b.n	8002e86 <LoopFillZerobss>

08002e82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e84:	3204      	adds	r2, #4

08002e86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e88:	d3fb      	bcc.n	8002e82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e8a:	f00b fd73 	bl	800e974 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e8e:	f7fd fd59 	bl	8000944 <main>
  bx  lr
 8002e92:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002e94:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002e98:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002e9c:	2400009c 	.word	0x2400009c
  ldr r2, =_sidata
 8002ea0:	0800f478 	.word	0x0800f478
  ldr r2, =_sbss
 8002ea4:	2400015c 	.word	0x2400015c
  ldr r4, =_ebss
 8002ea8:	24000ddc 	.word	0x24000ddc

08002eac <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002eac:	e7fe      	b.n	8002eac <ADC3_IRQHandler>
	...

08002eb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002eb6:	2003      	movs	r0, #3
 8002eb8:	f001 fa44 	bl	8004344 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002ebc:	f004 fb82 	bl	80075c4 <HAL_RCC_GetSysClockFreq>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	4b15      	ldr	r3, [pc, #84]	; (8002f18 <HAL_Init+0x68>)
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	0a1b      	lsrs	r3, r3, #8
 8002ec8:	f003 030f 	and.w	r3, r3, #15
 8002ecc:	4913      	ldr	r1, [pc, #76]	; (8002f1c <HAL_Init+0x6c>)
 8002ece:	5ccb      	ldrb	r3, [r1, r3]
 8002ed0:	f003 031f 	and.w	r3, r3, #31
 8002ed4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ed8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002eda:	4b0f      	ldr	r3, [pc, #60]	; (8002f18 <HAL_Init+0x68>)
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	f003 030f 	and.w	r3, r3, #15
 8002ee2:	4a0e      	ldr	r2, [pc, #56]	; (8002f1c <HAL_Init+0x6c>)
 8002ee4:	5cd3      	ldrb	r3, [r2, r3]
 8002ee6:	f003 031f 	and.w	r3, r3, #31
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	fa22 f303 	lsr.w	r3, r2, r3
 8002ef0:	4a0b      	ldr	r2, [pc, #44]	; (8002f20 <HAL_Init+0x70>)
 8002ef2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ef4:	4a0b      	ldr	r2, [pc, #44]	; (8002f24 <HAL_Init+0x74>)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002efa:	2000      	movs	r0, #0
 8002efc:	f000 f814 	bl	8002f28 <HAL_InitTick>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d001      	beq.n	8002f0a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e002      	b.n	8002f10 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002f0a:	f7fe ff35 	bl	8001d78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3708      	adds	r7, #8
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	58024400 	.word	0x58024400
 8002f1c:	0800f3fc 	.word	0x0800f3fc
 8002f20:	2400002c 	.word	0x2400002c
 8002f24:	24000028 	.word	0x24000028

08002f28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002f30:	4b15      	ldr	r3, [pc, #84]	; (8002f88 <HAL_InitTick+0x60>)
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d101      	bne.n	8002f3c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e021      	b.n	8002f80 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002f3c:	4b13      	ldr	r3, [pc, #76]	; (8002f8c <HAL_InitTick+0x64>)
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	4b11      	ldr	r3, [pc, #68]	; (8002f88 <HAL_InitTick+0x60>)
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	4619      	mov	r1, r3
 8002f46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f52:	4618      	mov	r0, r3
 8002f54:	f001 fa29 	bl	80043aa <HAL_SYSTICK_Config>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e00e      	b.n	8002f80 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2b0f      	cmp	r3, #15
 8002f66:	d80a      	bhi.n	8002f7e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f68:	2200      	movs	r2, #0
 8002f6a:	6879      	ldr	r1, [r7, #4]
 8002f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f70:	f001 f9f3 	bl	800435a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f74:	4a06      	ldr	r2, [pc, #24]	; (8002f90 <HAL_InitTick+0x68>)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	e000      	b.n	8002f80 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3708      	adds	r7, #8
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	24000034 	.word	0x24000034
 8002f8c:	24000028 	.word	0x24000028
 8002f90:	24000030 	.word	0x24000030

08002f94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002f98:	4b06      	ldr	r3, [pc, #24]	; (8002fb4 <HAL_IncTick+0x20>)
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	4b06      	ldr	r3, [pc, #24]	; (8002fb8 <HAL_IncTick+0x24>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	4a04      	ldr	r2, [pc, #16]	; (8002fb8 <HAL_IncTick+0x24>)
 8002fa6:	6013      	str	r3, [r2, #0]
}
 8002fa8:	bf00      	nop
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	24000034 	.word	0x24000034
 8002fb8:	24000dc8 	.word	0x24000dc8

08002fbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0
  return uwTick;
 8002fc0:	4b03      	ldr	r3, [pc, #12]	; (8002fd0 <HAL_GetTick+0x14>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	24000dc8 	.word	0x24000dc8

08002fd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fdc:	f7ff ffee 	bl	8002fbc <HAL_GetTick>
 8002fe0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fec:	d005      	beq.n	8002ffa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fee:	4b0a      	ldr	r3, [pc, #40]	; (8003018 <HAL_Delay+0x44>)
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ffa:	bf00      	nop
 8002ffc:	f7ff ffde 	bl	8002fbc <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	68fa      	ldr	r2, [r7, #12]
 8003008:	429a      	cmp	r2, r3
 800300a:	d8f7      	bhi.n	8002ffc <HAL_Delay+0x28>
  {
  }
}
 800300c:	bf00      	nop
 800300e:	bf00      	nop
 8003010:	3710      	adds	r7, #16
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	24000034 	.word	0x24000034

0800301c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003020:	4b03      	ldr	r3, [pc, #12]	; (8003030 <HAL_GetREVID+0x14>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	0c1b      	lsrs	r3, r3, #16
}
 8003026:	4618      	mov	r0, r3
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr
 8003030:	5c001000 	.word	0x5c001000

08003034 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800303c:	4b06      	ldr	r3, [pc, #24]	; (8003058 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003044:	4904      	ldr	r1, [pc, #16]	; (8003058 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4313      	orrs	r3, r2
 800304a:	604b      	str	r3, [r1, #4]
}
 800304c:	bf00      	nop
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr
 8003058:	58000400 	.word	0x58000400

0800305c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003066:	4b07      	ldr	r3, [pc, #28]	; (8003084 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003068:	685a      	ldr	r2, [r3, #4]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	43db      	mvns	r3, r3
 800306e:	401a      	ands	r2, r3
 8003070:	4904      	ldr	r1, [pc, #16]	; (8003084 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	4313      	orrs	r3, r2
 8003076:	604b      	str	r3, [r1, #4]
}
 8003078:	bf00      	nop
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr
 8003084:	58000400 	.word	0x58000400

08003088 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	431a      	orrs	r2, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	609a      	str	r2, [r3, #8]
}
 80030a2:	bf00      	nop
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr

080030ae <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80030ae:	b480      	push	{r7}
 80030b0:	b083      	sub	sp, #12
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
 80030b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	431a      	orrs	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	609a      	str	r2, [r3, #8]
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b087      	sub	sp, #28
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	607a      	str	r2, [r7, #4]
 80030fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	3360      	adds	r3, #96	; 0x60
 8003102:	461a      	mov	r2, r3
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	4413      	add	r3, r2
 800310a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	430b      	orrs	r3, r1
 800311e:	431a      	orrs	r2, r3
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003124:	bf00      	nop
 8003126:	371c      	adds	r7, #28
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003130:	b480      	push	{r7}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	f003 031f 	and.w	r3, r3, #31
 800314a:	6879      	ldr	r1, [r7, #4]
 800314c:	fa01 f303 	lsl.w	r3, r1, r3
 8003150:	431a      	orrs	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	611a      	str	r2, [r3, #16]
}
 8003156:	bf00      	nop
 8003158:	3714      	adds	r7, #20
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr

08003162 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003162:	b480      	push	{r7}
 8003164:	b087      	sub	sp, #28
 8003166:	af00      	add	r7, sp, #0
 8003168:	60f8      	str	r0, [r7, #12]
 800316a:	60b9      	str	r1, [r7, #8]
 800316c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	3360      	adds	r3, #96	; 0x60
 8003172:	461a      	mov	r2, r3
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	4413      	add	r3, r2
 800317a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	431a      	orrs	r2, r3
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	601a      	str	r2, [r3, #0]
  }
}
 800318c:	bf00      	nop
 800318e:	371c      	adds	r7, #28
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003198:	b480      	push	{r7}
 800319a:	b087      	sub	sp, #28
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	3330      	adds	r3, #48	; 0x30
 80031a8:	461a      	mov	r2, r3
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	0a1b      	lsrs	r3, r3, #8
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	f003 030c 	and.w	r3, r3, #12
 80031b4:	4413      	add	r3, r2
 80031b6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	f003 031f 	and.w	r3, r3, #31
 80031c2:	211f      	movs	r1, #31
 80031c4:	fa01 f303 	lsl.w	r3, r1, r3
 80031c8:	43db      	mvns	r3, r3
 80031ca:	401a      	ands	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	0e9b      	lsrs	r3, r3, #26
 80031d0:	f003 011f 	and.w	r1, r3, #31
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	f003 031f 	and.w	r3, r3, #31
 80031da:	fa01 f303 	lsl.w	r3, r1, r3
 80031de:	431a      	orrs	r2, r3
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80031e4:	bf00      	nop
 80031e6:	371c      	adds	r7, #28
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b087      	sub	sp, #28
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	3314      	adds	r3, #20
 8003200:	461a      	mov	r2, r3
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	0e5b      	lsrs	r3, r3, #25
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	f003 0304 	and.w	r3, r3, #4
 800320c:	4413      	add	r3, r2
 800320e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	0d1b      	lsrs	r3, r3, #20
 8003218:	f003 031f 	and.w	r3, r3, #31
 800321c:	2107      	movs	r1, #7
 800321e:	fa01 f303 	lsl.w	r3, r1, r3
 8003222:	43db      	mvns	r3, r3
 8003224:	401a      	ands	r2, r3
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	0d1b      	lsrs	r3, r3, #20
 800322a:	f003 031f 	and.w	r3, r3, #31
 800322e:	6879      	ldr	r1, [r7, #4]
 8003230:	fa01 f303 	lsl.w	r3, r1, r3
 8003234:	431a      	orrs	r2, r3
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800323a:	bf00      	nop
 800323c:	371c      	adds	r7, #28
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
	...

08003248 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003260:	43db      	mvns	r3, r3
 8003262:	401a      	ands	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f003 0318 	and.w	r3, r3, #24
 800326a:	4908      	ldr	r1, [pc, #32]	; (800328c <LL_ADC_SetChannelSingleDiff+0x44>)
 800326c:	40d9      	lsrs	r1, r3
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	400b      	ands	r3, r1
 8003272:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003276:	431a      	orrs	r2, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800327e:	bf00      	nop
 8003280:	3714      	adds	r7, #20
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	000fffff 	.word	0x000fffff

08003290 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	689a      	ldr	r2, [r3, #8]
 800329c:	4b04      	ldr	r3, [pc, #16]	; (80032b0 <LL_ADC_DisableDeepPowerDown+0x20>)
 800329e:	4013      	ands	r3, r2
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	6093      	str	r3, [r2, #8]
}
 80032a4:	bf00      	nop
 80032a6:	370c      	adds	r7, #12
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr
 80032b0:	5fffffc0 	.word	0x5fffffc0

080032b4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032c8:	d101      	bne.n	80032ce <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80032ca:	2301      	movs	r3, #1
 80032cc:	e000      	b.n	80032d0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	689a      	ldr	r2, [r3, #8]
 80032e8:	4b05      	ldr	r3, [pc, #20]	; (8003300 <LL_ADC_EnableInternalRegulator+0x24>)
 80032ea:	4013      	ands	r3, r2
 80032ec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80032f4:	bf00      	nop
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr
 8003300:	6fffffc0 	.word	0x6fffffc0

08003304 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003314:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003318:	d101      	bne.n	800331e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800331a:	2301      	movs	r3, #1
 800331c:	e000      	b.n	8003320 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f003 0301 	and.w	r3, r3, #1
 800333c:	2b01      	cmp	r3, #1
 800333e:	d101      	bne.n	8003344 <LL_ADC_IsEnabled+0x18>
 8003340:	2301      	movs	r3, #1
 8003342:	e000      	b.n	8003346 <LL_ADC_IsEnabled+0x1a>
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr

08003352 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003352:	b480      	push	{r7}
 8003354:	b083      	sub	sp, #12
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f003 0304 	and.w	r3, r3, #4
 8003362:	2b04      	cmp	r3, #4
 8003364:	d101      	bne.n	800336a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003366:	2301      	movs	r3, #1
 8003368:	e000      	b.n	800336c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f003 0308 	and.w	r3, r3, #8
 8003388:	2b08      	cmp	r3, #8
 800338a:	d101      	bne.n	8003390 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800338c:	2301      	movs	r3, #1
 800338e:	e000      	b.n	8003392 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	370c      	adds	r7, #12
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
	...

080033a0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80033a0:	b590      	push	{r4, r7, lr}
 80033a2:	b089      	sub	sp, #36	; 0x24
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033a8:	2300      	movs	r3, #0
 80033aa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80033ac:	2300      	movs	r3, #0
 80033ae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d101      	bne.n	80033ba <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e18f      	b.n	80036da <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d109      	bne.n	80033dc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f7fe fcef 	bl	8001dac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7ff ff67 	bl	80032b4 <LL_ADC_IsDeepPowerDownEnabled>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d004      	beq.n	80033f6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7ff ff4d 	bl	8003290 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7ff ff82 	bl	8003304 <LL_ADC_IsInternalRegulatorEnabled>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d114      	bne.n	8003430 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4618      	mov	r0, r3
 800340c:	f7ff ff66 	bl	80032dc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003410:	4b87      	ldr	r3, [pc, #540]	; (8003630 <HAL_ADC_Init+0x290>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	099b      	lsrs	r3, r3, #6
 8003416:	4a87      	ldr	r2, [pc, #540]	; (8003634 <HAL_ADC_Init+0x294>)
 8003418:	fba2 2303 	umull	r2, r3, r2, r3
 800341c:	099b      	lsrs	r3, r3, #6
 800341e:	3301      	adds	r3, #1
 8003420:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003422:	e002      	b.n	800342a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	3b01      	subs	r3, #1
 8003428:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1f9      	bne.n	8003424 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4618      	mov	r0, r3
 8003436:	f7ff ff65 	bl	8003304 <LL_ADC_IsInternalRegulatorEnabled>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d10d      	bne.n	800345c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003444:	f043 0210 	orr.w	r2, r3, #16
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003450:	f043 0201 	orr.w	r2, r3, #1
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4618      	mov	r0, r3
 8003462:	f7ff ff76 	bl	8003352 <LL_ADC_REG_IsConversionOngoing>
 8003466:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800346c:	f003 0310 	and.w	r3, r3, #16
 8003470:	2b00      	cmp	r3, #0
 8003472:	f040 8129 	bne.w	80036c8 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	2b00      	cmp	r3, #0
 800347a:	f040 8125 	bne.w	80036c8 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003482:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003486:	f043 0202 	orr.w	r2, r3, #2
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4618      	mov	r0, r3
 8003494:	f7ff ff4a 	bl	800332c <LL_ADC_IsEnabled>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d136      	bne.n	800350c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a65      	ldr	r2, [pc, #404]	; (8003638 <HAL_ADC_Init+0x298>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d004      	beq.n	80034b2 <HAL_ADC_Init+0x112>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a63      	ldr	r2, [pc, #396]	; (800363c <HAL_ADC_Init+0x29c>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d10e      	bne.n	80034d0 <HAL_ADC_Init+0x130>
 80034b2:	4861      	ldr	r0, [pc, #388]	; (8003638 <HAL_ADC_Init+0x298>)
 80034b4:	f7ff ff3a 	bl	800332c <LL_ADC_IsEnabled>
 80034b8:	4604      	mov	r4, r0
 80034ba:	4860      	ldr	r0, [pc, #384]	; (800363c <HAL_ADC_Init+0x29c>)
 80034bc:	f7ff ff36 	bl	800332c <LL_ADC_IsEnabled>
 80034c0:	4603      	mov	r3, r0
 80034c2:	4323      	orrs	r3, r4
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	bf0c      	ite	eq
 80034c8:	2301      	moveq	r3, #1
 80034ca:	2300      	movne	r3, #0
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	e008      	b.n	80034e2 <HAL_ADC_Init+0x142>
 80034d0:	485b      	ldr	r0, [pc, #364]	; (8003640 <HAL_ADC_Init+0x2a0>)
 80034d2:	f7ff ff2b 	bl	800332c <LL_ADC_IsEnabled>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	bf0c      	ite	eq
 80034dc:	2301      	moveq	r3, #1
 80034de:	2300      	movne	r3, #0
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d012      	beq.n	800350c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a53      	ldr	r2, [pc, #332]	; (8003638 <HAL_ADC_Init+0x298>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d004      	beq.n	80034fa <HAL_ADC_Init+0x15a>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a51      	ldr	r2, [pc, #324]	; (800363c <HAL_ADC_Init+0x29c>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d101      	bne.n	80034fe <HAL_ADC_Init+0x15e>
 80034fa:	4a52      	ldr	r2, [pc, #328]	; (8003644 <HAL_ADC_Init+0x2a4>)
 80034fc:	e000      	b.n	8003500 <HAL_ADC_Init+0x160>
 80034fe:	4a52      	ldr	r2, [pc, #328]	; (8003648 <HAL_ADC_Init+0x2a8>)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	4619      	mov	r1, r3
 8003506:	4610      	mov	r0, r2
 8003508:	f7ff fdbe 	bl	8003088 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800350c:	f7ff fd86 	bl	800301c <HAL_GetREVID>
 8003510:	4603      	mov	r3, r0
 8003512:	f241 0203 	movw	r2, #4099	; 0x1003
 8003516:	4293      	cmp	r3, r2
 8003518:	d914      	bls.n	8003544 <HAL_ADC_Init+0x1a4>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	2b10      	cmp	r3, #16
 8003520:	d110      	bne.n	8003544 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	7d5b      	ldrb	r3, [r3, #21]
 8003526:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800352c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003532:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	7f1b      	ldrb	r3, [r3, #28]
 8003538:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800353a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800353c:	f043 030c 	orr.w	r3, r3, #12
 8003540:	61bb      	str	r3, [r7, #24]
 8003542:	e00d      	b.n	8003560 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	7d5b      	ldrb	r3, [r3, #21]
 8003548:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800354e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003554:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	7f1b      	ldrb	r3, [r3, #28]
 800355a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800355c:	4313      	orrs	r3, r2
 800355e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	7f1b      	ldrb	r3, [r3, #28]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d106      	bne.n	8003576 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a1b      	ldr	r3, [r3, #32]
 800356c:	3b01      	subs	r3, #1
 800356e:	045b      	lsls	r3, r3, #17
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	4313      	orrs	r3, r2
 8003574:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357a:	2b00      	cmp	r3, #0
 800357c:	d009      	beq.n	8003592 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003582:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800358c:	69ba      	ldr	r2, [r7, #24]
 800358e:	4313      	orrs	r3, r2
 8003590:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	68da      	ldr	r2, [r3, #12]
 8003598:	4b2c      	ldr	r3, [pc, #176]	; (800364c <HAL_ADC_Init+0x2ac>)
 800359a:	4013      	ands	r3, r2
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	6812      	ldr	r2, [r2, #0]
 80035a0:	69b9      	ldr	r1, [r7, #24]
 80035a2:	430b      	orrs	r3, r1
 80035a4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7ff fed1 	bl	8003352 <LL_ADC_REG_IsConversionOngoing>
 80035b0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7ff fede 	bl	8003378 <LL_ADC_INJ_IsConversionOngoing>
 80035bc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d15f      	bne.n	8003684 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d15c      	bne.n	8003684 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	7d1b      	ldrb	r3, [r3, #20]
 80035ce:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80035d4:	4313      	orrs	r3, r2
 80035d6:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	68da      	ldr	r2, [r3, #12]
 80035de:	4b1c      	ldr	r3, [pc, #112]	; (8003650 <HAL_ADC_Init+0x2b0>)
 80035e0:	4013      	ands	r3, r2
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	6812      	ldr	r2, [r2, #0]
 80035e6:	69b9      	ldr	r1, [r7, #24]
 80035e8:	430b      	orrs	r3, r1
 80035ea:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d130      	bne.n	8003658 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fa:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	691a      	ldr	r2, [r3, #16]
 8003602:	4b14      	ldr	r3, [pc, #80]	; (8003654 <HAL_ADC_Init+0x2b4>)
 8003604:	4013      	ands	r3, r2
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800360a:	3a01      	subs	r2, #1
 800360c:	0411      	lsls	r1, r2, #16
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003612:	4311      	orrs	r1, r2
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003618:	4311      	orrs	r1, r2
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800361e:	430a      	orrs	r2, r1
 8003620:	431a      	orrs	r2, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f042 0201 	orr.w	r2, r2, #1
 800362a:	611a      	str	r2, [r3, #16]
 800362c:	e01c      	b.n	8003668 <HAL_ADC_Init+0x2c8>
 800362e:	bf00      	nop
 8003630:	24000028 	.word	0x24000028
 8003634:	053e2d63 	.word	0x053e2d63
 8003638:	40022000 	.word	0x40022000
 800363c:	40022100 	.word	0x40022100
 8003640:	58026000 	.word	0x58026000
 8003644:	40022300 	.word	0x40022300
 8003648:	58026300 	.word	0x58026300
 800364c:	fff0c003 	.word	0xfff0c003
 8003650:	ffffbffc 	.word	0xffffbffc
 8003654:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	691a      	ldr	r2, [r3, #16]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f022 0201 	bic.w	r2, r2, #1
 8003666:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	430a      	orrs	r2, r1
 800367c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 fb80 	bl	8003d84 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	2b01      	cmp	r3, #1
 800368a:	d10c      	bne.n	80036a6 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003692:	f023 010f 	bic.w	r1, r3, #15
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	699b      	ldr	r3, [r3, #24]
 800369a:	1e5a      	subs	r2, r3, #1
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	430a      	orrs	r2, r1
 80036a2:	631a      	str	r2, [r3, #48]	; 0x30
 80036a4:	e007      	b.n	80036b6 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f022 020f 	bic.w	r2, r2, #15
 80036b4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ba:	f023 0303 	bic.w	r3, r3, #3
 80036be:	f043 0201 	orr.w	r2, r3, #1
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	655a      	str	r2, [r3, #84]	; 0x54
 80036c6:	e007      	b.n	80036d8 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036cc:	f043 0210 	orr.w	r2, r3, #16
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80036d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3724      	adds	r7, #36	; 0x24
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd90      	pop	{r4, r7, pc}
 80036e2:	bf00      	nop

080036e4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80036e4:	b590      	push	{r4, r7, lr}
 80036e6:	b0a1      	sub	sp, #132	; 0x84
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036ee:	2300      	movs	r3, #0
 80036f0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80036f4:	2300      	movs	r3, #0
 80036f6:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	4a9d      	ldr	r2, [pc, #628]	; (8003974 <HAL_ADC_ConfigChannel+0x290>)
 80036fe:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003706:	2b01      	cmp	r3, #1
 8003708:	d101      	bne.n	800370e <HAL_ADC_ConfigChannel+0x2a>
 800370a:	2302      	movs	r3, #2
 800370c:	e321      	b.n	8003d52 <HAL_ADC_ConfigChannel+0x66e>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2201      	movs	r2, #1
 8003712:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4618      	mov	r0, r3
 800371c:	f7ff fe19 	bl	8003352 <LL_ADC_REG_IsConversionOngoing>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	f040 8306 	bne.w	8003d34 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003730:	2b00      	cmp	r3, #0
 8003732:	d108      	bne.n	8003746 <HAL_ADC_ConfigChannel+0x62>
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	0e9b      	lsrs	r3, r3, #26
 800373a:	f003 031f 	and.w	r3, r3, #31
 800373e:	2201      	movs	r2, #1
 8003740:	fa02 f303 	lsl.w	r3, r2, r3
 8003744:	e016      	b.n	8003774 <HAL_ADC_ConfigChannel+0x90>
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800374c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800374e:	fa93 f3a3 	rbit	r3, r3
 8003752:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003754:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003756:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003758:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800375a:	2b00      	cmp	r3, #0
 800375c:	d101      	bne.n	8003762 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800375e:	2320      	movs	r3, #32
 8003760:	e003      	b.n	800376a <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8003762:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003764:	fab3 f383 	clz	r3, r3
 8003768:	b2db      	uxtb	r3, r3
 800376a:	f003 031f 	and.w	r3, r3, #31
 800376e:	2201      	movs	r2, #1
 8003770:	fa02 f303 	lsl.w	r3, r2, r3
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	6812      	ldr	r2, [r2, #0]
 8003778:	69d1      	ldr	r1, [r2, #28]
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	6812      	ldr	r2, [r2, #0]
 800377e:	430b      	orrs	r3, r1
 8003780:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6818      	ldr	r0, [r3, #0]
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	6859      	ldr	r1, [r3, #4]
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	461a      	mov	r2, r3
 8003790:	f7ff fd02 	bl	8003198 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4618      	mov	r0, r3
 800379a:	f7ff fdda 	bl	8003352 <LL_ADC_REG_IsConversionOngoing>
 800379e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4618      	mov	r0, r3
 80037a6:	f7ff fde7 	bl	8003378 <LL_ADC_INJ_IsConversionOngoing>
 80037aa:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80037ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	f040 80b3 	bne.w	800391a <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80037b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	f040 80af 	bne.w	800391a <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6818      	ldr	r0, [r3, #0]
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	6819      	ldr	r1, [r3, #0]
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	461a      	mov	r2, r3
 80037ca:	f7ff fd11 	bl	80031f0 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80037ce:	4b6a      	ldr	r3, [pc, #424]	; (8003978 <HAL_ADC_ConfigChannel+0x294>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80037d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037da:	d10b      	bne.n	80037f4 <HAL_ADC_ConfigChannel+0x110>
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	695a      	ldr	r2, [r3, #20]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	089b      	lsrs	r3, r3, #2
 80037e8:	f003 0307 	and.w	r3, r3, #7
 80037ec:	005b      	lsls	r3, r3, #1
 80037ee:	fa02 f303 	lsl.w	r3, r2, r3
 80037f2:	e01d      	b.n	8003830 <HAL_ADC_ConfigChannel+0x14c>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	f003 0310 	and.w	r3, r3, #16
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d10b      	bne.n	800381a <HAL_ADC_ConfigChannel+0x136>
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	695a      	ldr	r2, [r3, #20]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	089b      	lsrs	r3, r3, #2
 800380e:	f003 0307 	and.w	r3, r3, #7
 8003812:	005b      	lsls	r3, r3, #1
 8003814:	fa02 f303 	lsl.w	r3, r2, r3
 8003818:	e00a      	b.n	8003830 <HAL_ADC_ConfigChannel+0x14c>
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	695a      	ldr	r2, [r3, #20]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	089b      	lsrs	r3, r3, #2
 8003826:	f003 0304 	and.w	r3, r3, #4
 800382a:	005b      	lsls	r3, r3, #1
 800382c:	fa02 f303 	lsl.w	r3, r2, r3
 8003830:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	2b04      	cmp	r3, #4
 8003838:	d027      	beq.n	800388a <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6818      	ldr	r0, [r3, #0]
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	6919      	ldr	r1, [r3, #16]
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003848:	f7ff fc52 	bl	80030f0 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6818      	ldr	r0, [r3, #0]
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	6919      	ldr	r1, [r3, #16]
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	7e5b      	ldrb	r3, [r3, #25]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d102      	bne.n	8003862 <HAL_ADC_ConfigChannel+0x17e>
 800385c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003860:	e000      	b.n	8003864 <HAL_ADC_ConfigChannel+0x180>
 8003862:	2300      	movs	r3, #0
 8003864:	461a      	mov	r2, r3
 8003866:	f7ff fc7c 	bl	8003162 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6818      	ldr	r0, [r3, #0]
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	6919      	ldr	r1, [r3, #16]
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	7e1b      	ldrb	r3, [r3, #24]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d102      	bne.n	8003880 <HAL_ADC_ConfigChannel+0x19c>
 800387a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800387e:	e000      	b.n	8003882 <HAL_ADC_ConfigChannel+0x19e>
 8003880:	2300      	movs	r3, #0
 8003882:	461a      	mov	r2, r3
 8003884:	f7ff fc54 	bl	8003130 <LL_ADC_SetDataRightShift>
 8003888:	e047      	b.n	800391a <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003890:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	069b      	lsls	r3, r3, #26
 800389a:	429a      	cmp	r2, r3
 800389c:	d107      	bne.n	80038ae <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80038ac:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	069b      	lsls	r3, r3, #26
 80038be:	429a      	cmp	r2, r3
 80038c0:	d107      	bne.n	80038d2 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80038d0:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	069b      	lsls	r3, r3, #26
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d107      	bne.n	80038f6 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80038f4:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038fc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	069b      	lsls	r3, r3, #26
 8003906:	429a      	cmp	r2, r3
 8003908:	d107      	bne.n	800391a <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003918:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4618      	mov	r0, r3
 8003920:	f7ff fd04 	bl	800332c <LL_ADC_IsEnabled>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	f040 820d 	bne.w	8003d46 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6818      	ldr	r0, [r3, #0]
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	6819      	ldr	r1, [r3, #0]
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	461a      	mov	r2, r3
 800393a:	f7ff fc85 	bl	8003248 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	4a0c      	ldr	r2, [pc, #48]	; (8003974 <HAL_ADC_ConfigChannel+0x290>)
 8003944:	4293      	cmp	r3, r2
 8003946:	f040 8133 	bne.w	8003bb0 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003956:	2b00      	cmp	r3, #0
 8003958:	d110      	bne.n	800397c <HAL_ADC_ConfigChannel+0x298>
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	0e9b      	lsrs	r3, r3, #26
 8003960:	3301      	adds	r3, #1
 8003962:	f003 031f 	and.w	r3, r3, #31
 8003966:	2b09      	cmp	r3, #9
 8003968:	bf94      	ite	ls
 800396a:	2301      	movls	r3, #1
 800396c:	2300      	movhi	r3, #0
 800396e:	b2db      	uxtb	r3, r3
 8003970:	e01e      	b.n	80039b0 <HAL_ADC_ConfigChannel+0x2cc>
 8003972:	bf00      	nop
 8003974:	47ff0000 	.word	0x47ff0000
 8003978:	5c001000 	.word	0x5c001000
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003982:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003984:	fa93 f3a3 	rbit	r3, r3
 8003988:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800398a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800398c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800398e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003990:	2b00      	cmp	r3, #0
 8003992:	d101      	bne.n	8003998 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8003994:	2320      	movs	r3, #32
 8003996:	e003      	b.n	80039a0 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003998:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800399a:	fab3 f383 	clz	r3, r3
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	3301      	adds	r3, #1
 80039a2:	f003 031f 	and.w	r3, r3, #31
 80039a6:	2b09      	cmp	r3, #9
 80039a8:	bf94      	ite	ls
 80039aa:	2301      	movls	r3, #1
 80039ac:	2300      	movhi	r3, #0
 80039ae:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d079      	beq.n	8003aa8 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d107      	bne.n	80039d0 <HAL_ADC_ConfigChannel+0x2ec>
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	0e9b      	lsrs	r3, r3, #26
 80039c6:	3301      	adds	r3, #1
 80039c8:	069b      	lsls	r3, r3, #26
 80039ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80039ce:	e015      	b.n	80039fc <HAL_ADC_ConfigChannel+0x318>
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039d8:	fa93 f3a3 	rbit	r3, r3
 80039dc:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80039de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039e0:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80039e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d101      	bne.n	80039ec <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80039e8:	2320      	movs	r3, #32
 80039ea:	e003      	b.n	80039f4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80039ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039ee:	fab3 f383 	clz	r3, r3
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	3301      	adds	r3, #1
 80039f6:	069b      	lsls	r3, r3, #26
 80039f8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d109      	bne.n	8003a1c <HAL_ADC_ConfigChannel+0x338>
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	0e9b      	lsrs	r3, r3, #26
 8003a0e:	3301      	adds	r3, #1
 8003a10:	f003 031f 	and.w	r3, r3, #31
 8003a14:	2101      	movs	r1, #1
 8003a16:	fa01 f303 	lsl.w	r3, r1, r3
 8003a1a:	e017      	b.n	8003a4c <HAL_ADC_ConfigChannel+0x368>
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a24:	fa93 f3a3 	rbit	r3, r3
 8003a28:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003a2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a2c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003a2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d101      	bne.n	8003a38 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8003a34:	2320      	movs	r3, #32
 8003a36:	e003      	b.n	8003a40 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8003a38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a3a:	fab3 f383 	clz	r3, r3
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	3301      	adds	r3, #1
 8003a42:	f003 031f 	and.w	r3, r3, #31
 8003a46:	2101      	movs	r1, #1
 8003a48:	fa01 f303 	lsl.w	r3, r1, r3
 8003a4c:	ea42 0103 	orr.w	r1, r2, r3
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d10a      	bne.n	8003a72 <HAL_ADC_ConfigChannel+0x38e>
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	0e9b      	lsrs	r3, r3, #26
 8003a62:	3301      	adds	r3, #1
 8003a64:	f003 021f 	and.w	r2, r3, #31
 8003a68:	4613      	mov	r3, r2
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	4413      	add	r3, r2
 8003a6e:	051b      	lsls	r3, r3, #20
 8003a70:	e018      	b.n	8003aa4 <HAL_ADC_ConfigChannel+0x3c0>
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a7a:	fa93 f3a3 	rbit	r3, r3
 8003a7e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a82:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d101      	bne.n	8003a8e <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8003a8a:	2320      	movs	r3, #32
 8003a8c:	e003      	b.n	8003a96 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8003a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a90:	fab3 f383 	clz	r3, r3
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	3301      	adds	r3, #1
 8003a98:	f003 021f 	and.w	r2, r3, #31
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	005b      	lsls	r3, r3, #1
 8003aa0:	4413      	add	r3, r2
 8003aa2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003aa4:	430b      	orrs	r3, r1
 8003aa6:	e07e      	b.n	8003ba6 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d107      	bne.n	8003ac4 <HAL_ADC_ConfigChannel+0x3e0>
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	0e9b      	lsrs	r3, r3, #26
 8003aba:	3301      	adds	r3, #1
 8003abc:	069b      	lsls	r3, r3, #26
 8003abe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ac2:	e015      	b.n	8003af0 <HAL_ADC_ConfigChannel+0x40c>
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003acc:	fa93 f3a3 	rbit	r3, r3
 8003ad0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d101      	bne.n	8003ae0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003adc:	2320      	movs	r3, #32
 8003ade:	e003      	b.n	8003ae8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ae2:	fab3 f383 	clz	r3, r3
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	3301      	adds	r3, #1
 8003aea:	069b      	lsls	r3, r3, #26
 8003aec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d109      	bne.n	8003b10 <HAL_ADC_ConfigChannel+0x42c>
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	0e9b      	lsrs	r3, r3, #26
 8003b02:	3301      	adds	r3, #1
 8003b04:	f003 031f 	and.w	r3, r3, #31
 8003b08:	2101      	movs	r1, #1
 8003b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b0e:	e017      	b.n	8003b40 <HAL_ADC_ConfigChannel+0x45c>
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	fa93 f3a3 	rbit	r3, r3
 8003b1c:	61bb      	str	r3, [r7, #24]
  return result;
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003b22:	6a3b      	ldr	r3, [r7, #32]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d101      	bne.n	8003b2c <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8003b28:	2320      	movs	r3, #32
 8003b2a:	e003      	b.n	8003b34 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8003b2c:	6a3b      	ldr	r3, [r7, #32]
 8003b2e:	fab3 f383 	clz	r3, r3
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	3301      	adds	r3, #1
 8003b36:	f003 031f 	and.w	r3, r3, #31
 8003b3a:	2101      	movs	r1, #1
 8003b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b40:	ea42 0103 	orr.w	r1, r2, r3
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d10d      	bne.n	8003b6c <HAL_ADC_ConfigChannel+0x488>
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	0e9b      	lsrs	r3, r3, #26
 8003b56:	3301      	adds	r3, #1
 8003b58:	f003 021f 	and.w	r2, r3, #31
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	005b      	lsls	r3, r3, #1
 8003b60:	4413      	add	r3, r2
 8003b62:	3b1e      	subs	r3, #30
 8003b64:	051b      	lsls	r3, r3, #20
 8003b66:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003b6a:	e01b      	b.n	8003ba4 <HAL_ADC_ConfigChannel+0x4c0>
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	fa93 f3a3 	rbit	r3, r3
 8003b78:	60fb      	str	r3, [r7, #12]
  return result;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d101      	bne.n	8003b88 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8003b84:	2320      	movs	r3, #32
 8003b86:	e003      	b.n	8003b90 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	fab3 f383 	clz	r3, r3
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	3301      	adds	r3, #1
 8003b92:	f003 021f 	and.w	r2, r3, #31
 8003b96:	4613      	mov	r3, r2
 8003b98:	005b      	lsls	r3, r3, #1
 8003b9a:	4413      	add	r3, r2
 8003b9c:	3b1e      	subs	r3, #30
 8003b9e:	051b      	lsls	r3, r3, #20
 8003ba0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ba4:	430b      	orrs	r3, r1
 8003ba6:	683a      	ldr	r2, [r7, #0]
 8003ba8:	6892      	ldr	r2, [r2, #8]
 8003baa:	4619      	mov	r1, r3
 8003bac:	f7ff fb20 	bl	80031f0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	f280 80c6 	bge.w	8003d46 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a67      	ldr	r2, [pc, #412]	; (8003d5c <HAL_ADC_ConfigChannel+0x678>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d004      	beq.n	8003bce <HAL_ADC_ConfigChannel+0x4ea>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a65      	ldr	r2, [pc, #404]	; (8003d60 <HAL_ADC_ConfigChannel+0x67c>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d101      	bne.n	8003bd2 <HAL_ADC_ConfigChannel+0x4ee>
 8003bce:	4b65      	ldr	r3, [pc, #404]	; (8003d64 <HAL_ADC_ConfigChannel+0x680>)
 8003bd0:	e000      	b.n	8003bd4 <HAL_ADC_ConfigChannel+0x4f0>
 8003bd2:	4b65      	ldr	r3, [pc, #404]	; (8003d68 <HAL_ADC_ConfigChannel+0x684>)
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f7ff fa7d 	bl	80030d4 <LL_ADC_GetCommonPathInternalCh>
 8003bda:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a5e      	ldr	r2, [pc, #376]	; (8003d5c <HAL_ADC_ConfigChannel+0x678>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d004      	beq.n	8003bf0 <HAL_ADC_ConfigChannel+0x50c>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a5d      	ldr	r2, [pc, #372]	; (8003d60 <HAL_ADC_ConfigChannel+0x67c>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d10e      	bne.n	8003c0e <HAL_ADC_ConfigChannel+0x52a>
 8003bf0:	485a      	ldr	r0, [pc, #360]	; (8003d5c <HAL_ADC_ConfigChannel+0x678>)
 8003bf2:	f7ff fb9b 	bl	800332c <LL_ADC_IsEnabled>
 8003bf6:	4604      	mov	r4, r0
 8003bf8:	4859      	ldr	r0, [pc, #356]	; (8003d60 <HAL_ADC_ConfigChannel+0x67c>)
 8003bfa:	f7ff fb97 	bl	800332c <LL_ADC_IsEnabled>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	4323      	orrs	r3, r4
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	bf0c      	ite	eq
 8003c06:	2301      	moveq	r3, #1
 8003c08:	2300      	movne	r3, #0
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	e008      	b.n	8003c20 <HAL_ADC_ConfigChannel+0x53c>
 8003c0e:	4857      	ldr	r0, [pc, #348]	; (8003d6c <HAL_ADC_ConfigChannel+0x688>)
 8003c10:	f7ff fb8c 	bl	800332c <LL_ADC_IsEnabled>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	bf0c      	ite	eq
 8003c1a:	2301      	moveq	r3, #1
 8003c1c:	2300      	movne	r3, #0
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d07d      	beq.n	8003d20 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a51      	ldr	r2, [pc, #324]	; (8003d70 <HAL_ADC_ConfigChannel+0x68c>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d130      	bne.n	8003c90 <HAL_ADC_ConfigChannel+0x5ac>
 8003c2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d12b      	bne.n	8003c90 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a4b      	ldr	r2, [pc, #300]	; (8003d6c <HAL_ADC_ConfigChannel+0x688>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	f040 8081 	bne.w	8003d46 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a44      	ldr	r2, [pc, #272]	; (8003d5c <HAL_ADC_ConfigChannel+0x678>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d004      	beq.n	8003c58 <HAL_ADC_ConfigChannel+0x574>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a43      	ldr	r2, [pc, #268]	; (8003d60 <HAL_ADC_ConfigChannel+0x67c>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d101      	bne.n	8003c5c <HAL_ADC_ConfigChannel+0x578>
 8003c58:	4a42      	ldr	r2, [pc, #264]	; (8003d64 <HAL_ADC_ConfigChannel+0x680>)
 8003c5a:	e000      	b.n	8003c5e <HAL_ADC_ConfigChannel+0x57a>
 8003c5c:	4a42      	ldr	r2, [pc, #264]	; (8003d68 <HAL_ADC_ConfigChannel+0x684>)
 8003c5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c60:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003c64:	4619      	mov	r1, r3
 8003c66:	4610      	mov	r0, r2
 8003c68:	f7ff fa21 	bl	80030ae <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c6c:	4b41      	ldr	r3, [pc, #260]	; (8003d74 <HAL_ADC_ConfigChannel+0x690>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	099b      	lsrs	r3, r3, #6
 8003c72:	4a41      	ldr	r2, [pc, #260]	; (8003d78 <HAL_ADC_ConfigChannel+0x694>)
 8003c74:	fba2 2303 	umull	r2, r3, r2, r3
 8003c78:	099b      	lsrs	r3, r3, #6
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	005b      	lsls	r3, r3, #1
 8003c7e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003c80:	e002      	b.n	8003c88 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	3b01      	subs	r3, #1
 8003c86:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1f9      	bne.n	8003c82 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c8e:	e05a      	b.n	8003d46 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a39      	ldr	r2, [pc, #228]	; (8003d7c <HAL_ADC_ConfigChannel+0x698>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d11e      	bne.n	8003cd8 <HAL_ADC_ConfigChannel+0x5f4>
 8003c9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d119      	bne.n	8003cd8 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a30      	ldr	r2, [pc, #192]	; (8003d6c <HAL_ADC_ConfigChannel+0x688>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d14b      	bne.n	8003d46 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a2a      	ldr	r2, [pc, #168]	; (8003d5c <HAL_ADC_ConfigChannel+0x678>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d004      	beq.n	8003cc2 <HAL_ADC_ConfigChannel+0x5de>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a28      	ldr	r2, [pc, #160]	; (8003d60 <HAL_ADC_ConfigChannel+0x67c>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d101      	bne.n	8003cc6 <HAL_ADC_ConfigChannel+0x5e2>
 8003cc2:	4a28      	ldr	r2, [pc, #160]	; (8003d64 <HAL_ADC_ConfigChannel+0x680>)
 8003cc4:	e000      	b.n	8003cc8 <HAL_ADC_ConfigChannel+0x5e4>
 8003cc6:	4a28      	ldr	r2, [pc, #160]	; (8003d68 <HAL_ADC_ConfigChannel+0x684>)
 8003cc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cce:	4619      	mov	r1, r3
 8003cd0:	4610      	mov	r0, r2
 8003cd2:	f7ff f9ec 	bl	80030ae <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003cd6:	e036      	b.n	8003d46 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a28      	ldr	r2, [pc, #160]	; (8003d80 <HAL_ADC_ConfigChannel+0x69c>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d131      	bne.n	8003d46 <HAL_ADC_ConfigChannel+0x662>
 8003ce2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ce4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d12c      	bne.n	8003d46 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a1e      	ldr	r2, [pc, #120]	; (8003d6c <HAL_ADC_ConfigChannel+0x688>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d127      	bne.n	8003d46 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a18      	ldr	r2, [pc, #96]	; (8003d5c <HAL_ADC_ConfigChannel+0x678>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d004      	beq.n	8003d0a <HAL_ADC_ConfigChannel+0x626>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a16      	ldr	r2, [pc, #88]	; (8003d60 <HAL_ADC_ConfigChannel+0x67c>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d101      	bne.n	8003d0e <HAL_ADC_ConfigChannel+0x62a>
 8003d0a:	4a16      	ldr	r2, [pc, #88]	; (8003d64 <HAL_ADC_ConfigChannel+0x680>)
 8003d0c:	e000      	b.n	8003d10 <HAL_ADC_ConfigChannel+0x62c>
 8003d0e:	4a16      	ldr	r2, [pc, #88]	; (8003d68 <HAL_ADC_ConfigChannel+0x684>)
 8003d10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d12:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003d16:	4619      	mov	r1, r3
 8003d18:	4610      	mov	r0, r2
 8003d1a:	f7ff f9c8 	bl	80030ae <LL_ADC_SetCommonPathInternalCh>
 8003d1e:	e012      	b.n	8003d46 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d24:	f043 0220 	orr.w	r2, r3, #32
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003d32:	e008      	b.n	8003d46 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d38:	f043 0220 	orr.w	r2, r3, #32
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003d4e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3784      	adds	r7, #132	; 0x84
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd90      	pop	{r4, r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	40022000 	.word	0x40022000
 8003d60:	40022100 	.word	0x40022100
 8003d64:	40022300 	.word	0x40022300
 8003d68:	58026300 	.word	0x58026300
 8003d6c:	58026000 	.word	0x58026000
 8003d70:	cb840000 	.word	0xcb840000
 8003d74:	24000028 	.word	0x24000028
 8003d78:	053e2d63 	.word	0x053e2d63
 8003d7c:	c7520000 	.word	0xc7520000
 8003d80:	cfb80000 	.word	0xcfb80000

08003d84 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a7a      	ldr	r2, [pc, #488]	; (8003f7c <ADC_ConfigureBoostMode+0x1f8>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d004      	beq.n	8003da0 <ADC_ConfigureBoostMode+0x1c>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a79      	ldr	r2, [pc, #484]	; (8003f80 <ADC_ConfigureBoostMode+0x1fc>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d109      	bne.n	8003db4 <ADC_ConfigureBoostMode+0x30>
 8003da0:	4b78      	ldr	r3, [pc, #480]	; (8003f84 <ADC_ConfigureBoostMode+0x200>)
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	bf14      	ite	ne
 8003dac:	2301      	movne	r3, #1
 8003dae:	2300      	moveq	r3, #0
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	e008      	b.n	8003dc6 <ADC_ConfigureBoostMode+0x42>
 8003db4:	4b74      	ldr	r3, [pc, #464]	; (8003f88 <ADC_ConfigureBoostMode+0x204>)
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	bf14      	ite	ne
 8003dc0:	2301      	movne	r3, #1
 8003dc2:	2300      	moveq	r3, #0
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d01c      	beq.n	8003e04 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003dca:	f003 fd75 	bl	80078b8 <HAL_RCC_GetHCLKFreq>
 8003dce:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003dd8:	d010      	beq.n	8003dfc <ADC_ConfigureBoostMode+0x78>
 8003dda:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003dde:	d873      	bhi.n	8003ec8 <ADC_ConfigureBoostMode+0x144>
 8003de0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003de4:	d002      	beq.n	8003dec <ADC_ConfigureBoostMode+0x68>
 8003de6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003dea:	d16d      	bne.n	8003ec8 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	0c1b      	lsrs	r3, r3, #16
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df8:	60fb      	str	r3, [r7, #12]
        break;
 8003dfa:	e068      	b.n	8003ece <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	089b      	lsrs	r3, r3, #2
 8003e00:	60fb      	str	r3, [r7, #12]
        break;
 8003e02:	e064      	b.n	8003ece <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003e04:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003e08:	f04f 0100 	mov.w	r1, #0
 8003e0c:	f004 ffba 	bl	8008d84 <HAL_RCCEx_GetPeriphCLKFreq>
 8003e10:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003e1a:	d051      	beq.n	8003ec0 <ADC_ConfigureBoostMode+0x13c>
 8003e1c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003e20:	d854      	bhi.n	8003ecc <ADC_ConfigureBoostMode+0x148>
 8003e22:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003e26:	d047      	beq.n	8003eb8 <ADC_ConfigureBoostMode+0x134>
 8003e28:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003e2c:	d84e      	bhi.n	8003ecc <ADC_ConfigureBoostMode+0x148>
 8003e2e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003e32:	d03d      	beq.n	8003eb0 <ADC_ConfigureBoostMode+0x12c>
 8003e34:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003e38:	d848      	bhi.n	8003ecc <ADC_ConfigureBoostMode+0x148>
 8003e3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e3e:	d033      	beq.n	8003ea8 <ADC_ConfigureBoostMode+0x124>
 8003e40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e44:	d842      	bhi.n	8003ecc <ADC_ConfigureBoostMode+0x148>
 8003e46:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003e4a:	d029      	beq.n	8003ea0 <ADC_ConfigureBoostMode+0x11c>
 8003e4c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003e50:	d83c      	bhi.n	8003ecc <ADC_ConfigureBoostMode+0x148>
 8003e52:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003e56:	d01a      	beq.n	8003e8e <ADC_ConfigureBoostMode+0x10a>
 8003e58:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003e5c:	d836      	bhi.n	8003ecc <ADC_ConfigureBoostMode+0x148>
 8003e5e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003e62:	d014      	beq.n	8003e8e <ADC_ConfigureBoostMode+0x10a>
 8003e64:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003e68:	d830      	bhi.n	8003ecc <ADC_ConfigureBoostMode+0x148>
 8003e6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e6e:	d00e      	beq.n	8003e8e <ADC_ConfigureBoostMode+0x10a>
 8003e70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e74:	d82a      	bhi.n	8003ecc <ADC_ConfigureBoostMode+0x148>
 8003e76:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003e7a:	d008      	beq.n	8003e8e <ADC_ConfigureBoostMode+0x10a>
 8003e7c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003e80:	d824      	bhi.n	8003ecc <ADC_ConfigureBoostMode+0x148>
 8003e82:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e86:	d002      	beq.n	8003e8e <ADC_ConfigureBoostMode+0x10a>
 8003e88:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003e8c:	d11e      	bne.n	8003ecc <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	0c9b      	lsrs	r3, r3, #18
 8003e94:	005b      	lsls	r3, r3, #1
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e9c:	60fb      	str	r3, [r7, #12]
        break;
 8003e9e:	e016      	b.n	8003ece <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	091b      	lsrs	r3, r3, #4
 8003ea4:	60fb      	str	r3, [r7, #12]
        break;
 8003ea6:	e012      	b.n	8003ece <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	095b      	lsrs	r3, r3, #5
 8003eac:	60fb      	str	r3, [r7, #12]
        break;
 8003eae:	e00e      	b.n	8003ece <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	099b      	lsrs	r3, r3, #6
 8003eb4:	60fb      	str	r3, [r7, #12]
        break;
 8003eb6:	e00a      	b.n	8003ece <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	09db      	lsrs	r3, r3, #7
 8003ebc:	60fb      	str	r3, [r7, #12]
        break;
 8003ebe:	e006      	b.n	8003ece <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	0a1b      	lsrs	r3, r3, #8
 8003ec4:	60fb      	str	r3, [r7, #12]
        break;
 8003ec6:	e002      	b.n	8003ece <ADC_ConfigureBoostMode+0x14a>
        break;
 8003ec8:	bf00      	nop
 8003eca:	e000      	b.n	8003ece <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003ecc:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003ece:	f7ff f8a5 	bl	800301c <HAL_GetREVID>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	f241 0203 	movw	r2, #4099	; 0x1003
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d815      	bhi.n	8003f08 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	4a2b      	ldr	r2, [pc, #172]	; (8003f8c <ADC_ConfigureBoostMode+0x208>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d908      	bls.n	8003ef6 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	689a      	ldr	r2, [r3, #8]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ef2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003ef4:	e03e      	b.n	8003f74 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	689a      	ldr	r2, [r3, #8]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f04:	609a      	str	r2, [r3, #8]
}
 8003f06:	e035      	b.n	8003f74 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	085b      	lsrs	r3, r3, #1
 8003f0c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	4a1f      	ldr	r2, [pc, #124]	; (8003f90 <ADC_ConfigureBoostMode+0x20c>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d808      	bhi.n	8003f28 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	689a      	ldr	r2, [r3, #8]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003f24:	609a      	str	r2, [r3, #8]
}
 8003f26:	e025      	b.n	8003f74 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	4a1a      	ldr	r2, [pc, #104]	; (8003f94 <ADC_ConfigureBoostMode+0x210>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d80a      	bhi.n	8003f46 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f42:	609a      	str	r2, [r3, #8]
}
 8003f44:	e016      	b.n	8003f74 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	4a13      	ldr	r2, [pc, #76]	; (8003f98 <ADC_ConfigureBoostMode+0x214>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d80a      	bhi.n	8003f64 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f60:	609a      	str	r2, [r3, #8]
}
 8003f62:	e007      	b.n	8003f74 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	689a      	ldr	r2, [r3, #8]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003f72:	609a      	str	r2, [r3, #8]
}
 8003f74:	bf00      	nop
 8003f76:	3710      	adds	r7, #16
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	40022000 	.word	0x40022000
 8003f80:	40022100 	.word	0x40022100
 8003f84:	40022300 	.word	0x40022300
 8003f88:	58026300 	.word	0x58026300
 8003f8c:	01312d00 	.word	0x01312d00
 8003f90:	005f5e10 	.word	0x005f5e10
 8003f94:	00bebc20 	.word	0x00bebc20
 8003f98:	017d7840 	.word	0x017d7840

08003f9c <LL_ADC_IsEnabled>:
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f003 0301 	and.w	r3, r3, #1
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d101      	bne.n	8003fb4 <LL_ADC_IsEnabled+0x18>
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e000      	b.n	8003fb6 <LL_ADC_IsEnabled+0x1a>
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	370c      	adds	r7, #12
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr

08003fc2 <LL_ADC_REG_IsConversionOngoing>:
{
 8003fc2:	b480      	push	{r7}
 8003fc4:	b083      	sub	sp, #12
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f003 0304 	and.w	r3, r3, #4
 8003fd2:	2b04      	cmp	r3, #4
 8003fd4:	d101      	bne.n	8003fda <LL_ADC_REG_IsConversionOngoing+0x18>
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e000      	b.n	8003fdc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003fda:	2300      	movs	r3, #0
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003fe8:	b590      	push	{r4, r7, lr}
 8003fea:	b09f      	sub	sp, #124	; 0x7c
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d101      	bne.n	8004006 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004002:	2302      	movs	r3, #2
 8004004:	e0be      	b.n	8004184 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800400e:	2300      	movs	r3, #0
 8004010:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004012:	2300      	movs	r3, #0
 8004014:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a5c      	ldr	r2, [pc, #368]	; (800418c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d102      	bne.n	8004026 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004020:	4b5b      	ldr	r3, [pc, #364]	; (8004190 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004022:	60bb      	str	r3, [r7, #8]
 8004024:	e001      	b.n	800402a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004026:	2300      	movs	r3, #0
 8004028:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d10b      	bne.n	8004048 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004034:	f043 0220 	orr.w	r2, r3, #32
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e09d      	b.n	8004184 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	4618      	mov	r0, r3
 800404c:	f7ff ffb9 	bl	8003fc2 <LL_ADC_REG_IsConversionOngoing>
 8004050:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4618      	mov	r0, r3
 8004058:	f7ff ffb3 	bl	8003fc2 <LL_ADC_REG_IsConversionOngoing>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d17f      	bne.n	8004162 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004062:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004064:	2b00      	cmp	r3, #0
 8004066:	d17c      	bne.n	8004162 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a47      	ldr	r2, [pc, #284]	; (800418c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d004      	beq.n	800407c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a46      	ldr	r2, [pc, #280]	; (8004190 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d101      	bne.n	8004080 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 800407c:	4b45      	ldr	r3, [pc, #276]	; (8004194 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800407e:	e000      	b.n	8004082 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004080:	4b45      	ldr	r3, [pc, #276]	; (8004198 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004082:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d039      	beq.n	8004100 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800408c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	431a      	orrs	r2, r3
 800409a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800409c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a3a      	ldr	r2, [pc, #232]	; (800418c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d004      	beq.n	80040b2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a38      	ldr	r2, [pc, #224]	; (8004190 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d10e      	bne.n	80040d0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80040b2:	4836      	ldr	r0, [pc, #216]	; (800418c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80040b4:	f7ff ff72 	bl	8003f9c <LL_ADC_IsEnabled>
 80040b8:	4604      	mov	r4, r0
 80040ba:	4835      	ldr	r0, [pc, #212]	; (8004190 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80040bc:	f7ff ff6e 	bl	8003f9c <LL_ADC_IsEnabled>
 80040c0:	4603      	mov	r3, r0
 80040c2:	4323      	orrs	r3, r4
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	bf0c      	ite	eq
 80040c8:	2301      	moveq	r3, #1
 80040ca:	2300      	movne	r3, #0
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	e008      	b.n	80040e2 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80040d0:	4832      	ldr	r0, [pc, #200]	; (800419c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80040d2:	f7ff ff63 	bl	8003f9c <LL_ADC_IsEnabled>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	bf0c      	ite	eq
 80040dc:	2301      	moveq	r3, #1
 80040de:	2300      	movne	r3, #0
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d047      	beq.n	8004176 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80040e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040e8:	689a      	ldr	r2, [r3, #8]
 80040ea:	4b2d      	ldr	r3, [pc, #180]	; (80041a0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80040ec:	4013      	ands	r3, r2
 80040ee:	683a      	ldr	r2, [r7, #0]
 80040f0:	6811      	ldr	r1, [r2, #0]
 80040f2:	683a      	ldr	r2, [r7, #0]
 80040f4:	6892      	ldr	r2, [r2, #8]
 80040f6:	430a      	orrs	r2, r1
 80040f8:	431a      	orrs	r2, r3
 80040fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040fc:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80040fe:	e03a      	b.n	8004176 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004100:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004108:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800410a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a1e      	ldr	r2, [pc, #120]	; (800418c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d004      	beq.n	8004120 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a1d      	ldr	r2, [pc, #116]	; (8004190 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d10e      	bne.n	800413e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004120:	481a      	ldr	r0, [pc, #104]	; (800418c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004122:	f7ff ff3b 	bl	8003f9c <LL_ADC_IsEnabled>
 8004126:	4604      	mov	r4, r0
 8004128:	4819      	ldr	r0, [pc, #100]	; (8004190 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800412a:	f7ff ff37 	bl	8003f9c <LL_ADC_IsEnabled>
 800412e:	4603      	mov	r3, r0
 8004130:	4323      	orrs	r3, r4
 8004132:	2b00      	cmp	r3, #0
 8004134:	bf0c      	ite	eq
 8004136:	2301      	moveq	r3, #1
 8004138:	2300      	movne	r3, #0
 800413a:	b2db      	uxtb	r3, r3
 800413c:	e008      	b.n	8004150 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800413e:	4817      	ldr	r0, [pc, #92]	; (800419c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004140:	f7ff ff2c 	bl	8003f9c <LL_ADC_IsEnabled>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	bf0c      	ite	eq
 800414a:	2301      	moveq	r3, #1
 800414c:	2300      	movne	r3, #0
 800414e:	b2db      	uxtb	r3, r3
 8004150:	2b00      	cmp	r3, #0
 8004152:	d010      	beq.n	8004176 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004154:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004156:	689a      	ldr	r2, [r3, #8]
 8004158:	4b11      	ldr	r3, [pc, #68]	; (80041a0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800415a:	4013      	ands	r3, r2
 800415c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800415e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004160:	e009      	b.n	8004176 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004166:	f043 0220 	orr.w	r2, r3, #32
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004174:	e000      	b.n	8004178 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004176:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004180:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004184:	4618      	mov	r0, r3
 8004186:	377c      	adds	r7, #124	; 0x7c
 8004188:	46bd      	mov	sp, r7
 800418a:	bd90      	pop	{r4, r7, pc}
 800418c:	40022000 	.word	0x40022000
 8004190:	40022100 	.word	0x40022100
 8004194:	40022300 	.word	0x40022300
 8004198:	58026300 	.word	0x58026300
 800419c:	58026000 	.word	0x58026000
 80041a0:	fffff0e0 	.word	0xfffff0e0

080041a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b085      	sub	sp, #20
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f003 0307 	and.w	r3, r3, #7
 80041b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041b4:	4b0b      	ldr	r3, [pc, #44]	; (80041e4 <__NVIC_SetPriorityGrouping+0x40>)
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041ba:	68ba      	ldr	r2, [r7, #8]
 80041bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80041c0:	4013      	ands	r3, r2
 80041c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80041cc:	4b06      	ldr	r3, [pc, #24]	; (80041e8 <__NVIC_SetPriorityGrouping+0x44>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041d2:	4a04      	ldr	r2, [pc, #16]	; (80041e4 <__NVIC_SetPriorityGrouping+0x40>)
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	60d3      	str	r3, [r2, #12]
}
 80041d8:	bf00      	nop
 80041da:	3714      	adds	r7, #20
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr
 80041e4:	e000ed00 	.word	0xe000ed00
 80041e8:	05fa0000 	.word	0x05fa0000

080041ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80041ec:	b480      	push	{r7}
 80041ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041f0:	4b04      	ldr	r3, [pc, #16]	; (8004204 <__NVIC_GetPriorityGrouping+0x18>)
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	0a1b      	lsrs	r3, r3, #8
 80041f6:	f003 0307 	and.w	r3, r3, #7
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr
 8004204:	e000ed00 	.word	0xe000ed00

08004208 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	4603      	mov	r3, r0
 8004210:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004212:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004216:	2b00      	cmp	r3, #0
 8004218:	db0b      	blt.n	8004232 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800421a:	88fb      	ldrh	r3, [r7, #6]
 800421c:	f003 021f 	and.w	r2, r3, #31
 8004220:	4907      	ldr	r1, [pc, #28]	; (8004240 <__NVIC_EnableIRQ+0x38>)
 8004222:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004226:	095b      	lsrs	r3, r3, #5
 8004228:	2001      	movs	r0, #1
 800422a:	fa00 f202 	lsl.w	r2, r0, r2
 800422e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004232:	bf00      	nop
 8004234:	370c      	adds	r7, #12
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	e000e100 	.word	0xe000e100

08004244 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	4603      	mov	r3, r0
 800424c:	6039      	str	r1, [r7, #0]
 800424e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004250:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004254:	2b00      	cmp	r3, #0
 8004256:	db0a      	blt.n	800426e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	b2da      	uxtb	r2, r3
 800425c:	490c      	ldr	r1, [pc, #48]	; (8004290 <__NVIC_SetPriority+0x4c>)
 800425e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004262:	0112      	lsls	r2, r2, #4
 8004264:	b2d2      	uxtb	r2, r2
 8004266:	440b      	add	r3, r1
 8004268:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800426c:	e00a      	b.n	8004284 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	b2da      	uxtb	r2, r3
 8004272:	4908      	ldr	r1, [pc, #32]	; (8004294 <__NVIC_SetPriority+0x50>)
 8004274:	88fb      	ldrh	r3, [r7, #6]
 8004276:	f003 030f 	and.w	r3, r3, #15
 800427a:	3b04      	subs	r3, #4
 800427c:	0112      	lsls	r2, r2, #4
 800427e:	b2d2      	uxtb	r2, r2
 8004280:	440b      	add	r3, r1
 8004282:	761a      	strb	r2, [r3, #24]
}
 8004284:	bf00      	nop
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr
 8004290:	e000e100 	.word	0xe000e100
 8004294:	e000ed00 	.word	0xe000ed00

08004298 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004298:	b480      	push	{r7}
 800429a:	b089      	sub	sp, #36	; 0x24
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f003 0307 	and.w	r3, r3, #7
 80042aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	f1c3 0307 	rsb	r3, r3, #7
 80042b2:	2b04      	cmp	r3, #4
 80042b4:	bf28      	it	cs
 80042b6:	2304      	movcs	r3, #4
 80042b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	3304      	adds	r3, #4
 80042be:	2b06      	cmp	r3, #6
 80042c0:	d902      	bls.n	80042c8 <NVIC_EncodePriority+0x30>
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	3b03      	subs	r3, #3
 80042c6:	e000      	b.n	80042ca <NVIC_EncodePriority+0x32>
 80042c8:	2300      	movs	r3, #0
 80042ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042cc:	f04f 32ff 	mov.w	r2, #4294967295
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	fa02 f303 	lsl.w	r3, r2, r3
 80042d6:	43da      	mvns	r2, r3
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	401a      	ands	r2, r3
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042e0:	f04f 31ff 	mov.w	r1, #4294967295
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	fa01 f303 	lsl.w	r3, r1, r3
 80042ea:	43d9      	mvns	r1, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042f0:	4313      	orrs	r3, r2
         );
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3724      	adds	r7, #36	; 0x24
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
	...

08004300 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	3b01      	subs	r3, #1
 800430c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004310:	d301      	bcc.n	8004316 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004312:	2301      	movs	r3, #1
 8004314:	e00f      	b.n	8004336 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004316:	4a0a      	ldr	r2, [pc, #40]	; (8004340 <SysTick_Config+0x40>)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	3b01      	subs	r3, #1
 800431c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800431e:	210f      	movs	r1, #15
 8004320:	f04f 30ff 	mov.w	r0, #4294967295
 8004324:	f7ff ff8e 	bl	8004244 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004328:	4b05      	ldr	r3, [pc, #20]	; (8004340 <SysTick_Config+0x40>)
 800432a:	2200      	movs	r2, #0
 800432c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800432e:	4b04      	ldr	r3, [pc, #16]	; (8004340 <SysTick_Config+0x40>)
 8004330:	2207      	movs	r2, #7
 8004332:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3708      	adds	r7, #8
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	e000e010 	.word	0xe000e010

08004344 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f7ff ff29 	bl	80041a4 <__NVIC_SetPriorityGrouping>
}
 8004352:	bf00      	nop
 8004354:	3708      	adds	r7, #8
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}

0800435a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800435a:	b580      	push	{r7, lr}
 800435c:	b086      	sub	sp, #24
 800435e:	af00      	add	r7, sp, #0
 8004360:	4603      	mov	r3, r0
 8004362:	60b9      	str	r1, [r7, #8]
 8004364:	607a      	str	r2, [r7, #4]
 8004366:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004368:	f7ff ff40 	bl	80041ec <__NVIC_GetPriorityGrouping>
 800436c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	68b9      	ldr	r1, [r7, #8]
 8004372:	6978      	ldr	r0, [r7, #20]
 8004374:	f7ff ff90 	bl	8004298 <NVIC_EncodePriority>
 8004378:	4602      	mov	r2, r0
 800437a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800437e:	4611      	mov	r1, r2
 8004380:	4618      	mov	r0, r3
 8004382:	f7ff ff5f 	bl	8004244 <__NVIC_SetPriority>
}
 8004386:	bf00      	nop
 8004388:	3718      	adds	r7, #24
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}

0800438e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800438e:	b580      	push	{r7, lr}
 8004390:	b082      	sub	sp, #8
 8004392:	af00      	add	r7, sp, #0
 8004394:	4603      	mov	r3, r0
 8004396:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004398:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800439c:	4618      	mov	r0, r3
 800439e:	f7ff ff33 	bl	8004208 <__NVIC_EnableIRQ>
}
 80043a2:	bf00      	nop
 80043a4:	3708      	adds	r7, #8
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}

080043aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043aa:	b580      	push	{r7, lr}
 80043ac:	b082      	sub	sp, #8
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f7ff ffa4 	bl	8004300 <SysTick_Config>
 80043b8:	4603      	mov	r3, r0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3708      	adds	r7, #8
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
	...

080043c4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b086      	sub	sp, #24
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80043cc:	f7fe fdf6 	bl	8002fbc <HAL_GetTick>
 80043d0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d101      	bne.n	80043dc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e2dc      	b.n	8004996 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d008      	beq.n	80043fa <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2280      	movs	r2, #128	; 0x80
 80043ec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e2cd      	b.n	8004996 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a76      	ldr	r2, [pc, #472]	; (80045d8 <HAL_DMA_Abort+0x214>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d04a      	beq.n	800449a <HAL_DMA_Abort+0xd6>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a74      	ldr	r2, [pc, #464]	; (80045dc <HAL_DMA_Abort+0x218>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d045      	beq.n	800449a <HAL_DMA_Abort+0xd6>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a73      	ldr	r2, [pc, #460]	; (80045e0 <HAL_DMA_Abort+0x21c>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d040      	beq.n	800449a <HAL_DMA_Abort+0xd6>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a71      	ldr	r2, [pc, #452]	; (80045e4 <HAL_DMA_Abort+0x220>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d03b      	beq.n	800449a <HAL_DMA_Abort+0xd6>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a70      	ldr	r2, [pc, #448]	; (80045e8 <HAL_DMA_Abort+0x224>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d036      	beq.n	800449a <HAL_DMA_Abort+0xd6>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a6e      	ldr	r2, [pc, #440]	; (80045ec <HAL_DMA_Abort+0x228>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d031      	beq.n	800449a <HAL_DMA_Abort+0xd6>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a6d      	ldr	r2, [pc, #436]	; (80045f0 <HAL_DMA_Abort+0x22c>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d02c      	beq.n	800449a <HAL_DMA_Abort+0xd6>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a6b      	ldr	r2, [pc, #428]	; (80045f4 <HAL_DMA_Abort+0x230>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d027      	beq.n	800449a <HAL_DMA_Abort+0xd6>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a6a      	ldr	r2, [pc, #424]	; (80045f8 <HAL_DMA_Abort+0x234>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d022      	beq.n	800449a <HAL_DMA_Abort+0xd6>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a68      	ldr	r2, [pc, #416]	; (80045fc <HAL_DMA_Abort+0x238>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d01d      	beq.n	800449a <HAL_DMA_Abort+0xd6>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a67      	ldr	r2, [pc, #412]	; (8004600 <HAL_DMA_Abort+0x23c>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d018      	beq.n	800449a <HAL_DMA_Abort+0xd6>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a65      	ldr	r2, [pc, #404]	; (8004604 <HAL_DMA_Abort+0x240>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d013      	beq.n	800449a <HAL_DMA_Abort+0xd6>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a64      	ldr	r2, [pc, #400]	; (8004608 <HAL_DMA_Abort+0x244>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d00e      	beq.n	800449a <HAL_DMA_Abort+0xd6>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a62      	ldr	r2, [pc, #392]	; (800460c <HAL_DMA_Abort+0x248>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d009      	beq.n	800449a <HAL_DMA_Abort+0xd6>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a61      	ldr	r2, [pc, #388]	; (8004610 <HAL_DMA_Abort+0x24c>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d004      	beq.n	800449a <HAL_DMA_Abort+0xd6>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a5f      	ldr	r2, [pc, #380]	; (8004614 <HAL_DMA_Abort+0x250>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d101      	bne.n	800449e <HAL_DMA_Abort+0xda>
 800449a:	2301      	movs	r3, #1
 800449c:	e000      	b.n	80044a0 <HAL_DMA_Abort+0xdc>
 800449e:	2300      	movs	r3, #0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d013      	beq.n	80044cc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f022 021e 	bic.w	r2, r2, #30
 80044b2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	695a      	ldr	r2, [r3, #20]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044c2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	617b      	str	r3, [r7, #20]
 80044ca:	e00a      	b.n	80044e2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f022 020e 	bic.w	r2, r2, #14
 80044da:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a3c      	ldr	r2, [pc, #240]	; (80045d8 <HAL_DMA_Abort+0x214>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d072      	beq.n	80045d2 <HAL_DMA_Abort+0x20e>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a3a      	ldr	r2, [pc, #232]	; (80045dc <HAL_DMA_Abort+0x218>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d06d      	beq.n	80045d2 <HAL_DMA_Abort+0x20e>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a39      	ldr	r2, [pc, #228]	; (80045e0 <HAL_DMA_Abort+0x21c>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d068      	beq.n	80045d2 <HAL_DMA_Abort+0x20e>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a37      	ldr	r2, [pc, #220]	; (80045e4 <HAL_DMA_Abort+0x220>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d063      	beq.n	80045d2 <HAL_DMA_Abort+0x20e>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a36      	ldr	r2, [pc, #216]	; (80045e8 <HAL_DMA_Abort+0x224>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d05e      	beq.n	80045d2 <HAL_DMA_Abort+0x20e>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a34      	ldr	r2, [pc, #208]	; (80045ec <HAL_DMA_Abort+0x228>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d059      	beq.n	80045d2 <HAL_DMA_Abort+0x20e>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a33      	ldr	r2, [pc, #204]	; (80045f0 <HAL_DMA_Abort+0x22c>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d054      	beq.n	80045d2 <HAL_DMA_Abort+0x20e>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a31      	ldr	r2, [pc, #196]	; (80045f4 <HAL_DMA_Abort+0x230>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d04f      	beq.n	80045d2 <HAL_DMA_Abort+0x20e>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a30      	ldr	r2, [pc, #192]	; (80045f8 <HAL_DMA_Abort+0x234>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d04a      	beq.n	80045d2 <HAL_DMA_Abort+0x20e>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a2e      	ldr	r2, [pc, #184]	; (80045fc <HAL_DMA_Abort+0x238>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d045      	beq.n	80045d2 <HAL_DMA_Abort+0x20e>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a2d      	ldr	r2, [pc, #180]	; (8004600 <HAL_DMA_Abort+0x23c>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d040      	beq.n	80045d2 <HAL_DMA_Abort+0x20e>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a2b      	ldr	r2, [pc, #172]	; (8004604 <HAL_DMA_Abort+0x240>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d03b      	beq.n	80045d2 <HAL_DMA_Abort+0x20e>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a2a      	ldr	r2, [pc, #168]	; (8004608 <HAL_DMA_Abort+0x244>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d036      	beq.n	80045d2 <HAL_DMA_Abort+0x20e>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a28      	ldr	r2, [pc, #160]	; (800460c <HAL_DMA_Abort+0x248>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d031      	beq.n	80045d2 <HAL_DMA_Abort+0x20e>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a27      	ldr	r2, [pc, #156]	; (8004610 <HAL_DMA_Abort+0x24c>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d02c      	beq.n	80045d2 <HAL_DMA_Abort+0x20e>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a25      	ldr	r2, [pc, #148]	; (8004614 <HAL_DMA_Abort+0x250>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d027      	beq.n	80045d2 <HAL_DMA_Abort+0x20e>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a24      	ldr	r2, [pc, #144]	; (8004618 <HAL_DMA_Abort+0x254>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d022      	beq.n	80045d2 <HAL_DMA_Abort+0x20e>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a22      	ldr	r2, [pc, #136]	; (800461c <HAL_DMA_Abort+0x258>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d01d      	beq.n	80045d2 <HAL_DMA_Abort+0x20e>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a21      	ldr	r2, [pc, #132]	; (8004620 <HAL_DMA_Abort+0x25c>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d018      	beq.n	80045d2 <HAL_DMA_Abort+0x20e>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a1f      	ldr	r2, [pc, #124]	; (8004624 <HAL_DMA_Abort+0x260>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d013      	beq.n	80045d2 <HAL_DMA_Abort+0x20e>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a1e      	ldr	r2, [pc, #120]	; (8004628 <HAL_DMA_Abort+0x264>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d00e      	beq.n	80045d2 <HAL_DMA_Abort+0x20e>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a1c      	ldr	r2, [pc, #112]	; (800462c <HAL_DMA_Abort+0x268>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d009      	beq.n	80045d2 <HAL_DMA_Abort+0x20e>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a1b      	ldr	r2, [pc, #108]	; (8004630 <HAL_DMA_Abort+0x26c>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d004      	beq.n	80045d2 <HAL_DMA_Abort+0x20e>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a19      	ldr	r2, [pc, #100]	; (8004634 <HAL_DMA_Abort+0x270>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d132      	bne.n	8004638 <HAL_DMA_Abort+0x274>
 80045d2:	2301      	movs	r3, #1
 80045d4:	e031      	b.n	800463a <HAL_DMA_Abort+0x276>
 80045d6:	bf00      	nop
 80045d8:	40020010 	.word	0x40020010
 80045dc:	40020028 	.word	0x40020028
 80045e0:	40020040 	.word	0x40020040
 80045e4:	40020058 	.word	0x40020058
 80045e8:	40020070 	.word	0x40020070
 80045ec:	40020088 	.word	0x40020088
 80045f0:	400200a0 	.word	0x400200a0
 80045f4:	400200b8 	.word	0x400200b8
 80045f8:	40020410 	.word	0x40020410
 80045fc:	40020428 	.word	0x40020428
 8004600:	40020440 	.word	0x40020440
 8004604:	40020458 	.word	0x40020458
 8004608:	40020470 	.word	0x40020470
 800460c:	40020488 	.word	0x40020488
 8004610:	400204a0 	.word	0x400204a0
 8004614:	400204b8 	.word	0x400204b8
 8004618:	58025408 	.word	0x58025408
 800461c:	5802541c 	.word	0x5802541c
 8004620:	58025430 	.word	0x58025430
 8004624:	58025444 	.word	0x58025444
 8004628:	58025458 	.word	0x58025458
 800462c:	5802546c 	.word	0x5802546c
 8004630:	58025480 	.word	0x58025480
 8004634:	58025494 	.word	0x58025494
 8004638:	2300      	movs	r3, #0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d007      	beq.n	800464e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004648:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800464c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a6d      	ldr	r2, [pc, #436]	; (8004808 <HAL_DMA_Abort+0x444>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d04a      	beq.n	80046ee <HAL_DMA_Abort+0x32a>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a6b      	ldr	r2, [pc, #428]	; (800480c <HAL_DMA_Abort+0x448>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d045      	beq.n	80046ee <HAL_DMA_Abort+0x32a>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a6a      	ldr	r2, [pc, #424]	; (8004810 <HAL_DMA_Abort+0x44c>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d040      	beq.n	80046ee <HAL_DMA_Abort+0x32a>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a68      	ldr	r2, [pc, #416]	; (8004814 <HAL_DMA_Abort+0x450>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d03b      	beq.n	80046ee <HAL_DMA_Abort+0x32a>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a67      	ldr	r2, [pc, #412]	; (8004818 <HAL_DMA_Abort+0x454>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d036      	beq.n	80046ee <HAL_DMA_Abort+0x32a>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a65      	ldr	r2, [pc, #404]	; (800481c <HAL_DMA_Abort+0x458>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d031      	beq.n	80046ee <HAL_DMA_Abort+0x32a>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a64      	ldr	r2, [pc, #400]	; (8004820 <HAL_DMA_Abort+0x45c>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d02c      	beq.n	80046ee <HAL_DMA_Abort+0x32a>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a62      	ldr	r2, [pc, #392]	; (8004824 <HAL_DMA_Abort+0x460>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d027      	beq.n	80046ee <HAL_DMA_Abort+0x32a>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a61      	ldr	r2, [pc, #388]	; (8004828 <HAL_DMA_Abort+0x464>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d022      	beq.n	80046ee <HAL_DMA_Abort+0x32a>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a5f      	ldr	r2, [pc, #380]	; (800482c <HAL_DMA_Abort+0x468>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d01d      	beq.n	80046ee <HAL_DMA_Abort+0x32a>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a5e      	ldr	r2, [pc, #376]	; (8004830 <HAL_DMA_Abort+0x46c>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d018      	beq.n	80046ee <HAL_DMA_Abort+0x32a>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a5c      	ldr	r2, [pc, #368]	; (8004834 <HAL_DMA_Abort+0x470>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d013      	beq.n	80046ee <HAL_DMA_Abort+0x32a>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a5b      	ldr	r2, [pc, #364]	; (8004838 <HAL_DMA_Abort+0x474>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d00e      	beq.n	80046ee <HAL_DMA_Abort+0x32a>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a59      	ldr	r2, [pc, #356]	; (800483c <HAL_DMA_Abort+0x478>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d009      	beq.n	80046ee <HAL_DMA_Abort+0x32a>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a58      	ldr	r2, [pc, #352]	; (8004840 <HAL_DMA_Abort+0x47c>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d004      	beq.n	80046ee <HAL_DMA_Abort+0x32a>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a56      	ldr	r2, [pc, #344]	; (8004844 <HAL_DMA_Abort+0x480>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d108      	bne.n	8004700 <HAL_DMA_Abort+0x33c>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f022 0201 	bic.w	r2, r2, #1
 80046fc:	601a      	str	r2, [r3, #0]
 80046fe:	e007      	b.n	8004710 <HAL_DMA_Abort+0x34c>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f022 0201 	bic.w	r2, r2, #1
 800470e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004710:	e013      	b.n	800473a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004712:	f7fe fc53 	bl	8002fbc <HAL_GetTick>
 8004716:	4602      	mov	r2, r0
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	2b05      	cmp	r3, #5
 800471e:	d90c      	bls.n	800473a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2220      	movs	r2, #32
 8004724:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2203      	movs	r2, #3
 800472a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e12d      	b.n	8004996 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 0301 	and.w	r3, r3, #1
 8004742:	2b00      	cmp	r3, #0
 8004744:	d1e5      	bne.n	8004712 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a2f      	ldr	r2, [pc, #188]	; (8004808 <HAL_DMA_Abort+0x444>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d04a      	beq.n	80047e6 <HAL_DMA_Abort+0x422>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a2d      	ldr	r2, [pc, #180]	; (800480c <HAL_DMA_Abort+0x448>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d045      	beq.n	80047e6 <HAL_DMA_Abort+0x422>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a2c      	ldr	r2, [pc, #176]	; (8004810 <HAL_DMA_Abort+0x44c>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d040      	beq.n	80047e6 <HAL_DMA_Abort+0x422>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a2a      	ldr	r2, [pc, #168]	; (8004814 <HAL_DMA_Abort+0x450>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d03b      	beq.n	80047e6 <HAL_DMA_Abort+0x422>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a29      	ldr	r2, [pc, #164]	; (8004818 <HAL_DMA_Abort+0x454>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d036      	beq.n	80047e6 <HAL_DMA_Abort+0x422>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a27      	ldr	r2, [pc, #156]	; (800481c <HAL_DMA_Abort+0x458>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d031      	beq.n	80047e6 <HAL_DMA_Abort+0x422>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a26      	ldr	r2, [pc, #152]	; (8004820 <HAL_DMA_Abort+0x45c>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d02c      	beq.n	80047e6 <HAL_DMA_Abort+0x422>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a24      	ldr	r2, [pc, #144]	; (8004824 <HAL_DMA_Abort+0x460>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d027      	beq.n	80047e6 <HAL_DMA_Abort+0x422>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a23      	ldr	r2, [pc, #140]	; (8004828 <HAL_DMA_Abort+0x464>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d022      	beq.n	80047e6 <HAL_DMA_Abort+0x422>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a21      	ldr	r2, [pc, #132]	; (800482c <HAL_DMA_Abort+0x468>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d01d      	beq.n	80047e6 <HAL_DMA_Abort+0x422>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a20      	ldr	r2, [pc, #128]	; (8004830 <HAL_DMA_Abort+0x46c>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d018      	beq.n	80047e6 <HAL_DMA_Abort+0x422>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a1e      	ldr	r2, [pc, #120]	; (8004834 <HAL_DMA_Abort+0x470>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d013      	beq.n	80047e6 <HAL_DMA_Abort+0x422>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a1d      	ldr	r2, [pc, #116]	; (8004838 <HAL_DMA_Abort+0x474>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d00e      	beq.n	80047e6 <HAL_DMA_Abort+0x422>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a1b      	ldr	r2, [pc, #108]	; (800483c <HAL_DMA_Abort+0x478>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d009      	beq.n	80047e6 <HAL_DMA_Abort+0x422>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a1a      	ldr	r2, [pc, #104]	; (8004840 <HAL_DMA_Abort+0x47c>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d004      	beq.n	80047e6 <HAL_DMA_Abort+0x422>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a18      	ldr	r2, [pc, #96]	; (8004844 <HAL_DMA_Abort+0x480>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d101      	bne.n	80047ea <HAL_DMA_Abort+0x426>
 80047e6:	2301      	movs	r3, #1
 80047e8:	e000      	b.n	80047ec <HAL_DMA_Abort+0x428>
 80047ea:	2300      	movs	r3, #0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d02b      	beq.n	8004848 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047f4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047fa:	f003 031f 	and.w	r3, r3, #31
 80047fe:	223f      	movs	r2, #63	; 0x3f
 8004800:	409a      	lsls	r2, r3
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	609a      	str	r2, [r3, #8]
 8004806:	e02a      	b.n	800485e <HAL_DMA_Abort+0x49a>
 8004808:	40020010 	.word	0x40020010
 800480c:	40020028 	.word	0x40020028
 8004810:	40020040 	.word	0x40020040
 8004814:	40020058 	.word	0x40020058
 8004818:	40020070 	.word	0x40020070
 800481c:	40020088 	.word	0x40020088
 8004820:	400200a0 	.word	0x400200a0
 8004824:	400200b8 	.word	0x400200b8
 8004828:	40020410 	.word	0x40020410
 800482c:	40020428 	.word	0x40020428
 8004830:	40020440 	.word	0x40020440
 8004834:	40020458 	.word	0x40020458
 8004838:	40020470 	.word	0x40020470
 800483c:	40020488 	.word	0x40020488
 8004840:	400204a0 	.word	0x400204a0
 8004844:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800484c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004852:	f003 031f 	and.w	r3, r3, #31
 8004856:	2201      	movs	r2, #1
 8004858:	409a      	lsls	r2, r3
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a4f      	ldr	r2, [pc, #316]	; (80049a0 <HAL_DMA_Abort+0x5dc>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d072      	beq.n	800494e <HAL_DMA_Abort+0x58a>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a4d      	ldr	r2, [pc, #308]	; (80049a4 <HAL_DMA_Abort+0x5e0>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d06d      	beq.n	800494e <HAL_DMA_Abort+0x58a>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a4c      	ldr	r2, [pc, #304]	; (80049a8 <HAL_DMA_Abort+0x5e4>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d068      	beq.n	800494e <HAL_DMA_Abort+0x58a>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a4a      	ldr	r2, [pc, #296]	; (80049ac <HAL_DMA_Abort+0x5e8>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d063      	beq.n	800494e <HAL_DMA_Abort+0x58a>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a49      	ldr	r2, [pc, #292]	; (80049b0 <HAL_DMA_Abort+0x5ec>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d05e      	beq.n	800494e <HAL_DMA_Abort+0x58a>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a47      	ldr	r2, [pc, #284]	; (80049b4 <HAL_DMA_Abort+0x5f0>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d059      	beq.n	800494e <HAL_DMA_Abort+0x58a>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a46      	ldr	r2, [pc, #280]	; (80049b8 <HAL_DMA_Abort+0x5f4>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d054      	beq.n	800494e <HAL_DMA_Abort+0x58a>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a44      	ldr	r2, [pc, #272]	; (80049bc <HAL_DMA_Abort+0x5f8>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d04f      	beq.n	800494e <HAL_DMA_Abort+0x58a>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a43      	ldr	r2, [pc, #268]	; (80049c0 <HAL_DMA_Abort+0x5fc>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d04a      	beq.n	800494e <HAL_DMA_Abort+0x58a>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a41      	ldr	r2, [pc, #260]	; (80049c4 <HAL_DMA_Abort+0x600>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d045      	beq.n	800494e <HAL_DMA_Abort+0x58a>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a40      	ldr	r2, [pc, #256]	; (80049c8 <HAL_DMA_Abort+0x604>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d040      	beq.n	800494e <HAL_DMA_Abort+0x58a>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a3e      	ldr	r2, [pc, #248]	; (80049cc <HAL_DMA_Abort+0x608>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d03b      	beq.n	800494e <HAL_DMA_Abort+0x58a>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a3d      	ldr	r2, [pc, #244]	; (80049d0 <HAL_DMA_Abort+0x60c>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d036      	beq.n	800494e <HAL_DMA_Abort+0x58a>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a3b      	ldr	r2, [pc, #236]	; (80049d4 <HAL_DMA_Abort+0x610>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d031      	beq.n	800494e <HAL_DMA_Abort+0x58a>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a3a      	ldr	r2, [pc, #232]	; (80049d8 <HAL_DMA_Abort+0x614>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d02c      	beq.n	800494e <HAL_DMA_Abort+0x58a>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a38      	ldr	r2, [pc, #224]	; (80049dc <HAL_DMA_Abort+0x618>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d027      	beq.n	800494e <HAL_DMA_Abort+0x58a>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a37      	ldr	r2, [pc, #220]	; (80049e0 <HAL_DMA_Abort+0x61c>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d022      	beq.n	800494e <HAL_DMA_Abort+0x58a>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a35      	ldr	r2, [pc, #212]	; (80049e4 <HAL_DMA_Abort+0x620>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d01d      	beq.n	800494e <HAL_DMA_Abort+0x58a>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a34      	ldr	r2, [pc, #208]	; (80049e8 <HAL_DMA_Abort+0x624>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d018      	beq.n	800494e <HAL_DMA_Abort+0x58a>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a32      	ldr	r2, [pc, #200]	; (80049ec <HAL_DMA_Abort+0x628>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d013      	beq.n	800494e <HAL_DMA_Abort+0x58a>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a31      	ldr	r2, [pc, #196]	; (80049f0 <HAL_DMA_Abort+0x62c>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d00e      	beq.n	800494e <HAL_DMA_Abort+0x58a>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a2f      	ldr	r2, [pc, #188]	; (80049f4 <HAL_DMA_Abort+0x630>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d009      	beq.n	800494e <HAL_DMA_Abort+0x58a>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a2e      	ldr	r2, [pc, #184]	; (80049f8 <HAL_DMA_Abort+0x634>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d004      	beq.n	800494e <HAL_DMA_Abort+0x58a>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a2c      	ldr	r2, [pc, #176]	; (80049fc <HAL_DMA_Abort+0x638>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d101      	bne.n	8004952 <HAL_DMA_Abort+0x58e>
 800494e:	2301      	movs	r3, #1
 8004950:	e000      	b.n	8004954 <HAL_DMA_Abort+0x590>
 8004952:	2300      	movs	r3, #0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d015      	beq.n	8004984 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004960:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004966:	2b00      	cmp	r3, #0
 8004968:	d00c      	beq.n	8004984 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004974:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004978:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004982:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3718      	adds	r7, #24
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	40020010 	.word	0x40020010
 80049a4:	40020028 	.word	0x40020028
 80049a8:	40020040 	.word	0x40020040
 80049ac:	40020058 	.word	0x40020058
 80049b0:	40020070 	.word	0x40020070
 80049b4:	40020088 	.word	0x40020088
 80049b8:	400200a0 	.word	0x400200a0
 80049bc:	400200b8 	.word	0x400200b8
 80049c0:	40020410 	.word	0x40020410
 80049c4:	40020428 	.word	0x40020428
 80049c8:	40020440 	.word	0x40020440
 80049cc:	40020458 	.word	0x40020458
 80049d0:	40020470 	.word	0x40020470
 80049d4:	40020488 	.word	0x40020488
 80049d8:	400204a0 	.word	0x400204a0
 80049dc:	400204b8 	.word	0x400204b8
 80049e0:	58025408 	.word	0x58025408
 80049e4:	5802541c 	.word	0x5802541c
 80049e8:	58025430 	.word	0x58025430
 80049ec:	58025444 	.word	0x58025444
 80049f0:	58025458 	.word	0x58025458
 80049f4:	5802546c 	.word	0x5802546c
 80049f8:	58025480 	.word	0x58025480
 80049fc:	58025494 	.word	0x58025494

08004a00 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d101      	bne.n	8004a12 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e237      	b.n	8004e82 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d004      	beq.n	8004a28 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2280      	movs	r2, #128	; 0x80
 8004a22:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e22c      	b.n	8004e82 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a5c      	ldr	r2, [pc, #368]	; (8004ba0 <HAL_DMA_Abort_IT+0x1a0>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d04a      	beq.n	8004ac8 <HAL_DMA_Abort_IT+0xc8>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a5b      	ldr	r2, [pc, #364]	; (8004ba4 <HAL_DMA_Abort_IT+0x1a4>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d045      	beq.n	8004ac8 <HAL_DMA_Abort_IT+0xc8>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a59      	ldr	r2, [pc, #356]	; (8004ba8 <HAL_DMA_Abort_IT+0x1a8>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d040      	beq.n	8004ac8 <HAL_DMA_Abort_IT+0xc8>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a58      	ldr	r2, [pc, #352]	; (8004bac <HAL_DMA_Abort_IT+0x1ac>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d03b      	beq.n	8004ac8 <HAL_DMA_Abort_IT+0xc8>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a56      	ldr	r2, [pc, #344]	; (8004bb0 <HAL_DMA_Abort_IT+0x1b0>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d036      	beq.n	8004ac8 <HAL_DMA_Abort_IT+0xc8>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a55      	ldr	r2, [pc, #340]	; (8004bb4 <HAL_DMA_Abort_IT+0x1b4>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d031      	beq.n	8004ac8 <HAL_DMA_Abort_IT+0xc8>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a53      	ldr	r2, [pc, #332]	; (8004bb8 <HAL_DMA_Abort_IT+0x1b8>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d02c      	beq.n	8004ac8 <HAL_DMA_Abort_IT+0xc8>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a52      	ldr	r2, [pc, #328]	; (8004bbc <HAL_DMA_Abort_IT+0x1bc>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d027      	beq.n	8004ac8 <HAL_DMA_Abort_IT+0xc8>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a50      	ldr	r2, [pc, #320]	; (8004bc0 <HAL_DMA_Abort_IT+0x1c0>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d022      	beq.n	8004ac8 <HAL_DMA_Abort_IT+0xc8>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a4f      	ldr	r2, [pc, #316]	; (8004bc4 <HAL_DMA_Abort_IT+0x1c4>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d01d      	beq.n	8004ac8 <HAL_DMA_Abort_IT+0xc8>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a4d      	ldr	r2, [pc, #308]	; (8004bc8 <HAL_DMA_Abort_IT+0x1c8>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d018      	beq.n	8004ac8 <HAL_DMA_Abort_IT+0xc8>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a4c      	ldr	r2, [pc, #304]	; (8004bcc <HAL_DMA_Abort_IT+0x1cc>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d013      	beq.n	8004ac8 <HAL_DMA_Abort_IT+0xc8>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a4a      	ldr	r2, [pc, #296]	; (8004bd0 <HAL_DMA_Abort_IT+0x1d0>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d00e      	beq.n	8004ac8 <HAL_DMA_Abort_IT+0xc8>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a49      	ldr	r2, [pc, #292]	; (8004bd4 <HAL_DMA_Abort_IT+0x1d4>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d009      	beq.n	8004ac8 <HAL_DMA_Abort_IT+0xc8>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a47      	ldr	r2, [pc, #284]	; (8004bd8 <HAL_DMA_Abort_IT+0x1d8>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d004      	beq.n	8004ac8 <HAL_DMA_Abort_IT+0xc8>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a46      	ldr	r2, [pc, #280]	; (8004bdc <HAL_DMA_Abort_IT+0x1dc>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d101      	bne.n	8004acc <HAL_DMA_Abort_IT+0xcc>
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e000      	b.n	8004ace <HAL_DMA_Abort_IT+0xce>
 8004acc:	2300      	movs	r3, #0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	f000 8086 	beq.w	8004be0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2204      	movs	r2, #4
 8004ad8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a2f      	ldr	r2, [pc, #188]	; (8004ba0 <HAL_DMA_Abort_IT+0x1a0>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d04a      	beq.n	8004b7c <HAL_DMA_Abort_IT+0x17c>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a2e      	ldr	r2, [pc, #184]	; (8004ba4 <HAL_DMA_Abort_IT+0x1a4>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d045      	beq.n	8004b7c <HAL_DMA_Abort_IT+0x17c>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a2c      	ldr	r2, [pc, #176]	; (8004ba8 <HAL_DMA_Abort_IT+0x1a8>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d040      	beq.n	8004b7c <HAL_DMA_Abort_IT+0x17c>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a2b      	ldr	r2, [pc, #172]	; (8004bac <HAL_DMA_Abort_IT+0x1ac>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d03b      	beq.n	8004b7c <HAL_DMA_Abort_IT+0x17c>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a29      	ldr	r2, [pc, #164]	; (8004bb0 <HAL_DMA_Abort_IT+0x1b0>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d036      	beq.n	8004b7c <HAL_DMA_Abort_IT+0x17c>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a28      	ldr	r2, [pc, #160]	; (8004bb4 <HAL_DMA_Abort_IT+0x1b4>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d031      	beq.n	8004b7c <HAL_DMA_Abort_IT+0x17c>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a26      	ldr	r2, [pc, #152]	; (8004bb8 <HAL_DMA_Abort_IT+0x1b8>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d02c      	beq.n	8004b7c <HAL_DMA_Abort_IT+0x17c>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a25      	ldr	r2, [pc, #148]	; (8004bbc <HAL_DMA_Abort_IT+0x1bc>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d027      	beq.n	8004b7c <HAL_DMA_Abort_IT+0x17c>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a23      	ldr	r2, [pc, #140]	; (8004bc0 <HAL_DMA_Abort_IT+0x1c0>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d022      	beq.n	8004b7c <HAL_DMA_Abort_IT+0x17c>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a22      	ldr	r2, [pc, #136]	; (8004bc4 <HAL_DMA_Abort_IT+0x1c4>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d01d      	beq.n	8004b7c <HAL_DMA_Abort_IT+0x17c>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a20      	ldr	r2, [pc, #128]	; (8004bc8 <HAL_DMA_Abort_IT+0x1c8>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d018      	beq.n	8004b7c <HAL_DMA_Abort_IT+0x17c>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a1f      	ldr	r2, [pc, #124]	; (8004bcc <HAL_DMA_Abort_IT+0x1cc>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d013      	beq.n	8004b7c <HAL_DMA_Abort_IT+0x17c>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a1d      	ldr	r2, [pc, #116]	; (8004bd0 <HAL_DMA_Abort_IT+0x1d0>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d00e      	beq.n	8004b7c <HAL_DMA_Abort_IT+0x17c>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a1c      	ldr	r2, [pc, #112]	; (8004bd4 <HAL_DMA_Abort_IT+0x1d4>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d009      	beq.n	8004b7c <HAL_DMA_Abort_IT+0x17c>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a1a      	ldr	r2, [pc, #104]	; (8004bd8 <HAL_DMA_Abort_IT+0x1d8>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d004      	beq.n	8004b7c <HAL_DMA_Abort_IT+0x17c>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a19      	ldr	r2, [pc, #100]	; (8004bdc <HAL_DMA_Abort_IT+0x1dc>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d108      	bne.n	8004b8e <HAL_DMA_Abort_IT+0x18e>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f022 0201 	bic.w	r2, r2, #1
 8004b8a:	601a      	str	r2, [r3, #0]
 8004b8c:	e178      	b.n	8004e80 <HAL_DMA_Abort_IT+0x480>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f022 0201 	bic.w	r2, r2, #1
 8004b9c:	601a      	str	r2, [r3, #0]
 8004b9e:	e16f      	b.n	8004e80 <HAL_DMA_Abort_IT+0x480>
 8004ba0:	40020010 	.word	0x40020010
 8004ba4:	40020028 	.word	0x40020028
 8004ba8:	40020040 	.word	0x40020040
 8004bac:	40020058 	.word	0x40020058
 8004bb0:	40020070 	.word	0x40020070
 8004bb4:	40020088 	.word	0x40020088
 8004bb8:	400200a0 	.word	0x400200a0
 8004bbc:	400200b8 	.word	0x400200b8
 8004bc0:	40020410 	.word	0x40020410
 8004bc4:	40020428 	.word	0x40020428
 8004bc8:	40020440 	.word	0x40020440
 8004bcc:	40020458 	.word	0x40020458
 8004bd0:	40020470 	.word	0x40020470
 8004bd4:	40020488 	.word	0x40020488
 8004bd8:	400204a0 	.word	0x400204a0
 8004bdc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f022 020e 	bic.w	r2, r2, #14
 8004bee:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a6c      	ldr	r2, [pc, #432]	; (8004da8 <HAL_DMA_Abort_IT+0x3a8>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d04a      	beq.n	8004c90 <HAL_DMA_Abort_IT+0x290>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a6b      	ldr	r2, [pc, #428]	; (8004dac <HAL_DMA_Abort_IT+0x3ac>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d045      	beq.n	8004c90 <HAL_DMA_Abort_IT+0x290>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a69      	ldr	r2, [pc, #420]	; (8004db0 <HAL_DMA_Abort_IT+0x3b0>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d040      	beq.n	8004c90 <HAL_DMA_Abort_IT+0x290>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a68      	ldr	r2, [pc, #416]	; (8004db4 <HAL_DMA_Abort_IT+0x3b4>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d03b      	beq.n	8004c90 <HAL_DMA_Abort_IT+0x290>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a66      	ldr	r2, [pc, #408]	; (8004db8 <HAL_DMA_Abort_IT+0x3b8>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d036      	beq.n	8004c90 <HAL_DMA_Abort_IT+0x290>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a65      	ldr	r2, [pc, #404]	; (8004dbc <HAL_DMA_Abort_IT+0x3bc>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d031      	beq.n	8004c90 <HAL_DMA_Abort_IT+0x290>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a63      	ldr	r2, [pc, #396]	; (8004dc0 <HAL_DMA_Abort_IT+0x3c0>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d02c      	beq.n	8004c90 <HAL_DMA_Abort_IT+0x290>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a62      	ldr	r2, [pc, #392]	; (8004dc4 <HAL_DMA_Abort_IT+0x3c4>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d027      	beq.n	8004c90 <HAL_DMA_Abort_IT+0x290>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a60      	ldr	r2, [pc, #384]	; (8004dc8 <HAL_DMA_Abort_IT+0x3c8>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d022      	beq.n	8004c90 <HAL_DMA_Abort_IT+0x290>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a5f      	ldr	r2, [pc, #380]	; (8004dcc <HAL_DMA_Abort_IT+0x3cc>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d01d      	beq.n	8004c90 <HAL_DMA_Abort_IT+0x290>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a5d      	ldr	r2, [pc, #372]	; (8004dd0 <HAL_DMA_Abort_IT+0x3d0>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d018      	beq.n	8004c90 <HAL_DMA_Abort_IT+0x290>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a5c      	ldr	r2, [pc, #368]	; (8004dd4 <HAL_DMA_Abort_IT+0x3d4>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d013      	beq.n	8004c90 <HAL_DMA_Abort_IT+0x290>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a5a      	ldr	r2, [pc, #360]	; (8004dd8 <HAL_DMA_Abort_IT+0x3d8>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d00e      	beq.n	8004c90 <HAL_DMA_Abort_IT+0x290>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a59      	ldr	r2, [pc, #356]	; (8004ddc <HAL_DMA_Abort_IT+0x3dc>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d009      	beq.n	8004c90 <HAL_DMA_Abort_IT+0x290>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a57      	ldr	r2, [pc, #348]	; (8004de0 <HAL_DMA_Abort_IT+0x3e0>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d004      	beq.n	8004c90 <HAL_DMA_Abort_IT+0x290>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a56      	ldr	r2, [pc, #344]	; (8004de4 <HAL_DMA_Abort_IT+0x3e4>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d108      	bne.n	8004ca2 <HAL_DMA_Abort_IT+0x2a2>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f022 0201 	bic.w	r2, r2, #1
 8004c9e:	601a      	str	r2, [r3, #0]
 8004ca0:	e007      	b.n	8004cb2 <HAL_DMA_Abort_IT+0x2b2>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f022 0201 	bic.w	r2, r2, #1
 8004cb0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a3c      	ldr	r2, [pc, #240]	; (8004da8 <HAL_DMA_Abort_IT+0x3a8>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d072      	beq.n	8004da2 <HAL_DMA_Abort_IT+0x3a2>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a3a      	ldr	r2, [pc, #232]	; (8004dac <HAL_DMA_Abort_IT+0x3ac>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d06d      	beq.n	8004da2 <HAL_DMA_Abort_IT+0x3a2>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a39      	ldr	r2, [pc, #228]	; (8004db0 <HAL_DMA_Abort_IT+0x3b0>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d068      	beq.n	8004da2 <HAL_DMA_Abort_IT+0x3a2>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a37      	ldr	r2, [pc, #220]	; (8004db4 <HAL_DMA_Abort_IT+0x3b4>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d063      	beq.n	8004da2 <HAL_DMA_Abort_IT+0x3a2>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a36      	ldr	r2, [pc, #216]	; (8004db8 <HAL_DMA_Abort_IT+0x3b8>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d05e      	beq.n	8004da2 <HAL_DMA_Abort_IT+0x3a2>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a34      	ldr	r2, [pc, #208]	; (8004dbc <HAL_DMA_Abort_IT+0x3bc>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d059      	beq.n	8004da2 <HAL_DMA_Abort_IT+0x3a2>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a33      	ldr	r2, [pc, #204]	; (8004dc0 <HAL_DMA_Abort_IT+0x3c0>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d054      	beq.n	8004da2 <HAL_DMA_Abort_IT+0x3a2>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a31      	ldr	r2, [pc, #196]	; (8004dc4 <HAL_DMA_Abort_IT+0x3c4>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d04f      	beq.n	8004da2 <HAL_DMA_Abort_IT+0x3a2>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a30      	ldr	r2, [pc, #192]	; (8004dc8 <HAL_DMA_Abort_IT+0x3c8>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d04a      	beq.n	8004da2 <HAL_DMA_Abort_IT+0x3a2>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a2e      	ldr	r2, [pc, #184]	; (8004dcc <HAL_DMA_Abort_IT+0x3cc>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d045      	beq.n	8004da2 <HAL_DMA_Abort_IT+0x3a2>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a2d      	ldr	r2, [pc, #180]	; (8004dd0 <HAL_DMA_Abort_IT+0x3d0>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d040      	beq.n	8004da2 <HAL_DMA_Abort_IT+0x3a2>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a2b      	ldr	r2, [pc, #172]	; (8004dd4 <HAL_DMA_Abort_IT+0x3d4>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d03b      	beq.n	8004da2 <HAL_DMA_Abort_IT+0x3a2>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a2a      	ldr	r2, [pc, #168]	; (8004dd8 <HAL_DMA_Abort_IT+0x3d8>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d036      	beq.n	8004da2 <HAL_DMA_Abort_IT+0x3a2>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a28      	ldr	r2, [pc, #160]	; (8004ddc <HAL_DMA_Abort_IT+0x3dc>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d031      	beq.n	8004da2 <HAL_DMA_Abort_IT+0x3a2>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a27      	ldr	r2, [pc, #156]	; (8004de0 <HAL_DMA_Abort_IT+0x3e0>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d02c      	beq.n	8004da2 <HAL_DMA_Abort_IT+0x3a2>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a25      	ldr	r2, [pc, #148]	; (8004de4 <HAL_DMA_Abort_IT+0x3e4>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d027      	beq.n	8004da2 <HAL_DMA_Abort_IT+0x3a2>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a24      	ldr	r2, [pc, #144]	; (8004de8 <HAL_DMA_Abort_IT+0x3e8>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d022      	beq.n	8004da2 <HAL_DMA_Abort_IT+0x3a2>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a22      	ldr	r2, [pc, #136]	; (8004dec <HAL_DMA_Abort_IT+0x3ec>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d01d      	beq.n	8004da2 <HAL_DMA_Abort_IT+0x3a2>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a21      	ldr	r2, [pc, #132]	; (8004df0 <HAL_DMA_Abort_IT+0x3f0>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d018      	beq.n	8004da2 <HAL_DMA_Abort_IT+0x3a2>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a1f      	ldr	r2, [pc, #124]	; (8004df4 <HAL_DMA_Abort_IT+0x3f4>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d013      	beq.n	8004da2 <HAL_DMA_Abort_IT+0x3a2>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a1e      	ldr	r2, [pc, #120]	; (8004df8 <HAL_DMA_Abort_IT+0x3f8>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d00e      	beq.n	8004da2 <HAL_DMA_Abort_IT+0x3a2>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a1c      	ldr	r2, [pc, #112]	; (8004dfc <HAL_DMA_Abort_IT+0x3fc>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d009      	beq.n	8004da2 <HAL_DMA_Abort_IT+0x3a2>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a1b      	ldr	r2, [pc, #108]	; (8004e00 <HAL_DMA_Abort_IT+0x400>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d004      	beq.n	8004da2 <HAL_DMA_Abort_IT+0x3a2>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a19      	ldr	r2, [pc, #100]	; (8004e04 <HAL_DMA_Abort_IT+0x404>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d132      	bne.n	8004e08 <HAL_DMA_Abort_IT+0x408>
 8004da2:	2301      	movs	r3, #1
 8004da4:	e031      	b.n	8004e0a <HAL_DMA_Abort_IT+0x40a>
 8004da6:	bf00      	nop
 8004da8:	40020010 	.word	0x40020010
 8004dac:	40020028 	.word	0x40020028
 8004db0:	40020040 	.word	0x40020040
 8004db4:	40020058 	.word	0x40020058
 8004db8:	40020070 	.word	0x40020070
 8004dbc:	40020088 	.word	0x40020088
 8004dc0:	400200a0 	.word	0x400200a0
 8004dc4:	400200b8 	.word	0x400200b8
 8004dc8:	40020410 	.word	0x40020410
 8004dcc:	40020428 	.word	0x40020428
 8004dd0:	40020440 	.word	0x40020440
 8004dd4:	40020458 	.word	0x40020458
 8004dd8:	40020470 	.word	0x40020470
 8004ddc:	40020488 	.word	0x40020488
 8004de0:	400204a0 	.word	0x400204a0
 8004de4:	400204b8 	.word	0x400204b8
 8004de8:	58025408 	.word	0x58025408
 8004dec:	5802541c 	.word	0x5802541c
 8004df0:	58025430 	.word	0x58025430
 8004df4:	58025444 	.word	0x58025444
 8004df8:	58025458 	.word	0x58025458
 8004dfc:	5802546c 	.word	0x5802546c
 8004e00:	58025480 	.word	0x58025480
 8004e04:	58025494 	.word	0x58025494
 8004e08:	2300      	movs	r3, #0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d028      	beq.n	8004e60 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e1c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e22:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e28:	f003 031f 	and.w	r3, r3, #31
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	409a      	lsls	r2, r3
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004e3c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d00c      	beq.n	8004e60 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e54:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004e5e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d003      	beq.n	8004e80 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004e80:	2300      	movs	r3, #0
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3710      	adds	r7, #16
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop

08004e8c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d101      	bne.n	8004e9e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e0cf      	b.n	800503e <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d106      	bne.n	8004eb6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2223      	movs	r2, #35	; 0x23
 8004eac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f7fd f87d 	bl	8001fb0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004eb6:	4b64      	ldr	r3, [pc, #400]	; (8005048 <HAL_ETH_Init+0x1bc>)
 8004eb8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004ebc:	4a62      	ldr	r2, [pc, #392]	; (8005048 <HAL_ETH_Init+0x1bc>)
 8004ebe:	f043 0302 	orr.w	r3, r3, #2
 8004ec2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004ec6:	4b60      	ldr	r3, [pc, #384]	; (8005048 <HAL_ETH_Init+0x1bc>)
 8004ec8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004ecc:	f003 0302 	and.w	r3, r3, #2
 8004ed0:	60bb      	str	r3, [r7, #8]
 8004ed2:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	7a1b      	ldrb	r3, [r3, #8]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d103      	bne.n	8004ee4 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8004edc:	2000      	movs	r0, #0
 8004ede:	f7fe f8a9 	bl	8003034 <HAL_SYSCFG_ETHInterfaceSelect>
 8004ee2:	e003      	b.n	8004eec <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8004ee4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8004ee8:	f7fe f8a4 	bl	8003034 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8004eec:	4b57      	ldr	r3, [pc, #348]	; (800504c <HAL_ETH_Init+0x1c0>)
 8004eee:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	6812      	ldr	r2, [r2, #0]
 8004efe:	f043 0301 	orr.w	r3, r3, #1
 8004f02:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004f06:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f08:	f7fe f858 	bl	8002fbc <HAL_GetTick>
 8004f0c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004f0e:	e011      	b.n	8004f34 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004f10:	f7fe f854 	bl	8002fbc <HAL_GetTick>
 8004f14:	4602      	mov	r2, r0
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004f1e:	d909      	bls.n	8004f34 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2204      	movs	r2, #4
 8004f24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	22e0      	movs	r2, #224	; 0xe0
 8004f2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e084      	b.n	800503e <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 0301 	and.w	r3, r3, #1
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d1e4      	bne.n	8004f10 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 f886 	bl	8005058 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004f4c:	f002 fcb4 	bl	80078b8 <HAL_RCC_GetHCLKFreq>
 8004f50:	4603      	mov	r3, r0
 8004f52:	4a3f      	ldr	r2, [pc, #252]	; (8005050 <HAL_ETH_Init+0x1c4>)
 8004f54:	fba2 2303 	umull	r2, r3, r2, r3
 8004f58:	0c9a      	lsrs	r2, r3, #18
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	3a01      	subs	r2, #1
 8004f60:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f000 fa71 	bl	800544c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f72:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004f76:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	6812      	ldr	r2, [r2, #0]
 8004f7e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f82:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004f86:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	695b      	ldr	r3, [r3, #20]
 8004f8e:	f003 0303 	and.w	r3, r3, #3
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d009      	beq.n	8004faa <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2201      	movs	r2, #1
 8004f9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	22e0      	movs	r2, #224	; 0xe0
 8004fa2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e049      	b.n	800503e <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fb2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8004fb6:	4b27      	ldr	r3, [pc, #156]	; (8005054 <HAL_ETH_Init+0x1c8>)
 8004fb8:	4013      	ands	r3, r2
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	6952      	ldr	r2, [r2, #20]
 8004fbe:	0051      	lsls	r1, r2, #1
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	6812      	ldr	r2, [r2, #0]
 8004fc4:	430b      	orrs	r3, r1
 8004fc6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004fca:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f000 fad9 	bl	8005586 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f000 fb1f 	bl	8005618 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	3305      	adds	r3, #5
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	021a      	lsls	r2, r3, #8
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	3304      	adds	r3, #4
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	4619      	mov	r1, r3
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	430a      	orrs	r2, r1
 8004ff4:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	3303      	adds	r3, #3
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	061a      	lsls	r2, r3, #24
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	3302      	adds	r3, #2
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	041b      	lsls	r3, r3, #16
 800500c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	3301      	adds	r3, #1
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005018:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005026:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005028:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2210      	movs	r2, #16
 8005038:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800503c:	2300      	movs	r3, #0
}
 800503e:	4618      	mov	r0, r3
 8005040:	3710      	adds	r7, #16
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	58024400 	.word	0x58024400
 800504c:	58000400 	.word	0x58000400
 8005050:	431bde83 	.word	0x431bde83
 8005054:	ffff8001 	.word	0xffff8001

08005058 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005068:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005070:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8005072:	f002 fc21 	bl	80078b8 <HAL_RCC_GetHCLKFreq>
 8005076:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	4a1e      	ldr	r2, [pc, #120]	; (80050f4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d908      	bls.n	8005092 <HAL_ETH_SetMDIOClockRange+0x3a>
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	4a1d      	ldr	r2, [pc, #116]	; (80050f8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d804      	bhi.n	8005092 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800508e:	60fb      	str	r3, [r7, #12]
 8005090:	e027      	b.n	80050e2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	4a18      	ldr	r2, [pc, #96]	; (80050f8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d908      	bls.n	80050ac <HAL_ETH_SetMDIOClockRange+0x54>
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	4a17      	ldr	r2, [pc, #92]	; (80050fc <HAL_ETH_SetMDIOClockRange+0xa4>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d204      	bcs.n	80050ac <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80050a8:	60fb      	str	r3, [r7, #12]
 80050aa:	e01a      	b.n	80050e2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	4a13      	ldr	r2, [pc, #76]	; (80050fc <HAL_ETH_SetMDIOClockRange+0xa4>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d303      	bcc.n	80050bc <HAL_ETH_SetMDIOClockRange+0x64>
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	4a12      	ldr	r2, [pc, #72]	; (8005100 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d911      	bls.n	80050e0 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	4a10      	ldr	r2, [pc, #64]	; (8005100 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d908      	bls.n	80050d6 <HAL_ETH_SetMDIOClockRange+0x7e>
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	4a0f      	ldr	r2, [pc, #60]	; (8005104 <HAL_ETH_SetMDIOClockRange+0xac>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d804      	bhi.n	80050d6 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050d2:	60fb      	str	r3, [r7, #12]
 80050d4:	e005      	b.n	80050e2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80050dc:	60fb      	str	r3, [r7, #12]
 80050de:	e000      	b.n	80050e2 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80050e0:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	68fa      	ldr	r2, [r7, #12]
 80050e8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80050ec:	bf00      	nop
 80050ee:	3710      	adds	r7, #16
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	01312cff 	.word	0x01312cff
 80050f8:	02160ebf 	.word	0x02160ebf
 80050fc:	03938700 	.word	0x03938700
 8005100:	05f5e0ff 	.word	0x05f5e0ff
 8005104:	08f0d17f 	.word	0x08f0d17f

08005108 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8005108:	b480      	push	{r7}
 800510a:	b085      	sub	sp, #20
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800511a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	791b      	ldrb	r3, [r3, #4]
 8005120:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8005122:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	7b1b      	ldrb	r3, [r3, #12]
 8005128:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800512a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	7b5b      	ldrb	r3, [r3, #13]
 8005130:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005132:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	7b9b      	ldrb	r3, [r3, #14]
 8005138:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800513a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	7bdb      	ldrb	r3, [r3, #15]
 8005140:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005142:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005144:	683a      	ldr	r2, [r7, #0]
 8005146:	7c12      	ldrb	r2, [r2, #16]
 8005148:	2a00      	cmp	r2, #0
 800514a:	d102      	bne.n	8005152 <ETH_SetMACConfig+0x4a>
 800514c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005150:	e000      	b.n	8005154 <ETH_SetMACConfig+0x4c>
 8005152:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005154:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005156:	683a      	ldr	r2, [r7, #0]
 8005158:	7c52      	ldrb	r2, [r2, #17]
 800515a:	2a00      	cmp	r2, #0
 800515c:	d102      	bne.n	8005164 <ETH_SetMACConfig+0x5c>
 800515e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005162:	e000      	b.n	8005166 <ETH_SetMACConfig+0x5e>
 8005164:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005166:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	7c9b      	ldrb	r3, [r3, #18]
 800516c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800516e:	431a      	orrs	r2, r3
               macconf->Speed |
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8005174:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800517a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	7f1b      	ldrb	r3, [r3, #28]
 8005180:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8005182:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	7f5b      	ldrb	r3, [r3, #29]
 8005188:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800518a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800518c:	683a      	ldr	r2, [r7, #0]
 800518e:	7f92      	ldrb	r2, [r2, #30]
 8005190:	2a00      	cmp	r2, #0
 8005192:	d102      	bne.n	800519a <ETH_SetMACConfig+0x92>
 8005194:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005198:	e000      	b.n	800519c <ETH_SetMACConfig+0x94>
 800519a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800519c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	7fdb      	ldrb	r3, [r3, #31]
 80051a2:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80051a4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80051a6:	683a      	ldr	r2, [r7, #0]
 80051a8:	f892 2020 	ldrb.w	r2, [r2, #32]
 80051ac:	2a00      	cmp	r2, #0
 80051ae:	d102      	bne.n	80051b6 <ETH_SetMACConfig+0xae>
 80051b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80051b4:	e000      	b.n	80051b8 <ETH_SetMACConfig+0xb0>
 80051b6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80051b8:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80051be:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80051c6:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80051c8:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80051ce:	4313      	orrs	r3, r2
 80051d0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	4b56      	ldr	r3, [pc, #344]	; (8005334 <ETH_SetMACConfig+0x22c>)
 80051da:	4013      	ands	r3, r2
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	6812      	ldr	r2, [r2, #0]
 80051e0:	68f9      	ldr	r1, [r7, #12]
 80051e2:	430b      	orrs	r3, r1
 80051e4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ea:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80051f2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80051f4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80051fc:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80051fe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005206:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8005208:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800520a:	683a      	ldr	r2, [r7, #0]
 800520c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8005210:	2a00      	cmp	r2, #0
 8005212:	d102      	bne.n	800521a <ETH_SetMACConfig+0x112>
 8005214:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005218:	e000      	b.n	800521c <ETH_SetMACConfig+0x114>
 800521a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800521c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005222:	4313      	orrs	r3, r2
 8005224:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	685a      	ldr	r2, [r3, #4]
 800522c:	4b42      	ldr	r3, [pc, #264]	; (8005338 <ETH_SetMACConfig+0x230>)
 800522e:	4013      	ands	r3, r2
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	6812      	ldr	r2, [r2, #0]
 8005234:	68f9      	ldr	r1, [r7, #12]
 8005236:	430b      	orrs	r3, r1
 8005238:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005240:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005246:	4313      	orrs	r3, r2
 8005248:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68da      	ldr	r2, [r3, #12]
 8005250:	4b3a      	ldr	r3, [pc, #232]	; (800533c <ETH_SetMACConfig+0x234>)
 8005252:	4013      	ands	r3, r2
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	6812      	ldr	r2, [r2, #0]
 8005258:	68f9      	ldr	r1, [r7, #12]
 800525a:	430b      	orrs	r3, r1
 800525c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005264:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800526a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800526c:	683a      	ldr	r2, [r7, #0]
 800526e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8005272:	2a00      	cmp	r2, #0
 8005274:	d101      	bne.n	800527a <ETH_SetMACConfig+0x172>
 8005276:	2280      	movs	r2, #128	; 0x80
 8005278:	e000      	b.n	800527c <ETH_SetMACConfig+0x174>
 800527a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800527c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005282:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005284:	4313      	orrs	r3, r2
 8005286:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800528e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8005292:	4013      	ands	r3, r2
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	6812      	ldr	r2, [r2, #0]
 8005298:	68f9      	ldr	r1, [r7, #12]
 800529a:	430b      	orrs	r3, r1
 800529c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80052a4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80052ac:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80052ae:	4313      	orrs	r3, r2
 80052b0:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052ba:	f023 0103 	bic.w	r1, r3, #3
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	430a      	orrs	r2, r1
 80052c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80052d2:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	430a      	orrs	r2, r1
 80052e0:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80052e8:	683a      	ldr	r2, [r7, #0]
 80052ea:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80052ee:	2a00      	cmp	r2, #0
 80052f0:	d101      	bne.n	80052f6 <ETH_SetMACConfig+0x1ee>
 80052f2:	2240      	movs	r2, #64	; 0x40
 80052f4:	e000      	b.n	80052f8 <ETH_SetMACConfig+0x1f0>
 80052f6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80052f8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005300:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005302:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800530a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800530c:	4313      	orrs	r3, r2
 800530e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8005318:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	430a      	orrs	r2, r1
 8005324:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8005328:	bf00      	nop
 800532a:	3714      	adds	r7, #20
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr
 8005334:	00048083 	.word	0x00048083
 8005338:	c0f88000 	.word	0xc0f88000
 800533c:	fffffef0 	.word	0xfffffef0

08005340 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8005340:	b480      	push	{r7}
 8005342:	b085      	sub	sp, #20
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	4b38      	ldr	r3, [pc, #224]	; (8005438 <ETH_SetDMAConfig+0xf8>)
 8005356:	4013      	ands	r3, r2
 8005358:	683a      	ldr	r2, [r7, #0]
 800535a:	6811      	ldr	r1, [r2, #0]
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	6812      	ldr	r2, [r2, #0]
 8005360:	430b      	orrs	r3, r1
 8005362:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005366:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	791b      	ldrb	r3, [r3, #4]
 800536c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005372:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	7b1b      	ldrb	r3, [r3, #12]
 8005378:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800537a:	4313      	orrs	r3, r2
 800537c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005386:	685a      	ldr	r2, [r3, #4]
 8005388:	4b2c      	ldr	r3, [pc, #176]	; (800543c <ETH_SetDMAConfig+0xfc>)
 800538a:	4013      	ands	r3, r2
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	6812      	ldr	r2, [r2, #0]
 8005390:	68f9      	ldr	r1, [r7, #12]
 8005392:	430b      	orrs	r3, r1
 8005394:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005398:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	7b5b      	ldrb	r3, [r3, #13]
 800539e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80053a4:	4313      	orrs	r3, r2
 80053a6:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053b0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80053b4:	4b22      	ldr	r3, [pc, #136]	; (8005440 <ETH_SetDMAConfig+0x100>)
 80053b6:	4013      	ands	r3, r2
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	6812      	ldr	r2, [r2, #0]
 80053bc:	68f9      	ldr	r1, [r7, #12]
 80053be:	430b      	orrs	r3, r1
 80053c0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80053c4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	7d1b      	ldrb	r3, [r3, #20]
 80053d0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80053d2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	7f5b      	ldrb	r3, [r3, #29]
 80053d8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80053da:	4313      	orrs	r3, r2
 80053dc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053e6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80053ea:	4b16      	ldr	r3, [pc, #88]	; (8005444 <ETH_SetDMAConfig+0x104>)
 80053ec:	4013      	ands	r3, r2
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	6812      	ldr	r2, [r2, #0]
 80053f2:	68f9      	ldr	r1, [r7, #12]
 80053f4:	430b      	orrs	r3, r1
 80053f6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80053fa:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	7f1b      	ldrb	r3, [r3, #28]
 8005402:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005408:	4313      	orrs	r3, r2
 800540a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005414:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8005418:	4b0b      	ldr	r3, [pc, #44]	; (8005448 <ETH_SetDMAConfig+0x108>)
 800541a:	4013      	ands	r3, r2
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	6812      	ldr	r2, [r2, #0]
 8005420:	68f9      	ldr	r1, [r7, #12]
 8005422:	430b      	orrs	r3, r1
 8005424:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005428:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 800542c:	bf00      	nop
 800542e:	3714      	adds	r7, #20
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr
 8005438:	ffff87fd 	.word	0xffff87fd
 800543c:	ffff2ffe 	.word	0xffff2ffe
 8005440:	fffec000 	.word	0xfffec000
 8005444:	ffc0efef 	.word	0xffc0efef
 8005448:	7fc0ffff 	.word	0x7fc0ffff

0800544c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b0a4      	sub	sp, #144	; 0x90
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8005454:	2301      	movs	r3, #1
 8005456:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800545a:	2300      	movs	r3, #0
 800545c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800545e:	2300      	movs	r3, #0
 8005460:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005464:	2300      	movs	r3, #0
 8005466:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800546a:	2301      	movs	r3, #1
 800546c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8005470:	2301      	movs	r3, #1
 8005472:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8005476:	2301      	movs	r3, #1
 8005478:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800547c:	2300      	movs	r3, #0
 800547e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8005482:	2301      	movs	r3, #1
 8005484:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005488:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800548c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800548e:	2300      	movs	r3, #0
 8005490:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8005494:	2300      	movs	r3, #0
 8005496:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8005498:	2300      	movs	r3, #0
 800549a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800549e:	2300      	movs	r3, #0
 80054a0:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80054a4:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80054a8:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80054aa:	2300      	movs	r3, #0
 80054ac:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80054b0:	2300      	movs	r3, #0
 80054b2:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80054b4:	2301      	movs	r3, #1
 80054b6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80054ba:	2300      	movs	r3, #0
 80054bc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80054c0:	2300      	movs	r3, #0
 80054c2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80054c6:	2300      	movs	r3, #0
 80054c8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80054ca:	2300      	movs	r3, #0
 80054cc:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80054ce:	2300      	movs	r3, #0
 80054d0:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80054d2:	2300      	movs	r3, #0
 80054d4:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80054d8:	2300      	movs	r3, #0
 80054da:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80054de:	2301      	movs	r3, #1
 80054e0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80054e4:	2320      	movs	r3, #32
 80054e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80054ea:	2301      	movs	r3, #1
 80054ec:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80054f0:	2300      	movs	r3, #0
 80054f2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80054f6:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80054fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80054fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005500:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8005502:	2300      	movs	r3, #0
 8005504:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8005508:	2302      	movs	r3, #2
 800550a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800550e:	2300      	movs	r3, #0
 8005510:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005514:	2300      	movs	r3, #0
 8005516:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800551a:	2300      	movs	r3, #0
 800551c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8005520:	2301      	movs	r3, #1
 8005522:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8005526:	2300      	movs	r3, #0
 8005528:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800552a:	2301      	movs	r3, #1
 800552c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005530:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005534:	4619      	mov	r1, r3
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f7ff fde6 	bl	8005108 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800553c:	2301      	movs	r3, #1
 800553e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005540:	2301      	movs	r3, #1
 8005542:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8005544:	2300      	movs	r3, #0
 8005546:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8005548:	2300      	movs	r3, #0
 800554a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800554e:	2300      	movs	r3, #0
 8005550:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8005552:	2300      	movs	r3, #0
 8005554:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005556:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800555a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800555c:	2300      	movs	r3, #0
 800555e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005560:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005564:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8005566:	2300      	movs	r3, #0
 8005568:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800556c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8005570:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005572:	f107 0308 	add.w	r3, r7, #8
 8005576:	4619      	mov	r1, r3
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f7ff fee1 	bl	8005340 <ETH_SetDMAConfig>
}
 800557e:	bf00      	nop
 8005580:	3790      	adds	r7, #144	; 0x90
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}

08005586 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005586:	b480      	push	{r7}
 8005588:	b085      	sub	sp, #20
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800558e:	2300      	movs	r3, #0
 8005590:	60fb      	str	r3, [r7, #12]
 8005592:	e01d      	b.n	80055d0 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	68d9      	ldr	r1, [r3, #12]
 8005598:	68fa      	ldr	r2, [r7, #12]
 800559a:	4613      	mov	r3, r2
 800559c:	005b      	lsls	r3, r3, #1
 800559e:	4413      	add	r3, r2
 80055a0:	00db      	lsls	r3, r3, #3
 80055a2:	440b      	add	r3, r1
 80055a4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	2200      	movs	r2, #0
 80055aa:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	2200      	movs	r2, #0
 80055b0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	2200      	movs	r2, #0
 80055b6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	2200      	movs	r2, #0
 80055bc:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80055be:	68b9      	ldr	r1, [r7, #8]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	3206      	adds	r2, #6
 80055c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	3301      	adds	r3, #1
 80055ce:	60fb      	str	r3, [r7, #12]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2b03      	cmp	r3, #3
 80055d4:	d9de      	bls.n	8005594 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055e4:	461a      	mov	r2, r3
 80055e6:	2303      	movs	r3, #3
 80055e8:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	68da      	ldr	r2, [r3, #12]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055f8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	68da      	ldr	r2, [r3, #12]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005608:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 800560c:	bf00      	nop
 800560e:	3714      	adds	r7, #20
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr

08005618 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005618:	b480      	push	{r7}
 800561a:	b085      	sub	sp, #20
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005620:	2300      	movs	r3, #0
 8005622:	60fb      	str	r3, [r7, #12]
 8005624:	e023      	b.n	800566e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6919      	ldr	r1, [r3, #16]
 800562a:	68fa      	ldr	r2, [r7, #12]
 800562c:	4613      	mov	r3, r2
 800562e:	005b      	lsls	r3, r3, #1
 8005630:	4413      	add	r3, r2
 8005632:	00db      	lsls	r3, r3, #3
 8005634:	440b      	add	r3, r1
 8005636:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	2200      	movs	r2, #0
 800563c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	2200      	movs	r2, #0
 8005642:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	2200      	movs	r2, #0
 8005648:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	2200      	movs	r2, #0
 800564e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	2200      	movs	r2, #0
 8005654:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	2200      	movs	r2, #0
 800565a:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800565c:	68b9      	ldr	r1, [r7, #8]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	3212      	adds	r2, #18
 8005664:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	3301      	adds	r3, #1
 800566c:	60fb      	str	r3, [r7, #12]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2b03      	cmp	r3, #3
 8005672:	d9d8      	bls.n	8005626 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800569a:	461a      	mov	r2, r3
 800569c:	2303      	movs	r3, #3
 800569e:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	691a      	ldr	r2, [r3, #16]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056ae:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056c2:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80056c6:	bf00      	nop
 80056c8:	3714      	adds	r7, #20
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr
	...

080056d4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b098      	sub	sp, #96	; 0x60
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80056dc:	4a84      	ldr	r2, [pc, #528]	; (80058f0 <HAL_FDCAN_Init+0x21c>)
 80056de:	f107 030c 	add.w	r3, r7, #12
 80056e2:	4611      	mov	r1, r2
 80056e4:	224c      	movs	r2, #76	; 0x4c
 80056e6:	4618      	mov	r0, r3
 80056e8:	f009 f968 	bl	800e9bc <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d101      	bne.n	80056f6 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e1c6      	b.n	8005a84 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a7e      	ldr	r2, [pc, #504]	; (80058f4 <HAL_FDCAN_Init+0x220>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d106      	bne.n	800570e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005708:	461a      	mov	r2, r3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005714:	b2db      	uxtb	r3, r3
 8005716:	2b00      	cmp	r3, #0
 8005718:	d106      	bne.n	8005728 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f7fc fd74 	bl	8002210 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	699a      	ldr	r2, [r3, #24]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f022 0210 	bic.w	r2, r2, #16
 8005736:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005738:	f7fd fc40 	bl	8002fbc <HAL_GetTick>
 800573c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800573e:	e014      	b.n	800576a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005740:	f7fd fc3c 	bl	8002fbc <HAL_GetTick>
 8005744:	4602      	mov	r2, r0
 8005746:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	2b0a      	cmp	r3, #10
 800574c:	d90d      	bls.n	800576a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005754:	f043 0201 	orr.w	r2, r3, #1
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2203      	movs	r2, #3
 8005762:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e18c      	b.n	8005a84 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	699b      	ldr	r3, [r3, #24]
 8005770:	f003 0308 	and.w	r3, r3, #8
 8005774:	2b08      	cmp	r3, #8
 8005776:	d0e3      	beq.n	8005740 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	699a      	ldr	r2, [r3, #24]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f042 0201 	orr.w	r2, r2, #1
 8005786:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005788:	f7fd fc18 	bl	8002fbc <HAL_GetTick>
 800578c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800578e:	e014      	b.n	80057ba <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005790:	f7fd fc14 	bl	8002fbc <HAL_GetTick>
 8005794:	4602      	mov	r2, r0
 8005796:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005798:	1ad3      	subs	r3, r2, r3
 800579a:	2b0a      	cmp	r3, #10
 800579c:	d90d      	bls.n	80057ba <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80057a4:	f043 0201 	orr.w	r2, r3, #1
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2203      	movs	r2, #3
 80057b2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e164      	b.n	8005a84 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	699b      	ldr	r3, [r3, #24]
 80057c0:	f003 0301 	and.w	r3, r3, #1
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d0e3      	beq.n	8005790 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	699a      	ldr	r2, [r3, #24]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f042 0202 	orr.w	r2, r2, #2
 80057d6:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	7c1b      	ldrb	r3, [r3, #16]
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d108      	bne.n	80057f2 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	699a      	ldr	r2, [r3, #24]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057ee:	619a      	str	r2, [r3, #24]
 80057f0:	e007      	b.n	8005802 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	699a      	ldr	r2, [r3, #24]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005800:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	7c5b      	ldrb	r3, [r3, #17]
 8005806:	2b01      	cmp	r3, #1
 8005808:	d108      	bne.n	800581c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	699a      	ldr	r2, [r3, #24]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005818:	619a      	str	r2, [r3, #24]
 800581a:	e007      	b.n	800582c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	699a      	ldr	r2, [r3, #24]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800582a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	7c9b      	ldrb	r3, [r3, #18]
 8005830:	2b01      	cmp	r3, #1
 8005832:	d108      	bne.n	8005846 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	699a      	ldr	r2, [r3, #24]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005842:	619a      	str	r2, [r3, #24]
 8005844:	e007      	b.n	8005856 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	699a      	ldr	r2, [r3, #24]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005854:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	699b      	ldr	r3, [r3, #24]
 800585c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	689a      	ldr	r2, [r3, #8]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	430a      	orrs	r2, r1
 800586a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	699a      	ldr	r2, [r3, #24]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800587a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	691a      	ldr	r2, [r3, #16]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f022 0210 	bic.w	r2, r2, #16
 800588a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	2b01      	cmp	r3, #1
 8005892:	d108      	bne.n	80058a6 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	699a      	ldr	r2, [r3, #24]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f042 0204 	orr.w	r2, r2, #4
 80058a2:	619a      	str	r2, [r3, #24]
 80058a4:	e030      	b.n	8005908 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d02c      	beq.n	8005908 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	2b02      	cmp	r3, #2
 80058b4:	d020      	beq.n	80058f8 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	699a      	ldr	r2, [r3, #24]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80058c4:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	691a      	ldr	r2, [r3, #16]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f042 0210 	orr.w	r2, r2, #16
 80058d4:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	2b03      	cmp	r3, #3
 80058dc:	d114      	bne.n	8005908 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	699a      	ldr	r2, [r3, #24]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f042 0220 	orr.w	r2, r2, #32
 80058ec:	619a      	str	r2, [r3, #24]
 80058ee:	e00b      	b.n	8005908 <HAL_FDCAN_Init+0x234>
 80058f0:	0800f3b0 	.word	0x0800f3b0
 80058f4:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	699a      	ldr	r2, [r3, #24]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f042 0220 	orr.w	r2, r2, #32
 8005906:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	699b      	ldr	r3, [r3, #24]
 800590c:	3b01      	subs	r3, #1
 800590e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	69db      	ldr	r3, [r3, #28]
 8005914:	3b01      	subs	r3, #1
 8005916:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005918:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a1b      	ldr	r3, [r3, #32]
 800591e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005920:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	695b      	ldr	r3, [r3, #20]
 8005928:	3b01      	subs	r3, #1
 800592a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005930:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005932:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800593c:	d115      	bne.n	800596a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005942:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005948:	3b01      	subs	r3, #1
 800594a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800594c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005952:	3b01      	subs	r3, #1
 8005954:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8005956:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595e:	3b01      	subs	r3, #1
 8005960:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8005966:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005968:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800596e:	2b00      	cmp	r3, #0
 8005970:	d00a      	beq.n	8005988 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	430a      	orrs	r2, r1
 8005984:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005990:	4413      	add	r3, r2
 8005992:	2b00      	cmp	r3, #0
 8005994:	d011      	beq.n	80059ba <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800599e:	f023 0107 	bic.w	r1, r3, #7
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	3360      	adds	r3, #96	; 0x60
 80059aa:	443b      	add	r3, r7
 80059ac:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	430a      	orrs	r2, r1
 80059b6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d011      	beq.n	80059e6 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80059ca:	f023 0107 	bic.w	r1, r3, #7
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	3360      	adds	r3, #96	; 0x60
 80059d6:	443b      	add	r3, r7
 80059d8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	430a      	orrs	r2, r1
 80059e2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d012      	beq.n	8005a14 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80059f6:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	3360      	adds	r3, #96	; 0x60
 8005a02:	443b      	add	r3, r7
 8005a04:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005a08:	011a      	lsls	r2, r3, #4
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	430a      	orrs	r2, r1
 8005a10:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d012      	beq.n	8005a42 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005a24:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	3360      	adds	r3, #96	; 0x60
 8005a30:	443b      	add	r3, r7
 8005a32:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005a36:	021a      	lsls	r2, r3, #8
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	430a      	orrs	r2, r1
 8005a3e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a11      	ldr	r2, [pc, #68]	; (8005a8c <HAL_FDCAN_Init+0x3b8>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d107      	bne.n	8005a5c <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	689a      	ldr	r2, [r3, #8]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	f022 0203 	bic.w	r2, r2, #3
 8005a5a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f000 f80b 	bl	8005a90 <FDCAN_CalcultateRamBlockAddresses>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8005a80:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3760      	adds	r7, #96	; 0x60
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}
 8005a8c:	4000a000 	.word	0x4000a000

08005a90 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b085      	sub	sp, #20
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a9c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005aa6:	4ba7      	ldr	r3, [pc, #668]	; (8005d44 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	68ba      	ldr	r2, [r7, #8]
 8005aac:	0091      	lsls	r1, r2, #2
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	6812      	ldr	r2, [r2, #0]
 8005ab2:	430b      	orrs	r3, r1
 8005ab4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ac0:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac8:	041a      	lsls	r2, r3, #16
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	430a      	orrs	r2, r1
 8005ad0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad8:	68ba      	ldr	r2, [r7, #8]
 8005ada:	4413      	add	r3, r2
 8005adc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005ae6:	4b97      	ldr	r3, [pc, #604]	; (8005d44 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005ae8:	4013      	ands	r3, r2
 8005aea:	68ba      	ldr	r2, [r7, #8]
 8005aec:	0091      	lsls	r1, r2, #2
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	6812      	ldr	r2, [r2, #0]
 8005af2:	430b      	orrs	r3, r1
 8005af4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b00:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b08:	041a      	lsls	r2, r3, #16
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	430a      	orrs	r2, r1
 8005b10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b18:	005b      	lsls	r3, r3, #1
 8005b1a:	68ba      	ldr	r2, [r7, #8]
 8005b1c:	4413      	add	r3, r2
 8005b1e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8005b28:	4b86      	ldr	r3, [pc, #536]	; (8005d44 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	68ba      	ldr	r2, [r7, #8]
 8005b2e:	0091      	lsls	r1, r2, #2
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	6812      	ldr	r2, [r2, #0]
 8005b34:	430b      	orrs	r3, r1
 8005b36:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005b42:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4a:	041a      	lsls	r2, r3, #16
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	430a      	orrs	r2, r1
 8005b52:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005b5e:	fb02 f303 	mul.w	r3, r2, r3
 8005b62:	68ba      	ldr	r2, [r7, #8]
 8005b64:	4413      	add	r3, r2
 8005b66:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005b70:	4b74      	ldr	r3, [pc, #464]	; (8005d44 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005b72:	4013      	ands	r3, r2
 8005b74:	68ba      	ldr	r2, [r7, #8]
 8005b76:	0091      	lsls	r1, r2, #2
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	6812      	ldr	r2, [r2, #0]
 8005b7c:	430b      	orrs	r3, r1
 8005b7e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005b8a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b92:	041a      	lsls	r2, r3, #16
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	430a      	orrs	r2, r1
 8005b9a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005ba6:	fb02 f303 	mul.w	r3, r2, r3
 8005baa:	68ba      	ldr	r2, [r7, #8]
 8005bac:	4413      	add	r3, r2
 8005bae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005bb8:	4b62      	ldr	r3, [pc, #392]	; (8005d44 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005bba:	4013      	ands	r3, r2
 8005bbc:	68ba      	ldr	r2, [r7, #8]
 8005bbe:	0091      	lsls	r1, r2, #2
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	6812      	ldr	r2, [r2, #0]
 8005bc4:	430b      	orrs	r3, r1
 8005bc6:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005bd2:	fb02 f303 	mul.w	r3, r2, r3
 8005bd6:	68ba      	ldr	r2, [r7, #8]
 8005bd8:	4413      	add	r3, r2
 8005bda:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8005be4:	4b57      	ldr	r3, [pc, #348]	; (8005d44 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005be6:	4013      	ands	r3, r2
 8005be8:	68ba      	ldr	r2, [r7, #8]
 8005bea:	0091      	lsls	r1, r2, #2
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	6812      	ldr	r2, [r2, #0]
 8005bf0:	430b      	orrs	r3, r1
 8005bf2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005bfe:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c06:	041a      	lsls	r2, r3, #16
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	430a      	orrs	r2, r1
 8005c0e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c16:	005b      	lsls	r3, r3, #1
 8005c18:	68ba      	ldr	r2, [r7, #8]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005c26:	4b47      	ldr	r3, [pc, #284]	; (8005d44 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005c28:	4013      	ands	r3, r2
 8005c2a:	68ba      	ldr	r2, [r7, #8]
 8005c2c:	0091      	lsls	r1, r2, #2
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	6812      	ldr	r2, [r2, #0]
 8005c32:	430b      	orrs	r3, r1
 8005c34:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005c40:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c48:	041a      	lsls	r2, r3, #16
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	430a      	orrs	r2, r1
 8005c50:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005c5c:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c64:	061a      	lsls	r2, r3, #24
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	430a      	orrs	r2, r1
 8005c6c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c74:	4b34      	ldr	r3, [pc, #208]	; (8005d48 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8005c76:	4413      	add	r3, r2
 8005c78:	009a      	lsls	r2, r3, #2
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	441a      	add	r2, r3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c96:	00db      	lsls	r3, r3, #3
 8005c98:	441a      	add	r2, r3
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca6:	6879      	ldr	r1, [r7, #4]
 8005ca8:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8005caa:	fb01 f303 	mul.w	r3, r1, r3
 8005cae:	009b      	lsls	r3, r3, #2
 8005cb0:	441a      	add	r2, r3
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cbe:	6879      	ldr	r1, [r7, #4]
 8005cc0:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8005cc2:	fb01 f303 	mul.w	r3, r1, r3
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	441a      	add	r2, r3
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cd6:	6879      	ldr	r1, [r7, #4]
 8005cd8:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8005cda:	fb01 f303 	mul.w	r3, r1, r3
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	441a      	add	r2, r3
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cf2:	00db      	lsls	r3, r3, #3
 8005cf4:	441a      	add	r2, r3
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d06:	6879      	ldr	r1, [r7, #4]
 8005d08:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8005d0a:	fb01 f303 	mul.w	r3, r1, r3
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	441a      	add	r2, r3
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d22:	6879      	ldr	r1, [r7, #4]
 8005d24:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8005d26:	fb01 f303 	mul.w	r3, r1, r3
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	441a      	add	r2, r3
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d3a:	4a04      	ldr	r2, [pc, #16]	; (8005d4c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d915      	bls.n	8005d6c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8005d40:	e006      	b.n	8005d50 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8005d42:	bf00      	nop
 8005d44:	ffff0003 	.word	0xffff0003
 8005d48:	10002b00 	.word	0x10002b00
 8005d4c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d56:	f043 0220 	orr.w	r2, r3, #32
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2203      	movs	r2, #3
 8005d64:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	e010      	b.n	8005d8e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d70:	60fb      	str	r3, [r7, #12]
 8005d72:	e005      	b.n	8005d80 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2200      	movs	r2, #0
 8005d78:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	3304      	adds	r3, #4
 8005d7e:	60fb      	str	r3, [r7, #12]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d86:	68fa      	ldr	r2, [r7, #12]
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d3f3      	bcc.n	8005d74 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3714      	adds	r7, #20
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop

08005d9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b089      	sub	sp, #36	; 0x24
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005da6:	2300      	movs	r3, #0
 8005da8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005daa:	4b89      	ldr	r3, [pc, #548]	; (8005fd0 <HAL_GPIO_Init+0x234>)
 8005dac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005dae:	e194      	b.n	80060da <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	2101      	movs	r1, #1
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	fa01 f303 	lsl.w	r3, r1, r3
 8005dbc:	4013      	ands	r3, r2
 8005dbe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	f000 8186 	beq.w	80060d4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	f003 0303 	and.w	r3, r3, #3
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d005      	beq.n	8005de0 <HAL_GPIO_Init+0x44>
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	f003 0303 	and.w	r3, r3, #3
 8005ddc:	2b02      	cmp	r3, #2
 8005dde:	d130      	bne.n	8005e42 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	005b      	lsls	r3, r3, #1
 8005dea:	2203      	movs	r2, #3
 8005dec:	fa02 f303 	lsl.w	r3, r2, r3
 8005df0:	43db      	mvns	r3, r3
 8005df2:	69ba      	ldr	r2, [r7, #24]
 8005df4:	4013      	ands	r3, r2
 8005df6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	68da      	ldr	r2, [r3, #12]
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	005b      	lsls	r3, r3, #1
 8005e00:	fa02 f303 	lsl.w	r3, r2, r3
 8005e04:	69ba      	ldr	r2, [r7, #24]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	69ba      	ldr	r2, [r7, #24]
 8005e0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005e16:	2201      	movs	r2, #1
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e1e:	43db      	mvns	r3, r3
 8005e20:	69ba      	ldr	r2, [r7, #24]
 8005e22:	4013      	ands	r3, r2
 8005e24:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	091b      	lsrs	r3, r3, #4
 8005e2c:	f003 0201 	and.w	r2, r3, #1
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	fa02 f303 	lsl.w	r3, r2, r3
 8005e36:	69ba      	ldr	r2, [r7, #24]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	69ba      	ldr	r2, [r7, #24]
 8005e40:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	f003 0303 	and.w	r3, r3, #3
 8005e4a:	2b03      	cmp	r3, #3
 8005e4c:	d017      	beq.n	8005e7e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005e54:	69fb      	ldr	r3, [r7, #28]
 8005e56:	005b      	lsls	r3, r3, #1
 8005e58:	2203      	movs	r2, #3
 8005e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e5e:	43db      	mvns	r3, r3
 8005e60:	69ba      	ldr	r2, [r7, #24]
 8005e62:	4013      	ands	r3, r2
 8005e64:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	689a      	ldr	r2, [r3, #8]
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	005b      	lsls	r3, r3, #1
 8005e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e72:	69ba      	ldr	r2, [r7, #24]
 8005e74:	4313      	orrs	r3, r2
 8005e76:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	69ba      	ldr	r2, [r7, #24]
 8005e7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	f003 0303 	and.w	r3, r3, #3
 8005e86:	2b02      	cmp	r3, #2
 8005e88:	d123      	bne.n	8005ed2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	08da      	lsrs	r2, r3, #3
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	3208      	adds	r2, #8
 8005e92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005e98:	69fb      	ldr	r3, [r7, #28]
 8005e9a:	f003 0307 	and.w	r3, r3, #7
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	220f      	movs	r2, #15
 8005ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea6:	43db      	mvns	r3, r3
 8005ea8:	69ba      	ldr	r2, [r7, #24]
 8005eaa:	4013      	ands	r3, r2
 8005eac:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	691a      	ldr	r2, [r3, #16]
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	f003 0307 	and.w	r3, r3, #7
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	fa02 f303 	lsl.w	r3, r2, r3
 8005ebe:	69ba      	ldr	r2, [r7, #24]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005ec4:	69fb      	ldr	r3, [r7, #28]
 8005ec6:	08da      	lsrs	r2, r3, #3
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	3208      	adds	r2, #8
 8005ecc:	69b9      	ldr	r1, [r7, #24]
 8005ece:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005ed8:	69fb      	ldr	r3, [r7, #28]
 8005eda:	005b      	lsls	r3, r3, #1
 8005edc:	2203      	movs	r2, #3
 8005ede:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee2:	43db      	mvns	r3, r3
 8005ee4:	69ba      	ldr	r2, [r7, #24]
 8005ee6:	4013      	ands	r3, r2
 8005ee8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	f003 0203 	and.w	r2, r3, #3
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	005b      	lsls	r3, r3, #1
 8005ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8005efa:	69ba      	ldr	r2, [r7, #24]
 8005efc:	4313      	orrs	r3, r2
 8005efe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	69ba      	ldr	r2, [r7, #24]
 8005f04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	f000 80e0 	beq.w	80060d4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f14:	4b2f      	ldr	r3, [pc, #188]	; (8005fd4 <HAL_GPIO_Init+0x238>)
 8005f16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005f1a:	4a2e      	ldr	r2, [pc, #184]	; (8005fd4 <HAL_GPIO_Init+0x238>)
 8005f1c:	f043 0302 	orr.w	r3, r3, #2
 8005f20:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005f24:	4b2b      	ldr	r3, [pc, #172]	; (8005fd4 <HAL_GPIO_Init+0x238>)
 8005f26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005f2a:	f003 0302 	and.w	r3, r3, #2
 8005f2e:	60fb      	str	r3, [r7, #12]
 8005f30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005f32:	4a29      	ldr	r2, [pc, #164]	; (8005fd8 <HAL_GPIO_Init+0x23c>)
 8005f34:	69fb      	ldr	r3, [r7, #28]
 8005f36:	089b      	lsrs	r3, r3, #2
 8005f38:	3302      	adds	r3, #2
 8005f3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	f003 0303 	and.w	r3, r3, #3
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	220f      	movs	r2, #15
 8005f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f4e:	43db      	mvns	r3, r3
 8005f50:	69ba      	ldr	r2, [r7, #24]
 8005f52:	4013      	ands	r3, r2
 8005f54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a20      	ldr	r2, [pc, #128]	; (8005fdc <HAL_GPIO_Init+0x240>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d052      	beq.n	8006004 <HAL_GPIO_Init+0x268>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4a1f      	ldr	r2, [pc, #124]	; (8005fe0 <HAL_GPIO_Init+0x244>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d031      	beq.n	8005fca <HAL_GPIO_Init+0x22e>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	4a1e      	ldr	r2, [pc, #120]	; (8005fe4 <HAL_GPIO_Init+0x248>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d02b      	beq.n	8005fc6 <HAL_GPIO_Init+0x22a>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	4a1d      	ldr	r2, [pc, #116]	; (8005fe8 <HAL_GPIO_Init+0x24c>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d025      	beq.n	8005fc2 <HAL_GPIO_Init+0x226>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4a1c      	ldr	r2, [pc, #112]	; (8005fec <HAL_GPIO_Init+0x250>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d01f      	beq.n	8005fbe <HAL_GPIO_Init+0x222>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	4a1b      	ldr	r2, [pc, #108]	; (8005ff0 <HAL_GPIO_Init+0x254>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d019      	beq.n	8005fba <HAL_GPIO_Init+0x21e>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	4a1a      	ldr	r2, [pc, #104]	; (8005ff4 <HAL_GPIO_Init+0x258>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d013      	beq.n	8005fb6 <HAL_GPIO_Init+0x21a>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	4a19      	ldr	r2, [pc, #100]	; (8005ff8 <HAL_GPIO_Init+0x25c>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d00d      	beq.n	8005fb2 <HAL_GPIO_Init+0x216>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4a18      	ldr	r2, [pc, #96]	; (8005ffc <HAL_GPIO_Init+0x260>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d007      	beq.n	8005fae <HAL_GPIO_Init+0x212>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4a17      	ldr	r2, [pc, #92]	; (8006000 <HAL_GPIO_Init+0x264>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d101      	bne.n	8005faa <HAL_GPIO_Init+0x20e>
 8005fa6:	2309      	movs	r3, #9
 8005fa8:	e02d      	b.n	8006006 <HAL_GPIO_Init+0x26a>
 8005faa:	230a      	movs	r3, #10
 8005fac:	e02b      	b.n	8006006 <HAL_GPIO_Init+0x26a>
 8005fae:	2308      	movs	r3, #8
 8005fb0:	e029      	b.n	8006006 <HAL_GPIO_Init+0x26a>
 8005fb2:	2307      	movs	r3, #7
 8005fb4:	e027      	b.n	8006006 <HAL_GPIO_Init+0x26a>
 8005fb6:	2306      	movs	r3, #6
 8005fb8:	e025      	b.n	8006006 <HAL_GPIO_Init+0x26a>
 8005fba:	2305      	movs	r3, #5
 8005fbc:	e023      	b.n	8006006 <HAL_GPIO_Init+0x26a>
 8005fbe:	2304      	movs	r3, #4
 8005fc0:	e021      	b.n	8006006 <HAL_GPIO_Init+0x26a>
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	e01f      	b.n	8006006 <HAL_GPIO_Init+0x26a>
 8005fc6:	2302      	movs	r3, #2
 8005fc8:	e01d      	b.n	8006006 <HAL_GPIO_Init+0x26a>
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e01b      	b.n	8006006 <HAL_GPIO_Init+0x26a>
 8005fce:	bf00      	nop
 8005fd0:	58000080 	.word	0x58000080
 8005fd4:	58024400 	.word	0x58024400
 8005fd8:	58000400 	.word	0x58000400
 8005fdc:	58020000 	.word	0x58020000
 8005fe0:	58020400 	.word	0x58020400
 8005fe4:	58020800 	.word	0x58020800
 8005fe8:	58020c00 	.word	0x58020c00
 8005fec:	58021000 	.word	0x58021000
 8005ff0:	58021400 	.word	0x58021400
 8005ff4:	58021800 	.word	0x58021800
 8005ff8:	58021c00 	.word	0x58021c00
 8005ffc:	58022000 	.word	0x58022000
 8006000:	58022400 	.word	0x58022400
 8006004:	2300      	movs	r3, #0
 8006006:	69fa      	ldr	r2, [r7, #28]
 8006008:	f002 0203 	and.w	r2, r2, #3
 800600c:	0092      	lsls	r2, r2, #2
 800600e:	4093      	lsls	r3, r2
 8006010:	69ba      	ldr	r2, [r7, #24]
 8006012:	4313      	orrs	r3, r2
 8006014:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006016:	4938      	ldr	r1, [pc, #224]	; (80060f8 <HAL_GPIO_Init+0x35c>)
 8006018:	69fb      	ldr	r3, [r7, #28]
 800601a:	089b      	lsrs	r3, r3, #2
 800601c:	3302      	adds	r3, #2
 800601e:	69ba      	ldr	r2, [r7, #24]
 8006020:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006024:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	43db      	mvns	r3, r3
 8006030:	69ba      	ldr	r2, [r7, #24]
 8006032:	4013      	ands	r3, r2
 8006034:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800603e:	2b00      	cmp	r3, #0
 8006040:	d003      	beq.n	800604a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006042:	69ba      	ldr	r2, [r7, #24]
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	4313      	orrs	r3, r2
 8006048:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800604a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800604e:	69bb      	ldr	r3, [r7, #24]
 8006050:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006052:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	43db      	mvns	r3, r3
 800605e:	69ba      	ldr	r2, [r7, #24]
 8006060:	4013      	ands	r3, r2
 8006062:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800606c:	2b00      	cmp	r3, #0
 800606e:	d003      	beq.n	8006078 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006070:	69ba      	ldr	r2, [r7, #24]
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	4313      	orrs	r3, r2
 8006076:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006078:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800607c:	69bb      	ldr	r3, [r7, #24]
 800607e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	43db      	mvns	r3, r3
 800608a:	69ba      	ldr	r2, [r7, #24]
 800608c:	4013      	ands	r3, r2
 800608e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006098:	2b00      	cmp	r3, #0
 800609a:	d003      	beq.n	80060a4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800609c:	69ba      	ldr	r2, [r7, #24]
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	69ba      	ldr	r2, [r7, #24]
 80060a8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	43db      	mvns	r3, r3
 80060b4:	69ba      	ldr	r2, [r7, #24]
 80060b6:	4013      	ands	r3, r2
 80060b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d003      	beq.n	80060ce <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80060c6:	69ba      	ldr	r2, [r7, #24]
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	69ba      	ldr	r2, [r7, #24]
 80060d2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80060d4:	69fb      	ldr	r3, [r7, #28]
 80060d6:	3301      	adds	r3, #1
 80060d8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	69fb      	ldr	r3, [r7, #28]
 80060e0:	fa22 f303 	lsr.w	r3, r2, r3
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	f47f ae63 	bne.w	8005db0 <HAL_GPIO_Init+0x14>
  }
}
 80060ea:	bf00      	nop
 80060ec:	bf00      	nop
 80060ee:	3724      	adds	r7, #36	; 0x24
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr
 80060f8:	58000400 	.word	0x58000400

080060fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	460b      	mov	r3, r1
 8006106:	807b      	strh	r3, [r7, #2]
 8006108:	4613      	mov	r3, r2
 800610a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800610c:	787b      	ldrb	r3, [r7, #1]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d003      	beq.n	800611a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006112:	887a      	ldrh	r2, [r7, #2]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006118:	e003      	b.n	8006122 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800611a:	887b      	ldrh	r3, [r7, #2]
 800611c:	041a      	lsls	r2, r3, #16
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	619a      	str	r2, [r3, #24]
}
 8006122:	bf00      	nop
 8006124:	370c      	adds	r7, #12
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr
	...

08006130 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b084      	sub	sp, #16
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d101      	bne.n	8006142 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	e0bf      	b.n	80062c2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006148:	b2db      	uxtb	r3, r3
 800614a:	2b00      	cmp	r3, #0
 800614c:	d106      	bne.n	800615c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f7fc f92a 	bl	80023b0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2202      	movs	r2, #2
 8006160:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	699a      	ldr	r2, [r3, #24]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006172:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	6999      	ldr	r1, [r3, #24]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	685a      	ldr	r2, [r3, #4]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006188:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	430a      	orrs	r2, r1
 8006196:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	6899      	ldr	r1, [r3, #8]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	4b4a      	ldr	r3, [pc, #296]	; (80062cc <HAL_LTDC_Init+0x19c>)
 80061a4:	400b      	ands	r3, r1
 80061a6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	695b      	ldr	r3, [r3, #20]
 80061ac:	041b      	lsls	r3, r3, #16
 80061ae:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	6899      	ldr	r1, [r3, #8]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	699a      	ldr	r2, [r3, #24]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	431a      	orrs	r2, r3
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	430a      	orrs	r2, r1
 80061c4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	68d9      	ldr	r1, [r3, #12]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	4b3e      	ldr	r3, [pc, #248]	; (80062cc <HAL_LTDC_Init+0x19c>)
 80061d2:	400b      	ands	r3, r1
 80061d4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	69db      	ldr	r3, [r3, #28]
 80061da:	041b      	lsls	r3, r3, #16
 80061dc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	68d9      	ldr	r1, [r3, #12]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6a1a      	ldr	r2, [r3, #32]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	431a      	orrs	r2, r3
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	430a      	orrs	r2, r1
 80061f2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	6919      	ldr	r1, [r3, #16]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	4b33      	ldr	r3, [pc, #204]	; (80062cc <HAL_LTDC_Init+0x19c>)
 8006200:	400b      	ands	r3, r1
 8006202:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006208:	041b      	lsls	r3, r3, #16
 800620a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	6919      	ldr	r1, [r3, #16]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	431a      	orrs	r2, r3
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	430a      	orrs	r2, r1
 8006220:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	6959      	ldr	r1, [r3, #20]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	4b27      	ldr	r3, [pc, #156]	; (80062cc <HAL_LTDC_Init+0x19c>)
 800622e:	400b      	ands	r3, r1
 8006230:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006236:	041b      	lsls	r3, r3, #16
 8006238:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	6959      	ldr	r1, [r3, #20]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	431a      	orrs	r2, r3
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	430a      	orrs	r2, r1
 800624e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006256:	021b      	lsls	r3, r3, #8
 8006258:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006260:	041b      	lsls	r3, r3, #16
 8006262:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006272:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800627a:	68ba      	ldr	r2, [r7, #8]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	4313      	orrs	r3, r2
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006286:	431a      	orrs	r2, r3
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	430a      	orrs	r2, r1
 800628e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f042 0206 	orr.w	r2, r2, #6
 800629e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	699a      	ldr	r2, [r3, #24]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f042 0201 	orr.w	r2, r2, #1
 80062ae:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2201      	movs	r2, #1
 80062bc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80062c0:	2300      	movs	r3, #0
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3710      	adds	r7, #16
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	f000f800 	.word	0xf000f800

080062d0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80062d0:	b5b0      	push	{r4, r5, r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d101      	bne.n	80062ea <HAL_LTDC_ConfigLayer+0x1a>
 80062e6:	2302      	movs	r3, #2
 80062e8:	e02c      	b.n	8006344 <HAL_LTDC_ConfigLayer+0x74>
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2201      	movs	r2, #1
 80062ee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2202      	movs	r2, #2
 80062f6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80062fa:	68fa      	ldr	r2, [r7, #12]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2134      	movs	r1, #52	; 0x34
 8006300:	fb01 f303 	mul.w	r3, r1, r3
 8006304:	4413      	add	r3, r2
 8006306:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	4614      	mov	r4, r2
 800630e:	461d      	mov	r5, r3
 8006310:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006312:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006314:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006316:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006318:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800631a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800631c:	682b      	ldr	r3, [r5, #0]
 800631e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	68b9      	ldr	r1, [r7, #8]
 8006324:	68f8      	ldr	r0, [r7, #12]
 8006326:	f000 f811 	bl	800634c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	2201      	movs	r2, #1
 8006330:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2201      	movs	r2, #1
 8006336:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2200      	movs	r2, #0
 800633e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006342:	2300      	movs	r3, #0
}
 8006344:	4618      	mov	r0, r3
 8006346:	3710      	adds	r7, #16
 8006348:	46bd      	mov	sp, r7
 800634a:	bdb0      	pop	{r4, r5, r7, pc}

0800634c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800634c:	b480      	push	{r7}
 800634e:	b089      	sub	sp, #36	; 0x24
 8006350:	af00      	add	r7, sp, #0
 8006352:	60f8      	str	r0, [r7, #12]
 8006354:	60b9      	str	r1, [r7, #8]
 8006356:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	685a      	ldr	r2, [r3, #4]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	68db      	ldr	r3, [r3, #12]
 8006362:	0c1b      	lsrs	r3, r3, #16
 8006364:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006368:	4413      	add	r3, r2
 800636a:	041b      	lsls	r3, r3, #16
 800636c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	461a      	mov	r2, r3
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	01db      	lsls	r3, r3, #7
 8006378:	4413      	add	r3, r2
 800637a:	3384      	adds	r3, #132	; 0x84
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	68fa      	ldr	r2, [r7, #12]
 8006380:	6812      	ldr	r2, [r2, #0]
 8006382:	4611      	mov	r1, r2
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	01d2      	lsls	r2, r2, #7
 8006388:	440a      	add	r2, r1
 800638a:	3284      	adds	r2, #132	; 0x84
 800638c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006390:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	0c1b      	lsrs	r3, r3, #16
 800639e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80063a2:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80063a4:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4619      	mov	r1, r3
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	01db      	lsls	r3, r3, #7
 80063b0:	440b      	add	r3, r1
 80063b2:	3384      	adds	r3, #132	; 0x84
 80063b4:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80063b6:	69fb      	ldr	r3, [r7, #28]
 80063b8:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80063ba:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	68da      	ldr	r2, [r3, #12]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	68db      	ldr	r3, [r3, #12]
 80063c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80063ca:	4413      	add	r3, r2
 80063cc:	041b      	lsls	r3, r3, #16
 80063ce:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	461a      	mov	r2, r3
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	01db      	lsls	r3, r3, #7
 80063da:	4413      	add	r3, r2
 80063dc:	3384      	adds	r3, #132	; 0x84
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	6812      	ldr	r2, [r2, #0]
 80063e4:	4611      	mov	r1, r2
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	01d2      	lsls	r2, r2, #7
 80063ea:	440a      	add	r2, r1
 80063ec:	3284      	adds	r2, #132	; 0x84
 80063ee:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80063f2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	689a      	ldr	r2, [r3, #8]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006402:	4413      	add	r3, r2
 8006404:	1c5a      	adds	r2, r3, #1
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4619      	mov	r1, r3
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	01db      	lsls	r3, r3, #7
 8006410:	440b      	add	r3, r1
 8006412:	3384      	adds	r3, #132	; 0x84
 8006414:	4619      	mov	r1, r3
 8006416:	69fb      	ldr	r3, [r7, #28]
 8006418:	4313      	orrs	r3, r2
 800641a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	461a      	mov	r2, r3
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	01db      	lsls	r3, r3, #7
 8006426:	4413      	add	r3, r2
 8006428:	3384      	adds	r3, #132	; 0x84
 800642a:	691b      	ldr	r3, [r3, #16]
 800642c:	68fa      	ldr	r2, [r7, #12]
 800642e:	6812      	ldr	r2, [r2, #0]
 8006430:	4611      	mov	r1, r2
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	01d2      	lsls	r2, r2, #7
 8006436:	440a      	add	r2, r1
 8006438:	3284      	adds	r2, #132	; 0x84
 800643a:	f023 0307 	bic.w	r3, r3, #7
 800643e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	461a      	mov	r2, r3
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	01db      	lsls	r3, r3, #7
 800644a:	4413      	add	r3, r2
 800644c:	3384      	adds	r3, #132	; 0x84
 800644e:	461a      	mov	r2, r3
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	691b      	ldr	r3, [r3, #16]
 8006454:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800645c:	021b      	lsls	r3, r3, #8
 800645e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006466:	041b      	lsls	r3, r3, #16
 8006468:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	699b      	ldr	r3, [r3, #24]
 800646e:	061b      	lsls	r3, r3, #24
 8006470:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	461a      	mov	r2, r3
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	01db      	lsls	r3, r3, #7
 800647c:	4413      	add	r3, r2
 800647e:	3384      	adds	r3, #132	; 0x84
 8006480:	699b      	ldr	r3, [r3, #24]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	461a      	mov	r2, r3
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	01db      	lsls	r3, r3, #7
 800648c:	4413      	add	r3, r2
 800648e:	3384      	adds	r3, #132	; 0x84
 8006490:	461a      	mov	r2, r3
 8006492:	2300      	movs	r3, #0
 8006494:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800649c:	461a      	mov	r2, r3
 800649e:	69fb      	ldr	r3, [r7, #28]
 80064a0:	431a      	orrs	r2, r3
 80064a2:	69bb      	ldr	r3, [r7, #24]
 80064a4:	431a      	orrs	r2, r3
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4619      	mov	r1, r3
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	01db      	lsls	r3, r3, #7
 80064b0:	440b      	add	r3, r1
 80064b2:	3384      	adds	r3, #132	; 0x84
 80064b4:	4619      	mov	r1, r3
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	4313      	orrs	r3, r2
 80064ba:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	461a      	mov	r2, r3
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	01db      	lsls	r3, r3, #7
 80064c6:	4413      	add	r3, r2
 80064c8:	3384      	adds	r3, #132	; 0x84
 80064ca:	695b      	ldr	r3, [r3, #20]
 80064cc:	68fa      	ldr	r2, [r7, #12]
 80064ce:	6812      	ldr	r2, [r2, #0]
 80064d0:	4611      	mov	r1, r2
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	01d2      	lsls	r2, r2, #7
 80064d6:	440a      	add	r2, r1
 80064d8:	3284      	adds	r2, #132	; 0x84
 80064da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80064de:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	461a      	mov	r2, r3
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	01db      	lsls	r3, r3, #7
 80064ea:	4413      	add	r3, r2
 80064ec:	3384      	adds	r3, #132	; 0x84
 80064ee:	461a      	mov	r2, r3
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	695b      	ldr	r3, [r3, #20]
 80064f4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	461a      	mov	r2, r3
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	01db      	lsls	r3, r3, #7
 8006500:	4413      	add	r3, r2
 8006502:	3384      	adds	r3, #132	; 0x84
 8006504:	69da      	ldr	r2, [r3, #28]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4619      	mov	r1, r3
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	01db      	lsls	r3, r3, #7
 8006510:	440b      	add	r3, r1
 8006512:	3384      	adds	r3, #132	; 0x84
 8006514:	4619      	mov	r1, r3
 8006516:	4b58      	ldr	r3, [pc, #352]	; (8006678 <LTDC_SetConfig+0x32c>)
 8006518:	4013      	ands	r3, r2
 800651a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	69da      	ldr	r2, [r3, #28]
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	6a1b      	ldr	r3, [r3, #32]
 8006524:	68f9      	ldr	r1, [r7, #12]
 8006526:	6809      	ldr	r1, [r1, #0]
 8006528:	4608      	mov	r0, r1
 800652a:	6879      	ldr	r1, [r7, #4]
 800652c:	01c9      	lsls	r1, r1, #7
 800652e:	4401      	add	r1, r0
 8006530:	3184      	adds	r1, #132	; 0x84
 8006532:	4313      	orrs	r3, r2
 8006534:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	461a      	mov	r2, r3
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	01db      	lsls	r3, r3, #7
 8006540:	4413      	add	r3, r2
 8006542:	3384      	adds	r3, #132	; 0x84
 8006544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	461a      	mov	r2, r3
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	01db      	lsls	r3, r3, #7
 8006550:	4413      	add	r3, r2
 8006552:	3384      	adds	r3, #132	; 0x84
 8006554:	461a      	mov	r2, r3
 8006556:	2300      	movs	r3, #0
 8006558:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	461a      	mov	r2, r3
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	01db      	lsls	r3, r3, #7
 8006564:	4413      	add	r3, r2
 8006566:	3384      	adds	r3, #132	; 0x84
 8006568:	461a      	mov	r2, r3
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800656e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	691b      	ldr	r3, [r3, #16]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d102      	bne.n	800657e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006578:	2304      	movs	r3, #4
 800657a:	61fb      	str	r3, [r7, #28]
 800657c:	e01b      	b.n	80065b6 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	2b01      	cmp	r3, #1
 8006584:	d102      	bne.n	800658c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8006586:	2303      	movs	r3, #3
 8006588:	61fb      	str	r3, [r7, #28]
 800658a:	e014      	b.n	80065b6 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	691b      	ldr	r3, [r3, #16]
 8006590:	2b04      	cmp	r3, #4
 8006592:	d00b      	beq.n	80065ac <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006598:	2b02      	cmp	r3, #2
 800659a:	d007      	beq.n	80065ac <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80065a0:	2b03      	cmp	r3, #3
 80065a2:	d003      	beq.n	80065ac <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80065a8:	2b07      	cmp	r3, #7
 80065aa:	d102      	bne.n	80065b2 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80065ac:	2302      	movs	r3, #2
 80065ae:	61fb      	str	r3, [r7, #28]
 80065b0:	e001      	b.n	80065b6 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80065b2:	2301      	movs	r3, #1
 80065b4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	461a      	mov	r2, r3
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	01db      	lsls	r3, r3, #7
 80065c0:	4413      	add	r3, r2
 80065c2:	3384      	adds	r3, #132	; 0x84
 80065c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c6:	68fa      	ldr	r2, [r7, #12]
 80065c8:	6812      	ldr	r2, [r2, #0]
 80065ca:	4611      	mov	r1, r2
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	01d2      	lsls	r2, r2, #7
 80065d0:	440a      	add	r2, r1
 80065d2:	3284      	adds	r2, #132	; 0x84
 80065d4:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80065d8:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065de:	69fa      	ldr	r2, [r7, #28]
 80065e0:	fb02 f303 	mul.w	r3, r2, r3
 80065e4:	041a      	lsls	r2, r3, #16
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	6859      	ldr	r1, [r3, #4]
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	1acb      	subs	r3, r1, r3
 80065f0:	69f9      	ldr	r1, [r7, #28]
 80065f2:	fb01 f303 	mul.w	r3, r1, r3
 80065f6:	3307      	adds	r3, #7
 80065f8:	68f9      	ldr	r1, [r7, #12]
 80065fa:	6809      	ldr	r1, [r1, #0]
 80065fc:	4608      	mov	r0, r1
 80065fe:	6879      	ldr	r1, [r7, #4]
 8006600:	01c9      	lsls	r1, r1, #7
 8006602:	4401      	add	r1, r0
 8006604:	3184      	adds	r1, #132	; 0x84
 8006606:	4313      	orrs	r3, r2
 8006608:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	461a      	mov	r2, r3
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	01db      	lsls	r3, r3, #7
 8006614:	4413      	add	r3, r2
 8006616:	3384      	adds	r3, #132	; 0x84
 8006618:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4619      	mov	r1, r3
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	01db      	lsls	r3, r3, #7
 8006624:	440b      	add	r3, r1
 8006626:	3384      	adds	r3, #132	; 0x84
 8006628:	4619      	mov	r1, r3
 800662a:	4b14      	ldr	r3, [pc, #80]	; (800667c <LTDC_SetConfig+0x330>)
 800662c:	4013      	ands	r3, r2
 800662e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	461a      	mov	r2, r3
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	01db      	lsls	r3, r3, #7
 800663a:	4413      	add	r3, r2
 800663c:	3384      	adds	r3, #132	; 0x84
 800663e:	461a      	mov	r2, r3
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006644:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	461a      	mov	r2, r3
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	01db      	lsls	r3, r3, #7
 8006650:	4413      	add	r3, r2
 8006652:	3384      	adds	r3, #132	; 0x84
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	68fa      	ldr	r2, [r7, #12]
 8006658:	6812      	ldr	r2, [r2, #0]
 800665a:	4611      	mov	r1, r2
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	01d2      	lsls	r2, r2, #7
 8006660:	440a      	add	r2, r1
 8006662:	3284      	adds	r2, #132	; 0x84
 8006664:	f043 0301 	orr.w	r3, r3, #1
 8006668:	6013      	str	r3, [r2, #0]
}
 800666a:	bf00      	nop
 800666c:	3724      	adds	r7, #36	; 0x24
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr
 8006676:	bf00      	nop
 8006678:	fffff8f8 	.word	0xfffff8f8
 800667c:	fffff800 	.word	0xfffff800

08006680 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006682:	b08f      	sub	sp, #60	; 0x3c
 8006684:	af0a      	add	r7, sp, #40	; 0x28
 8006686:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d101      	bne.n	8006692 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	e116      	b.n	80068c0 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d106      	bne.n	80066b2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2200      	movs	r2, #0
 80066a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f7fc f8fd 	bl	80028ac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2203      	movs	r2, #3
 80066b6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d102      	bne.n	80066cc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4618      	mov	r0, r3
 80066d2:	f007 fead 	bl	800e430 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	603b      	str	r3, [r7, #0]
 80066dc:	687e      	ldr	r6, [r7, #4]
 80066de:	466d      	mov	r5, sp
 80066e0:	f106 0410 	add.w	r4, r6, #16
 80066e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80066e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80066e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80066ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80066ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80066f0:	e885 0003 	stmia.w	r5, {r0, r1}
 80066f4:	1d33      	adds	r3, r6, #4
 80066f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80066f8:	6838      	ldr	r0, [r7, #0]
 80066fa:	f007 fe2b 	bl	800e354 <USB_CoreInit>
 80066fe:	4603      	mov	r3, r0
 8006700:	2b00      	cmp	r3, #0
 8006702:	d005      	beq.n	8006710 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2202      	movs	r2, #2
 8006708:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	e0d7      	b.n	80068c0 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	2100      	movs	r1, #0
 8006716:	4618      	mov	r0, r3
 8006718:	f007 fe9b 	bl	800e452 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800671c:	2300      	movs	r3, #0
 800671e:	73fb      	strb	r3, [r7, #15]
 8006720:	e04a      	b.n	80067b8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006722:	7bfa      	ldrb	r2, [r7, #15]
 8006724:	6879      	ldr	r1, [r7, #4]
 8006726:	4613      	mov	r3, r2
 8006728:	00db      	lsls	r3, r3, #3
 800672a:	4413      	add	r3, r2
 800672c:	009b      	lsls	r3, r3, #2
 800672e:	440b      	add	r3, r1
 8006730:	333d      	adds	r3, #61	; 0x3d
 8006732:	2201      	movs	r2, #1
 8006734:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006736:	7bfa      	ldrb	r2, [r7, #15]
 8006738:	6879      	ldr	r1, [r7, #4]
 800673a:	4613      	mov	r3, r2
 800673c:	00db      	lsls	r3, r3, #3
 800673e:	4413      	add	r3, r2
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	440b      	add	r3, r1
 8006744:	333c      	adds	r3, #60	; 0x3c
 8006746:	7bfa      	ldrb	r2, [r7, #15]
 8006748:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800674a:	7bfa      	ldrb	r2, [r7, #15]
 800674c:	7bfb      	ldrb	r3, [r7, #15]
 800674e:	b298      	uxth	r0, r3
 8006750:	6879      	ldr	r1, [r7, #4]
 8006752:	4613      	mov	r3, r2
 8006754:	00db      	lsls	r3, r3, #3
 8006756:	4413      	add	r3, r2
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	440b      	add	r3, r1
 800675c:	3356      	adds	r3, #86	; 0x56
 800675e:	4602      	mov	r2, r0
 8006760:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006762:	7bfa      	ldrb	r2, [r7, #15]
 8006764:	6879      	ldr	r1, [r7, #4]
 8006766:	4613      	mov	r3, r2
 8006768:	00db      	lsls	r3, r3, #3
 800676a:	4413      	add	r3, r2
 800676c:	009b      	lsls	r3, r3, #2
 800676e:	440b      	add	r3, r1
 8006770:	3340      	adds	r3, #64	; 0x40
 8006772:	2200      	movs	r2, #0
 8006774:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006776:	7bfa      	ldrb	r2, [r7, #15]
 8006778:	6879      	ldr	r1, [r7, #4]
 800677a:	4613      	mov	r3, r2
 800677c:	00db      	lsls	r3, r3, #3
 800677e:	4413      	add	r3, r2
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	440b      	add	r3, r1
 8006784:	3344      	adds	r3, #68	; 0x44
 8006786:	2200      	movs	r2, #0
 8006788:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800678a:	7bfa      	ldrb	r2, [r7, #15]
 800678c:	6879      	ldr	r1, [r7, #4]
 800678e:	4613      	mov	r3, r2
 8006790:	00db      	lsls	r3, r3, #3
 8006792:	4413      	add	r3, r2
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	440b      	add	r3, r1
 8006798:	3348      	adds	r3, #72	; 0x48
 800679a:	2200      	movs	r2, #0
 800679c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800679e:	7bfa      	ldrb	r2, [r7, #15]
 80067a0:	6879      	ldr	r1, [r7, #4]
 80067a2:	4613      	mov	r3, r2
 80067a4:	00db      	lsls	r3, r3, #3
 80067a6:	4413      	add	r3, r2
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	440b      	add	r3, r1
 80067ac:	334c      	adds	r3, #76	; 0x4c
 80067ae:	2200      	movs	r2, #0
 80067b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80067b2:	7bfb      	ldrb	r3, [r7, #15]
 80067b4:	3301      	adds	r3, #1
 80067b6:	73fb      	strb	r3, [r7, #15]
 80067b8:	7bfa      	ldrb	r2, [r7, #15]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	429a      	cmp	r2, r3
 80067c0:	d3af      	bcc.n	8006722 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80067c2:	2300      	movs	r3, #0
 80067c4:	73fb      	strb	r3, [r7, #15]
 80067c6:	e044      	b.n	8006852 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80067c8:	7bfa      	ldrb	r2, [r7, #15]
 80067ca:	6879      	ldr	r1, [r7, #4]
 80067cc:	4613      	mov	r3, r2
 80067ce:	00db      	lsls	r3, r3, #3
 80067d0:	4413      	add	r3, r2
 80067d2:	009b      	lsls	r3, r3, #2
 80067d4:	440b      	add	r3, r1
 80067d6:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80067da:	2200      	movs	r2, #0
 80067dc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80067de:	7bfa      	ldrb	r2, [r7, #15]
 80067e0:	6879      	ldr	r1, [r7, #4]
 80067e2:	4613      	mov	r3, r2
 80067e4:	00db      	lsls	r3, r3, #3
 80067e6:	4413      	add	r3, r2
 80067e8:	009b      	lsls	r3, r3, #2
 80067ea:	440b      	add	r3, r1
 80067ec:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80067f0:	7bfa      	ldrb	r2, [r7, #15]
 80067f2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80067f4:	7bfa      	ldrb	r2, [r7, #15]
 80067f6:	6879      	ldr	r1, [r7, #4]
 80067f8:	4613      	mov	r3, r2
 80067fa:	00db      	lsls	r3, r3, #3
 80067fc:	4413      	add	r3, r2
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	440b      	add	r3, r1
 8006802:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006806:	2200      	movs	r2, #0
 8006808:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800680a:	7bfa      	ldrb	r2, [r7, #15]
 800680c:	6879      	ldr	r1, [r7, #4]
 800680e:	4613      	mov	r3, r2
 8006810:	00db      	lsls	r3, r3, #3
 8006812:	4413      	add	r3, r2
 8006814:	009b      	lsls	r3, r3, #2
 8006816:	440b      	add	r3, r1
 8006818:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800681c:	2200      	movs	r2, #0
 800681e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006820:	7bfa      	ldrb	r2, [r7, #15]
 8006822:	6879      	ldr	r1, [r7, #4]
 8006824:	4613      	mov	r3, r2
 8006826:	00db      	lsls	r3, r3, #3
 8006828:	4413      	add	r3, r2
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	440b      	add	r3, r1
 800682e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8006832:	2200      	movs	r2, #0
 8006834:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006836:	7bfa      	ldrb	r2, [r7, #15]
 8006838:	6879      	ldr	r1, [r7, #4]
 800683a:	4613      	mov	r3, r2
 800683c:	00db      	lsls	r3, r3, #3
 800683e:	4413      	add	r3, r2
 8006840:	009b      	lsls	r3, r3, #2
 8006842:	440b      	add	r3, r1
 8006844:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006848:	2200      	movs	r2, #0
 800684a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800684c:	7bfb      	ldrb	r3, [r7, #15]
 800684e:	3301      	adds	r3, #1
 8006850:	73fb      	strb	r3, [r7, #15]
 8006852:	7bfa      	ldrb	r2, [r7, #15]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	429a      	cmp	r2, r3
 800685a:	d3b5      	bcc.n	80067c8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	603b      	str	r3, [r7, #0]
 8006862:	687e      	ldr	r6, [r7, #4]
 8006864:	466d      	mov	r5, sp
 8006866:	f106 0410 	add.w	r4, r6, #16
 800686a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800686c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800686e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006870:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006872:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006876:	e885 0003 	stmia.w	r5, {r0, r1}
 800687a:	1d33      	adds	r3, r6, #4
 800687c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800687e:	6838      	ldr	r0, [r7, #0]
 8006880:	f007 fe34 	bl	800e4ec <USB_DevInit>
 8006884:	4603      	mov	r3, r0
 8006886:	2b00      	cmp	r3, #0
 8006888:	d005      	beq.n	8006896 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2202      	movs	r2, #2
 800688e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	e014      	b.n	80068c0 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2200      	movs	r2, #0
 800689a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2201      	movs	r2, #1
 80068a2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068aa:	2b01      	cmp	r3, #1
 80068ac:	d102      	bne.n	80068b4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 f80a 	bl	80068c8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4618      	mov	r0, r3
 80068ba:	f007 fff2 	bl	800e8a2 <USB_DevDisconnect>

  return HAL_OK;
 80068be:	2300      	movs	r3, #0
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3714      	adds	r7, #20
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080068c8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b085      	sub	sp, #20
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2201      	movs	r2, #1
 80068da:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2200      	movs	r2, #0
 80068e2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	699b      	ldr	r3, [r3, #24]
 80068ea:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80068f6:	4b05      	ldr	r3, [pc, #20]	; (800690c <HAL_PCDEx_ActivateLPM+0x44>)
 80068f8:	4313      	orrs	r3, r2
 80068fa:	68fa      	ldr	r2, [r7, #12]
 80068fc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80068fe:	2300      	movs	r3, #0
}
 8006900:	4618      	mov	r0, r3
 8006902:	3714      	adds	r7, #20
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr
 800690c:	10000003 	.word	0x10000003

08006910 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b084      	sub	sp, #16
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006918:	4b19      	ldr	r3, [pc, #100]	; (8006980 <HAL_PWREx_ConfigSupply+0x70>)
 800691a:	68db      	ldr	r3, [r3, #12]
 800691c:	f003 0304 	and.w	r3, r3, #4
 8006920:	2b04      	cmp	r3, #4
 8006922:	d00a      	beq.n	800693a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006924:	4b16      	ldr	r3, [pc, #88]	; (8006980 <HAL_PWREx_ConfigSupply+0x70>)
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	f003 0307 	and.w	r3, r3, #7
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	429a      	cmp	r2, r3
 8006930:	d001      	beq.n	8006936 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	e01f      	b.n	8006976 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006936:	2300      	movs	r3, #0
 8006938:	e01d      	b.n	8006976 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800693a:	4b11      	ldr	r3, [pc, #68]	; (8006980 <HAL_PWREx_ConfigSupply+0x70>)
 800693c:	68db      	ldr	r3, [r3, #12]
 800693e:	f023 0207 	bic.w	r2, r3, #7
 8006942:	490f      	ldr	r1, [pc, #60]	; (8006980 <HAL_PWREx_ConfigSupply+0x70>)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	4313      	orrs	r3, r2
 8006948:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800694a:	f7fc fb37 	bl	8002fbc <HAL_GetTick>
 800694e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006950:	e009      	b.n	8006966 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006952:	f7fc fb33 	bl	8002fbc <HAL_GetTick>
 8006956:	4602      	mov	r2, r0
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	1ad3      	subs	r3, r2, r3
 800695c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006960:	d901      	bls.n	8006966 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006962:	2301      	movs	r3, #1
 8006964:	e007      	b.n	8006976 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006966:	4b06      	ldr	r3, [pc, #24]	; (8006980 <HAL_PWREx_ConfigSupply+0x70>)
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800696e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006972:	d1ee      	bne.n	8006952 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006974:	2300      	movs	r3, #0
}
 8006976:	4618      	mov	r0, r3
 8006978:	3710      	adds	r7, #16
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}
 800697e:	bf00      	nop
 8006980:	58024800 	.word	0x58024800

08006984 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006984:	b480      	push	{r7}
 8006986:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006988:	4b05      	ldr	r3, [pc, #20]	; (80069a0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800698a:	68db      	ldr	r3, [r3, #12]
 800698c:	4a04      	ldr	r2, [pc, #16]	; (80069a0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800698e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006992:	60d3      	str	r3, [r2, #12]
}
 8006994:	bf00      	nop
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr
 800699e:	bf00      	nop
 80069a0:	58024800 	.word	0x58024800

080069a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b08c      	sub	sp, #48	; 0x30
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d102      	bne.n	80069b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	f000 bc48 	b.w	8007248 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f003 0301 	and.w	r3, r3, #1
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	f000 8088 	beq.w	8006ad6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069c6:	4b99      	ldr	r3, [pc, #612]	; (8006c2c <HAL_RCC_OscConfig+0x288>)
 80069c8:	691b      	ldr	r3, [r3, #16]
 80069ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80069ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80069d0:	4b96      	ldr	r3, [pc, #600]	; (8006c2c <HAL_RCC_OscConfig+0x288>)
 80069d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069d4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80069d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069d8:	2b10      	cmp	r3, #16
 80069da:	d007      	beq.n	80069ec <HAL_RCC_OscConfig+0x48>
 80069dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069de:	2b18      	cmp	r3, #24
 80069e0:	d111      	bne.n	8006a06 <HAL_RCC_OscConfig+0x62>
 80069e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e4:	f003 0303 	and.w	r3, r3, #3
 80069e8:	2b02      	cmp	r3, #2
 80069ea:	d10c      	bne.n	8006a06 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069ec:	4b8f      	ldr	r3, [pc, #572]	; (8006c2c <HAL_RCC_OscConfig+0x288>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d06d      	beq.n	8006ad4 <HAL_RCC_OscConfig+0x130>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d169      	bne.n	8006ad4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006a00:	2301      	movs	r3, #1
 8006a02:	f000 bc21 	b.w	8007248 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a0e:	d106      	bne.n	8006a1e <HAL_RCC_OscConfig+0x7a>
 8006a10:	4b86      	ldr	r3, [pc, #536]	; (8006c2c <HAL_RCC_OscConfig+0x288>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a85      	ldr	r2, [pc, #532]	; (8006c2c <HAL_RCC_OscConfig+0x288>)
 8006a16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a1a:	6013      	str	r3, [r2, #0]
 8006a1c:	e02e      	b.n	8006a7c <HAL_RCC_OscConfig+0xd8>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d10c      	bne.n	8006a40 <HAL_RCC_OscConfig+0x9c>
 8006a26:	4b81      	ldr	r3, [pc, #516]	; (8006c2c <HAL_RCC_OscConfig+0x288>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a80      	ldr	r2, [pc, #512]	; (8006c2c <HAL_RCC_OscConfig+0x288>)
 8006a2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a30:	6013      	str	r3, [r2, #0]
 8006a32:	4b7e      	ldr	r3, [pc, #504]	; (8006c2c <HAL_RCC_OscConfig+0x288>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a7d      	ldr	r2, [pc, #500]	; (8006c2c <HAL_RCC_OscConfig+0x288>)
 8006a38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a3c:	6013      	str	r3, [r2, #0]
 8006a3e:	e01d      	b.n	8006a7c <HAL_RCC_OscConfig+0xd8>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a48:	d10c      	bne.n	8006a64 <HAL_RCC_OscConfig+0xc0>
 8006a4a:	4b78      	ldr	r3, [pc, #480]	; (8006c2c <HAL_RCC_OscConfig+0x288>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a77      	ldr	r2, [pc, #476]	; (8006c2c <HAL_RCC_OscConfig+0x288>)
 8006a50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a54:	6013      	str	r3, [r2, #0]
 8006a56:	4b75      	ldr	r3, [pc, #468]	; (8006c2c <HAL_RCC_OscConfig+0x288>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a74      	ldr	r2, [pc, #464]	; (8006c2c <HAL_RCC_OscConfig+0x288>)
 8006a5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a60:	6013      	str	r3, [r2, #0]
 8006a62:	e00b      	b.n	8006a7c <HAL_RCC_OscConfig+0xd8>
 8006a64:	4b71      	ldr	r3, [pc, #452]	; (8006c2c <HAL_RCC_OscConfig+0x288>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a70      	ldr	r2, [pc, #448]	; (8006c2c <HAL_RCC_OscConfig+0x288>)
 8006a6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a6e:	6013      	str	r3, [r2, #0]
 8006a70:	4b6e      	ldr	r3, [pc, #440]	; (8006c2c <HAL_RCC_OscConfig+0x288>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a6d      	ldr	r2, [pc, #436]	; (8006c2c <HAL_RCC_OscConfig+0x288>)
 8006a76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d013      	beq.n	8006aac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a84:	f7fc fa9a 	bl	8002fbc <HAL_GetTick>
 8006a88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006a8a:	e008      	b.n	8006a9e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a8c:	f7fc fa96 	bl	8002fbc <HAL_GetTick>
 8006a90:	4602      	mov	r2, r0
 8006a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a94:	1ad3      	subs	r3, r2, r3
 8006a96:	2b64      	cmp	r3, #100	; 0x64
 8006a98:	d901      	bls.n	8006a9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006a9a:	2303      	movs	r3, #3
 8006a9c:	e3d4      	b.n	8007248 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006a9e:	4b63      	ldr	r3, [pc, #396]	; (8006c2c <HAL_RCC_OscConfig+0x288>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d0f0      	beq.n	8006a8c <HAL_RCC_OscConfig+0xe8>
 8006aaa:	e014      	b.n	8006ad6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aac:	f7fc fa86 	bl	8002fbc <HAL_GetTick>
 8006ab0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006ab2:	e008      	b.n	8006ac6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ab4:	f7fc fa82 	bl	8002fbc <HAL_GetTick>
 8006ab8:	4602      	mov	r2, r0
 8006aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006abc:	1ad3      	subs	r3, r2, r3
 8006abe:	2b64      	cmp	r3, #100	; 0x64
 8006ac0:	d901      	bls.n	8006ac6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006ac2:	2303      	movs	r3, #3
 8006ac4:	e3c0      	b.n	8007248 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006ac6:	4b59      	ldr	r3, [pc, #356]	; (8006c2c <HAL_RCC_OscConfig+0x288>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d1f0      	bne.n	8006ab4 <HAL_RCC_OscConfig+0x110>
 8006ad2:	e000      	b.n	8006ad6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ad4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f003 0302 	and.w	r3, r3, #2
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	f000 80ca 	beq.w	8006c78 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ae4:	4b51      	ldr	r3, [pc, #324]	; (8006c2c <HAL_RCC_OscConfig+0x288>)
 8006ae6:	691b      	ldr	r3, [r3, #16]
 8006ae8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006aec:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006aee:	4b4f      	ldr	r3, [pc, #316]	; (8006c2c <HAL_RCC_OscConfig+0x288>)
 8006af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006af2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006af4:	6a3b      	ldr	r3, [r7, #32]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d007      	beq.n	8006b0a <HAL_RCC_OscConfig+0x166>
 8006afa:	6a3b      	ldr	r3, [r7, #32]
 8006afc:	2b18      	cmp	r3, #24
 8006afe:	d156      	bne.n	8006bae <HAL_RCC_OscConfig+0x20a>
 8006b00:	69fb      	ldr	r3, [r7, #28]
 8006b02:	f003 0303 	and.w	r3, r3, #3
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d151      	bne.n	8006bae <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b0a:	4b48      	ldr	r3, [pc, #288]	; (8006c2c <HAL_RCC_OscConfig+0x288>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f003 0304 	and.w	r3, r3, #4
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d005      	beq.n	8006b22 <HAL_RCC_OscConfig+0x17e>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	68db      	ldr	r3, [r3, #12]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d101      	bne.n	8006b22 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e392      	b.n	8007248 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006b22:	4b42      	ldr	r3, [pc, #264]	; (8006c2c <HAL_RCC_OscConfig+0x288>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f023 0219 	bic.w	r2, r3, #25
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	68db      	ldr	r3, [r3, #12]
 8006b2e:	493f      	ldr	r1, [pc, #252]	; (8006c2c <HAL_RCC_OscConfig+0x288>)
 8006b30:	4313      	orrs	r3, r2
 8006b32:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b34:	f7fc fa42 	bl	8002fbc <HAL_GetTick>
 8006b38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b3a:	e008      	b.n	8006b4e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b3c:	f7fc fa3e 	bl	8002fbc <HAL_GetTick>
 8006b40:	4602      	mov	r2, r0
 8006b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b44:	1ad3      	subs	r3, r2, r3
 8006b46:	2b02      	cmp	r3, #2
 8006b48:	d901      	bls.n	8006b4e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	e37c      	b.n	8007248 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b4e:	4b37      	ldr	r3, [pc, #220]	; (8006c2c <HAL_RCC_OscConfig+0x288>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f003 0304 	and.w	r3, r3, #4
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d0f0      	beq.n	8006b3c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b5a:	f7fc fa5f 	bl	800301c <HAL_GetREVID>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	f241 0203 	movw	r2, #4099	; 0x1003
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d817      	bhi.n	8006b98 <HAL_RCC_OscConfig+0x1f4>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	691b      	ldr	r3, [r3, #16]
 8006b6c:	2b40      	cmp	r3, #64	; 0x40
 8006b6e:	d108      	bne.n	8006b82 <HAL_RCC_OscConfig+0x1de>
 8006b70:	4b2e      	ldr	r3, [pc, #184]	; (8006c2c <HAL_RCC_OscConfig+0x288>)
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006b78:	4a2c      	ldr	r2, [pc, #176]	; (8006c2c <HAL_RCC_OscConfig+0x288>)
 8006b7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b7e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b80:	e07a      	b.n	8006c78 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b82:	4b2a      	ldr	r3, [pc, #168]	; (8006c2c <HAL_RCC_OscConfig+0x288>)
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	691b      	ldr	r3, [r3, #16]
 8006b8e:	031b      	lsls	r3, r3, #12
 8006b90:	4926      	ldr	r1, [pc, #152]	; (8006c2c <HAL_RCC_OscConfig+0x288>)
 8006b92:	4313      	orrs	r3, r2
 8006b94:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b96:	e06f      	b.n	8006c78 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b98:	4b24      	ldr	r3, [pc, #144]	; (8006c2c <HAL_RCC_OscConfig+0x288>)
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	691b      	ldr	r3, [r3, #16]
 8006ba4:	061b      	lsls	r3, r3, #24
 8006ba6:	4921      	ldr	r1, [pc, #132]	; (8006c2c <HAL_RCC_OscConfig+0x288>)
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006bac:	e064      	b.n	8006c78 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	68db      	ldr	r3, [r3, #12]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d047      	beq.n	8006c46 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006bb6:	4b1d      	ldr	r3, [pc, #116]	; (8006c2c <HAL_RCC_OscConfig+0x288>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f023 0219 	bic.w	r2, r3, #25
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	68db      	ldr	r3, [r3, #12]
 8006bc2:	491a      	ldr	r1, [pc, #104]	; (8006c2c <HAL_RCC_OscConfig+0x288>)
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bc8:	f7fc f9f8 	bl	8002fbc <HAL_GetTick>
 8006bcc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006bce:	e008      	b.n	8006be2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006bd0:	f7fc f9f4 	bl	8002fbc <HAL_GetTick>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd8:	1ad3      	subs	r3, r2, r3
 8006bda:	2b02      	cmp	r3, #2
 8006bdc:	d901      	bls.n	8006be2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006bde:	2303      	movs	r3, #3
 8006be0:	e332      	b.n	8007248 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006be2:	4b12      	ldr	r3, [pc, #72]	; (8006c2c <HAL_RCC_OscConfig+0x288>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f003 0304 	and.w	r3, r3, #4
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d0f0      	beq.n	8006bd0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bee:	f7fc fa15 	bl	800301c <HAL_GetREVID>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	f241 0203 	movw	r2, #4099	; 0x1003
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d819      	bhi.n	8006c30 <HAL_RCC_OscConfig+0x28c>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	691b      	ldr	r3, [r3, #16]
 8006c00:	2b40      	cmp	r3, #64	; 0x40
 8006c02:	d108      	bne.n	8006c16 <HAL_RCC_OscConfig+0x272>
 8006c04:	4b09      	ldr	r3, [pc, #36]	; (8006c2c <HAL_RCC_OscConfig+0x288>)
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006c0c:	4a07      	ldr	r2, [pc, #28]	; (8006c2c <HAL_RCC_OscConfig+0x288>)
 8006c0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c12:	6053      	str	r3, [r2, #4]
 8006c14:	e030      	b.n	8006c78 <HAL_RCC_OscConfig+0x2d4>
 8006c16:	4b05      	ldr	r3, [pc, #20]	; (8006c2c <HAL_RCC_OscConfig+0x288>)
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	691b      	ldr	r3, [r3, #16]
 8006c22:	031b      	lsls	r3, r3, #12
 8006c24:	4901      	ldr	r1, [pc, #4]	; (8006c2c <HAL_RCC_OscConfig+0x288>)
 8006c26:	4313      	orrs	r3, r2
 8006c28:	604b      	str	r3, [r1, #4]
 8006c2a:	e025      	b.n	8006c78 <HAL_RCC_OscConfig+0x2d4>
 8006c2c:	58024400 	.word	0x58024400
 8006c30:	4b9a      	ldr	r3, [pc, #616]	; (8006e9c <HAL_RCC_OscConfig+0x4f8>)
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	691b      	ldr	r3, [r3, #16]
 8006c3c:	061b      	lsls	r3, r3, #24
 8006c3e:	4997      	ldr	r1, [pc, #604]	; (8006e9c <HAL_RCC_OscConfig+0x4f8>)
 8006c40:	4313      	orrs	r3, r2
 8006c42:	604b      	str	r3, [r1, #4]
 8006c44:	e018      	b.n	8006c78 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c46:	4b95      	ldr	r3, [pc, #596]	; (8006e9c <HAL_RCC_OscConfig+0x4f8>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a94      	ldr	r2, [pc, #592]	; (8006e9c <HAL_RCC_OscConfig+0x4f8>)
 8006c4c:	f023 0301 	bic.w	r3, r3, #1
 8006c50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c52:	f7fc f9b3 	bl	8002fbc <HAL_GetTick>
 8006c56:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006c58:	e008      	b.n	8006c6c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c5a:	f7fc f9af 	bl	8002fbc <HAL_GetTick>
 8006c5e:	4602      	mov	r2, r0
 8006c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c62:	1ad3      	subs	r3, r2, r3
 8006c64:	2b02      	cmp	r3, #2
 8006c66:	d901      	bls.n	8006c6c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006c68:	2303      	movs	r3, #3
 8006c6a:	e2ed      	b.n	8007248 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006c6c:	4b8b      	ldr	r3, [pc, #556]	; (8006e9c <HAL_RCC_OscConfig+0x4f8>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f003 0304 	and.w	r3, r3, #4
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d1f0      	bne.n	8006c5a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f003 0310 	and.w	r3, r3, #16
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	f000 80a9 	beq.w	8006dd8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c86:	4b85      	ldr	r3, [pc, #532]	; (8006e9c <HAL_RCC_OscConfig+0x4f8>)
 8006c88:	691b      	ldr	r3, [r3, #16]
 8006c8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c8e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006c90:	4b82      	ldr	r3, [pc, #520]	; (8006e9c <HAL_RCC_OscConfig+0x4f8>)
 8006c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c94:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006c96:	69bb      	ldr	r3, [r7, #24]
 8006c98:	2b08      	cmp	r3, #8
 8006c9a:	d007      	beq.n	8006cac <HAL_RCC_OscConfig+0x308>
 8006c9c:	69bb      	ldr	r3, [r7, #24]
 8006c9e:	2b18      	cmp	r3, #24
 8006ca0:	d13a      	bne.n	8006d18 <HAL_RCC_OscConfig+0x374>
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	f003 0303 	and.w	r3, r3, #3
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d135      	bne.n	8006d18 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006cac:	4b7b      	ldr	r3, [pc, #492]	; (8006e9c <HAL_RCC_OscConfig+0x4f8>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d005      	beq.n	8006cc4 <HAL_RCC_OscConfig+0x320>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	69db      	ldr	r3, [r3, #28]
 8006cbc:	2b80      	cmp	r3, #128	; 0x80
 8006cbe:	d001      	beq.n	8006cc4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e2c1      	b.n	8007248 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006cc4:	f7fc f9aa 	bl	800301c <HAL_GetREVID>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	f241 0203 	movw	r2, #4099	; 0x1003
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d817      	bhi.n	8006d02 <HAL_RCC_OscConfig+0x35e>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6a1b      	ldr	r3, [r3, #32]
 8006cd6:	2b20      	cmp	r3, #32
 8006cd8:	d108      	bne.n	8006cec <HAL_RCC_OscConfig+0x348>
 8006cda:	4b70      	ldr	r3, [pc, #448]	; (8006e9c <HAL_RCC_OscConfig+0x4f8>)
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006ce2:	4a6e      	ldr	r2, [pc, #440]	; (8006e9c <HAL_RCC_OscConfig+0x4f8>)
 8006ce4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ce8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006cea:	e075      	b.n	8006dd8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006cec:	4b6b      	ldr	r3, [pc, #428]	; (8006e9c <HAL_RCC_OscConfig+0x4f8>)
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6a1b      	ldr	r3, [r3, #32]
 8006cf8:	069b      	lsls	r3, r3, #26
 8006cfa:	4968      	ldr	r1, [pc, #416]	; (8006e9c <HAL_RCC_OscConfig+0x4f8>)
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006d00:	e06a      	b.n	8006dd8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006d02:	4b66      	ldr	r3, [pc, #408]	; (8006e9c <HAL_RCC_OscConfig+0x4f8>)
 8006d04:	68db      	ldr	r3, [r3, #12]
 8006d06:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6a1b      	ldr	r3, [r3, #32]
 8006d0e:	061b      	lsls	r3, r3, #24
 8006d10:	4962      	ldr	r1, [pc, #392]	; (8006e9c <HAL_RCC_OscConfig+0x4f8>)
 8006d12:	4313      	orrs	r3, r2
 8006d14:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006d16:	e05f      	b.n	8006dd8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	69db      	ldr	r3, [r3, #28]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d042      	beq.n	8006da6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006d20:	4b5e      	ldr	r3, [pc, #376]	; (8006e9c <HAL_RCC_OscConfig+0x4f8>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a5d      	ldr	r2, [pc, #372]	; (8006e9c <HAL_RCC_OscConfig+0x4f8>)
 8006d26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d2c:	f7fc f946 	bl	8002fbc <HAL_GetTick>
 8006d30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006d32:	e008      	b.n	8006d46 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006d34:	f7fc f942 	bl	8002fbc <HAL_GetTick>
 8006d38:	4602      	mov	r2, r0
 8006d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3c:	1ad3      	subs	r3, r2, r3
 8006d3e:	2b02      	cmp	r3, #2
 8006d40:	d901      	bls.n	8006d46 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006d42:	2303      	movs	r3, #3
 8006d44:	e280      	b.n	8007248 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006d46:	4b55      	ldr	r3, [pc, #340]	; (8006e9c <HAL_RCC_OscConfig+0x4f8>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d0f0      	beq.n	8006d34 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006d52:	f7fc f963 	bl	800301c <HAL_GetREVID>
 8006d56:	4603      	mov	r3, r0
 8006d58:	f241 0203 	movw	r2, #4099	; 0x1003
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d817      	bhi.n	8006d90 <HAL_RCC_OscConfig+0x3ec>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6a1b      	ldr	r3, [r3, #32]
 8006d64:	2b20      	cmp	r3, #32
 8006d66:	d108      	bne.n	8006d7a <HAL_RCC_OscConfig+0x3d6>
 8006d68:	4b4c      	ldr	r3, [pc, #304]	; (8006e9c <HAL_RCC_OscConfig+0x4f8>)
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006d70:	4a4a      	ldr	r2, [pc, #296]	; (8006e9c <HAL_RCC_OscConfig+0x4f8>)
 8006d72:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d76:	6053      	str	r3, [r2, #4]
 8006d78:	e02e      	b.n	8006dd8 <HAL_RCC_OscConfig+0x434>
 8006d7a:	4b48      	ldr	r3, [pc, #288]	; (8006e9c <HAL_RCC_OscConfig+0x4f8>)
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6a1b      	ldr	r3, [r3, #32]
 8006d86:	069b      	lsls	r3, r3, #26
 8006d88:	4944      	ldr	r1, [pc, #272]	; (8006e9c <HAL_RCC_OscConfig+0x4f8>)
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	604b      	str	r3, [r1, #4]
 8006d8e:	e023      	b.n	8006dd8 <HAL_RCC_OscConfig+0x434>
 8006d90:	4b42      	ldr	r3, [pc, #264]	; (8006e9c <HAL_RCC_OscConfig+0x4f8>)
 8006d92:	68db      	ldr	r3, [r3, #12]
 8006d94:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6a1b      	ldr	r3, [r3, #32]
 8006d9c:	061b      	lsls	r3, r3, #24
 8006d9e:	493f      	ldr	r1, [pc, #252]	; (8006e9c <HAL_RCC_OscConfig+0x4f8>)
 8006da0:	4313      	orrs	r3, r2
 8006da2:	60cb      	str	r3, [r1, #12]
 8006da4:	e018      	b.n	8006dd8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006da6:	4b3d      	ldr	r3, [pc, #244]	; (8006e9c <HAL_RCC_OscConfig+0x4f8>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a3c      	ldr	r2, [pc, #240]	; (8006e9c <HAL_RCC_OscConfig+0x4f8>)
 8006dac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006db0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006db2:	f7fc f903 	bl	8002fbc <HAL_GetTick>
 8006db6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006db8:	e008      	b.n	8006dcc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006dba:	f7fc f8ff 	bl	8002fbc <HAL_GetTick>
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc2:	1ad3      	subs	r3, r2, r3
 8006dc4:	2b02      	cmp	r3, #2
 8006dc6:	d901      	bls.n	8006dcc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006dc8:	2303      	movs	r3, #3
 8006dca:	e23d      	b.n	8007248 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006dcc:	4b33      	ldr	r3, [pc, #204]	; (8006e9c <HAL_RCC_OscConfig+0x4f8>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d1f0      	bne.n	8006dba <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f003 0308 	and.w	r3, r3, #8
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d036      	beq.n	8006e52 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	695b      	ldr	r3, [r3, #20]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d019      	beq.n	8006e20 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006dec:	4b2b      	ldr	r3, [pc, #172]	; (8006e9c <HAL_RCC_OscConfig+0x4f8>)
 8006dee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006df0:	4a2a      	ldr	r2, [pc, #168]	; (8006e9c <HAL_RCC_OscConfig+0x4f8>)
 8006df2:	f043 0301 	orr.w	r3, r3, #1
 8006df6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006df8:	f7fc f8e0 	bl	8002fbc <HAL_GetTick>
 8006dfc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006dfe:	e008      	b.n	8006e12 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e00:	f7fc f8dc 	bl	8002fbc <HAL_GetTick>
 8006e04:	4602      	mov	r2, r0
 8006e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e08:	1ad3      	subs	r3, r2, r3
 8006e0a:	2b02      	cmp	r3, #2
 8006e0c:	d901      	bls.n	8006e12 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006e0e:	2303      	movs	r3, #3
 8006e10:	e21a      	b.n	8007248 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006e12:	4b22      	ldr	r3, [pc, #136]	; (8006e9c <HAL_RCC_OscConfig+0x4f8>)
 8006e14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e16:	f003 0302 	and.w	r3, r3, #2
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d0f0      	beq.n	8006e00 <HAL_RCC_OscConfig+0x45c>
 8006e1e:	e018      	b.n	8006e52 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e20:	4b1e      	ldr	r3, [pc, #120]	; (8006e9c <HAL_RCC_OscConfig+0x4f8>)
 8006e22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e24:	4a1d      	ldr	r2, [pc, #116]	; (8006e9c <HAL_RCC_OscConfig+0x4f8>)
 8006e26:	f023 0301 	bic.w	r3, r3, #1
 8006e2a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e2c:	f7fc f8c6 	bl	8002fbc <HAL_GetTick>
 8006e30:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006e32:	e008      	b.n	8006e46 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e34:	f7fc f8c2 	bl	8002fbc <HAL_GetTick>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3c:	1ad3      	subs	r3, r2, r3
 8006e3e:	2b02      	cmp	r3, #2
 8006e40:	d901      	bls.n	8006e46 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006e42:	2303      	movs	r3, #3
 8006e44:	e200      	b.n	8007248 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006e46:	4b15      	ldr	r3, [pc, #84]	; (8006e9c <HAL_RCC_OscConfig+0x4f8>)
 8006e48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e4a:	f003 0302 	and.w	r3, r3, #2
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d1f0      	bne.n	8006e34 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f003 0320 	and.w	r3, r3, #32
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d039      	beq.n	8006ed2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	699b      	ldr	r3, [r3, #24]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d01c      	beq.n	8006ea0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006e66:	4b0d      	ldr	r3, [pc, #52]	; (8006e9c <HAL_RCC_OscConfig+0x4f8>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a0c      	ldr	r2, [pc, #48]	; (8006e9c <HAL_RCC_OscConfig+0x4f8>)
 8006e6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006e70:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006e72:	f7fc f8a3 	bl	8002fbc <HAL_GetTick>
 8006e76:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006e78:	e008      	b.n	8006e8c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006e7a:	f7fc f89f 	bl	8002fbc <HAL_GetTick>
 8006e7e:	4602      	mov	r2, r0
 8006e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e82:	1ad3      	subs	r3, r2, r3
 8006e84:	2b02      	cmp	r3, #2
 8006e86:	d901      	bls.n	8006e8c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006e88:	2303      	movs	r3, #3
 8006e8a:	e1dd      	b.n	8007248 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006e8c:	4b03      	ldr	r3, [pc, #12]	; (8006e9c <HAL_RCC_OscConfig+0x4f8>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d0f0      	beq.n	8006e7a <HAL_RCC_OscConfig+0x4d6>
 8006e98:	e01b      	b.n	8006ed2 <HAL_RCC_OscConfig+0x52e>
 8006e9a:	bf00      	nop
 8006e9c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006ea0:	4b9b      	ldr	r3, [pc, #620]	; (8007110 <HAL_RCC_OscConfig+0x76c>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a9a      	ldr	r2, [pc, #616]	; (8007110 <HAL_RCC_OscConfig+0x76c>)
 8006ea6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006eaa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006eac:	f7fc f886 	bl	8002fbc <HAL_GetTick>
 8006eb0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006eb2:	e008      	b.n	8006ec6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006eb4:	f7fc f882 	bl	8002fbc <HAL_GetTick>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ebc:	1ad3      	subs	r3, r2, r3
 8006ebe:	2b02      	cmp	r3, #2
 8006ec0:	d901      	bls.n	8006ec6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006ec2:	2303      	movs	r3, #3
 8006ec4:	e1c0      	b.n	8007248 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006ec6:	4b92      	ldr	r3, [pc, #584]	; (8007110 <HAL_RCC_OscConfig+0x76c>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d1f0      	bne.n	8006eb4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f003 0304 	and.w	r3, r3, #4
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	f000 8081 	beq.w	8006fe2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006ee0:	4b8c      	ldr	r3, [pc, #560]	; (8007114 <HAL_RCC_OscConfig+0x770>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a8b      	ldr	r2, [pc, #556]	; (8007114 <HAL_RCC_OscConfig+0x770>)
 8006ee6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006eea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006eec:	f7fc f866 	bl	8002fbc <HAL_GetTick>
 8006ef0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ef2:	e008      	b.n	8006f06 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ef4:	f7fc f862 	bl	8002fbc <HAL_GetTick>
 8006ef8:	4602      	mov	r2, r0
 8006efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efc:	1ad3      	subs	r3, r2, r3
 8006efe:	2b64      	cmp	r3, #100	; 0x64
 8006f00:	d901      	bls.n	8006f06 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006f02:	2303      	movs	r3, #3
 8006f04:	e1a0      	b.n	8007248 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f06:	4b83      	ldr	r3, [pc, #524]	; (8007114 <HAL_RCC_OscConfig+0x770>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d0f0      	beq.n	8006ef4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d106      	bne.n	8006f28 <HAL_RCC_OscConfig+0x584>
 8006f1a:	4b7d      	ldr	r3, [pc, #500]	; (8007110 <HAL_RCC_OscConfig+0x76c>)
 8006f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f1e:	4a7c      	ldr	r2, [pc, #496]	; (8007110 <HAL_RCC_OscConfig+0x76c>)
 8006f20:	f043 0301 	orr.w	r3, r3, #1
 8006f24:	6713      	str	r3, [r2, #112]	; 0x70
 8006f26:	e02d      	b.n	8006f84 <HAL_RCC_OscConfig+0x5e0>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d10c      	bne.n	8006f4a <HAL_RCC_OscConfig+0x5a6>
 8006f30:	4b77      	ldr	r3, [pc, #476]	; (8007110 <HAL_RCC_OscConfig+0x76c>)
 8006f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f34:	4a76      	ldr	r2, [pc, #472]	; (8007110 <HAL_RCC_OscConfig+0x76c>)
 8006f36:	f023 0301 	bic.w	r3, r3, #1
 8006f3a:	6713      	str	r3, [r2, #112]	; 0x70
 8006f3c:	4b74      	ldr	r3, [pc, #464]	; (8007110 <HAL_RCC_OscConfig+0x76c>)
 8006f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f40:	4a73      	ldr	r2, [pc, #460]	; (8007110 <HAL_RCC_OscConfig+0x76c>)
 8006f42:	f023 0304 	bic.w	r3, r3, #4
 8006f46:	6713      	str	r3, [r2, #112]	; 0x70
 8006f48:	e01c      	b.n	8006f84 <HAL_RCC_OscConfig+0x5e0>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	2b05      	cmp	r3, #5
 8006f50:	d10c      	bne.n	8006f6c <HAL_RCC_OscConfig+0x5c8>
 8006f52:	4b6f      	ldr	r3, [pc, #444]	; (8007110 <HAL_RCC_OscConfig+0x76c>)
 8006f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f56:	4a6e      	ldr	r2, [pc, #440]	; (8007110 <HAL_RCC_OscConfig+0x76c>)
 8006f58:	f043 0304 	orr.w	r3, r3, #4
 8006f5c:	6713      	str	r3, [r2, #112]	; 0x70
 8006f5e:	4b6c      	ldr	r3, [pc, #432]	; (8007110 <HAL_RCC_OscConfig+0x76c>)
 8006f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f62:	4a6b      	ldr	r2, [pc, #428]	; (8007110 <HAL_RCC_OscConfig+0x76c>)
 8006f64:	f043 0301 	orr.w	r3, r3, #1
 8006f68:	6713      	str	r3, [r2, #112]	; 0x70
 8006f6a:	e00b      	b.n	8006f84 <HAL_RCC_OscConfig+0x5e0>
 8006f6c:	4b68      	ldr	r3, [pc, #416]	; (8007110 <HAL_RCC_OscConfig+0x76c>)
 8006f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f70:	4a67      	ldr	r2, [pc, #412]	; (8007110 <HAL_RCC_OscConfig+0x76c>)
 8006f72:	f023 0301 	bic.w	r3, r3, #1
 8006f76:	6713      	str	r3, [r2, #112]	; 0x70
 8006f78:	4b65      	ldr	r3, [pc, #404]	; (8007110 <HAL_RCC_OscConfig+0x76c>)
 8006f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f7c:	4a64      	ldr	r2, [pc, #400]	; (8007110 <HAL_RCC_OscConfig+0x76c>)
 8006f7e:	f023 0304 	bic.w	r3, r3, #4
 8006f82:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d015      	beq.n	8006fb8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f8c:	f7fc f816 	bl	8002fbc <HAL_GetTick>
 8006f90:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006f92:	e00a      	b.n	8006faa <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f94:	f7fc f812 	bl	8002fbc <HAL_GetTick>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9c:	1ad3      	subs	r3, r2, r3
 8006f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d901      	bls.n	8006faa <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006fa6:	2303      	movs	r3, #3
 8006fa8:	e14e      	b.n	8007248 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006faa:	4b59      	ldr	r3, [pc, #356]	; (8007110 <HAL_RCC_OscConfig+0x76c>)
 8006fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fae:	f003 0302 	and.w	r3, r3, #2
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d0ee      	beq.n	8006f94 <HAL_RCC_OscConfig+0x5f0>
 8006fb6:	e014      	b.n	8006fe2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fb8:	f7fc f800 	bl	8002fbc <HAL_GetTick>
 8006fbc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006fbe:	e00a      	b.n	8006fd6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006fc0:	f7fb fffc 	bl	8002fbc <HAL_GetTick>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc8:	1ad3      	subs	r3, r2, r3
 8006fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d901      	bls.n	8006fd6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006fd2:	2303      	movs	r3, #3
 8006fd4:	e138      	b.n	8007248 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006fd6:	4b4e      	ldr	r3, [pc, #312]	; (8007110 <HAL_RCC_OscConfig+0x76c>)
 8006fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fda:	f003 0302 	and.w	r3, r3, #2
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d1ee      	bne.n	8006fc0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	f000 812d 	beq.w	8007246 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006fec:	4b48      	ldr	r3, [pc, #288]	; (8007110 <HAL_RCC_OscConfig+0x76c>)
 8006fee:	691b      	ldr	r3, [r3, #16]
 8006ff0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ff4:	2b18      	cmp	r3, #24
 8006ff6:	f000 80bd 	beq.w	8007174 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ffe:	2b02      	cmp	r3, #2
 8007000:	f040 809e 	bne.w	8007140 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007004:	4b42      	ldr	r3, [pc, #264]	; (8007110 <HAL_RCC_OscConfig+0x76c>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a41      	ldr	r2, [pc, #260]	; (8007110 <HAL_RCC_OscConfig+0x76c>)
 800700a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800700e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007010:	f7fb ffd4 	bl	8002fbc <HAL_GetTick>
 8007014:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007016:	e008      	b.n	800702a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007018:	f7fb ffd0 	bl	8002fbc <HAL_GetTick>
 800701c:	4602      	mov	r2, r0
 800701e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007020:	1ad3      	subs	r3, r2, r3
 8007022:	2b02      	cmp	r3, #2
 8007024:	d901      	bls.n	800702a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007026:	2303      	movs	r3, #3
 8007028:	e10e      	b.n	8007248 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800702a:	4b39      	ldr	r3, [pc, #228]	; (8007110 <HAL_RCC_OscConfig+0x76c>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007032:	2b00      	cmp	r3, #0
 8007034:	d1f0      	bne.n	8007018 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007036:	4b36      	ldr	r3, [pc, #216]	; (8007110 <HAL_RCC_OscConfig+0x76c>)
 8007038:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800703a:	4b37      	ldr	r3, [pc, #220]	; (8007118 <HAL_RCC_OscConfig+0x774>)
 800703c:	4013      	ands	r3, r2
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007042:	687a      	ldr	r2, [r7, #4]
 8007044:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007046:	0112      	lsls	r2, r2, #4
 8007048:	430a      	orrs	r2, r1
 800704a:	4931      	ldr	r1, [pc, #196]	; (8007110 <HAL_RCC_OscConfig+0x76c>)
 800704c:	4313      	orrs	r3, r2
 800704e:	628b      	str	r3, [r1, #40]	; 0x28
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007054:	3b01      	subs	r3, #1
 8007056:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800705e:	3b01      	subs	r3, #1
 8007060:	025b      	lsls	r3, r3, #9
 8007062:	b29b      	uxth	r3, r3
 8007064:	431a      	orrs	r2, r3
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800706a:	3b01      	subs	r3, #1
 800706c:	041b      	lsls	r3, r3, #16
 800706e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007072:	431a      	orrs	r2, r3
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007078:	3b01      	subs	r3, #1
 800707a:	061b      	lsls	r3, r3, #24
 800707c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007080:	4923      	ldr	r1, [pc, #140]	; (8007110 <HAL_RCC_OscConfig+0x76c>)
 8007082:	4313      	orrs	r3, r2
 8007084:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007086:	4b22      	ldr	r3, [pc, #136]	; (8007110 <HAL_RCC_OscConfig+0x76c>)
 8007088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800708a:	4a21      	ldr	r2, [pc, #132]	; (8007110 <HAL_RCC_OscConfig+0x76c>)
 800708c:	f023 0301 	bic.w	r3, r3, #1
 8007090:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007092:	4b1f      	ldr	r3, [pc, #124]	; (8007110 <HAL_RCC_OscConfig+0x76c>)
 8007094:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007096:	4b21      	ldr	r3, [pc, #132]	; (800711c <HAL_RCC_OscConfig+0x778>)
 8007098:	4013      	ands	r3, r2
 800709a:	687a      	ldr	r2, [r7, #4]
 800709c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800709e:	00d2      	lsls	r2, r2, #3
 80070a0:	491b      	ldr	r1, [pc, #108]	; (8007110 <HAL_RCC_OscConfig+0x76c>)
 80070a2:	4313      	orrs	r3, r2
 80070a4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80070a6:	4b1a      	ldr	r3, [pc, #104]	; (8007110 <HAL_RCC_OscConfig+0x76c>)
 80070a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070aa:	f023 020c 	bic.w	r2, r3, #12
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b2:	4917      	ldr	r1, [pc, #92]	; (8007110 <HAL_RCC_OscConfig+0x76c>)
 80070b4:	4313      	orrs	r3, r2
 80070b6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80070b8:	4b15      	ldr	r3, [pc, #84]	; (8007110 <HAL_RCC_OscConfig+0x76c>)
 80070ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070bc:	f023 0202 	bic.w	r2, r3, #2
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070c4:	4912      	ldr	r1, [pc, #72]	; (8007110 <HAL_RCC_OscConfig+0x76c>)
 80070c6:	4313      	orrs	r3, r2
 80070c8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80070ca:	4b11      	ldr	r3, [pc, #68]	; (8007110 <HAL_RCC_OscConfig+0x76c>)
 80070cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ce:	4a10      	ldr	r2, [pc, #64]	; (8007110 <HAL_RCC_OscConfig+0x76c>)
 80070d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070d4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070d6:	4b0e      	ldr	r3, [pc, #56]	; (8007110 <HAL_RCC_OscConfig+0x76c>)
 80070d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070da:	4a0d      	ldr	r2, [pc, #52]	; (8007110 <HAL_RCC_OscConfig+0x76c>)
 80070dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070e0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80070e2:	4b0b      	ldr	r3, [pc, #44]	; (8007110 <HAL_RCC_OscConfig+0x76c>)
 80070e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070e6:	4a0a      	ldr	r2, [pc, #40]	; (8007110 <HAL_RCC_OscConfig+0x76c>)
 80070e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80070ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80070ee:	4b08      	ldr	r3, [pc, #32]	; (8007110 <HAL_RCC_OscConfig+0x76c>)
 80070f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f2:	4a07      	ldr	r2, [pc, #28]	; (8007110 <HAL_RCC_OscConfig+0x76c>)
 80070f4:	f043 0301 	orr.w	r3, r3, #1
 80070f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80070fa:	4b05      	ldr	r3, [pc, #20]	; (8007110 <HAL_RCC_OscConfig+0x76c>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a04      	ldr	r2, [pc, #16]	; (8007110 <HAL_RCC_OscConfig+0x76c>)
 8007100:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007104:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007106:	f7fb ff59 	bl	8002fbc <HAL_GetTick>
 800710a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800710c:	e011      	b.n	8007132 <HAL_RCC_OscConfig+0x78e>
 800710e:	bf00      	nop
 8007110:	58024400 	.word	0x58024400
 8007114:	58024800 	.word	0x58024800
 8007118:	fffffc0c 	.word	0xfffffc0c
 800711c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007120:	f7fb ff4c 	bl	8002fbc <HAL_GetTick>
 8007124:	4602      	mov	r2, r0
 8007126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007128:	1ad3      	subs	r3, r2, r3
 800712a:	2b02      	cmp	r3, #2
 800712c:	d901      	bls.n	8007132 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800712e:	2303      	movs	r3, #3
 8007130:	e08a      	b.n	8007248 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007132:	4b47      	ldr	r3, [pc, #284]	; (8007250 <HAL_RCC_OscConfig+0x8ac>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800713a:	2b00      	cmp	r3, #0
 800713c:	d0f0      	beq.n	8007120 <HAL_RCC_OscConfig+0x77c>
 800713e:	e082      	b.n	8007246 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007140:	4b43      	ldr	r3, [pc, #268]	; (8007250 <HAL_RCC_OscConfig+0x8ac>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a42      	ldr	r2, [pc, #264]	; (8007250 <HAL_RCC_OscConfig+0x8ac>)
 8007146:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800714a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800714c:	f7fb ff36 	bl	8002fbc <HAL_GetTick>
 8007150:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007152:	e008      	b.n	8007166 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007154:	f7fb ff32 	bl	8002fbc <HAL_GetTick>
 8007158:	4602      	mov	r2, r0
 800715a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715c:	1ad3      	subs	r3, r2, r3
 800715e:	2b02      	cmp	r3, #2
 8007160:	d901      	bls.n	8007166 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8007162:	2303      	movs	r3, #3
 8007164:	e070      	b.n	8007248 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007166:	4b3a      	ldr	r3, [pc, #232]	; (8007250 <HAL_RCC_OscConfig+0x8ac>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800716e:	2b00      	cmp	r3, #0
 8007170:	d1f0      	bne.n	8007154 <HAL_RCC_OscConfig+0x7b0>
 8007172:	e068      	b.n	8007246 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007174:	4b36      	ldr	r3, [pc, #216]	; (8007250 <HAL_RCC_OscConfig+0x8ac>)
 8007176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007178:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800717a:	4b35      	ldr	r3, [pc, #212]	; (8007250 <HAL_RCC_OscConfig+0x8ac>)
 800717c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800717e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007184:	2b01      	cmp	r3, #1
 8007186:	d031      	beq.n	80071ec <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	f003 0203 	and.w	r2, r3, #3
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007192:	429a      	cmp	r2, r3
 8007194:	d12a      	bne.n	80071ec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	091b      	lsrs	r3, r3, #4
 800719a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d122      	bne.n	80071ec <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071b0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d11a      	bne.n	80071ec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	0a5b      	lsrs	r3, r3, #9
 80071ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071c2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d111      	bne.n	80071ec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	0c1b      	lsrs	r3, r3, #16
 80071cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d108      	bne.n	80071ec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	0e1b      	lsrs	r3, r3, #24
 80071de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071e6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d001      	beq.n	80071f0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80071ec:	2301      	movs	r3, #1
 80071ee:	e02b      	b.n	8007248 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80071f0:	4b17      	ldr	r3, [pc, #92]	; (8007250 <HAL_RCC_OscConfig+0x8ac>)
 80071f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071f4:	08db      	lsrs	r3, r3, #3
 80071f6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80071fa:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007200:	693a      	ldr	r2, [r7, #16]
 8007202:	429a      	cmp	r2, r3
 8007204:	d01f      	beq.n	8007246 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007206:	4b12      	ldr	r3, [pc, #72]	; (8007250 <HAL_RCC_OscConfig+0x8ac>)
 8007208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800720a:	4a11      	ldr	r2, [pc, #68]	; (8007250 <HAL_RCC_OscConfig+0x8ac>)
 800720c:	f023 0301 	bic.w	r3, r3, #1
 8007210:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007212:	f7fb fed3 	bl	8002fbc <HAL_GetTick>
 8007216:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007218:	bf00      	nop
 800721a:	f7fb fecf 	bl	8002fbc <HAL_GetTick>
 800721e:	4602      	mov	r2, r0
 8007220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007222:	4293      	cmp	r3, r2
 8007224:	d0f9      	beq.n	800721a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007226:	4b0a      	ldr	r3, [pc, #40]	; (8007250 <HAL_RCC_OscConfig+0x8ac>)
 8007228:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800722a:	4b0a      	ldr	r3, [pc, #40]	; (8007254 <HAL_RCC_OscConfig+0x8b0>)
 800722c:	4013      	ands	r3, r2
 800722e:	687a      	ldr	r2, [r7, #4]
 8007230:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007232:	00d2      	lsls	r2, r2, #3
 8007234:	4906      	ldr	r1, [pc, #24]	; (8007250 <HAL_RCC_OscConfig+0x8ac>)
 8007236:	4313      	orrs	r3, r2
 8007238:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800723a:	4b05      	ldr	r3, [pc, #20]	; (8007250 <HAL_RCC_OscConfig+0x8ac>)
 800723c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800723e:	4a04      	ldr	r2, [pc, #16]	; (8007250 <HAL_RCC_OscConfig+0x8ac>)
 8007240:	f043 0301 	orr.w	r3, r3, #1
 8007244:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007246:	2300      	movs	r3, #0
}
 8007248:	4618      	mov	r0, r3
 800724a:	3730      	adds	r7, #48	; 0x30
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}
 8007250:	58024400 	.word	0x58024400
 8007254:	ffff0007 	.word	0xffff0007

08007258 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b086      	sub	sp, #24
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d101      	bne.n	800726c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007268:	2301      	movs	r3, #1
 800726a:	e19c      	b.n	80075a6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800726c:	4b8a      	ldr	r3, [pc, #552]	; (8007498 <HAL_RCC_ClockConfig+0x240>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f003 030f 	and.w	r3, r3, #15
 8007274:	683a      	ldr	r2, [r7, #0]
 8007276:	429a      	cmp	r2, r3
 8007278:	d910      	bls.n	800729c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800727a:	4b87      	ldr	r3, [pc, #540]	; (8007498 <HAL_RCC_ClockConfig+0x240>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f023 020f 	bic.w	r2, r3, #15
 8007282:	4985      	ldr	r1, [pc, #532]	; (8007498 <HAL_RCC_ClockConfig+0x240>)
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	4313      	orrs	r3, r2
 8007288:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800728a:	4b83      	ldr	r3, [pc, #524]	; (8007498 <HAL_RCC_ClockConfig+0x240>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f003 030f 	and.w	r3, r3, #15
 8007292:	683a      	ldr	r2, [r7, #0]
 8007294:	429a      	cmp	r2, r3
 8007296:	d001      	beq.n	800729c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007298:	2301      	movs	r3, #1
 800729a:	e184      	b.n	80075a6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f003 0304 	and.w	r3, r3, #4
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d010      	beq.n	80072ca <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	691a      	ldr	r2, [r3, #16]
 80072ac:	4b7b      	ldr	r3, [pc, #492]	; (800749c <HAL_RCC_ClockConfig+0x244>)
 80072ae:	699b      	ldr	r3, [r3, #24]
 80072b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d908      	bls.n	80072ca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80072b8:	4b78      	ldr	r3, [pc, #480]	; (800749c <HAL_RCC_ClockConfig+0x244>)
 80072ba:	699b      	ldr	r3, [r3, #24]
 80072bc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	691b      	ldr	r3, [r3, #16]
 80072c4:	4975      	ldr	r1, [pc, #468]	; (800749c <HAL_RCC_ClockConfig+0x244>)
 80072c6:	4313      	orrs	r3, r2
 80072c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f003 0308 	and.w	r3, r3, #8
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d010      	beq.n	80072f8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	695a      	ldr	r2, [r3, #20]
 80072da:	4b70      	ldr	r3, [pc, #448]	; (800749c <HAL_RCC_ClockConfig+0x244>)
 80072dc:	69db      	ldr	r3, [r3, #28]
 80072de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80072e2:	429a      	cmp	r2, r3
 80072e4:	d908      	bls.n	80072f8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80072e6:	4b6d      	ldr	r3, [pc, #436]	; (800749c <HAL_RCC_ClockConfig+0x244>)
 80072e8:	69db      	ldr	r3, [r3, #28]
 80072ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	695b      	ldr	r3, [r3, #20]
 80072f2:	496a      	ldr	r1, [pc, #424]	; (800749c <HAL_RCC_ClockConfig+0x244>)
 80072f4:	4313      	orrs	r3, r2
 80072f6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f003 0310 	and.w	r3, r3, #16
 8007300:	2b00      	cmp	r3, #0
 8007302:	d010      	beq.n	8007326 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	699a      	ldr	r2, [r3, #24]
 8007308:	4b64      	ldr	r3, [pc, #400]	; (800749c <HAL_RCC_ClockConfig+0x244>)
 800730a:	69db      	ldr	r3, [r3, #28]
 800730c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007310:	429a      	cmp	r2, r3
 8007312:	d908      	bls.n	8007326 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007314:	4b61      	ldr	r3, [pc, #388]	; (800749c <HAL_RCC_ClockConfig+0x244>)
 8007316:	69db      	ldr	r3, [r3, #28]
 8007318:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	699b      	ldr	r3, [r3, #24]
 8007320:	495e      	ldr	r1, [pc, #376]	; (800749c <HAL_RCC_ClockConfig+0x244>)
 8007322:	4313      	orrs	r3, r2
 8007324:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f003 0320 	and.w	r3, r3, #32
 800732e:	2b00      	cmp	r3, #0
 8007330:	d010      	beq.n	8007354 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	69da      	ldr	r2, [r3, #28]
 8007336:	4b59      	ldr	r3, [pc, #356]	; (800749c <HAL_RCC_ClockConfig+0x244>)
 8007338:	6a1b      	ldr	r3, [r3, #32]
 800733a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800733e:	429a      	cmp	r2, r3
 8007340:	d908      	bls.n	8007354 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007342:	4b56      	ldr	r3, [pc, #344]	; (800749c <HAL_RCC_ClockConfig+0x244>)
 8007344:	6a1b      	ldr	r3, [r3, #32]
 8007346:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	69db      	ldr	r3, [r3, #28]
 800734e:	4953      	ldr	r1, [pc, #332]	; (800749c <HAL_RCC_ClockConfig+0x244>)
 8007350:	4313      	orrs	r3, r2
 8007352:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f003 0302 	and.w	r3, r3, #2
 800735c:	2b00      	cmp	r3, #0
 800735e:	d010      	beq.n	8007382 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	68da      	ldr	r2, [r3, #12]
 8007364:	4b4d      	ldr	r3, [pc, #308]	; (800749c <HAL_RCC_ClockConfig+0x244>)
 8007366:	699b      	ldr	r3, [r3, #24]
 8007368:	f003 030f 	and.w	r3, r3, #15
 800736c:	429a      	cmp	r2, r3
 800736e:	d908      	bls.n	8007382 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007370:	4b4a      	ldr	r3, [pc, #296]	; (800749c <HAL_RCC_ClockConfig+0x244>)
 8007372:	699b      	ldr	r3, [r3, #24]
 8007374:	f023 020f 	bic.w	r2, r3, #15
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	68db      	ldr	r3, [r3, #12]
 800737c:	4947      	ldr	r1, [pc, #284]	; (800749c <HAL_RCC_ClockConfig+0x244>)
 800737e:	4313      	orrs	r3, r2
 8007380:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f003 0301 	and.w	r3, r3, #1
 800738a:	2b00      	cmp	r3, #0
 800738c:	d055      	beq.n	800743a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800738e:	4b43      	ldr	r3, [pc, #268]	; (800749c <HAL_RCC_ClockConfig+0x244>)
 8007390:	699b      	ldr	r3, [r3, #24]
 8007392:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	4940      	ldr	r1, [pc, #256]	; (800749c <HAL_RCC_ClockConfig+0x244>)
 800739c:	4313      	orrs	r3, r2
 800739e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	2b02      	cmp	r3, #2
 80073a6:	d107      	bne.n	80073b8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80073a8:	4b3c      	ldr	r3, [pc, #240]	; (800749c <HAL_RCC_ClockConfig+0x244>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d121      	bne.n	80073f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80073b4:	2301      	movs	r3, #1
 80073b6:	e0f6      	b.n	80075a6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	2b03      	cmp	r3, #3
 80073be:	d107      	bne.n	80073d0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80073c0:	4b36      	ldr	r3, [pc, #216]	; (800749c <HAL_RCC_ClockConfig+0x244>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d115      	bne.n	80073f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80073cc:	2301      	movs	r3, #1
 80073ce:	e0ea      	b.n	80075a6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d107      	bne.n	80073e8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80073d8:	4b30      	ldr	r3, [pc, #192]	; (800749c <HAL_RCC_ClockConfig+0x244>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d109      	bne.n	80073f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80073e4:	2301      	movs	r3, #1
 80073e6:	e0de      	b.n	80075a6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80073e8:	4b2c      	ldr	r3, [pc, #176]	; (800749c <HAL_RCC_ClockConfig+0x244>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f003 0304 	and.w	r3, r3, #4
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d101      	bne.n	80073f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80073f4:	2301      	movs	r3, #1
 80073f6:	e0d6      	b.n	80075a6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80073f8:	4b28      	ldr	r3, [pc, #160]	; (800749c <HAL_RCC_ClockConfig+0x244>)
 80073fa:	691b      	ldr	r3, [r3, #16]
 80073fc:	f023 0207 	bic.w	r2, r3, #7
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	4925      	ldr	r1, [pc, #148]	; (800749c <HAL_RCC_ClockConfig+0x244>)
 8007406:	4313      	orrs	r3, r2
 8007408:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800740a:	f7fb fdd7 	bl	8002fbc <HAL_GetTick>
 800740e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007410:	e00a      	b.n	8007428 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007412:	f7fb fdd3 	bl	8002fbc <HAL_GetTick>
 8007416:	4602      	mov	r2, r0
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	1ad3      	subs	r3, r2, r3
 800741c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007420:	4293      	cmp	r3, r2
 8007422:	d901      	bls.n	8007428 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007424:	2303      	movs	r3, #3
 8007426:	e0be      	b.n	80075a6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007428:	4b1c      	ldr	r3, [pc, #112]	; (800749c <HAL_RCC_ClockConfig+0x244>)
 800742a:	691b      	ldr	r3, [r3, #16]
 800742c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	00db      	lsls	r3, r3, #3
 8007436:	429a      	cmp	r2, r3
 8007438:	d1eb      	bne.n	8007412 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f003 0302 	and.w	r3, r3, #2
 8007442:	2b00      	cmp	r3, #0
 8007444:	d010      	beq.n	8007468 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	68da      	ldr	r2, [r3, #12]
 800744a:	4b14      	ldr	r3, [pc, #80]	; (800749c <HAL_RCC_ClockConfig+0x244>)
 800744c:	699b      	ldr	r3, [r3, #24]
 800744e:	f003 030f 	and.w	r3, r3, #15
 8007452:	429a      	cmp	r2, r3
 8007454:	d208      	bcs.n	8007468 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007456:	4b11      	ldr	r3, [pc, #68]	; (800749c <HAL_RCC_ClockConfig+0x244>)
 8007458:	699b      	ldr	r3, [r3, #24]
 800745a:	f023 020f 	bic.w	r2, r3, #15
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	68db      	ldr	r3, [r3, #12]
 8007462:	490e      	ldr	r1, [pc, #56]	; (800749c <HAL_RCC_ClockConfig+0x244>)
 8007464:	4313      	orrs	r3, r2
 8007466:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007468:	4b0b      	ldr	r3, [pc, #44]	; (8007498 <HAL_RCC_ClockConfig+0x240>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f003 030f 	and.w	r3, r3, #15
 8007470:	683a      	ldr	r2, [r7, #0]
 8007472:	429a      	cmp	r2, r3
 8007474:	d214      	bcs.n	80074a0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007476:	4b08      	ldr	r3, [pc, #32]	; (8007498 <HAL_RCC_ClockConfig+0x240>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f023 020f 	bic.w	r2, r3, #15
 800747e:	4906      	ldr	r1, [pc, #24]	; (8007498 <HAL_RCC_ClockConfig+0x240>)
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	4313      	orrs	r3, r2
 8007484:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007486:	4b04      	ldr	r3, [pc, #16]	; (8007498 <HAL_RCC_ClockConfig+0x240>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f003 030f 	and.w	r3, r3, #15
 800748e:	683a      	ldr	r2, [r7, #0]
 8007490:	429a      	cmp	r2, r3
 8007492:	d005      	beq.n	80074a0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007494:	2301      	movs	r3, #1
 8007496:	e086      	b.n	80075a6 <HAL_RCC_ClockConfig+0x34e>
 8007498:	52002000 	.word	0x52002000
 800749c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f003 0304 	and.w	r3, r3, #4
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d010      	beq.n	80074ce <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	691a      	ldr	r2, [r3, #16]
 80074b0:	4b3f      	ldr	r3, [pc, #252]	; (80075b0 <HAL_RCC_ClockConfig+0x358>)
 80074b2:	699b      	ldr	r3, [r3, #24]
 80074b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d208      	bcs.n	80074ce <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80074bc:	4b3c      	ldr	r3, [pc, #240]	; (80075b0 <HAL_RCC_ClockConfig+0x358>)
 80074be:	699b      	ldr	r3, [r3, #24]
 80074c0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	691b      	ldr	r3, [r3, #16]
 80074c8:	4939      	ldr	r1, [pc, #228]	; (80075b0 <HAL_RCC_ClockConfig+0x358>)
 80074ca:	4313      	orrs	r3, r2
 80074cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f003 0308 	and.w	r3, r3, #8
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d010      	beq.n	80074fc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	695a      	ldr	r2, [r3, #20]
 80074de:	4b34      	ldr	r3, [pc, #208]	; (80075b0 <HAL_RCC_ClockConfig+0x358>)
 80074e0:	69db      	ldr	r3, [r3, #28]
 80074e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80074e6:	429a      	cmp	r2, r3
 80074e8:	d208      	bcs.n	80074fc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80074ea:	4b31      	ldr	r3, [pc, #196]	; (80075b0 <HAL_RCC_ClockConfig+0x358>)
 80074ec:	69db      	ldr	r3, [r3, #28]
 80074ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	695b      	ldr	r3, [r3, #20]
 80074f6:	492e      	ldr	r1, [pc, #184]	; (80075b0 <HAL_RCC_ClockConfig+0x358>)
 80074f8:	4313      	orrs	r3, r2
 80074fa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f003 0310 	and.w	r3, r3, #16
 8007504:	2b00      	cmp	r3, #0
 8007506:	d010      	beq.n	800752a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	699a      	ldr	r2, [r3, #24]
 800750c:	4b28      	ldr	r3, [pc, #160]	; (80075b0 <HAL_RCC_ClockConfig+0x358>)
 800750e:	69db      	ldr	r3, [r3, #28]
 8007510:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007514:	429a      	cmp	r2, r3
 8007516:	d208      	bcs.n	800752a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007518:	4b25      	ldr	r3, [pc, #148]	; (80075b0 <HAL_RCC_ClockConfig+0x358>)
 800751a:	69db      	ldr	r3, [r3, #28]
 800751c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	699b      	ldr	r3, [r3, #24]
 8007524:	4922      	ldr	r1, [pc, #136]	; (80075b0 <HAL_RCC_ClockConfig+0x358>)
 8007526:	4313      	orrs	r3, r2
 8007528:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f003 0320 	and.w	r3, r3, #32
 8007532:	2b00      	cmp	r3, #0
 8007534:	d010      	beq.n	8007558 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	69da      	ldr	r2, [r3, #28]
 800753a:	4b1d      	ldr	r3, [pc, #116]	; (80075b0 <HAL_RCC_ClockConfig+0x358>)
 800753c:	6a1b      	ldr	r3, [r3, #32]
 800753e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007542:	429a      	cmp	r2, r3
 8007544:	d208      	bcs.n	8007558 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007546:	4b1a      	ldr	r3, [pc, #104]	; (80075b0 <HAL_RCC_ClockConfig+0x358>)
 8007548:	6a1b      	ldr	r3, [r3, #32]
 800754a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	69db      	ldr	r3, [r3, #28]
 8007552:	4917      	ldr	r1, [pc, #92]	; (80075b0 <HAL_RCC_ClockConfig+0x358>)
 8007554:	4313      	orrs	r3, r2
 8007556:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007558:	f000 f834 	bl	80075c4 <HAL_RCC_GetSysClockFreq>
 800755c:	4602      	mov	r2, r0
 800755e:	4b14      	ldr	r3, [pc, #80]	; (80075b0 <HAL_RCC_ClockConfig+0x358>)
 8007560:	699b      	ldr	r3, [r3, #24]
 8007562:	0a1b      	lsrs	r3, r3, #8
 8007564:	f003 030f 	and.w	r3, r3, #15
 8007568:	4912      	ldr	r1, [pc, #72]	; (80075b4 <HAL_RCC_ClockConfig+0x35c>)
 800756a:	5ccb      	ldrb	r3, [r1, r3]
 800756c:	f003 031f 	and.w	r3, r3, #31
 8007570:	fa22 f303 	lsr.w	r3, r2, r3
 8007574:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007576:	4b0e      	ldr	r3, [pc, #56]	; (80075b0 <HAL_RCC_ClockConfig+0x358>)
 8007578:	699b      	ldr	r3, [r3, #24]
 800757a:	f003 030f 	and.w	r3, r3, #15
 800757e:	4a0d      	ldr	r2, [pc, #52]	; (80075b4 <HAL_RCC_ClockConfig+0x35c>)
 8007580:	5cd3      	ldrb	r3, [r2, r3]
 8007582:	f003 031f 	and.w	r3, r3, #31
 8007586:	693a      	ldr	r2, [r7, #16]
 8007588:	fa22 f303 	lsr.w	r3, r2, r3
 800758c:	4a0a      	ldr	r2, [pc, #40]	; (80075b8 <HAL_RCC_ClockConfig+0x360>)
 800758e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007590:	4a0a      	ldr	r2, [pc, #40]	; (80075bc <HAL_RCC_ClockConfig+0x364>)
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007596:	4b0a      	ldr	r3, [pc, #40]	; (80075c0 <HAL_RCC_ClockConfig+0x368>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4618      	mov	r0, r3
 800759c:	f7fb fcc4 	bl	8002f28 <HAL_InitTick>
 80075a0:	4603      	mov	r3, r0
 80075a2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80075a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3718      	adds	r7, #24
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}
 80075ae:	bf00      	nop
 80075b0:	58024400 	.word	0x58024400
 80075b4:	0800f3fc 	.word	0x0800f3fc
 80075b8:	2400002c 	.word	0x2400002c
 80075bc:	24000028 	.word	0x24000028
 80075c0:	24000030 	.word	0x24000030

080075c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b089      	sub	sp, #36	; 0x24
 80075c8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80075ca:	4bb3      	ldr	r3, [pc, #716]	; (8007898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075cc:	691b      	ldr	r3, [r3, #16]
 80075ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80075d2:	2b18      	cmp	r3, #24
 80075d4:	f200 8155 	bhi.w	8007882 <HAL_RCC_GetSysClockFreq+0x2be>
 80075d8:	a201      	add	r2, pc, #4	; (adr r2, 80075e0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80075da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075de:	bf00      	nop
 80075e0:	08007645 	.word	0x08007645
 80075e4:	08007883 	.word	0x08007883
 80075e8:	08007883 	.word	0x08007883
 80075ec:	08007883 	.word	0x08007883
 80075f0:	08007883 	.word	0x08007883
 80075f4:	08007883 	.word	0x08007883
 80075f8:	08007883 	.word	0x08007883
 80075fc:	08007883 	.word	0x08007883
 8007600:	0800766b 	.word	0x0800766b
 8007604:	08007883 	.word	0x08007883
 8007608:	08007883 	.word	0x08007883
 800760c:	08007883 	.word	0x08007883
 8007610:	08007883 	.word	0x08007883
 8007614:	08007883 	.word	0x08007883
 8007618:	08007883 	.word	0x08007883
 800761c:	08007883 	.word	0x08007883
 8007620:	08007671 	.word	0x08007671
 8007624:	08007883 	.word	0x08007883
 8007628:	08007883 	.word	0x08007883
 800762c:	08007883 	.word	0x08007883
 8007630:	08007883 	.word	0x08007883
 8007634:	08007883 	.word	0x08007883
 8007638:	08007883 	.word	0x08007883
 800763c:	08007883 	.word	0x08007883
 8007640:	08007677 	.word	0x08007677
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007644:	4b94      	ldr	r3, [pc, #592]	; (8007898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f003 0320 	and.w	r3, r3, #32
 800764c:	2b00      	cmp	r3, #0
 800764e:	d009      	beq.n	8007664 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007650:	4b91      	ldr	r3, [pc, #580]	; (8007898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	08db      	lsrs	r3, r3, #3
 8007656:	f003 0303 	and.w	r3, r3, #3
 800765a:	4a90      	ldr	r2, [pc, #576]	; (800789c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800765c:	fa22 f303 	lsr.w	r3, r2, r3
 8007660:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007662:	e111      	b.n	8007888 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007664:	4b8d      	ldr	r3, [pc, #564]	; (800789c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007666:	61bb      	str	r3, [r7, #24]
      break;
 8007668:	e10e      	b.n	8007888 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800766a:	4b8d      	ldr	r3, [pc, #564]	; (80078a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800766c:	61bb      	str	r3, [r7, #24]
      break;
 800766e:	e10b      	b.n	8007888 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007670:	4b8c      	ldr	r3, [pc, #560]	; (80078a4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007672:	61bb      	str	r3, [r7, #24]
      break;
 8007674:	e108      	b.n	8007888 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007676:	4b88      	ldr	r3, [pc, #544]	; (8007898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800767a:	f003 0303 	and.w	r3, r3, #3
 800767e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007680:	4b85      	ldr	r3, [pc, #532]	; (8007898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007684:	091b      	lsrs	r3, r3, #4
 8007686:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800768a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800768c:	4b82      	ldr	r3, [pc, #520]	; (8007898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800768e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007690:	f003 0301 	and.w	r3, r3, #1
 8007694:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007696:	4b80      	ldr	r3, [pc, #512]	; (8007898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800769a:	08db      	lsrs	r3, r3, #3
 800769c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80076a0:	68fa      	ldr	r2, [r7, #12]
 80076a2:	fb02 f303 	mul.w	r3, r2, r3
 80076a6:	ee07 3a90 	vmov	s15, r3
 80076aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076ae:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	f000 80e1 	beq.w	800787c <HAL_RCC_GetSysClockFreq+0x2b8>
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	2b02      	cmp	r3, #2
 80076be:	f000 8083 	beq.w	80077c8 <HAL_RCC_GetSysClockFreq+0x204>
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	2b02      	cmp	r3, #2
 80076c6:	f200 80a1 	bhi.w	800780c <HAL_RCC_GetSysClockFreq+0x248>
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d003      	beq.n	80076d8 <HAL_RCC_GetSysClockFreq+0x114>
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d056      	beq.n	8007784 <HAL_RCC_GetSysClockFreq+0x1c0>
 80076d6:	e099      	b.n	800780c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80076d8:	4b6f      	ldr	r3, [pc, #444]	; (8007898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f003 0320 	and.w	r3, r3, #32
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d02d      	beq.n	8007740 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80076e4:	4b6c      	ldr	r3, [pc, #432]	; (8007898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	08db      	lsrs	r3, r3, #3
 80076ea:	f003 0303 	and.w	r3, r3, #3
 80076ee:	4a6b      	ldr	r2, [pc, #428]	; (800789c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80076f0:	fa22 f303 	lsr.w	r3, r2, r3
 80076f4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	ee07 3a90 	vmov	s15, r3
 80076fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	ee07 3a90 	vmov	s15, r3
 8007706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800770a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800770e:	4b62      	ldr	r3, [pc, #392]	; (8007898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007716:	ee07 3a90 	vmov	s15, r3
 800771a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800771e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007722:	eddf 5a61 	vldr	s11, [pc, #388]	; 80078a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007726:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800772a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800772e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800773a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800773e:	e087      	b.n	8007850 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	ee07 3a90 	vmov	s15, r3
 8007746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800774a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80078ac <HAL_RCC_GetSysClockFreq+0x2e8>
 800774e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007752:	4b51      	ldr	r3, [pc, #324]	; (8007898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800775a:	ee07 3a90 	vmov	s15, r3
 800775e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007762:	ed97 6a02 	vldr	s12, [r7, #8]
 8007766:	eddf 5a50 	vldr	s11, [pc, #320]	; 80078a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800776a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800776e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007772:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007776:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800777a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800777e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007782:	e065      	b.n	8007850 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	ee07 3a90 	vmov	s15, r3
 800778a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800778e:	eddf 6a48 	vldr	s13, [pc, #288]	; 80078b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007792:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007796:	4b40      	ldr	r3, [pc, #256]	; (8007898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800779a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800779e:	ee07 3a90 	vmov	s15, r3
 80077a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80077aa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80078a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80077ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80077c6:	e043      	b.n	8007850 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	ee07 3a90 	vmov	s15, r3
 80077ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077d2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80078b4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80077d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077da:	4b2f      	ldr	r3, [pc, #188]	; (8007898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077e2:	ee07 3a90 	vmov	s15, r3
 80077e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80077ee:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80078a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80077f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007806:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800780a:	e021      	b.n	8007850 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	ee07 3a90 	vmov	s15, r3
 8007812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007816:	eddf 6a26 	vldr	s13, [pc, #152]	; 80078b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800781a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800781e:	4b1e      	ldr	r3, [pc, #120]	; (8007898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007826:	ee07 3a90 	vmov	s15, r3
 800782a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800782e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007832:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80078a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007836:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800783a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800783e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007842:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800784a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800784e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007850:	4b11      	ldr	r3, [pc, #68]	; (8007898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007854:	0a5b      	lsrs	r3, r3, #9
 8007856:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800785a:	3301      	adds	r3, #1
 800785c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	ee07 3a90 	vmov	s15, r3
 8007864:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007868:	edd7 6a07 	vldr	s13, [r7, #28]
 800786c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007870:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007874:	ee17 3a90 	vmov	r3, s15
 8007878:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800787a:	e005      	b.n	8007888 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800787c:	2300      	movs	r3, #0
 800787e:	61bb      	str	r3, [r7, #24]
      break;
 8007880:	e002      	b.n	8007888 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007882:	4b07      	ldr	r3, [pc, #28]	; (80078a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007884:	61bb      	str	r3, [r7, #24]
      break;
 8007886:	bf00      	nop
  }

  return sysclockfreq;
 8007888:	69bb      	ldr	r3, [r7, #24]
}
 800788a:	4618      	mov	r0, r3
 800788c:	3724      	adds	r7, #36	; 0x24
 800788e:	46bd      	mov	sp, r7
 8007890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007894:	4770      	bx	lr
 8007896:	bf00      	nop
 8007898:	58024400 	.word	0x58024400
 800789c:	03d09000 	.word	0x03d09000
 80078a0:	003d0900 	.word	0x003d0900
 80078a4:	017d7840 	.word	0x017d7840
 80078a8:	46000000 	.word	0x46000000
 80078ac:	4c742400 	.word	0x4c742400
 80078b0:	4a742400 	.word	0x4a742400
 80078b4:	4bbebc20 	.word	0x4bbebc20

080078b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b082      	sub	sp, #8
 80078bc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80078be:	f7ff fe81 	bl	80075c4 <HAL_RCC_GetSysClockFreq>
 80078c2:	4602      	mov	r2, r0
 80078c4:	4b10      	ldr	r3, [pc, #64]	; (8007908 <HAL_RCC_GetHCLKFreq+0x50>)
 80078c6:	699b      	ldr	r3, [r3, #24]
 80078c8:	0a1b      	lsrs	r3, r3, #8
 80078ca:	f003 030f 	and.w	r3, r3, #15
 80078ce:	490f      	ldr	r1, [pc, #60]	; (800790c <HAL_RCC_GetHCLKFreq+0x54>)
 80078d0:	5ccb      	ldrb	r3, [r1, r3]
 80078d2:	f003 031f 	and.w	r3, r3, #31
 80078d6:	fa22 f303 	lsr.w	r3, r2, r3
 80078da:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80078dc:	4b0a      	ldr	r3, [pc, #40]	; (8007908 <HAL_RCC_GetHCLKFreq+0x50>)
 80078de:	699b      	ldr	r3, [r3, #24]
 80078e0:	f003 030f 	and.w	r3, r3, #15
 80078e4:	4a09      	ldr	r2, [pc, #36]	; (800790c <HAL_RCC_GetHCLKFreq+0x54>)
 80078e6:	5cd3      	ldrb	r3, [r2, r3]
 80078e8:	f003 031f 	and.w	r3, r3, #31
 80078ec:	687a      	ldr	r2, [r7, #4]
 80078ee:	fa22 f303 	lsr.w	r3, r2, r3
 80078f2:	4a07      	ldr	r2, [pc, #28]	; (8007910 <HAL_RCC_GetHCLKFreq+0x58>)
 80078f4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80078f6:	4a07      	ldr	r2, [pc, #28]	; (8007914 <HAL_RCC_GetHCLKFreq+0x5c>)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80078fc:	4b04      	ldr	r3, [pc, #16]	; (8007910 <HAL_RCC_GetHCLKFreq+0x58>)
 80078fe:	681b      	ldr	r3, [r3, #0]
}
 8007900:	4618      	mov	r0, r3
 8007902:	3708      	adds	r7, #8
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}
 8007908:	58024400 	.word	0x58024400
 800790c:	0800f3fc 	.word	0x0800f3fc
 8007910:	2400002c 	.word	0x2400002c
 8007914:	24000028 	.word	0x24000028

08007918 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800791c:	f7ff ffcc 	bl	80078b8 <HAL_RCC_GetHCLKFreq>
 8007920:	4602      	mov	r2, r0
 8007922:	4b06      	ldr	r3, [pc, #24]	; (800793c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007924:	69db      	ldr	r3, [r3, #28]
 8007926:	091b      	lsrs	r3, r3, #4
 8007928:	f003 0307 	and.w	r3, r3, #7
 800792c:	4904      	ldr	r1, [pc, #16]	; (8007940 <HAL_RCC_GetPCLK1Freq+0x28>)
 800792e:	5ccb      	ldrb	r3, [r1, r3]
 8007930:	f003 031f 	and.w	r3, r3, #31
 8007934:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007938:	4618      	mov	r0, r3
 800793a:	bd80      	pop	{r7, pc}
 800793c:	58024400 	.word	0x58024400
 8007940:	0800f3fc 	.word	0x0800f3fc

08007944 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007948:	f7ff ffb6 	bl	80078b8 <HAL_RCC_GetHCLKFreq>
 800794c:	4602      	mov	r2, r0
 800794e:	4b06      	ldr	r3, [pc, #24]	; (8007968 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007950:	69db      	ldr	r3, [r3, #28]
 8007952:	0a1b      	lsrs	r3, r3, #8
 8007954:	f003 0307 	and.w	r3, r3, #7
 8007958:	4904      	ldr	r1, [pc, #16]	; (800796c <HAL_RCC_GetPCLK2Freq+0x28>)
 800795a:	5ccb      	ldrb	r3, [r1, r3]
 800795c:	f003 031f 	and.w	r3, r3, #31
 8007960:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007964:	4618      	mov	r0, r3
 8007966:	bd80      	pop	{r7, pc}
 8007968:	58024400 	.word	0x58024400
 800796c:	0800f3fc 	.word	0x0800f3fc

08007970 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007970:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007974:	b0ca      	sub	sp, #296	; 0x128
 8007976:	af00      	add	r7, sp, #0
 8007978:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800797c:	2300      	movs	r3, #0
 800797e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007982:	2300      	movs	r3, #0
 8007984:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007988:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800798c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007990:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8007994:	2500      	movs	r5, #0
 8007996:	ea54 0305 	orrs.w	r3, r4, r5
 800799a:	d049      	beq.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800799c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80079a2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80079a6:	d02f      	beq.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80079a8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80079ac:	d828      	bhi.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80079ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80079b2:	d01a      	beq.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80079b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80079b8:	d822      	bhi.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d003      	beq.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80079be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079c2:	d007      	beq.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80079c4:	e01c      	b.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079c6:	4bb8      	ldr	r3, [pc, #736]	; (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80079c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ca:	4ab7      	ldr	r2, [pc, #732]	; (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80079cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80079d2:	e01a      	b.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80079d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079d8:	3308      	adds	r3, #8
 80079da:	2102      	movs	r1, #2
 80079dc:	4618      	mov	r0, r3
 80079de:	f002 fb61 	bl	800a0a4 <RCCEx_PLL2_Config>
 80079e2:	4603      	mov	r3, r0
 80079e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80079e8:	e00f      	b.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80079ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079ee:	3328      	adds	r3, #40	; 0x28
 80079f0:	2102      	movs	r1, #2
 80079f2:	4618      	mov	r0, r3
 80079f4:	f002 fc08 	bl	800a208 <RCCEx_PLL3_Config>
 80079f8:	4603      	mov	r3, r0
 80079fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80079fe:	e004      	b.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a00:	2301      	movs	r3, #1
 8007a02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007a06:	e000      	b.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007a08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d10a      	bne.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007a12:	4ba5      	ldr	r3, [pc, #660]	; (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a16:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a20:	4aa1      	ldr	r2, [pc, #644]	; (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a22:	430b      	orrs	r3, r1
 8007a24:	6513      	str	r3, [r2, #80]	; 0x50
 8007a26:	e003      	b.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a28:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a2c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a38:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8007a3c:	f04f 0900 	mov.w	r9, #0
 8007a40:	ea58 0309 	orrs.w	r3, r8, r9
 8007a44:	d047      	beq.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a4c:	2b04      	cmp	r3, #4
 8007a4e:	d82a      	bhi.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007a50:	a201      	add	r2, pc, #4	; (adr r2, 8007a58 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a56:	bf00      	nop
 8007a58:	08007a6d 	.word	0x08007a6d
 8007a5c:	08007a7b 	.word	0x08007a7b
 8007a60:	08007a91 	.word	0x08007a91
 8007a64:	08007aaf 	.word	0x08007aaf
 8007a68:	08007aaf 	.word	0x08007aaf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a6c:	4b8e      	ldr	r3, [pc, #568]	; (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a70:	4a8d      	ldr	r2, [pc, #564]	; (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007a78:	e01a      	b.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a7e:	3308      	adds	r3, #8
 8007a80:	2100      	movs	r1, #0
 8007a82:	4618      	mov	r0, r3
 8007a84:	f002 fb0e 	bl	800a0a4 <RCCEx_PLL2_Config>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007a8e:	e00f      	b.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a94:	3328      	adds	r3, #40	; 0x28
 8007a96:	2100      	movs	r1, #0
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f002 fbb5 	bl	800a208 <RCCEx_PLL3_Config>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007aa4:	e004      	b.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007aac:	e000      	b.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007aae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ab0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d10a      	bne.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007ab8:	4b7b      	ldr	r3, [pc, #492]	; (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007aba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007abc:	f023 0107 	bic.w	r1, r3, #7
 8007ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ac6:	4a78      	ldr	r2, [pc, #480]	; (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ac8:	430b      	orrs	r3, r1
 8007aca:	6513      	str	r3, [r2, #80]	; 0x50
 8007acc:	e003      	b.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ace:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ad2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ade:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8007ae2:	f04f 0b00 	mov.w	fp, #0
 8007ae6:	ea5a 030b 	orrs.w	r3, sl, fp
 8007aea:	d04c      	beq.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007af0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007af2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007af6:	d030      	beq.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8007af8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007afc:	d829      	bhi.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007afe:	2bc0      	cmp	r3, #192	; 0xc0
 8007b00:	d02d      	beq.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007b02:	2bc0      	cmp	r3, #192	; 0xc0
 8007b04:	d825      	bhi.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007b06:	2b80      	cmp	r3, #128	; 0x80
 8007b08:	d018      	beq.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007b0a:	2b80      	cmp	r3, #128	; 0x80
 8007b0c:	d821      	bhi.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d002      	beq.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8007b12:	2b40      	cmp	r3, #64	; 0x40
 8007b14:	d007      	beq.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8007b16:	e01c      	b.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b18:	4b63      	ldr	r3, [pc, #396]	; (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b1c:	4a62      	ldr	r2, [pc, #392]	; (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007b24:	e01c      	b.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b2a:	3308      	adds	r3, #8
 8007b2c:	2100      	movs	r1, #0
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f002 fab8 	bl	800a0a4 <RCCEx_PLL2_Config>
 8007b34:	4603      	mov	r3, r0
 8007b36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007b3a:	e011      	b.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b40:	3328      	adds	r3, #40	; 0x28
 8007b42:	2100      	movs	r1, #0
 8007b44:	4618      	mov	r0, r3
 8007b46:	f002 fb5f 	bl	800a208 <RCCEx_PLL3_Config>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007b50:	e006      	b.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b52:	2301      	movs	r3, #1
 8007b54:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007b58:	e002      	b.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007b5a:	bf00      	nop
 8007b5c:	e000      	b.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007b5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b60:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d10a      	bne.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007b68:	4b4f      	ldr	r3, [pc, #316]	; (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b6c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8007b70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b76:	4a4c      	ldr	r2, [pc, #304]	; (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b78:	430b      	orrs	r3, r1
 8007b7a:	6513      	str	r3, [r2, #80]	; 0x50
 8007b7c:	e003      	b.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b82:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b8e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8007b92:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007b96:	2300      	movs	r3, #0
 8007b98:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007b9c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8007ba0:	460b      	mov	r3, r1
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	d053      	beq.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007baa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007bae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007bb2:	d035      	beq.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007bb4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007bb8:	d82e      	bhi.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007bba:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007bbe:	d031      	beq.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007bc0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007bc4:	d828      	bhi.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007bc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007bca:	d01a      	beq.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007bcc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007bd0:	d822      	bhi.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d003      	beq.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007bd6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007bda:	d007      	beq.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007bdc:	e01c      	b.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bde:	4b32      	ldr	r3, [pc, #200]	; (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007be2:	4a31      	ldr	r2, [pc, #196]	; (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007be4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007be8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007bea:	e01c      	b.n	8007c26 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bf0:	3308      	adds	r3, #8
 8007bf2:	2100      	movs	r1, #0
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	f002 fa55 	bl	800a0a4 <RCCEx_PLL2_Config>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007c00:	e011      	b.n	8007c26 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c06:	3328      	adds	r3, #40	; 0x28
 8007c08:	2100      	movs	r1, #0
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f002 fafc 	bl	800a208 <RCCEx_PLL3_Config>
 8007c10:	4603      	mov	r3, r0
 8007c12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007c16:	e006      	b.n	8007c26 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007c18:	2301      	movs	r3, #1
 8007c1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007c1e:	e002      	b.n	8007c26 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007c20:	bf00      	nop
 8007c22:	e000      	b.n	8007c26 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007c24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d10b      	bne.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007c2e:	4b1e      	ldr	r3, [pc, #120]	; (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c32:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8007c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c3a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007c3e:	4a1a      	ldr	r2, [pc, #104]	; (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007c40:	430b      	orrs	r3, r1
 8007c42:	6593      	str	r3, [r2, #88]	; 0x58
 8007c44:	e003      	b.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c4a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c56:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8007c5a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007c5e:	2300      	movs	r3, #0
 8007c60:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007c64:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8007c68:	460b      	mov	r3, r1
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	d056      	beq.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c72:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007c76:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007c7a:	d038      	beq.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007c7c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007c80:	d831      	bhi.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007c82:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007c86:	d034      	beq.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007c88:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007c8c:	d82b      	bhi.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007c8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c92:	d01d      	beq.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007c94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c98:	d825      	bhi.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d006      	beq.n	8007cac <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007c9e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007ca2:	d00a      	beq.n	8007cba <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007ca4:	e01f      	b.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007ca6:	bf00      	nop
 8007ca8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cac:	4ba2      	ldr	r3, [pc, #648]	; (8007f38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cb0:	4aa1      	ldr	r2, [pc, #644]	; (8007f38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007cb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007cb6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007cb8:	e01c      	b.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cbe:	3308      	adds	r3, #8
 8007cc0:	2100      	movs	r1, #0
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f002 f9ee 	bl	800a0a4 <RCCEx_PLL2_Config>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007cce:	e011      	b.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007cd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cd4:	3328      	adds	r3, #40	; 0x28
 8007cd6:	2100      	movs	r1, #0
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f002 fa95 	bl	800a208 <RCCEx_PLL3_Config>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007ce4:	e006      	b.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007cec:	e002      	b.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007cee:	bf00      	nop
 8007cf0:	e000      	b.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007cf2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cf4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d10b      	bne.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007cfc:	4b8e      	ldr	r3, [pc, #568]	; (8007f38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d00:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8007d04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d08:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007d0c:	4a8a      	ldr	r2, [pc, #552]	; (8007f38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d0e:	430b      	orrs	r3, r1
 8007d10:	6593      	str	r3, [r2, #88]	; 0x58
 8007d12:	e003      	b.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d18:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007d1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d24:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8007d28:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007d32:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8007d36:	460b      	mov	r3, r1
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	d03a      	beq.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d42:	2b30      	cmp	r3, #48	; 0x30
 8007d44:	d01f      	beq.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007d46:	2b30      	cmp	r3, #48	; 0x30
 8007d48:	d819      	bhi.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007d4a:	2b20      	cmp	r3, #32
 8007d4c:	d00c      	beq.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007d4e:	2b20      	cmp	r3, #32
 8007d50:	d815      	bhi.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d019      	beq.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007d56:	2b10      	cmp	r3, #16
 8007d58:	d111      	bne.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d5a:	4b77      	ldr	r3, [pc, #476]	; (8007f38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d5e:	4a76      	ldr	r2, [pc, #472]	; (8007f38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d64:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007d66:	e011      	b.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007d68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d6c:	3308      	adds	r3, #8
 8007d6e:	2102      	movs	r1, #2
 8007d70:	4618      	mov	r0, r3
 8007d72:	f002 f997 	bl	800a0a4 <RCCEx_PLL2_Config>
 8007d76:	4603      	mov	r3, r0
 8007d78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007d7c:	e006      	b.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007d84:	e002      	b.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007d86:	bf00      	nop
 8007d88:	e000      	b.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007d8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d10a      	bne.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007d94:	4b68      	ldr	r3, [pc, #416]	; (8007f38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d98:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8007d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007da2:	4a65      	ldr	r2, [pc, #404]	; (8007f38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007da4:	430b      	orrs	r3, r1
 8007da6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007da8:	e003      	b.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007daa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007dae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dba:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8007dbe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007dc8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8007dcc:	460b      	mov	r3, r1
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	d051      	beq.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ddc:	d035      	beq.n	8007e4a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007dde:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007de2:	d82e      	bhi.n	8007e42 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007de4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007de8:	d031      	beq.n	8007e4e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007dea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007dee:	d828      	bhi.n	8007e42 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007df0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007df4:	d01a      	beq.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007df6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007dfa:	d822      	bhi.n	8007e42 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d003      	beq.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007e00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e04:	d007      	beq.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007e06:	e01c      	b.n	8007e42 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e08:	4b4b      	ldr	r3, [pc, #300]	; (8007f38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e0c:	4a4a      	ldr	r2, [pc, #296]	; (8007f38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007e14:	e01c      	b.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e1a:	3308      	adds	r3, #8
 8007e1c:	2100      	movs	r1, #0
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f002 f940 	bl	800a0a4 <RCCEx_PLL2_Config>
 8007e24:	4603      	mov	r3, r0
 8007e26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007e2a:	e011      	b.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e30:	3328      	adds	r3, #40	; 0x28
 8007e32:	2100      	movs	r1, #0
 8007e34:	4618      	mov	r0, r3
 8007e36:	f002 f9e7 	bl	800a208 <RCCEx_PLL3_Config>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007e40:	e006      	b.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e42:	2301      	movs	r3, #1
 8007e44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007e48:	e002      	b.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007e4a:	bf00      	nop
 8007e4c:	e000      	b.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007e4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d10a      	bne.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007e58:	4b37      	ldr	r3, [pc, #220]	; (8007f38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e5c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8007e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e66:	4a34      	ldr	r2, [pc, #208]	; (8007f38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e68:	430b      	orrs	r3, r1
 8007e6a:	6513      	str	r3, [r2, #80]	; 0x50
 8007e6c:	e003      	b.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e72:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007e76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e7e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8007e82:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007e86:	2300      	movs	r3, #0
 8007e88:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007e8c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8007e90:	460b      	mov	r3, r1
 8007e92:	4313      	orrs	r3, r2
 8007e94:	d056      	beq.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007ea0:	d033      	beq.n	8007f0a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007ea2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007ea6:	d82c      	bhi.n	8007f02 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007ea8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007eac:	d02f      	beq.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007eae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007eb2:	d826      	bhi.n	8007f02 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007eb4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007eb8:	d02b      	beq.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007eba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007ebe:	d820      	bhi.n	8007f02 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007ec0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ec4:	d012      	beq.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007ec6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007eca:	d81a      	bhi.n	8007f02 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d022      	beq.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007ed0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ed4:	d115      	bne.n	8007f02 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007eda:	3308      	adds	r3, #8
 8007edc:	2101      	movs	r1, #1
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f002 f8e0 	bl	800a0a4 <RCCEx_PLL2_Config>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007eea:	e015      	b.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ef0:	3328      	adds	r3, #40	; 0x28
 8007ef2:	2101      	movs	r1, #1
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f002 f987 	bl	800a208 <RCCEx_PLL3_Config>
 8007efa:	4603      	mov	r3, r0
 8007efc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007f00:	e00a      	b.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f02:	2301      	movs	r3, #1
 8007f04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007f08:	e006      	b.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007f0a:	bf00      	nop
 8007f0c:	e004      	b.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007f0e:	bf00      	nop
 8007f10:	e002      	b.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007f12:	bf00      	nop
 8007f14:	e000      	b.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007f16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f18:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d10d      	bne.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007f20:	4b05      	ldr	r3, [pc, #20]	; (8007f38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007f22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f24:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8007f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f2e:	4a02      	ldr	r2, [pc, #8]	; (8007f38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007f30:	430b      	orrs	r3, r1
 8007f32:	6513      	str	r3, [r2, #80]	; 0x50
 8007f34:	e006      	b.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007f36:	bf00      	nop
 8007f38:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f3c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f40:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f4c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8007f50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007f54:	2300      	movs	r3, #0
 8007f56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007f5a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8007f5e:	460b      	mov	r3, r1
 8007f60:	4313      	orrs	r3, r2
 8007f62:	d055      	beq.n	8008010 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007f64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f68:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007f6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f70:	d033      	beq.n	8007fda <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007f72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f76:	d82c      	bhi.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007f78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f7c:	d02f      	beq.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f82:	d826      	bhi.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007f84:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007f88:	d02b      	beq.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007f8a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007f8e:	d820      	bhi.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007f90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f94:	d012      	beq.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007f96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f9a:	d81a      	bhi.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d022      	beq.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007fa0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007fa4:	d115      	bne.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007faa:	3308      	adds	r3, #8
 8007fac:	2101      	movs	r1, #1
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f002 f878 	bl	800a0a4 <RCCEx_PLL2_Config>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007fba:	e015      	b.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fc0:	3328      	adds	r3, #40	; 0x28
 8007fc2:	2101      	movs	r1, #1
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f002 f91f 	bl	800a208 <RCCEx_PLL3_Config>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007fd0:	e00a      	b.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007fd8:	e006      	b.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007fda:	bf00      	nop
 8007fdc:	e004      	b.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007fde:	bf00      	nop
 8007fe0:	e002      	b.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007fe2:	bf00      	nop
 8007fe4:	e000      	b.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007fe6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fe8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d10b      	bne.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007ff0:	4ba3      	ldr	r3, [pc, #652]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ff4:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ffc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008000:	4a9f      	ldr	r2, [pc, #636]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008002:	430b      	orrs	r3, r1
 8008004:	6593      	str	r3, [r2, #88]	; 0x58
 8008006:	e003      	b.n	8008010 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008008:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800800c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008010:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008018:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800801c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008020:	2300      	movs	r3, #0
 8008022:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008026:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800802a:	460b      	mov	r3, r1
 800802c:	4313      	orrs	r3, r2
 800802e:	d037      	beq.n	80080a0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008030:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008036:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800803a:	d00e      	beq.n	800805a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800803c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008040:	d816      	bhi.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8008042:	2b00      	cmp	r3, #0
 8008044:	d018      	beq.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8008046:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800804a:	d111      	bne.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800804c:	4b8c      	ldr	r3, [pc, #560]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800804e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008050:	4a8b      	ldr	r2, [pc, #556]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008052:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008056:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008058:	e00f      	b.n	800807a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800805a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800805e:	3308      	adds	r3, #8
 8008060:	2101      	movs	r1, #1
 8008062:	4618      	mov	r0, r3
 8008064:	f002 f81e 	bl	800a0a4 <RCCEx_PLL2_Config>
 8008068:	4603      	mov	r3, r0
 800806a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800806e:	e004      	b.n	800807a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008070:	2301      	movs	r3, #1
 8008072:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008076:	e000      	b.n	800807a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8008078:	bf00      	nop
    }

    if (ret == HAL_OK)
 800807a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800807e:	2b00      	cmp	r3, #0
 8008080:	d10a      	bne.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008082:	4b7f      	ldr	r3, [pc, #508]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008084:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008086:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800808a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800808e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008090:	4a7b      	ldr	r2, [pc, #492]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008092:	430b      	orrs	r3, r1
 8008094:	6513      	str	r3, [r2, #80]	; 0x50
 8008096:	e003      	b.n	80080a0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008098:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800809c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80080a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080a8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80080ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80080b0:	2300      	movs	r3, #0
 80080b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80080b6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80080ba:	460b      	mov	r3, r1
 80080bc:	4313      	orrs	r3, r2
 80080be:	d039      	beq.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80080c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080c6:	2b03      	cmp	r3, #3
 80080c8:	d81c      	bhi.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80080ca:	a201      	add	r2, pc, #4	; (adr r2, 80080d0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80080cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080d0:	0800810d 	.word	0x0800810d
 80080d4:	080080e1 	.word	0x080080e1
 80080d8:	080080ef 	.word	0x080080ef
 80080dc:	0800810d 	.word	0x0800810d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080e0:	4b67      	ldr	r3, [pc, #412]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080e4:	4a66      	ldr	r2, [pc, #408]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80080ec:	e00f      	b.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80080ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080f2:	3308      	adds	r3, #8
 80080f4:	2102      	movs	r1, #2
 80080f6:	4618      	mov	r0, r3
 80080f8:	f001 ffd4 	bl	800a0a4 <RCCEx_PLL2_Config>
 80080fc:	4603      	mov	r3, r0
 80080fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008102:	e004      	b.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008104:	2301      	movs	r3, #1
 8008106:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800810a:	e000      	b.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800810c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800810e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008112:	2b00      	cmp	r3, #0
 8008114:	d10a      	bne.n	800812c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008116:	4b5a      	ldr	r3, [pc, #360]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800811a:	f023 0103 	bic.w	r1, r3, #3
 800811e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008122:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008124:	4a56      	ldr	r2, [pc, #344]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008126:	430b      	orrs	r3, r1
 8008128:	64d3      	str	r3, [r2, #76]	; 0x4c
 800812a:	e003      	b.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800812c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008130:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008134:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800813c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8008140:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008144:	2300      	movs	r3, #0
 8008146:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800814a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800814e:	460b      	mov	r3, r1
 8008150:	4313      	orrs	r3, r2
 8008152:	f000 809f 	beq.w	8008294 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008156:	4b4b      	ldr	r3, [pc, #300]	; (8008284 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4a4a      	ldr	r2, [pc, #296]	; (8008284 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800815c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008160:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008162:	f7fa ff2b 	bl	8002fbc <HAL_GetTick>
 8008166:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800816a:	e00b      	b.n	8008184 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800816c:	f7fa ff26 	bl	8002fbc <HAL_GetTick>
 8008170:	4602      	mov	r2, r0
 8008172:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008176:	1ad3      	subs	r3, r2, r3
 8008178:	2b64      	cmp	r3, #100	; 0x64
 800817a:	d903      	bls.n	8008184 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800817c:	2303      	movs	r3, #3
 800817e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008182:	e005      	b.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008184:	4b3f      	ldr	r3, [pc, #252]	; (8008284 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800818c:	2b00      	cmp	r3, #0
 800818e:	d0ed      	beq.n	800816c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8008190:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008194:	2b00      	cmp	r3, #0
 8008196:	d179      	bne.n	800828c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008198:	4b39      	ldr	r3, [pc, #228]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800819a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800819c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081a0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80081a4:	4053      	eors	r3, r2
 80081a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d015      	beq.n	80081da <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80081ae:	4b34      	ldr	r3, [pc, #208]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80081b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081b6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80081ba:	4b31      	ldr	r3, [pc, #196]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80081bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081be:	4a30      	ldr	r2, [pc, #192]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80081c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081c4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80081c6:	4b2e      	ldr	r3, [pc, #184]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80081c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081ca:	4a2d      	ldr	r2, [pc, #180]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80081cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80081d0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80081d2:	4a2b      	ldr	r2, [pc, #172]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80081d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80081d8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80081da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80081e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081e6:	d118      	bne.n	800821a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081e8:	f7fa fee8 	bl	8002fbc <HAL_GetTick>
 80081ec:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80081f0:	e00d      	b.n	800820e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80081f2:	f7fa fee3 	bl	8002fbc <HAL_GetTick>
 80081f6:	4602      	mov	r2, r0
 80081f8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80081fc:	1ad2      	subs	r2, r2, r3
 80081fe:	f241 3388 	movw	r3, #5000	; 0x1388
 8008202:	429a      	cmp	r2, r3
 8008204:	d903      	bls.n	800820e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8008206:	2303      	movs	r3, #3
 8008208:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800820c:	e005      	b.n	800821a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800820e:	4b1c      	ldr	r3, [pc, #112]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008212:	f003 0302 	and.w	r3, r3, #2
 8008216:	2b00      	cmp	r3, #0
 8008218:	d0eb      	beq.n	80081f2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800821a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800821e:	2b00      	cmp	r3, #0
 8008220:	d129      	bne.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008222:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008226:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800822a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800822e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008232:	d10e      	bne.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8008234:	4b12      	ldr	r3, [pc, #72]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008236:	691b      	ldr	r3, [r3, #16]
 8008238:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800823c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008240:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008244:	091a      	lsrs	r2, r3, #4
 8008246:	4b10      	ldr	r3, [pc, #64]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8008248:	4013      	ands	r3, r2
 800824a:	4a0d      	ldr	r2, [pc, #52]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800824c:	430b      	orrs	r3, r1
 800824e:	6113      	str	r3, [r2, #16]
 8008250:	e005      	b.n	800825e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8008252:	4b0b      	ldr	r3, [pc, #44]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008254:	691b      	ldr	r3, [r3, #16]
 8008256:	4a0a      	ldr	r2, [pc, #40]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008258:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800825c:	6113      	str	r3, [r2, #16]
 800825e:	4b08      	ldr	r3, [pc, #32]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008260:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8008262:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008266:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800826a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800826e:	4a04      	ldr	r2, [pc, #16]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008270:	430b      	orrs	r3, r1
 8008272:	6713      	str	r3, [r2, #112]	; 0x70
 8008274:	e00e      	b.n	8008294 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008276:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800827a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800827e:	e009      	b.n	8008294 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008280:	58024400 	.word	0x58024400
 8008284:	58024800 	.word	0x58024800
 8008288:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800828c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008290:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008294:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800829c:	f002 0301 	and.w	r3, r2, #1
 80082a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80082a4:	2300      	movs	r3, #0
 80082a6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80082aa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80082ae:	460b      	mov	r3, r1
 80082b0:	4313      	orrs	r3, r2
 80082b2:	f000 8089 	beq.w	80083c8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80082b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082bc:	2b28      	cmp	r3, #40	; 0x28
 80082be:	d86b      	bhi.n	8008398 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80082c0:	a201      	add	r2, pc, #4	; (adr r2, 80082c8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80082c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082c6:	bf00      	nop
 80082c8:	080083a1 	.word	0x080083a1
 80082cc:	08008399 	.word	0x08008399
 80082d0:	08008399 	.word	0x08008399
 80082d4:	08008399 	.word	0x08008399
 80082d8:	08008399 	.word	0x08008399
 80082dc:	08008399 	.word	0x08008399
 80082e0:	08008399 	.word	0x08008399
 80082e4:	08008399 	.word	0x08008399
 80082e8:	0800836d 	.word	0x0800836d
 80082ec:	08008399 	.word	0x08008399
 80082f0:	08008399 	.word	0x08008399
 80082f4:	08008399 	.word	0x08008399
 80082f8:	08008399 	.word	0x08008399
 80082fc:	08008399 	.word	0x08008399
 8008300:	08008399 	.word	0x08008399
 8008304:	08008399 	.word	0x08008399
 8008308:	08008383 	.word	0x08008383
 800830c:	08008399 	.word	0x08008399
 8008310:	08008399 	.word	0x08008399
 8008314:	08008399 	.word	0x08008399
 8008318:	08008399 	.word	0x08008399
 800831c:	08008399 	.word	0x08008399
 8008320:	08008399 	.word	0x08008399
 8008324:	08008399 	.word	0x08008399
 8008328:	080083a1 	.word	0x080083a1
 800832c:	08008399 	.word	0x08008399
 8008330:	08008399 	.word	0x08008399
 8008334:	08008399 	.word	0x08008399
 8008338:	08008399 	.word	0x08008399
 800833c:	08008399 	.word	0x08008399
 8008340:	08008399 	.word	0x08008399
 8008344:	08008399 	.word	0x08008399
 8008348:	080083a1 	.word	0x080083a1
 800834c:	08008399 	.word	0x08008399
 8008350:	08008399 	.word	0x08008399
 8008354:	08008399 	.word	0x08008399
 8008358:	08008399 	.word	0x08008399
 800835c:	08008399 	.word	0x08008399
 8008360:	08008399 	.word	0x08008399
 8008364:	08008399 	.word	0x08008399
 8008368:	080083a1 	.word	0x080083a1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800836c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008370:	3308      	adds	r3, #8
 8008372:	2101      	movs	r1, #1
 8008374:	4618      	mov	r0, r3
 8008376:	f001 fe95 	bl	800a0a4 <RCCEx_PLL2_Config>
 800837a:	4603      	mov	r3, r0
 800837c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008380:	e00f      	b.n	80083a2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008382:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008386:	3328      	adds	r3, #40	; 0x28
 8008388:	2101      	movs	r1, #1
 800838a:	4618      	mov	r0, r3
 800838c:	f001 ff3c 	bl	800a208 <RCCEx_PLL3_Config>
 8008390:	4603      	mov	r3, r0
 8008392:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008396:	e004      	b.n	80083a2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008398:	2301      	movs	r3, #1
 800839a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800839e:	e000      	b.n	80083a2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80083a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d10a      	bne.n	80083c0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80083aa:	4bbf      	ldr	r3, [pc, #764]	; (80086a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80083ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083ae:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80083b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083b8:	4abb      	ldr	r2, [pc, #748]	; (80086a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80083ba:	430b      	orrs	r3, r1
 80083bc:	6553      	str	r3, [r2, #84]	; 0x54
 80083be:	e003      	b.n	80083c8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80083c4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80083c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d0:	f002 0302 	and.w	r3, r2, #2
 80083d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80083d8:	2300      	movs	r3, #0
 80083da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80083de:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80083e2:	460b      	mov	r3, r1
 80083e4:	4313      	orrs	r3, r2
 80083e6:	d041      	beq.n	800846c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80083e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083ee:	2b05      	cmp	r3, #5
 80083f0:	d824      	bhi.n	800843c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80083f2:	a201      	add	r2, pc, #4	; (adr r2, 80083f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80083f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083f8:	08008445 	.word	0x08008445
 80083fc:	08008411 	.word	0x08008411
 8008400:	08008427 	.word	0x08008427
 8008404:	08008445 	.word	0x08008445
 8008408:	08008445 	.word	0x08008445
 800840c:	08008445 	.word	0x08008445
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008410:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008414:	3308      	adds	r3, #8
 8008416:	2101      	movs	r1, #1
 8008418:	4618      	mov	r0, r3
 800841a:	f001 fe43 	bl	800a0a4 <RCCEx_PLL2_Config>
 800841e:	4603      	mov	r3, r0
 8008420:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008424:	e00f      	b.n	8008446 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008426:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800842a:	3328      	adds	r3, #40	; 0x28
 800842c:	2101      	movs	r1, #1
 800842e:	4618      	mov	r0, r3
 8008430:	f001 feea 	bl	800a208 <RCCEx_PLL3_Config>
 8008434:	4603      	mov	r3, r0
 8008436:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800843a:	e004      	b.n	8008446 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800843c:	2301      	movs	r3, #1
 800843e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008442:	e000      	b.n	8008446 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8008444:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008446:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800844a:	2b00      	cmp	r3, #0
 800844c:	d10a      	bne.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800844e:	4b96      	ldr	r3, [pc, #600]	; (80086a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008452:	f023 0107 	bic.w	r1, r3, #7
 8008456:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800845a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800845c:	4a92      	ldr	r2, [pc, #584]	; (80086a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800845e:	430b      	orrs	r3, r1
 8008460:	6553      	str	r3, [r2, #84]	; 0x54
 8008462:	e003      	b.n	800846c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008464:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008468:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800846c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008474:	f002 0304 	and.w	r3, r2, #4
 8008478:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800847c:	2300      	movs	r3, #0
 800847e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008482:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8008486:	460b      	mov	r3, r1
 8008488:	4313      	orrs	r3, r2
 800848a:	d044      	beq.n	8008516 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800848c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008490:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008494:	2b05      	cmp	r3, #5
 8008496:	d825      	bhi.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8008498:	a201      	add	r2, pc, #4	; (adr r2, 80084a0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800849a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800849e:	bf00      	nop
 80084a0:	080084ed 	.word	0x080084ed
 80084a4:	080084b9 	.word	0x080084b9
 80084a8:	080084cf 	.word	0x080084cf
 80084ac:	080084ed 	.word	0x080084ed
 80084b0:	080084ed 	.word	0x080084ed
 80084b4:	080084ed 	.word	0x080084ed
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80084b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084bc:	3308      	adds	r3, #8
 80084be:	2101      	movs	r1, #1
 80084c0:	4618      	mov	r0, r3
 80084c2:	f001 fdef 	bl	800a0a4 <RCCEx_PLL2_Config>
 80084c6:	4603      	mov	r3, r0
 80084c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80084cc:	e00f      	b.n	80084ee <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80084ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084d2:	3328      	adds	r3, #40	; 0x28
 80084d4:	2101      	movs	r1, #1
 80084d6:	4618      	mov	r0, r3
 80084d8:	f001 fe96 	bl	800a208 <RCCEx_PLL3_Config>
 80084dc:	4603      	mov	r3, r0
 80084de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80084e2:	e004      	b.n	80084ee <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80084e4:	2301      	movs	r3, #1
 80084e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80084ea:	e000      	b.n	80084ee <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80084ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d10b      	bne.n	800850e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80084f6:	4b6c      	ldr	r3, [pc, #432]	; (80086a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80084f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084fa:	f023 0107 	bic.w	r1, r3, #7
 80084fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008502:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008506:	4a68      	ldr	r2, [pc, #416]	; (80086a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008508:	430b      	orrs	r3, r1
 800850a:	6593      	str	r3, [r2, #88]	; 0x58
 800850c:	e003      	b.n	8008516 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800850e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008512:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008516:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800851a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800851e:	f002 0320 	and.w	r3, r2, #32
 8008522:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008526:	2300      	movs	r3, #0
 8008528:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800852c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008530:	460b      	mov	r3, r1
 8008532:	4313      	orrs	r3, r2
 8008534:	d055      	beq.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008536:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800853a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800853e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008542:	d033      	beq.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8008544:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008548:	d82c      	bhi.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800854a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800854e:	d02f      	beq.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8008550:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008554:	d826      	bhi.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008556:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800855a:	d02b      	beq.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800855c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008560:	d820      	bhi.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008562:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008566:	d012      	beq.n	800858e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008568:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800856c:	d81a      	bhi.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800856e:	2b00      	cmp	r3, #0
 8008570:	d022      	beq.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8008572:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008576:	d115      	bne.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008578:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800857c:	3308      	adds	r3, #8
 800857e:	2100      	movs	r1, #0
 8008580:	4618      	mov	r0, r3
 8008582:	f001 fd8f 	bl	800a0a4 <RCCEx_PLL2_Config>
 8008586:	4603      	mov	r3, r0
 8008588:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800858c:	e015      	b.n	80085ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800858e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008592:	3328      	adds	r3, #40	; 0x28
 8008594:	2102      	movs	r1, #2
 8008596:	4618      	mov	r0, r3
 8008598:	f001 fe36 	bl	800a208 <RCCEx_PLL3_Config>
 800859c:	4603      	mov	r3, r0
 800859e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80085a2:	e00a      	b.n	80085ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80085a4:	2301      	movs	r3, #1
 80085a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80085aa:	e006      	b.n	80085ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80085ac:	bf00      	nop
 80085ae:	e004      	b.n	80085ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80085b0:	bf00      	nop
 80085b2:	e002      	b.n	80085ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80085b4:	bf00      	nop
 80085b6:	e000      	b.n	80085ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80085b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d10b      	bne.n	80085da <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80085c2:	4b39      	ldr	r3, [pc, #228]	; (80086a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80085c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085c6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80085ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085d2:	4a35      	ldr	r2, [pc, #212]	; (80086a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80085d4:	430b      	orrs	r3, r1
 80085d6:	6553      	str	r3, [r2, #84]	; 0x54
 80085d8:	e003      	b.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80085de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80085e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ea:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80085ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80085f2:	2300      	movs	r3, #0
 80085f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80085f8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80085fc:	460b      	mov	r3, r1
 80085fe:	4313      	orrs	r3, r2
 8008600:	d058      	beq.n	80086b4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008602:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008606:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800860a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800860e:	d033      	beq.n	8008678 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8008610:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008614:	d82c      	bhi.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008616:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800861a:	d02f      	beq.n	800867c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800861c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008620:	d826      	bhi.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008622:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008626:	d02b      	beq.n	8008680 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8008628:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800862c:	d820      	bhi.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800862e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008632:	d012      	beq.n	800865a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008634:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008638:	d81a      	bhi.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800863a:	2b00      	cmp	r3, #0
 800863c:	d022      	beq.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800863e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008642:	d115      	bne.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008644:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008648:	3308      	adds	r3, #8
 800864a:	2100      	movs	r1, #0
 800864c:	4618      	mov	r0, r3
 800864e:	f001 fd29 	bl	800a0a4 <RCCEx_PLL2_Config>
 8008652:	4603      	mov	r3, r0
 8008654:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008658:	e015      	b.n	8008686 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800865a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800865e:	3328      	adds	r3, #40	; 0x28
 8008660:	2102      	movs	r1, #2
 8008662:	4618      	mov	r0, r3
 8008664:	f001 fdd0 	bl	800a208 <RCCEx_PLL3_Config>
 8008668:	4603      	mov	r3, r0
 800866a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800866e:	e00a      	b.n	8008686 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008670:	2301      	movs	r3, #1
 8008672:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008676:	e006      	b.n	8008686 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008678:	bf00      	nop
 800867a:	e004      	b.n	8008686 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800867c:	bf00      	nop
 800867e:	e002      	b.n	8008686 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008680:	bf00      	nop
 8008682:	e000      	b.n	8008686 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008684:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008686:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800868a:	2b00      	cmp	r3, #0
 800868c:	d10e      	bne.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800868e:	4b06      	ldr	r3, [pc, #24]	; (80086a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008692:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8008696:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800869a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800869e:	4a02      	ldr	r2, [pc, #8]	; (80086a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80086a0:	430b      	orrs	r3, r1
 80086a2:	6593      	str	r3, [r2, #88]	; 0x58
 80086a4:	e006      	b.n	80086b4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80086a6:	bf00      	nop
 80086a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80086b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80086b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086bc:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80086c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80086c4:	2300      	movs	r3, #0
 80086c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80086ca:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80086ce:	460b      	mov	r3, r1
 80086d0:	4313      	orrs	r3, r2
 80086d2:	d055      	beq.n	8008780 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80086d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80086dc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80086e0:	d033      	beq.n	800874a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80086e2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80086e6:	d82c      	bhi.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80086e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086ec:	d02f      	beq.n	800874e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80086ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086f2:	d826      	bhi.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80086f4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80086f8:	d02b      	beq.n	8008752 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80086fa:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80086fe:	d820      	bhi.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008700:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008704:	d012      	beq.n	800872c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8008706:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800870a:	d81a      	bhi.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800870c:	2b00      	cmp	r3, #0
 800870e:	d022      	beq.n	8008756 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8008710:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008714:	d115      	bne.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008716:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800871a:	3308      	adds	r3, #8
 800871c:	2100      	movs	r1, #0
 800871e:	4618      	mov	r0, r3
 8008720:	f001 fcc0 	bl	800a0a4 <RCCEx_PLL2_Config>
 8008724:	4603      	mov	r3, r0
 8008726:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800872a:	e015      	b.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800872c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008730:	3328      	adds	r3, #40	; 0x28
 8008732:	2102      	movs	r1, #2
 8008734:	4618      	mov	r0, r3
 8008736:	f001 fd67 	bl	800a208 <RCCEx_PLL3_Config>
 800873a:	4603      	mov	r3, r0
 800873c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008740:	e00a      	b.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008742:	2301      	movs	r3, #1
 8008744:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008748:	e006      	b.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800874a:	bf00      	nop
 800874c:	e004      	b.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800874e:	bf00      	nop
 8008750:	e002      	b.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008752:	bf00      	nop
 8008754:	e000      	b.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008756:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008758:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800875c:	2b00      	cmp	r3, #0
 800875e:	d10b      	bne.n	8008778 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008760:	4ba1      	ldr	r3, [pc, #644]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008764:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8008768:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800876c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008770:	4a9d      	ldr	r2, [pc, #628]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008772:	430b      	orrs	r3, r1
 8008774:	6593      	str	r3, [r2, #88]	; 0x58
 8008776:	e003      	b.n	8008780 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008778:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800877c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008780:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008788:	f002 0308 	and.w	r3, r2, #8
 800878c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008790:	2300      	movs	r3, #0
 8008792:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008796:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800879a:	460b      	mov	r3, r1
 800879c:	4313      	orrs	r3, r2
 800879e:	d01e      	beq.n	80087de <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80087a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087ac:	d10c      	bne.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80087ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087b2:	3328      	adds	r3, #40	; 0x28
 80087b4:	2102      	movs	r1, #2
 80087b6:	4618      	mov	r0, r3
 80087b8:	f001 fd26 	bl	800a208 <RCCEx_PLL3_Config>
 80087bc:	4603      	mov	r3, r0
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d002      	beq.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80087c2:	2301      	movs	r3, #1
 80087c4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80087c8:	4b87      	ldr	r3, [pc, #540]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80087ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087cc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80087d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087d8:	4a83      	ldr	r2, [pc, #524]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80087da:	430b      	orrs	r3, r1
 80087dc:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80087de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087e6:	f002 0310 	and.w	r3, r2, #16
 80087ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80087ee:	2300      	movs	r3, #0
 80087f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80087f4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80087f8:	460b      	mov	r3, r1
 80087fa:	4313      	orrs	r3, r2
 80087fc:	d01e      	beq.n	800883c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80087fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008802:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008806:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800880a:	d10c      	bne.n	8008826 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800880c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008810:	3328      	adds	r3, #40	; 0x28
 8008812:	2102      	movs	r1, #2
 8008814:	4618      	mov	r0, r3
 8008816:	f001 fcf7 	bl	800a208 <RCCEx_PLL3_Config>
 800881a:	4603      	mov	r3, r0
 800881c:	2b00      	cmp	r3, #0
 800881e:	d002      	beq.n	8008826 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8008820:	2301      	movs	r3, #1
 8008822:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008826:	4b70      	ldr	r3, [pc, #448]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800882a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800882e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008832:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008836:	4a6c      	ldr	r2, [pc, #432]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008838:	430b      	orrs	r3, r1
 800883a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800883c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008844:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8008848:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800884c:	2300      	movs	r3, #0
 800884e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008852:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8008856:	460b      	mov	r3, r1
 8008858:	4313      	orrs	r3, r2
 800885a:	d03e      	beq.n	80088da <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800885c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008860:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008864:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008868:	d022      	beq.n	80088b0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800886a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800886e:	d81b      	bhi.n	80088a8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8008870:	2b00      	cmp	r3, #0
 8008872:	d003      	beq.n	800887c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008874:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008878:	d00b      	beq.n	8008892 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800887a:	e015      	b.n	80088a8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800887c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008880:	3308      	adds	r3, #8
 8008882:	2100      	movs	r1, #0
 8008884:	4618      	mov	r0, r3
 8008886:	f001 fc0d 	bl	800a0a4 <RCCEx_PLL2_Config>
 800888a:	4603      	mov	r3, r0
 800888c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008890:	e00f      	b.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008892:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008896:	3328      	adds	r3, #40	; 0x28
 8008898:	2102      	movs	r1, #2
 800889a:	4618      	mov	r0, r3
 800889c:	f001 fcb4 	bl	800a208 <RCCEx_PLL3_Config>
 80088a0:	4603      	mov	r3, r0
 80088a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80088a6:	e004      	b.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80088a8:	2301      	movs	r3, #1
 80088aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80088ae:	e000      	b.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80088b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d10b      	bne.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80088ba:	4b4b      	ldr	r3, [pc, #300]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80088bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088be:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80088c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80088ca:	4a47      	ldr	r2, [pc, #284]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80088cc:	430b      	orrs	r3, r1
 80088ce:	6593      	str	r3, [r2, #88]	; 0x58
 80088d0:	e003      	b.n	80088da <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80088d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80088da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088e2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80088e6:	67bb      	str	r3, [r7, #120]	; 0x78
 80088e8:	2300      	movs	r3, #0
 80088ea:	67fb      	str	r3, [r7, #124]	; 0x7c
 80088ec:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80088f0:	460b      	mov	r3, r1
 80088f2:	4313      	orrs	r3, r2
 80088f4:	d03b      	beq.n	800896e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80088f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088fe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008902:	d01f      	beq.n	8008944 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008904:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008908:	d818      	bhi.n	800893c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800890a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800890e:	d003      	beq.n	8008918 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8008910:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008914:	d007      	beq.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8008916:	e011      	b.n	800893c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008918:	4b33      	ldr	r3, [pc, #204]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800891a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800891c:	4a32      	ldr	r2, [pc, #200]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800891e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008922:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008924:	e00f      	b.n	8008946 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008926:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800892a:	3328      	adds	r3, #40	; 0x28
 800892c:	2101      	movs	r1, #1
 800892e:	4618      	mov	r0, r3
 8008930:	f001 fc6a 	bl	800a208 <RCCEx_PLL3_Config>
 8008934:	4603      	mov	r3, r0
 8008936:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800893a:	e004      	b.n	8008946 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800893c:	2301      	movs	r3, #1
 800893e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008942:	e000      	b.n	8008946 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8008944:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008946:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800894a:	2b00      	cmp	r3, #0
 800894c:	d10b      	bne.n	8008966 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800894e:	4b26      	ldr	r3, [pc, #152]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008952:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008956:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800895a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800895e:	4a22      	ldr	r2, [pc, #136]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008960:	430b      	orrs	r3, r1
 8008962:	6553      	str	r3, [r2, #84]	; 0x54
 8008964:	e003      	b.n	800896e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008966:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800896a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800896e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008976:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800897a:	673b      	str	r3, [r7, #112]	; 0x70
 800897c:	2300      	movs	r3, #0
 800897e:	677b      	str	r3, [r7, #116]	; 0x74
 8008980:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8008984:	460b      	mov	r3, r1
 8008986:	4313      	orrs	r3, r2
 8008988:	d034      	beq.n	80089f4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800898a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800898e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008990:	2b00      	cmp	r3, #0
 8008992:	d003      	beq.n	800899c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008994:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008998:	d007      	beq.n	80089aa <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800899a:	e011      	b.n	80089c0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800899c:	4b12      	ldr	r3, [pc, #72]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800899e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089a0:	4a11      	ldr	r2, [pc, #68]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80089a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80089a8:	e00e      	b.n	80089c8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80089aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089ae:	3308      	adds	r3, #8
 80089b0:	2102      	movs	r1, #2
 80089b2:	4618      	mov	r0, r3
 80089b4:	f001 fb76 	bl	800a0a4 <RCCEx_PLL2_Config>
 80089b8:	4603      	mov	r3, r0
 80089ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80089be:	e003      	b.n	80089c8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80089c0:	2301      	movs	r3, #1
 80089c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80089c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d10d      	bne.n	80089ec <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80089d0:	4b05      	ldr	r3, [pc, #20]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80089d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80089d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089de:	4a02      	ldr	r2, [pc, #8]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80089e0:	430b      	orrs	r3, r1
 80089e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80089e4:	e006      	b.n	80089f4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80089e6:	bf00      	nop
 80089e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80089f0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80089f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089fc:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8008a00:	66bb      	str	r3, [r7, #104]	; 0x68
 8008a02:	2300      	movs	r3, #0
 8008a04:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008a06:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8008a0a:	460b      	mov	r3, r1
 8008a0c:	4313      	orrs	r3, r2
 8008a0e:	d00c      	beq.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a14:	3328      	adds	r3, #40	; 0x28
 8008a16:	2102      	movs	r1, #2
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f001 fbf5 	bl	800a208 <RCCEx_PLL3_Config>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d002      	beq.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008a24:	2301      	movs	r3, #1
 8008a26:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a32:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8008a36:	663b      	str	r3, [r7, #96]	; 0x60
 8008a38:	2300      	movs	r3, #0
 8008a3a:	667b      	str	r3, [r7, #100]	; 0x64
 8008a3c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8008a40:	460b      	mov	r3, r1
 8008a42:	4313      	orrs	r3, r2
 8008a44:	d038      	beq.n	8008ab8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a52:	d018      	beq.n	8008a86 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008a54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a58:	d811      	bhi.n	8008a7e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008a5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a5e:	d014      	beq.n	8008a8a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008a60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a64:	d80b      	bhi.n	8008a7e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d011      	beq.n	8008a8e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8008a6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a6e:	d106      	bne.n	8008a7e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a70:	4bc3      	ldr	r3, [pc, #780]	; (8008d80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a74:	4ac2      	ldr	r2, [pc, #776]	; (8008d80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008a7c:	e008      	b.n	8008a90 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a7e:	2301      	movs	r3, #1
 8008a80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008a84:	e004      	b.n	8008a90 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008a86:	bf00      	nop
 8008a88:	e002      	b.n	8008a90 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008a8a:	bf00      	nop
 8008a8c:	e000      	b.n	8008a90 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008a8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d10b      	bne.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008a98:	4bb9      	ldr	r3, [pc, #740]	; (8008d80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a9c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008aa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008aa8:	4ab5      	ldr	r2, [pc, #724]	; (8008d80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008aaa:	430b      	orrs	r3, r1
 8008aac:	6553      	str	r3, [r2, #84]	; 0x54
 8008aae:	e003      	b.n	8008ab8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ab0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008ab4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008ab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8008ac4:	65bb      	str	r3, [r7, #88]	; 0x58
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008aca:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8008ace:	460b      	mov	r3, r1
 8008ad0:	4313      	orrs	r3, r2
 8008ad2:	d009      	beq.n	8008ae8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008ad4:	4baa      	ldr	r3, [pc, #680]	; (8008d80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008ad6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ad8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ae0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ae2:	4aa7      	ldr	r2, [pc, #668]	; (8008d80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008ae4:	430b      	orrs	r3, r1
 8008ae6:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8008af4:	653b      	str	r3, [r7, #80]	; 0x50
 8008af6:	2300      	movs	r3, #0
 8008af8:	657b      	str	r3, [r7, #84]	; 0x54
 8008afa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8008afe:	460b      	mov	r3, r1
 8008b00:	4313      	orrs	r3, r2
 8008b02:	d00a      	beq.n	8008b1a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008b04:	4b9e      	ldr	r3, [pc, #632]	; (8008d80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b06:	691b      	ldr	r3, [r3, #16]
 8008b08:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8008b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b10:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008b14:	4a9a      	ldr	r2, [pc, #616]	; (8008d80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b16:	430b      	orrs	r3, r1
 8008b18:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b22:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8008b26:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b28:	2300      	movs	r3, #0
 8008b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b2c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8008b30:	460b      	mov	r3, r1
 8008b32:	4313      	orrs	r3, r2
 8008b34:	d009      	beq.n	8008b4a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008b36:	4b92      	ldr	r3, [pc, #584]	; (8008d80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b3a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8008b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b44:	4a8e      	ldr	r2, [pc, #568]	; (8008d80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b46:	430b      	orrs	r3, r1
 8008b48:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b52:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8008b56:	643b      	str	r3, [r7, #64]	; 0x40
 8008b58:	2300      	movs	r3, #0
 8008b5a:	647b      	str	r3, [r7, #68]	; 0x44
 8008b5c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8008b60:	460b      	mov	r3, r1
 8008b62:	4313      	orrs	r3, r2
 8008b64:	d00e      	beq.n	8008b84 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008b66:	4b86      	ldr	r3, [pc, #536]	; (8008d80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b68:	691b      	ldr	r3, [r3, #16]
 8008b6a:	4a85      	ldr	r2, [pc, #532]	; (8008d80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b6c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008b70:	6113      	str	r3, [r2, #16]
 8008b72:	4b83      	ldr	r3, [pc, #524]	; (8008d80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b74:	6919      	ldr	r1, [r3, #16]
 8008b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b7a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008b7e:	4a80      	ldr	r2, [pc, #512]	; (8008d80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b80:	430b      	orrs	r3, r1
 8008b82:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008b84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b8c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8008b90:	63bb      	str	r3, [r7, #56]	; 0x38
 8008b92:	2300      	movs	r3, #0
 8008b94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b96:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8008b9a:	460b      	mov	r3, r1
 8008b9c:	4313      	orrs	r3, r2
 8008b9e:	d009      	beq.n	8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008ba0:	4b77      	ldr	r3, [pc, #476]	; (8008d80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008ba2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ba4:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8008ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bae:	4a74      	ldr	r2, [pc, #464]	; (8008d80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008bb0:	430b      	orrs	r3, r1
 8008bb2:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bbc:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8008bc0:	633b      	str	r3, [r7, #48]	; 0x30
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	637b      	str	r3, [r7, #52]	; 0x34
 8008bc6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8008bca:	460b      	mov	r3, r1
 8008bcc:	4313      	orrs	r3, r2
 8008bce:	d00a      	beq.n	8008be6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008bd0:	4b6b      	ldr	r3, [pc, #428]	; (8008d80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bd4:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8008bd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008be0:	4a67      	ldr	r2, [pc, #412]	; (8008d80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008be2:	430b      	orrs	r3, r1
 8008be4:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008be6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bee:	2100      	movs	r1, #0
 8008bf0:	62b9      	str	r1, [r7, #40]	; 0x28
 8008bf2:	f003 0301 	and.w	r3, r3, #1
 8008bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008bf8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	4313      	orrs	r3, r2
 8008c00:	d011      	beq.n	8008c26 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c06:	3308      	adds	r3, #8
 8008c08:	2100      	movs	r1, #0
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f001 fa4a 	bl	800a0a4 <RCCEx_PLL2_Config>
 8008c10:	4603      	mov	r3, r0
 8008c12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008c16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d003      	beq.n	8008c26 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c22:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c2e:	2100      	movs	r1, #0
 8008c30:	6239      	str	r1, [r7, #32]
 8008c32:	f003 0302 	and.w	r3, r3, #2
 8008c36:	627b      	str	r3, [r7, #36]	; 0x24
 8008c38:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008c3c:	460b      	mov	r3, r1
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	d011      	beq.n	8008c66 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c46:	3308      	adds	r3, #8
 8008c48:	2101      	movs	r1, #1
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f001 fa2a 	bl	800a0a4 <RCCEx_PLL2_Config>
 8008c50:	4603      	mov	r3, r0
 8008c52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008c56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d003      	beq.n	8008c66 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c62:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c6e:	2100      	movs	r1, #0
 8008c70:	61b9      	str	r1, [r7, #24]
 8008c72:	f003 0304 	and.w	r3, r3, #4
 8008c76:	61fb      	str	r3, [r7, #28]
 8008c78:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008c7c:	460b      	mov	r3, r1
 8008c7e:	4313      	orrs	r3, r2
 8008c80:	d011      	beq.n	8008ca6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c86:	3308      	adds	r3, #8
 8008c88:	2102      	movs	r1, #2
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f001 fa0a 	bl	800a0a4 <RCCEx_PLL2_Config>
 8008c90:	4603      	mov	r3, r0
 8008c92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008c96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d003      	beq.n	8008ca6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008ca2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cae:	2100      	movs	r1, #0
 8008cb0:	6139      	str	r1, [r7, #16]
 8008cb2:	f003 0308 	and.w	r3, r3, #8
 8008cb6:	617b      	str	r3, [r7, #20]
 8008cb8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008cbc:	460b      	mov	r3, r1
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	d011      	beq.n	8008ce6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cc6:	3328      	adds	r3, #40	; 0x28
 8008cc8:	2100      	movs	r1, #0
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f001 fa9c 	bl	800a208 <RCCEx_PLL3_Config>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8008cd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d003      	beq.n	8008ce6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008ce2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cee:	2100      	movs	r1, #0
 8008cf0:	60b9      	str	r1, [r7, #8]
 8008cf2:	f003 0310 	and.w	r3, r3, #16
 8008cf6:	60fb      	str	r3, [r7, #12]
 8008cf8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008cfc:	460b      	mov	r3, r1
 8008cfe:	4313      	orrs	r3, r2
 8008d00:	d011      	beq.n	8008d26 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d06:	3328      	adds	r3, #40	; 0x28
 8008d08:	2101      	movs	r1, #1
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f001 fa7c 	bl	800a208 <RCCEx_PLL3_Config>
 8008d10:	4603      	mov	r3, r0
 8008d12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008d16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d003      	beq.n	8008d26 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d22:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d2e:	2100      	movs	r1, #0
 8008d30:	6039      	str	r1, [r7, #0]
 8008d32:	f003 0320 	and.w	r3, r3, #32
 8008d36:	607b      	str	r3, [r7, #4]
 8008d38:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008d3c:	460b      	mov	r3, r1
 8008d3e:	4313      	orrs	r3, r2
 8008d40:	d011      	beq.n	8008d66 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d46:	3328      	adds	r3, #40	; 0x28
 8008d48:	2102      	movs	r1, #2
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f001 fa5c 	bl	800a208 <RCCEx_PLL3_Config>
 8008d50:	4603      	mov	r3, r0
 8008d52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008d56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d003      	beq.n	8008d66 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d62:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8008d66:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d101      	bne.n	8008d72 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	e000      	b.n	8008d74 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008d72:	2301      	movs	r3, #1
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008d80:	58024400 	.word	0x58024400

08008d84 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b090      	sub	sp, #64	; 0x40
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008d8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d92:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8008d96:	430b      	orrs	r3, r1
 8008d98:	f040 8094 	bne.w	8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008d9c:	4b9e      	ldr	r3, [pc, #632]	; (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008d9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008da0:	f003 0307 	and.w	r3, r3, #7
 8008da4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da8:	2b04      	cmp	r3, #4
 8008daa:	f200 8087 	bhi.w	8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008dae:	a201      	add	r2, pc, #4	; (adr r2, 8008db4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008db4:	08008dc9 	.word	0x08008dc9
 8008db8:	08008df1 	.word	0x08008df1
 8008dbc:	08008e19 	.word	0x08008e19
 8008dc0:	08008eb5 	.word	0x08008eb5
 8008dc4:	08008e41 	.word	0x08008e41
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008dc8:	4b93      	ldr	r3, [pc, #588]	; (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008dd0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008dd4:	d108      	bne.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008dd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f001 f810 	bl	8009e00 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008de2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008de4:	f000 bd45 	b.w	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008de8:	2300      	movs	r3, #0
 8008dea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008dec:	f000 bd41 	b.w	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008df0:	4b89      	ldr	r3, [pc, #548]	; (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008df8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008dfc:	d108      	bne.n	8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008dfe:	f107 0318 	add.w	r3, r7, #24
 8008e02:	4618      	mov	r0, r3
 8008e04:	f000 fd54 	bl	80098b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008e08:	69bb      	ldr	r3, [r7, #24]
 8008e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e0c:	f000 bd31 	b.w	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e10:	2300      	movs	r3, #0
 8008e12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e14:	f000 bd2d 	b.w	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008e18:	4b7f      	ldr	r3, [pc, #508]	; (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e24:	d108      	bne.n	8008e38 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e26:	f107 030c 	add.w	r3, r7, #12
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f000 fe94 	bl	8009b58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e34:	f000 bd1d 	b.w	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e3c:	f000 bd19 	b.w	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008e40:	4b75      	ldr	r3, [pc, #468]	; (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008e42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e44:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008e48:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008e4a:	4b73      	ldr	r3, [pc, #460]	; (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f003 0304 	and.w	r3, r3, #4
 8008e52:	2b04      	cmp	r3, #4
 8008e54:	d10c      	bne.n	8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d109      	bne.n	8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008e5c:	4b6e      	ldr	r3, [pc, #440]	; (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	08db      	lsrs	r3, r3, #3
 8008e62:	f003 0303 	and.w	r3, r3, #3
 8008e66:	4a6d      	ldr	r2, [pc, #436]	; (800901c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008e68:	fa22 f303 	lsr.w	r3, r2, r3
 8008e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e6e:	e01f      	b.n	8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008e70:	4b69      	ldr	r3, [pc, #420]	; (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e7c:	d106      	bne.n	8008e8c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8008e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e84:	d102      	bne.n	8008e8c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008e86:	4b66      	ldr	r3, [pc, #408]	; (8009020 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008e88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e8a:	e011      	b.n	8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008e8c:	4b62      	ldr	r3, [pc, #392]	; (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e98:	d106      	bne.n	8008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ea0:	d102      	bne.n	8008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008ea2:	4b60      	ldr	r3, [pc, #384]	; (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ea6:	e003      	b.n	8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008eac:	f000 bce1 	b.w	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008eb0:	f000 bcdf 	b.w	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008eb4:	4b5c      	ldr	r3, [pc, #368]	; (8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008eb8:	f000 bcdb 	b.w	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ec0:	f000 bcd7 	b.w	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008ec4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ec8:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8008ecc:	430b      	orrs	r3, r1
 8008ece:	f040 80ad 	bne.w	800902c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8008ed2:	4b51      	ldr	r3, [pc, #324]	; (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ed4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ed6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8008eda:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ede:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ee2:	d056      	beq.n	8008f92 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8008ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008eea:	f200 8090 	bhi.w	800900e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef0:	2bc0      	cmp	r3, #192	; 0xc0
 8008ef2:	f000 8088 	beq.w	8009006 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8008ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef8:	2bc0      	cmp	r3, #192	; 0xc0
 8008efa:	f200 8088 	bhi.w	800900e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f00:	2b80      	cmp	r3, #128	; 0x80
 8008f02:	d032      	beq.n	8008f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8008f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f06:	2b80      	cmp	r3, #128	; 0x80
 8008f08:	f200 8081 	bhi.w	800900e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d003      	beq.n	8008f1a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8008f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f14:	2b40      	cmp	r3, #64	; 0x40
 8008f16:	d014      	beq.n	8008f42 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8008f18:	e079      	b.n	800900e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008f1a:	4b3f      	ldr	r3, [pc, #252]	; (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f26:	d108      	bne.n	8008f3a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008f28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f000 ff67 	bl	8009e00 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f34:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f36:	f000 bc9c 	b.w	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f3e:	f000 bc98 	b.w	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008f42:	4b35      	ldr	r3, [pc, #212]	; (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008f4e:	d108      	bne.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f50:	f107 0318 	add.w	r3, r7, #24
 8008f54:	4618      	mov	r0, r3
 8008f56:	f000 fcab 	bl	80098b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008f5a:	69bb      	ldr	r3, [r7, #24]
 8008f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f5e:	f000 bc88 	b.w	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f62:	2300      	movs	r3, #0
 8008f64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f66:	f000 bc84 	b.w	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008f6a:	4b2b      	ldr	r3, [pc, #172]	; (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f76:	d108      	bne.n	8008f8a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f78:	f107 030c 	add.w	r3, r7, #12
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f000 fdeb 	bl	8009b58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f86:	f000 bc74 	b.w	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f8e:	f000 bc70 	b.w	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008f92:	4b21      	ldr	r3, [pc, #132]	; (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f96:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008f9a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008f9c:	4b1e      	ldr	r3, [pc, #120]	; (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f003 0304 	and.w	r3, r3, #4
 8008fa4:	2b04      	cmp	r3, #4
 8008fa6:	d10c      	bne.n	8008fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8008fa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d109      	bne.n	8008fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008fae:	4b1a      	ldr	r3, [pc, #104]	; (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	08db      	lsrs	r3, r3, #3
 8008fb4:	f003 0303 	and.w	r3, r3, #3
 8008fb8:	4a18      	ldr	r2, [pc, #96]	; (800901c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008fba:	fa22 f303 	lsr.w	r3, r2, r3
 8008fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fc0:	e01f      	b.n	8009002 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008fc2:	4b15      	ldr	r3, [pc, #84]	; (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fce:	d106      	bne.n	8008fde <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8008fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008fd6:	d102      	bne.n	8008fde <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008fd8:	4b11      	ldr	r3, [pc, #68]	; (8009020 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008fda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fdc:	e011      	b.n	8009002 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008fde:	4b0e      	ldr	r3, [pc, #56]	; (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fe6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008fea:	d106      	bne.n	8008ffa <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8008fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ff2:	d102      	bne.n	8008ffa <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008ff4:	4b0b      	ldr	r3, [pc, #44]	; (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ff8:	e003      	b.n	8009002 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008ffe:	f000 bc38 	b.w	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009002:	f000 bc36 	b.w	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009006:	4b08      	ldr	r3, [pc, #32]	; (8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009008:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800900a:	f000 bc32 	b.w	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800900e:	2300      	movs	r3, #0
 8009010:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009012:	f000 bc2e 	b.w	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009016:	bf00      	nop
 8009018:	58024400 	.word	0x58024400
 800901c:	03d09000 	.word	0x03d09000
 8009020:	003d0900 	.word	0x003d0900
 8009024:	017d7840 	.word	0x017d7840
 8009028:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800902c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009030:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8009034:	430b      	orrs	r3, r1
 8009036:	f040 809c 	bne.w	8009172 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800903a:	4b9e      	ldr	r3, [pc, #632]	; (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800903c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800903e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8009042:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8009044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009046:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800904a:	d054      	beq.n	80090f6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800904c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800904e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009052:	f200 808b 	bhi.w	800916c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009058:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800905c:	f000 8083 	beq.w	8009166 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8009060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009062:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009066:	f200 8081 	bhi.w	800916c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800906a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800906c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009070:	d02f      	beq.n	80090d2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8009072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009074:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009078:	d878      	bhi.n	800916c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800907a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800907c:	2b00      	cmp	r3, #0
 800907e:	d004      	beq.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8009080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009082:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009086:	d012      	beq.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8009088:	e070      	b.n	800916c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800908a:	4b8a      	ldr	r3, [pc, #552]	; (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009092:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009096:	d107      	bne.n	80090a8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009098:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800909c:	4618      	mov	r0, r3
 800909e:	f000 feaf 	bl	8009e00 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80090a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80090a6:	e3e4      	b.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80090a8:	2300      	movs	r3, #0
 80090aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80090ac:	e3e1      	b.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80090ae:	4b81      	ldr	r3, [pc, #516]	; (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80090b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80090ba:	d107      	bne.n	80090cc <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090bc:	f107 0318 	add.w	r3, r7, #24
 80090c0:	4618      	mov	r0, r3
 80090c2:	f000 fbf5 	bl	80098b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80090c6:	69bb      	ldr	r3, [r7, #24]
 80090c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80090ca:	e3d2      	b.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80090cc:	2300      	movs	r3, #0
 80090ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80090d0:	e3cf      	b.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80090d2:	4b78      	ldr	r3, [pc, #480]	; (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80090da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090de:	d107      	bne.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090e0:	f107 030c 	add.w	r3, r7, #12
 80090e4:	4618      	mov	r0, r3
 80090e6:	f000 fd37 	bl	8009b58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80090ee:	e3c0      	b.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80090f0:	2300      	movs	r3, #0
 80090f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80090f4:	e3bd      	b.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80090f6:	4b6f      	ldr	r3, [pc, #444]	; (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80090f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80090fe:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009100:	4b6c      	ldr	r3, [pc, #432]	; (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f003 0304 	and.w	r3, r3, #4
 8009108:	2b04      	cmp	r3, #4
 800910a:	d10c      	bne.n	8009126 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800910c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800910e:	2b00      	cmp	r3, #0
 8009110:	d109      	bne.n	8009126 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009112:	4b68      	ldr	r3, [pc, #416]	; (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	08db      	lsrs	r3, r3, #3
 8009118:	f003 0303 	and.w	r3, r3, #3
 800911c:	4a66      	ldr	r2, [pc, #408]	; (80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800911e:	fa22 f303 	lsr.w	r3, r2, r3
 8009122:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009124:	e01e      	b.n	8009164 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009126:	4b63      	ldr	r3, [pc, #396]	; (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800912e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009132:	d106      	bne.n	8009142 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8009134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009136:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800913a:	d102      	bne.n	8009142 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800913c:	4b5f      	ldr	r3, [pc, #380]	; (80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800913e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009140:	e010      	b.n	8009164 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009142:	4b5c      	ldr	r3, [pc, #368]	; (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800914a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800914e:	d106      	bne.n	800915e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8009150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009152:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009156:	d102      	bne.n	800915e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009158:	4b59      	ldr	r3, [pc, #356]	; (80092c0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800915a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800915c:	e002      	b.n	8009164 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800915e:	2300      	movs	r3, #0
 8009160:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009162:	e386      	b.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009164:	e385      	b.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009166:	4b57      	ldr	r3, [pc, #348]	; (80092c4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009168:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800916a:	e382      	b.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800916c:	2300      	movs	r3, #0
 800916e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009170:	e37f      	b.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009172:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009176:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800917a:	430b      	orrs	r3, r1
 800917c:	f040 80a7 	bne.w	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8009180:	4b4c      	ldr	r3, [pc, #304]	; (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009184:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8009188:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800918a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800918c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009190:	d055      	beq.n	800923e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8009192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009194:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009198:	f200 8096 	bhi.w	80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800919c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800919e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80091a2:	f000 8084 	beq.w	80092ae <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80091a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091a8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80091ac:	f200 808c 	bhi.w	80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80091b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80091b6:	d030      	beq.n	800921a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80091b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80091be:	f200 8083 	bhi.w	80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80091c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d004      	beq.n	80091d2 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80091c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80091ce:	d012      	beq.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80091d0:	e07a      	b.n	80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80091d2:	4b38      	ldr	r3, [pc, #224]	; (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80091de:	d107      	bne.n	80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80091e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80091e4:	4618      	mov	r0, r3
 80091e6:	f000 fe0b 	bl	8009e00 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80091ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091ee:	e340      	b.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80091f0:	2300      	movs	r3, #0
 80091f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091f4:	e33d      	b.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80091f6:	4b2f      	ldr	r3, [pc, #188]	; (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80091fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009202:	d107      	bne.n	8009214 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009204:	f107 0318 	add.w	r3, r7, #24
 8009208:	4618      	mov	r0, r3
 800920a:	f000 fb51 	bl	80098b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800920e:	69bb      	ldr	r3, [r7, #24]
 8009210:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009212:	e32e      	b.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009214:	2300      	movs	r3, #0
 8009216:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009218:	e32b      	b.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800921a:	4b26      	ldr	r3, [pc, #152]	; (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009222:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009226:	d107      	bne.n	8009238 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009228:	f107 030c 	add.w	r3, r7, #12
 800922c:	4618      	mov	r0, r3
 800922e:	f000 fc93 	bl	8009b58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009236:	e31c      	b.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009238:	2300      	movs	r3, #0
 800923a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800923c:	e319      	b.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800923e:	4b1d      	ldr	r3, [pc, #116]	; (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009242:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009246:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009248:	4b1a      	ldr	r3, [pc, #104]	; (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f003 0304 	and.w	r3, r3, #4
 8009250:	2b04      	cmp	r3, #4
 8009252:	d10c      	bne.n	800926e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8009254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009256:	2b00      	cmp	r3, #0
 8009258:	d109      	bne.n	800926e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800925a:	4b16      	ldr	r3, [pc, #88]	; (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	08db      	lsrs	r3, r3, #3
 8009260:	f003 0303 	and.w	r3, r3, #3
 8009264:	4a14      	ldr	r2, [pc, #80]	; (80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009266:	fa22 f303 	lsr.w	r3, r2, r3
 800926a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800926c:	e01e      	b.n	80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800926e:	4b11      	ldr	r3, [pc, #68]	; (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009276:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800927a:	d106      	bne.n	800928a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800927c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800927e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009282:	d102      	bne.n	800928a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009284:	4b0d      	ldr	r3, [pc, #52]	; (80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8009286:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009288:	e010      	b.n	80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800928a:	4b0a      	ldr	r3, [pc, #40]	; (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009292:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009296:	d106      	bne.n	80092a6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8009298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800929a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800929e:	d102      	bne.n	80092a6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80092a0:	4b07      	ldr	r3, [pc, #28]	; (80092c0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80092a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092a4:	e002      	b.n	80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80092a6:	2300      	movs	r3, #0
 80092a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80092aa:	e2e2      	b.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80092ac:	e2e1      	b.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80092ae:	4b05      	ldr	r3, [pc, #20]	; (80092c4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80092b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092b2:	e2de      	b.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80092b4:	58024400 	.word	0x58024400
 80092b8:	03d09000 	.word	0x03d09000
 80092bc:	003d0900 	.word	0x003d0900
 80092c0:	017d7840 	.word	0x017d7840
 80092c4:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80092c8:	2300      	movs	r3, #0
 80092ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092cc:	e2d1      	b.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80092ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092d2:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80092d6:	430b      	orrs	r3, r1
 80092d8:	f040 809c 	bne.w	8009414 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80092dc:	4b93      	ldr	r3, [pc, #588]	; (800952c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80092de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092e0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80092e4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80092e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80092ec:	d054      	beq.n	8009398 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80092ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80092f4:	f200 808b 	bhi.w	800940e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80092f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092fa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80092fe:	f000 8083 	beq.w	8009408 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8009302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009304:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009308:	f200 8081 	bhi.w	800940e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800930c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800930e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009312:	d02f      	beq.n	8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8009314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009316:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800931a:	d878      	bhi.n	800940e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800931c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800931e:	2b00      	cmp	r3, #0
 8009320:	d004      	beq.n	800932c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8009322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009324:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009328:	d012      	beq.n	8009350 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800932a:	e070      	b.n	800940e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800932c:	4b7f      	ldr	r3, [pc, #508]	; (800952c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009334:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009338:	d107      	bne.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800933a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800933e:	4618      	mov	r0, r3
 8009340:	f000 fd5e 	bl	8009e00 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009346:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009348:	e293      	b.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800934a:	2300      	movs	r3, #0
 800934c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800934e:	e290      	b.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009350:	4b76      	ldr	r3, [pc, #472]	; (800952c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009358:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800935c:	d107      	bne.n	800936e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800935e:	f107 0318 	add.w	r3, r7, #24
 8009362:	4618      	mov	r0, r3
 8009364:	f000 faa4 	bl	80098b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009368:	69bb      	ldr	r3, [r7, #24]
 800936a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800936c:	e281      	b.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800936e:	2300      	movs	r3, #0
 8009370:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009372:	e27e      	b.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009374:	4b6d      	ldr	r3, [pc, #436]	; (800952c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800937c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009380:	d107      	bne.n	8009392 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009382:	f107 030c 	add.w	r3, r7, #12
 8009386:	4618      	mov	r0, r3
 8009388:	f000 fbe6 	bl	8009b58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009390:	e26f      	b.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009392:	2300      	movs	r3, #0
 8009394:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009396:	e26c      	b.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009398:	4b64      	ldr	r3, [pc, #400]	; (800952c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800939a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800939c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80093a0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80093a2:	4b62      	ldr	r3, [pc, #392]	; (800952c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f003 0304 	and.w	r3, r3, #4
 80093aa:	2b04      	cmp	r3, #4
 80093ac:	d10c      	bne.n	80093c8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80093ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d109      	bne.n	80093c8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80093b4:	4b5d      	ldr	r3, [pc, #372]	; (800952c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	08db      	lsrs	r3, r3, #3
 80093ba:	f003 0303 	and.w	r3, r3, #3
 80093be:	4a5c      	ldr	r2, [pc, #368]	; (8009530 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80093c0:	fa22 f303 	lsr.w	r3, r2, r3
 80093c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093c6:	e01e      	b.n	8009406 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80093c8:	4b58      	ldr	r3, [pc, #352]	; (800952c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093d4:	d106      	bne.n	80093e4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80093d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80093dc:	d102      	bne.n	80093e4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80093de:	4b55      	ldr	r3, [pc, #340]	; (8009534 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80093e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093e2:	e010      	b.n	8009406 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80093e4:	4b51      	ldr	r3, [pc, #324]	; (800952c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80093f0:	d106      	bne.n	8009400 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80093f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093f8:	d102      	bne.n	8009400 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80093fa:	4b4f      	ldr	r3, [pc, #316]	; (8009538 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80093fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093fe:	e002      	b.n	8009406 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009400:	2300      	movs	r3, #0
 8009402:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009404:	e235      	b.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009406:	e234      	b.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009408:	4b4c      	ldr	r3, [pc, #304]	; (800953c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800940a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800940c:	e231      	b.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800940e:	2300      	movs	r3, #0
 8009410:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009412:	e22e      	b.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8009414:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009418:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800941c:	430b      	orrs	r3, r1
 800941e:	f040 808f 	bne.w	8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8009422:	4b42      	ldr	r3, [pc, #264]	; (800952c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009424:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009426:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800942a:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800942c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800942e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009432:	d06b      	beq.n	800950c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8009434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009436:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800943a:	d874      	bhi.n	8009526 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800943c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800943e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009442:	d056      	beq.n	80094f2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8009444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009446:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800944a:	d86c      	bhi.n	8009526 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800944c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800944e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009452:	d03b      	beq.n	80094cc <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8009454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009456:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800945a:	d864      	bhi.n	8009526 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800945c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800945e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009462:	d021      	beq.n	80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8009464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009466:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800946a:	d85c      	bhi.n	8009526 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800946c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800946e:	2b00      	cmp	r3, #0
 8009470:	d004      	beq.n	800947c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8009472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009474:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009478:	d004      	beq.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800947a:	e054      	b.n	8009526 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800947c:	f7fe fa4c 	bl	8007918 <HAL_RCC_GetPCLK1Freq>
 8009480:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009482:	e1f6      	b.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009484:	4b29      	ldr	r3, [pc, #164]	; (800952c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800948c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009490:	d107      	bne.n	80094a2 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009492:	f107 0318 	add.w	r3, r7, #24
 8009496:	4618      	mov	r0, r3
 8009498:	f000 fa0a 	bl	80098b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800949c:	69fb      	ldr	r3, [r7, #28]
 800949e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094a0:	e1e7      	b.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80094a2:	2300      	movs	r3, #0
 80094a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80094a6:	e1e4      	b.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80094a8:	4b20      	ldr	r3, [pc, #128]	; (800952c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80094b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094b4:	d107      	bne.n	80094c6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80094b6:	f107 030c 	add.w	r3, r7, #12
 80094ba:	4618      	mov	r0, r3
 80094bc:	f000 fb4c 	bl	8009b58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80094c0:	693b      	ldr	r3, [r7, #16]
 80094c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094c4:	e1d5      	b.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80094c6:	2300      	movs	r3, #0
 80094c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80094ca:	e1d2      	b.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80094cc:	4b17      	ldr	r3, [pc, #92]	; (800952c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f003 0304 	and.w	r3, r3, #4
 80094d4:	2b04      	cmp	r3, #4
 80094d6:	d109      	bne.n	80094ec <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80094d8:	4b14      	ldr	r3, [pc, #80]	; (800952c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	08db      	lsrs	r3, r3, #3
 80094de:	f003 0303 	and.w	r3, r3, #3
 80094e2:	4a13      	ldr	r2, [pc, #76]	; (8009530 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80094e4:	fa22 f303 	lsr.w	r3, r2, r3
 80094e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094ea:	e1c2      	b.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80094ec:	2300      	movs	r3, #0
 80094ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80094f0:	e1bf      	b.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80094f2:	4b0e      	ldr	r3, [pc, #56]	; (800952c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094fe:	d102      	bne.n	8009506 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8009500:	4b0c      	ldr	r3, [pc, #48]	; (8009534 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009502:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009504:	e1b5      	b.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009506:	2300      	movs	r3, #0
 8009508:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800950a:	e1b2      	b.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800950c:	4b07      	ldr	r3, [pc, #28]	; (800952c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009514:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009518:	d102      	bne.n	8009520 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800951a:	4b07      	ldr	r3, [pc, #28]	; (8009538 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800951c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800951e:	e1a8      	b.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009520:	2300      	movs	r3, #0
 8009522:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009524:	e1a5      	b.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009526:	2300      	movs	r3, #0
 8009528:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800952a:	e1a2      	b.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800952c:	58024400 	.word	0x58024400
 8009530:	03d09000 	.word	0x03d09000
 8009534:	003d0900 	.word	0x003d0900
 8009538:	017d7840 	.word	0x017d7840
 800953c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009540:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009544:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8009548:	430b      	orrs	r3, r1
 800954a:	d173      	bne.n	8009634 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800954c:	4b9c      	ldr	r3, [pc, #624]	; (80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800954e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009550:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009554:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009558:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800955c:	d02f      	beq.n	80095be <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800955e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009560:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009564:	d863      	bhi.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8009566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009568:	2b00      	cmp	r3, #0
 800956a:	d004      	beq.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800956c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800956e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009572:	d012      	beq.n	800959a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8009574:	e05b      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009576:	4b92      	ldr	r3, [pc, #584]	; (80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800957e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009582:	d107      	bne.n	8009594 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009584:	f107 0318 	add.w	r3, r7, #24
 8009588:	4618      	mov	r0, r3
 800958a:	f000 f991 	bl	80098b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800958e:	69bb      	ldr	r3, [r7, #24]
 8009590:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009592:	e16e      	b.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009594:	2300      	movs	r3, #0
 8009596:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009598:	e16b      	b.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800959a:	4b89      	ldr	r3, [pc, #548]	; (80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80095a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80095a6:	d107      	bne.n	80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095a8:	f107 030c 	add.w	r3, r7, #12
 80095ac:	4618      	mov	r0, r3
 80095ae:	f000 fad3 	bl	8009b58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80095b2:	697b      	ldr	r3, [r7, #20]
 80095b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095b6:	e15c      	b.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80095b8:	2300      	movs	r3, #0
 80095ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095bc:	e159      	b.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80095be:	4b80      	ldr	r3, [pc, #512]	; (80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80095c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80095c6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80095c8:	4b7d      	ldr	r3, [pc, #500]	; (80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f003 0304 	and.w	r3, r3, #4
 80095d0:	2b04      	cmp	r3, #4
 80095d2:	d10c      	bne.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80095d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d109      	bne.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80095da:	4b79      	ldr	r3, [pc, #484]	; (80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	08db      	lsrs	r3, r3, #3
 80095e0:	f003 0303 	and.w	r3, r3, #3
 80095e4:	4a77      	ldr	r2, [pc, #476]	; (80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80095e6:	fa22 f303 	lsr.w	r3, r2, r3
 80095ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80095ec:	e01e      	b.n	800962c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80095ee:	4b74      	ldr	r3, [pc, #464]	; (80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095fa:	d106      	bne.n	800960a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80095fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009602:	d102      	bne.n	800960a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009604:	4b70      	ldr	r3, [pc, #448]	; (80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8009606:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009608:	e010      	b.n	800962c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800960a:	4b6d      	ldr	r3, [pc, #436]	; (80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009612:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009616:	d106      	bne.n	8009626 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8009618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800961a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800961e:	d102      	bne.n	8009626 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009620:	4b6a      	ldr	r3, [pc, #424]	; (80097cc <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009622:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009624:	e002      	b.n	800962c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009626:	2300      	movs	r3, #0
 8009628:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800962a:	e122      	b.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800962c:	e121      	b.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800962e:	2300      	movs	r3, #0
 8009630:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009632:	e11e      	b.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009634:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009638:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800963c:	430b      	orrs	r3, r1
 800963e:	d133      	bne.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8009640:	4b5f      	ldr	r3, [pc, #380]	; (80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009642:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009644:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009648:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800964a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800964c:	2b00      	cmp	r3, #0
 800964e:	d004      	beq.n	800965a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8009650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009652:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009656:	d012      	beq.n	800967e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8009658:	e023      	b.n	80096a2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800965a:	4b59      	ldr	r3, [pc, #356]	; (80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009662:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009666:	d107      	bne.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009668:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800966c:	4618      	mov	r0, r3
 800966e:	f000 fbc7 	bl	8009e00 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009674:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009676:	e0fc      	b.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009678:	2300      	movs	r3, #0
 800967a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800967c:	e0f9      	b.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800967e:	4b50      	ldr	r3, [pc, #320]	; (80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009686:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800968a:	d107      	bne.n	800969c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800968c:	f107 0318 	add.w	r3, r7, #24
 8009690:	4618      	mov	r0, r3
 8009692:	f000 f90d 	bl	80098b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009696:	6a3b      	ldr	r3, [r7, #32]
 8009698:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800969a:	e0ea      	b.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800969c:	2300      	movs	r3, #0
 800969e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80096a0:	e0e7      	b.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80096a2:	2300      	movs	r3, #0
 80096a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80096a6:	e0e4      	b.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80096a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096ac:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 80096b0:	430b      	orrs	r3, r1
 80096b2:	f040 808d 	bne.w	80097d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80096b6:	4b42      	ldr	r3, [pc, #264]	; (80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80096b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096ba:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80096be:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80096c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80096c6:	d06b      	beq.n	80097a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80096c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80096ce:	d874      	bhi.n	80097ba <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80096d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096d6:	d056      	beq.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80096d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096de:	d86c      	bhi.n	80097ba <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80096e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096e2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80096e6:	d03b      	beq.n	8009760 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80096e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096ea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80096ee:	d864      	bhi.n	80097ba <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80096f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096f6:	d021      	beq.n	800973c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80096f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096fe:	d85c      	bhi.n	80097ba <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009702:	2b00      	cmp	r3, #0
 8009704:	d004      	beq.n	8009710 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8009706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009708:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800970c:	d004      	beq.n	8009718 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800970e:	e054      	b.n	80097ba <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009710:	f000 f8b8 	bl	8009884 <HAL_RCCEx_GetD3PCLK1Freq>
 8009714:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009716:	e0ac      	b.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009718:	4b29      	ldr	r3, [pc, #164]	; (80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009720:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009724:	d107      	bne.n	8009736 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009726:	f107 0318 	add.w	r3, r7, #24
 800972a:	4618      	mov	r0, r3
 800972c:	f000 f8c0 	bl	80098b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009730:	69fb      	ldr	r3, [r7, #28]
 8009732:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009734:	e09d      	b.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009736:	2300      	movs	r3, #0
 8009738:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800973a:	e09a      	b.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800973c:	4b20      	ldr	r3, [pc, #128]	; (80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009744:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009748:	d107      	bne.n	800975a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800974a:	f107 030c 	add.w	r3, r7, #12
 800974e:	4618      	mov	r0, r3
 8009750:	f000 fa02 	bl	8009b58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009754:	693b      	ldr	r3, [r7, #16]
 8009756:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009758:	e08b      	b.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800975a:	2300      	movs	r3, #0
 800975c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800975e:	e088      	b.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009760:	4b17      	ldr	r3, [pc, #92]	; (80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f003 0304 	and.w	r3, r3, #4
 8009768:	2b04      	cmp	r3, #4
 800976a:	d109      	bne.n	8009780 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800976c:	4b14      	ldr	r3, [pc, #80]	; (80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	08db      	lsrs	r3, r3, #3
 8009772:	f003 0303 	and.w	r3, r3, #3
 8009776:	4a13      	ldr	r2, [pc, #76]	; (80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009778:	fa22 f303 	lsr.w	r3, r2, r3
 800977c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800977e:	e078      	b.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009780:	2300      	movs	r3, #0
 8009782:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009784:	e075      	b.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009786:	4b0e      	ldr	r3, [pc, #56]	; (80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800978e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009792:	d102      	bne.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8009794:	4b0c      	ldr	r3, [pc, #48]	; (80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8009796:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009798:	e06b      	b.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800979a:	2300      	movs	r3, #0
 800979c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800979e:	e068      	b.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80097a0:	4b07      	ldr	r3, [pc, #28]	; (80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80097ac:	d102      	bne.n	80097b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 80097ae:	4b07      	ldr	r3, [pc, #28]	; (80097cc <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80097b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80097b2:	e05e      	b.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80097b4:	2300      	movs	r3, #0
 80097b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80097b8:	e05b      	b.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80097ba:	2300      	movs	r3, #0
 80097bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80097be:	e058      	b.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80097c0:	58024400 	.word	0x58024400
 80097c4:	03d09000 	.word	0x03d09000
 80097c8:	003d0900 	.word	0x003d0900
 80097cc:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80097d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097d4:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80097d8:	430b      	orrs	r3, r1
 80097da:	d148      	bne.n	800986e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80097dc:	4b27      	ldr	r3, [pc, #156]	; (800987c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80097de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80097e4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80097e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097ec:	d02a      	beq.n	8009844 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80097ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097f4:	d838      	bhi.n	8009868 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80097f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d004      	beq.n	8009806 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80097fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009802:	d00d      	beq.n	8009820 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8009804:	e030      	b.n	8009868 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009806:	4b1d      	ldr	r3, [pc, #116]	; (800987c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800980e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009812:	d102      	bne.n	800981a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8009814:	4b1a      	ldr	r3, [pc, #104]	; (8009880 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8009816:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009818:	e02b      	b.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800981a:	2300      	movs	r3, #0
 800981c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800981e:	e028      	b.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009820:	4b16      	ldr	r3, [pc, #88]	; (800987c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009828:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800982c:	d107      	bne.n	800983e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800982e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009832:	4618      	mov	r0, r3
 8009834:	f000 fae4 	bl	8009e00 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800983a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800983c:	e019      	b.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800983e:	2300      	movs	r3, #0
 8009840:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009842:	e016      	b.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009844:	4b0d      	ldr	r3, [pc, #52]	; (800987c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800984c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009850:	d107      	bne.n	8009862 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009852:	f107 0318 	add.w	r3, r7, #24
 8009856:	4618      	mov	r0, r3
 8009858:	f000 f82a 	bl	80098b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800985c:	69fb      	ldr	r3, [r7, #28]
 800985e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009860:	e007      	b.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009862:	2300      	movs	r3, #0
 8009864:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009866:	e004      	b.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009868:	2300      	movs	r3, #0
 800986a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800986c:	e001      	b.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800986e:	2300      	movs	r3, #0
 8009870:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8009872:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009874:	4618      	mov	r0, r3
 8009876:	3740      	adds	r7, #64	; 0x40
 8009878:	46bd      	mov	sp, r7
 800987a:	bd80      	pop	{r7, pc}
 800987c:	58024400 	.word	0x58024400
 8009880:	017d7840 	.word	0x017d7840

08009884 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009888:	f7fe f816 	bl	80078b8 <HAL_RCC_GetHCLKFreq>
 800988c:	4602      	mov	r2, r0
 800988e:	4b06      	ldr	r3, [pc, #24]	; (80098a8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009890:	6a1b      	ldr	r3, [r3, #32]
 8009892:	091b      	lsrs	r3, r3, #4
 8009894:	f003 0307 	and.w	r3, r3, #7
 8009898:	4904      	ldr	r1, [pc, #16]	; (80098ac <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800989a:	5ccb      	ldrb	r3, [r1, r3]
 800989c:	f003 031f 	and.w	r3, r3, #31
 80098a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	bd80      	pop	{r7, pc}
 80098a8:	58024400 	.word	0x58024400
 80098ac:	0800f3fc 	.word	0x0800f3fc

080098b0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80098b0:	b480      	push	{r7}
 80098b2:	b089      	sub	sp, #36	; 0x24
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80098b8:	4ba1      	ldr	r3, [pc, #644]	; (8009b40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098bc:	f003 0303 	and.w	r3, r3, #3
 80098c0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80098c2:	4b9f      	ldr	r3, [pc, #636]	; (8009b40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098c6:	0b1b      	lsrs	r3, r3, #12
 80098c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80098cc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80098ce:	4b9c      	ldr	r3, [pc, #624]	; (8009b40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098d2:	091b      	lsrs	r3, r3, #4
 80098d4:	f003 0301 	and.w	r3, r3, #1
 80098d8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80098da:	4b99      	ldr	r3, [pc, #612]	; (8009b40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098de:	08db      	lsrs	r3, r3, #3
 80098e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80098e4:	693a      	ldr	r2, [r7, #16]
 80098e6:	fb02 f303 	mul.w	r3, r2, r3
 80098ea:	ee07 3a90 	vmov	s15, r3
 80098ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80098f6:	697b      	ldr	r3, [r7, #20]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	f000 8111 	beq.w	8009b20 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80098fe:	69bb      	ldr	r3, [r7, #24]
 8009900:	2b02      	cmp	r3, #2
 8009902:	f000 8083 	beq.w	8009a0c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009906:	69bb      	ldr	r3, [r7, #24]
 8009908:	2b02      	cmp	r3, #2
 800990a:	f200 80a1 	bhi.w	8009a50 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800990e:	69bb      	ldr	r3, [r7, #24]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d003      	beq.n	800991c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009914:	69bb      	ldr	r3, [r7, #24]
 8009916:	2b01      	cmp	r3, #1
 8009918:	d056      	beq.n	80099c8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800991a:	e099      	b.n	8009a50 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800991c:	4b88      	ldr	r3, [pc, #544]	; (8009b40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	f003 0320 	and.w	r3, r3, #32
 8009924:	2b00      	cmp	r3, #0
 8009926:	d02d      	beq.n	8009984 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009928:	4b85      	ldr	r3, [pc, #532]	; (8009b40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	08db      	lsrs	r3, r3, #3
 800992e:	f003 0303 	and.w	r3, r3, #3
 8009932:	4a84      	ldr	r2, [pc, #528]	; (8009b44 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009934:	fa22 f303 	lsr.w	r3, r2, r3
 8009938:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800993a:	68bb      	ldr	r3, [r7, #8]
 800993c:	ee07 3a90 	vmov	s15, r3
 8009940:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009944:	697b      	ldr	r3, [r7, #20]
 8009946:	ee07 3a90 	vmov	s15, r3
 800994a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800994e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009952:	4b7b      	ldr	r3, [pc, #492]	; (8009b40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009956:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800995a:	ee07 3a90 	vmov	s15, r3
 800995e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009962:	ed97 6a03 	vldr	s12, [r7, #12]
 8009966:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009b48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800996a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800996e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009972:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009976:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800997a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800997e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009982:	e087      	b.n	8009a94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009984:	697b      	ldr	r3, [r7, #20]
 8009986:	ee07 3a90 	vmov	s15, r3
 800998a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800998e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009b4c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009992:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009996:	4b6a      	ldr	r3, [pc, #424]	; (8009b40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800999a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800999e:	ee07 3a90 	vmov	s15, r3
 80099a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80099aa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009b48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80099ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80099c6:	e065      	b.n	8009a94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80099c8:	697b      	ldr	r3, [r7, #20]
 80099ca:	ee07 3a90 	vmov	s15, r3
 80099ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099d2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009b50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80099d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099da:	4b59      	ldr	r3, [pc, #356]	; (8009b40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099e2:	ee07 3a90 	vmov	s15, r3
 80099e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80099ee:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009b48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80099f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a0a:	e043      	b.n	8009a94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	ee07 3a90 	vmov	s15, r3
 8009a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a16:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009b54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009a1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a1e:	4b48      	ldr	r3, [pc, #288]	; (8009b40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a26:	ee07 3a90 	vmov	s15, r3
 8009a2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a32:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009b48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009a36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a4e:	e021      	b.n	8009a94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	ee07 3a90 	vmov	s15, r3
 8009a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a5a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009b50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009a5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a62:	4b37      	ldr	r3, [pc, #220]	; (8009b40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a6a:	ee07 3a90 	vmov	s15, r3
 8009a6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a72:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a76:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009b48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009a7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a92:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009a94:	4b2a      	ldr	r3, [pc, #168]	; (8009b40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a98:	0a5b      	lsrs	r3, r3, #9
 8009a9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a9e:	ee07 3a90 	vmov	s15, r3
 8009aa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009aa6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009aaa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009aae:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ab2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ab6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009aba:	ee17 2a90 	vmov	r2, s15
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009ac2:	4b1f      	ldr	r3, [pc, #124]	; (8009b40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ac6:	0c1b      	lsrs	r3, r3, #16
 8009ac8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009acc:	ee07 3a90 	vmov	s15, r3
 8009ad0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ad4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009ad8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009adc:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ae0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ae4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ae8:	ee17 2a90 	vmov	r2, s15
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009af0:	4b13      	ldr	r3, [pc, #76]	; (8009b40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009af4:	0e1b      	lsrs	r3, r3, #24
 8009af6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009afa:	ee07 3a90 	vmov	s15, r3
 8009afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009b06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009b0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b16:	ee17 2a90 	vmov	r2, s15
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009b1e:	e008      	b.n	8009b32 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2200      	movs	r2, #0
 8009b24:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2200      	movs	r2, #0
 8009b2a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2200      	movs	r2, #0
 8009b30:	609a      	str	r2, [r3, #8]
}
 8009b32:	bf00      	nop
 8009b34:	3724      	adds	r7, #36	; 0x24
 8009b36:	46bd      	mov	sp, r7
 8009b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3c:	4770      	bx	lr
 8009b3e:	bf00      	nop
 8009b40:	58024400 	.word	0x58024400
 8009b44:	03d09000 	.word	0x03d09000
 8009b48:	46000000 	.word	0x46000000
 8009b4c:	4c742400 	.word	0x4c742400
 8009b50:	4a742400 	.word	0x4a742400
 8009b54:	4bbebc20 	.word	0x4bbebc20

08009b58 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b089      	sub	sp, #36	; 0x24
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009b60:	4ba1      	ldr	r3, [pc, #644]	; (8009de8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b64:	f003 0303 	and.w	r3, r3, #3
 8009b68:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009b6a:	4b9f      	ldr	r3, [pc, #636]	; (8009de8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b6e:	0d1b      	lsrs	r3, r3, #20
 8009b70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b74:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009b76:	4b9c      	ldr	r3, [pc, #624]	; (8009de8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b7a:	0a1b      	lsrs	r3, r3, #8
 8009b7c:	f003 0301 	and.w	r3, r3, #1
 8009b80:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009b82:	4b99      	ldr	r3, [pc, #612]	; (8009de8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b86:	08db      	lsrs	r3, r3, #3
 8009b88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009b8c:	693a      	ldr	r2, [r7, #16]
 8009b8e:	fb02 f303 	mul.w	r3, r2, r3
 8009b92:	ee07 3a90 	vmov	s15, r3
 8009b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b9a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	f000 8111 	beq.w	8009dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009ba6:	69bb      	ldr	r3, [r7, #24]
 8009ba8:	2b02      	cmp	r3, #2
 8009baa:	f000 8083 	beq.w	8009cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009bae:	69bb      	ldr	r3, [r7, #24]
 8009bb0:	2b02      	cmp	r3, #2
 8009bb2:	f200 80a1 	bhi.w	8009cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009bb6:	69bb      	ldr	r3, [r7, #24]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d003      	beq.n	8009bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009bbc:	69bb      	ldr	r3, [r7, #24]
 8009bbe:	2b01      	cmp	r3, #1
 8009bc0:	d056      	beq.n	8009c70 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009bc2:	e099      	b.n	8009cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009bc4:	4b88      	ldr	r3, [pc, #544]	; (8009de8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f003 0320 	and.w	r3, r3, #32
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d02d      	beq.n	8009c2c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009bd0:	4b85      	ldr	r3, [pc, #532]	; (8009de8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	08db      	lsrs	r3, r3, #3
 8009bd6:	f003 0303 	and.w	r3, r3, #3
 8009bda:	4a84      	ldr	r2, [pc, #528]	; (8009dec <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009bdc:	fa22 f303 	lsr.w	r3, r2, r3
 8009be0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	ee07 3a90 	vmov	s15, r3
 8009be8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bec:	697b      	ldr	r3, [r7, #20]
 8009bee:	ee07 3a90 	vmov	s15, r3
 8009bf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bfa:	4b7b      	ldr	r3, [pc, #492]	; (8009de8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c02:	ee07 3a90 	vmov	s15, r3
 8009c06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c0e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009df0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009c12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c26:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009c2a:	e087      	b.n	8009d3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009c2c:	697b      	ldr	r3, [r7, #20]
 8009c2e:	ee07 3a90 	vmov	s15, r3
 8009c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c36:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009df4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009c3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c3e:	4b6a      	ldr	r3, [pc, #424]	; (8009de8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c46:	ee07 3a90 	vmov	s15, r3
 8009c4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c52:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009df0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009c56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c6e:	e065      	b.n	8009d3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009c70:	697b      	ldr	r3, [r7, #20]
 8009c72:	ee07 3a90 	vmov	s15, r3
 8009c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c7a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009df8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009c7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c82:	4b59      	ldr	r3, [pc, #356]	; (8009de8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c8a:	ee07 3a90 	vmov	s15, r3
 8009c8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c92:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c96:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009df0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009c9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ca2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ca6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009cb2:	e043      	b.n	8009d3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	ee07 3a90 	vmov	s15, r3
 8009cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cbe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009dfc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009cc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cc6:	4b48      	ldr	r3, [pc, #288]	; (8009de8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cce:	ee07 3a90 	vmov	s15, r3
 8009cd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009cda:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009df0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009cde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ce2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ce6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009cea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cf2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009cf6:	e021      	b.n	8009d3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009cf8:	697b      	ldr	r3, [r7, #20]
 8009cfa:	ee07 3a90 	vmov	s15, r3
 8009cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d02:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009df8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009d06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d0a:	4b37      	ldr	r3, [pc, #220]	; (8009de8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d12:	ee07 3a90 	vmov	s15, r3
 8009d16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d1e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009df0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009d22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009d3a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009d3c:	4b2a      	ldr	r3, [pc, #168]	; (8009de8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d40:	0a5b      	lsrs	r3, r3, #9
 8009d42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d46:	ee07 3a90 	vmov	s15, r3
 8009d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d56:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d62:	ee17 2a90 	vmov	r2, s15
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009d6a:	4b1f      	ldr	r3, [pc, #124]	; (8009de8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d6e:	0c1b      	lsrs	r3, r3, #16
 8009d70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d74:	ee07 3a90 	vmov	s15, r3
 8009d78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d80:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d84:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d90:	ee17 2a90 	vmov	r2, s15
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009d98:	4b13      	ldr	r3, [pc, #76]	; (8009de8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d9c:	0e1b      	lsrs	r3, r3, #24
 8009d9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009da2:	ee07 3a90 	vmov	s15, r3
 8009da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009daa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009dae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009db2:	edd7 6a07 	vldr	s13, [r7, #28]
 8009db6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009dba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009dbe:	ee17 2a90 	vmov	r2, s15
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009dc6:	e008      	b.n	8009dda <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	609a      	str	r2, [r3, #8]
}
 8009dda:	bf00      	nop
 8009ddc:	3724      	adds	r7, #36	; 0x24
 8009dde:	46bd      	mov	sp, r7
 8009de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de4:	4770      	bx	lr
 8009de6:	bf00      	nop
 8009de8:	58024400 	.word	0x58024400
 8009dec:	03d09000 	.word	0x03d09000
 8009df0:	46000000 	.word	0x46000000
 8009df4:	4c742400 	.word	0x4c742400
 8009df8:	4a742400 	.word	0x4a742400
 8009dfc:	4bbebc20 	.word	0x4bbebc20

08009e00 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009e00:	b480      	push	{r7}
 8009e02:	b089      	sub	sp, #36	; 0x24
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009e08:	4ba0      	ldr	r3, [pc, #640]	; (800a08c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e0c:	f003 0303 	and.w	r3, r3, #3
 8009e10:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009e12:	4b9e      	ldr	r3, [pc, #632]	; (800a08c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e16:	091b      	lsrs	r3, r3, #4
 8009e18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009e1c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009e1e:	4b9b      	ldr	r3, [pc, #620]	; (800a08c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e22:	f003 0301 	and.w	r3, r3, #1
 8009e26:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009e28:	4b98      	ldr	r3, [pc, #608]	; (800a08c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e2c:	08db      	lsrs	r3, r3, #3
 8009e2e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009e32:	693a      	ldr	r2, [r7, #16]
 8009e34:	fb02 f303 	mul.w	r3, r2, r3
 8009e38:	ee07 3a90 	vmov	s15, r3
 8009e3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e40:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009e44:	697b      	ldr	r3, [r7, #20]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	f000 8111 	beq.w	800a06e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009e4c:	69bb      	ldr	r3, [r7, #24]
 8009e4e:	2b02      	cmp	r3, #2
 8009e50:	f000 8083 	beq.w	8009f5a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009e54:	69bb      	ldr	r3, [r7, #24]
 8009e56:	2b02      	cmp	r3, #2
 8009e58:	f200 80a1 	bhi.w	8009f9e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009e5c:	69bb      	ldr	r3, [r7, #24]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d003      	beq.n	8009e6a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009e62:	69bb      	ldr	r3, [r7, #24]
 8009e64:	2b01      	cmp	r3, #1
 8009e66:	d056      	beq.n	8009f16 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009e68:	e099      	b.n	8009f9e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e6a:	4b88      	ldr	r3, [pc, #544]	; (800a08c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	f003 0320 	and.w	r3, r3, #32
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d02d      	beq.n	8009ed2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009e76:	4b85      	ldr	r3, [pc, #532]	; (800a08c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	08db      	lsrs	r3, r3, #3
 8009e7c:	f003 0303 	and.w	r3, r3, #3
 8009e80:	4a83      	ldr	r2, [pc, #524]	; (800a090 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009e82:	fa22 f303 	lsr.w	r3, r2, r3
 8009e86:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	ee07 3a90 	vmov	s15, r3
 8009e8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e92:	697b      	ldr	r3, [r7, #20]
 8009e94:	ee07 3a90 	vmov	s15, r3
 8009e98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ea0:	4b7a      	ldr	r3, [pc, #488]	; (800a08c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ea4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ea8:	ee07 3a90 	vmov	s15, r3
 8009eac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009eb0:	ed97 6a03 	vldr	s12, [r7, #12]
 8009eb4:	eddf 5a77 	vldr	s11, [pc, #476]	; 800a094 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009eb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ebc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ec0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ec4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ec8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ecc:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009ed0:	e087      	b.n	8009fe2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009ed2:	697b      	ldr	r3, [r7, #20]
 8009ed4:	ee07 3a90 	vmov	s15, r3
 8009ed8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009edc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800a098 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009ee0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ee4:	4b69      	ldr	r3, [pc, #420]	; (800a08c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ee8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009eec:	ee07 3a90 	vmov	s15, r3
 8009ef0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ef4:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ef8:	eddf 5a66 	vldr	s11, [pc, #408]	; 800a094 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009efc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f10:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009f14:	e065      	b.n	8009fe2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009f16:	697b      	ldr	r3, [r7, #20]
 8009f18:	ee07 3a90 	vmov	s15, r3
 8009f1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f20:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800a09c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009f24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f28:	4b58      	ldr	r3, [pc, #352]	; (800a08c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f30:	ee07 3a90 	vmov	s15, r3
 8009f34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f38:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f3c:	eddf 5a55 	vldr	s11, [pc, #340]	; 800a094 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009f40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f54:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009f58:	e043      	b.n	8009fe2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009f5a:	697b      	ldr	r3, [r7, #20]
 8009f5c:	ee07 3a90 	vmov	s15, r3
 8009f60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f64:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800a0a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009f68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f6c:	4b47      	ldr	r3, [pc, #284]	; (800a08c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f74:	ee07 3a90 	vmov	s15, r3
 8009f78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f7c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f80:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a094 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009f84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f98:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009f9c:	e021      	b.n	8009fe2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009f9e:	697b      	ldr	r3, [r7, #20]
 8009fa0:	ee07 3a90 	vmov	s15, r3
 8009fa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fa8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800a098 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009fac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fb0:	4b36      	ldr	r3, [pc, #216]	; (800a08c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fb8:	ee07 3a90 	vmov	s15, r3
 8009fbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fc0:	ed97 6a03 	vldr	s12, [r7, #12]
 8009fc4:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a094 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009fc8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fcc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fd0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009fd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fdc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009fe0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8009fe2:	4b2a      	ldr	r3, [pc, #168]	; (800a08c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fe6:	0a5b      	lsrs	r3, r3, #9
 8009fe8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fec:	ee07 3a90 	vmov	s15, r3
 8009ff0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ff4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009ff8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ffc:	edd7 6a07 	vldr	s13, [r7, #28]
 800a000:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a004:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a008:	ee17 2a90 	vmov	r2, s15
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800a010:	4b1e      	ldr	r3, [pc, #120]	; (800a08c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a014:	0c1b      	lsrs	r3, r3, #16
 800a016:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a01a:	ee07 3a90 	vmov	s15, r3
 800a01e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a022:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a026:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a02a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a02e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a032:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a036:	ee17 2a90 	vmov	r2, s15
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800a03e:	4b13      	ldr	r3, [pc, #76]	; (800a08c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a042:	0e1b      	lsrs	r3, r3, #24
 800a044:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a048:	ee07 3a90 	vmov	s15, r3
 800a04c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a050:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a054:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a058:	edd7 6a07 	vldr	s13, [r7, #28]
 800a05c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a060:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a064:	ee17 2a90 	vmov	r2, s15
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a06c:	e008      	b.n	800a080 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2200      	movs	r2, #0
 800a072:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2200      	movs	r2, #0
 800a078:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2200      	movs	r2, #0
 800a07e:	609a      	str	r2, [r3, #8]
}
 800a080:	bf00      	nop
 800a082:	3724      	adds	r7, #36	; 0x24
 800a084:	46bd      	mov	sp, r7
 800a086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08a:	4770      	bx	lr
 800a08c:	58024400 	.word	0x58024400
 800a090:	03d09000 	.word	0x03d09000
 800a094:	46000000 	.word	0x46000000
 800a098:	4c742400 	.word	0x4c742400
 800a09c:	4a742400 	.word	0x4a742400
 800a0a0:	4bbebc20 	.word	0x4bbebc20

0800a0a4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b084      	sub	sp, #16
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
 800a0ac:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a0b2:	4b53      	ldr	r3, [pc, #332]	; (800a200 <RCCEx_PLL2_Config+0x15c>)
 800a0b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0b6:	f003 0303 	and.w	r3, r3, #3
 800a0ba:	2b03      	cmp	r3, #3
 800a0bc:	d101      	bne.n	800a0c2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a0be:	2301      	movs	r3, #1
 800a0c0:	e099      	b.n	800a1f6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a0c2:	4b4f      	ldr	r3, [pc, #316]	; (800a200 <RCCEx_PLL2_Config+0x15c>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	4a4e      	ldr	r2, [pc, #312]	; (800a200 <RCCEx_PLL2_Config+0x15c>)
 800a0c8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a0cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a0ce:	f7f8 ff75 	bl	8002fbc <HAL_GetTick>
 800a0d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a0d4:	e008      	b.n	800a0e8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a0d6:	f7f8 ff71 	bl	8002fbc <HAL_GetTick>
 800a0da:	4602      	mov	r2, r0
 800a0dc:	68bb      	ldr	r3, [r7, #8]
 800a0de:	1ad3      	subs	r3, r2, r3
 800a0e0:	2b02      	cmp	r3, #2
 800a0e2:	d901      	bls.n	800a0e8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a0e4:	2303      	movs	r3, #3
 800a0e6:	e086      	b.n	800a1f6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a0e8:	4b45      	ldr	r3, [pc, #276]	; (800a200 <RCCEx_PLL2_Config+0x15c>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d1f0      	bne.n	800a0d6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a0f4:	4b42      	ldr	r3, [pc, #264]	; (800a200 <RCCEx_PLL2_Config+0x15c>)
 800a0f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0f8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	031b      	lsls	r3, r3, #12
 800a102:	493f      	ldr	r1, [pc, #252]	; (800a200 <RCCEx_PLL2_Config+0x15c>)
 800a104:	4313      	orrs	r3, r2
 800a106:	628b      	str	r3, [r1, #40]	; 0x28
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	685b      	ldr	r3, [r3, #4]
 800a10c:	3b01      	subs	r3, #1
 800a10e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	689b      	ldr	r3, [r3, #8]
 800a116:	3b01      	subs	r3, #1
 800a118:	025b      	lsls	r3, r3, #9
 800a11a:	b29b      	uxth	r3, r3
 800a11c:	431a      	orrs	r2, r3
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	68db      	ldr	r3, [r3, #12]
 800a122:	3b01      	subs	r3, #1
 800a124:	041b      	lsls	r3, r3, #16
 800a126:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a12a:	431a      	orrs	r2, r3
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	691b      	ldr	r3, [r3, #16]
 800a130:	3b01      	subs	r3, #1
 800a132:	061b      	lsls	r3, r3, #24
 800a134:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a138:	4931      	ldr	r1, [pc, #196]	; (800a200 <RCCEx_PLL2_Config+0x15c>)
 800a13a:	4313      	orrs	r3, r2
 800a13c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a13e:	4b30      	ldr	r3, [pc, #192]	; (800a200 <RCCEx_PLL2_Config+0x15c>)
 800a140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a142:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	695b      	ldr	r3, [r3, #20]
 800a14a:	492d      	ldr	r1, [pc, #180]	; (800a200 <RCCEx_PLL2_Config+0x15c>)
 800a14c:	4313      	orrs	r3, r2
 800a14e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a150:	4b2b      	ldr	r3, [pc, #172]	; (800a200 <RCCEx_PLL2_Config+0x15c>)
 800a152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a154:	f023 0220 	bic.w	r2, r3, #32
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	699b      	ldr	r3, [r3, #24]
 800a15c:	4928      	ldr	r1, [pc, #160]	; (800a200 <RCCEx_PLL2_Config+0x15c>)
 800a15e:	4313      	orrs	r3, r2
 800a160:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a162:	4b27      	ldr	r3, [pc, #156]	; (800a200 <RCCEx_PLL2_Config+0x15c>)
 800a164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a166:	4a26      	ldr	r2, [pc, #152]	; (800a200 <RCCEx_PLL2_Config+0x15c>)
 800a168:	f023 0310 	bic.w	r3, r3, #16
 800a16c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a16e:	4b24      	ldr	r3, [pc, #144]	; (800a200 <RCCEx_PLL2_Config+0x15c>)
 800a170:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a172:	4b24      	ldr	r3, [pc, #144]	; (800a204 <RCCEx_PLL2_Config+0x160>)
 800a174:	4013      	ands	r3, r2
 800a176:	687a      	ldr	r2, [r7, #4]
 800a178:	69d2      	ldr	r2, [r2, #28]
 800a17a:	00d2      	lsls	r2, r2, #3
 800a17c:	4920      	ldr	r1, [pc, #128]	; (800a200 <RCCEx_PLL2_Config+0x15c>)
 800a17e:	4313      	orrs	r3, r2
 800a180:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a182:	4b1f      	ldr	r3, [pc, #124]	; (800a200 <RCCEx_PLL2_Config+0x15c>)
 800a184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a186:	4a1e      	ldr	r2, [pc, #120]	; (800a200 <RCCEx_PLL2_Config+0x15c>)
 800a188:	f043 0310 	orr.w	r3, r3, #16
 800a18c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d106      	bne.n	800a1a2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a194:	4b1a      	ldr	r3, [pc, #104]	; (800a200 <RCCEx_PLL2_Config+0x15c>)
 800a196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a198:	4a19      	ldr	r2, [pc, #100]	; (800a200 <RCCEx_PLL2_Config+0x15c>)
 800a19a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a19e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a1a0:	e00f      	b.n	800a1c2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	2b01      	cmp	r3, #1
 800a1a6:	d106      	bne.n	800a1b6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a1a8:	4b15      	ldr	r3, [pc, #84]	; (800a200 <RCCEx_PLL2_Config+0x15c>)
 800a1aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1ac:	4a14      	ldr	r2, [pc, #80]	; (800a200 <RCCEx_PLL2_Config+0x15c>)
 800a1ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a1b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a1b4:	e005      	b.n	800a1c2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a1b6:	4b12      	ldr	r3, [pc, #72]	; (800a200 <RCCEx_PLL2_Config+0x15c>)
 800a1b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1ba:	4a11      	ldr	r2, [pc, #68]	; (800a200 <RCCEx_PLL2_Config+0x15c>)
 800a1bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a1c0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a1c2:	4b0f      	ldr	r3, [pc, #60]	; (800a200 <RCCEx_PLL2_Config+0x15c>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	4a0e      	ldr	r2, [pc, #56]	; (800a200 <RCCEx_PLL2_Config+0x15c>)
 800a1c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a1cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a1ce:	f7f8 fef5 	bl	8002fbc <HAL_GetTick>
 800a1d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a1d4:	e008      	b.n	800a1e8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a1d6:	f7f8 fef1 	bl	8002fbc <HAL_GetTick>
 800a1da:	4602      	mov	r2, r0
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	1ad3      	subs	r3, r2, r3
 800a1e0:	2b02      	cmp	r3, #2
 800a1e2:	d901      	bls.n	800a1e8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a1e4:	2303      	movs	r3, #3
 800a1e6:	e006      	b.n	800a1f6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a1e8:	4b05      	ldr	r3, [pc, #20]	; (800a200 <RCCEx_PLL2_Config+0x15c>)
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d0f0      	beq.n	800a1d6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a1f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3710      	adds	r7, #16
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}
 800a1fe:	bf00      	nop
 800a200:	58024400 	.word	0x58024400
 800a204:	ffff0007 	.word	0xffff0007

0800a208 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b084      	sub	sp, #16
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
 800a210:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a212:	2300      	movs	r3, #0
 800a214:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a216:	4b53      	ldr	r3, [pc, #332]	; (800a364 <RCCEx_PLL3_Config+0x15c>)
 800a218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a21a:	f003 0303 	and.w	r3, r3, #3
 800a21e:	2b03      	cmp	r3, #3
 800a220:	d101      	bne.n	800a226 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a222:	2301      	movs	r3, #1
 800a224:	e099      	b.n	800a35a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a226:	4b4f      	ldr	r3, [pc, #316]	; (800a364 <RCCEx_PLL3_Config+0x15c>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	4a4e      	ldr	r2, [pc, #312]	; (800a364 <RCCEx_PLL3_Config+0x15c>)
 800a22c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a230:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a232:	f7f8 fec3 	bl	8002fbc <HAL_GetTick>
 800a236:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a238:	e008      	b.n	800a24c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a23a:	f7f8 febf 	bl	8002fbc <HAL_GetTick>
 800a23e:	4602      	mov	r2, r0
 800a240:	68bb      	ldr	r3, [r7, #8]
 800a242:	1ad3      	subs	r3, r2, r3
 800a244:	2b02      	cmp	r3, #2
 800a246:	d901      	bls.n	800a24c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a248:	2303      	movs	r3, #3
 800a24a:	e086      	b.n	800a35a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a24c:	4b45      	ldr	r3, [pc, #276]	; (800a364 <RCCEx_PLL3_Config+0x15c>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a254:	2b00      	cmp	r3, #0
 800a256:	d1f0      	bne.n	800a23a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a258:	4b42      	ldr	r3, [pc, #264]	; (800a364 <RCCEx_PLL3_Config+0x15c>)
 800a25a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a25c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	051b      	lsls	r3, r3, #20
 800a266:	493f      	ldr	r1, [pc, #252]	; (800a364 <RCCEx_PLL3_Config+0x15c>)
 800a268:	4313      	orrs	r3, r2
 800a26a:	628b      	str	r3, [r1, #40]	; 0x28
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	685b      	ldr	r3, [r3, #4]
 800a270:	3b01      	subs	r3, #1
 800a272:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	689b      	ldr	r3, [r3, #8]
 800a27a:	3b01      	subs	r3, #1
 800a27c:	025b      	lsls	r3, r3, #9
 800a27e:	b29b      	uxth	r3, r3
 800a280:	431a      	orrs	r2, r3
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	68db      	ldr	r3, [r3, #12]
 800a286:	3b01      	subs	r3, #1
 800a288:	041b      	lsls	r3, r3, #16
 800a28a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a28e:	431a      	orrs	r2, r3
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	691b      	ldr	r3, [r3, #16]
 800a294:	3b01      	subs	r3, #1
 800a296:	061b      	lsls	r3, r3, #24
 800a298:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a29c:	4931      	ldr	r1, [pc, #196]	; (800a364 <RCCEx_PLL3_Config+0x15c>)
 800a29e:	4313      	orrs	r3, r2
 800a2a0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a2a2:	4b30      	ldr	r3, [pc, #192]	; (800a364 <RCCEx_PLL3_Config+0x15c>)
 800a2a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2a6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	695b      	ldr	r3, [r3, #20]
 800a2ae:	492d      	ldr	r1, [pc, #180]	; (800a364 <RCCEx_PLL3_Config+0x15c>)
 800a2b0:	4313      	orrs	r3, r2
 800a2b2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a2b4:	4b2b      	ldr	r3, [pc, #172]	; (800a364 <RCCEx_PLL3_Config+0x15c>)
 800a2b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2b8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	699b      	ldr	r3, [r3, #24]
 800a2c0:	4928      	ldr	r1, [pc, #160]	; (800a364 <RCCEx_PLL3_Config+0x15c>)
 800a2c2:	4313      	orrs	r3, r2
 800a2c4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a2c6:	4b27      	ldr	r3, [pc, #156]	; (800a364 <RCCEx_PLL3_Config+0x15c>)
 800a2c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ca:	4a26      	ldr	r2, [pc, #152]	; (800a364 <RCCEx_PLL3_Config+0x15c>)
 800a2cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a2d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a2d2:	4b24      	ldr	r3, [pc, #144]	; (800a364 <RCCEx_PLL3_Config+0x15c>)
 800a2d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a2d6:	4b24      	ldr	r3, [pc, #144]	; (800a368 <RCCEx_PLL3_Config+0x160>)
 800a2d8:	4013      	ands	r3, r2
 800a2da:	687a      	ldr	r2, [r7, #4]
 800a2dc:	69d2      	ldr	r2, [r2, #28]
 800a2de:	00d2      	lsls	r2, r2, #3
 800a2e0:	4920      	ldr	r1, [pc, #128]	; (800a364 <RCCEx_PLL3_Config+0x15c>)
 800a2e2:	4313      	orrs	r3, r2
 800a2e4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a2e6:	4b1f      	ldr	r3, [pc, #124]	; (800a364 <RCCEx_PLL3_Config+0x15c>)
 800a2e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ea:	4a1e      	ldr	r2, [pc, #120]	; (800a364 <RCCEx_PLL3_Config+0x15c>)
 800a2ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a2f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d106      	bne.n	800a306 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a2f8:	4b1a      	ldr	r3, [pc, #104]	; (800a364 <RCCEx_PLL3_Config+0x15c>)
 800a2fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2fc:	4a19      	ldr	r2, [pc, #100]	; (800a364 <RCCEx_PLL3_Config+0x15c>)
 800a2fe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a302:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a304:	e00f      	b.n	800a326 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	2b01      	cmp	r3, #1
 800a30a:	d106      	bne.n	800a31a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a30c:	4b15      	ldr	r3, [pc, #84]	; (800a364 <RCCEx_PLL3_Config+0x15c>)
 800a30e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a310:	4a14      	ldr	r2, [pc, #80]	; (800a364 <RCCEx_PLL3_Config+0x15c>)
 800a312:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a316:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a318:	e005      	b.n	800a326 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a31a:	4b12      	ldr	r3, [pc, #72]	; (800a364 <RCCEx_PLL3_Config+0x15c>)
 800a31c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a31e:	4a11      	ldr	r2, [pc, #68]	; (800a364 <RCCEx_PLL3_Config+0x15c>)
 800a320:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a324:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a326:	4b0f      	ldr	r3, [pc, #60]	; (800a364 <RCCEx_PLL3_Config+0x15c>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	4a0e      	ldr	r2, [pc, #56]	; (800a364 <RCCEx_PLL3_Config+0x15c>)
 800a32c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a330:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a332:	f7f8 fe43 	bl	8002fbc <HAL_GetTick>
 800a336:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a338:	e008      	b.n	800a34c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a33a:	f7f8 fe3f 	bl	8002fbc <HAL_GetTick>
 800a33e:	4602      	mov	r2, r0
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	1ad3      	subs	r3, r2, r3
 800a344:	2b02      	cmp	r3, #2
 800a346:	d901      	bls.n	800a34c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a348:	2303      	movs	r3, #3
 800a34a:	e006      	b.n	800a35a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a34c:	4b05      	ldr	r3, [pc, #20]	; (800a364 <RCCEx_PLL3_Config+0x15c>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a354:	2b00      	cmp	r3, #0
 800a356:	d0f0      	beq.n	800a33a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a358:	7bfb      	ldrb	r3, [r7, #15]
}
 800a35a:	4618      	mov	r0, r3
 800a35c:	3710      	adds	r7, #16
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}
 800a362:	bf00      	nop
 800a364:	58024400 	.word	0x58024400
 800a368:	ffff0007 	.word	0xffff0007

0800a36c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b084      	sub	sp, #16
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a374:	2301      	movs	r3, #1
 800a376:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d071      	beq.n	800a462 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a384:	b2db      	uxtb	r3, r3
 800a386:	2b00      	cmp	r3, #0
 800a388:	d106      	bne.n	800a398 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2200      	movs	r2, #0
 800a38e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800a392:	6878      	ldr	r0, [r7, #4]
 800a394:	f7f8 f8fa 	bl	800258c <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2202      	movs	r2, #2
 800a39c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	68db      	ldr	r3, [r3, #12]
 800a3a6:	f003 0310 	and.w	r3, r3, #16
 800a3aa:	2b10      	cmp	r3, #16
 800a3ac:	d050      	beq.n	800a450 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	22ca      	movs	r2, #202	; 0xca
 800a3b4:	625a      	str	r2, [r3, #36]	; 0x24
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	2253      	movs	r2, #83	; 0x53
 800a3bc:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f000 fa4a 	bl	800a858 <RTC_EnterInitMode>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800a3c8:	7bfb      	ldrb	r3, [r7, #15]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d124      	bne.n	800a418 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	6899      	ldr	r1, [r3, #8]
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681a      	ldr	r2, [r3, #0]
 800a3d8:	4b24      	ldr	r3, [pc, #144]	; (800a46c <HAL_RTC_Init+0x100>)
 800a3da:	400b      	ands	r3, r1
 800a3dc:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	6899      	ldr	r1, [r3, #8]
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	685a      	ldr	r2, [r3, #4]
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	691b      	ldr	r3, [r3, #16]
 800a3ec:	431a      	orrs	r2, r3
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	699b      	ldr	r3, [r3, #24]
 800a3f2:	431a      	orrs	r2, r3
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	430a      	orrs	r2, r1
 800a3fa:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	689b      	ldr	r3, [r3, #8]
 800a400:	0419      	lsls	r1, r3, #16
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	68da      	ldr	r2, [r3, #12]
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	430a      	orrs	r2, r1
 800a40c:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	f000 fa56 	bl	800a8c0 <RTC_ExitInitMode>
 800a414:	4603      	mov	r3, r0
 800a416:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800a418:	7bfb      	ldrb	r3, [r7, #15]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d113      	bne.n	800a446 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	f022 0203 	bic.w	r2, r2, #3
 800a42c:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	69da      	ldr	r2, [r3, #28]
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	695b      	ldr	r3, [r3, #20]
 800a43c:	431a      	orrs	r2, r3
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	430a      	orrs	r2, r1
 800a444:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	22ff      	movs	r2, #255	; 0xff
 800a44c:	625a      	str	r2, [r3, #36]	; 0x24
 800a44e:	e001      	b.n	800a454 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800a450:	2300      	movs	r3, #0
 800a452:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800a454:	7bfb      	ldrb	r3, [r7, #15]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d103      	bne.n	800a462 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	2201      	movs	r2, #1
 800a45e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800a462:	7bfb      	ldrb	r3, [r7, #15]
}
 800a464:	4618      	mov	r0, r3
 800a466:	3710      	adds	r7, #16
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}
 800a46c:	ff8fffbf 	.word	0xff8fffbf

0800a470 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a470:	b590      	push	{r4, r7, lr}
 800a472:	b087      	sub	sp, #28
 800a474:	af00      	add	r7, sp, #0
 800a476:	60f8      	str	r0, [r7, #12]
 800a478:	60b9      	str	r1, [r7, #8]
 800a47a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a482:	2b01      	cmp	r3, #1
 800a484:	d101      	bne.n	800a48a <HAL_RTC_SetTime+0x1a>
 800a486:	2302      	movs	r3, #2
 800a488:	e089      	b.n	800a59e <HAL_RTC_SetTime+0x12e>
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	2201      	movs	r2, #1
 800a48e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	2202      	movs	r2, #2
 800a496:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	22ca      	movs	r2, #202	; 0xca
 800a4a0:	625a      	str	r2, [r3, #36]	; 0x24
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	2253      	movs	r2, #83	; 0x53
 800a4a8:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a4aa:	68f8      	ldr	r0, [r7, #12]
 800a4ac:	f000 f9d4 	bl	800a858 <RTC_EnterInitMode>
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800a4b4:	7cfb      	ldrb	r3, [r7, #19]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d161      	bne.n	800a57e <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d126      	bne.n	800a50e <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	689b      	ldr	r3, [r3, #8]
 800a4c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d102      	bne.n	800a4d4 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a4d4:	68bb      	ldr	r3, [r7, #8]
 800a4d6:	781b      	ldrb	r3, [r3, #0]
 800a4d8:	4618      	mov	r0, r3
 800a4da:	f000 fa2f 	bl	800a93c <RTC_ByteToBcd2>
 800a4de:	4603      	mov	r3, r0
 800a4e0:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a4e2:	68bb      	ldr	r3, [r7, #8]
 800a4e4:	785b      	ldrb	r3, [r3, #1]
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f000 fa28 	bl	800a93c <RTC_ByteToBcd2>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a4f0:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	789b      	ldrb	r3, [r3, #2]
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f000 fa20 	bl	800a93c <RTC_ByteToBcd2>
 800a4fc:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a4fe:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800a502:	68bb      	ldr	r3, [r7, #8]
 800a504:	78db      	ldrb	r3, [r3, #3]
 800a506:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a508:	4313      	orrs	r3, r2
 800a50a:	617b      	str	r3, [r7, #20]
 800a50c:	e018      	b.n	800a540 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	689b      	ldr	r3, [r3, #8]
 800a514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d102      	bne.n	800a522 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800a51c:	68bb      	ldr	r3, [r7, #8]
 800a51e:	2200      	movs	r2, #0
 800a520:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a522:	68bb      	ldr	r3, [r7, #8]
 800a524:	781b      	ldrb	r3, [r3, #0]
 800a526:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	785b      	ldrb	r3, [r3, #1]
 800a52c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a52e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800a530:	68ba      	ldr	r2, [r7, #8]
 800a532:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a534:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800a536:	68bb      	ldr	r3, [r7, #8]
 800a538:	78db      	ldrb	r3, [r3, #3]
 800a53a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a53c:	4313      	orrs	r3, r2
 800a53e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	681a      	ldr	r2, [r3, #0]
 800a544:	6979      	ldr	r1, [r7, #20]
 800a546:	4b18      	ldr	r3, [pc, #96]	; (800a5a8 <HAL_RTC_SetTime+0x138>)
 800a548:	400b      	ands	r3, r1
 800a54a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	689a      	ldr	r2, [r3, #8]
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a55a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	6899      	ldr	r1, [r3, #8]
 800a562:	68bb      	ldr	r3, [r7, #8]
 800a564:	68da      	ldr	r2, [r3, #12]
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	691b      	ldr	r3, [r3, #16]
 800a56a:	431a      	orrs	r2, r3
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	430a      	orrs	r2, r1
 800a572:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a574:	68f8      	ldr	r0, [r7, #12]
 800a576:	f000 f9a3 	bl	800a8c0 <RTC_ExitInitMode>
 800a57a:	4603      	mov	r3, r0
 800a57c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	22ff      	movs	r2, #255	; 0xff
 800a584:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800a586:	7cfb      	ldrb	r3, [r7, #19]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d103      	bne.n	800a594 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	2201      	movs	r2, #1
 800a590:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	2200      	movs	r2, #0
 800a598:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800a59c:	7cfb      	ldrb	r3, [r7, #19]
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	371c      	adds	r7, #28
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd90      	pop	{r4, r7, pc}
 800a5a6:	bf00      	nop
 800a5a8:	007f7f7f 	.word	0x007f7f7f

0800a5ac <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b086      	sub	sp, #24
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	60f8      	str	r0, [r7, #12]
 800a5b4:	60b9      	str	r1, [r7, #8]
 800a5b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a5be:	68bb      	ldr	r3, [r7, #8]
 800a5c0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	691b      	ldr	r3, [r3, #16]
 800a5c8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	681a      	ldr	r2, [r3, #0]
 800a5d6:	4b22      	ldr	r3, [pc, #136]	; (800a660 <HAL_RTC_GetTime+0xb4>)
 800a5d8:	4013      	ands	r3, r2
 800a5da:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800a5dc:	697b      	ldr	r3, [r7, #20]
 800a5de:	0c1b      	lsrs	r3, r3, #16
 800a5e0:	b2db      	uxtb	r3, r3
 800a5e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a5e6:	b2da      	uxtb	r2, r3
 800a5e8:	68bb      	ldr	r3, [r7, #8]
 800a5ea:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800a5ec:	697b      	ldr	r3, [r7, #20]
 800a5ee:	0a1b      	lsrs	r3, r3, #8
 800a5f0:	b2db      	uxtb	r3, r3
 800a5f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a5f6:	b2da      	uxtb	r2, r3
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800a5fc:	697b      	ldr	r3, [r7, #20]
 800a5fe:	b2db      	uxtb	r3, r3
 800a600:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a604:	b2da      	uxtb	r2, r3
 800a606:	68bb      	ldr	r3, [r7, #8]
 800a608:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800a60a:	697b      	ldr	r3, [r7, #20]
 800a60c:	0d9b      	lsrs	r3, r3, #22
 800a60e:	b2db      	uxtb	r3, r3
 800a610:	f003 0301 	and.w	r3, r3, #1
 800a614:	b2da      	uxtb	r2, r3
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d11a      	bne.n	800a656 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	781b      	ldrb	r3, [r3, #0]
 800a624:	4618      	mov	r0, r3
 800a626:	f000 f9a9 	bl	800a97c <RTC_Bcd2ToByte>
 800a62a:	4603      	mov	r3, r0
 800a62c:	461a      	mov	r2, r3
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800a632:	68bb      	ldr	r3, [r7, #8]
 800a634:	785b      	ldrb	r3, [r3, #1]
 800a636:	4618      	mov	r0, r3
 800a638:	f000 f9a0 	bl	800a97c <RTC_Bcd2ToByte>
 800a63c:	4603      	mov	r3, r0
 800a63e:	461a      	mov	r2, r3
 800a640:	68bb      	ldr	r3, [r7, #8]
 800a642:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	789b      	ldrb	r3, [r3, #2]
 800a648:	4618      	mov	r0, r3
 800a64a:	f000 f997 	bl	800a97c <RTC_Bcd2ToByte>
 800a64e:	4603      	mov	r3, r0
 800a650:	461a      	mov	r2, r3
 800a652:	68bb      	ldr	r3, [r7, #8]
 800a654:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800a656:	2300      	movs	r3, #0
}
 800a658:	4618      	mov	r0, r3
 800a65a:	3718      	adds	r7, #24
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bd80      	pop	{r7, pc}
 800a660:	007f7f7f 	.word	0x007f7f7f

0800a664 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a664:	b590      	push	{r4, r7, lr}
 800a666:	b087      	sub	sp, #28
 800a668:	af00      	add	r7, sp, #0
 800a66a:	60f8      	str	r0, [r7, #12]
 800a66c:	60b9      	str	r1, [r7, #8]
 800a66e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a676:	2b01      	cmp	r3, #1
 800a678:	d101      	bne.n	800a67e <HAL_RTC_SetDate+0x1a>
 800a67a:	2302      	movs	r3, #2
 800a67c:	e073      	b.n	800a766 <HAL_RTC_SetDate+0x102>
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	2201      	movs	r2, #1
 800a682:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	2202      	movs	r2, #2
 800a68a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d10e      	bne.n	800a6b2 <HAL_RTC_SetDate+0x4e>
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	785b      	ldrb	r3, [r3, #1]
 800a698:	f003 0310 	and.w	r3, r3, #16
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d008      	beq.n	800a6b2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800a6a0:	68bb      	ldr	r3, [r7, #8]
 800a6a2:	785b      	ldrb	r3, [r3, #1]
 800a6a4:	f023 0310 	bic.w	r3, r3, #16
 800a6a8:	b2db      	uxtb	r3, r3
 800a6aa:	330a      	adds	r3, #10
 800a6ac:	b2da      	uxtb	r2, r3
 800a6ae:	68bb      	ldr	r3, [r7, #8]
 800a6b0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d11c      	bne.n	800a6f2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800a6b8:	68bb      	ldr	r3, [r7, #8]
 800a6ba:	78db      	ldrb	r3, [r3, #3]
 800a6bc:	4618      	mov	r0, r3
 800a6be:	f000 f93d 	bl	800a93c <RTC_ByteToBcd2>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a6c6:	68bb      	ldr	r3, [r7, #8]
 800a6c8:	785b      	ldrb	r3, [r3, #1]
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	f000 f936 	bl	800a93c <RTC_ByteToBcd2>
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800a6d4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800a6d6:	68bb      	ldr	r3, [r7, #8]
 800a6d8:	789b      	ldrb	r3, [r3, #2]
 800a6da:	4618      	mov	r0, r3
 800a6dc:	f000 f92e 	bl	800a93c <RTC_ByteToBcd2>
 800a6e0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a6e2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800a6e6:	68bb      	ldr	r3, [r7, #8]
 800a6e8:	781b      	ldrb	r3, [r3, #0]
 800a6ea:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800a6ec:	4313      	orrs	r3, r2
 800a6ee:	617b      	str	r3, [r7, #20]
 800a6f0:	e00e      	b.n	800a710 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800a6f2:	68bb      	ldr	r3, [r7, #8]
 800a6f4:	78db      	ldrb	r3, [r3, #3]
 800a6f6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	785b      	ldrb	r3, [r3, #1]
 800a6fc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800a6fe:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800a700:	68ba      	ldr	r2, [r7, #8]
 800a702:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800a704:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800a706:	68bb      	ldr	r3, [r7, #8]
 800a708:	781b      	ldrb	r3, [r3, #0]
 800a70a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800a70c:	4313      	orrs	r3, r2
 800a70e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	22ca      	movs	r2, #202	; 0xca
 800a716:	625a      	str	r2, [r3, #36]	; 0x24
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	2253      	movs	r2, #83	; 0x53
 800a71e:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a720:	68f8      	ldr	r0, [r7, #12]
 800a722:	f000 f899 	bl	800a858 <RTC_EnterInitMode>
 800a726:	4603      	mov	r3, r0
 800a728:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800a72a:	7cfb      	ldrb	r3, [r7, #19]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d10a      	bne.n	800a746 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	681a      	ldr	r2, [r3, #0]
 800a734:	6979      	ldr	r1, [r7, #20]
 800a736:	4b0e      	ldr	r3, [pc, #56]	; (800a770 <HAL_RTC_SetDate+0x10c>)
 800a738:	400b      	ands	r3, r1
 800a73a:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a73c:	68f8      	ldr	r0, [r7, #12]
 800a73e:	f000 f8bf 	bl	800a8c0 <RTC_ExitInitMode>
 800a742:	4603      	mov	r3, r0
 800a744:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	22ff      	movs	r2, #255	; 0xff
 800a74c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800a74e:	7cfb      	ldrb	r3, [r7, #19]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d103      	bne.n	800a75c <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	2201      	movs	r2, #1
 800a758:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	2200      	movs	r2, #0
 800a760:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800a764:	7cfb      	ldrb	r3, [r7, #19]


}
 800a766:	4618      	mov	r0, r3
 800a768:	371c      	adds	r7, #28
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bd90      	pop	{r4, r7, pc}
 800a76e:	bf00      	nop
 800a770:	00ffff3f 	.word	0x00ffff3f

0800a774 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b086      	sub	sp, #24
 800a778:	af00      	add	r7, sp, #0
 800a77a:	60f8      	str	r0, [r7, #12]
 800a77c:	60b9      	str	r1, [r7, #8]
 800a77e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	685a      	ldr	r2, [r3, #4]
 800a786:	4b21      	ldr	r3, [pc, #132]	; (800a80c <HAL_RTC_GetDate+0x98>)
 800a788:	4013      	ands	r3, r2
 800a78a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800a78c:	697b      	ldr	r3, [r7, #20]
 800a78e:	0c1b      	lsrs	r3, r3, #16
 800a790:	b2da      	uxtb	r2, r3
 800a792:	68bb      	ldr	r3, [r7, #8]
 800a794:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800a796:	697b      	ldr	r3, [r7, #20]
 800a798:	0a1b      	lsrs	r3, r3, #8
 800a79a:	b2db      	uxtb	r3, r3
 800a79c:	f003 031f 	and.w	r3, r3, #31
 800a7a0:	b2da      	uxtb	r2, r3
 800a7a2:	68bb      	ldr	r3, [r7, #8]
 800a7a4:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800a7a6:	697b      	ldr	r3, [r7, #20]
 800a7a8:	b2db      	uxtb	r3, r3
 800a7aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a7ae:	b2da      	uxtb	r2, r3
 800a7b0:	68bb      	ldr	r3, [r7, #8]
 800a7b2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800a7b4:	697b      	ldr	r3, [r7, #20]
 800a7b6:	0b5b      	lsrs	r3, r3, #13
 800a7b8:	b2db      	uxtb	r3, r3
 800a7ba:	f003 0307 	and.w	r3, r3, #7
 800a7be:	b2da      	uxtb	r2, r3
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d11a      	bne.n	800a800 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800a7ca:	68bb      	ldr	r3, [r7, #8]
 800a7cc:	78db      	ldrb	r3, [r3, #3]
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f000 f8d4 	bl	800a97c <RTC_Bcd2ToByte>
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	461a      	mov	r2, r3
 800a7d8:	68bb      	ldr	r3, [r7, #8]
 800a7da:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800a7dc:	68bb      	ldr	r3, [r7, #8]
 800a7de:	785b      	ldrb	r3, [r3, #1]
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	f000 f8cb 	bl	800a97c <RTC_Bcd2ToByte>
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	461a      	mov	r2, r3
 800a7ea:	68bb      	ldr	r3, [r7, #8]
 800a7ec:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	789b      	ldrb	r3, [r3, #2]
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	f000 f8c2 	bl	800a97c <RTC_Bcd2ToByte>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	461a      	mov	r2, r3
 800a7fc:	68bb      	ldr	r3, [r7, #8]
 800a7fe:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800a800:	2300      	movs	r3, #0
}
 800a802:	4618      	mov	r0, r3
 800a804:	3718      	adds	r7, #24
 800a806:	46bd      	mov	sp, r7
 800a808:	bd80      	pop	{r7, pc}
 800a80a:	bf00      	nop
 800a80c:	00ffff3f 	.word	0x00ffff3f

0800a810 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b084      	sub	sp, #16
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	4a0d      	ldr	r2, [pc, #52]	; (800a854 <HAL_RTC_WaitForSynchro+0x44>)
 800a81e:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800a820:	f7f8 fbcc 	bl	8002fbc <HAL_GetTick>
 800a824:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a826:	e009      	b.n	800a83c <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a828:	f7f8 fbc8 	bl	8002fbc <HAL_GetTick>
 800a82c:	4602      	mov	r2, r0
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	1ad3      	subs	r3, r2, r3
 800a832:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a836:	d901      	bls.n	800a83c <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800a838:	2303      	movs	r3, #3
 800a83a:	e007      	b.n	800a84c <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	68db      	ldr	r3, [r3, #12]
 800a842:	f003 0320 	and.w	r3, r3, #32
 800a846:	2b00      	cmp	r3, #0
 800a848:	d0ee      	beq.n	800a828 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800a84a:	2300      	movs	r3, #0
}
 800a84c:	4618      	mov	r0, r3
 800a84e:	3710      	adds	r7, #16
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}
 800a854:	0003ff5f 	.word	0x0003ff5f

0800a858 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b084      	sub	sp, #16
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a860:	2300      	movs	r3, #0
 800a862:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	68db      	ldr	r3, [r3, #12]
 800a86a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d120      	bne.n	800a8b4 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f04f 32ff 	mov.w	r2, #4294967295
 800a87a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800a87c:	f7f8 fb9e 	bl	8002fbc <HAL_GetTick>
 800a880:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a882:	e00d      	b.n	800a8a0 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800a884:	f7f8 fb9a 	bl	8002fbc <HAL_GetTick>
 800a888:	4602      	mov	r2, r0
 800a88a:	68bb      	ldr	r3, [r7, #8]
 800a88c:	1ad3      	subs	r3, r2, r3
 800a88e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a892:	d905      	bls.n	800a8a0 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800a894:	2303      	movs	r3, #3
 800a896:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2203      	movs	r2, #3
 800a89c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	68db      	ldr	r3, [r3, #12]
 800a8a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d102      	bne.n	800a8b4 <RTC_EnterInitMode+0x5c>
 800a8ae:	7bfb      	ldrb	r3, [r7, #15]
 800a8b0:	2b03      	cmp	r3, #3
 800a8b2:	d1e7      	bne.n	800a884 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800a8b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	3710      	adds	r7, #16
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bd80      	pop	{r7, pc}
	...

0800a8c0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b084      	sub	sp, #16
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 800a8cc:	4b1a      	ldr	r3, [pc, #104]	; (800a938 <RTC_ExitInitMode+0x78>)
 800a8ce:	68db      	ldr	r3, [r3, #12]
 800a8d0:	4a19      	ldr	r2, [pc, #100]	; (800a938 <RTC_ExitInitMode+0x78>)
 800a8d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a8d6:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800a8d8:	4b17      	ldr	r3, [pc, #92]	; (800a938 <RTC_ExitInitMode+0x78>)
 800a8da:	689b      	ldr	r3, [r3, #8]
 800a8dc:	f003 0320 	and.w	r3, r3, #32
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d10c      	bne.n	800a8fe <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a8e4:	6878      	ldr	r0, [r7, #4]
 800a8e6:	f7ff ff93 	bl	800a810 <HAL_RTC_WaitForSynchro>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d01e      	beq.n	800a92e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2203      	movs	r2, #3
 800a8f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800a8f8:	2303      	movs	r3, #3
 800a8fa:	73fb      	strb	r3, [r7, #15]
 800a8fc:	e017      	b.n	800a92e <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a8fe:	4b0e      	ldr	r3, [pc, #56]	; (800a938 <RTC_ExitInitMode+0x78>)
 800a900:	689b      	ldr	r3, [r3, #8]
 800a902:	4a0d      	ldr	r2, [pc, #52]	; (800a938 <RTC_ExitInitMode+0x78>)
 800a904:	f023 0320 	bic.w	r3, r3, #32
 800a908:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f7ff ff80 	bl	800a810 <HAL_RTC_WaitForSynchro>
 800a910:	4603      	mov	r3, r0
 800a912:	2b00      	cmp	r3, #0
 800a914:	d005      	beq.n	800a922 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2203      	movs	r2, #3
 800a91a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800a91e:	2303      	movs	r3, #3
 800a920:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a922:	4b05      	ldr	r3, [pc, #20]	; (800a938 <RTC_ExitInitMode+0x78>)
 800a924:	689b      	ldr	r3, [r3, #8]
 800a926:	4a04      	ldr	r2, [pc, #16]	; (800a938 <RTC_ExitInitMode+0x78>)
 800a928:	f043 0320 	orr.w	r3, r3, #32
 800a92c:	6093      	str	r3, [r2, #8]
  }

  return status;
 800a92e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a930:	4618      	mov	r0, r3
 800a932:	3710      	adds	r7, #16
 800a934:	46bd      	mov	sp, r7
 800a936:	bd80      	pop	{r7, pc}
 800a938:	58004000 	.word	0x58004000

0800a93c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800a93c:	b480      	push	{r7}
 800a93e:	b085      	sub	sp, #20
 800a940:	af00      	add	r7, sp, #0
 800a942:	4603      	mov	r3, r0
 800a944:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800a946:	2300      	movs	r3, #0
 800a948:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800a94a:	79fb      	ldrb	r3, [r7, #7]
 800a94c:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800a94e:	e005      	b.n	800a95c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	3301      	adds	r3, #1
 800a954:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800a956:	7afb      	ldrb	r3, [r7, #11]
 800a958:	3b0a      	subs	r3, #10
 800a95a:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800a95c:	7afb      	ldrb	r3, [r7, #11]
 800a95e:	2b09      	cmp	r3, #9
 800a960:	d8f6      	bhi.n	800a950 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	b2db      	uxtb	r3, r3
 800a966:	011b      	lsls	r3, r3, #4
 800a968:	b2da      	uxtb	r2, r3
 800a96a:	7afb      	ldrb	r3, [r7, #11]
 800a96c:	4313      	orrs	r3, r2
 800a96e:	b2db      	uxtb	r3, r3
}
 800a970:	4618      	mov	r0, r3
 800a972:	3714      	adds	r7, #20
 800a974:	46bd      	mov	sp, r7
 800a976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97a:	4770      	bx	lr

0800a97c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800a97c:	b480      	push	{r7}
 800a97e:	b085      	sub	sp, #20
 800a980:	af00      	add	r7, sp, #0
 800a982:	4603      	mov	r3, r0
 800a984:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800a986:	79fb      	ldrb	r3, [r7, #7]
 800a988:	091b      	lsrs	r3, r3, #4
 800a98a:	b2db      	uxtb	r3, r3
 800a98c:	461a      	mov	r2, r3
 800a98e:	0092      	lsls	r2, r2, #2
 800a990:	4413      	add	r3, r2
 800a992:	005b      	lsls	r3, r3, #1
 800a994:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800a996:	79fb      	ldrb	r3, [r7, #7]
 800a998:	f003 030f 	and.w	r3, r3, #15
 800a99c:	b2da      	uxtb	r2, r3
 800a99e:	7bfb      	ldrb	r3, [r7, #15]
 800a9a0:	4413      	add	r3, r2
 800a9a2:	b2db      	uxtb	r3, r3
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	3714      	adds	r7, #20
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ae:	4770      	bx	lr

0800a9b0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b08a      	sub	sp, #40	; 0x28
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d101      	bne.n	800a9c2 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800a9be:	2301      	movs	r3, #1
 800a9c0:	e28e      	b.n	800aee0 <HAL_SAI_Init+0x530>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800a9c2:	f7f8 fb2b 	bl	800301c <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a9cc:	2b01      	cmp	r3, #1
 800a9ce:	d113      	bne.n	800a9f8 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	4a96      	ldr	r2, [pc, #600]	; (800ac30 <HAL_SAI_Init+0x280>)
 800a9d6:	4293      	cmp	r3, r2
 800a9d8:	d004      	beq.n	800a9e4 <HAL_SAI_Init+0x34>
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	4a95      	ldr	r2, [pc, #596]	; (800ac34 <HAL_SAI_Init+0x284>)
 800a9e0:	4293      	cmp	r3, r2
 800a9e2:	d107      	bne.n	800a9f4 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800a9e8:	2b01      	cmp	r3, #1
 800a9ea:	d103      	bne.n	800a9f4 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d001      	beq.n	800a9f8 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 800a9f4:	2301      	movs	r3, #1
 800a9f6:	e273      	b.n	800aee0 <HAL_SAI_Init+0x530>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	4a8c      	ldr	r2, [pc, #560]	; (800ac30 <HAL_SAI_Init+0x280>)
 800a9fe:	4293      	cmp	r3, r2
 800aa00:	d004      	beq.n	800aa0c <HAL_SAI_Init+0x5c>
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	4a8c      	ldr	r2, [pc, #560]	; (800ac38 <HAL_SAI_Init+0x288>)
 800aa08:	4293      	cmp	r3, r2
 800aa0a:	d102      	bne.n	800aa12 <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 800aa0c:	4b8b      	ldr	r3, [pc, #556]	; (800ac3c <HAL_SAI_Init+0x28c>)
 800aa0e:	61bb      	str	r3, [r7, #24]
 800aa10:	e028      	b.n	800aa64 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	4a8a      	ldr	r2, [pc, #552]	; (800ac40 <HAL_SAI_Init+0x290>)
 800aa18:	4293      	cmp	r3, r2
 800aa1a:	d004      	beq.n	800aa26 <HAL_SAI_Init+0x76>
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	4a88      	ldr	r2, [pc, #544]	; (800ac44 <HAL_SAI_Init+0x294>)
 800aa22:	4293      	cmp	r3, r2
 800aa24:	d102      	bne.n	800aa2c <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 800aa26:	4b88      	ldr	r3, [pc, #544]	; (800ac48 <HAL_SAI_Init+0x298>)
 800aa28:	61bb      	str	r3, [r7, #24]
 800aa2a:	e01b      	b.n	800aa64 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	4a86      	ldr	r2, [pc, #536]	; (800ac4c <HAL_SAI_Init+0x29c>)
 800aa32:	4293      	cmp	r3, r2
 800aa34:	d004      	beq.n	800aa40 <HAL_SAI_Init+0x90>
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	4a85      	ldr	r2, [pc, #532]	; (800ac50 <HAL_SAI_Init+0x2a0>)
 800aa3c:	4293      	cmp	r3, r2
 800aa3e:	d102      	bne.n	800aa46 <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 800aa40:	4b84      	ldr	r3, [pc, #528]	; (800ac54 <HAL_SAI_Init+0x2a4>)
 800aa42:	61bb      	str	r3, [r7, #24]
 800aa44:	e00e      	b.n	800aa64 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	4a7a      	ldr	r2, [pc, #488]	; (800ac34 <HAL_SAI_Init+0x284>)
 800aa4c:	4293      	cmp	r3, r2
 800aa4e:	d004      	beq.n	800aa5a <HAL_SAI_Init+0xaa>
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	4a80      	ldr	r2, [pc, #512]	; (800ac58 <HAL_SAI_Init+0x2a8>)
 800aa56:	4293      	cmp	r3, r2
 800aa58:	d102      	bne.n	800aa60 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 800aa5a:	4b80      	ldr	r3, [pc, #512]	; (800ac5c <HAL_SAI_Init+0x2ac>)
 800aa5c:	61bb      	str	r3, [r7, #24]
 800aa5e:	e001      	b.n	800aa64 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800aa60:	2301      	movs	r3, #1
 800aa62:	e23d      	b.n	800aee0 <HAL_SAI_Init+0x530>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800aa6a:	b2db      	uxtb	r3, r3
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d106      	bne.n	800aa7e <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2200      	movs	r2, #0
 800aa74:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f7f8 f859 	bl	8002b30 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800aa7e:	6878      	ldr	r0, [r7, #4]
 800aa80:	f000 fa40 	bl	800af04 <SAI_Disable>
 800aa84:	4603      	mov	r3, r0
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d001      	beq.n	800aa8e <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 800aa8a:	2301      	movs	r3, #1
 800aa8c:	e228      	b.n	800aee0 <HAL_SAI_Init+0x530>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	2202      	movs	r2, #2
 800aa92:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	68db      	ldr	r3, [r3, #12]
 800aa9a:	2b02      	cmp	r3, #2
 800aa9c:	d00c      	beq.n	800aab8 <HAL_SAI_Init+0x108>
 800aa9e:	2b02      	cmp	r3, #2
 800aaa0:	d80d      	bhi.n	800aabe <HAL_SAI_Init+0x10e>
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d002      	beq.n	800aaac <HAL_SAI_Init+0xfc>
 800aaa6:	2b01      	cmp	r3, #1
 800aaa8:	d003      	beq.n	800aab2 <HAL_SAI_Init+0x102>
 800aaaa:	e008      	b.n	800aabe <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800aaac:	2300      	movs	r3, #0
 800aaae:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800aab0:	e008      	b.n	800aac4 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800aab2:	2310      	movs	r3, #16
 800aab4:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800aab6:	e005      	b.n	800aac4 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800aab8:	2320      	movs	r3, #32
 800aaba:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800aabc:	e002      	b.n	800aac4 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 800aabe:	2300      	movs	r3, #0
 800aac0:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800aac2:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	689b      	ldr	r3, [r3, #8]
 800aac8:	2b05      	cmp	r3, #5
 800aaca:	d832      	bhi.n	800ab32 <HAL_SAI_Init+0x182>
 800aacc:	a201      	add	r2, pc, #4	; (adr r2, 800aad4 <HAL_SAI_Init+0x124>)
 800aace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aad2:	bf00      	nop
 800aad4:	0800aaed 	.word	0x0800aaed
 800aad8:	0800aaf3 	.word	0x0800aaf3
 800aadc:	0800aafb 	.word	0x0800aafb
 800aae0:	0800ab03 	.word	0x0800ab03
 800aae4:	0800ab13 	.word	0x0800ab13
 800aae8:	0800ab23 	.word	0x0800ab23
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800aaec:	2300      	movs	r3, #0
 800aaee:	61fb      	str	r3, [r7, #28]
      break;
 800aaf0:	e022      	b.n	800ab38 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800aaf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aaf6:	61fb      	str	r3, [r7, #28]
      break;
 800aaf8:	e01e      	b.n	800ab38 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800aafa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aafe:	61fb      	str	r3, [r7, #28]
      break;
 800ab00:	e01a      	b.n	800ab38 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800ab02:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ab06:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800ab08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab0a:	f043 0301 	orr.w	r3, r3, #1
 800ab0e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800ab10:	e012      	b.n	800ab38 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800ab12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ab16:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 800ab18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab1a:	f043 0302 	orr.w	r3, r3, #2
 800ab1e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800ab20:	e00a      	b.n	800ab38 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800ab22:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ab26:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800ab28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab2a:	f043 0303 	orr.w	r3, r3, #3
 800ab2e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800ab30:	e002      	b.n	800ab38 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800ab32:	2300      	movs	r3, #0
 800ab34:	61fb      	str	r3, [r7, #28]
      break;
 800ab36:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 800ab38:	69bb      	ldr	r3, [r7, #24]
 800ab3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab3c:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	6a1b      	ldr	r3, [r3, #32]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	f000 80c5 	beq.w	800acd2 <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 800ab48:	2300      	movs	r3, #0
 800ab4a:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	4a37      	ldr	r2, [pc, #220]	; (800ac30 <HAL_SAI_Init+0x280>)
 800ab52:	4293      	cmp	r3, r2
 800ab54:	d004      	beq.n	800ab60 <HAL_SAI_Init+0x1b0>
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	4a37      	ldr	r2, [pc, #220]	; (800ac38 <HAL_SAI_Init+0x288>)
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	d106      	bne.n	800ab6e <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800ab60:	f44f 7080 	mov.w	r0, #256	; 0x100
 800ab64:	f04f 0100 	mov.w	r1, #0
 800ab68:	f7fe f90c 	bl	8008d84 <HAL_RCCEx_GetPeriphCLKFreq>
 800ab6c:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	4a33      	ldr	r2, [pc, #204]	; (800ac40 <HAL_SAI_Init+0x290>)
 800ab74:	4293      	cmp	r3, r2
 800ab76:	d004      	beq.n	800ab82 <HAL_SAI_Init+0x1d2>
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	4a31      	ldr	r2, [pc, #196]	; (800ac44 <HAL_SAI_Init+0x294>)
 800ab7e:	4293      	cmp	r3, r2
 800ab80:	d106      	bne.n	800ab90 <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800ab82:	f44f 7000 	mov.w	r0, #512	; 0x200
 800ab86:	f04f 0100 	mov.w	r1, #0
 800ab8a:	f7fe f8fb 	bl	8008d84 <HAL_RCCEx_GetPeriphCLKFreq>
 800ab8e:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	4a2d      	ldr	r2, [pc, #180]	; (800ac4c <HAL_SAI_Init+0x29c>)
 800ab96:	4293      	cmp	r3, r2
 800ab98:	d004      	beq.n	800aba4 <HAL_SAI_Init+0x1f4>
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	4a2c      	ldr	r2, [pc, #176]	; (800ac50 <HAL_SAI_Init+0x2a0>)
 800aba0:	4293      	cmp	r3, r2
 800aba2:	d106      	bne.n	800abb2 <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 800aba4:	f44f 7000 	mov.w	r0, #512	; 0x200
 800aba8:	f04f 0100 	mov.w	r1, #0
 800abac:	f7fe f8ea 	bl	8008d84 <HAL_RCCEx_GetPeriphCLKFreq>
 800abb0:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	4a1f      	ldr	r2, [pc, #124]	; (800ac34 <HAL_SAI_Init+0x284>)
 800abb8:	4293      	cmp	r3, r2
 800abba:	d106      	bne.n	800abca <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800abbc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800abc0:	f04f 0100 	mov.w	r1, #0
 800abc4:	f7fe f8de 	bl	8008d84 <HAL_RCCEx_GetPeriphCLKFreq>
 800abc8:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	4a22      	ldr	r2, [pc, #136]	; (800ac58 <HAL_SAI_Init+0x2a8>)
 800abd0:	4293      	cmp	r3, r2
 800abd2:	d106      	bne.n	800abe2 <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800abd4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800abd8:	f04f 0100 	mov.w	r1, #0
 800abdc:	f7fe f8d2 	bl	8008d84 <HAL_RCCEx_GetPeriphCLKFreq>
 800abe0:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	699b      	ldr	r3, [r3, #24]
 800abe6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800abea:	d139      	bne.n	800ac60 <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abf0:	2b04      	cmp	r3, #4
 800abf2:	d102      	bne.n	800abfa <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800abf4:	2340      	movs	r3, #64	; 0x40
 800abf6:	60fb      	str	r3, [r7, #12]
 800abf8:	e00a      	b.n	800ac10 <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abfe:	2b08      	cmp	r3, #8
 800ac00:	d103      	bne.n	800ac0a <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800ac02:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ac06:	60fb      	str	r3, [r7, #12]
 800ac08:	e002      	b.n	800ac10 <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac0e:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800ac10:	697a      	ldr	r2, [r7, #20]
 800ac12:	4613      	mov	r3, r2
 800ac14:	009b      	lsls	r3, r3, #2
 800ac16:	4413      	add	r3, r2
 800ac18:	005b      	lsls	r3, r3, #1
 800ac1a:	4619      	mov	r1, r3
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	6a1b      	ldr	r3, [r3, #32]
 800ac20:	68fa      	ldr	r2, [r7, #12]
 800ac22:	fb02 f303 	mul.w	r3, r2, r3
 800ac26:	fbb1 f3f3 	udiv	r3, r1, r3
 800ac2a:	613b      	str	r3, [r7, #16]
 800ac2c:	e030      	b.n	800ac90 <HAL_SAI_Init+0x2e0>
 800ac2e:	bf00      	nop
 800ac30:	40015804 	.word	0x40015804
 800ac34:	58005404 	.word	0x58005404
 800ac38:	40015824 	.word	0x40015824
 800ac3c:	40015800 	.word	0x40015800
 800ac40:	40015c04 	.word	0x40015c04
 800ac44:	40015c24 	.word	0x40015c24
 800ac48:	40015c00 	.word	0x40015c00
 800ac4c:	40016004 	.word	0x40016004
 800ac50:	40016024 	.word	0x40016024
 800ac54:	40016000 	.word	0x40016000
 800ac58:	58005424 	.word	0x58005424
 800ac5c:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ac68:	d101      	bne.n	800ac6e <HAL_SAI_Init+0x2be>
 800ac6a:	2302      	movs	r3, #2
 800ac6c:	e000      	b.n	800ac70 <HAL_SAI_Init+0x2c0>
 800ac6e:	2301      	movs	r3, #1
 800ac70:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800ac72:	697a      	ldr	r2, [r7, #20]
 800ac74:	4613      	mov	r3, r2
 800ac76:	009b      	lsls	r3, r3, #2
 800ac78:	4413      	add	r3, r2
 800ac7a:	005b      	lsls	r3, r3, #1
 800ac7c:	4619      	mov	r1, r3
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6a1b      	ldr	r3, [r3, #32]
 800ac82:	68ba      	ldr	r2, [r7, #8]
 800ac84:	fb02 f303 	mul.w	r3, r2, r3
 800ac88:	021b      	lsls	r3, r3, #8
 800ac8a:	fbb1 f3f3 	udiv	r3, r1, r3
 800ac8e:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800ac90:	693b      	ldr	r3, [r7, #16]
 800ac92:	4a95      	ldr	r2, [pc, #596]	; (800aee8 <HAL_SAI_Init+0x538>)
 800ac94:	fba2 2303 	umull	r2, r3, r2, r3
 800ac98:	08da      	lsrs	r2, r3, #3
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800ac9e:	6939      	ldr	r1, [r7, #16]
 800aca0:	4b91      	ldr	r3, [pc, #580]	; (800aee8 <HAL_SAI_Init+0x538>)
 800aca2:	fba3 2301 	umull	r2, r3, r3, r1
 800aca6:	08da      	lsrs	r2, r3, #3
 800aca8:	4613      	mov	r3, r2
 800acaa:	009b      	lsls	r3, r3, #2
 800acac:	4413      	add	r3, r2
 800acae:	005b      	lsls	r3, r3, #1
 800acb0:	1aca      	subs	r2, r1, r3
 800acb2:	2a08      	cmp	r2, #8
 800acb4:	d904      	bls.n	800acc0 <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acba:	1c5a      	adds	r2, r3, #1
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acc4:	2b04      	cmp	r3, #4
 800acc6:	d104      	bne.n	800acd2 <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800accc:	085a      	lsrs	r2, r3, #1
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	685b      	ldr	r3, [r3, #4]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d003      	beq.n	800ace2 <HAL_SAI_Init+0x332>
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	685b      	ldr	r3, [r3, #4]
 800acde:	2b02      	cmp	r3, #2
 800ace0:	d109      	bne.n	800acf6 <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ace6:	2b01      	cmp	r3, #1
 800ace8:	d101      	bne.n	800acee <HAL_SAI_Init+0x33e>
 800acea:	2300      	movs	r3, #0
 800acec:	e001      	b.n	800acf2 <HAL_SAI_Init+0x342>
 800acee:	f44f 7300 	mov.w	r3, #512	; 0x200
 800acf2:	623b      	str	r3, [r7, #32]
 800acf4:	e008      	b.n	800ad08 <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acfa:	2b01      	cmp	r3, #1
 800acfc:	d102      	bne.n	800ad04 <HAL_SAI_Init+0x354>
 800acfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ad02:	e000      	b.n	800ad06 <HAL_SAI_Init+0x356>
 800ad04:	2300      	movs	r3, #0
 800ad06:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800ad08:	f7f8 f988 	bl	800301c <HAL_GetREVID>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad12:	d331      	bcc.n	800ad78 <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	6819      	ldr	r1, [r3, #0]
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681a      	ldr	r2, [r3, #0]
 800ad1e:	4b73      	ldr	r3, [pc, #460]	; (800aeec <HAL_SAI_Init+0x53c>)
 800ad20:	400b      	ands	r3, r1
 800ad22:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	6819      	ldr	r1, [r3, #0]
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	685a      	ldr	r2, [r3, #4]
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad32:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ad38:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad3e:	431a      	orrs	r2, r3
 800ad40:	6a3b      	ldr	r3, [r7, #32]
 800ad42:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800ad44:	69fb      	ldr	r3, [r7, #28]
 800ad46:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800ad4c:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	695b      	ldr	r3, [r3, #20]
 800ad52:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ad58:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad5e:	051b      	lsls	r3, r3, #20
 800ad60:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800ad66:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	691b      	ldr	r3, [r3, #16]
 800ad6c:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	430a      	orrs	r2, r1
 800ad74:	601a      	str	r2, [r3, #0]
 800ad76:	e02d      	b.n	800add4 <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	6819      	ldr	r1, [r3, #0]
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681a      	ldr	r2, [r3, #0]
 800ad82:	4b5b      	ldr	r3, [pc, #364]	; (800aef0 <HAL_SAI_Init+0x540>)
 800ad84:	400b      	ands	r3, r1
 800ad86:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	6819      	ldr	r1, [r3, #0]
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	685a      	ldr	r2, [r3, #4]
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad96:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ad9c:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ada2:	431a      	orrs	r2, r3
 800ada4:	6a3b      	ldr	r3, [r7, #32]
 800ada6:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800ada8:	69fb      	ldr	r3, [r7, #28]
 800adaa:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800adb0:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	695b      	ldr	r3, [r3, #20]
 800adb6:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800adbc:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adc2:	051b      	lsls	r3, r3, #20
 800adc4:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800adca:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	430a      	orrs	r2, r1
 800add2:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	6859      	ldr	r1, [r3, #4]
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681a      	ldr	r2, [r3, #0]
 800adde:	4b45      	ldr	r3, [pc, #276]	; (800aef4 <HAL_SAI_Init+0x544>)
 800ade0:	400b      	ands	r3, r1
 800ade2:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	6859      	ldr	r1, [r3, #4]
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	69da      	ldr	r2, [r3, #28]
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adf2:	431a      	orrs	r2, r3
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adf8:	431a      	orrs	r2, r3
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	430a      	orrs	r2, r1
 800ae00:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	6899      	ldr	r1, [r3, #8]
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681a      	ldr	r2, [r3, #0]
 800ae0c:	4b3a      	ldr	r3, [pc, #232]	; (800aef8 <HAL_SAI_Init+0x548>)
 800ae0e:	400b      	ands	r3, r1
 800ae10:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	6899      	ldr	r1, [r3, #8]
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae1c:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800ae22:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 800ae28:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 800ae2e:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae34:	3b01      	subs	r3, #1
 800ae36:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800ae38:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	430a      	orrs	r2, r1
 800ae40:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	68d9      	ldr	r1, [r3, #12]
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681a      	ldr	r2, [r3, #0]
 800ae4c:	f24f 0320 	movw	r3, #61472	; 0xf020
 800ae50:	400b      	ands	r3, r1
 800ae52:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	68d9      	ldr	r1, [r3, #12]
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae62:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae68:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800ae6a:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae70:	3b01      	subs	r3, #1
 800ae72:	021b      	lsls	r3, r3, #8
 800ae74:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	430a      	orrs	r2, r1
 800ae7c:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	4a1e      	ldr	r2, [pc, #120]	; (800aefc <HAL_SAI_Init+0x54c>)
 800ae84:	4293      	cmp	r3, r2
 800ae86:	d004      	beq.n	800ae92 <HAL_SAI_Init+0x4e2>
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	4a1c      	ldr	r2, [pc, #112]	; (800af00 <HAL_SAI_Init+0x550>)
 800ae8e:	4293      	cmp	r3, r2
 800ae90:	d119      	bne.n	800aec6 <HAL_SAI_Init+0x516>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800ae92:	69bb      	ldr	r3, [r7, #24]
 800ae94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae96:	f023 0201 	bic.w	r2, r3, #1
 800ae9a:	69bb      	ldr	r3, [r7, #24]
 800ae9c:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800aea4:	2b01      	cmp	r3, #1
 800aea6:	d10e      	bne.n	800aec6 <HAL_SAI_Init+0x516>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aeb0:	3b01      	subs	r3, #1
 800aeb2:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800aeb4:	431a      	orrs	r2, r3
 800aeb6:	69bb      	ldr	r3, [r7, #24]
 800aeb8:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800aeba:	69bb      	ldr	r3, [r7, #24]
 800aebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aebe:	f043 0201 	orr.w	r2, r3, #1
 800aec2:	69bb      	ldr	r3, [r7, #24]
 800aec4:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2200      	movs	r2, #0
 800aeca:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	2201      	movs	r2, #1
 800aed2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	2200      	movs	r2, #0
 800aeda:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 800aede:	2300      	movs	r3, #0
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	3728      	adds	r7, #40	; 0x28
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}
 800aee8:	cccccccd 	.word	0xcccccccd
 800aeec:	f005c010 	.word	0xf005c010
 800aef0:	f805c010 	.word	0xf805c010
 800aef4:	ffff1ff0 	.word	0xffff1ff0
 800aef8:	fff88000 	.word	0xfff88000
 800aefc:	40015804 	.word	0x40015804
 800af00:	58005404 	.word	0x58005404

0800af04 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800af04:	b480      	push	{r7}
 800af06:	b085      	sub	sp, #20
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800af0c:	4b18      	ldr	r3, [pc, #96]	; (800af70 <SAI_Disable+0x6c>)
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	4a18      	ldr	r2, [pc, #96]	; (800af74 <SAI_Disable+0x70>)
 800af12:	fba2 2303 	umull	r2, r3, r2, r3
 800af16:	0b1b      	lsrs	r3, r3, #12
 800af18:	009b      	lsls	r3, r3, #2
 800af1a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800af1c:	2300      	movs	r3, #0
 800af1e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	681a      	ldr	r2, [r3, #0]
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800af2e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d10a      	bne.n	800af4c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800af3c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 800af46:	2303      	movs	r3, #3
 800af48:	72fb      	strb	r3, [r7, #11]
      break;
 800af4a:	e009      	b.n	800af60 <SAI_Disable+0x5c>
    }
    count--;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	3b01      	subs	r3, #1
 800af50:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d1e7      	bne.n	800af30 <SAI_Disable+0x2c>

  return status;
 800af60:	7afb      	ldrb	r3, [r7, #11]
}
 800af62:	4618      	mov	r0, r3
 800af64:	3714      	adds	r7, #20
 800af66:	46bd      	mov	sp, r7
 800af68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6c:	4770      	bx	lr
 800af6e:	bf00      	nop
 800af70:	24000028 	.word	0x24000028
 800af74:	95cbec1b 	.word	0x95cbec1b

0800af78 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b082      	sub	sp, #8
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
 800af80:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d101      	bne.n	800af8c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800af88:	2301      	movs	r3, #1
 800af8a:	e02b      	b.n	800afe4 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800af92:	b2db      	uxtb	r3, r3
 800af94:	2b00      	cmp	r3, #0
 800af96:	d106      	bne.n	800afa6 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2200      	movs	r2, #0
 800af9c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f7f7 fdbb 	bl	8002b1c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2202      	movs	r2, #2
 800afaa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681a      	ldr	r2, [r3, #0]
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	3304      	adds	r3, #4
 800afb6:	4619      	mov	r1, r3
 800afb8:	4610      	mov	r0, r2
 800afba:	f003 f905 	bl	800e1c8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	6818      	ldr	r0, [r3, #0]
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	685b      	ldr	r3, [r3, #4]
 800afc6:	461a      	mov	r2, r3
 800afc8:	6839      	ldr	r1, [r7, #0]
 800afca:	f003 f959 	bl	800e280 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800afce:	4b07      	ldr	r3, [pc, #28]	; (800afec <HAL_SDRAM_Init+0x74>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	4a06      	ldr	r2, [pc, #24]	; (800afec <HAL_SDRAM_Init+0x74>)
 800afd4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800afd8:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	2201      	movs	r2, #1
 800afde:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800afe2:	2300      	movs	r3, #0
}
 800afe4:	4618      	mov	r0, r3
 800afe6:	3708      	adds	r7, #8
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}
 800afec:	52004000 	.word	0x52004000

0800aff0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b084      	sub	sp, #16
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d101      	bne.n	800b002 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800affe:	2301      	movs	r3, #1
 800b000:	e10f      	b.n	800b222 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	2200      	movs	r2, #0
 800b006:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	4a87      	ldr	r2, [pc, #540]	; (800b22c <HAL_SPI_Init+0x23c>)
 800b00e:	4293      	cmp	r3, r2
 800b010:	d00f      	beq.n	800b032 <HAL_SPI_Init+0x42>
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	4a86      	ldr	r2, [pc, #536]	; (800b230 <HAL_SPI_Init+0x240>)
 800b018:	4293      	cmp	r3, r2
 800b01a:	d00a      	beq.n	800b032 <HAL_SPI_Init+0x42>
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	4a84      	ldr	r2, [pc, #528]	; (800b234 <HAL_SPI_Init+0x244>)
 800b022:	4293      	cmp	r3, r2
 800b024:	d005      	beq.n	800b032 <HAL_SPI_Init+0x42>
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	68db      	ldr	r3, [r3, #12]
 800b02a:	2b0f      	cmp	r3, #15
 800b02c:	d901      	bls.n	800b032 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b02e:	2301      	movs	r3, #1
 800b030:	e0f7      	b.n	800b222 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f000 f900 	bl	800b238 <SPI_GetPacketSize>
 800b038:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	4a7b      	ldr	r2, [pc, #492]	; (800b22c <HAL_SPI_Init+0x23c>)
 800b040:	4293      	cmp	r3, r2
 800b042:	d00c      	beq.n	800b05e <HAL_SPI_Init+0x6e>
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	4a79      	ldr	r2, [pc, #484]	; (800b230 <HAL_SPI_Init+0x240>)
 800b04a:	4293      	cmp	r3, r2
 800b04c:	d007      	beq.n	800b05e <HAL_SPI_Init+0x6e>
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	4a78      	ldr	r2, [pc, #480]	; (800b234 <HAL_SPI_Init+0x244>)
 800b054:	4293      	cmp	r3, r2
 800b056:	d002      	beq.n	800b05e <HAL_SPI_Init+0x6e>
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	2b08      	cmp	r3, #8
 800b05c:	d811      	bhi.n	800b082 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b062:	4a72      	ldr	r2, [pc, #456]	; (800b22c <HAL_SPI_Init+0x23c>)
 800b064:	4293      	cmp	r3, r2
 800b066:	d009      	beq.n	800b07c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	4a70      	ldr	r2, [pc, #448]	; (800b230 <HAL_SPI_Init+0x240>)
 800b06e:	4293      	cmp	r3, r2
 800b070:	d004      	beq.n	800b07c <HAL_SPI_Init+0x8c>
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	4a6f      	ldr	r2, [pc, #444]	; (800b234 <HAL_SPI_Init+0x244>)
 800b078:	4293      	cmp	r3, r2
 800b07a:	d104      	bne.n	800b086 <HAL_SPI_Init+0x96>
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	2b10      	cmp	r3, #16
 800b080:	d901      	bls.n	800b086 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b082:	2301      	movs	r3, #1
 800b084:	e0cd      	b.n	800b222 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b08c:	b2db      	uxtb	r3, r3
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d106      	bne.n	800b0a0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	2200      	movs	r2, #0
 800b096:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b09a:	6878      	ldr	r0, [r7, #4]
 800b09c:	f7f7 faa8 	bl	80025f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2202      	movs	r2, #2
 800b0a4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	681a      	ldr	r2, [r3, #0]
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	f022 0201 	bic.w	r2, r2, #1
 800b0b6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	689b      	ldr	r3, [r3, #8]
 800b0be:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800b0c2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	699b      	ldr	r3, [r3, #24]
 800b0c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b0cc:	d119      	bne.n	800b102 <HAL_SPI_Init+0x112>
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	685b      	ldr	r3, [r3, #4]
 800b0d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b0d6:	d103      	bne.n	800b0e0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d008      	beq.n	800b0f2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d10c      	bne.n	800b102 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b0ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b0f0:	d107      	bne.n	800b102 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	681a      	ldr	r2, [r3, #0]
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b100:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	685b      	ldr	r3, [r3, #4]
 800b106:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d00f      	beq.n	800b12e <HAL_SPI_Init+0x13e>
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	68db      	ldr	r3, [r3, #12]
 800b112:	2b06      	cmp	r3, #6
 800b114:	d90b      	bls.n	800b12e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	430a      	orrs	r2, r1
 800b12a:	601a      	str	r2, [r3, #0]
 800b12c:	e007      	b.n	800b13e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	681a      	ldr	r2, [r3, #0]
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b13c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	69da      	ldr	r2, [r3, #28]
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b146:	431a      	orrs	r2, r3
 800b148:	68bb      	ldr	r3, [r7, #8]
 800b14a:	431a      	orrs	r2, r3
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b150:	ea42 0103 	orr.w	r1, r2, r3
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	68da      	ldr	r2, [r3, #12]
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	430a      	orrs	r2, r1
 800b15e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b168:	431a      	orrs	r2, r3
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b16e:	431a      	orrs	r2, r3
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	699b      	ldr	r3, [r3, #24]
 800b174:	431a      	orrs	r2, r3
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	691b      	ldr	r3, [r3, #16]
 800b17a:	431a      	orrs	r2, r3
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	695b      	ldr	r3, [r3, #20]
 800b180:	431a      	orrs	r2, r3
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	6a1b      	ldr	r3, [r3, #32]
 800b186:	431a      	orrs	r2, r3
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	685b      	ldr	r3, [r3, #4]
 800b18c:	431a      	orrs	r2, r3
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b192:	431a      	orrs	r2, r3
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	689b      	ldr	r3, [r3, #8]
 800b198:	431a      	orrs	r2, r3
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b19e:	ea42 0103 	orr.w	r1, r2, r3
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	430a      	orrs	r2, r1
 800b1ac:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	685b      	ldr	r3, [r3, #4]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d113      	bne.n	800b1de <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	689b      	ldr	r3, [r3, #8]
 800b1bc:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b1c8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	689b      	ldr	r3, [r3, #8]
 800b1d0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b1dc:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	f022 0201 	bic.w	r2, r2, #1
 800b1ec:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	685b      	ldr	r3, [r3, #4]
 800b1f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d00a      	beq.n	800b210 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	68db      	ldr	r3, [r3, #12]
 800b200:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	430a      	orrs	r2, r1
 800b20e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2200      	movs	r2, #0
 800b214:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	2201      	movs	r2, #1
 800b21c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800b220:	2300      	movs	r3, #0
}
 800b222:	4618      	mov	r0, r3
 800b224:	3710      	adds	r7, #16
 800b226:	46bd      	mov	sp, r7
 800b228:	bd80      	pop	{r7, pc}
 800b22a:	bf00      	nop
 800b22c:	40013000 	.word	0x40013000
 800b230:	40003800 	.word	0x40003800
 800b234:	40003c00 	.word	0x40003c00

0800b238 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800b238:	b480      	push	{r7}
 800b23a:	b085      	sub	sp, #20
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b244:	095b      	lsrs	r3, r3, #5
 800b246:	3301      	adds	r3, #1
 800b248:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	68db      	ldr	r3, [r3, #12]
 800b24e:	3301      	adds	r3, #1
 800b250:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b252:	68bb      	ldr	r3, [r7, #8]
 800b254:	3307      	adds	r3, #7
 800b256:	08db      	lsrs	r3, r3, #3
 800b258:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b25a:	68bb      	ldr	r3, [r7, #8]
 800b25c:	68fa      	ldr	r2, [r7, #12]
 800b25e:	fb02 f303 	mul.w	r3, r2, r3
}
 800b262:	4618      	mov	r0, r3
 800b264:	3714      	adds	r7, #20
 800b266:	46bd      	mov	sp, r7
 800b268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26c:	4770      	bx	lr

0800b26e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b26e:	b580      	push	{r7, lr}
 800b270:	b082      	sub	sp, #8
 800b272:	af00      	add	r7, sp, #0
 800b274:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d101      	bne.n	800b280 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b27c:	2301      	movs	r3, #1
 800b27e:	e049      	b.n	800b314 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b286:	b2db      	uxtb	r3, r3
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d106      	bne.n	800b29a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2200      	movs	r2, #0
 800b290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b294:	6878      	ldr	r0, [r7, #4]
 800b296:	f7f7 fa75 	bl	8002784 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2202      	movs	r2, #2
 800b29e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681a      	ldr	r2, [r3, #0]
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	3304      	adds	r3, #4
 800b2aa:	4619      	mov	r1, r3
 800b2ac:	4610      	mov	r0, r2
 800b2ae:	f000 f99d 	bl	800b5ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	2201      	movs	r2, #1
 800b2b6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	2201      	movs	r2, #1
 800b2be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	2201      	movs	r2, #1
 800b2c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	2201      	movs	r2, #1
 800b2ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2201      	movs	r2, #1
 800b2d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	2201      	movs	r2, #1
 800b2de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2201      	movs	r2, #1
 800b2e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	2201      	movs	r2, #1
 800b2ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	2201      	movs	r2, #1
 800b2f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	2201      	movs	r2, #1
 800b2fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2201      	movs	r2, #1
 800b306:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	2201      	movs	r2, #1
 800b30e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b312:	2300      	movs	r3, #0
}
 800b314:	4618      	mov	r0, r3
 800b316:	3708      	adds	r7, #8
 800b318:	46bd      	mov	sp, r7
 800b31a:	bd80      	pop	{r7, pc}

0800b31c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b31c:	b480      	push	{r7}
 800b31e:	b085      	sub	sp, #20
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b32a:	b2db      	uxtb	r3, r3
 800b32c:	2b01      	cmp	r3, #1
 800b32e:	d001      	beq.n	800b334 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800b330:	2301      	movs	r3, #1
 800b332:	e04c      	b.n	800b3ce <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	2202      	movs	r2, #2
 800b338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	4a26      	ldr	r2, [pc, #152]	; (800b3dc <HAL_TIM_Base_Start+0xc0>)
 800b342:	4293      	cmp	r3, r2
 800b344:	d022      	beq.n	800b38c <HAL_TIM_Base_Start+0x70>
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b34e:	d01d      	beq.n	800b38c <HAL_TIM_Base_Start+0x70>
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	4a22      	ldr	r2, [pc, #136]	; (800b3e0 <HAL_TIM_Base_Start+0xc4>)
 800b356:	4293      	cmp	r3, r2
 800b358:	d018      	beq.n	800b38c <HAL_TIM_Base_Start+0x70>
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	4a21      	ldr	r2, [pc, #132]	; (800b3e4 <HAL_TIM_Base_Start+0xc8>)
 800b360:	4293      	cmp	r3, r2
 800b362:	d013      	beq.n	800b38c <HAL_TIM_Base_Start+0x70>
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	4a1f      	ldr	r2, [pc, #124]	; (800b3e8 <HAL_TIM_Base_Start+0xcc>)
 800b36a:	4293      	cmp	r3, r2
 800b36c:	d00e      	beq.n	800b38c <HAL_TIM_Base_Start+0x70>
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	4a1e      	ldr	r2, [pc, #120]	; (800b3ec <HAL_TIM_Base_Start+0xd0>)
 800b374:	4293      	cmp	r3, r2
 800b376:	d009      	beq.n	800b38c <HAL_TIM_Base_Start+0x70>
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	4a1c      	ldr	r2, [pc, #112]	; (800b3f0 <HAL_TIM_Base_Start+0xd4>)
 800b37e:	4293      	cmp	r3, r2
 800b380:	d004      	beq.n	800b38c <HAL_TIM_Base_Start+0x70>
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	4a1b      	ldr	r2, [pc, #108]	; (800b3f4 <HAL_TIM_Base_Start+0xd8>)
 800b388:	4293      	cmp	r3, r2
 800b38a:	d115      	bne.n	800b3b8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	689a      	ldr	r2, [r3, #8]
 800b392:	4b19      	ldr	r3, [pc, #100]	; (800b3f8 <HAL_TIM_Base_Start+0xdc>)
 800b394:	4013      	ands	r3, r2
 800b396:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	2b06      	cmp	r3, #6
 800b39c:	d015      	beq.n	800b3ca <HAL_TIM_Base_Start+0xae>
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3a4:	d011      	beq.n	800b3ca <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	681a      	ldr	r2, [r3, #0]
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	f042 0201 	orr.w	r2, r2, #1
 800b3b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b3b6:	e008      	b.n	800b3ca <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	681a      	ldr	r2, [r3, #0]
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	f042 0201 	orr.w	r2, r2, #1
 800b3c6:	601a      	str	r2, [r3, #0]
 800b3c8:	e000      	b.n	800b3cc <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b3ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b3cc:	2300      	movs	r3, #0
}
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	3714      	adds	r7, #20
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d8:	4770      	bx	lr
 800b3da:	bf00      	nop
 800b3dc:	40010000 	.word	0x40010000
 800b3e0:	40000400 	.word	0x40000400
 800b3e4:	40000800 	.word	0x40000800
 800b3e8:	40000c00 	.word	0x40000c00
 800b3ec:	40010400 	.word	0x40010400
 800b3f0:	40001800 	.word	0x40001800
 800b3f4:	40014000 	.word	0x40014000
 800b3f8:	00010007 	.word	0x00010007

0800b3fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b084      	sub	sp, #16
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
 800b404:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b406:	2300      	movs	r3, #0
 800b408:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b410:	2b01      	cmp	r3, #1
 800b412:	d101      	bne.n	800b418 <HAL_TIM_ConfigClockSource+0x1c>
 800b414:	2302      	movs	r3, #2
 800b416:	e0dc      	b.n	800b5d2 <HAL_TIM_ConfigClockSource+0x1d6>
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2201      	movs	r2, #1
 800b41c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	2202      	movs	r2, #2
 800b424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	689b      	ldr	r3, [r3, #8]
 800b42e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b430:	68ba      	ldr	r2, [r7, #8]
 800b432:	4b6a      	ldr	r3, [pc, #424]	; (800b5dc <HAL_TIM_ConfigClockSource+0x1e0>)
 800b434:	4013      	ands	r3, r2
 800b436:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b43e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	68ba      	ldr	r2, [r7, #8]
 800b446:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	4a64      	ldr	r2, [pc, #400]	; (800b5e0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b44e:	4293      	cmp	r3, r2
 800b450:	f000 80a9 	beq.w	800b5a6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b454:	4a62      	ldr	r2, [pc, #392]	; (800b5e0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b456:	4293      	cmp	r3, r2
 800b458:	f200 80ae 	bhi.w	800b5b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b45c:	4a61      	ldr	r2, [pc, #388]	; (800b5e4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b45e:	4293      	cmp	r3, r2
 800b460:	f000 80a1 	beq.w	800b5a6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b464:	4a5f      	ldr	r2, [pc, #380]	; (800b5e4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b466:	4293      	cmp	r3, r2
 800b468:	f200 80a6 	bhi.w	800b5b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b46c:	4a5e      	ldr	r2, [pc, #376]	; (800b5e8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b46e:	4293      	cmp	r3, r2
 800b470:	f000 8099 	beq.w	800b5a6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b474:	4a5c      	ldr	r2, [pc, #368]	; (800b5e8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b476:	4293      	cmp	r3, r2
 800b478:	f200 809e 	bhi.w	800b5b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b47c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b480:	f000 8091 	beq.w	800b5a6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b484:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b488:	f200 8096 	bhi.w	800b5b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b48c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b490:	f000 8089 	beq.w	800b5a6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b494:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b498:	f200 808e 	bhi.w	800b5b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b49c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b4a0:	d03e      	beq.n	800b520 <HAL_TIM_ConfigClockSource+0x124>
 800b4a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b4a6:	f200 8087 	bhi.w	800b5b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b4aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4ae:	f000 8086 	beq.w	800b5be <HAL_TIM_ConfigClockSource+0x1c2>
 800b4b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4b6:	d87f      	bhi.n	800b5b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b4b8:	2b70      	cmp	r3, #112	; 0x70
 800b4ba:	d01a      	beq.n	800b4f2 <HAL_TIM_ConfigClockSource+0xf6>
 800b4bc:	2b70      	cmp	r3, #112	; 0x70
 800b4be:	d87b      	bhi.n	800b5b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b4c0:	2b60      	cmp	r3, #96	; 0x60
 800b4c2:	d050      	beq.n	800b566 <HAL_TIM_ConfigClockSource+0x16a>
 800b4c4:	2b60      	cmp	r3, #96	; 0x60
 800b4c6:	d877      	bhi.n	800b5b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b4c8:	2b50      	cmp	r3, #80	; 0x50
 800b4ca:	d03c      	beq.n	800b546 <HAL_TIM_ConfigClockSource+0x14a>
 800b4cc:	2b50      	cmp	r3, #80	; 0x50
 800b4ce:	d873      	bhi.n	800b5b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b4d0:	2b40      	cmp	r3, #64	; 0x40
 800b4d2:	d058      	beq.n	800b586 <HAL_TIM_ConfigClockSource+0x18a>
 800b4d4:	2b40      	cmp	r3, #64	; 0x40
 800b4d6:	d86f      	bhi.n	800b5b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b4d8:	2b30      	cmp	r3, #48	; 0x30
 800b4da:	d064      	beq.n	800b5a6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b4dc:	2b30      	cmp	r3, #48	; 0x30
 800b4de:	d86b      	bhi.n	800b5b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b4e0:	2b20      	cmp	r3, #32
 800b4e2:	d060      	beq.n	800b5a6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b4e4:	2b20      	cmp	r3, #32
 800b4e6:	d867      	bhi.n	800b5b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d05c      	beq.n	800b5a6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b4ec:	2b10      	cmp	r3, #16
 800b4ee:	d05a      	beq.n	800b5a6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b4f0:	e062      	b.n	800b5b8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	6818      	ldr	r0, [r3, #0]
 800b4f6:	683b      	ldr	r3, [r7, #0]
 800b4f8:	6899      	ldr	r1, [r3, #8]
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	685a      	ldr	r2, [r3, #4]
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	68db      	ldr	r3, [r3, #12]
 800b502:	f000 f98b 	bl	800b81c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	689b      	ldr	r3, [r3, #8]
 800b50c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b50e:	68bb      	ldr	r3, [r7, #8]
 800b510:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b514:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	68ba      	ldr	r2, [r7, #8]
 800b51c:	609a      	str	r2, [r3, #8]
      break;
 800b51e:	e04f      	b.n	800b5c0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	6818      	ldr	r0, [r3, #0]
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	6899      	ldr	r1, [r3, #8]
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	685a      	ldr	r2, [r3, #4]
 800b52c:	683b      	ldr	r3, [r7, #0]
 800b52e:	68db      	ldr	r3, [r3, #12]
 800b530:	f000 f974 	bl	800b81c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	689a      	ldr	r2, [r3, #8]
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b542:	609a      	str	r2, [r3, #8]
      break;
 800b544:	e03c      	b.n	800b5c0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	6818      	ldr	r0, [r3, #0]
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	6859      	ldr	r1, [r3, #4]
 800b54e:	683b      	ldr	r3, [r7, #0]
 800b550:	68db      	ldr	r3, [r3, #12]
 800b552:	461a      	mov	r2, r3
 800b554:	f000 f8e4 	bl	800b720 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	2150      	movs	r1, #80	; 0x50
 800b55e:	4618      	mov	r0, r3
 800b560:	f000 f93e 	bl	800b7e0 <TIM_ITRx_SetConfig>
      break;
 800b564:	e02c      	b.n	800b5c0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	6818      	ldr	r0, [r3, #0]
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	6859      	ldr	r1, [r3, #4]
 800b56e:	683b      	ldr	r3, [r7, #0]
 800b570:	68db      	ldr	r3, [r3, #12]
 800b572:	461a      	mov	r2, r3
 800b574:	f000 f903 	bl	800b77e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	2160      	movs	r1, #96	; 0x60
 800b57e:	4618      	mov	r0, r3
 800b580:	f000 f92e 	bl	800b7e0 <TIM_ITRx_SetConfig>
      break;
 800b584:	e01c      	b.n	800b5c0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	6818      	ldr	r0, [r3, #0]
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	6859      	ldr	r1, [r3, #4]
 800b58e:	683b      	ldr	r3, [r7, #0]
 800b590:	68db      	ldr	r3, [r3, #12]
 800b592:	461a      	mov	r2, r3
 800b594:	f000 f8c4 	bl	800b720 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	2140      	movs	r1, #64	; 0x40
 800b59e:	4618      	mov	r0, r3
 800b5a0:	f000 f91e 	bl	800b7e0 <TIM_ITRx_SetConfig>
      break;
 800b5a4:	e00c      	b.n	800b5c0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681a      	ldr	r2, [r3, #0]
 800b5aa:	683b      	ldr	r3, [r7, #0]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	4619      	mov	r1, r3
 800b5b0:	4610      	mov	r0, r2
 800b5b2:	f000 f915 	bl	800b7e0 <TIM_ITRx_SetConfig>
      break;
 800b5b6:	e003      	b.n	800b5c0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b5b8:	2301      	movs	r3, #1
 800b5ba:	73fb      	strb	r3, [r7, #15]
      break;
 800b5bc:	e000      	b.n	800b5c0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800b5be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	2201      	movs	r2, #1
 800b5c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b5d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	3710      	adds	r7, #16
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	bd80      	pop	{r7, pc}
 800b5da:	bf00      	nop
 800b5dc:	ffceff88 	.word	0xffceff88
 800b5e0:	00100040 	.word	0x00100040
 800b5e4:	00100030 	.word	0x00100030
 800b5e8:	00100020 	.word	0x00100020

0800b5ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b5ec:	b480      	push	{r7}
 800b5ee:	b085      	sub	sp, #20
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
 800b5f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	4a40      	ldr	r2, [pc, #256]	; (800b700 <TIM_Base_SetConfig+0x114>)
 800b600:	4293      	cmp	r3, r2
 800b602:	d013      	beq.n	800b62c <TIM_Base_SetConfig+0x40>
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b60a:	d00f      	beq.n	800b62c <TIM_Base_SetConfig+0x40>
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	4a3d      	ldr	r2, [pc, #244]	; (800b704 <TIM_Base_SetConfig+0x118>)
 800b610:	4293      	cmp	r3, r2
 800b612:	d00b      	beq.n	800b62c <TIM_Base_SetConfig+0x40>
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	4a3c      	ldr	r2, [pc, #240]	; (800b708 <TIM_Base_SetConfig+0x11c>)
 800b618:	4293      	cmp	r3, r2
 800b61a:	d007      	beq.n	800b62c <TIM_Base_SetConfig+0x40>
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	4a3b      	ldr	r2, [pc, #236]	; (800b70c <TIM_Base_SetConfig+0x120>)
 800b620:	4293      	cmp	r3, r2
 800b622:	d003      	beq.n	800b62c <TIM_Base_SetConfig+0x40>
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	4a3a      	ldr	r2, [pc, #232]	; (800b710 <TIM_Base_SetConfig+0x124>)
 800b628:	4293      	cmp	r3, r2
 800b62a:	d108      	bne.n	800b63e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b632:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b634:	683b      	ldr	r3, [r7, #0]
 800b636:	685b      	ldr	r3, [r3, #4]
 800b638:	68fa      	ldr	r2, [r7, #12]
 800b63a:	4313      	orrs	r3, r2
 800b63c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	4a2f      	ldr	r2, [pc, #188]	; (800b700 <TIM_Base_SetConfig+0x114>)
 800b642:	4293      	cmp	r3, r2
 800b644:	d01f      	beq.n	800b686 <TIM_Base_SetConfig+0x9a>
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b64c:	d01b      	beq.n	800b686 <TIM_Base_SetConfig+0x9a>
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	4a2c      	ldr	r2, [pc, #176]	; (800b704 <TIM_Base_SetConfig+0x118>)
 800b652:	4293      	cmp	r3, r2
 800b654:	d017      	beq.n	800b686 <TIM_Base_SetConfig+0x9a>
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	4a2b      	ldr	r2, [pc, #172]	; (800b708 <TIM_Base_SetConfig+0x11c>)
 800b65a:	4293      	cmp	r3, r2
 800b65c:	d013      	beq.n	800b686 <TIM_Base_SetConfig+0x9a>
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	4a2a      	ldr	r2, [pc, #168]	; (800b70c <TIM_Base_SetConfig+0x120>)
 800b662:	4293      	cmp	r3, r2
 800b664:	d00f      	beq.n	800b686 <TIM_Base_SetConfig+0x9a>
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	4a29      	ldr	r2, [pc, #164]	; (800b710 <TIM_Base_SetConfig+0x124>)
 800b66a:	4293      	cmp	r3, r2
 800b66c:	d00b      	beq.n	800b686 <TIM_Base_SetConfig+0x9a>
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	4a28      	ldr	r2, [pc, #160]	; (800b714 <TIM_Base_SetConfig+0x128>)
 800b672:	4293      	cmp	r3, r2
 800b674:	d007      	beq.n	800b686 <TIM_Base_SetConfig+0x9a>
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	4a27      	ldr	r2, [pc, #156]	; (800b718 <TIM_Base_SetConfig+0x12c>)
 800b67a:	4293      	cmp	r3, r2
 800b67c:	d003      	beq.n	800b686 <TIM_Base_SetConfig+0x9a>
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	4a26      	ldr	r2, [pc, #152]	; (800b71c <TIM_Base_SetConfig+0x130>)
 800b682:	4293      	cmp	r3, r2
 800b684:	d108      	bne.n	800b698 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b68c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	68db      	ldr	r3, [r3, #12]
 800b692:	68fa      	ldr	r2, [r7, #12]
 800b694:	4313      	orrs	r3, r2
 800b696:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b69e:	683b      	ldr	r3, [r7, #0]
 800b6a0:	695b      	ldr	r3, [r3, #20]
 800b6a2:	4313      	orrs	r3, r2
 800b6a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	68fa      	ldr	r2, [r7, #12]
 800b6aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b6ac:	683b      	ldr	r3, [r7, #0]
 800b6ae:	689a      	ldr	r2, [r3, #8]
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	681a      	ldr	r2, [r3, #0]
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	4a10      	ldr	r2, [pc, #64]	; (800b700 <TIM_Base_SetConfig+0x114>)
 800b6c0:	4293      	cmp	r3, r2
 800b6c2:	d00f      	beq.n	800b6e4 <TIM_Base_SetConfig+0xf8>
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	4a12      	ldr	r2, [pc, #72]	; (800b710 <TIM_Base_SetConfig+0x124>)
 800b6c8:	4293      	cmp	r3, r2
 800b6ca:	d00b      	beq.n	800b6e4 <TIM_Base_SetConfig+0xf8>
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	4a11      	ldr	r2, [pc, #68]	; (800b714 <TIM_Base_SetConfig+0x128>)
 800b6d0:	4293      	cmp	r3, r2
 800b6d2:	d007      	beq.n	800b6e4 <TIM_Base_SetConfig+0xf8>
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	4a10      	ldr	r2, [pc, #64]	; (800b718 <TIM_Base_SetConfig+0x12c>)
 800b6d8:	4293      	cmp	r3, r2
 800b6da:	d003      	beq.n	800b6e4 <TIM_Base_SetConfig+0xf8>
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	4a0f      	ldr	r2, [pc, #60]	; (800b71c <TIM_Base_SetConfig+0x130>)
 800b6e0:	4293      	cmp	r3, r2
 800b6e2:	d103      	bne.n	800b6ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	691a      	ldr	r2, [r3, #16]
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2201      	movs	r2, #1
 800b6f0:	615a      	str	r2, [r3, #20]
}
 800b6f2:	bf00      	nop
 800b6f4:	3714      	adds	r7, #20
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fc:	4770      	bx	lr
 800b6fe:	bf00      	nop
 800b700:	40010000 	.word	0x40010000
 800b704:	40000400 	.word	0x40000400
 800b708:	40000800 	.word	0x40000800
 800b70c:	40000c00 	.word	0x40000c00
 800b710:	40010400 	.word	0x40010400
 800b714:	40014000 	.word	0x40014000
 800b718:	40014400 	.word	0x40014400
 800b71c:	40014800 	.word	0x40014800

0800b720 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b720:	b480      	push	{r7}
 800b722:	b087      	sub	sp, #28
 800b724:	af00      	add	r7, sp, #0
 800b726:	60f8      	str	r0, [r7, #12]
 800b728:	60b9      	str	r1, [r7, #8]
 800b72a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	6a1b      	ldr	r3, [r3, #32]
 800b730:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	6a1b      	ldr	r3, [r3, #32]
 800b736:	f023 0201 	bic.w	r2, r3, #1
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	699b      	ldr	r3, [r3, #24]
 800b742:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b744:	693b      	ldr	r3, [r7, #16]
 800b746:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b74a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	011b      	lsls	r3, r3, #4
 800b750:	693a      	ldr	r2, [r7, #16]
 800b752:	4313      	orrs	r3, r2
 800b754:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b756:	697b      	ldr	r3, [r7, #20]
 800b758:	f023 030a 	bic.w	r3, r3, #10
 800b75c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b75e:	697a      	ldr	r2, [r7, #20]
 800b760:	68bb      	ldr	r3, [r7, #8]
 800b762:	4313      	orrs	r3, r2
 800b764:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	693a      	ldr	r2, [r7, #16]
 800b76a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	697a      	ldr	r2, [r7, #20]
 800b770:	621a      	str	r2, [r3, #32]
}
 800b772:	bf00      	nop
 800b774:	371c      	adds	r7, #28
 800b776:	46bd      	mov	sp, r7
 800b778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77c:	4770      	bx	lr

0800b77e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b77e:	b480      	push	{r7}
 800b780:	b087      	sub	sp, #28
 800b782:	af00      	add	r7, sp, #0
 800b784:	60f8      	str	r0, [r7, #12]
 800b786:	60b9      	str	r1, [r7, #8]
 800b788:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	6a1b      	ldr	r3, [r3, #32]
 800b78e:	f023 0210 	bic.w	r2, r3, #16
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	699b      	ldr	r3, [r3, #24]
 800b79a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	6a1b      	ldr	r3, [r3, #32]
 800b7a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b7a2:	697b      	ldr	r3, [r7, #20]
 800b7a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b7a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	031b      	lsls	r3, r3, #12
 800b7ae:	697a      	ldr	r2, [r7, #20]
 800b7b0:	4313      	orrs	r3, r2
 800b7b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b7b4:	693b      	ldr	r3, [r7, #16]
 800b7b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b7ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b7bc:	68bb      	ldr	r3, [r7, #8]
 800b7be:	011b      	lsls	r3, r3, #4
 800b7c0:	693a      	ldr	r2, [r7, #16]
 800b7c2:	4313      	orrs	r3, r2
 800b7c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	697a      	ldr	r2, [r7, #20]
 800b7ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	693a      	ldr	r2, [r7, #16]
 800b7d0:	621a      	str	r2, [r3, #32]
}
 800b7d2:	bf00      	nop
 800b7d4:	371c      	adds	r7, #28
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7dc:	4770      	bx	lr
	...

0800b7e0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b7e0:	b480      	push	{r7}
 800b7e2:	b085      	sub	sp, #20
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
 800b7e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	689b      	ldr	r3, [r3, #8]
 800b7ee:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b7f0:	68fa      	ldr	r2, [r7, #12]
 800b7f2:	4b09      	ldr	r3, [pc, #36]	; (800b818 <TIM_ITRx_SetConfig+0x38>)
 800b7f4:	4013      	ands	r3, r2
 800b7f6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b7f8:	683a      	ldr	r2, [r7, #0]
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	4313      	orrs	r3, r2
 800b7fe:	f043 0307 	orr.w	r3, r3, #7
 800b802:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	68fa      	ldr	r2, [r7, #12]
 800b808:	609a      	str	r2, [r3, #8]
}
 800b80a:	bf00      	nop
 800b80c:	3714      	adds	r7, #20
 800b80e:	46bd      	mov	sp, r7
 800b810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b814:	4770      	bx	lr
 800b816:	bf00      	nop
 800b818:	ffcfff8f 	.word	0xffcfff8f

0800b81c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b81c:	b480      	push	{r7}
 800b81e:	b087      	sub	sp, #28
 800b820:	af00      	add	r7, sp, #0
 800b822:	60f8      	str	r0, [r7, #12]
 800b824:	60b9      	str	r1, [r7, #8]
 800b826:	607a      	str	r2, [r7, #4]
 800b828:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	689b      	ldr	r3, [r3, #8]
 800b82e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b830:	697b      	ldr	r3, [r7, #20]
 800b832:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b836:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	021a      	lsls	r2, r3, #8
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	431a      	orrs	r2, r3
 800b840:	68bb      	ldr	r3, [r7, #8]
 800b842:	4313      	orrs	r3, r2
 800b844:	697a      	ldr	r2, [r7, #20]
 800b846:	4313      	orrs	r3, r2
 800b848:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	697a      	ldr	r2, [r7, #20]
 800b84e:	609a      	str	r2, [r3, #8]
}
 800b850:	bf00      	nop
 800b852:	371c      	adds	r7, #28
 800b854:	46bd      	mov	sp, r7
 800b856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85a:	4770      	bx	lr

0800b85c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b85c:	b480      	push	{r7}
 800b85e:	b085      	sub	sp, #20
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
 800b864:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b86c:	2b01      	cmp	r3, #1
 800b86e:	d101      	bne.n	800b874 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b870:	2302      	movs	r3, #2
 800b872:	e06d      	b.n	800b950 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	2201      	movs	r2, #1
 800b878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	2202      	movs	r2, #2
 800b880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	685b      	ldr	r3, [r3, #4]
 800b88a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	689b      	ldr	r3, [r3, #8]
 800b892:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	4a30      	ldr	r2, [pc, #192]	; (800b95c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b89a:	4293      	cmp	r3, r2
 800b89c:	d004      	beq.n	800b8a8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	4a2f      	ldr	r2, [pc, #188]	; (800b960 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b8a4:	4293      	cmp	r3, r2
 800b8a6:	d108      	bne.n	800b8ba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b8ae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b8b0:	683b      	ldr	r3, [r7, #0]
 800b8b2:	685b      	ldr	r3, [r3, #4]
 800b8b4:	68fa      	ldr	r2, [r7, #12]
 800b8b6:	4313      	orrs	r3, r2
 800b8b8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b8c0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b8c2:	683b      	ldr	r3, [r7, #0]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	68fa      	ldr	r2, [r7, #12]
 800b8c8:	4313      	orrs	r3, r2
 800b8ca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	68fa      	ldr	r2, [r7, #12]
 800b8d2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	4a20      	ldr	r2, [pc, #128]	; (800b95c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b8da:	4293      	cmp	r3, r2
 800b8dc:	d022      	beq.n	800b924 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8e6:	d01d      	beq.n	800b924 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	4a1d      	ldr	r2, [pc, #116]	; (800b964 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b8ee:	4293      	cmp	r3, r2
 800b8f0:	d018      	beq.n	800b924 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	4a1c      	ldr	r2, [pc, #112]	; (800b968 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b8f8:	4293      	cmp	r3, r2
 800b8fa:	d013      	beq.n	800b924 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	4a1a      	ldr	r2, [pc, #104]	; (800b96c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b902:	4293      	cmp	r3, r2
 800b904:	d00e      	beq.n	800b924 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	4a15      	ldr	r2, [pc, #84]	; (800b960 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b90c:	4293      	cmp	r3, r2
 800b90e:	d009      	beq.n	800b924 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	4a16      	ldr	r2, [pc, #88]	; (800b970 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b916:	4293      	cmp	r3, r2
 800b918:	d004      	beq.n	800b924 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	4a15      	ldr	r2, [pc, #84]	; (800b974 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b920:	4293      	cmp	r3, r2
 800b922:	d10c      	bne.n	800b93e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b924:	68bb      	ldr	r3, [r7, #8]
 800b926:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b92a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b92c:	683b      	ldr	r3, [r7, #0]
 800b92e:	689b      	ldr	r3, [r3, #8]
 800b930:	68ba      	ldr	r2, [r7, #8]
 800b932:	4313      	orrs	r3, r2
 800b934:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	68ba      	ldr	r2, [r7, #8]
 800b93c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	2201      	movs	r2, #1
 800b942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	2200      	movs	r2, #0
 800b94a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b94e:	2300      	movs	r3, #0
}
 800b950:	4618      	mov	r0, r3
 800b952:	3714      	adds	r7, #20
 800b954:	46bd      	mov	sp, r7
 800b956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95a:	4770      	bx	lr
 800b95c:	40010000 	.word	0x40010000
 800b960:	40010400 	.word	0x40010400
 800b964:	40000400 	.word	0x40000400
 800b968:	40000800 	.word	0x40000800
 800b96c:	40000c00 	.word	0x40000c00
 800b970:	40001800 	.word	0x40001800
 800b974:	40014000 	.word	0x40014000

0800b978 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b082      	sub	sp, #8
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d101      	bne.n	800b98a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b986:	2301      	movs	r3, #1
 800b988:	e042      	b.n	800ba10 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b990:	2b00      	cmp	r3, #0
 800b992:	d106      	bne.n	800b9a2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2200      	movs	r2, #0
 800b998:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b99c:	6878      	ldr	r0, [r7, #4]
 800b99e:	f7f6 ff13 	bl	80027c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	2224      	movs	r2, #36	; 0x24
 800b9a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	681a      	ldr	r2, [r3, #0]
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	f022 0201 	bic.w	r2, r2, #1
 800b9b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b9ba:	6878      	ldr	r0, [r7, #4]
 800b9bc:	f000 fce0 	bl	800c380 <UART_SetConfig>
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	2b01      	cmp	r3, #1
 800b9c4:	d101      	bne.n	800b9ca <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b9c6:	2301      	movs	r3, #1
 800b9c8:	e022      	b.n	800ba10 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d002      	beq.n	800b9d8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b9d2:	6878      	ldr	r0, [r7, #4]
 800b9d4:	f001 fa3c 	bl	800ce50 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	685a      	ldr	r2, [r3, #4]
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b9e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	689a      	ldr	r2, [r3, #8]
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b9f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	681a      	ldr	r2, [r3, #0]
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	f042 0201 	orr.w	r2, r2, #1
 800ba06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ba08:	6878      	ldr	r0, [r7, #4]
 800ba0a:	f001 fac3 	bl	800cf94 <UART_CheckIdleState>
 800ba0e:	4603      	mov	r3, r0
}
 800ba10:	4618      	mov	r0, r3
 800ba12:	3708      	adds	r7, #8
 800ba14:	46bd      	mov	sp, r7
 800ba16:	bd80      	pop	{r7, pc}

0800ba18 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b08a      	sub	sp, #40	; 0x28
 800ba1c:	af02      	add	r7, sp, #8
 800ba1e:	60f8      	str	r0, [r7, #12]
 800ba20:	60b9      	str	r1, [r7, #8]
 800ba22:	603b      	str	r3, [r7, #0]
 800ba24:	4613      	mov	r3, r2
 800ba26:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba2e:	2b20      	cmp	r3, #32
 800ba30:	d17b      	bne.n	800bb2a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800ba32:	68bb      	ldr	r3, [r7, #8]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d002      	beq.n	800ba3e <HAL_UART_Transmit+0x26>
 800ba38:	88fb      	ldrh	r3, [r7, #6]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d101      	bne.n	800ba42 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800ba3e:	2301      	movs	r3, #1
 800ba40:	e074      	b.n	800bb2c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	2200      	movs	r2, #0
 800ba46:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	2221      	movs	r2, #33	; 0x21
 800ba4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ba52:	f7f7 fab3 	bl	8002fbc <HAL_GetTick>
 800ba56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	88fa      	ldrh	r2, [r7, #6]
 800ba5c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	88fa      	ldrh	r2, [r7, #6]
 800ba64:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	689b      	ldr	r3, [r3, #8]
 800ba6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba70:	d108      	bne.n	800ba84 <HAL_UART_Transmit+0x6c>
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	691b      	ldr	r3, [r3, #16]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d104      	bne.n	800ba84 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ba7e:	68bb      	ldr	r3, [r7, #8]
 800ba80:	61bb      	str	r3, [r7, #24]
 800ba82:	e003      	b.n	800ba8c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800ba84:	68bb      	ldr	r3, [r7, #8]
 800ba86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ba88:	2300      	movs	r3, #0
 800ba8a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ba8c:	e030      	b.n	800baf0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ba8e:	683b      	ldr	r3, [r7, #0]
 800ba90:	9300      	str	r3, [sp, #0]
 800ba92:	697b      	ldr	r3, [r7, #20]
 800ba94:	2200      	movs	r2, #0
 800ba96:	2180      	movs	r1, #128	; 0x80
 800ba98:	68f8      	ldr	r0, [r7, #12]
 800ba9a:	f001 fb25 	bl	800d0e8 <UART_WaitOnFlagUntilTimeout>
 800ba9e:	4603      	mov	r3, r0
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d005      	beq.n	800bab0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	2220      	movs	r2, #32
 800baa8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800baac:	2303      	movs	r3, #3
 800baae:	e03d      	b.n	800bb2c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800bab0:	69fb      	ldr	r3, [r7, #28]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d10b      	bne.n	800bace <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bab6:	69bb      	ldr	r3, [r7, #24]
 800bab8:	881b      	ldrh	r3, [r3, #0]
 800baba:	461a      	mov	r2, r3
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bac4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800bac6:	69bb      	ldr	r3, [r7, #24]
 800bac8:	3302      	adds	r3, #2
 800baca:	61bb      	str	r3, [r7, #24]
 800bacc:	e007      	b.n	800bade <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800bace:	69fb      	ldr	r3, [r7, #28]
 800bad0:	781a      	ldrb	r2, [r3, #0]
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800bad8:	69fb      	ldr	r3, [r7, #28]
 800bada:	3301      	adds	r3, #1
 800badc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bae4:	b29b      	uxth	r3, r3
 800bae6:	3b01      	subs	r3, #1
 800bae8:	b29a      	uxth	r2, r3
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800baf6:	b29b      	uxth	r3, r3
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d1c8      	bne.n	800ba8e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	9300      	str	r3, [sp, #0]
 800bb00:	697b      	ldr	r3, [r7, #20]
 800bb02:	2200      	movs	r2, #0
 800bb04:	2140      	movs	r1, #64	; 0x40
 800bb06:	68f8      	ldr	r0, [r7, #12]
 800bb08:	f001 faee 	bl	800d0e8 <UART_WaitOnFlagUntilTimeout>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d005      	beq.n	800bb1e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	2220      	movs	r2, #32
 800bb16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800bb1a:	2303      	movs	r3, #3
 800bb1c:	e006      	b.n	800bb2c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	2220      	movs	r2, #32
 800bb22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800bb26:	2300      	movs	r3, #0
 800bb28:	e000      	b.n	800bb2c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800bb2a:	2302      	movs	r3, #2
  }
}
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	3720      	adds	r7, #32
 800bb30:	46bd      	mov	sp, r7
 800bb32:	bd80      	pop	{r7, pc}

0800bb34 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b08a      	sub	sp, #40	; 0x28
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	60f8      	str	r0, [r7, #12]
 800bb3c:	60b9      	str	r1, [r7, #8]
 800bb3e:	4613      	mov	r3, r2
 800bb40:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb48:	2b20      	cmp	r3, #32
 800bb4a:	d137      	bne.n	800bbbc <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800bb4c:	68bb      	ldr	r3, [r7, #8]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d002      	beq.n	800bb58 <HAL_UART_Receive_IT+0x24>
 800bb52:	88fb      	ldrh	r3, [r7, #6]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d101      	bne.n	800bb5c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800bb58:	2301      	movs	r3, #1
 800bb5a:	e030      	b.n	800bbbe <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	2200      	movs	r2, #0
 800bb60:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	4a18      	ldr	r2, [pc, #96]	; (800bbc8 <HAL_UART_Receive_IT+0x94>)
 800bb68:	4293      	cmp	r3, r2
 800bb6a:	d01f      	beq.n	800bbac <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	685b      	ldr	r3, [r3, #4]
 800bb72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d018      	beq.n	800bbac <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb80:	697b      	ldr	r3, [r7, #20]
 800bb82:	e853 3f00 	ldrex	r3, [r3]
 800bb86:	613b      	str	r3, [r7, #16]
   return(result);
 800bb88:	693b      	ldr	r3, [r7, #16]
 800bb8a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bb8e:	627b      	str	r3, [r7, #36]	; 0x24
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	461a      	mov	r2, r3
 800bb96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb98:	623b      	str	r3, [r7, #32]
 800bb9a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb9c:	69f9      	ldr	r1, [r7, #28]
 800bb9e:	6a3a      	ldr	r2, [r7, #32]
 800bba0:	e841 2300 	strex	r3, r2, [r1]
 800bba4:	61bb      	str	r3, [r7, #24]
   return(result);
 800bba6:	69bb      	ldr	r3, [r7, #24]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d1e6      	bne.n	800bb7a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800bbac:	88fb      	ldrh	r3, [r7, #6]
 800bbae:	461a      	mov	r2, r3
 800bbb0:	68b9      	ldr	r1, [r7, #8]
 800bbb2:	68f8      	ldr	r0, [r7, #12]
 800bbb4:	f001 fb00 	bl	800d1b8 <UART_Start_Receive_IT>
 800bbb8:	4603      	mov	r3, r0
 800bbba:	e000      	b.n	800bbbe <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800bbbc:	2302      	movs	r3, #2
  }
}
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	3728      	adds	r7, #40	; 0x28
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	bd80      	pop	{r7, pc}
 800bbc6:	bf00      	nop
 800bbc8:	58000c00 	.word	0x58000c00

0800bbcc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b0ba      	sub	sp, #232	; 0xe8
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	69db      	ldr	r3, [r3, #28]
 800bbda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	689b      	ldr	r3, [r3, #8]
 800bbee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800bbf2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800bbf6:	f640 030f 	movw	r3, #2063	; 0x80f
 800bbfa:	4013      	ands	r3, r2
 800bbfc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800bc00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d11b      	bne.n	800bc40 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bc08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc0c:	f003 0320 	and.w	r3, r3, #32
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d015      	beq.n	800bc40 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bc14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc18:	f003 0320 	and.w	r3, r3, #32
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d105      	bne.n	800bc2c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bc20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d009      	beq.n	800bc40 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	f000 8377 	beq.w	800c324 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc3a:	6878      	ldr	r0, [r7, #4]
 800bc3c:	4798      	blx	r3
      }
      return;
 800bc3e:	e371      	b.n	800c324 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800bc40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	f000 8123 	beq.w	800be90 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800bc4a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800bc4e:	4b8d      	ldr	r3, [pc, #564]	; (800be84 <HAL_UART_IRQHandler+0x2b8>)
 800bc50:	4013      	ands	r3, r2
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d106      	bne.n	800bc64 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800bc56:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800bc5a:	4b8b      	ldr	r3, [pc, #556]	; (800be88 <HAL_UART_IRQHandler+0x2bc>)
 800bc5c:	4013      	ands	r3, r2
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	f000 8116 	beq.w	800be90 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bc64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc68:	f003 0301 	and.w	r3, r3, #1
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d011      	beq.n	800bc94 <HAL_UART_IRQHandler+0xc8>
 800bc70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d00b      	beq.n	800bc94 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	2201      	movs	r2, #1
 800bc82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc8a:	f043 0201 	orr.w	r2, r3, #1
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bc94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc98:	f003 0302 	and.w	r3, r3, #2
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d011      	beq.n	800bcc4 <HAL_UART_IRQHandler+0xf8>
 800bca0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bca4:	f003 0301 	and.w	r3, r3, #1
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d00b      	beq.n	800bcc4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	2202      	movs	r2, #2
 800bcb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bcba:	f043 0204 	orr.w	r2, r3, #4
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bcc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bcc8:	f003 0304 	and.w	r3, r3, #4
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d011      	beq.n	800bcf4 <HAL_UART_IRQHandler+0x128>
 800bcd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bcd4:	f003 0301 	and.w	r3, r3, #1
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d00b      	beq.n	800bcf4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	2204      	movs	r2, #4
 800bce2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bcea:	f043 0202 	orr.w	r2, r3, #2
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bcf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bcf8:	f003 0308 	and.w	r3, r3, #8
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d017      	beq.n	800bd30 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bd00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd04:	f003 0320 	and.w	r3, r3, #32
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d105      	bne.n	800bd18 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800bd0c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800bd10:	4b5c      	ldr	r3, [pc, #368]	; (800be84 <HAL_UART_IRQHandler+0x2b8>)
 800bd12:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d00b      	beq.n	800bd30 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	2208      	movs	r2, #8
 800bd1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd26:	f043 0208 	orr.w	r2, r3, #8
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bd30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d012      	beq.n	800bd62 <HAL_UART_IRQHandler+0x196>
 800bd3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd40:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d00c      	beq.n	800bd62 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bd50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd58:	f043 0220 	orr.w	r2, r3, #32
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	f000 82dd 	beq.w	800c328 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bd6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd72:	f003 0320 	and.w	r3, r3, #32
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d013      	beq.n	800bda2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bd7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd7e:	f003 0320 	and.w	r3, r3, #32
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d105      	bne.n	800bd92 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bd86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bd8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d007      	beq.n	800bda2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d003      	beq.n	800bda2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd9e:	6878      	ldr	r0, [r7, #4]
 800bda0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bda8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	689b      	ldr	r3, [r3, #8]
 800bdb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bdb6:	2b40      	cmp	r3, #64	; 0x40
 800bdb8:	d005      	beq.n	800bdc6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bdba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bdbe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d054      	beq.n	800be70 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bdc6:	6878      	ldr	r0, [r7, #4]
 800bdc8:	f001 fb18 	bl	800d3fc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	689b      	ldr	r3, [r3, #8]
 800bdd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bdd6:	2b40      	cmp	r3, #64	; 0x40
 800bdd8:	d146      	bne.n	800be68 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	3308      	adds	r3, #8
 800bde0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bde4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bde8:	e853 3f00 	ldrex	r3, [r3]
 800bdec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bdf0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bdf4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bdf8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	3308      	adds	r3, #8
 800be02:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800be06:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800be0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be0e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800be12:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800be16:	e841 2300 	strex	r3, r2, [r1]
 800be1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800be1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800be22:	2b00      	cmp	r3, #0
 800be24:	d1d9      	bne.n	800bdda <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d017      	beq.n	800be60 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800be36:	4a15      	ldr	r2, [pc, #84]	; (800be8c <HAL_UART_IRQHandler+0x2c0>)
 800be38:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800be40:	4618      	mov	r0, r3
 800be42:	f7f8 fddd 	bl	8004a00 <HAL_DMA_Abort_IT>
 800be46:	4603      	mov	r3, r0
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d019      	beq.n	800be80 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800be52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be54:	687a      	ldr	r2, [r7, #4]
 800be56:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800be5a:	4610      	mov	r0, r2
 800be5c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be5e:	e00f      	b.n	800be80 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800be60:	6878      	ldr	r0, [r7, #4]
 800be62:	f000 fa77 	bl	800c354 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be66:	e00b      	b.n	800be80 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800be68:	6878      	ldr	r0, [r7, #4]
 800be6a:	f000 fa73 	bl	800c354 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be6e:	e007      	b.n	800be80 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800be70:	6878      	ldr	r0, [r7, #4]
 800be72:	f000 fa6f 	bl	800c354 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	2200      	movs	r2, #0
 800be7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800be7e:	e253      	b.n	800c328 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be80:	bf00      	nop
    return;
 800be82:	e251      	b.n	800c328 <HAL_UART_IRQHandler+0x75c>
 800be84:	10000001 	.word	0x10000001
 800be88:	04000120 	.word	0x04000120
 800be8c:	0800d4c9 	.word	0x0800d4c9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be94:	2b01      	cmp	r3, #1
 800be96:	f040 81e7 	bne.w	800c268 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800be9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be9e:	f003 0310 	and.w	r3, r3, #16
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	f000 81e0 	beq.w	800c268 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800bea8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800beac:	f003 0310 	and.w	r3, r3, #16
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	f000 81d9 	beq.w	800c268 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	2210      	movs	r2, #16
 800bebc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	689b      	ldr	r3, [r3, #8]
 800bec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bec8:	2b40      	cmp	r3, #64	; 0x40
 800beca:	f040 8151 	bne.w	800c170 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	4a96      	ldr	r2, [pc, #600]	; (800c130 <HAL_UART_IRQHandler+0x564>)
 800bed8:	4293      	cmp	r3, r2
 800beda:	d068      	beq.n	800bfae <HAL_UART_IRQHandler+0x3e2>
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	4a93      	ldr	r2, [pc, #588]	; (800c134 <HAL_UART_IRQHandler+0x568>)
 800bee6:	4293      	cmp	r3, r2
 800bee8:	d061      	beq.n	800bfae <HAL_UART_IRQHandler+0x3e2>
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	4a91      	ldr	r2, [pc, #580]	; (800c138 <HAL_UART_IRQHandler+0x56c>)
 800bef4:	4293      	cmp	r3, r2
 800bef6:	d05a      	beq.n	800bfae <HAL_UART_IRQHandler+0x3e2>
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	4a8e      	ldr	r2, [pc, #568]	; (800c13c <HAL_UART_IRQHandler+0x570>)
 800bf02:	4293      	cmp	r3, r2
 800bf04:	d053      	beq.n	800bfae <HAL_UART_IRQHandler+0x3e2>
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	4a8c      	ldr	r2, [pc, #560]	; (800c140 <HAL_UART_IRQHandler+0x574>)
 800bf10:	4293      	cmp	r3, r2
 800bf12:	d04c      	beq.n	800bfae <HAL_UART_IRQHandler+0x3e2>
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	4a89      	ldr	r2, [pc, #548]	; (800c144 <HAL_UART_IRQHandler+0x578>)
 800bf1e:	4293      	cmp	r3, r2
 800bf20:	d045      	beq.n	800bfae <HAL_UART_IRQHandler+0x3e2>
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	4a87      	ldr	r2, [pc, #540]	; (800c148 <HAL_UART_IRQHandler+0x57c>)
 800bf2c:	4293      	cmp	r3, r2
 800bf2e:	d03e      	beq.n	800bfae <HAL_UART_IRQHandler+0x3e2>
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	4a84      	ldr	r2, [pc, #528]	; (800c14c <HAL_UART_IRQHandler+0x580>)
 800bf3a:	4293      	cmp	r3, r2
 800bf3c:	d037      	beq.n	800bfae <HAL_UART_IRQHandler+0x3e2>
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	4a82      	ldr	r2, [pc, #520]	; (800c150 <HAL_UART_IRQHandler+0x584>)
 800bf48:	4293      	cmp	r3, r2
 800bf4a:	d030      	beq.n	800bfae <HAL_UART_IRQHandler+0x3e2>
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	4a7f      	ldr	r2, [pc, #508]	; (800c154 <HAL_UART_IRQHandler+0x588>)
 800bf56:	4293      	cmp	r3, r2
 800bf58:	d029      	beq.n	800bfae <HAL_UART_IRQHandler+0x3e2>
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	4a7d      	ldr	r2, [pc, #500]	; (800c158 <HAL_UART_IRQHandler+0x58c>)
 800bf64:	4293      	cmp	r3, r2
 800bf66:	d022      	beq.n	800bfae <HAL_UART_IRQHandler+0x3e2>
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	4a7a      	ldr	r2, [pc, #488]	; (800c15c <HAL_UART_IRQHandler+0x590>)
 800bf72:	4293      	cmp	r3, r2
 800bf74:	d01b      	beq.n	800bfae <HAL_UART_IRQHandler+0x3e2>
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	4a78      	ldr	r2, [pc, #480]	; (800c160 <HAL_UART_IRQHandler+0x594>)
 800bf80:	4293      	cmp	r3, r2
 800bf82:	d014      	beq.n	800bfae <HAL_UART_IRQHandler+0x3e2>
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	4a75      	ldr	r2, [pc, #468]	; (800c164 <HAL_UART_IRQHandler+0x598>)
 800bf8e:	4293      	cmp	r3, r2
 800bf90:	d00d      	beq.n	800bfae <HAL_UART_IRQHandler+0x3e2>
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	4a73      	ldr	r2, [pc, #460]	; (800c168 <HAL_UART_IRQHandler+0x59c>)
 800bf9c:	4293      	cmp	r3, r2
 800bf9e:	d006      	beq.n	800bfae <HAL_UART_IRQHandler+0x3e2>
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	4a70      	ldr	r2, [pc, #448]	; (800c16c <HAL_UART_IRQHandler+0x5a0>)
 800bfaa:	4293      	cmp	r3, r2
 800bfac:	d106      	bne.n	800bfbc <HAL_UART_IRQHandler+0x3f0>
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	685b      	ldr	r3, [r3, #4]
 800bfb8:	b29b      	uxth	r3, r3
 800bfba:	e005      	b.n	800bfc8 <HAL_UART_IRQHandler+0x3fc>
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	685b      	ldr	r3, [r3, #4]
 800bfc6:	b29b      	uxth	r3, r3
 800bfc8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bfcc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	f000 81ab 	beq.w	800c32c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bfdc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bfe0:	429a      	cmp	r2, r3
 800bfe2:	f080 81a3 	bcs.w	800c32c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bfec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bff6:	69db      	ldr	r3, [r3, #28]
 800bff8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bffc:	f000 8087 	beq.w	800c10e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c008:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c00c:	e853 3f00 	ldrex	r3, [r3]
 800c010:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c014:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c018:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c01c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	461a      	mov	r2, r3
 800c026:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c02a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c02e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c032:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c036:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c03a:	e841 2300 	strex	r3, r2, [r1]
 800c03e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c042:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c046:	2b00      	cmp	r3, #0
 800c048:	d1da      	bne.n	800c000 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	3308      	adds	r3, #8
 800c050:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c052:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c054:	e853 3f00 	ldrex	r3, [r3]
 800c058:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c05a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c05c:	f023 0301 	bic.w	r3, r3, #1
 800c060:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	3308      	adds	r3, #8
 800c06a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c06e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c072:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c074:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c076:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c07a:	e841 2300 	strex	r3, r2, [r1]
 800c07e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c080:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c082:	2b00      	cmp	r3, #0
 800c084:	d1e1      	bne.n	800c04a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	3308      	adds	r3, #8
 800c08c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c08e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c090:	e853 3f00 	ldrex	r3, [r3]
 800c094:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c096:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c098:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c09c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	3308      	adds	r3, #8
 800c0a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c0aa:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c0ac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0ae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c0b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c0b2:	e841 2300 	strex	r3, r2, [r1]
 800c0b6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c0b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d1e3      	bne.n	800c086 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	2220      	movs	r2, #32
 800c0c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	2200      	movs	r2, #0
 800c0ca:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c0d4:	e853 3f00 	ldrex	r3, [r3]
 800c0d8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c0da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c0dc:	f023 0310 	bic.w	r3, r3, #16
 800c0e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	461a      	mov	r2, r3
 800c0ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c0ee:	65bb      	str	r3, [r7, #88]	; 0x58
 800c0f0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0f2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c0f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c0f6:	e841 2300 	strex	r3, r2, [r1]
 800c0fa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c0fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d1e4      	bne.n	800c0cc <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c108:	4618      	mov	r0, r3
 800c10a:	f7f8 f95b 	bl	80043c4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	2202      	movs	r2, #2
 800c112:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c120:	b29b      	uxth	r3, r3
 800c122:	1ad3      	subs	r3, r2, r3
 800c124:	b29b      	uxth	r3, r3
 800c126:	4619      	mov	r1, r3
 800c128:	6878      	ldr	r0, [r7, #4]
 800c12a:	f000 f91d 	bl	800c368 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c12e:	e0fd      	b.n	800c32c <HAL_UART_IRQHandler+0x760>
 800c130:	40020010 	.word	0x40020010
 800c134:	40020028 	.word	0x40020028
 800c138:	40020040 	.word	0x40020040
 800c13c:	40020058 	.word	0x40020058
 800c140:	40020070 	.word	0x40020070
 800c144:	40020088 	.word	0x40020088
 800c148:	400200a0 	.word	0x400200a0
 800c14c:	400200b8 	.word	0x400200b8
 800c150:	40020410 	.word	0x40020410
 800c154:	40020428 	.word	0x40020428
 800c158:	40020440 	.word	0x40020440
 800c15c:	40020458 	.word	0x40020458
 800c160:	40020470 	.word	0x40020470
 800c164:	40020488 	.word	0x40020488
 800c168:	400204a0 	.word	0x400204a0
 800c16c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c17c:	b29b      	uxth	r3, r3
 800c17e:	1ad3      	subs	r3, r2, r3
 800c180:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c18a:	b29b      	uxth	r3, r3
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	f000 80cf 	beq.w	800c330 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800c192:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c196:	2b00      	cmp	r3, #0
 800c198:	f000 80ca 	beq.w	800c330 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1a4:	e853 3f00 	ldrex	r3, [r3]
 800c1a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c1aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c1b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	461a      	mov	r2, r3
 800c1ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c1be:	647b      	str	r3, [r7, #68]	; 0x44
 800c1c0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c1c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c1c6:	e841 2300 	strex	r3, r2, [r1]
 800c1ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c1cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d1e4      	bne.n	800c19c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	3308      	adds	r3, #8
 800c1d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1dc:	e853 3f00 	ldrex	r3, [r3]
 800c1e0:	623b      	str	r3, [r7, #32]
   return(result);
 800c1e2:	6a3a      	ldr	r2, [r7, #32]
 800c1e4:	4b55      	ldr	r3, [pc, #340]	; (800c33c <HAL_UART_IRQHandler+0x770>)
 800c1e6:	4013      	ands	r3, r2
 800c1e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	3308      	adds	r3, #8
 800c1f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c1f6:	633a      	str	r2, [r7, #48]	; 0x30
 800c1f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c1fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c1fe:	e841 2300 	strex	r3, r2, [r1]
 800c202:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c206:	2b00      	cmp	r3, #0
 800c208:	d1e3      	bne.n	800c1d2 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	2220      	movs	r2, #32
 800c20e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	2200      	movs	r2, #0
 800c216:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	2200      	movs	r2, #0
 800c21c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c224:	693b      	ldr	r3, [r7, #16]
 800c226:	e853 3f00 	ldrex	r3, [r3]
 800c22a:	60fb      	str	r3, [r7, #12]
   return(result);
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	f023 0310 	bic.w	r3, r3, #16
 800c232:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	461a      	mov	r2, r3
 800c23c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c240:	61fb      	str	r3, [r7, #28]
 800c242:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c244:	69b9      	ldr	r1, [r7, #24]
 800c246:	69fa      	ldr	r2, [r7, #28]
 800c248:	e841 2300 	strex	r3, r2, [r1]
 800c24c:	617b      	str	r3, [r7, #20]
   return(result);
 800c24e:	697b      	ldr	r3, [r7, #20]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d1e4      	bne.n	800c21e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2202      	movs	r2, #2
 800c258:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c25a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c25e:	4619      	mov	r1, r3
 800c260:	6878      	ldr	r0, [r7, #4]
 800c262:	f000 f881 	bl	800c368 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c266:	e063      	b.n	800c330 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c26c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c270:	2b00      	cmp	r3, #0
 800c272:	d00e      	beq.n	800c292 <HAL_UART_IRQHandler+0x6c6>
 800c274:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c278:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d008      	beq.n	800c292 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c288:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c28a:	6878      	ldr	r0, [r7, #4]
 800c28c:	f001 fe7a 	bl	800df84 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c290:	e051      	b.n	800c336 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d014      	beq.n	800c2c8 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c29e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c2a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d105      	bne.n	800c2b6 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c2aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c2ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d008      	beq.n	800c2c8 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d03a      	beq.n	800c334 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c2c2:	6878      	ldr	r0, [r7, #4]
 800c2c4:	4798      	blx	r3
    }
    return;
 800c2c6:	e035      	b.n	800c334 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c2c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c2cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d009      	beq.n	800c2e8 <HAL_UART_IRQHandler+0x71c>
 800c2d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c2d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d003      	beq.n	800c2e8 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800c2e0:	6878      	ldr	r0, [r7, #4]
 800c2e2:	f001 f907 	bl	800d4f4 <UART_EndTransmit_IT>
    return;
 800c2e6:	e026      	b.n	800c336 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c2e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c2ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d009      	beq.n	800c308 <HAL_UART_IRQHandler+0x73c>
 800c2f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c2f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d003      	beq.n	800c308 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c300:	6878      	ldr	r0, [r7, #4]
 800c302:	f001 fe53 	bl	800dfac <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c306:	e016      	b.n	800c336 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c308:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c30c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c310:	2b00      	cmp	r3, #0
 800c312:	d010      	beq.n	800c336 <HAL_UART_IRQHandler+0x76a>
 800c314:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c318:	2b00      	cmp	r3, #0
 800c31a:	da0c      	bge.n	800c336 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c31c:	6878      	ldr	r0, [r7, #4]
 800c31e:	f001 fe3b 	bl	800df98 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c322:	e008      	b.n	800c336 <HAL_UART_IRQHandler+0x76a>
      return;
 800c324:	bf00      	nop
 800c326:	e006      	b.n	800c336 <HAL_UART_IRQHandler+0x76a>
    return;
 800c328:	bf00      	nop
 800c32a:	e004      	b.n	800c336 <HAL_UART_IRQHandler+0x76a>
      return;
 800c32c:	bf00      	nop
 800c32e:	e002      	b.n	800c336 <HAL_UART_IRQHandler+0x76a>
      return;
 800c330:	bf00      	nop
 800c332:	e000      	b.n	800c336 <HAL_UART_IRQHandler+0x76a>
    return;
 800c334:	bf00      	nop
  }
}
 800c336:	37e8      	adds	r7, #232	; 0xe8
 800c338:	46bd      	mov	sp, r7
 800c33a:	bd80      	pop	{r7, pc}
 800c33c:	effffffe 	.word	0xeffffffe

0800c340 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c340:	b480      	push	{r7}
 800c342:	b083      	sub	sp, #12
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c348:	bf00      	nop
 800c34a:	370c      	adds	r7, #12
 800c34c:	46bd      	mov	sp, r7
 800c34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c352:	4770      	bx	lr

0800c354 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c354:	b480      	push	{r7}
 800c356:	b083      	sub	sp, #12
 800c358:	af00      	add	r7, sp, #0
 800c35a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c35c:	bf00      	nop
 800c35e:	370c      	adds	r7, #12
 800c360:	46bd      	mov	sp, r7
 800c362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c366:	4770      	bx	lr

0800c368 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c368:	b480      	push	{r7}
 800c36a:	b083      	sub	sp, #12
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
 800c370:	460b      	mov	r3, r1
 800c372:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c374:	bf00      	nop
 800c376:	370c      	adds	r7, #12
 800c378:	46bd      	mov	sp, r7
 800c37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37e:	4770      	bx	lr

0800c380 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c380:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c384:	b092      	sub	sp, #72	; 0x48
 800c386:	af00      	add	r7, sp, #0
 800c388:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c38a:	2300      	movs	r3, #0
 800c38c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c390:	697b      	ldr	r3, [r7, #20]
 800c392:	689a      	ldr	r2, [r3, #8]
 800c394:	697b      	ldr	r3, [r7, #20]
 800c396:	691b      	ldr	r3, [r3, #16]
 800c398:	431a      	orrs	r2, r3
 800c39a:	697b      	ldr	r3, [r7, #20]
 800c39c:	695b      	ldr	r3, [r3, #20]
 800c39e:	431a      	orrs	r2, r3
 800c3a0:	697b      	ldr	r3, [r7, #20]
 800c3a2:	69db      	ldr	r3, [r3, #28]
 800c3a4:	4313      	orrs	r3, r2
 800c3a6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c3a8:	697b      	ldr	r3, [r7, #20]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	681a      	ldr	r2, [r3, #0]
 800c3ae:	4bbe      	ldr	r3, [pc, #760]	; (800c6a8 <UART_SetConfig+0x328>)
 800c3b0:	4013      	ands	r3, r2
 800c3b2:	697a      	ldr	r2, [r7, #20]
 800c3b4:	6812      	ldr	r2, [r2, #0]
 800c3b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c3b8:	430b      	orrs	r3, r1
 800c3ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c3bc:	697b      	ldr	r3, [r7, #20]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	685b      	ldr	r3, [r3, #4]
 800c3c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c3c6:	697b      	ldr	r3, [r7, #20]
 800c3c8:	68da      	ldr	r2, [r3, #12]
 800c3ca:	697b      	ldr	r3, [r7, #20]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	430a      	orrs	r2, r1
 800c3d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c3d2:	697b      	ldr	r3, [r7, #20]
 800c3d4:	699b      	ldr	r3, [r3, #24]
 800c3d6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c3d8:	697b      	ldr	r3, [r7, #20]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	4ab3      	ldr	r2, [pc, #716]	; (800c6ac <UART_SetConfig+0x32c>)
 800c3de:	4293      	cmp	r3, r2
 800c3e0:	d004      	beq.n	800c3ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c3e2:	697b      	ldr	r3, [r7, #20]
 800c3e4:	6a1b      	ldr	r3, [r3, #32]
 800c3e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c3e8:	4313      	orrs	r3, r2
 800c3ea:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c3ec:	697b      	ldr	r3, [r7, #20]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	689a      	ldr	r2, [r3, #8]
 800c3f2:	4baf      	ldr	r3, [pc, #700]	; (800c6b0 <UART_SetConfig+0x330>)
 800c3f4:	4013      	ands	r3, r2
 800c3f6:	697a      	ldr	r2, [r7, #20]
 800c3f8:	6812      	ldr	r2, [r2, #0]
 800c3fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c3fc:	430b      	orrs	r3, r1
 800c3fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c400:	697b      	ldr	r3, [r7, #20]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c406:	f023 010f 	bic.w	r1, r3, #15
 800c40a:	697b      	ldr	r3, [r7, #20]
 800c40c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c40e:	697b      	ldr	r3, [r7, #20]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	430a      	orrs	r2, r1
 800c414:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c416:	697b      	ldr	r3, [r7, #20]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	4aa6      	ldr	r2, [pc, #664]	; (800c6b4 <UART_SetConfig+0x334>)
 800c41c:	4293      	cmp	r3, r2
 800c41e:	d177      	bne.n	800c510 <UART_SetConfig+0x190>
 800c420:	4ba5      	ldr	r3, [pc, #660]	; (800c6b8 <UART_SetConfig+0x338>)
 800c422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c424:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c428:	2b28      	cmp	r3, #40	; 0x28
 800c42a:	d86d      	bhi.n	800c508 <UART_SetConfig+0x188>
 800c42c:	a201      	add	r2, pc, #4	; (adr r2, 800c434 <UART_SetConfig+0xb4>)
 800c42e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c432:	bf00      	nop
 800c434:	0800c4d9 	.word	0x0800c4d9
 800c438:	0800c509 	.word	0x0800c509
 800c43c:	0800c509 	.word	0x0800c509
 800c440:	0800c509 	.word	0x0800c509
 800c444:	0800c509 	.word	0x0800c509
 800c448:	0800c509 	.word	0x0800c509
 800c44c:	0800c509 	.word	0x0800c509
 800c450:	0800c509 	.word	0x0800c509
 800c454:	0800c4e1 	.word	0x0800c4e1
 800c458:	0800c509 	.word	0x0800c509
 800c45c:	0800c509 	.word	0x0800c509
 800c460:	0800c509 	.word	0x0800c509
 800c464:	0800c509 	.word	0x0800c509
 800c468:	0800c509 	.word	0x0800c509
 800c46c:	0800c509 	.word	0x0800c509
 800c470:	0800c509 	.word	0x0800c509
 800c474:	0800c4e9 	.word	0x0800c4e9
 800c478:	0800c509 	.word	0x0800c509
 800c47c:	0800c509 	.word	0x0800c509
 800c480:	0800c509 	.word	0x0800c509
 800c484:	0800c509 	.word	0x0800c509
 800c488:	0800c509 	.word	0x0800c509
 800c48c:	0800c509 	.word	0x0800c509
 800c490:	0800c509 	.word	0x0800c509
 800c494:	0800c4f1 	.word	0x0800c4f1
 800c498:	0800c509 	.word	0x0800c509
 800c49c:	0800c509 	.word	0x0800c509
 800c4a0:	0800c509 	.word	0x0800c509
 800c4a4:	0800c509 	.word	0x0800c509
 800c4a8:	0800c509 	.word	0x0800c509
 800c4ac:	0800c509 	.word	0x0800c509
 800c4b0:	0800c509 	.word	0x0800c509
 800c4b4:	0800c4f9 	.word	0x0800c4f9
 800c4b8:	0800c509 	.word	0x0800c509
 800c4bc:	0800c509 	.word	0x0800c509
 800c4c0:	0800c509 	.word	0x0800c509
 800c4c4:	0800c509 	.word	0x0800c509
 800c4c8:	0800c509 	.word	0x0800c509
 800c4cc:	0800c509 	.word	0x0800c509
 800c4d0:	0800c509 	.word	0x0800c509
 800c4d4:	0800c501 	.word	0x0800c501
 800c4d8:	2301      	movs	r3, #1
 800c4da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4de:	e222      	b.n	800c926 <UART_SetConfig+0x5a6>
 800c4e0:	2304      	movs	r3, #4
 800c4e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4e6:	e21e      	b.n	800c926 <UART_SetConfig+0x5a6>
 800c4e8:	2308      	movs	r3, #8
 800c4ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4ee:	e21a      	b.n	800c926 <UART_SetConfig+0x5a6>
 800c4f0:	2310      	movs	r3, #16
 800c4f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4f6:	e216      	b.n	800c926 <UART_SetConfig+0x5a6>
 800c4f8:	2320      	movs	r3, #32
 800c4fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4fe:	e212      	b.n	800c926 <UART_SetConfig+0x5a6>
 800c500:	2340      	movs	r3, #64	; 0x40
 800c502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c506:	e20e      	b.n	800c926 <UART_SetConfig+0x5a6>
 800c508:	2380      	movs	r3, #128	; 0x80
 800c50a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c50e:	e20a      	b.n	800c926 <UART_SetConfig+0x5a6>
 800c510:	697b      	ldr	r3, [r7, #20]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	4a69      	ldr	r2, [pc, #420]	; (800c6bc <UART_SetConfig+0x33c>)
 800c516:	4293      	cmp	r3, r2
 800c518:	d130      	bne.n	800c57c <UART_SetConfig+0x1fc>
 800c51a:	4b67      	ldr	r3, [pc, #412]	; (800c6b8 <UART_SetConfig+0x338>)
 800c51c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c51e:	f003 0307 	and.w	r3, r3, #7
 800c522:	2b05      	cmp	r3, #5
 800c524:	d826      	bhi.n	800c574 <UART_SetConfig+0x1f4>
 800c526:	a201      	add	r2, pc, #4	; (adr r2, 800c52c <UART_SetConfig+0x1ac>)
 800c528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c52c:	0800c545 	.word	0x0800c545
 800c530:	0800c54d 	.word	0x0800c54d
 800c534:	0800c555 	.word	0x0800c555
 800c538:	0800c55d 	.word	0x0800c55d
 800c53c:	0800c565 	.word	0x0800c565
 800c540:	0800c56d 	.word	0x0800c56d
 800c544:	2300      	movs	r3, #0
 800c546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c54a:	e1ec      	b.n	800c926 <UART_SetConfig+0x5a6>
 800c54c:	2304      	movs	r3, #4
 800c54e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c552:	e1e8      	b.n	800c926 <UART_SetConfig+0x5a6>
 800c554:	2308      	movs	r3, #8
 800c556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c55a:	e1e4      	b.n	800c926 <UART_SetConfig+0x5a6>
 800c55c:	2310      	movs	r3, #16
 800c55e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c562:	e1e0      	b.n	800c926 <UART_SetConfig+0x5a6>
 800c564:	2320      	movs	r3, #32
 800c566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c56a:	e1dc      	b.n	800c926 <UART_SetConfig+0x5a6>
 800c56c:	2340      	movs	r3, #64	; 0x40
 800c56e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c572:	e1d8      	b.n	800c926 <UART_SetConfig+0x5a6>
 800c574:	2380      	movs	r3, #128	; 0x80
 800c576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c57a:	e1d4      	b.n	800c926 <UART_SetConfig+0x5a6>
 800c57c:	697b      	ldr	r3, [r7, #20]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	4a4f      	ldr	r2, [pc, #316]	; (800c6c0 <UART_SetConfig+0x340>)
 800c582:	4293      	cmp	r3, r2
 800c584:	d130      	bne.n	800c5e8 <UART_SetConfig+0x268>
 800c586:	4b4c      	ldr	r3, [pc, #304]	; (800c6b8 <UART_SetConfig+0x338>)
 800c588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c58a:	f003 0307 	and.w	r3, r3, #7
 800c58e:	2b05      	cmp	r3, #5
 800c590:	d826      	bhi.n	800c5e0 <UART_SetConfig+0x260>
 800c592:	a201      	add	r2, pc, #4	; (adr r2, 800c598 <UART_SetConfig+0x218>)
 800c594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c598:	0800c5b1 	.word	0x0800c5b1
 800c59c:	0800c5b9 	.word	0x0800c5b9
 800c5a0:	0800c5c1 	.word	0x0800c5c1
 800c5a4:	0800c5c9 	.word	0x0800c5c9
 800c5a8:	0800c5d1 	.word	0x0800c5d1
 800c5ac:	0800c5d9 	.word	0x0800c5d9
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5b6:	e1b6      	b.n	800c926 <UART_SetConfig+0x5a6>
 800c5b8:	2304      	movs	r3, #4
 800c5ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5be:	e1b2      	b.n	800c926 <UART_SetConfig+0x5a6>
 800c5c0:	2308      	movs	r3, #8
 800c5c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5c6:	e1ae      	b.n	800c926 <UART_SetConfig+0x5a6>
 800c5c8:	2310      	movs	r3, #16
 800c5ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5ce:	e1aa      	b.n	800c926 <UART_SetConfig+0x5a6>
 800c5d0:	2320      	movs	r3, #32
 800c5d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5d6:	e1a6      	b.n	800c926 <UART_SetConfig+0x5a6>
 800c5d8:	2340      	movs	r3, #64	; 0x40
 800c5da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5de:	e1a2      	b.n	800c926 <UART_SetConfig+0x5a6>
 800c5e0:	2380      	movs	r3, #128	; 0x80
 800c5e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5e6:	e19e      	b.n	800c926 <UART_SetConfig+0x5a6>
 800c5e8:	697b      	ldr	r3, [r7, #20]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	4a35      	ldr	r2, [pc, #212]	; (800c6c4 <UART_SetConfig+0x344>)
 800c5ee:	4293      	cmp	r3, r2
 800c5f0:	d130      	bne.n	800c654 <UART_SetConfig+0x2d4>
 800c5f2:	4b31      	ldr	r3, [pc, #196]	; (800c6b8 <UART_SetConfig+0x338>)
 800c5f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5f6:	f003 0307 	and.w	r3, r3, #7
 800c5fa:	2b05      	cmp	r3, #5
 800c5fc:	d826      	bhi.n	800c64c <UART_SetConfig+0x2cc>
 800c5fe:	a201      	add	r2, pc, #4	; (adr r2, 800c604 <UART_SetConfig+0x284>)
 800c600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c604:	0800c61d 	.word	0x0800c61d
 800c608:	0800c625 	.word	0x0800c625
 800c60c:	0800c62d 	.word	0x0800c62d
 800c610:	0800c635 	.word	0x0800c635
 800c614:	0800c63d 	.word	0x0800c63d
 800c618:	0800c645 	.word	0x0800c645
 800c61c:	2300      	movs	r3, #0
 800c61e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c622:	e180      	b.n	800c926 <UART_SetConfig+0x5a6>
 800c624:	2304      	movs	r3, #4
 800c626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c62a:	e17c      	b.n	800c926 <UART_SetConfig+0x5a6>
 800c62c:	2308      	movs	r3, #8
 800c62e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c632:	e178      	b.n	800c926 <UART_SetConfig+0x5a6>
 800c634:	2310      	movs	r3, #16
 800c636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c63a:	e174      	b.n	800c926 <UART_SetConfig+0x5a6>
 800c63c:	2320      	movs	r3, #32
 800c63e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c642:	e170      	b.n	800c926 <UART_SetConfig+0x5a6>
 800c644:	2340      	movs	r3, #64	; 0x40
 800c646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c64a:	e16c      	b.n	800c926 <UART_SetConfig+0x5a6>
 800c64c:	2380      	movs	r3, #128	; 0x80
 800c64e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c652:	e168      	b.n	800c926 <UART_SetConfig+0x5a6>
 800c654:	697b      	ldr	r3, [r7, #20]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	4a1b      	ldr	r2, [pc, #108]	; (800c6c8 <UART_SetConfig+0x348>)
 800c65a:	4293      	cmp	r3, r2
 800c65c:	d142      	bne.n	800c6e4 <UART_SetConfig+0x364>
 800c65e:	4b16      	ldr	r3, [pc, #88]	; (800c6b8 <UART_SetConfig+0x338>)
 800c660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c662:	f003 0307 	and.w	r3, r3, #7
 800c666:	2b05      	cmp	r3, #5
 800c668:	d838      	bhi.n	800c6dc <UART_SetConfig+0x35c>
 800c66a:	a201      	add	r2, pc, #4	; (adr r2, 800c670 <UART_SetConfig+0x2f0>)
 800c66c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c670:	0800c689 	.word	0x0800c689
 800c674:	0800c691 	.word	0x0800c691
 800c678:	0800c699 	.word	0x0800c699
 800c67c:	0800c6a1 	.word	0x0800c6a1
 800c680:	0800c6cd 	.word	0x0800c6cd
 800c684:	0800c6d5 	.word	0x0800c6d5
 800c688:	2300      	movs	r3, #0
 800c68a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c68e:	e14a      	b.n	800c926 <UART_SetConfig+0x5a6>
 800c690:	2304      	movs	r3, #4
 800c692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c696:	e146      	b.n	800c926 <UART_SetConfig+0x5a6>
 800c698:	2308      	movs	r3, #8
 800c69a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c69e:	e142      	b.n	800c926 <UART_SetConfig+0x5a6>
 800c6a0:	2310      	movs	r3, #16
 800c6a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6a6:	e13e      	b.n	800c926 <UART_SetConfig+0x5a6>
 800c6a8:	cfff69f3 	.word	0xcfff69f3
 800c6ac:	58000c00 	.word	0x58000c00
 800c6b0:	11fff4ff 	.word	0x11fff4ff
 800c6b4:	40011000 	.word	0x40011000
 800c6b8:	58024400 	.word	0x58024400
 800c6bc:	40004400 	.word	0x40004400
 800c6c0:	40004800 	.word	0x40004800
 800c6c4:	40004c00 	.word	0x40004c00
 800c6c8:	40005000 	.word	0x40005000
 800c6cc:	2320      	movs	r3, #32
 800c6ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6d2:	e128      	b.n	800c926 <UART_SetConfig+0x5a6>
 800c6d4:	2340      	movs	r3, #64	; 0x40
 800c6d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6da:	e124      	b.n	800c926 <UART_SetConfig+0x5a6>
 800c6dc:	2380      	movs	r3, #128	; 0x80
 800c6de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6e2:	e120      	b.n	800c926 <UART_SetConfig+0x5a6>
 800c6e4:	697b      	ldr	r3, [r7, #20]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	4acb      	ldr	r2, [pc, #812]	; (800ca18 <UART_SetConfig+0x698>)
 800c6ea:	4293      	cmp	r3, r2
 800c6ec:	d176      	bne.n	800c7dc <UART_SetConfig+0x45c>
 800c6ee:	4bcb      	ldr	r3, [pc, #812]	; (800ca1c <UART_SetConfig+0x69c>)
 800c6f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c6f6:	2b28      	cmp	r3, #40	; 0x28
 800c6f8:	d86c      	bhi.n	800c7d4 <UART_SetConfig+0x454>
 800c6fa:	a201      	add	r2, pc, #4	; (adr r2, 800c700 <UART_SetConfig+0x380>)
 800c6fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c700:	0800c7a5 	.word	0x0800c7a5
 800c704:	0800c7d5 	.word	0x0800c7d5
 800c708:	0800c7d5 	.word	0x0800c7d5
 800c70c:	0800c7d5 	.word	0x0800c7d5
 800c710:	0800c7d5 	.word	0x0800c7d5
 800c714:	0800c7d5 	.word	0x0800c7d5
 800c718:	0800c7d5 	.word	0x0800c7d5
 800c71c:	0800c7d5 	.word	0x0800c7d5
 800c720:	0800c7ad 	.word	0x0800c7ad
 800c724:	0800c7d5 	.word	0x0800c7d5
 800c728:	0800c7d5 	.word	0x0800c7d5
 800c72c:	0800c7d5 	.word	0x0800c7d5
 800c730:	0800c7d5 	.word	0x0800c7d5
 800c734:	0800c7d5 	.word	0x0800c7d5
 800c738:	0800c7d5 	.word	0x0800c7d5
 800c73c:	0800c7d5 	.word	0x0800c7d5
 800c740:	0800c7b5 	.word	0x0800c7b5
 800c744:	0800c7d5 	.word	0x0800c7d5
 800c748:	0800c7d5 	.word	0x0800c7d5
 800c74c:	0800c7d5 	.word	0x0800c7d5
 800c750:	0800c7d5 	.word	0x0800c7d5
 800c754:	0800c7d5 	.word	0x0800c7d5
 800c758:	0800c7d5 	.word	0x0800c7d5
 800c75c:	0800c7d5 	.word	0x0800c7d5
 800c760:	0800c7bd 	.word	0x0800c7bd
 800c764:	0800c7d5 	.word	0x0800c7d5
 800c768:	0800c7d5 	.word	0x0800c7d5
 800c76c:	0800c7d5 	.word	0x0800c7d5
 800c770:	0800c7d5 	.word	0x0800c7d5
 800c774:	0800c7d5 	.word	0x0800c7d5
 800c778:	0800c7d5 	.word	0x0800c7d5
 800c77c:	0800c7d5 	.word	0x0800c7d5
 800c780:	0800c7c5 	.word	0x0800c7c5
 800c784:	0800c7d5 	.word	0x0800c7d5
 800c788:	0800c7d5 	.word	0x0800c7d5
 800c78c:	0800c7d5 	.word	0x0800c7d5
 800c790:	0800c7d5 	.word	0x0800c7d5
 800c794:	0800c7d5 	.word	0x0800c7d5
 800c798:	0800c7d5 	.word	0x0800c7d5
 800c79c:	0800c7d5 	.word	0x0800c7d5
 800c7a0:	0800c7cd 	.word	0x0800c7cd
 800c7a4:	2301      	movs	r3, #1
 800c7a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7aa:	e0bc      	b.n	800c926 <UART_SetConfig+0x5a6>
 800c7ac:	2304      	movs	r3, #4
 800c7ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7b2:	e0b8      	b.n	800c926 <UART_SetConfig+0x5a6>
 800c7b4:	2308      	movs	r3, #8
 800c7b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7ba:	e0b4      	b.n	800c926 <UART_SetConfig+0x5a6>
 800c7bc:	2310      	movs	r3, #16
 800c7be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7c2:	e0b0      	b.n	800c926 <UART_SetConfig+0x5a6>
 800c7c4:	2320      	movs	r3, #32
 800c7c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7ca:	e0ac      	b.n	800c926 <UART_SetConfig+0x5a6>
 800c7cc:	2340      	movs	r3, #64	; 0x40
 800c7ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7d2:	e0a8      	b.n	800c926 <UART_SetConfig+0x5a6>
 800c7d4:	2380      	movs	r3, #128	; 0x80
 800c7d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7da:	e0a4      	b.n	800c926 <UART_SetConfig+0x5a6>
 800c7dc:	697b      	ldr	r3, [r7, #20]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	4a8f      	ldr	r2, [pc, #572]	; (800ca20 <UART_SetConfig+0x6a0>)
 800c7e2:	4293      	cmp	r3, r2
 800c7e4:	d130      	bne.n	800c848 <UART_SetConfig+0x4c8>
 800c7e6:	4b8d      	ldr	r3, [pc, #564]	; (800ca1c <UART_SetConfig+0x69c>)
 800c7e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7ea:	f003 0307 	and.w	r3, r3, #7
 800c7ee:	2b05      	cmp	r3, #5
 800c7f0:	d826      	bhi.n	800c840 <UART_SetConfig+0x4c0>
 800c7f2:	a201      	add	r2, pc, #4	; (adr r2, 800c7f8 <UART_SetConfig+0x478>)
 800c7f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7f8:	0800c811 	.word	0x0800c811
 800c7fc:	0800c819 	.word	0x0800c819
 800c800:	0800c821 	.word	0x0800c821
 800c804:	0800c829 	.word	0x0800c829
 800c808:	0800c831 	.word	0x0800c831
 800c80c:	0800c839 	.word	0x0800c839
 800c810:	2300      	movs	r3, #0
 800c812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c816:	e086      	b.n	800c926 <UART_SetConfig+0x5a6>
 800c818:	2304      	movs	r3, #4
 800c81a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c81e:	e082      	b.n	800c926 <UART_SetConfig+0x5a6>
 800c820:	2308      	movs	r3, #8
 800c822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c826:	e07e      	b.n	800c926 <UART_SetConfig+0x5a6>
 800c828:	2310      	movs	r3, #16
 800c82a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c82e:	e07a      	b.n	800c926 <UART_SetConfig+0x5a6>
 800c830:	2320      	movs	r3, #32
 800c832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c836:	e076      	b.n	800c926 <UART_SetConfig+0x5a6>
 800c838:	2340      	movs	r3, #64	; 0x40
 800c83a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c83e:	e072      	b.n	800c926 <UART_SetConfig+0x5a6>
 800c840:	2380      	movs	r3, #128	; 0x80
 800c842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c846:	e06e      	b.n	800c926 <UART_SetConfig+0x5a6>
 800c848:	697b      	ldr	r3, [r7, #20]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	4a75      	ldr	r2, [pc, #468]	; (800ca24 <UART_SetConfig+0x6a4>)
 800c84e:	4293      	cmp	r3, r2
 800c850:	d130      	bne.n	800c8b4 <UART_SetConfig+0x534>
 800c852:	4b72      	ldr	r3, [pc, #456]	; (800ca1c <UART_SetConfig+0x69c>)
 800c854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c856:	f003 0307 	and.w	r3, r3, #7
 800c85a:	2b05      	cmp	r3, #5
 800c85c:	d826      	bhi.n	800c8ac <UART_SetConfig+0x52c>
 800c85e:	a201      	add	r2, pc, #4	; (adr r2, 800c864 <UART_SetConfig+0x4e4>)
 800c860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c864:	0800c87d 	.word	0x0800c87d
 800c868:	0800c885 	.word	0x0800c885
 800c86c:	0800c88d 	.word	0x0800c88d
 800c870:	0800c895 	.word	0x0800c895
 800c874:	0800c89d 	.word	0x0800c89d
 800c878:	0800c8a5 	.word	0x0800c8a5
 800c87c:	2300      	movs	r3, #0
 800c87e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c882:	e050      	b.n	800c926 <UART_SetConfig+0x5a6>
 800c884:	2304      	movs	r3, #4
 800c886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c88a:	e04c      	b.n	800c926 <UART_SetConfig+0x5a6>
 800c88c:	2308      	movs	r3, #8
 800c88e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c892:	e048      	b.n	800c926 <UART_SetConfig+0x5a6>
 800c894:	2310      	movs	r3, #16
 800c896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c89a:	e044      	b.n	800c926 <UART_SetConfig+0x5a6>
 800c89c:	2320      	movs	r3, #32
 800c89e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8a2:	e040      	b.n	800c926 <UART_SetConfig+0x5a6>
 800c8a4:	2340      	movs	r3, #64	; 0x40
 800c8a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8aa:	e03c      	b.n	800c926 <UART_SetConfig+0x5a6>
 800c8ac:	2380      	movs	r3, #128	; 0x80
 800c8ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8b2:	e038      	b.n	800c926 <UART_SetConfig+0x5a6>
 800c8b4:	697b      	ldr	r3, [r7, #20]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	4a5b      	ldr	r2, [pc, #364]	; (800ca28 <UART_SetConfig+0x6a8>)
 800c8ba:	4293      	cmp	r3, r2
 800c8bc:	d130      	bne.n	800c920 <UART_SetConfig+0x5a0>
 800c8be:	4b57      	ldr	r3, [pc, #348]	; (800ca1c <UART_SetConfig+0x69c>)
 800c8c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8c2:	f003 0307 	and.w	r3, r3, #7
 800c8c6:	2b05      	cmp	r3, #5
 800c8c8:	d826      	bhi.n	800c918 <UART_SetConfig+0x598>
 800c8ca:	a201      	add	r2, pc, #4	; (adr r2, 800c8d0 <UART_SetConfig+0x550>)
 800c8cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8d0:	0800c8e9 	.word	0x0800c8e9
 800c8d4:	0800c8f1 	.word	0x0800c8f1
 800c8d8:	0800c8f9 	.word	0x0800c8f9
 800c8dc:	0800c901 	.word	0x0800c901
 800c8e0:	0800c909 	.word	0x0800c909
 800c8e4:	0800c911 	.word	0x0800c911
 800c8e8:	2302      	movs	r3, #2
 800c8ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8ee:	e01a      	b.n	800c926 <UART_SetConfig+0x5a6>
 800c8f0:	2304      	movs	r3, #4
 800c8f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8f6:	e016      	b.n	800c926 <UART_SetConfig+0x5a6>
 800c8f8:	2308      	movs	r3, #8
 800c8fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8fe:	e012      	b.n	800c926 <UART_SetConfig+0x5a6>
 800c900:	2310      	movs	r3, #16
 800c902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c906:	e00e      	b.n	800c926 <UART_SetConfig+0x5a6>
 800c908:	2320      	movs	r3, #32
 800c90a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c90e:	e00a      	b.n	800c926 <UART_SetConfig+0x5a6>
 800c910:	2340      	movs	r3, #64	; 0x40
 800c912:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c916:	e006      	b.n	800c926 <UART_SetConfig+0x5a6>
 800c918:	2380      	movs	r3, #128	; 0x80
 800c91a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c91e:	e002      	b.n	800c926 <UART_SetConfig+0x5a6>
 800c920:	2380      	movs	r3, #128	; 0x80
 800c922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c926:	697b      	ldr	r3, [r7, #20]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	4a3f      	ldr	r2, [pc, #252]	; (800ca28 <UART_SetConfig+0x6a8>)
 800c92c:	4293      	cmp	r3, r2
 800c92e:	f040 80f8 	bne.w	800cb22 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c932:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c936:	2b20      	cmp	r3, #32
 800c938:	dc46      	bgt.n	800c9c8 <UART_SetConfig+0x648>
 800c93a:	2b02      	cmp	r3, #2
 800c93c:	f2c0 8082 	blt.w	800ca44 <UART_SetConfig+0x6c4>
 800c940:	3b02      	subs	r3, #2
 800c942:	2b1e      	cmp	r3, #30
 800c944:	d87e      	bhi.n	800ca44 <UART_SetConfig+0x6c4>
 800c946:	a201      	add	r2, pc, #4	; (adr r2, 800c94c <UART_SetConfig+0x5cc>)
 800c948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c94c:	0800c9cf 	.word	0x0800c9cf
 800c950:	0800ca45 	.word	0x0800ca45
 800c954:	0800c9d7 	.word	0x0800c9d7
 800c958:	0800ca45 	.word	0x0800ca45
 800c95c:	0800ca45 	.word	0x0800ca45
 800c960:	0800ca45 	.word	0x0800ca45
 800c964:	0800c9e7 	.word	0x0800c9e7
 800c968:	0800ca45 	.word	0x0800ca45
 800c96c:	0800ca45 	.word	0x0800ca45
 800c970:	0800ca45 	.word	0x0800ca45
 800c974:	0800ca45 	.word	0x0800ca45
 800c978:	0800ca45 	.word	0x0800ca45
 800c97c:	0800ca45 	.word	0x0800ca45
 800c980:	0800ca45 	.word	0x0800ca45
 800c984:	0800c9f7 	.word	0x0800c9f7
 800c988:	0800ca45 	.word	0x0800ca45
 800c98c:	0800ca45 	.word	0x0800ca45
 800c990:	0800ca45 	.word	0x0800ca45
 800c994:	0800ca45 	.word	0x0800ca45
 800c998:	0800ca45 	.word	0x0800ca45
 800c99c:	0800ca45 	.word	0x0800ca45
 800c9a0:	0800ca45 	.word	0x0800ca45
 800c9a4:	0800ca45 	.word	0x0800ca45
 800c9a8:	0800ca45 	.word	0x0800ca45
 800c9ac:	0800ca45 	.word	0x0800ca45
 800c9b0:	0800ca45 	.word	0x0800ca45
 800c9b4:	0800ca45 	.word	0x0800ca45
 800c9b8:	0800ca45 	.word	0x0800ca45
 800c9bc:	0800ca45 	.word	0x0800ca45
 800c9c0:	0800ca45 	.word	0x0800ca45
 800c9c4:	0800ca37 	.word	0x0800ca37
 800c9c8:	2b40      	cmp	r3, #64	; 0x40
 800c9ca:	d037      	beq.n	800ca3c <UART_SetConfig+0x6bc>
 800c9cc:	e03a      	b.n	800ca44 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c9ce:	f7fc ff59 	bl	8009884 <HAL_RCCEx_GetD3PCLK1Freq>
 800c9d2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c9d4:	e03c      	b.n	800ca50 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c9d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c9da:	4618      	mov	r0, r3
 800c9dc:	f7fc ff68 	bl	80098b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c9e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9e4:	e034      	b.n	800ca50 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c9e6:	f107 0318 	add.w	r3, r7, #24
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	f7fd f8b4 	bl	8009b58 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c9f0:	69fb      	ldr	r3, [r7, #28]
 800c9f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9f4:	e02c      	b.n	800ca50 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c9f6:	4b09      	ldr	r3, [pc, #36]	; (800ca1c <UART_SetConfig+0x69c>)
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	f003 0320 	and.w	r3, r3, #32
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d016      	beq.n	800ca30 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ca02:	4b06      	ldr	r3, [pc, #24]	; (800ca1c <UART_SetConfig+0x69c>)
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	08db      	lsrs	r3, r3, #3
 800ca08:	f003 0303 	and.w	r3, r3, #3
 800ca0c:	4a07      	ldr	r2, [pc, #28]	; (800ca2c <UART_SetConfig+0x6ac>)
 800ca0e:	fa22 f303 	lsr.w	r3, r2, r3
 800ca12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ca14:	e01c      	b.n	800ca50 <UART_SetConfig+0x6d0>
 800ca16:	bf00      	nop
 800ca18:	40011400 	.word	0x40011400
 800ca1c:	58024400 	.word	0x58024400
 800ca20:	40007800 	.word	0x40007800
 800ca24:	40007c00 	.word	0x40007c00
 800ca28:	58000c00 	.word	0x58000c00
 800ca2c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800ca30:	4b9d      	ldr	r3, [pc, #628]	; (800cca8 <UART_SetConfig+0x928>)
 800ca32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca34:	e00c      	b.n	800ca50 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ca36:	4b9d      	ldr	r3, [pc, #628]	; (800ccac <UART_SetConfig+0x92c>)
 800ca38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca3a:	e009      	b.n	800ca50 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ca3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ca40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca42:	e005      	b.n	800ca50 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800ca44:	2300      	movs	r3, #0
 800ca46:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ca48:	2301      	movs	r3, #1
 800ca4a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ca4e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ca50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	f000 81de 	beq.w	800ce14 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ca58:	697b      	ldr	r3, [r7, #20]
 800ca5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca5c:	4a94      	ldr	r2, [pc, #592]	; (800ccb0 <UART_SetConfig+0x930>)
 800ca5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca62:	461a      	mov	r2, r3
 800ca64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca66:	fbb3 f3f2 	udiv	r3, r3, r2
 800ca6a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ca6c:	697b      	ldr	r3, [r7, #20]
 800ca6e:	685a      	ldr	r2, [r3, #4]
 800ca70:	4613      	mov	r3, r2
 800ca72:	005b      	lsls	r3, r3, #1
 800ca74:	4413      	add	r3, r2
 800ca76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca78:	429a      	cmp	r2, r3
 800ca7a:	d305      	bcc.n	800ca88 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ca7c:	697b      	ldr	r3, [r7, #20]
 800ca7e:	685b      	ldr	r3, [r3, #4]
 800ca80:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ca82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca84:	429a      	cmp	r2, r3
 800ca86:	d903      	bls.n	800ca90 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800ca88:	2301      	movs	r3, #1
 800ca8a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ca8e:	e1c1      	b.n	800ce14 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ca90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca92:	2200      	movs	r2, #0
 800ca94:	60bb      	str	r3, [r7, #8]
 800ca96:	60fa      	str	r2, [r7, #12]
 800ca98:	697b      	ldr	r3, [r7, #20]
 800ca9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca9c:	4a84      	ldr	r2, [pc, #528]	; (800ccb0 <UART_SetConfig+0x930>)
 800ca9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800caa2:	b29b      	uxth	r3, r3
 800caa4:	2200      	movs	r2, #0
 800caa6:	603b      	str	r3, [r7, #0]
 800caa8:	607a      	str	r2, [r7, #4]
 800caaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800caae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cab2:	f7f3 fc6d 	bl	8000390 <__aeabi_uldivmod>
 800cab6:	4602      	mov	r2, r0
 800cab8:	460b      	mov	r3, r1
 800caba:	4610      	mov	r0, r2
 800cabc:	4619      	mov	r1, r3
 800cabe:	f04f 0200 	mov.w	r2, #0
 800cac2:	f04f 0300 	mov.w	r3, #0
 800cac6:	020b      	lsls	r3, r1, #8
 800cac8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800cacc:	0202      	lsls	r2, r0, #8
 800cace:	6979      	ldr	r1, [r7, #20]
 800cad0:	6849      	ldr	r1, [r1, #4]
 800cad2:	0849      	lsrs	r1, r1, #1
 800cad4:	2000      	movs	r0, #0
 800cad6:	460c      	mov	r4, r1
 800cad8:	4605      	mov	r5, r0
 800cada:	eb12 0804 	adds.w	r8, r2, r4
 800cade:	eb43 0905 	adc.w	r9, r3, r5
 800cae2:	697b      	ldr	r3, [r7, #20]
 800cae4:	685b      	ldr	r3, [r3, #4]
 800cae6:	2200      	movs	r2, #0
 800cae8:	469a      	mov	sl, r3
 800caea:	4693      	mov	fp, r2
 800caec:	4652      	mov	r2, sl
 800caee:	465b      	mov	r3, fp
 800caf0:	4640      	mov	r0, r8
 800caf2:	4649      	mov	r1, r9
 800caf4:	f7f3 fc4c 	bl	8000390 <__aeabi_uldivmod>
 800caf8:	4602      	mov	r2, r0
 800cafa:	460b      	mov	r3, r1
 800cafc:	4613      	mov	r3, r2
 800cafe:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cb00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cb06:	d308      	bcc.n	800cb1a <UART_SetConfig+0x79a>
 800cb08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cb0e:	d204      	bcs.n	800cb1a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800cb10:	697b      	ldr	r3, [r7, #20]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cb16:	60da      	str	r2, [r3, #12]
 800cb18:	e17c      	b.n	800ce14 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800cb1a:	2301      	movs	r3, #1
 800cb1c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800cb20:	e178      	b.n	800ce14 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cb22:	697b      	ldr	r3, [r7, #20]
 800cb24:	69db      	ldr	r3, [r3, #28]
 800cb26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cb2a:	f040 80c5 	bne.w	800ccb8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800cb2e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800cb32:	2b20      	cmp	r3, #32
 800cb34:	dc48      	bgt.n	800cbc8 <UART_SetConfig+0x848>
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	db7b      	blt.n	800cc32 <UART_SetConfig+0x8b2>
 800cb3a:	2b20      	cmp	r3, #32
 800cb3c:	d879      	bhi.n	800cc32 <UART_SetConfig+0x8b2>
 800cb3e:	a201      	add	r2, pc, #4	; (adr r2, 800cb44 <UART_SetConfig+0x7c4>)
 800cb40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb44:	0800cbcf 	.word	0x0800cbcf
 800cb48:	0800cbd7 	.word	0x0800cbd7
 800cb4c:	0800cc33 	.word	0x0800cc33
 800cb50:	0800cc33 	.word	0x0800cc33
 800cb54:	0800cbdf 	.word	0x0800cbdf
 800cb58:	0800cc33 	.word	0x0800cc33
 800cb5c:	0800cc33 	.word	0x0800cc33
 800cb60:	0800cc33 	.word	0x0800cc33
 800cb64:	0800cbef 	.word	0x0800cbef
 800cb68:	0800cc33 	.word	0x0800cc33
 800cb6c:	0800cc33 	.word	0x0800cc33
 800cb70:	0800cc33 	.word	0x0800cc33
 800cb74:	0800cc33 	.word	0x0800cc33
 800cb78:	0800cc33 	.word	0x0800cc33
 800cb7c:	0800cc33 	.word	0x0800cc33
 800cb80:	0800cc33 	.word	0x0800cc33
 800cb84:	0800cbff 	.word	0x0800cbff
 800cb88:	0800cc33 	.word	0x0800cc33
 800cb8c:	0800cc33 	.word	0x0800cc33
 800cb90:	0800cc33 	.word	0x0800cc33
 800cb94:	0800cc33 	.word	0x0800cc33
 800cb98:	0800cc33 	.word	0x0800cc33
 800cb9c:	0800cc33 	.word	0x0800cc33
 800cba0:	0800cc33 	.word	0x0800cc33
 800cba4:	0800cc33 	.word	0x0800cc33
 800cba8:	0800cc33 	.word	0x0800cc33
 800cbac:	0800cc33 	.word	0x0800cc33
 800cbb0:	0800cc33 	.word	0x0800cc33
 800cbb4:	0800cc33 	.word	0x0800cc33
 800cbb8:	0800cc33 	.word	0x0800cc33
 800cbbc:	0800cc33 	.word	0x0800cc33
 800cbc0:	0800cc33 	.word	0x0800cc33
 800cbc4:	0800cc25 	.word	0x0800cc25
 800cbc8:	2b40      	cmp	r3, #64	; 0x40
 800cbca:	d02e      	beq.n	800cc2a <UART_SetConfig+0x8aa>
 800cbcc:	e031      	b.n	800cc32 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cbce:	f7fa fea3 	bl	8007918 <HAL_RCC_GetPCLK1Freq>
 800cbd2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cbd4:	e033      	b.n	800cc3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cbd6:	f7fa feb5 	bl	8007944 <HAL_RCC_GetPCLK2Freq>
 800cbda:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cbdc:	e02f      	b.n	800cc3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cbde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	f7fc fe64 	bl	80098b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cbe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbec:	e027      	b.n	800cc3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cbee:	f107 0318 	add.w	r3, r7, #24
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	f7fc ffb0 	bl	8009b58 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cbf8:	69fb      	ldr	r3, [r7, #28]
 800cbfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbfc:	e01f      	b.n	800cc3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cbfe:	4b2d      	ldr	r3, [pc, #180]	; (800ccb4 <UART_SetConfig+0x934>)
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	f003 0320 	and.w	r3, r3, #32
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d009      	beq.n	800cc1e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cc0a:	4b2a      	ldr	r3, [pc, #168]	; (800ccb4 <UART_SetConfig+0x934>)
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	08db      	lsrs	r3, r3, #3
 800cc10:	f003 0303 	and.w	r3, r3, #3
 800cc14:	4a24      	ldr	r2, [pc, #144]	; (800cca8 <UART_SetConfig+0x928>)
 800cc16:	fa22 f303 	lsr.w	r3, r2, r3
 800cc1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cc1c:	e00f      	b.n	800cc3e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800cc1e:	4b22      	ldr	r3, [pc, #136]	; (800cca8 <UART_SetConfig+0x928>)
 800cc20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc22:	e00c      	b.n	800cc3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cc24:	4b21      	ldr	r3, [pc, #132]	; (800ccac <UART_SetConfig+0x92c>)
 800cc26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc28:	e009      	b.n	800cc3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cc2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cc2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc30:	e005      	b.n	800cc3e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800cc32:	2300      	movs	r3, #0
 800cc34:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800cc36:	2301      	movs	r3, #1
 800cc38:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800cc3c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cc3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	f000 80e7 	beq.w	800ce14 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cc46:	697b      	ldr	r3, [r7, #20]
 800cc48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc4a:	4a19      	ldr	r2, [pc, #100]	; (800ccb0 <UART_SetConfig+0x930>)
 800cc4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cc50:	461a      	mov	r2, r3
 800cc52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc54:	fbb3 f3f2 	udiv	r3, r3, r2
 800cc58:	005a      	lsls	r2, r3, #1
 800cc5a:	697b      	ldr	r3, [r7, #20]
 800cc5c:	685b      	ldr	r3, [r3, #4]
 800cc5e:	085b      	lsrs	r3, r3, #1
 800cc60:	441a      	add	r2, r3
 800cc62:	697b      	ldr	r3, [r7, #20]
 800cc64:	685b      	ldr	r3, [r3, #4]
 800cc66:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc6a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cc6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc6e:	2b0f      	cmp	r3, #15
 800cc70:	d916      	bls.n	800cca0 <UART_SetConfig+0x920>
 800cc72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc78:	d212      	bcs.n	800cca0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cc7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc7c:	b29b      	uxth	r3, r3
 800cc7e:	f023 030f 	bic.w	r3, r3, #15
 800cc82:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cc84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc86:	085b      	lsrs	r3, r3, #1
 800cc88:	b29b      	uxth	r3, r3
 800cc8a:	f003 0307 	and.w	r3, r3, #7
 800cc8e:	b29a      	uxth	r2, r3
 800cc90:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cc92:	4313      	orrs	r3, r2
 800cc94:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800cc96:	697b      	ldr	r3, [r7, #20]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800cc9c:	60da      	str	r2, [r3, #12]
 800cc9e:	e0b9      	b.n	800ce14 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800cca0:	2301      	movs	r3, #1
 800cca2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800cca6:	e0b5      	b.n	800ce14 <UART_SetConfig+0xa94>
 800cca8:	03d09000 	.word	0x03d09000
 800ccac:	003d0900 	.word	0x003d0900
 800ccb0:	0800f40c 	.word	0x0800f40c
 800ccb4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800ccb8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ccbc:	2b20      	cmp	r3, #32
 800ccbe:	dc49      	bgt.n	800cd54 <UART_SetConfig+0x9d4>
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	db7c      	blt.n	800cdbe <UART_SetConfig+0xa3e>
 800ccc4:	2b20      	cmp	r3, #32
 800ccc6:	d87a      	bhi.n	800cdbe <UART_SetConfig+0xa3e>
 800ccc8:	a201      	add	r2, pc, #4	; (adr r2, 800ccd0 <UART_SetConfig+0x950>)
 800ccca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccce:	bf00      	nop
 800ccd0:	0800cd5b 	.word	0x0800cd5b
 800ccd4:	0800cd63 	.word	0x0800cd63
 800ccd8:	0800cdbf 	.word	0x0800cdbf
 800ccdc:	0800cdbf 	.word	0x0800cdbf
 800cce0:	0800cd6b 	.word	0x0800cd6b
 800cce4:	0800cdbf 	.word	0x0800cdbf
 800cce8:	0800cdbf 	.word	0x0800cdbf
 800ccec:	0800cdbf 	.word	0x0800cdbf
 800ccf0:	0800cd7b 	.word	0x0800cd7b
 800ccf4:	0800cdbf 	.word	0x0800cdbf
 800ccf8:	0800cdbf 	.word	0x0800cdbf
 800ccfc:	0800cdbf 	.word	0x0800cdbf
 800cd00:	0800cdbf 	.word	0x0800cdbf
 800cd04:	0800cdbf 	.word	0x0800cdbf
 800cd08:	0800cdbf 	.word	0x0800cdbf
 800cd0c:	0800cdbf 	.word	0x0800cdbf
 800cd10:	0800cd8b 	.word	0x0800cd8b
 800cd14:	0800cdbf 	.word	0x0800cdbf
 800cd18:	0800cdbf 	.word	0x0800cdbf
 800cd1c:	0800cdbf 	.word	0x0800cdbf
 800cd20:	0800cdbf 	.word	0x0800cdbf
 800cd24:	0800cdbf 	.word	0x0800cdbf
 800cd28:	0800cdbf 	.word	0x0800cdbf
 800cd2c:	0800cdbf 	.word	0x0800cdbf
 800cd30:	0800cdbf 	.word	0x0800cdbf
 800cd34:	0800cdbf 	.word	0x0800cdbf
 800cd38:	0800cdbf 	.word	0x0800cdbf
 800cd3c:	0800cdbf 	.word	0x0800cdbf
 800cd40:	0800cdbf 	.word	0x0800cdbf
 800cd44:	0800cdbf 	.word	0x0800cdbf
 800cd48:	0800cdbf 	.word	0x0800cdbf
 800cd4c:	0800cdbf 	.word	0x0800cdbf
 800cd50:	0800cdb1 	.word	0x0800cdb1
 800cd54:	2b40      	cmp	r3, #64	; 0x40
 800cd56:	d02e      	beq.n	800cdb6 <UART_SetConfig+0xa36>
 800cd58:	e031      	b.n	800cdbe <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cd5a:	f7fa fddd 	bl	8007918 <HAL_RCC_GetPCLK1Freq>
 800cd5e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cd60:	e033      	b.n	800cdca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cd62:	f7fa fdef 	bl	8007944 <HAL_RCC_GetPCLK2Freq>
 800cd66:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cd68:	e02f      	b.n	800cdca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cd6e:	4618      	mov	r0, r3
 800cd70:	f7fc fd9e 	bl	80098b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cd74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd78:	e027      	b.n	800cdca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cd7a:	f107 0318 	add.w	r3, r7, #24
 800cd7e:	4618      	mov	r0, r3
 800cd80:	f7fc feea 	bl	8009b58 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cd84:	69fb      	ldr	r3, [r7, #28]
 800cd86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd88:	e01f      	b.n	800cdca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cd8a:	4b2d      	ldr	r3, [pc, #180]	; (800ce40 <UART_SetConfig+0xac0>)
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	f003 0320 	and.w	r3, r3, #32
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d009      	beq.n	800cdaa <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cd96:	4b2a      	ldr	r3, [pc, #168]	; (800ce40 <UART_SetConfig+0xac0>)
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	08db      	lsrs	r3, r3, #3
 800cd9c:	f003 0303 	and.w	r3, r3, #3
 800cda0:	4a28      	ldr	r2, [pc, #160]	; (800ce44 <UART_SetConfig+0xac4>)
 800cda2:	fa22 f303 	lsr.w	r3, r2, r3
 800cda6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cda8:	e00f      	b.n	800cdca <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800cdaa:	4b26      	ldr	r3, [pc, #152]	; (800ce44 <UART_SetConfig+0xac4>)
 800cdac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdae:	e00c      	b.n	800cdca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cdb0:	4b25      	ldr	r3, [pc, #148]	; (800ce48 <UART_SetConfig+0xac8>)
 800cdb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdb4:	e009      	b.n	800cdca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cdb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cdba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdbc:	e005      	b.n	800cdca <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800cdc2:	2301      	movs	r3, #1
 800cdc4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800cdc8:	bf00      	nop
    }

    if (pclk != 0U)
 800cdca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d021      	beq.n	800ce14 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cdd0:	697b      	ldr	r3, [r7, #20]
 800cdd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdd4:	4a1d      	ldr	r2, [pc, #116]	; (800ce4c <UART_SetConfig+0xacc>)
 800cdd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cdda:	461a      	mov	r2, r3
 800cddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdde:	fbb3 f2f2 	udiv	r2, r3, r2
 800cde2:	697b      	ldr	r3, [r7, #20]
 800cde4:	685b      	ldr	r3, [r3, #4]
 800cde6:	085b      	lsrs	r3, r3, #1
 800cde8:	441a      	add	r2, r3
 800cdea:	697b      	ldr	r3, [r7, #20]
 800cdec:	685b      	ldr	r3, [r3, #4]
 800cdee:	fbb2 f3f3 	udiv	r3, r2, r3
 800cdf2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cdf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdf6:	2b0f      	cmp	r3, #15
 800cdf8:	d909      	bls.n	800ce0e <UART_SetConfig+0xa8e>
 800cdfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ce00:	d205      	bcs.n	800ce0e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ce02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce04:	b29a      	uxth	r2, r3
 800ce06:	697b      	ldr	r3, [r7, #20]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	60da      	str	r2, [r3, #12]
 800ce0c:	e002      	b.n	800ce14 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ce0e:	2301      	movs	r3, #1
 800ce10:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ce14:	697b      	ldr	r3, [r7, #20]
 800ce16:	2201      	movs	r2, #1
 800ce18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ce1c:	697b      	ldr	r3, [r7, #20]
 800ce1e:	2201      	movs	r2, #1
 800ce20:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ce24:	697b      	ldr	r3, [r7, #20]
 800ce26:	2200      	movs	r2, #0
 800ce28:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800ce2a:	697b      	ldr	r3, [r7, #20]
 800ce2c:	2200      	movs	r2, #0
 800ce2e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800ce30:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800ce34:	4618      	mov	r0, r3
 800ce36:	3748      	adds	r7, #72	; 0x48
 800ce38:	46bd      	mov	sp, r7
 800ce3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ce3e:	bf00      	nop
 800ce40:	58024400 	.word	0x58024400
 800ce44:	03d09000 	.word	0x03d09000
 800ce48:	003d0900 	.word	0x003d0900
 800ce4c:	0800f40c 	.word	0x0800f40c

0800ce50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ce50:	b480      	push	{r7}
 800ce52:	b083      	sub	sp, #12
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce5c:	f003 0301 	and.w	r3, r3, #1
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d00a      	beq.n	800ce7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	685b      	ldr	r3, [r3, #4]
 800ce6a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	430a      	orrs	r2, r1
 800ce78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce7e:	f003 0302 	and.w	r3, r3, #2
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d00a      	beq.n	800ce9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	685b      	ldr	r3, [r3, #4]
 800ce8c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	430a      	orrs	r2, r1
 800ce9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cea0:	f003 0304 	and.w	r3, r3, #4
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d00a      	beq.n	800cebe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	685b      	ldr	r3, [r3, #4]
 800ceae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	430a      	orrs	r2, r1
 800cebc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cec2:	f003 0308 	and.w	r3, r3, #8
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d00a      	beq.n	800cee0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	685b      	ldr	r3, [r3, #4]
 800ced0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	430a      	orrs	r2, r1
 800cede:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cee4:	f003 0310 	and.w	r3, r3, #16
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d00a      	beq.n	800cf02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	689b      	ldr	r3, [r3, #8]
 800cef2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	430a      	orrs	r2, r1
 800cf00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf06:	f003 0320 	and.w	r3, r3, #32
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d00a      	beq.n	800cf24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	689b      	ldr	r3, [r3, #8]
 800cf14:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	430a      	orrs	r2, r1
 800cf22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d01a      	beq.n	800cf66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	685b      	ldr	r3, [r3, #4]
 800cf36:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	430a      	orrs	r2, r1
 800cf44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cf4e:	d10a      	bne.n	800cf66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	685b      	ldr	r3, [r3, #4]
 800cf56:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	430a      	orrs	r2, r1
 800cf64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d00a      	beq.n	800cf88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	685b      	ldr	r3, [r3, #4]
 800cf78:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	430a      	orrs	r2, r1
 800cf86:	605a      	str	r2, [r3, #4]
  }
}
 800cf88:	bf00      	nop
 800cf8a:	370c      	adds	r7, #12
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf92:	4770      	bx	lr

0800cf94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b098      	sub	sp, #96	; 0x60
 800cf98:	af02      	add	r7, sp, #8
 800cf9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cfa4:	f7f6 f80a 	bl	8002fbc <HAL_GetTick>
 800cfa8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	f003 0308 	and.w	r3, r3, #8
 800cfb4:	2b08      	cmp	r3, #8
 800cfb6:	d12f      	bne.n	800d018 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cfb8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cfbc:	9300      	str	r3, [sp, #0]
 800cfbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cfc6:	6878      	ldr	r0, [r7, #4]
 800cfc8:	f000 f88e 	bl	800d0e8 <UART_WaitOnFlagUntilTimeout>
 800cfcc:	4603      	mov	r3, r0
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d022      	beq.n	800d018 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfda:	e853 3f00 	ldrex	r3, [r3]
 800cfde:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cfe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfe2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cfe6:	653b      	str	r3, [r7, #80]	; 0x50
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	461a      	mov	r2, r3
 800cfee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cff0:	647b      	str	r3, [r7, #68]	; 0x44
 800cff2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cff4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cff6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cff8:	e841 2300 	strex	r3, r2, [r1]
 800cffc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d000:	2b00      	cmp	r3, #0
 800d002:	d1e6      	bne.n	800cfd2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	2220      	movs	r2, #32
 800d008:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	2200      	movs	r2, #0
 800d010:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d014:	2303      	movs	r3, #3
 800d016:	e063      	b.n	800d0e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	f003 0304 	and.w	r3, r3, #4
 800d022:	2b04      	cmp	r3, #4
 800d024:	d149      	bne.n	800d0ba <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d026:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d02a:	9300      	str	r3, [sp, #0]
 800d02c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d02e:	2200      	movs	r2, #0
 800d030:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d034:	6878      	ldr	r0, [r7, #4]
 800d036:	f000 f857 	bl	800d0e8 <UART_WaitOnFlagUntilTimeout>
 800d03a:	4603      	mov	r3, r0
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d03c      	beq.n	800d0ba <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d048:	e853 3f00 	ldrex	r3, [r3]
 800d04c:	623b      	str	r3, [r7, #32]
   return(result);
 800d04e:	6a3b      	ldr	r3, [r7, #32]
 800d050:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d054:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	461a      	mov	r2, r3
 800d05c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d05e:	633b      	str	r3, [r7, #48]	; 0x30
 800d060:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d062:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d064:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d066:	e841 2300 	strex	r3, r2, [r1]
 800d06a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d06c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d1e6      	bne.n	800d040 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	3308      	adds	r3, #8
 800d078:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d07a:	693b      	ldr	r3, [r7, #16]
 800d07c:	e853 3f00 	ldrex	r3, [r3]
 800d080:	60fb      	str	r3, [r7, #12]
   return(result);
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	f023 0301 	bic.w	r3, r3, #1
 800d088:	64bb      	str	r3, [r7, #72]	; 0x48
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	3308      	adds	r3, #8
 800d090:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d092:	61fa      	str	r2, [r7, #28]
 800d094:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d096:	69b9      	ldr	r1, [r7, #24]
 800d098:	69fa      	ldr	r2, [r7, #28]
 800d09a:	e841 2300 	strex	r3, r2, [r1]
 800d09e:	617b      	str	r3, [r7, #20]
   return(result);
 800d0a0:	697b      	ldr	r3, [r7, #20]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d1e5      	bne.n	800d072 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	2220      	movs	r2, #32
 800d0aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	2200      	movs	r2, #0
 800d0b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d0b6:	2303      	movs	r3, #3
 800d0b8:	e012      	b.n	800d0e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	2220      	movs	r2, #32
 800d0be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	2220      	movs	r2, #32
 800d0c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	2200      	movs	r2, #0
 800d0ce:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	2200      	movs	r2, #0
 800d0da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d0de:	2300      	movs	r3, #0
}
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	3758      	adds	r7, #88	; 0x58
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	bd80      	pop	{r7, pc}

0800d0e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b084      	sub	sp, #16
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	60f8      	str	r0, [r7, #12]
 800d0f0:	60b9      	str	r1, [r7, #8]
 800d0f2:	603b      	str	r3, [r7, #0]
 800d0f4:	4613      	mov	r3, r2
 800d0f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d0f8:	e049      	b.n	800d18e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d0fa:	69bb      	ldr	r3, [r7, #24]
 800d0fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d100:	d045      	beq.n	800d18e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d102:	f7f5 ff5b 	bl	8002fbc <HAL_GetTick>
 800d106:	4602      	mov	r2, r0
 800d108:	683b      	ldr	r3, [r7, #0]
 800d10a:	1ad3      	subs	r3, r2, r3
 800d10c:	69ba      	ldr	r2, [r7, #24]
 800d10e:	429a      	cmp	r2, r3
 800d110:	d302      	bcc.n	800d118 <UART_WaitOnFlagUntilTimeout+0x30>
 800d112:	69bb      	ldr	r3, [r7, #24]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d101      	bne.n	800d11c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d118:	2303      	movs	r3, #3
 800d11a:	e048      	b.n	800d1ae <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	f003 0304 	and.w	r3, r3, #4
 800d126:	2b00      	cmp	r3, #0
 800d128:	d031      	beq.n	800d18e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	69db      	ldr	r3, [r3, #28]
 800d130:	f003 0308 	and.w	r3, r3, #8
 800d134:	2b08      	cmp	r3, #8
 800d136:	d110      	bne.n	800d15a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	2208      	movs	r2, #8
 800d13e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800d140:	68f8      	ldr	r0, [r7, #12]
 800d142:	f000 f95b 	bl	800d3fc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	2208      	movs	r2, #8
 800d14a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	2200      	movs	r2, #0
 800d152:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800d156:	2301      	movs	r3, #1
 800d158:	e029      	b.n	800d1ae <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	69db      	ldr	r3, [r3, #28]
 800d160:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d164:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d168:	d111      	bne.n	800d18e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d172:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d174:	68f8      	ldr	r0, [r7, #12]
 800d176:	f000 f941 	bl	800d3fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	2220      	movs	r2, #32
 800d17e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	2200      	movs	r2, #0
 800d186:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800d18a:	2303      	movs	r3, #3
 800d18c:	e00f      	b.n	800d1ae <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	69da      	ldr	r2, [r3, #28]
 800d194:	68bb      	ldr	r3, [r7, #8]
 800d196:	4013      	ands	r3, r2
 800d198:	68ba      	ldr	r2, [r7, #8]
 800d19a:	429a      	cmp	r2, r3
 800d19c:	bf0c      	ite	eq
 800d19e:	2301      	moveq	r3, #1
 800d1a0:	2300      	movne	r3, #0
 800d1a2:	b2db      	uxtb	r3, r3
 800d1a4:	461a      	mov	r2, r3
 800d1a6:	79fb      	ldrb	r3, [r7, #7]
 800d1a8:	429a      	cmp	r2, r3
 800d1aa:	d0a6      	beq.n	800d0fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d1ac:	2300      	movs	r3, #0
}
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	3710      	adds	r7, #16
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	bd80      	pop	{r7, pc}
	...

0800d1b8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d1b8:	b480      	push	{r7}
 800d1ba:	b0a3      	sub	sp, #140	; 0x8c
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	60f8      	str	r0, [r7, #12]
 800d1c0:	60b9      	str	r1, [r7, #8]
 800d1c2:	4613      	mov	r3, r2
 800d1c4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	68ba      	ldr	r2, [r7, #8]
 800d1ca:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	88fa      	ldrh	r2, [r7, #6]
 800d1d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	88fa      	ldrh	r2, [r7, #6]
 800d1d8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	2200      	movs	r2, #0
 800d1e0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	689b      	ldr	r3, [r3, #8]
 800d1e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d1ea:	d10e      	bne.n	800d20a <UART_Start_Receive_IT+0x52>
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	691b      	ldr	r3, [r3, #16]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d105      	bne.n	800d200 <UART_Start_Receive_IT+0x48>
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	f240 12ff 	movw	r2, #511	; 0x1ff
 800d1fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d1fe:	e02d      	b.n	800d25c <UART_Start_Receive_IT+0xa4>
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	22ff      	movs	r2, #255	; 0xff
 800d204:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d208:	e028      	b.n	800d25c <UART_Start_Receive_IT+0xa4>
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	689b      	ldr	r3, [r3, #8]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d10d      	bne.n	800d22e <UART_Start_Receive_IT+0x76>
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	691b      	ldr	r3, [r3, #16]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d104      	bne.n	800d224 <UART_Start_Receive_IT+0x6c>
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	22ff      	movs	r2, #255	; 0xff
 800d21e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d222:	e01b      	b.n	800d25c <UART_Start_Receive_IT+0xa4>
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	227f      	movs	r2, #127	; 0x7f
 800d228:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d22c:	e016      	b.n	800d25c <UART_Start_Receive_IT+0xa4>
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	689b      	ldr	r3, [r3, #8]
 800d232:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d236:	d10d      	bne.n	800d254 <UART_Start_Receive_IT+0x9c>
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	691b      	ldr	r3, [r3, #16]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d104      	bne.n	800d24a <UART_Start_Receive_IT+0x92>
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	227f      	movs	r2, #127	; 0x7f
 800d244:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d248:	e008      	b.n	800d25c <UART_Start_Receive_IT+0xa4>
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	223f      	movs	r2, #63	; 0x3f
 800d24e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d252:	e003      	b.n	800d25c <UART_Start_Receive_IT+0xa4>
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	2200      	movs	r2, #0
 800d258:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	2200      	movs	r2, #0
 800d260:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	2222      	movs	r2, #34	; 0x22
 800d268:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	3308      	adds	r3, #8
 800d272:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d274:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d276:	e853 3f00 	ldrex	r3, [r3]
 800d27a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800d27c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d27e:	f043 0301 	orr.w	r3, r3, #1
 800d282:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	3308      	adds	r3, #8
 800d28c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800d290:	673a      	str	r2, [r7, #112]	; 0x70
 800d292:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d294:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800d296:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d298:	e841 2300 	strex	r3, r2, [r1]
 800d29c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800d29e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d1e3      	bne.n	800d26c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d2a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d2ac:	d14f      	bne.n	800d34e <UART_Start_Receive_IT+0x196>
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d2b4:	88fa      	ldrh	r2, [r7, #6]
 800d2b6:	429a      	cmp	r2, r3
 800d2b8:	d349      	bcc.n	800d34e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	689b      	ldr	r3, [r3, #8]
 800d2be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d2c2:	d107      	bne.n	800d2d4 <UART_Start_Receive_IT+0x11c>
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	691b      	ldr	r3, [r3, #16]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d103      	bne.n	800d2d4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	4a47      	ldr	r2, [pc, #284]	; (800d3ec <UART_Start_Receive_IT+0x234>)
 800d2d0:	675a      	str	r2, [r3, #116]	; 0x74
 800d2d2:	e002      	b.n	800d2da <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	4a46      	ldr	r2, [pc, #280]	; (800d3f0 <UART_Start_Receive_IT+0x238>)
 800d2d8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	691b      	ldr	r3, [r3, #16]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d01a      	beq.n	800d318 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d2ea:	e853 3f00 	ldrex	r3, [r3]
 800d2ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d2f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d2f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d2f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	461a      	mov	r2, r3
 800d300:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d304:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d306:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d308:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d30a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d30c:	e841 2300 	strex	r3, r2, [r1]
 800d310:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d312:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d314:	2b00      	cmp	r3, #0
 800d316:	d1e4      	bne.n	800d2e2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	3308      	adds	r3, #8
 800d31e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d322:	e853 3f00 	ldrex	r3, [r3]
 800d326:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d32a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d32e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	3308      	adds	r3, #8
 800d336:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800d338:	64ba      	str	r2, [r7, #72]	; 0x48
 800d33a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d33c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d33e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d340:	e841 2300 	strex	r3, r2, [r1]
 800d344:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d346:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d1e5      	bne.n	800d318 <UART_Start_Receive_IT+0x160>
 800d34c:	e046      	b.n	800d3dc <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	689b      	ldr	r3, [r3, #8]
 800d352:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d356:	d107      	bne.n	800d368 <UART_Start_Receive_IT+0x1b0>
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	691b      	ldr	r3, [r3, #16]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d103      	bne.n	800d368 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	4a24      	ldr	r2, [pc, #144]	; (800d3f4 <UART_Start_Receive_IT+0x23c>)
 800d364:	675a      	str	r2, [r3, #116]	; 0x74
 800d366:	e002      	b.n	800d36e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	4a23      	ldr	r2, [pc, #140]	; (800d3f8 <UART_Start_Receive_IT+0x240>)
 800d36c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	691b      	ldr	r3, [r3, #16]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d019      	beq.n	800d3aa <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d37c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d37e:	e853 3f00 	ldrex	r3, [r3]
 800d382:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d386:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800d38a:	677b      	str	r3, [r7, #116]	; 0x74
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	461a      	mov	r2, r3
 800d392:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d394:	637b      	str	r3, [r7, #52]	; 0x34
 800d396:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d398:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d39a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d39c:	e841 2300 	strex	r3, r2, [r1]
 800d3a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d1e6      	bne.n	800d376 <UART_Start_Receive_IT+0x1be>
 800d3a8:	e018      	b.n	800d3dc <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3b0:	697b      	ldr	r3, [r7, #20]
 800d3b2:	e853 3f00 	ldrex	r3, [r3]
 800d3b6:	613b      	str	r3, [r7, #16]
   return(result);
 800d3b8:	693b      	ldr	r3, [r7, #16]
 800d3ba:	f043 0320 	orr.w	r3, r3, #32
 800d3be:	67bb      	str	r3, [r7, #120]	; 0x78
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	461a      	mov	r2, r3
 800d3c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d3c8:	623b      	str	r3, [r7, #32]
 800d3ca:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3cc:	69f9      	ldr	r1, [r7, #28]
 800d3ce:	6a3a      	ldr	r2, [r7, #32]
 800d3d0:	e841 2300 	strex	r3, r2, [r1]
 800d3d4:	61bb      	str	r3, [r7, #24]
   return(result);
 800d3d6:	69bb      	ldr	r3, [r7, #24]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d1e6      	bne.n	800d3aa <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800d3dc:	2300      	movs	r3, #0
}
 800d3de:	4618      	mov	r0, r3
 800d3e0:	378c      	adds	r7, #140	; 0x8c
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e8:	4770      	bx	lr
 800d3ea:	bf00      	nop
 800d3ec:	0800dc1d 	.word	0x0800dc1d
 800d3f0:	0800d8bd 	.word	0x0800d8bd
 800d3f4:	0800d705 	.word	0x0800d705
 800d3f8:	0800d54d 	.word	0x0800d54d

0800d3fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d3fc:	b480      	push	{r7}
 800d3fe:	b095      	sub	sp, #84	; 0x54
 800d400:	af00      	add	r7, sp, #0
 800d402:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d40a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d40c:	e853 3f00 	ldrex	r3, [r3]
 800d410:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d414:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d418:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	461a      	mov	r2, r3
 800d420:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d422:	643b      	str	r3, [r7, #64]	; 0x40
 800d424:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d426:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d428:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d42a:	e841 2300 	strex	r3, r2, [r1]
 800d42e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d432:	2b00      	cmp	r3, #0
 800d434:	d1e6      	bne.n	800d404 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	3308      	adds	r3, #8
 800d43c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d43e:	6a3b      	ldr	r3, [r7, #32]
 800d440:	e853 3f00 	ldrex	r3, [r3]
 800d444:	61fb      	str	r3, [r7, #28]
   return(result);
 800d446:	69fa      	ldr	r2, [r7, #28]
 800d448:	4b1e      	ldr	r3, [pc, #120]	; (800d4c4 <UART_EndRxTransfer+0xc8>)
 800d44a:	4013      	ands	r3, r2
 800d44c:	64bb      	str	r3, [r7, #72]	; 0x48
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	3308      	adds	r3, #8
 800d454:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d456:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d458:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d45a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d45c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d45e:	e841 2300 	strex	r3, r2, [r1]
 800d462:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d466:	2b00      	cmp	r3, #0
 800d468:	d1e5      	bne.n	800d436 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d46e:	2b01      	cmp	r3, #1
 800d470:	d118      	bne.n	800d4a4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	e853 3f00 	ldrex	r3, [r3]
 800d47e:	60bb      	str	r3, [r7, #8]
   return(result);
 800d480:	68bb      	ldr	r3, [r7, #8]
 800d482:	f023 0310 	bic.w	r3, r3, #16
 800d486:	647b      	str	r3, [r7, #68]	; 0x44
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	461a      	mov	r2, r3
 800d48e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d490:	61bb      	str	r3, [r7, #24]
 800d492:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d494:	6979      	ldr	r1, [r7, #20]
 800d496:	69ba      	ldr	r2, [r7, #24]
 800d498:	e841 2300 	strex	r3, r2, [r1]
 800d49c:	613b      	str	r3, [r7, #16]
   return(result);
 800d49e:	693b      	ldr	r3, [r7, #16]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d1e6      	bne.n	800d472 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	2220      	movs	r2, #32
 800d4a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	2200      	movs	r2, #0
 800d4b0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	2200      	movs	r2, #0
 800d4b6:	675a      	str	r2, [r3, #116]	; 0x74
}
 800d4b8:	bf00      	nop
 800d4ba:	3754      	adds	r7, #84	; 0x54
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c2:	4770      	bx	lr
 800d4c4:	effffffe 	.word	0xeffffffe

0800d4c8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d4c8:	b580      	push	{r7, lr}
 800d4ca:	b084      	sub	sp, #16
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	2200      	movs	r2, #0
 800d4da:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	2200      	movs	r2, #0
 800d4e2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d4e6:	68f8      	ldr	r0, [r7, #12]
 800d4e8:	f7fe ff34 	bl	800c354 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d4ec:	bf00      	nop
 800d4ee:	3710      	adds	r7, #16
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	bd80      	pop	{r7, pc}

0800d4f4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d4f4:	b580      	push	{r7, lr}
 800d4f6:	b088      	sub	sp, #32
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	e853 3f00 	ldrex	r3, [r3]
 800d508:	60bb      	str	r3, [r7, #8]
   return(result);
 800d50a:	68bb      	ldr	r3, [r7, #8]
 800d50c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d510:	61fb      	str	r3, [r7, #28]
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	461a      	mov	r2, r3
 800d518:	69fb      	ldr	r3, [r7, #28]
 800d51a:	61bb      	str	r3, [r7, #24]
 800d51c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d51e:	6979      	ldr	r1, [r7, #20]
 800d520:	69ba      	ldr	r2, [r7, #24]
 800d522:	e841 2300 	strex	r3, r2, [r1]
 800d526:	613b      	str	r3, [r7, #16]
   return(result);
 800d528:	693b      	ldr	r3, [r7, #16]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d1e6      	bne.n	800d4fc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	2220      	movs	r2, #32
 800d532:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	2200      	movs	r2, #0
 800d53a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d53c:	6878      	ldr	r0, [r7, #4]
 800d53e:	f7fe feff 	bl	800c340 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d542:	bf00      	nop
 800d544:	3720      	adds	r7, #32
 800d546:	46bd      	mov	sp, r7
 800d548:	bd80      	pop	{r7, pc}
	...

0800d54c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b09c      	sub	sp, #112	; 0x70
 800d550:	af00      	add	r7, sp, #0
 800d552:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d55a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d564:	2b22      	cmp	r3, #34	; 0x22
 800d566:	f040 80be 	bne.w	800d6e6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d570:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d574:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800d578:	b2d9      	uxtb	r1, r3
 800d57a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800d57e:	b2da      	uxtb	r2, r3
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d584:	400a      	ands	r2, r1
 800d586:	b2d2      	uxtb	r2, r2
 800d588:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d58e:	1c5a      	adds	r2, r3, #1
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d59a:	b29b      	uxth	r3, r3
 800d59c:	3b01      	subs	r3, #1
 800d59e:	b29a      	uxth	r2, r3
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d5ac:	b29b      	uxth	r3, r3
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	f040 80a1 	bne.w	800d6f6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5bc:	e853 3f00 	ldrex	r3, [r3]
 800d5c0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d5c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d5c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d5c8:	66bb      	str	r3, [r7, #104]	; 0x68
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	461a      	mov	r2, r3
 800d5d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d5d2:	65bb      	str	r3, [r7, #88]	; 0x58
 800d5d4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5d6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d5d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d5da:	e841 2300 	strex	r3, r2, [r1]
 800d5de:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d5e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d1e6      	bne.n	800d5b4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	3308      	adds	r3, #8
 800d5ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5f0:	e853 3f00 	ldrex	r3, [r3]
 800d5f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d5f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5f8:	f023 0301 	bic.w	r3, r3, #1
 800d5fc:	667b      	str	r3, [r7, #100]	; 0x64
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	3308      	adds	r3, #8
 800d604:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d606:	647a      	str	r2, [r7, #68]	; 0x44
 800d608:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d60a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d60c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d60e:	e841 2300 	strex	r3, r2, [r1]
 800d612:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d616:	2b00      	cmp	r3, #0
 800d618:	d1e5      	bne.n	800d5e6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	2220      	movs	r2, #32
 800d61e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	2200      	movs	r2, #0
 800d626:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	2200      	movs	r2, #0
 800d62c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	4a33      	ldr	r2, [pc, #204]	; (800d700 <UART_RxISR_8BIT+0x1b4>)
 800d634:	4293      	cmp	r3, r2
 800d636:	d01f      	beq.n	800d678 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	685b      	ldr	r3, [r3, #4]
 800d63e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d642:	2b00      	cmp	r3, #0
 800d644:	d018      	beq.n	800d678 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d64c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d64e:	e853 3f00 	ldrex	r3, [r3]
 800d652:	623b      	str	r3, [r7, #32]
   return(result);
 800d654:	6a3b      	ldr	r3, [r7, #32]
 800d656:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d65a:	663b      	str	r3, [r7, #96]	; 0x60
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	461a      	mov	r2, r3
 800d662:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d664:	633b      	str	r3, [r7, #48]	; 0x30
 800d666:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d668:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d66a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d66c:	e841 2300 	strex	r3, r2, [r1]
 800d670:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d674:	2b00      	cmp	r3, #0
 800d676:	d1e6      	bne.n	800d646 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d67c:	2b01      	cmp	r3, #1
 800d67e:	d12e      	bne.n	800d6de <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	2200      	movs	r2, #0
 800d684:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d68c:	693b      	ldr	r3, [r7, #16]
 800d68e:	e853 3f00 	ldrex	r3, [r3]
 800d692:	60fb      	str	r3, [r7, #12]
   return(result);
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	f023 0310 	bic.w	r3, r3, #16
 800d69a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	461a      	mov	r2, r3
 800d6a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d6a4:	61fb      	str	r3, [r7, #28]
 800d6a6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6a8:	69b9      	ldr	r1, [r7, #24]
 800d6aa:	69fa      	ldr	r2, [r7, #28]
 800d6ac:	e841 2300 	strex	r3, r2, [r1]
 800d6b0:	617b      	str	r3, [r7, #20]
   return(result);
 800d6b2:	697b      	ldr	r3, [r7, #20]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d1e6      	bne.n	800d686 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	69db      	ldr	r3, [r3, #28]
 800d6be:	f003 0310 	and.w	r3, r3, #16
 800d6c2:	2b10      	cmp	r3, #16
 800d6c4:	d103      	bne.n	800d6ce <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	2210      	movs	r2, #16
 800d6cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d6d4:	4619      	mov	r1, r3
 800d6d6:	6878      	ldr	r0, [r7, #4]
 800d6d8:	f7fe fe46 	bl	800c368 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d6dc:	e00b      	b.n	800d6f6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800d6de:	6878      	ldr	r0, [r7, #4]
 800d6e0:	f7f4 fa12 	bl	8001b08 <HAL_UART_RxCpltCallback>
}
 800d6e4:	e007      	b.n	800d6f6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	699a      	ldr	r2, [r3, #24]
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	f042 0208 	orr.w	r2, r2, #8
 800d6f4:	619a      	str	r2, [r3, #24]
}
 800d6f6:	bf00      	nop
 800d6f8:	3770      	adds	r7, #112	; 0x70
 800d6fa:	46bd      	mov	sp, r7
 800d6fc:	bd80      	pop	{r7, pc}
 800d6fe:	bf00      	nop
 800d700:	58000c00 	.word	0x58000c00

0800d704 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d704:	b580      	push	{r7, lr}
 800d706:	b09c      	sub	sp, #112	; 0x70
 800d708:	af00      	add	r7, sp, #0
 800d70a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d712:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d71c:	2b22      	cmp	r3, #34	; 0x22
 800d71e:	f040 80be 	bne.w	800d89e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d728:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d730:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800d732:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800d736:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800d73a:	4013      	ands	r3, r2
 800d73c:	b29a      	uxth	r2, r3
 800d73e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d740:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d746:	1c9a      	adds	r2, r3, #2
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d752:	b29b      	uxth	r3, r3
 800d754:	3b01      	subs	r3, #1
 800d756:	b29a      	uxth	r2, r3
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d764:	b29b      	uxth	r3, r3
 800d766:	2b00      	cmp	r3, #0
 800d768:	f040 80a1 	bne.w	800d8ae <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d772:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d774:	e853 3f00 	ldrex	r3, [r3]
 800d778:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800d77a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d77c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d780:	667b      	str	r3, [r7, #100]	; 0x64
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	461a      	mov	r2, r3
 800d788:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d78a:	657b      	str	r3, [r7, #84]	; 0x54
 800d78c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d78e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d790:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d792:	e841 2300 	strex	r3, r2, [r1]
 800d796:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d798:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d1e6      	bne.n	800d76c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	3308      	adds	r3, #8
 800d7a4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7a8:	e853 3f00 	ldrex	r3, [r3]
 800d7ac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7b0:	f023 0301 	bic.w	r3, r3, #1
 800d7b4:	663b      	str	r3, [r7, #96]	; 0x60
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	3308      	adds	r3, #8
 800d7bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d7be:	643a      	str	r2, [r7, #64]	; 0x40
 800d7c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d7c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d7c6:	e841 2300 	strex	r3, r2, [r1]
 800d7ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d7cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d1e5      	bne.n	800d79e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	2220      	movs	r2, #32
 800d7d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	2200      	movs	r2, #0
 800d7de:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	4a33      	ldr	r2, [pc, #204]	; (800d8b8 <UART_RxISR_16BIT+0x1b4>)
 800d7ec:	4293      	cmp	r3, r2
 800d7ee:	d01f      	beq.n	800d830 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	685b      	ldr	r3, [r3, #4]
 800d7f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d018      	beq.n	800d830 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d804:	6a3b      	ldr	r3, [r7, #32]
 800d806:	e853 3f00 	ldrex	r3, [r3]
 800d80a:	61fb      	str	r3, [r7, #28]
   return(result);
 800d80c:	69fb      	ldr	r3, [r7, #28]
 800d80e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d812:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	461a      	mov	r2, r3
 800d81a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d81c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d81e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d820:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d822:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d824:	e841 2300 	strex	r3, r2, [r1]
 800d828:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d82a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d1e6      	bne.n	800d7fe <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d834:	2b01      	cmp	r3, #1
 800d836:	d12e      	bne.n	800d896 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	2200      	movs	r2, #0
 800d83c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	e853 3f00 	ldrex	r3, [r3]
 800d84a:	60bb      	str	r3, [r7, #8]
   return(result);
 800d84c:	68bb      	ldr	r3, [r7, #8]
 800d84e:	f023 0310 	bic.w	r3, r3, #16
 800d852:	65bb      	str	r3, [r7, #88]	; 0x58
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	461a      	mov	r2, r3
 800d85a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d85c:	61bb      	str	r3, [r7, #24]
 800d85e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d860:	6979      	ldr	r1, [r7, #20]
 800d862:	69ba      	ldr	r2, [r7, #24]
 800d864:	e841 2300 	strex	r3, r2, [r1]
 800d868:	613b      	str	r3, [r7, #16]
   return(result);
 800d86a:	693b      	ldr	r3, [r7, #16]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d1e6      	bne.n	800d83e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	69db      	ldr	r3, [r3, #28]
 800d876:	f003 0310 	and.w	r3, r3, #16
 800d87a:	2b10      	cmp	r3, #16
 800d87c:	d103      	bne.n	800d886 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	2210      	movs	r2, #16
 800d884:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d88c:	4619      	mov	r1, r3
 800d88e:	6878      	ldr	r0, [r7, #4]
 800d890:	f7fe fd6a 	bl	800c368 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d894:	e00b      	b.n	800d8ae <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800d896:	6878      	ldr	r0, [r7, #4]
 800d898:	f7f4 f936 	bl	8001b08 <HAL_UART_RxCpltCallback>
}
 800d89c:	e007      	b.n	800d8ae <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	699a      	ldr	r2, [r3, #24]
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	f042 0208 	orr.w	r2, r2, #8
 800d8ac:	619a      	str	r2, [r3, #24]
}
 800d8ae:	bf00      	nop
 800d8b0:	3770      	adds	r7, #112	; 0x70
 800d8b2:	46bd      	mov	sp, r7
 800d8b4:	bd80      	pop	{r7, pc}
 800d8b6:	bf00      	nop
 800d8b8:	58000c00 	.word	0x58000c00

0800d8bc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	b0ac      	sub	sp, #176	; 0xb0
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d8ca:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	69db      	ldr	r3, [r3, #28]
 800d8d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	689b      	ldr	r3, [r3, #8]
 800d8e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d8f2:	2b22      	cmp	r3, #34	; 0x22
 800d8f4:	f040 8180 	bne.w	800dbf8 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d8fe:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d902:	e123      	b.n	800db4c <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d90a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d90e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800d912:	b2d9      	uxtb	r1, r3
 800d914:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800d918:	b2da      	uxtb	r2, r3
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d91e:	400a      	ands	r2, r1
 800d920:	b2d2      	uxtb	r2, r2
 800d922:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d928:	1c5a      	adds	r2, r3, #1
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d934:	b29b      	uxth	r3, r3
 800d936:	3b01      	subs	r3, #1
 800d938:	b29a      	uxth	r2, r3
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	69db      	ldr	r3, [r3, #28]
 800d946:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d94a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d94e:	f003 0307 	and.w	r3, r3, #7
 800d952:	2b00      	cmp	r3, #0
 800d954:	d053      	beq.n	800d9fe <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d956:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d95a:	f003 0301 	and.w	r3, r3, #1
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d011      	beq.n	800d986 <UART_RxISR_8BIT_FIFOEN+0xca>
 800d962:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d00b      	beq.n	800d986 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	2201      	movs	r2, #1
 800d974:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d97c:	f043 0201 	orr.w	r2, r3, #1
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d986:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d98a:	f003 0302 	and.w	r3, r3, #2
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d011      	beq.n	800d9b6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800d992:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d996:	f003 0301 	and.w	r3, r3, #1
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d00b      	beq.n	800d9b6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	2202      	movs	r2, #2
 800d9a4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d9ac:	f043 0204 	orr.w	r2, r3, #4
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d9b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d9ba:	f003 0304 	and.w	r3, r3, #4
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d011      	beq.n	800d9e6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800d9c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d9c6:	f003 0301 	and.w	r3, r3, #1
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d00b      	beq.n	800d9e6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	2204      	movs	r2, #4
 800d9d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d9dc:	f043 0202 	orr.w	r2, r3, #2
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d006      	beq.n	800d9fe <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d9f0:	6878      	ldr	r0, [r7, #4]
 800d9f2:	f7fe fcaf 	bl	800c354 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	2200      	movs	r2, #0
 800d9fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800da04:	b29b      	uxth	r3, r3
 800da06:	2b00      	cmp	r3, #0
 800da08:	f040 80a0 	bne.w	800db4c <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800da14:	e853 3f00 	ldrex	r3, [r3]
 800da18:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800da1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800da20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	461a      	mov	r2, r3
 800da2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800da2e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800da30:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da32:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800da34:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800da36:	e841 2300 	strex	r3, r2, [r1]
 800da3a:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800da3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d1e4      	bne.n	800da0c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	3308      	adds	r3, #8
 800da48:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da4c:	e853 3f00 	ldrex	r3, [r3]
 800da50:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800da52:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800da54:	4b6e      	ldr	r3, [pc, #440]	; (800dc10 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800da56:	4013      	ands	r3, r2
 800da58:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	3308      	adds	r3, #8
 800da62:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800da66:	66ba      	str	r2, [r7, #104]	; 0x68
 800da68:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da6a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800da6c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800da6e:	e841 2300 	strex	r3, r2, [r1]
 800da72:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800da74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800da76:	2b00      	cmp	r3, #0
 800da78:	d1e3      	bne.n	800da42 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	2220      	movs	r2, #32
 800da7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	2200      	movs	r2, #0
 800da86:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	2200      	movs	r2, #0
 800da8c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	4a60      	ldr	r2, [pc, #384]	; (800dc14 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800da94:	4293      	cmp	r3, r2
 800da96:	d021      	beq.n	800dadc <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	685b      	ldr	r3, [r3, #4]
 800da9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d01a      	beq.n	800dadc <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800daac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800daae:	e853 3f00 	ldrex	r3, [r3]
 800dab2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800dab4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dab6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800daba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	461a      	mov	r2, r3
 800dac4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dac8:	657b      	str	r3, [r7, #84]	; 0x54
 800daca:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dacc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dace:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dad0:	e841 2300 	strex	r3, r2, [r1]
 800dad4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800dad6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d1e4      	bne.n	800daa6 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dae0:	2b01      	cmp	r3, #1
 800dae2:	d130      	bne.n	800db46 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	2200      	movs	r2, #0
 800dae8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800daf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800daf2:	e853 3f00 	ldrex	r3, [r3]
 800daf6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800daf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dafa:	f023 0310 	bic.w	r3, r3, #16
 800dafe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	461a      	mov	r2, r3
 800db08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800db0c:	643b      	str	r3, [r7, #64]	; 0x40
 800db0e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db10:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800db12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800db14:	e841 2300 	strex	r3, r2, [r1]
 800db18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800db1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d1e4      	bne.n	800daea <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	69db      	ldr	r3, [r3, #28]
 800db26:	f003 0310 	and.w	r3, r3, #16
 800db2a:	2b10      	cmp	r3, #16
 800db2c:	d103      	bne.n	800db36 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	2210      	movs	r2, #16
 800db34:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800db3c:	4619      	mov	r1, r3
 800db3e:	6878      	ldr	r0, [r7, #4]
 800db40:	f7fe fc12 	bl	800c368 <HAL_UARTEx_RxEventCallback>
 800db44:	e002      	b.n	800db4c <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800db46:	6878      	ldr	r0, [r7, #4]
 800db48:	f7f3 ffde 	bl	8001b08 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800db4c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800db50:	2b00      	cmp	r3, #0
 800db52:	d006      	beq.n	800db62 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800db54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800db58:	f003 0320 	and.w	r3, r3, #32
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	f47f aed1 	bne.w	800d904 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800db68:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800db6c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800db70:	2b00      	cmp	r3, #0
 800db72:	d049      	beq.n	800dc08 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800db7a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800db7e:	429a      	cmp	r2, r3
 800db80:	d242      	bcs.n	800dc08 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	3308      	adds	r3, #8
 800db88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db8a:	6a3b      	ldr	r3, [r7, #32]
 800db8c:	e853 3f00 	ldrex	r3, [r3]
 800db90:	61fb      	str	r3, [r7, #28]
   return(result);
 800db92:	69fb      	ldr	r3, [r7, #28]
 800db94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800db98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	3308      	adds	r3, #8
 800dba2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800dba6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800dba8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbaa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dbac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dbae:	e841 2300 	strex	r3, r2, [r1]
 800dbb2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dbb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d1e3      	bne.n	800db82 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	4a16      	ldr	r2, [pc, #88]	; (800dc18 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800dbbe:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	e853 3f00 	ldrex	r3, [r3]
 800dbcc:	60bb      	str	r3, [r7, #8]
   return(result);
 800dbce:	68bb      	ldr	r3, [r7, #8]
 800dbd0:	f043 0320 	orr.w	r3, r3, #32
 800dbd4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	461a      	mov	r2, r3
 800dbde:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800dbe2:	61bb      	str	r3, [r7, #24]
 800dbe4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbe6:	6979      	ldr	r1, [r7, #20]
 800dbe8:	69ba      	ldr	r2, [r7, #24]
 800dbea:	e841 2300 	strex	r3, r2, [r1]
 800dbee:	613b      	str	r3, [r7, #16]
   return(result);
 800dbf0:	693b      	ldr	r3, [r7, #16]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d1e4      	bne.n	800dbc0 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800dbf6:	e007      	b.n	800dc08 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	699a      	ldr	r2, [r3, #24]
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	f042 0208 	orr.w	r2, r2, #8
 800dc06:	619a      	str	r2, [r3, #24]
}
 800dc08:	bf00      	nop
 800dc0a:	37b0      	adds	r7, #176	; 0xb0
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	bd80      	pop	{r7, pc}
 800dc10:	effffffe 	.word	0xeffffffe
 800dc14:	58000c00 	.word	0x58000c00
 800dc18:	0800d54d 	.word	0x0800d54d

0800dc1c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b0ae      	sub	sp, #184	; 0xb8
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dc2a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	69db      	ldr	r3, [r3, #28]
 800dc34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	689b      	ldr	r3, [r3, #8]
 800dc48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dc52:	2b22      	cmp	r3, #34	; 0x22
 800dc54:	f040 8184 	bne.w	800df60 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800dc5e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800dc62:	e127      	b.n	800deb4 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc6a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dc72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800dc76:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800dc7a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800dc7e:	4013      	ands	r3, r2
 800dc80:	b29a      	uxth	r2, r3
 800dc82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800dc86:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dc8c:	1c9a      	adds	r2, r3, #2
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dc98:	b29b      	uxth	r3, r3
 800dc9a:	3b01      	subs	r3, #1
 800dc9c:	b29a      	uxth	r2, r3
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	69db      	ldr	r3, [r3, #28]
 800dcaa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800dcae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dcb2:	f003 0307 	and.w	r3, r3, #7
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d053      	beq.n	800dd62 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800dcba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dcbe:	f003 0301 	and.w	r3, r3, #1
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d011      	beq.n	800dcea <UART_RxISR_16BIT_FIFOEN+0xce>
 800dcc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800dcca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d00b      	beq.n	800dcea <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	2201      	movs	r2, #1
 800dcd8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dce0:	f043 0201 	orr.w	r2, r3, #1
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dcea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dcee:	f003 0302 	and.w	r3, r3, #2
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d011      	beq.n	800dd1a <UART_RxISR_16BIT_FIFOEN+0xfe>
 800dcf6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800dcfa:	f003 0301 	and.w	r3, r3, #1
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d00b      	beq.n	800dd1a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	2202      	movs	r2, #2
 800dd08:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd10:	f043 0204 	orr.w	r2, r3, #4
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dd1a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dd1e:	f003 0304 	and.w	r3, r3, #4
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d011      	beq.n	800dd4a <UART_RxISR_16BIT_FIFOEN+0x12e>
 800dd26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800dd2a:	f003 0301 	and.w	r3, r3, #1
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d00b      	beq.n	800dd4a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	2204      	movs	r2, #4
 800dd38:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd40:	f043 0202 	orr.w	r2, r3, #2
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d006      	beq.n	800dd62 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800dd54:	6878      	ldr	r0, [r7, #4]
 800dd56:	f7fe fafd 	bl	800c354 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	2200      	movs	r2, #0
 800dd5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dd68:	b29b      	uxth	r3, r3
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	f040 80a2 	bne.w	800deb4 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dd78:	e853 3f00 	ldrex	r3, [r3]
 800dd7c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800dd7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dd80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dd84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	461a      	mov	r2, r3
 800dd8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800dd92:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800dd96:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd98:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800dd9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800dd9e:	e841 2300 	strex	r3, r2, [r1]
 800dda2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800dda4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d1e2      	bne.n	800dd70 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	3308      	adds	r3, #8
 800ddb0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ddb4:	e853 3f00 	ldrex	r3, [r3]
 800ddb8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ddba:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ddbc:	4b6e      	ldr	r3, [pc, #440]	; (800df78 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800ddbe:	4013      	ands	r3, r2
 800ddc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	3308      	adds	r3, #8
 800ddca:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800ddce:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ddd0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddd2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ddd4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ddd6:	e841 2300 	strex	r3, r2, [r1]
 800ddda:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800dddc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d1e3      	bne.n	800ddaa <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	2220      	movs	r2, #32
 800dde6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	2200      	movs	r2, #0
 800ddee:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	2200      	movs	r2, #0
 800ddf4:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	4a60      	ldr	r2, [pc, #384]	; (800df7c <UART_RxISR_16BIT_FIFOEN+0x360>)
 800ddfc:	4293      	cmp	r3, r2
 800ddfe:	d021      	beq.n	800de44 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	685b      	ldr	r3, [r3, #4]
 800de06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d01a      	beq.n	800de44 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de16:	e853 3f00 	ldrex	r3, [r3]
 800de1a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800de1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de1e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800de22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	461a      	mov	r2, r3
 800de2c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800de30:	65bb      	str	r3, [r7, #88]	; 0x58
 800de32:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de34:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800de36:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800de38:	e841 2300 	strex	r3, r2, [r1]
 800de3c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800de3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de40:	2b00      	cmp	r3, #0
 800de42:	d1e4      	bne.n	800de0e <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de48:	2b01      	cmp	r3, #1
 800de4a:	d130      	bne.n	800deae <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	2200      	movs	r2, #0
 800de50:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de5a:	e853 3f00 	ldrex	r3, [r3]
 800de5e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800de60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de62:	f023 0310 	bic.w	r3, r3, #16
 800de66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	461a      	mov	r2, r3
 800de70:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800de74:	647b      	str	r3, [r7, #68]	; 0x44
 800de76:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de78:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800de7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800de7c:	e841 2300 	strex	r3, r2, [r1]
 800de80:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800de82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de84:	2b00      	cmp	r3, #0
 800de86:	d1e4      	bne.n	800de52 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	69db      	ldr	r3, [r3, #28]
 800de8e:	f003 0310 	and.w	r3, r3, #16
 800de92:	2b10      	cmp	r3, #16
 800de94:	d103      	bne.n	800de9e <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	2210      	movs	r2, #16
 800de9c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800dea4:	4619      	mov	r1, r3
 800dea6:	6878      	ldr	r0, [r7, #4]
 800dea8:	f7fe fa5e 	bl	800c368 <HAL_UARTEx_RxEventCallback>
 800deac:	e002      	b.n	800deb4 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800deae:	6878      	ldr	r0, [r7, #4]
 800deb0:	f7f3 fe2a 	bl	8001b08 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800deb4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d006      	beq.n	800deca <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800debc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dec0:	f003 0320 	and.w	r3, r3, #32
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	f47f aecd 	bne.w	800dc64 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ded0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ded4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d049      	beq.n	800df70 <UART_RxISR_16BIT_FIFOEN+0x354>
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800dee2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800dee6:	429a      	cmp	r2, r3
 800dee8:	d242      	bcs.n	800df70 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	3308      	adds	r3, #8
 800def0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800def2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800def4:	e853 3f00 	ldrex	r3, [r3]
 800def8:	623b      	str	r3, [r7, #32]
   return(result);
 800defa:	6a3b      	ldr	r3, [r7, #32]
 800defc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800df00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	3308      	adds	r3, #8
 800df0a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800df0e:	633a      	str	r2, [r7, #48]	; 0x30
 800df10:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800df14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df16:	e841 2300 	strex	r3, r2, [r1]
 800df1a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800df1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d1e3      	bne.n	800deea <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	4a16      	ldr	r2, [pc, #88]	; (800df80 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800df26:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df2e:	693b      	ldr	r3, [r7, #16]
 800df30:	e853 3f00 	ldrex	r3, [r3]
 800df34:	60fb      	str	r3, [r7, #12]
   return(result);
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	f043 0320 	orr.w	r3, r3, #32
 800df3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	461a      	mov	r2, r3
 800df46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800df4a:	61fb      	str	r3, [r7, #28]
 800df4c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df4e:	69b9      	ldr	r1, [r7, #24]
 800df50:	69fa      	ldr	r2, [r7, #28]
 800df52:	e841 2300 	strex	r3, r2, [r1]
 800df56:	617b      	str	r3, [r7, #20]
   return(result);
 800df58:	697b      	ldr	r3, [r7, #20]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d1e4      	bne.n	800df28 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800df5e:	e007      	b.n	800df70 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	699a      	ldr	r2, [r3, #24]
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	f042 0208 	orr.w	r2, r2, #8
 800df6e:	619a      	str	r2, [r3, #24]
}
 800df70:	bf00      	nop
 800df72:	37b8      	adds	r7, #184	; 0xb8
 800df74:	46bd      	mov	sp, r7
 800df76:	bd80      	pop	{r7, pc}
 800df78:	effffffe 	.word	0xeffffffe
 800df7c:	58000c00 	.word	0x58000c00
 800df80:	0800d705 	.word	0x0800d705

0800df84 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800df84:	b480      	push	{r7}
 800df86:	b083      	sub	sp, #12
 800df88:	af00      	add	r7, sp, #0
 800df8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800df8c:	bf00      	nop
 800df8e:	370c      	adds	r7, #12
 800df90:	46bd      	mov	sp, r7
 800df92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df96:	4770      	bx	lr

0800df98 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800df98:	b480      	push	{r7}
 800df9a:	b083      	sub	sp, #12
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800dfa0:	bf00      	nop
 800dfa2:	370c      	adds	r7, #12
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfaa:	4770      	bx	lr

0800dfac <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800dfac:	b480      	push	{r7}
 800dfae:	b083      	sub	sp, #12
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800dfb4:	bf00      	nop
 800dfb6:	370c      	adds	r7, #12
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfbe:	4770      	bx	lr

0800dfc0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800dfc0:	b480      	push	{r7}
 800dfc2:	b085      	sub	sp, #20
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800dfce:	2b01      	cmp	r3, #1
 800dfd0:	d101      	bne.n	800dfd6 <HAL_UARTEx_DisableFifoMode+0x16>
 800dfd2:	2302      	movs	r3, #2
 800dfd4:	e027      	b.n	800e026 <HAL_UARTEx_DisableFifoMode+0x66>
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	2201      	movs	r2, #1
 800dfda:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	2224      	movs	r2, #36	; 0x24
 800dfe2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	681a      	ldr	r2, [r3, #0]
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	f022 0201 	bic.w	r2, r2, #1
 800dffc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e004:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	2200      	movs	r2, #0
 800e00a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	68fa      	ldr	r2, [r7, #12]
 800e012:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	2220      	movs	r2, #32
 800e018:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	2200      	movs	r2, #0
 800e020:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e024:	2300      	movs	r3, #0
}
 800e026:	4618      	mov	r0, r3
 800e028:	3714      	adds	r7, #20
 800e02a:	46bd      	mov	sp, r7
 800e02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e030:	4770      	bx	lr

0800e032 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e032:	b580      	push	{r7, lr}
 800e034:	b084      	sub	sp, #16
 800e036:	af00      	add	r7, sp, #0
 800e038:	6078      	str	r0, [r7, #4]
 800e03a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e042:	2b01      	cmp	r3, #1
 800e044:	d101      	bne.n	800e04a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e046:	2302      	movs	r3, #2
 800e048:	e02d      	b.n	800e0a6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	2201      	movs	r2, #1
 800e04e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	2224      	movs	r2, #36	; 0x24
 800e056:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	681a      	ldr	r2, [r3, #0]
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	f022 0201 	bic.w	r2, r2, #1
 800e070:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	689b      	ldr	r3, [r3, #8]
 800e078:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	683a      	ldr	r2, [r7, #0]
 800e082:	430a      	orrs	r2, r1
 800e084:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e086:	6878      	ldr	r0, [r7, #4]
 800e088:	f000 f850 	bl	800e12c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	68fa      	ldr	r2, [r7, #12]
 800e092:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	2220      	movs	r2, #32
 800e098:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	2200      	movs	r2, #0
 800e0a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e0a4:	2300      	movs	r3, #0
}
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	3710      	adds	r7, #16
 800e0aa:	46bd      	mov	sp, r7
 800e0ac:	bd80      	pop	{r7, pc}

0800e0ae <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e0ae:	b580      	push	{r7, lr}
 800e0b0:	b084      	sub	sp, #16
 800e0b2:	af00      	add	r7, sp, #0
 800e0b4:	6078      	str	r0, [r7, #4]
 800e0b6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e0be:	2b01      	cmp	r3, #1
 800e0c0:	d101      	bne.n	800e0c6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e0c2:	2302      	movs	r3, #2
 800e0c4:	e02d      	b.n	800e122 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	2201      	movs	r2, #1
 800e0ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	2224      	movs	r2, #36	; 0x24
 800e0d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	681a      	ldr	r2, [r3, #0]
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	f022 0201 	bic.w	r2, r2, #1
 800e0ec:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	689b      	ldr	r3, [r3, #8]
 800e0f4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	683a      	ldr	r2, [r7, #0]
 800e0fe:	430a      	orrs	r2, r1
 800e100:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e102:	6878      	ldr	r0, [r7, #4]
 800e104:	f000 f812 	bl	800e12c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	68fa      	ldr	r2, [r7, #12]
 800e10e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	2220      	movs	r2, #32
 800e114:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	2200      	movs	r2, #0
 800e11c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e120:	2300      	movs	r3, #0
}
 800e122:	4618      	mov	r0, r3
 800e124:	3710      	adds	r7, #16
 800e126:	46bd      	mov	sp, r7
 800e128:	bd80      	pop	{r7, pc}
	...

0800e12c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e12c:	b480      	push	{r7}
 800e12e:	b085      	sub	sp, #20
 800e130:	af00      	add	r7, sp, #0
 800e132:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d108      	bne.n	800e14e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	2201      	movs	r2, #1
 800e140:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	2201      	movs	r2, #1
 800e148:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e14c:	e031      	b.n	800e1b2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e14e:	2310      	movs	r3, #16
 800e150:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e152:	2310      	movs	r3, #16
 800e154:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	689b      	ldr	r3, [r3, #8]
 800e15c:	0e5b      	lsrs	r3, r3, #25
 800e15e:	b2db      	uxtb	r3, r3
 800e160:	f003 0307 	and.w	r3, r3, #7
 800e164:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	689b      	ldr	r3, [r3, #8]
 800e16c:	0f5b      	lsrs	r3, r3, #29
 800e16e:	b2db      	uxtb	r3, r3
 800e170:	f003 0307 	and.w	r3, r3, #7
 800e174:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e176:	7bbb      	ldrb	r3, [r7, #14]
 800e178:	7b3a      	ldrb	r2, [r7, #12]
 800e17a:	4911      	ldr	r1, [pc, #68]	; (800e1c0 <UARTEx_SetNbDataToProcess+0x94>)
 800e17c:	5c8a      	ldrb	r2, [r1, r2]
 800e17e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e182:	7b3a      	ldrb	r2, [r7, #12]
 800e184:	490f      	ldr	r1, [pc, #60]	; (800e1c4 <UARTEx_SetNbDataToProcess+0x98>)
 800e186:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e188:	fb93 f3f2 	sdiv	r3, r3, r2
 800e18c:	b29a      	uxth	r2, r3
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e194:	7bfb      	ldrb	r3, [r7, #15]
 800e196:	7b7a      	ldrb	r2, [r7, #13]
 800e198:	4909      	ldr	r1, [pc, #36]	; (800e1c0 <UARTEx_SetNbDataToProcess+0x94>)
 800e19a:	5c8a      	ldrb	r2, [r1, r2]
 800e19c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e1a0:	7b7a      	ldrb	r2, [r7, #13]
 800e1a2:	4908      	ldr	r1, [pc, #32]	; (800e1c4 <UARTEx_SetNbDataToProcess+0x98>)
 800e1a4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e1a6:	fb93 f3f2 	sdiv	r3, r3, r2
 800e1aa:	b29a      	uxth	r2, r3
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800e1b2:	bf00      	nop
 800e1b4:	3714      	adds	r7, #20
 800e1b6:	46bd      	mov	sp, r7
 800e1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1bc:	4770      	bx	lr
 800e1be:	bf00      	nop
 800e1c0:	0800f424 	.word	0x0800f424
 800e1c4:	0800f42c 	.word	0x0800f42c

0800e1c8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800e1c8:	b480      	push	{r7}
 800e1ca:	b083      	sub	sp, #12
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	6078      	str	r0, [r7, #4]
 800e1d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800e1d2:	683b      	ldr	r3, [r7, #0]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d121      	bne.n	800e21e <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	681a      	ldr	r2, [r3, #0]
 800e1de:	4b27      	ldr	r3, [pc, #156]	; (800e27c <FMC_SDRAM_Init+0xb4>)
 800e1e0:	4013      	ands	r3, r2
 800e1e2:	683a      	ldr	r2, [r7, #0]
 800e1e4:	6851      	ldr	r1, [r2, #4]
 800e1e6:	683a      	ldr	r2, [r7, #0]
 800e1e8:	6892      	ldr	r2, [r2, #8]
 800e1ea:	4311      	orrs	r1, r2
 800e1ec:	683a      	ldr	r2, [r7, #0]
 800e1ee:	68d2      	ldr	r2, [r2, #12]
 800e1f0:	4311      	orrs	r1, r2
 800e1f2:	683a      	ldr	r2, [r7, #0]
 800e1f4:	6912      	ldr	r2, [r2, #16]
 800e1f6:	4311      	orrs	r1, r2
 800e1f8:	683a      	ldr	r2, [r7, #0]
 800e1fa:	6952      	ldr	r2, [r2, #20]
 800e1fc:	4311      	orrs	r1, r2
 800e1fe:	683a      	ldr	r2, [r7, #0]
 800e200:	6992      	ldr	r2, [r2, #24]
 800e202:	4311      	orrs	r1, r2
 800e204:	683a      	ldr	r2, [r7, #0]
 800e206:	69d2      	ldr	r2, [r2, #28]
 800e208:	4311      	orrs	r1, r2
 800e20a:	683a      	ldr	r2, [r7, #0]
 800e20c:	6a12      	ldr	r2, [r2, #32]
 800e20e:	4311      	orrs	r1, r2
 800e210:	683a      	ldr	r2, [r7, #0]
 800e212:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800e214:	430a      	orrs	r2, r1
 800e216:	431a      	orrs	r2, r3
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	601a      	str	r2, [r3, #0]
 800e21c:	e026      	b.n	800e26c <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800e226:	683b      	ldr	r3, [r7, #0]
 800e228:	69d9      	ldr	r1, [r3, #28]
 800e22a:	683b      	ldr	r3, [r7, #0]
 800e22c:	6a1b      	ldr	r3, [r3, #32]
 800e22e:	4319      	orrs	r1, r3
 800e230:	683b      	ldr	r3, [r7, #0]
 800e232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e234:	430b      	orrs	r3, r1
 800e236:	431a      	orrs	r2, r3
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	685a      	ldr	r2, [r3, #4]
 800e240:	4b0e      	ldr	r3, [pc, #56]	; (800e27c <FMC_SDRAM_Init+0xb4>)
 800e242:	4013      	ands	r3, r2
 800e244:	683a      	ldr	r2, [r7, #0]
 800e246:	6851      	ldr	r1, [r2, #4]
 800e248:	683a      	ldr	r2, [r7, #0]
 800e24a:	6892      	ldr	r2, [r2, #8]
 800e24c:	4311      	orrs	r1, r2
 800e24e:	683a      	ldr	r2, [r7, #0]
 800e250:	68d2      	ldr	r2, [r2, #12]
 800e252:	4311      	orrs	r1, r2
 800e254:	683a      	ldr	r2, [r7, #0]
 800e256:	6912      	ldr	r2, [r2, #16]
 800e258:	4311      	orrs	r1, r2
 800e25a:	683a      	ldr	r2, [r7, #0]
 800e25c:	6952      	ldr	r2, [r2, #20]
 800e25e:	4311      	orrs	r1, r2
 800e260:	683a      	ldr	r2, [r7, #0]
 800e262:	6992      	ldr	r2, [r2, #24]
 800e264:	430a      	orrs	r2, r1
 800e266:	431a      	orrs	r2, r3
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800e26c:	2300      	movs	r3, #0
}
 800e26e:	4618      	mov	r0, r3
 800e270:	370c      	adds	r7, #12
 800e272:	46bd      	mov	sp, r7
 800e274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e278:	4770      	bx	lr
 800e27a:	bf00      	nop
 800e27c:	ffff8000 	.word	0xffff8000

0800e280 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800e280:	b480      	push	{r7}
 800e282:	b085      	sub	sp, #20
 800e284:	af00      	add	r7, sp, #0
 800e286:	60f8      	str	r0, [r7, #12]
 800e288:	60b9      	str	r1, [r7, #8]
 800e28a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d128      	bne.n	800e2e4 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	689b      	ldr	r3, [r3, #8]
 800e296:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800e29a:	68bb      	ldr	r3, [r7, #8]
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	1e59      	subs	r1, r3, #1
 800e2a0:	68bb      	ldr	r3, [r7, #8]
 800e2a2:	685b      	ldr	r3, [r3, #4]
 800e2a4:	3b01      	subs	r3, #1
 800e2a6:	011b      	lsls	r3, r3, #4
 800e2a8:	4319      	orrs	r1, r3
 800e2aa:	68bb      	ldr	r3, [r7, #8]
 800e2ac:	689b      	ldr	r3, [r3, #8]
 800e2ae:	3b01      	subs	r3, #1
 800e2b0:	021b      	lsls	r3, r3, #8
 800e2b2:	4319      	orrs	r1, r3
 800e2b4:	68bb      	ldr	r3, [r7, #8]
 800e2b6:	68db      	ldr	r3, [r3, #12]
 800e2b8:	3b01      	subs	r3, #1
 800e2ba:	031b      	lsls	r3, r3, #12
 800e2bc:	4319      	orrs	r1, r3
 800e2be:	68bb      	ldr	r3, [r7, #8]
 800e2c0:	691b      	ldr	r3, [r3, #16]
 800e2c2:	3b01      	subs	r3, #1
 800e2c4:	041b      	lsls	r3, r3, #16
 800e2c6:	4319      	orrs	r1, r3
 800e2c8:	68bb      	ldr	r3, [r7, #8]
 800e2ca:	695b      	ldr	r3, [r3, #20]
 800e2cc:	3b01      	subs	r3, #1
 800e2ce:	051b      	lsls	r3, r3, #20
 800e2d0:	4319      	orrs	r1, r3
 800e2d2:	68bb      	ldr	r3, [r7, #8]
 800e2d4:	699b      	ldr	r3, [r3, #24]
 800e2d6:	3b01      	subs	r3, #1
 800e2d8:	061b      	lsls	r3, r3, #24
 800e2da:	430b      	orrs	r3, r1
 800e2dc:	431a      	orrs	r2, r3
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	609a      	str	r2, [r3, #8]
 800e2e2:	e02d      	b.n	800e340 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	689a      	ldr	r2, [r3, #8]
 800e2e8:	4b19      	ldr	r3, [pc, #100]	; (800e350 <FMC_SDRAM_Timing_Init+0xd0>)
 800e2ea:	4013      	ands	r3, r2
 800e2ec:	68ba      	ldr	r2, [r7, #8]
 800e2ee:	68d2      	ldr	r2, [r2, #12]
 800e2f0:	3a01      	subs	r2, #1
 800e2f2:	0311      	lsls	r1, r2, #12
 800e2f4:	68ba      	ldr	r2, [r7, #8]
 800e2f6:	6952      	ldr	r2, [r2, #20]
 800e2f8:	3a01      	subs	r2, #1
 800e2fa:	0512      	lsls	r2, r2, #20
 800e2fc:	430a      	orrs	r2, r1
 800e2fe:	431a      	orrs	r2, r3
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	68db      	ldr	r3, [r3, #12]
 800e308:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800e30c:	68bb      	ldr	r3, [r7, #8]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	1e59      	subs	r1, r3, #1
 800e312:	68bb      	ldr	r3, [r7, #8]
 800e314:	685b      	ldr	r3, [r3, #4]
 800e316:	3b01      	subs	r3, #1
 800e318:	011b      	lsls	r3, r3, #4
 800e31a:	4319      	orrs	r1, r3
 800e31c:	68bb      	ldr	r3, [r7, #8]
 800e31e:	689b      	ldr	r3, [r3, #8]
 800e320:	3b01      	subs	r3, #1
 800e322:	021b      	lsls	r3, r3, #8
 800e324:	4319      	orrs	r1, r3
 800e326:	68bb      	ldr	r3, [r7, #8]
 800e328:	691b      	ldr	r3, [r3, #16]
 800e32a:	3b01      	subs	r3, #1
 800e32c:	041b      	lsls	r3, r3, #16
 800e32e:	4319      	orrs	r1, r3
 800e330:	68bb      	ldr	r3, [r7, #8]
 800e332:	699b      	ldr	r3, [r3, #24]
 800e334:	3b01      	subs	r3, #1
 800e336:	061b      	lsls	r3, r3, #24
 800e338:	430b      	orrs	r3, r1
 800e33a:	431a      	orrs	r2, r3
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800e340:	2300      	movs	r3, #0
}
 800e342:	4618      	mov	r0, r3
 800e344:	3714      	adds	r7, #20
 800e346:	46bd      	mov	sp, r7
 800e348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e34c:	4770      	bx	lr
 800e34e:	bf00      	nop
 800e350:	ff0f0fff 	.word	0xff0f0fff

0800e354 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e354:	b084      	sub	sp, #16
 800e356:	b580      	push	{r7, lr}
 800e358:	b084      	sub	sp, #16
 800e35a:	af00      	add	r7, sp, #0
 800e35c:	6078      	str	r0, [r7, #4]
 800e35e:	f107 001c 	add.w	r0, r7, #28
 800e362:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e368:	2b01      	cmp	r3, #1
 800e36a:	d120      	bne.n	800e3ae <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e370:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	68da      	ldr	r2, [r3, #12]
 800e37c:	4b2a      	ldr	r3, [pc, #168]	; (800e428 <USB_CoreInit+0xd4>)
 800e37e:	4013      	ands	r3, r2
 800e380:	687a      	ldr	r2, [r7, #4]
 800e382:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	68db      	ldr	r3, [r3, #12]
 800e388:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800e390:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e392:	2b01      	cmp	r3, #1
 800e394:	d105      	bne.n	800e3a2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	68db      	ldr	r3, [r3, #12]
 800e39a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e3a2:	6878      	ldr	r0, [r7, #4]
 800e3a4:	f000 faac 	bl	800e900 <USB_CoreReset>
 800e3a8:	4603      	mov	r3, r0
 800e3aa:	73fb      	strb	r3, [r7, #15]
 800e3ac:	e01a      	b.n	800e3e4 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	68db      	ldr	r3, [r3, #12]
 800e3b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e3ba:	6878      	ldr	r0, [r7, #4]
 800e3bc:	f000 faa0 	bl	800e900 <USB_CoreReset>
 800e3c0:	4603      	mov	r3, r0
 800e3c2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800e3c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d106      	bne.n	800e3d8 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3ce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	639a      	str	r2, [r3, #56]	; 0x38
 800e3d6:	e005      	b.n	800e3e4 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800e3e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3e6:	2b01      	cmp	r3, #1
 800e3e8:	d116      	bne.n	800e418 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e3ee:	b29a      	uxth	r2, r3
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e3f8:	4b0c      	ldr	r3, [pc, #48]	; (800e42c <USB_CoreInit+0xd8>)
 800e3fa:	4313      	orrs	r3, r2
 800e3fc:	687a      	ldr	r2, [r7, #4]
 800e3fe:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	689b      	ldr	r3, [r3, #8]
 800e404:	f043 0206 	orr.w	r2, r3, #6
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	689b      	ldr	r3, [r3, #8]
 800e410:	f043 0220 	orr.w	r2, r3, #32
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800e418:	7bfb      	ldrb	r3, [r7, #15]
}
 800e41a:	4618      	mov	r0, r3
 800e41c:	3710      	adds	r7, #16
 800e41e:	46bd      	mov	sp, r7
 800e420:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e424:	b004      	add	sp, #16
 800e426:	4770      	bx	lr
 800e428:	ffbdffbf 	.word	0xffbdffbf
 800e42c:	03ee0000 	.word	0x03ee0000

0800e430 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e430:	b480      	push	{r7}
 800e432:	b083      	sub	sp, #12
 800e434:	af00      	add	r7, sp, #0
 800e436:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	689b      	ldr	r3, [r3, #8]
 800e43c:	f023 0201 	bic.w	r2, r3, #1
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e444:	2300      	movs	r3, #0
}
 800e446:	4618      	mov	r0, r3
 800e448:	370c      	adds	r7, #12
 800e44a:	46bd      	mov	sp, r7
 800e44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e450:	4770      	bx	lr

0800e452 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800e452:	b580      	push	{r7, lr}
 800e454:	b084      	sub	sp, #16
 800e456:	af00      	add	r7, sp, #0
 800e458:	6078      	str	r0, [r7, #4]
 800e45a:	460b      	mov	r3, r1
 800e45c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800e45e:	2300      	movs	r3, #0
 800e460:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	68db      	ldr	r3, [r3, #12]
 800e466:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800e46e:	78fb      	ldrb	r3, [r7, #3]
 800e470:	2b01      	cmp	r3, #1
 800e472:	d115      	bne.n	800e4a0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	68db      	ldr	r3, [r3, #12]
 800e478:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800e480:	2001      	movs	r0, #1
 800e482:	f7f4 fda7 	bl	8002fd4 <HAL_Delay>
      ms++;
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	3301      	adds	r3, #1
 800e48a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800e48c:	6878      	ldr	r0, [r7, #4]
 800e48e:	f000 fa29 	bl	800e8e4 <USB_GetMode>
 800e492:	4603      	mov	r3, r0
 800e494:	2b01      	cmp	r3, #1
 800e496:	d01e      	beq.n	800e4d6 <USB_SetCurrentMode+0x84>
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	2b31      	cmp	r3, #49	; 0x31
 800e49c:	d9f0      	bls.n	800e480 <USB_SetCurrentMode+0x2e>
 800e49e:	e01a      	b.n	800e4d6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800e4a0:	78fb      	ldrb	r3, [r7, #3]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d115      	bne.n	800e4d2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	68db      	ldr	r3, [r3, #12]
 800e4aa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800e4b2:	2001      	movs	r0, #1
 800e4b4:	f7f4 fd8e 	bl	8002fd4 <HAL_Delay>
      ms++;
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	3301      	adds	r3, #1
 800e4bc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800e4be:	6878      	ldr	r0, [r7, #4]
 800e4c0:	f000 fa10 	bl	800e8e4 <USB_GetMode>
 800e4c4:	4603      	mov	r3, r0
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d005      	beq.n	800e4d6 <USB_SetCurrentMode+0x84>
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	2b31      	cmp	r3, #49	; 0x31
 800e4ce:	d9f0      	bls.n	800e4b2 <USB_SetCurrentMode+0x60>
 800e4d0:	e001      	b.n	800e4d6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800e4d2:	2301      	movs	r3, #1
 800e4d4:	e005      	b.n	800e4e2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	2b32      	cmp	r3, #50	; 0x32
 800e4da:	d101      	bne.n	800e4e0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800e4dc:	2301      	movs	r3, #1
 800e4de:	e000      	b.n	800e4e2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800e4e0:	2300      	movs	r3, #0
}
 800e4e2:	4618      	mov	r0, r3
 800e4e4:	3710      	adds	r7, #16
 800e4e6:	46bd      	mov	sp, r7
 800e4e8:	bd80      	pop	{r7, pc}
	...

0800e4ec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e4ec:	b084      	sub	sp, #16
 800e4ee:	b580      	push	{r7, lr}
 800e4f0:	b086      	sub	sp, #24
 800e4f2:	af00      	add	r7, sp, #0
 800e4f4:	6078      	str	r0, [r7, #4]
 800e4f6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800e4fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800e4fe:	2300      	movs	r3, #0
 800e500:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800e506:	2300      	movs	r3, #0
 800e508:	613b      	str	r3, [r7, #16]
 800e50a:	e009      	b.n	800e520 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800e50c:	687a      	ldr	r2, [r7, #4]
 800e50e:	693b      	ldr	r3, [r7, #16]
 800e510:	3340      	adds	r3, #64	; 0x40
 800e512:	009b      	lsls	r3, r3, #2
 800e514:	4413      	add	r3, r2
 800e516:	2200      	movs	r2, #0
 800e518:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800e51a:	693b      	ldr	r3, [r7, #16]
 800e51c:	3301      	adds	r3, #1
 800e51e:	613b      	str	r3, [r7, #16]
 800e520:	693b      	ldr	r3, [r7, #16]
 800e522:	2b0e      	cmp	r3, #14
 800e524:	d9f2      	bls.n	800e50c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800e526:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d11c      	bne.n	800e566 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e532:	685b      	ldr	r3, [r3, #4]
 800e534:	68fa      	ldr	r2, [r7, #12]
 800e536:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e53a:	f043 0302 	orr.w	r3, r3, #2
 800e53e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e544:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	601a      	str	r2, [r3, #0]
 800e564:	e005      	b.n	800e572 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e56a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e578:	461a      	mov	r2, r3
 800e57a:	2300      	movs	r3, #0
 800e57c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e584:	4619      	mov	r1, r3
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e58c:	461a      	mov	r2, r3
 800e58e:	680b      	ldr	r3, [r1, #0]
 800e590:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e594:	2b01      	cmp	r3, #1
 800e596:	d10c      	bne.n	800e5b2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800e598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d104      	bne.n	800e5a8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800e59e:	2100      	movs	r1, #0
 800e5a0:	6878      	ldr	r0, [r7, #4]
 800e5a2:	f000 f965 	bl	800e870 <USB_SetDevSpeed>
 800e5a6:	e008      	b.n	800e5ba <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800e5a8:	2101      	movs	r1, #1
 800e5aa:	6878      	ldr	r0, [r7, #4]
 800e5ac:	f000 f960 	bl	800e870 <USB_SetDevSpeed>
 800e5b0:	e003      	b.n	800e5ba <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800e5b2:	2103      	movs	r1, #3
 800e5b4:	6878      	ldr	r0, [r7, #4]
 800e5b6:	f000 f95b 	bl	800e870 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e5ba:	2110      	movs	r1, #16
 800e5bc:	6878      	ldr	r0, [r7, #4]
 800e5be:	f000 f8f3 	bl	800e7a8 <USB_FlushTxFifo>
 800e5c2:	4603      	mov	r3, r0
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d001      	beq.n	800e5cc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800e5c8:	2301      	movs	r3, #1
 800e5ca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e5cc:	6878      	ldr	r0, [r7, #4]
 800e5ce:	f000 f91f 	bl	800e810 <USB_FlushRxFifo>
 800e5d2:	4603      	mov	r3, r0
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d001      	beq.n	800e5dc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800e5d8:	2301      	movs	r3, #1
 800e5da:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e5e2:	461a      	mov	r2, r3
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e5ee:	461a      	mov	r2, r3
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e5fa:	461a      	mov	r2, r3
 800e5fc:	2300      	movs	r3, #0
 800e5fe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e600:	2300      	movs	r3, #0
 800e602:	613b      	str	r3, [r7, #16]
 800e604:	e043      	b.n	800e68e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e606:	693b      	ldr	r3, [r7, #16]
 800e608:	015a      	lsls	r2, r3, #5
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	4413      	add	r3, r2
 800e60e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e618:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e61c:	d118      	bne.n	800e650 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800e61e:	693b      	ldr	r3, [r7, #16]
 800e620:	2b00      	cmp	r3, #0
 800e622:	d10a      	bne.n	800e63a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800e624:	693b      	ldr	r3, [r7, #16]
 800e626:	015a      	lsls	r2, r3, #5
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	4413      	add	r3, r2
 800e62c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e630:	461a      	mov	r2, r3
 800e632:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e636:	6013      	str	r3, [r2, #0]
 800e638:	e013      	b.n	800e662 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800e63a:	693b      	ldr	r3, [r7, #16]
 800e63c:	015a      	lsls	r2, r3, #5
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	4413      	add	r3, r2
 800e642:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e646:	461a      	mov	r2, r3
 800e648:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e64c:	6013      	str	r3, [r2, #0]
 800e64e:	e008      	b.n	800e662 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800e650:	693b      	ldr	r3, [r7, #16]
 800e652:	015a      	lsls	r2, r3, #5
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	4413      	add	r3, r2
 800e658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e65c:	461a      	mov	r2, r3
 800e65e:	2300      	movs	r3, #0
 800e660:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800e662:	693b      	ldr	r3, [r7, #16]
 800e664:	015a      	lsls	r2, r3, #5
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	4413      	add	r3, r2
 800e66a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e66e:	461a      	mov	r2, r3
 800e670:	2300      	movs	r3, #0
 800e672:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800e674:	693b      	ldr	r3, [r7, #16]
 800e676:	015a      	lsls	r2, r3, #5
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	4413      	add	r3, r2
 800e67c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e680:	461a      	mov	r2, r3
 800e682:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e686:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e688:	693b      	ldr	r3, [r7, #16]
 800e68a:	3301      	adds	r3, #1
 800e68c:	613b      	str	r3, [r7, #16]
 800e68e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e690:	693a      	ldr	r2, [r7, #16]
 800e692:	429a      	cmp	r2, r3
 800e694:	d3b7      	bcc.n	800e606 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e696:	2300      	movs	r3, #0
 800e698:	613b      	str	r3, [r7, #16]
 800e69a:	e043      	b.n	800e724 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e69c:	693b      	ldr	r3, [r7, #16]
 800e69e:	015a      	lsls	r2, r3, #5
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	4413      	add	r3, r2
 800e6a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e6ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e6b2:	d118      	bne.n	800e6e6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800e6b4:	693b      	ldr	r3, [r7, #16]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d10a      	bne.n	800e6d0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800e6ba:	693b      	ldr	r3, [r7, #16]
 800e6bc:	015a      	lsls	r2, r3, #5
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	4413      	add	r3, r2
 800e6c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e6c6:	461a      	mov	r2, r3
 800e6c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e6cc:	6013      	str	r3, [r2, #0]
 800e6ce:	e013      	b.n	800e6f8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e6d0:	693b      	ldr	r3, [r7, #16]
 800e6d2:	015a      	lsls	r2, r3, #5
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	4413      	add	r3, r2
 800e6d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e6dc:	461a      	mov	r2, r3
 800e6de:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e6e2:	6013      	str	r3, [r2, #0]
 800e6e4:	e008      	b.n	800e6f8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e6e6:	693b      	ldr	r3, [r7, #16]
 800e6e8:	015a      	lsls	r2, r3, #5
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	4413      	add	r3, r2
 800e6ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e6f2:	461a      	mov	r2, r3
 800e6f4:	2300      	movs	r3, #0
 800e6f6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800e6f8:	693b      	ldr	r3, [r7, #16]
 800e6fa:	015a      	lsls	r2, r3, #5
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	4413      	add	r3, r2
 800e700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e704:	461a      	mov	r2, r3
 800e706:	2300      	movs	r3, #0
 800e708:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e70a:	693b      	ldr	r3, [r7, #16]
 800e70c:	015a      	lsls	r2, r3, #5
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	4413      	add	r3, r2
 800e712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e716:	461a      	mov	r2, r3
 800e718:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e71c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e71e:	693b      	ldr	r3, [r7, #16]
 800e720:	3301      	adds	r3, #1
 800e722:	613b      	str	r3, [r7, #16]
 800e724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e726:	693a      	ldr	r2, [r7, #16]
 800e728:	429a      	cmp	r2, r3
 800e72a:	d3b7      	bcc.n	800e69c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e732:	691b      	ldr	r3, [r3, #16]
 800e734:	68fa      	ldr	r2, [r7, #12]
 800e736:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e73a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e73e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	2200      	movs	r2, #0
 800e744:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800e74c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e74e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e750:	2b00      	cmp	r3, #0
 800e752:	d105      	bne.n	800e760 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	699b      	ldr	r3, [r3, #24]
 800e758:	f043 0210 	orr.w	r2, r3, #16
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	699a      	ldr	r2, [r3, #24]
 800e764:	4b0e      	ldr	r3, [pc, #56]	; (800e7a0 <USB_DevInit+0x2b4>)
 800e766:	4313      	orrs	r3, r2
 800e768:	687a      	ldr	r2, [r7, #4]
 800e76a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800e76c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d005      	beq.n	800e77e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	699b      	ldr	r3, [r3, #24]
 800e776:	f043 0208 	orr.w	r2, r3, #8
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800e77e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e780:	2b01      	cmp	r3, #1
 800e782:	d105      	bne.n	800e790 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	699a      	ldr	r2, [r3, #24]
 800e788:	4b06      	ldr	r3, [pc, #24]	; (800e7a4 <USB_DevInit+0x2b8>)
 800e78a:	4313      	orrs	r3, r2
 800e78c:	687a      	ldr	r2, [r7, #4]
 800e78e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800e790:	7dfb      	ldrb	r3, [r7, #23]
}
 800e792:	4618      	mov	r0, r3
 800e794:	3718      	adds	r7, #24
 800e796:	46bd      	mov	sp, r7
 800e798:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e79c:	b004      	add	sp, #16
 800e79e:	4770      	bx	lr
 800e7a0:	803c3800 	.word	0x803c3800
 800e7a4:	40000004 	.word	0x40000004

0800e7a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e7a8:	b480      	push	{r7}
 800e7aa:	b085      	sub	sp, #20
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	6078      	str	r0, [r7, #4]
 800e7b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e7b2:	2300      	movs	r3, #0
 800e7b4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	3301      	adds	r3, #1
 800e7ba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	4a13      	ldr	r2, [pc, #76]	; (800e80c <USB_FlushTxFifo+0x64>)
 800e7c0:	4293      	cmp	r3, r2
 800e7c2:	d901      	bls.n	800e7c8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800e7c4:	2303      	movs	r3, #3
 800e7c6:	e01b      	b.n	800e800 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	691b      	ldr	r3, [r3, #16]
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	daf2      	bge.n	800e7b6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800e7d0:	2300      	movs	r3, #0
 800e7d2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e7d4:	683b      	ldr	r3, [r7, #0]
 800e7d6:	019b      	lsls	r3, r3, #6
 800e7d8:	f043 0220 	orr.w	r2, r3, #32
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	3301      	adds	r3, #1
 800e7e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	4a08      	ldr	r2, [pc, #32]	; (800e80c <USB_FlushTxFifo+0x64>)
 800e7ea:	4293      	cmp	r3, r2
 800e7ec:	d901      	bls.n	800e7f2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800e7ee:	2303      	movs	r3, #3
 800e7f0:	e006      	b.n	800e800 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	691b      	ldr	r3, [r3, #16]
 800e7f6:	f003 0320 	and.w	r3, r3, #32
 800e7fa:	2b20      	cmp	r3, #32
 800e7fc:	d0f0      	beq.n	800e7e0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800e7fe:	2300      	movs	r3, #0
}
 800e800:	4618      	mov	r0, r3
 800e802:	3714      	adds	r7, #20
 800e804:	46bd      	mov	sp, r7
 800e806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e80a:	4770      	bx	lr
 800e80c:	00030d40 	.word	0x00030d40

0800e810 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e810:	b480      	push	{r7}
 800e812:	b085      	sub	sp, #20
 800e814:	af00      	add	r7, sp, #0
 800e816:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e818:	2300      	movs	r3, #0
 800e81a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	3301      	adds	r3, #1
 800e820:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	4a11      	ldr	r2, [pc, #68]	; (800e86c <USB_FlushRxFifo+0x5c>)
 800e826:	4293      	cmp	r3, r2
 800e828:	d901      	bls.n	800e82e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800e82a:	2303      	movs	r3, #3
 800e82c:	e018      	b.n	800e860 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	691b      	ldr	r3, [r3, #16]
 800e832:	2b00      	cmp	r3, #0
 800e834:	daf2      	bge.n	800e81c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800e836:	2300      	movs	r3, #0
 800e838:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	2210      	movs	r2, #16
 800e83e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	3301      	adds	r3, #1
 800e844:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	4a08      	ldr	r2, [pc, #32]	; (800e86c <USB_FlushRxFifo+0x5c>)
 800e84a:	4293      	cmp	r3, r2
 800e84c:	d901      	bls.n	800e852 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800e84e:	2303      	movs	r3, #3
 800e850:	e006      	b.n	800e860 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	691b      	ldr	r3, [r3, #16]
 800e856:	f003 0310 	and.w	r3, r3, #16
 800e85a:	2b10      	cmp	r3, #16
 800e85c:	d0f0      	beq.n	800e840 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800e85e:	2300      	movs	r3, #0
}
 800e860:	4618      	mov	r0, r3
 800e862:	3714      	adds	r7, #20
 800e864:	46bd      	mov	sp, r7
 800e866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e86a:	4770      	bx	lr
 800e86c:	00030d40 	.word	0x00030d40

0800e870 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800e870:	b480      	push	{r7}
 800e872:	b085      	sub	sp, #20
 800e874:	af00      	add	r7, sp, #0
 800e876:	6078      	str	r0, [r7, #4]
 800e878:	460b      	mov	r3, r1
 800e87a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e886:	681a      	ldr	r2, [r3, #0]
 800e888:	78fb      	ldrb	r3, [r7, #3]
 800e88a:	68f9      	ldr	r1, [r7, #12]
 800e88c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e890:	4313      	orrs	r3, r2
 800e892:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800e894:	2300      	movs	r3, #0
}
 800e896:	4618      	mov	r0, r3
 800e898:	3714      	adds	r7, #20
 800e89a:	46bd      	mov	sp, r7
 800e89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a0:	4770      	bx	lr

0800e8a2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e8a2:	b480      	push	{r7}
 800e8a4:	b085      	sub	sp, #20
 800e8a6:	af00      	add	r7, sp, #0
 800e8a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	68fa      	ldr	r2, [r7, #12]
 800e8b8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e8bc:	f023 0303 	bic.w	r3, r3, #3
 800e8c0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e8c8:	685b      	ldr	r3, [r3, #4]
 800e8ca:	68fa      	ldr	r2, [r7, #12]
 800e8cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e8d0:	f043 0302 	orr.w	r3, r3, #2
 800e8d4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e8d6:	2300      	movs	r3, #0
}
 800e8d8:	4618      	mov	r0, r3
 800e8da:	3714      	adds	r7, #20
 800e8dc:	46bd      	mov	sp, r7
 800e8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e2:	4770      	bx	lr

0800e8e4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800e8e4:	b480      	push	{r7}
 800e8e6:	b083      	sub	sp, #12
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	695b      	ldr	r3, [r3, #20]
 800e8f0:	f003 0301 	and.w	r3, r3, #1
}
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	370c      	adds	r7, #12
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fe:	4770      	bx	lr

0800e900 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e900:	b480      	push	{r7}
 800e902:	b085      	sub	sp, #20
 800e904:	af00      	add	r7, sp, #0
 800e906:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e908:	2300      	movs	r3, #0
 800e90a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	3301      	adds	r3, #1
 800e910:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	4a13      	ldr	r2, [pc, #76]	; (800e964 <USB_CoreReset+0x64>)
 800e916:	4293      	cmp	r3, r2
 800e918:	d901      	bls.n	800e91e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800e91a:	2303      	movs	r3, #3
 800e91c:	e01b      	b.n	800e956 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	691b      	ldr	r3, [r3, #16]
 800e922:	2b00      	cmp	r3, #0
 800e924:	daf2      	bge.n	800e90c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e926:	2300      	movs	r3, #0
 800e928:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	691b      	ldr	r3, [r3, #16]
 800e92e:	f043 0201 	orr.w	r2, r3, #1
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	3301      	adds	r3, #1
 800e93a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	4a09      	ldr	r2, [pc, #36]	; (800e964 <USB_CoreReset+0x64>)
 800e940:	4293      	cmp	r3, r2
 800e942:	d901      	bls.n	800e948 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800e944:	2303      	movs	r3, #3
 800e946:	e006      	b.n	800e956 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	691b      	ldr	r3, [r3, #16]
 800e94c:	f003 0301 	and.w	r3, r3, #1
 800e950:	2b01      	cmp	r3, #1
 800e952:	d0f0      	beq.n	800e936 <USB_CoreReset+0x36>

  return HAL_OK;
 800e954:	2300      	movs	r3, #0
}
 800e956:	4618      	mov	r0, r3
 800e958:	3714      	adds	r7, #20
 800e95a:	46bd      	mov	sp, r7
 800e95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e960:	4770      	bx	lr
 800e962:	bf00      	nop
 800e964:	00030d40 	.word	0x00030d40

0800e968 <__errno>:
 800e968:	4b01      	ldr	r3, [pc, #4]	; (800e970 <__errno+0x8>)
 800e96a:	6818      	ldr	r0, [r3, #0]
 800e96c:	4770      	bx	lr
 800e96e:	bf00      	nop
 800e970:	24000038 	.word	0x24000038

0800e974 <__libc_init_array>:
 800e974:	b570      	push	{r4, r5, r6, lr}
 800e976:	4d0d      	ldr	r5, [pc, #52]	; (800e9ac <__libc_init_array+0x38>)
 800e978:	4c0d      	ldr	r4, [pc, #52]	; (800e9b0 <__libc_init_array+0x3c>)
 800e97a:	1b64      	subs	r4, r4, r5
 800e97c:	10a4      	asrs	r4, r4, #2
 800e97e:	2600      	movs	r6, #0
 800e980:	42a6      	cmp	r6, r4
 800e982:	d109      	bne.n	800e998 <__libc_init_array+0x24>
 800e984:	4d0b      	ldr	r5, [pc, #44]	; (800e9b4 <__libc_init_array+0x40>)
 800e986:	4c0c      	ldr	r4, [pc, #48]	; (800e9b8 <__libc_init_array+0x44>)
 800e988:	f000 fc8e 	bl	800f2a8 <_init>
 800e98c:	1b64      	subs	r4, r4, r5
 800e98e:	10a4      	asrs	r4, r4, #2
 800e990:	2600      	movs	r6, #0
 800e992:	42a6      	cmp	r6, r4
 800e994:	d105      	bne.n	800e9a2 <__libc_init_array+0x2e>
 800e996:	bd70      	pop	{r4, r5, r6, pc}
 800e998:	f855 3b04 	ldr.w	r3, [r5], #4
 800e99c:	4798      	blx	r3
 800e99e:	3601      	adds	r6, #1
 800e9a0:	e7ee      	b.n	800e980 <__libc_init_array+0xc>
 800e9a2:	f855 3b04 	ldr.w	r3, [r5], #4
 800e9a6:	4798      	blx	r3
 800e9a8:	3601      	adds	r6, #1
 800e9aa:	e7f2      	b.n	800e992 <__libc_init_array+0x1e>
 800e9ac:	0800f470 	.word	0x0800f470
 800e9b0:	0800f470 	.word	0x0800f470
 800e9b4:	0800f470 	.word	0x0800f470
 800e9b8:	0800f474 	.word	0x0800f474

0800e9bc <memcpy>:
 800e9bc:	440a      	add	r2, r1
 800e9be:	4291      	cmp	r1, r2
 800e9c0:	f100 33ff 	add.w	r3, r0, #4294967295
 800e9c4:	d100      	bne.n	800e9c8 <memcpy+0xc>
 800e9c6:	4770      	bx	lr
 800e9c8:	b510      	push	{r4, lr}
 800e9ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e9ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e9d2:	4291      	cmp	r1, r2
 800e9d4:	d1f9      	bne.n	800e9ca <memcpy+0xe>
 800e9d6:	bd10      	pop	{r4, pc}

0800e9d8 <memset>:
 800e9d8:	4402      	add	r2, r0
 800e9da:	4603      	mov	r3, r0
 800e9dc:	4293      	cmp	r3, r2
 800e9de:	d100      	bne.n	800e9e2 <memset+0xa>
 800e9e0:	4770      	bx	lr
 800e9e2:	f803 1b01 	strb.w	r1, [r3], #1
 800e9e6:	e7f9      	b.n	800e9dc <memset+0x4>

0800e9e8 <siprintf>:
 800e9e8:	b40e      	push	{r1, r2, r3}
 800e9ea:	b500      	push	{lr}
 800e9ec:	b09c      	sub	sp, #112	; 0x70
 800e9ee:	ab1d      	add	r3, sp, #116	; 0x74
 800e9f0:	9002      	str	r0, [sp, #8]
 800e9f2:	9006      	str	r0, [sp, #24]
 800e9f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e9f8:	4809      	ldr	r0, [pc, #36]	; (800ea20 <siprintf+0x38>)
 800e9fa:	9107      	str	r1, [sp, #28]
 800e9fc:	9104      	str	r1, [sp, #16]
 800e9fe:	4909      	ldr	r1, [pc, #36]	; (800ea24 <siprintf+0x3c>)
 800ea00:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea04:	9105      	str	r1, [sp, #20]
 800ea06:	6800      	ldr	r0, [r0, #0]
 800ea08:	9301      	str	r3, [sp, #4]
 800ea0a:	a902      	add	r1, sp, #8
 800ea0c:	f000 f868 	bl	800eae0 <_svfiprintf_r>
 800ea10:	9b02      	ldr	r3, [sp, #8]
 800ea12:	2200      	movs	r2, #0
 800ea14:	701a      	strb	r2, [r3, #0]
 800ea16:	b01c      	add	sp, #112	; 0x70
 800ea18:	f85d eb04 	ldr.w	lr, [sp], #4
 800ea1c:	b003      	add	sp, #12
 800ea1e:	4770      	bx	lr
 800ea20:	24000038 	.word	0x24000038
 800ea24:	ffff0208 	.word	0xffff0208

0800ea28 <__ssputs_r>:
 800ea28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea2c:	688e      	ldr	r6, [r1, #8]
 800ea2e:	429e      	cmp	r6, r3
 800ea30:	4682      	mov	sl, r0
 800ea32:	460c      	mov	r4, r1
 800ea34:	4690      	mov	r8, r2
 800ea36:	461f      	mov	r7, r3
 800ea38:	d838      	bhi.n	800eaac <__ssputs_r+0x84>
 800ea3a:	898a      	ldrh	r2, [r1, #12]
 800ea3c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ea40:	d032      	beq.n	800eaa8 <__ssputs_r+0x80>
 800ea42:	6825      	ldr	r5, [r4, #0]
 800ea44:	6909      	ldr	r1, [r1, #16]
 800ea46:	eba5 0901 	sub.w	r9, r5, r1
 800ea4a:	6965      	ldr	r5, [r4, #20]
 800ea4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ea50:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ea54:	3301      	adds	r3, #1
 800ea56:	444b      	add	r3, r9
 800ea58:	106d      	asrs	r5, r5, #1
 800ea5a:	429d      	cmp	r5, r3
 800ea5c:	bf38      	it	cc
 800ea5e:	461d      	movcc	r5, r3
 800ea60:	0553      	lsls	r3, r2, #21
 800ea62:	d531      	bpl.n	800eac8 <__ssputs_r+0xa0>
 800ea64:	4629      	mov	r1, r5
 800ea66:	f000 fb55 	bl	800f114 <_malloc_r>
 800ea6a:	4606      	mov	r6, r0
 800ea6c:	b950      	cbnz	r0, 800ea84 <__ssputs_r+0x5c>
 800ea6e:	230c      	movs	r3, #12
 800ea70:	f8ca 3000 	str.w	r3, [sl]
 800ea74:	89a3      	ldrh	r3, [r4, #12]
 800ea76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea7a:	81a3      	strh	r3, [r4, #12]
 800ea7c:	f04f 30ff 	mov.w	r0, #4294967295
 800ea80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea84:	6921      	ldr	r1, [r4, #16]
 800ea86:	464a      	mov	r2, r9
 800ea88:	f7ff ff98 	bl	800e9bc <memcpy>
 800ea8c:	89a3      	ldrh	r3, [r4, #12]
 800ea8e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ea92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ea96:	81a3      	strh	r3, [r4, #12]
 800ea98:	6126      	str	r6, [r4, #16]
 800ea9a:	6165      	str	r5, [r4, #20]
 800ea9c:	444e      	add	r6, r9
 800ea9e:	eba5 0509 	sub.w	r5, r5, r9
 800eaa2:	6026      	str	r6, [r4, #0]
 800eaa4:	60a5      	str	r5, [r4, #8]
 800eaa6:	463e      	mov	r6, r7
 800eaa8:	42be      	cmp	r6, r7
 800eaaa:	d900      	bls.n	800eaae <__ssputs_r+0x86>
 800eaac:	463e      	mov	r6, r7
 800eaae:	6820      	ldr	r0, [r4, #0]
 800eab0:	4632      	mov	r2, r6
 800eab2:	4641      	mov	r1, r8
 800eab4:	f000 faa8 	bl	800f008 <memmove>
 800eab8:	68a3      	ldr	r3, [r4, #8]
 800eaba:	1b9b      	subs	r3, r3, r6
 800eabc:	60a3      	str	r3, [r4, #8]
 800eabe:	6823      	ldr	r3, [r4, #0]
 800eac0:	4433      	add	r3, r6
 800eac2:	6023      	str	r3, [r4, #0]
 800eac4:	2000      	movs	r0, #0
 800eac6:	e7db      	b.n	800ea80 <__ssputs_r+0x58>
 800eac8:	462a      	mov	r2, r5
 800eaca:	f000 fb97 	bl	800f1fc <_realloc_r>
 800eace:	4606      	mov	r6, r0
 800ead0:	2800      	cmp	r0, #0
 800ead2:	d1e1      	bne.n	800ea98 <__ssputs_r+0x70>
 800ead4:	6921      	ldr	r1, [r4, #16]
 800ead6:	4650      	mov	r0, sl
 800ead8:	f000 fab0 	bl	800f03c <_free_r>
 800eadc:	e7c7      	b.n	800ea6e <__ssputs_r+0x46>
	...

0800eae0 <_svfiprintf_r>:
 800eae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eae4:	4698      	mov	r8, r3
 800eae6:	898b      	ldrh	r3, [r1, #12]
 800eae8:	061b      	lsls	r3, r3, #24
 800eaea:	b09d      	sub	sp, #116	; 0x74
 800eaec:	4607      	mov	r7, r0
 800eaee:	460d      	mov	r5, r1
 800eaf0:	4614      	mov	r4, r2
 800eaf2:	d50e      	bpl.n	800eb12 <_svfiprintf_r+0x32>
 800eaf4:	690b      	ldr	r3, [r1, #16]
 800eaf6:	b963      	cbnz	r3, 800eb12 <_svfiprintf_r+0x32>
 800eaf8:	2140      	movs	r1, #64	; 0x40
 800eafa:	f000 fb0b 	bl	800f114 <_malloc_r>
 800eafe:	6028      	str	r0, [r5, #0]
 800eb00:	6128      	str	r0, [r5, #16]
 800eb02:	b920      	cbnz	r0, 800eb0e <_svfiprintf_r+0x2e>
 800eb04:	230c      	movs	r3, #12
 800eb06:	603b      	str	r3, [r7, #0]
 800eb08:	f04f 30ff 	mov.w	r0, #4294967295
 800eb0c:	e0d1      	b.n	800ecb2 <_svfiprintf_r+0x1d2>
 800eb0e:	2340      	movs	r3, #64	; 0x40
 800eb10:	616b      	str	r3, [r5, #20]
 800eb12:	2300      	movs	r3, #0
 800eb14:	9309      	str	r3, [sp, #36]	; 0x24
 800eb16:	2320      	movs	r3, #32
 800eb18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eb1c:	f8cd 800c 	str.w	r8, [sp, #12]
 800eb20:	2330      	movs	r3, #48	; 0x30
 800eb22:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800eccc <_svfiprintf_r+0x1ec>
 800eb26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eb2a:	f04f 0901 	mov.w	r9, #1
 800eb2e:	4623      	mov	r3, r4
 800eb30:	469a      	mov	sl, r3
 800eb32:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eb36:	b10a      	cbz	r2, 800eb3c <_svfiprintf_r+0x5c>
 800eb38:	2a25      	cmp	r2, #37	; 0x25
 800eb3a:	d1f9      	bne.n	800eb30 <_svfiprintf_r+0x50>
 800eb3c:	ebba 0b04 	subs.w	fp, sl, r4
 800eb40:	d00b      	beq.n	800eb5a <_svfiprintf_r+0x7a>
 800eb42:	465b      	mov	r3, fp
 800eb44:	4622      	mov	r2, r4
 800eb46:	4629      	mov	r1, r5
 800eb48:	4638      	mov	r0, r7
 800eb4a:	f7ff ff6d 	bl	800ea28 <__ssputs_r>
 800eb4e:	3001      	adds	r0, #1
 800eb50:	f000 80aa 	beq.w	800eca8 <_svfiprintf_r+0x1c8>
 800eb54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eb56:	445a      	add	r2, fp
 800eb58:	9209      	str	r2, [sp, #36]	; 0x24
 800eb5a:	f89a 3000 	ldrb.w	r3, [sl]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	f000 80a2 	beq.w	800eca8 <_svfiprintf_r+0x1c8>
 800eb64:	2300      	movs	r3, #0
 800eb66:	f04f 32ff 	mov.w	r2, #4294967295
 800eb6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eb6e:	f10a 0a01 	add.w	sl, sl, #1
 800eb72:	9304      	str	r3, [sp, #16]
 800eb74:	9307      	str	r3, [sp, #28]
 800eb76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eb7a:	931a      	str	r3, [sp, #104]	; 0x68
 800eb7c:	4654      	mov	r4, sl
 800eb7e:	2205      	movs	r2, #5
 800eb80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb84:	4851      	ldr	r0, [pc, #324]	; (800eccc <_svfiprintf_r+0x1ec>)
 800eb86:	f7f1 fbb3 	bl	80002f0 <memchr>
 800eb8a:	9a04      	ldr	r2, [sp, #16]
 800eb8c:	b9d8      	cbnz	r0, 800ebc6 <_svfiprintf_r+0xe6>
 800eb8e:	06d0      	lsls	r0, r2, #27
 800eb90:	bf44      	itt	mi
 800eb92:	2320      	movmi	r3, #32
 800eb94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eb98:	0711      	lsls	r1, r2, #28
 800eb9a:	bf44      	itt	mi
 800eb9c:	232b      	movmi	r3, #43	; 0x2b
 800eb9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eba2:	f89a 3000 	ldrb.w	r3, [sl]
 800eba6:	2b2a      	cmp	r3, #42	; 0x2a
 800eba8:	d015      	beq.n	800ebd6 <_svfiprintf_r+0xf6>
 800ebaa:	9a07      	ldr	r2, [sp, #28]
 800ebac:	4654      	mov	r4, sl
 800ebae:	2000      	movs	r0, #0
 800ebb0:	f04f 0c0a 	mov.w	ip, #10
 800ebb4:	4621      	mov	r1, r4
 800ebb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ebba:	3b30      	subs	r3, #48	; 0x30
 800ebbc:	2b09      	cmp	r3, #9
 800ebbe:	d94e      	bls.n	800ec5e <_svfiprintf_r+0x17e>
 800ebc0:	b1b0      	cbz	r0, 800ebf0 <_svfiprintf_r+0x110>
 800ebc2:	9207      	str	r2, [sp, #28]
 800ebc4:	e014      	b.n	800ebf0 <_svfiprintf_r+0x110>
 800ebc6:	eba0 0308 	sub.w	r3, r0, r8
 800ebca:	fa09 f303 	lsl.w	r3, r9, r3
 800ebce:	4313      	orrs	r3, r2
 800ebd0:	9304      	str	r3, [sp, #16]
 800ebd2:	46a2      	mov	sl, r4
 800ebd4:	e7d2      	b.n	800eb7c <_svfiprintf_r+0x9c>
 800ebd6:	9b03      	ldr	r3, [sp, #12]
 800ebd8:	1d19      	adds	r1, r3, #4
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	9103      	str	r1, [sp, #12]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	bfbb      	ittet	lt
 800ebe2:	425b      	neglt	r3, r3
 800ebe4:	f042 0202 	orrlt.w	r2, r2, #2
 800ebe8:	9307      	strge	r3, [sp, #28]
 800ebea:	9307      	strlt	r3, [sp, #28]
 800ebec:	bfb8      	it	lt
 800ebee:	9204      	strlt	r2, [sp, #16]
 800ebf0:	7823      	ldrb	r3, [r4, #0]
 800ebf2:	2b2e      	cmp	r3, #46	; 0x2e
 800ebf4:	d10c      	bne.n	800ec10 <_svfiprintf_r+0x130>
 800ebf6:	7863      	ldrb	r3, [r4, #1]
 800ebf8:	2b2a      	cmp	r3, #42	; 0x2a
 800ebfa:	d135      	bne.n	800ec68 <_svfiprintf_r+0x188>
 800ebfc:	9b03      	ldr	r3, [sp, #12]
 800ebfe:	1d1a      	adds	r2, r3, #4
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	9203      	str	r2, [sp, #12]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	bfb8      	it	lt
 800ec08:	f04f 33ff 	movlt.w	r3, #4294967295
 800ec0c:	3402      	adds	r4, #2
 800ec0e:	9305      	str	r3, [sp, #20]
 800ec10:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ecdc <_svfiprintf_r+0x1fc>
 800ec14:	7821      	ldrb	r1, [r4, #0]
 800ec16:	2203      	movs	r2, #3
 800ec18:	4650      	mov	r0, sl
 800ec1a:	f7f1 fb69 	bl	80002f0 <memchr>
 800ec1e:	b140      	cbz	r0, 800ec32 <_svfiprintf_r+0x152>
 800ec20:	2340      	movs	r3, #64	; 0x40
 800ec22:	eba0 000a 	sub.w	r0, r0, sl
 800ec26:	fa03 f000 	lsl.w	r0, r3, r0
 800ec2a:	9b04      	ldr	r3, [sp, #16]
 800ec2c:	4303      	orrs	r3, r0
 800ec2e:	3401      	adds	r4, #1
 800ec30:	9304      	str	r3, [sp, #16]
 800ec32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec36:	4826      	ldr	r0, [pc, #152]	; (800ecd0 <_svfiprintf_r+0x1f0>)
 800ec38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ec3c:	2206      	movs	r2, #6
 800ec3e:	f7f1 fb57 	bl	80002f0 <memchr>
 800ec42:	2800      	cmp	r0, #0
 800ec44:	d038      	beq.n	800ecb8 <_svfiprintf_r+0x1d8>
 800ec46:	4b23      	ldr	r3, [pc, #140]	; (800ecd4 <_svfiprintf_r+0x1f4>)
 800ec48:	bb1b      	cbnz	r3, 800ec92 <_svfiprintf_r+0x1b2>
 800ec4a:	9b03      	ldr	r3, [sp, #12]
 800ec4c:	3307      	adds	r3, #7
 800ec4e:	f023 0307 	bic.w	r3, r3, #7
 800ec52:	3308      	adds	r3, #8
 800ec54:	9303      	str	r3, [sp, #12]
 800ec56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec58:	4433      	add	r3, r6
 800ec5a:	9309      	str	r3, [sp, #36]	; 0x24
 800ec5c:	e767      	b.n	800eb2e <_svfiprintf_r+0x4e>
 800ec5e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ec62:	460c      	mov	r4, r1
 800ec64:	2001      	movs	r0, #1
 800ec66:	e7a5      	b.n	800ebb4 <_svfiprintf_r+0xd4>
 800ec68:	2300      	movs	r3, #0
 800ec6a:	3401      	adds	r4, #1
 800ec6c:	9305      	str	r3, [sp, #20]
 800ec6e:	4619      	mov	r1, r3
 800ec70:	f04f 0c0a 	mov.w	ip, #10
 800ec74:	4620      	mov	r0, r4
 800ec76:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ec7a:	3a30      	subs	r2, #48	; 0x30
 800ec7c:	2a09      	cmp	r2, #9
 800ec7e:	d903      	bls.n	800ec88 <_svfiprintf_r+0x1a8>
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d0c5      	beq.n	800ec10 <_svfiprintf_r+0x130>
 800ec84:	9105      	str	r1, [sp, #20]
 800ec86:	e7c3      	b.n	800ec10 <_svfiprintf_r+0x130>
 800ec88:	fb0c 2101 	mla	r1, ip, r1, r2
 800ec8c:	4604      	mov	r4, r0
 800ec8e:	2301      	movs	r3, #1
 800ec90:	e7f0      	b.n	800ec74 <_svfiprintf_r+0x194>
 800ec92:	ab03      	add	r3, sp, #12
 800ec94:	9300      	str	r3, [sp, #0]
 800ec96:	462a      	mov	r2, r5
 800ec98:	4b0f      	ldr	r3, [pc, #60]	; (800ecd8 <_svfiprintf_r+0x1f8>)
 800ec9a:	a904      	add	r1, sp, #16
 800ec9c:	4638      	mov	r0, r7
 800ec9e:	f3af 8000 	nop.w
 800eca2:	1c42      	adds	r2, r0, #1
 800eca4:	4606      	mov	r6, r0
 800eca6:	d1d6      	bne.n	800ec56 <_svfiprintf_r+0x176>
 800eca8:	89ab      	ldrh	r3, [r5, #12]
 800ecaa:	065b      	lsls	r3, r3, #25
 800ecac:	f53f af2c 	bmi.w	800eb08 <_svfiprintf_r+0x28>
 800ecb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ecb2:	b01d      	add	sp, #116	; 0x74
 800ecb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecb8:	ab03      	add	r3, sp, #12
 800ecba:	9300      	str	r3, [sp, #0]
 800ecbc:	462a      	mov	r2, r5
 800ecbe:	4b06      	ldr	r3, [pc, #24]	; (800ecd8 <_svfiprintf_r+0x1f8>)
 800ecc0:	a904      	add	r1, sp, #16
 800ecc2:	4638      	mov	r0, r7
 800ecc4:	f000 f87a 	bl	800edbc <_printf_i>
 800ecc8:	e7eb      	b.n	800eca2 <_svfiprintf_r+0x1c2>
 800ecca:	bf00      	nop
 800eccc:	0800f434 	.word	0x0800f434
 800ecd0:	0800f43e 	.word	0x0800f43e
 800ecd4:	00000000 	.word	0x00000000
 800ecd8:	0800ea29 	.word	0x0800ea29
 800ecdc:	0800f43a 	.word	0x0800f43a

0800ece0 <_printf_common>:
 800ece0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ece4:	4616      	mov	r6, r2
 800ece6:	4699      	mov	r9, r3
 800ece8:	688a      	ldr	r2, [r1, #8]
 800ecea:	690b      	ldr	r3, [r1, #16]
 800ecec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ecf0:	4293      	cmp	r3, r2
 800ecf2:	bfb8      	it	lt
 800ecf4:	4613      	movlt	r3, r2
 800ecf6:	6033      	str	r3, [r6, #0]
 800ecf8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ecfc:	4607      	mov	r7, r0
 800ecfe:	460c      	mov	r4, r1
 800ed00:	b10a      	cbz	r2, 800ed06 <_printf_common+0x26>
 800ed02:	3301      	adds	r3, #1
 800ed04:	6033      	str	r3, [r6, #0]
 800ed06:	6823      	ldr	r3, [r4, #0]
 800ed08:	0699      	lsls	r1, r3, #26
 800ed0a:	bf42      	ittt	mi
 800ed0c:	6833      	ldrmi	r3, [r6, #0]
 800ed0e:	3302      	addmi	r3, #2
 800ed10:	6033      	strmi	r3, [r6, #0]
 800ed12:	6825      	ldr	r5, [r4, #0]
 800ed14:	f015 0506 	ands.w	r5, r5, #6
 800ed18:	d106      	bne.n	800ed28 <_printf_common+0x48>
 800ed1a:	f104 0a19 	add.w	sl, r4, #25
 800ed1e:	68e3      	ldr	r3, [r4, #12]
 800ed20:	6832      	ldr	r2, [r6, #0]
 800ed22:	1a9b      	subs	r3, r3, r2
 800ed24:	42ab      	cmp	r3, r5
 800ed26:	dc26      	bgt.n	800ed76 <_printf_common+0x96>
 800ed28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ed2c:	1e13      	subs	r3, r2, #0
 800ed2e:	6822      	ldr	r2, [r4, #0]
 800ed30:	bf18      	it	ne
 800ed32:	2301      	movne	r3, #1
 800ed34:	0692      	lsls	r2, r2, #26
 800ed36:	d42b      	bmi.n	800ed90 <_printf_common+0xb0>
 800ed38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ed3c:	4649      	mov	r1, r9
 800ed3e:	4638      	mov	r0, r7
 800ed40:	47c0      	blx	r8
 800ed42:	3001      	adds	r0, #1
 800ed44:	d01e      	beq.n	800ed84 <_printf_common+0xa4>
 800ed46:	6823      	ldr	r3, [r4, #0]
 800ed48:	68e5      	ldr	r5, [r4, #12]
 800ed4a:	6832      	ldr	r2, [r6, #0]
 800ed4c:	f003 0306 	and.w	r3, r3, #6
 800ed50:	2b04      	cmp	r3, #4
 800ed52:	bf08      	it	eq
 800ed54:	1aad      	subeq	r5, r5, r2
 800ed56:	68a3      	ldr	r3, [r4, #8]
 800ed58:	6922      	ldr	r2, [r4, #16]
 800ed5a:	bf0c      	ite	eq
 800ed5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ed60:	2500      	movne	r5, #0
 800ed62:	4293      	cmp	r3, r2
 800ed64:	bfc4      	itt	gt
 800ed66:	1a9b      	subgt	r3, r3, r2
 800ed68:	18ed      	addgt	r5, r5, r3
 800ed6a:	2600      	movs	r6, #0
 800ed6c:	341a      	adds	r4, #26
 800ed6e:	42b5      	cmp	r5, r6
 800ed70:	d11a      	bne.n	800eda8 <_printf_common+0xc8>
 800ed72:	2000      	movs	r0, #0
 800ed74:	e008      	b.n	800ed88 <_printf_common+0xa8>
 800ed76:	2301      	movs	r3, #1
 800ed78:	4652      	mov	r2, sl
 800ed7a:	4649      	mov	r1, r9
 800ed7c:	4638      	mov	r0, r7
 800ed7e:	47c0      	blx	r8
 800ed80:	3001      	adds	r0, #1
 800ed82:	d103      	bne.n	800ed8c <_printf_common+0xac>
 800ed84:	f04f 30ff 	mov.w	r0, #4294967295
 800ed88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed8c:	3501      	adds	r5, #1
 800ed8e:	e7c6      	b.n	800ed1e <_printf_common+0x3e>
 800ed90:	18e1      	adds	r1, r4, r3
 800ed92:	1c5a      	adds	r2, r3, #1
 800ed94:	2030      	movs	r0, #48	; 0x30
 800ed96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ed9a:	4422      	add	r2, r4
 800ed9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800eda0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800eda4:	3302      	adds	r3, #2
 800eda6:	e7c7      	b.n	800ed38 <_printf_common+0x58>
 800eda8:	2301      	movs	r3, #1
 800edaa:	4622      	mov	r2, r4
 800edac:	4649      	mov	r1, r9
 800edae:	4638      	mov	r0, r7
 800edb0:	47c0      	blx	r8
 800edb2:	3001      	adds	r0, #1
 800edb4:	d0e6      	beq.n	800ed84 <_printf_common+0xa4>
 800edb6:	3601      	adds	r6, #1
 800edb8:	e7d9      	b.n	800ed6e <_printf_common+0x8e>
	...

0800edbc <_printf_i>:
 800edbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800edc0:	7e0f      	ldrb	r7, [r1, #24]
 800edc2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800edc4:	2f78      	cmp	r7, #120	; 0x78
 800edc6:	4691      	mov	r9, r2
 800edc8:	4680      	mov	r8, r0
 800edca:	460c      	mov	r4, r1
 800edcc:	469a      	mov	sl, r3
 800edce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800edd2:	d807      	bhi.n	800ede4 <_printf_i+0x28>
 800edd4:	2f62      	cmp	r7, #98	; 0x62
 800edd6:	d80a      	bhi.n	800edee <_printf_i+0x32>
 800edd8:	2f00      	cmp	r7, #0
 800edda:	f000 80d8 	beq.w	800ef8e <_printf_i+0x1d2>
 800edde:	2f58      	cmp	r7, #88	; 0x58
 800ede0:	f000 80a3 	beq.w	800ef2a <_printf_i+0x16e>
 800ede4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ede8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800edec:	e03a      	b.n	800ee64 <_printf_i+0xa8>
 800edee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800edf2:	2b15      	cmp	r3, #21
 800edf4:	d8f6      	bhi.n	800ede4 <_printf_i+0x28>
 800edf6:	a101      	add	r1, pc, #4	; (adr r1, 800edfc <_printf_i+0x40>)
 800edf8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800edfc:	0800ee55 	.word	0x0800ee55
 800ee00:	0800ee69 	.word	0x0800ee69
 800ee04:	0800ede5 	.word	0x0800ede5
 800ee08:	0800ede5 	.word	0x0800ede5
 800ee0c:	0800ede5 	.word	0x0800ede5
 800ee10:	0800ede5 	.word	0x0800ede5
 800ee14:	0800ee69 	.word	0x0800ee69
 800ee18:	0800ede5 	.word	0x0800ede5
 800ee1c:	0800ede5 	.word	0x0800ede5
 800ee20:	0800ede5 	.word	0x0800ede5
 800ee24:	0800ede5 	.word	0x0800ede5
 800ee28:	0800ef75 	.word	0x0800ef75
 800ee2c:	0800ee99 	.word	0x0800ee99
 800ee30:	0800ef57 	.word	0x0800ef57
 800ee34:	0800ede5 	.word	0x0800ede5
 800ee38:	0800ede5 	.word	0x0800ede5
 800ee3c:	0800ef97 	.word	0x0800ef97
 800ee40:	0800ede5 	.word	0x0800ede5
 800ee44:	0800ee99 	.word	0x0800ee99
 800ee48:	0800ede5 	.word	0x0800ede5
 800ee4c:	0800ede5 	.word	0x0800ede5
 800ee50:	0800ef5f 	.word	0x0800ef5f
 800ee54:	682b      	ldr	r3, [r5, #0]
 800ee56:	1d1a      	adds	r2, r3, #4
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	602a      	str	r2, [r5, #0]
 800ee5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ee60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ee64:	2301      	movs	r3, #1
 800ee66:	e0a3      	b.n	800efb0 <_printf_i+0x1f4>
 800ee68:	6820      	ldr	r0, [r4, #0]
 800ee6a:	6829      	ldr	r1, [r5, #0]
 800ee6c:	0606      	lsls	r6, r0, #24
 800ee6e:	f101 0304 	add.w	r3, r1, #4
 800ee72:	d50a      	bpl.n	800ee8a <_printf_i+0xce>
 800ee74:	680e      	ldr	r6, [r1, #0]
 800ee76:	602b      	str	r3, [r5, #0]
 800ee78:	2e00      	cmp	r6, #0
 800ee7a:	da03      	bge.n	800ee84 <_printf_i+0xc8>
 800ee7c:	232d      	movs	r3, #45	; 0x2d
 800ee7e:	4276      	negs	r6, r6
 800ee80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ee84:	485e      	ldr	r0, [pc, #376]	; (800f000 <_printf_i+0x244>)
 800ee86:	230a      	movs	r3, #10
 800ee88:	e019      	b.n	800eebe <_printf_i+0x102>
 800ee8a:	680e      	ldr	r6, [r1, #0]
 800ee8c:	602b      	str	r3, [r5, #0]
 800ee8e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ee92:	bf18      	it	ne
 800ee94:	b236      	sxthne	r6, r6
 800ee96:	e7ef      	b.n	800ee78 <_printf_i+0xbc>
 800ee98:	682b      	ldr	r3, [r5, #0]
 800ee9a:	6820      	ldr	r0, [r4, #0]
 800ee9c:	1d19      	adds	r1, r3, #4
 800ee9e:	6029      	str	r1, [r5, #0]
 800eea0:	0601      	lsls	r1, r0, #24
 800eea2:	d501      	bpl.n	800eea8 <_printf_i+0xec>
 800eea4:	681e      	ldr	r6, [r3, #0]
 800eea6:	e002      	b.n	800eeae <_printf_i+0xf2>
 800eea8:	0646      	lsls	r6, r0, #25
 800eeaa:	d5fb      	bpl.n	800eea4 <_printf_i+0xe8>
 800eeac:	881e      	ldrh	r6, [r3, #0]
 800eeae:	4854      	ldr	r0, [pc, #336]	; (800f000 <_printf_i+0x244>)
 800eeb0:	2f6f      	cmp	r7, #111	; 0x6f
 800eeb2:	bf0c      	ite	eq
 800eeb4:	2308      	moveq	r3, #8
 800eeb6:	230a      	movne	r3, #10
 800eeb8:	2100      	movs	r1, #0
 800eeba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800eebe:	6865      	ldr	r5, [r4, #4]
 800eec0:	60a5      	str	r5, [r4, #8]
 800eec2:	2d00      	cmp	r5, #0
 800eec4:	bfa2      	ittt	ge
 800eec6:	6821      	ldrge	r1, [r4, #0]
 800eec8:	f021 0104 	bicge.w	r1, r1, #4
 800eecc:	6021      	strge	r1, [r4, #0]
 800eece:	b90e      	cbnz	r6, 800eed4 <_printf_i+0x118>
 800eed0:	2d00      	cmp	r5, #0
 800eed2:	d04d      	beq.n	800ef70 <_printf_i+0x1b4>
 800eed4:	4615      	mov	r5, r2
 800eed6:	fbb6 f1f3 	udiv	r1, r6, r3
 800eeda:	fb03 6711 	mls	r7, r3, r1, r6
 800eede:	5dc7      	ldrb	r7, [r0, r7]
 800eee0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800eee4:	4637      	mov	r7, r6
 800eee6:	42bb      	cmp	r3, r7
 800eee8:	460e      	mov	r6, r1
 800eeea:	d9f4      	bls.n	800eed6 <_printf_i+0x11a>
 800eeec:	2b08      	cmp	r3, #8
 800eeee:	d10b      	bne.n	800ef08 <_printf_i+0x14c>
 800eef0:	6823      	ldr	r3, [r4, #0]
 800eef2:	07de      	lsls	r6, r3, #31
 800eef4:	d508      	bpl.n	800ef08 <_printf_i+0x14c>
 800eef6:	6923      	ldr	r3, [r4, #16]
 800eef8:	6861      	ldr	r1, [r4, #4]
 800eefa:	4299      	cmp	r1, r3
 800eefc:	bfde      	ittt	le
 800eefe:	2330      	movle	r3, #48	; 0x30
 800ef00:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ef04:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ef08:	1b52      	subs	r2, r2, r5
 800ef0a:	6122      	str	r2, [r4, #16]
 800ef0c:	f8cd a000 	str.w	sl, [sp]
 800ef10:	464b      	mov	r3, r9
 800ef12:	aa03      	add	r2, sp, #12
 800ef14:	4621      	mov	r1, r4
 800ef16:	4640      	mov	r0, r8
 800ef18:	f7ff fee2 	bl	800ece0 <_printf_common>
 800ef1c:	3001      	adds	r0, #1
 800ef1e:	d14c      	bne.n	800efba <_printf_i+0x1fe>
 800ef20:	f04f 30ff 	mov.w	r0, #4294967295
 800ef24:	b004      	add	sp, #16
 800ef26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef2a:	4835      	ldr	r0, [pc, #212]	; (800f000 <_printf_i+0x244>)
 800ef2c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ef30:	6829      	ldr	r1, [r5, #0]
 800ef32:	6823      	ldr	r3, [r4, #0]
 800ef34:	f851 6b04 	ldr.w	r6, [r1], #4
 800ef38:	6029      	str	r1, [r5, #0]
 800ef3a:	061d      	lsls	r5, r3, #24
 800ef3c:	d514      	bpl.n	800ef68 <_printf_i+0x1ac>
 800ef3e:	07df      	lsls	r7, r3, #31
 800ef40:	bf44      	itt	mi
 800ef42:	f043 0320 	orrmi.w	r3, r3, #32
 800ef46:	6023      	strmi	r3, [r4, #0]
 800ef48:	b91e      	cbnz	r6, 800ef52 <_printf_i+0x196>
 800ef4a:	6823      	ldr	r3, [r4, #0]
 800ef4c:	f023 0320 	bic.w	r3, r3, #32
 800ef50:	6023      	str	r3, [r4, #0]
 800ef52:	2310      	movs	r3, #16
 800ef54:	e7b0      	b.n	800eeb8 <_printf_i+0xfc>
 800ef56:	6823      	ldr	r3, [r4, #0]
 800ef58:	f043 0320 	orr.w	r3, r3, #32
 800ef5c:	6023      	str	r3, [r4, #0]
 800ef5e:	2378      	movs	r3, #120	; 0x78
 800ef60:	4828      	ldr	r0, [pc, #160]	; (800f004 <_printf_i+0x248>)
 800ef62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ef66:	e7e3      	b.n	800ef30 <_printf_i+0x174>
 800ef68:	0659      	lsls	r1, r3, #25
 800ef6a:	bf48      	it	mi
 800ef6c:	b2b6      	uxthmi	r6, r6
 800ef6e:	e7e6      	b.n	800ef3e <_printf_i+0x182>
 800ef70:	4615      	mov	r5, r2
 800ef72:	e7bb      	b.n	800eeec <_printf_i+0x130>
 800ef74:	682b      	ldr	r3, [r5, #0]
 800ef76:	6826      	ldr	r6, [r4, #0]
 800ef78:	6961      	ldr	r1, [r4, #20]
 800ef7a:	1d18      	adds	r0, r3, #4
 800ef7c:	6028      	str	r0, [r5, #0]
 800ef7e:	0635      	lsls	r5, r6, #24
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	d501      	bpl.n	800ef88 <_printf_i+0x1cc>
 800ef84:	6019      	str	r1, [r3, #0]
 800ef86:	e002      	b.n	800ef8e <_printf_i+0x1d2>
 800ef88:	0670      	lsls	r0, r6, #25
 800ef8a:	d5fb      	bpl.n	800ef84 <_printf_i+0x1c8>
 800ef8c:	8019      	strh	r1, [r3, #0]
 800ef8e:	2300      	movs	r3, #0
 800ef90:	6123      	str	r3, [r4, #16]
 800ef92:	4615      	mov	r5, r2
 800ef94:	e7ba      	b.n	800ef0c <_printf_i+0x150>
 800ef96:	682b      	ldr	r3, [r5, #0]
 800ef98:	1d1a      	adds	r2, r3, #4
 800ef9a:	602a      	str	r2, [r5, #0]
 800ef9c:	681d      	ldr	r5, [r3, #0]
 800ef9e:	6862      	ldr	r2, [r4, #4]
 800efa0:	2100      	movs	r1, #0
 800efa2:	4628      	mov	r0, r5
 800efa4:	f7f1 f9a4 	bl	80002f0 <memchr>
 800efa8:	b108      	cbz	r0, 800efae <_printf_i+0x1f2>
 800efaa:	1b40      	subs	r0, r0, r5
 800efac:	6060      	str	r0, [r4, #4]
 800efae:	6863      	ldr	r3, [r4, #4]
 800efb0:	6123      	str	r3, [r4, #16]
 800efb2:	2300      	movs	r3, #0
 800efb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800efb8:	e7a8      	b.n	800ef0c <_printf_i+0x150>
 800efba:	6923      	ldr	r3, [r4, #16]
 800efbc:	462a      	mov	r2, r5
 800efbe:	4649      	mov	r1, r9
 800efc0:	4640      	mov	r0, r8
 800efc2:	47d0      	blx	sl
 800efc4:	3001      	adds	r0, #1
 800efc6:	d0ab      	beq.n	800ef20 <_printf_i+0x164>
 800efc8:	6823      	ldr	r3, [r4, #0]
 800efca:	079b      	lsls	r3, r3, #30
 800efcc:	d413      	bmi.n	800eff6 <_printf_i+0x23a>
 800efce:	68e0      	ldr	r0, [r4, #12]
 800efd0:	9b03      	ldr	r3, [sp, #12]
 800efd2:	4298      	cmp	r0, r3
 800efd4:	bfb8      	it	lt
 800efd6:	4618      	movlt	r0, r3
 800efd8:	e7a4      	b.n	800ef24 <_printf_i+0x168>
 800efda:	2301      	movs	r3, #1
 800efdc:	4632      	mov	r2, r6
 800efde:	4649      	mov	r1, r9
 800efe0:	4640      	mov	r0, r8
 800efe2:	47d0      	blx	sl
 800efe4:	3001      	adds	r0, #1
 800efe6:	d09b      	beq.n	800ef20 <_printf_i+0x164>
 800efe8:	3501      	adds	r5, #1
 800efea:	68e3      	ldr	r3, [r4, #12]
 800efec:	9903      	ldr	r1, [sp, #12]
 800efee:	1a5b      	subs	r3, r3, r1
 800eff0:	42ab      	cmp	r3, r5
 800eff2:	dcf2      	bgt.n	800efda <_printf_i+0x21e>
 800eff4:	e7eb      	b.n	800efce <_printf_i+0x212>
 800eff6:	2500      	movs	r5, #0
 800eff8:	f104 0619 	add.w	r6, r4, #25
 800effc:	e7f5      	b.n	800efea <_printf_i+0x22e>
 800effe:	bf00      	nop
 800f000:	0800f445 	.word	0x0800f445
 800f004:	0800f456 	.word	0x0800f456

0800f008 <memmove>:
 800f008:	4288      	cmp	r0, r1
 800f00a:	b510      	push	{r4, lr}
 800f00c:	eb01 0402 	add.w	r4, r1, r2
 800f010:	d902      	bls.n	800f018 <memmove+0x10>
 800f012:	4284      	cmp	r4, r0
 800f014:	4623      	mov	r3, r4
 800f016:	d807      	bhi.n	800f028 <memmove+0x20>
 800f018:	1e43      	subs	r3, r0, #1
 800f01a:	42a1      	cmp	r1, r4
 800f01c:	d008      	beq.n	800f030 <memmove+0x28>
 800f01e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f022:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f026:	e7f8      	b.n	800f01a <memmove+0x12>
 800f028:	4402      	add	r2, r0
 800f02a:	4601      	mov	r1, r0
 800f02c:	428a      	cmp	r2, r1
 800f02e:	d100      	bne.n	800f032 <memmove+0x2a>
 800f030:	bd10      	pop	{r4, pc}
 800f032:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f036:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f03a:	e7f7      	b.n	800f02c <memmove+0x24>

0800f03c <_free_r>:
 800f03c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f03e:	2900      	cmp	r1, #0
 800f040:	d044      	beq.n	800f0cc <_free_r+0x90>
 800f042:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f046:	9001      	str	r0, [sp, #4]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	f1a1 0404 	sub.w	r4, r1, #4
 800f04e:	bfb8      	it	lt
 800f050:	18e4      	addlt	r4, r4, r3
 800f052:	f000 f913 	bl	800f27c <__malloc_lock>
 800f056:	4a1e      	ldr	r2, [pc, #120]	; (800f0d0 <_free_r+0x94>)
 800f058:	9801      	ldr	r0, [sp, #4]
 800f05a:	6813      	ldr	r3, [r2, #0]
 800f05c:	b933      	cbnz	r3, 800f06c <_free_r+0x30>
 800f05e:	6063      	str	r3, [r4, #4]
 800f060:	6014      	str	r4, [r2, #0]
 800f062:	b003      	add	sp, #12
 800f064:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f068:	f000 b90e 	b.w	800f288 <__malloc_unlock>
 800f06c:	42a3      	cmp	r3, r4
 800f06e:	d908      	bls.n	800f082 <_free_r+0x46>
 800f070:	6825      	ldr	r5, [r4, #0]
 800f072:	1961      	adds	r1, r4, r5
 800f074:	428b      	cmp	r3, r1
 800f076:	bf01      	itttt	eq
 800f078:	6819      	ldreq	r1, [r3, #0]
 800f07a:	685b      	ldreq	r3, [r3, #4]
 800f07c:	1949      	addeq	r1, r1, r5
 800f07e:	6021      	streq	r1, [r4, #0]
 800f080:	e7ed      	b.n	800f05e <_free_r+0x22>
 800f082:	461a      	mov	r2, r3
 800f084:	685b      	ldr	r3, [r3, #4]
 800f086:	b10b      	cbz	r3, 800f08c <_free_r+0x50>
 800f088:	42a3      	cmp	r3, r4
 800f08a:	d9fa      	bls.n	800f082 <_free_r+0x46>
 800f08c:	6811      	ldr	r1, [r2, #0]
 800f08e:	1855      	adds	r5, r2, r1
 800f090:	42a5      	cmp	r5, r4
 800f092:	d10b      	bne.n	800f0ac <_free_r+0x70>
 800f094:	6824      	ldr	r4, [r4, #0]
 800f096:	4421      	add	r1, r4
 800f098:	1854      	adds	r4, r2, r1
 800f09a:	42a3      	cmp	r3, r4
 800f09c:	6011      	str	r1, [r2, #0]
 800f09e:	d1e0      	bne.n	800f062 <_free_r+0x26>
 800f0a0:	681c      	ldr	r4, [r3, #0]
 800f0a2:	685b      	ldr	r3, [r3, #4]
 800f0a4:	6053      	str	r3, [r2, #4]
 800f0a6:	4421      	add	r1, r4
 800f0a8:	6011      	str	r1, [r2, #0]
 800f0aa:	e7da      	b.n	800f062 <_free_r+0x26>
 800f0ac:	d902      	bls.n	800f0b4 <_free_r+0x78>
 800f0ae:	230c      	movs	r3, #12
 800f0b0:	6003      	str	r3, [r0, #0]
 800f0b2:	e7d6      	b.n	800f062 <_free_r+0x26>
 800f0b4:	6825      	ldr	r5, [r4, #0]
 800f0b6:	1961      	adds	r1, r4, r5
 800f0b8:	428b      	cmp	r3, r1
 800f0ba:	bf04      	itt	eq
 800f0bc:	6819      	ldreq	r1, [r3, #0]
 800f0be:	685b      	ldreq	r3, [r3, #4]
 800f0c0:	6063      	str	r3, [r4, #4]
 800f0c2:	bf04      	itt	eq
 800f0c4:	1949      	addeq	r1, r1, r5
 800f0c6:	6021      	streq	r1, [r4, #0]
 800f0c8:	6054      	str	r4, [r2, #4]
 800f0ca:	e7ca      	b.n	800f062 <_free_r+0x26>
 800f0cc:	b003      	add	sp, #12
 800f0ce:	bd30      	pop	{r4, r5, pc}
 800f0d0:	24000dcc 	.word	0x24000dcc

0800f0d4 <sbrk_aligned>:
 800f0d4:	b570      	push	{r4, r5, r6, lr}
 800f0d6:	4e0e      	ldr	r6, [pc, #56]	; (800f110 <sbrk_aligned+0x3c>)
 800f0d8:	460c      	mov	r4, r1
 800f0da:	6831      	ldr	r1, [r6, #0]
 800f0dc:	4605      	mov	r5, r0
 800f0de:	b911      	cbnz	r1, 800f0e6 <sbrk_aligned+0x12>
 800f0e0:	f000 f8bc 	bl	800f25c <_sbrk_r>
 800f0e4:	6030      	str	r0, [r6, #0]
 800f0e6:	4621      	mov	r1, r4
 800f0e8:	4628      	mov	r0, r5
 800f0ea:	f000 f8b7 	bl	800f25c <_sbrk_r>
 800f0ee:	1c43      	adds	r3, r0, #1
 800f0f0:	d00a      	beq.n	800f108 <sbrk_aligned+0x34>
 800f0f2:	1cc4      	adds	r4, r0, #3
 800f0f4:	f024 0403 	bic.w	r4, r4, #3
 800f0f8:	42a0      	cmp	r0, r4
 800f0fa:	d007      	beq.n	800f10c <sbrk_aligned+0x38>
 800f0fc:	1a21      	subs	r1, r4, r0
 800f0fe:	4628      	mov	r0, r5
 800f100:	f000 f8ac 	bl	800f25c <_sbrk_r>
 800f104:	3001      	adds	r0, #1
 800f106:	d101      	bne.n	800f10c <sbrk_aligned+0x38>
 800f108:	f04f 34ff 	mov.w	r4, #4294967295
 800f10c:	4620      	mov	r0, r4
 800f10e:	bd70      	pop	{r4, r5, r6, pc}
 800f110:	24000dd0 	.word	0x24000dd0

0800f114 <_malloc_r>:
 800f114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f118:	1ccd      	adds	r5, r1, #3
 800f11a:	f025 0503 	bic.w	r5, r5, #3
 800f11e:	3508      	adds	r5, #8
 800f120:	2d0c      	cmp	r5, #12
 800f122:	bf38      	it	cc
 800f124:	250c      	movcc	r5, #12
 800f126:	2d00      	cmp	r5, #0
 800f128:	4607      	mov	r7, r0
 800f12a:	db01      	blt.n	800f130 <_malloc_r+0x1c>
 800f12c:	42a9      	cmp	r1, r5
 800f12e:	d905      	bls.n	800f13c <_malloc_r+0x28>
 800f130:	230c      	movs	r3, #12
 800f132:	603b      	str	r3, [r7, #0]
 800f134:	2600      	movs	r6, #0
 800f136:	4630      	mov	r0, r6
 800f138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f13c:	4e2e      	ldr	r6, [pc, #184]	; (800f1f8 <_malloc_r+0xe4>)
 800f13e:	f000 f89d 	bl	800f27c <__malloc_lock>
 800f142:	6833      	ldr	r3, [r6, #0]
 800f144:	461c      	mov	r4, r3
 800f146:	bb34      	cbnz	r4, 800f196 <_malloc_r+0x82>
 800f148:	4629      	mov	r1, r5
 800f14a:	4638      	mov	r0, r7
 800f14c:	f7ff ffc2 	bl	800f0d4 <sbrk_aligned>
 800f150:	1c43      	adds	r3, r0, #1
 800f152:	4604      	mov	r4, r0
 800f154:	d14d      	bne.n	800f1f2 <_malloc_r+0xde>
 800f156:	6834      	ldr	r4, [r6, #0]
 800f158:	4626      	mov	r6, r4
 800f15a:	2e00      	cmp	r6, #0
 800f15c:	d140      	bne.n	800f1e0 <_malloc_r+0xcc>
 800f15e:	6823      	ldr	r3, [r4, #0]
 800f160:	4631      	mov	r1, r6
 800f162:	4638      	mov	r0, r7
 800f164:	eb04 0803 	add.w	r8, r4, r3
 800f168:	f000 f878 	bl	800f25c <_sbrk_r>
 800f16c:	4580      	cmp	r8, r0
 800f16e:	d13a      	bne.n	800f1e6 <_malloc_r+0xd2>
 800f170:	6821      	ldr	r1, [r4, #0]
 800f172:	3503      	adds	r5, #3
 800f174:	1a6d      	subs	r5, r5, r1
 800f176:	f025 0503 	bic.w	r5, r5, #3
 800f17a:	3508      	adds	r5, #8
 800f17c:	2d0c      	cmp	r5, #12
 800f17e:	bf38      	it	cc
 800f180:	250c      	movcc	r5, #12
 800f182:	4629      	mov	r1, r5
 800f184:	4638      	mov	r0, r7
 800f186:	f7ff ffa5 	bl	800f0d4 <sbrk_aligned>
 800f18a:	3001      	adds	r0, #1
 800f18c:	d02b      	beq.n	800f1e6 <_malloc_r+0xd2>
 800f18e:	6823      	ldr	r3, [r4, #0]
 800f190:	442b      	add	r3, r5
 800f192:	6023      	str	r3, [r4, #0]
 800f194:	e00e      	b.n	800f1b4 <_malloc_r+0xa0>
 800f196:	6822      	ldr	r2, [r4, #0]
 800f198:	1b52      	subs	r2, r2, r5
 800f19a:	d41e      	bmi.n	800f1da <_malloc_r+0xc6>
 800f19c:	2a0b      	cmp	r2, #11
 800f19e:	d916      	bls.n	800f1ce <_malloc_r+0xba>
 800f1a0:	1961      	adds	r1, r4, r5
 800f1a2:	42a3      	cmp	r3, r4
 800f1a4:	6025      	str	r5, [r4, #0]
 800f1a6:	bf18      	it	ne
 800f1a8:	6059      	strne	r1, [r3, #4]
 800f1aa:	6863      	ldr	r3, [r4, #4]
 800f1ac:	bf08      	it	eq
 800f1ae:	6031      	streq	r1, [r6, #0]
 800f1b0:	5162      	str	r2, [r4, r5]
 800f1b2:	604b      	str	r3, [r1, #4]
 800f1b4:	4638      	mov	r0, r7
 800f1b6:	f104 060b 	add.w	r6, r4, #11
 800f1ba:	f000 f865 	bl	800f288 <__malloc_unlock>
 800f1be:	f026 0607 	bic.w	r6, r6, #7
 800f1c2:	1d23      	adds	r3, r4, #4
 800f1c4:	1af2      	subs	r2, r6, r3
 800f1c6:	d0b6      	beq.n	800f136 <_malloc_r+0x22>
 800f1c8:	1b9b      	subs	r3, r3, r6
 800f1ca:	50a3      	str	r3, [r4, r2]
 800f1cc:	e7b3      	b.n	800f136 <_malloc_r+0x22>
 800f1ce:	6862      	ldr	r2, [r4, #4]
 800f1d0:	42a3      	cmp	r3, r4
 800f1d2:	bf0c      	ite	eq
 800f1d4:	6032      	streq	r2, [r6, #0]
 800f1d6:	605a      	strne	r2, [r3, #4]
 800f1d8:	e7ec      	b.n	800f1b4 <_malloc_r+0xa0>
 800f1da:	4623      	mov	r3, r4
 800f1dc:	6864      	ldr	r4, [r4, #4]
 800f1de:	e7b2      	b.n	800f146 <_malloc_r+0x32>
 800f1e0:	4634      	mov	r4, r6
 800f1e2:	6876      	ldr	r6, [r6, #4]
 800f1e4:	e7b9      	b.n	800f15a <_malloc_r+0x46>
 800f1e6:	230c      	movs	r3, #12
 800f1e8:	603b      	str	r3, [r7, #0]
 800f1ea:	4638      	mov	r0, r7
 800f1ec:	f000 f84c 	bl	800f288 <__malloc_unlock>
 800f1f0:	e7a1      	b.n	800f136 <_malloc_r+0x22>
 800f1f2:	6025      	str	r5, [r4, #0]
 800f1f4:	e7de      	b.n	800f1b4 <_malloc_r+0xa0>
 800f1f6:	bf00      	nop
 800f1f8:	24000dcc 	.word	0x24000dcc

0800f1fc <_realloc_r>:
 800f1fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f200:	4680      	mov	r8, r0
 800f202:	4614      	mov	r4, r2
 800f204:	460e      	mov	r6, r1
 800f206:	b921      	cbnz	r1, 800f212 <_realloc_r+0x16>
 800f208:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f20c:	4611      	mov	r1, r2
 800f20e:	f7ff bf81 	b.w	800f114 <_malloc_r>
 800f212:	b92a      	cbnz	r2, 800f220 <_realloc_r+0x24>
 800f214:	f7ff ff12 	bl	800f03c <_free_r>
 800f218:	4625      	mov	r5, r4
 800f21a:	4628      	mov	r0, r5
 800f21c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f220:	f000 f838 	bl	800f294 <_malloc_usable_size_r>
 800f224:	4284      	cmp	r4, r0
 800f226:	4607      	mov	r7, r0
 800f228:	d802      	bhi.n	800f230 <_realloc_r+0x34>
 800f22a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f22e:	d812      	bhi.n	800f256 <_realloc_r+0x5a>
 800f230:	4621      	mov	r1, r4
 800f232:	4640      	mov	r0, r8
 800f234:	f7ff ff6e 	bl	800f114 <_malloc_r>
 800f238:	4605      	mov	r5, r0
 800f23a:	2800      	cmp	r0, #0
 800f23c:	d0ed      	beq.n	800f21a <_realloc_r+0x1e>
 800f23e:	42bc      	cmp	r4, r7
 800f240:	4622      	mov	r2, r4
 800f242:	4631      	mov	r1, r6
 800f244:	bf28      	it	cs
 800f246:	463a      	movcs	r2, r7
 800f248:	f7ff fbb8 	bl	800e9bc <memcpy>
 800f24c:	4631      	mov	r1, r6
 800f24e:	4640      	mov	r0, r8
 800f250:	f7ff fef4 	bl	800f03c <_free_r>
 800f254:	e7e1      	b.n	800f21a <_realloc_r+0x1e>
 800f256:	4635      	mov	r5, r6
 800f258:	e7df      	b.n	800f21a <_realloc_r+0x1e>
	...

0800f25c <_sbrk_r>:
 800f25c:	b538      	push	{r3, r4, r5, lr}
 800f25e:	4d06      	ldr	r5, [pc, #24]	; (800f278 <_sbrk_r+0x1c>)
 800f260:	2300      	movs	r3, #0
 800f262:	4604      	mov	r4, r0
 800f264:	4608      	mov	r0, r1
 800f266:	602b      	str	r3, [r5, #0]
 800f268:	f7f3 fd3a 	bl	8002ce0 <_sbrk>
 800f26c:	1c43      	adds	r3, r0, #1
 800f26e:	d102      	bne.n	800f276 <_sbrk_r+0x1a>
 800f270:	682b      	ldr	r3, [r5, #0]
 800f272:	b103      	cbz	r3, 800f276 <_sbrk_r+0x1a>
 800f274:	6023      	str	r3, [r4, #0]
 800f276:	bd38      	pop	{r3, r4, r5, pc}
 800f278:	24000dd4 	.word	0x24000dd4

0800f27c <__malloc_lock>:
 800f27c:	4801      	ldr	r0, [pc, #4]	; (800f284 <__malloc_lock+0x8>)
 800f27e:	f000 b811 	b.w	800f2a4 <__retarget_lock_acquire_recursive>
 800f282:	bf00      	nop
 800f284:	24000dd8 	.word	0x24000dd8

0800f288 <__malloc_unlock>:
 800f288:	4801      	ldr	r0, [pc, #4]	; (800f290 <__malloc_unlock+0x8>)
 800f28a:	f000 b80c 	b.w	800f2a6 <__retarget_lock_release_recursive>
 800f28e:	bf00      	nop
 800f290:	24000dd8 	.word	0x24000dd8

0800f294 <_malloc_usable_size_r>:
 800f294:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f298:	1f18      	subs	r0, r3, #4
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	bfbc      	itt	lt
 800f29e:	580b      	ldrlt	r3, [r1, r0]
 800f2a0:	18c0      	addlt	r0, r0, r3
 800f2a2:	4770      	bx	lr

0800f2a4 <__retarget_lock_acquire_recursive>:
 800f2a4:	4770      	bx	lr

0800f2a6 <__retarget_lock_release_recursive>:
 800f2a6:	4770      	bx	lr

0800f2a8 <_init>:
 800f2a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2aa:	bf00      	nop
 800f2ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f2ae:	bc08      	pop	{r3}
 800f2b0:	469e      	mov	lr, r3
 800f2b2:	4770      	bx	lr

0800f2b4 <_fini>:
 800f2b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2b6:	bf00      	nop
 800f2b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f2ba:	bc08      	pop	{r3}
 800f2bc:	469e      	mov	lr, r3
 800f2be:	4770      	bx	lr
