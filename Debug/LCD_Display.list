
LCD_Display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bcd4  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  0800bf6c  0800bf6c  0001bf6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bff8  0800bff8  0001bff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c000  0800c000  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800c004  0800c004  0001c004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  0800c008  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000010  0800c018  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000070  0800c078  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c30  240000d0  0800c0d8  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000d00  0800c0d8  00020d00  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000309dc  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000042ec  00000000  00000000  00050ada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002428  00000000  00000000  00054dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000022a8  00000000  00000000  000571f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000414ec  00000000  00000000  00059498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d2f7  00000000  00000000  0009a984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001a40b2  00000000  00000000  000c7c7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0026bd2d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a0f4  00000000  00000000  0026bd80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800bf54 	.word	0x0800bf54

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	0800bf54 	.word	0x0800bf54

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <__LCD_Delay>:
/*
 * @brief Function to delay in microseconds
 * @param delay: value in microseconds to delay
 * @retval None
 */
void __LCD_Delay(uint16_t delay) {
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	80fb      	strh	r3, [r7, #6]

	__HAL_TIM_SET_COUNTER(&timer, 0);
 80005e6:	4b09      	ldr	r3, [pc, #36]	; (800060c <__LCD_Delay+0x30>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	2200      	movs	r2, #0
 80005ec:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < delay);
 80005ee:	bf00      	nop
 80005f0:	4b06      	ldr	r3, [pc, #24]	; (800060c <__LCD_Delay+0x30>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80005f6:	88fb      	ldrh	r3, [r7, #6]
 80005f8:	429a      	cmp	r2, r3
 80005fa:	d3f9      	bcc.n	80005f0 <__LCD_Delay+0x14>

}
 80005fc:	bf00      	nop
 80005fe:	bf00      	nop
 8000600:	370c      	adds	r7, #12
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	240006c4 	.word	0x240006c4

08000610 <__LCD_Write4Bits>:
/*
 * @brief Function to write individual bits to the pins
 * @param value: value to write
 * @retval None
 */
void __LCD_Write4Bits(uint8_t value) {
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(DATA4_PORT, DATA4_PIN, (value >> 3) & 0x01);
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	08db      	lsrs	r3, r3, #3
 800061e:	b2db      	uxtb	r3, r3
 8000620:	f003 0301 	and.w	r3, r3, #1
 8000624:	b2db      	uxtb	r3, r3
 8000626:	461a      	mov	r2, r3
 8000628:	f44f 7180 	mov.w	r1, #256	; 0x100
 800062c:	481a      	ldr	r0, [pc, #104]	; (8000698 <__LCD_Write4Bits+0x88>)
 800062e:	f004 fd7d 	bl	800512c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DATA3_PORT, DATA3_PIN, (value >> 2) & 0x01);
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	089b      	lsrs	r3, r3, #2
 8000636:	b2db      	uxtb	r3, r3
 8000638:	f003 0301 	and.w	r3, r3, #1
 800063c:	b2db      	uxtb	r3, r3
 800063e:	461a      	mov	r2, r3
 8000640:	2102      	movs	r1, #2
 8000642:	4816      	ldr	r0, [pc, #88]	; (800069c <__LCD_Write4Bits+0x8c>)
 8000644:	f004 fd72 	bl	800512c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DATA2_PORT, DATA2_PIN, (value >> 1) & 0x01);
 8000648:	79fb      	ldrb	r3, [r7, #7]
 800064a:	085b      	lsrs	r3, r3, #1
 800064c:	b2db      	uxtb	r3, r3
 800064e:	f003 0301 	and.w	r3, r3, #1
 8000652:	b2db      	uxtb	r3, r3
 8000654:	461a      	mov	r2, r3
 8000656:	2140      	movs	r1, #64	; 0x40
 8000658:	480f      	ldr	r0, [pc, #60]	; (8000698 <__LCD_Write4Bits+0x88>)
 800065a:	f004 fd67 	bl	800512c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DATA1_PORT, DATA1_PIN, value & 0x01);
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	f003 0301 	and.w	r3, r3, #1
 8000664:	b2db      	uxtb	r3, r3
 8000666:	461a      	mov	r2, r3
 8000668:	2108      	movs	r1, #8
 800066a:	480d      	ldr	r0, [pc, #52]	; (80006a0 <__LCD_Write4Bits+0x90>)
 800066c:	f004 fd5e 	bl	800512c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(E_PORT, E_PIN, 1);
 8000670:	2201      	movs	r2, #1
 8000672:	2140      	movs	r1, #64	; 0x40
 8000674:	480b      	ldr	r0, [pc, #44]	; (80006a4 <__LCD_Write4Bits+0x94>)
 8000676:	f004 fd59 	bl	800512c <HAL_GPIO_WritePin>
	__LCD_Delay(120);
 800067a:	2078      	movs	r0, #120	; 0x78
 800067c:	f7ff ffae 	bl	80005dc <__LCD_Delay>
	HAL_GPIO_WritePin(E_PORT, E_PIN, 0);
 8000680:	2200      	movs	r2, #0
 8000682:	2140      	movs	r1, #64	; 0x40
 8000684:	4807      	ldr	r0, [pc, #28]	; (80006a4 <__LCD_Write4Bits+0x94>)
 8000686:	f004 fd51 	bl	800512c <HAL_GPIO_WritePin>
	__LCD_Delay(120);
 800068a:	2078      	movs	r0, #120	; 0x78
 800068c:	f7ff ffa6 	bl	80005dc <__LCD_Delay>

}
 8000690:	bf00      	nop
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	58020000 	.word	0x58020000
 800069c:	58022800 	.word	0x58022800
 80006a0:	58021800 	.word	0x58021800
 80006a4:	58020400 	.word	0x58020400

080006a8 <__LCD_Send>:
 * @brief Function to send data to the LCD and enable RS pin
 * @param value: value to send
 * @param state: state to set RS (register select) pin [0, 1]
 * @retval None
 */
void __LCD_Send(uint8_t value, int state) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	4603      	mov	r3, r0
 80006b0:	6039      	str	r1, [r7, #0]
 80006b2:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(RS_PORT, RS_PIN, state);
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	461a      	mov	r2, r3
 80006ba:	2180      	movs	r1, #128	; 0x80
 80006bc:	4808      	ldr	r0, [pc, #32]	; (80006e0 <__LCD_Send+0x38>)
 80006be:	f004 fd35 	bl	800512c <HAL_GPIO_WritePin>
	__LCD_Write4Bits(value >> 4);
 80006c2:	79fb      	ldrb	r3, [r7, #7]
 80006c4:	091b      	lsrs	r3, r3, #4
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	4618      	mov	r0, r3
 80006ca:	f7ff ffa1 	bl	8000610 <__LCD_Write4Bits>
	__LCD_Write4Bits(value);
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	4618      	mov	r0, r3
 80006d2:	f7ff ff9d 	bl	8000610 <__LCD_Write4Bits>

}
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	58020400 	.word	0x58020400

080006e4 <__LCD_Cmd>:
/*
 * @brief Function to send command to the LCD
 * @param value: command to send
 * @retval None
 */
void __LCD_Cmd(uint8_t value) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4603      	mov	r3, r0
 80006ec:	71fb      	strb	r3, [r7, #7]

	__LCD_Send(value, 0);
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	2100      	movs	r1, #0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f7ff ffd8 	bl	80006a8 <__LCD_Send>

}
 80006f8:	bf00      	nop
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}

08000700 <__LCD_Data>:
/*
 * @brief Function to send data to the LCD
 * @param value: value to send
 * @retval None
 */
void __LCD_Data(uint8_t value) {
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	71fb      	strb	r3, [r7, #7]

	__LCD_Send(value, 1);
 800070a:	79fb      	ldrb	r3, [r7, #7]
 800070c:	2101      	movs	r1, #1
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff ffca 	bl	80006a8 <__LCD_Send>

}
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <LCD_Write>:
/*
 * @brief Function to write to the LCD
 * @param value: value to write to the LCD
 * @retval None
 */
void LCD_Write(char *value) {
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]

	while (*value) {
 8000724:	e00a      	b.n	800073c <LCD_Write+0x20>
		__LCD_Data(*value++);
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	1c5a      	adds	r2, r3, #1
 800072a:	607a      	str	r2, [r7, #4]
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	4618      	mov	r0, r3
 8000730:	f7ff ffe6 	bl	8000700 <__LCD_Data>
		__LCD_Delay(5000);
 8000734:	f241 3088 	movw	r0, #5000	; 0x1388
 8000738:	f7ff ff50 	bl	80005dc <__LCD_Delay>
	while (*value) {
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d1f0      	bne.n	8000726 <LCD_Write+0xa>
		// HAL_Delay(1000);
	}

}
 8000744:	bf00      	nop
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}

0800074e <LCD_Pos_Cursor>:
 * @brief Function to set the cursor position
 * @param row: row to set the cursor [0, 1]
 * @param col: column to set the cursor [0, 15]
 * @retval None
 */
void LCD_Pos_Cursor(uint8_t row, uint8_t col) {
 800074e:	b580      	push	{r7, lr}
 8000750:	b082      	sub	sp, #8
 8000752:	af00      	add	r7, sp, #0
 8000754:	4603      	mov	r3, r0
 8000756:	460a      	mov	r2, r1
 8000758:	71fb      	strb	r3, [r7, #7]
 800075a:	4613      	mov	r3, r2
 800075c:	71bb      	strb	r3, [r7, #6]

	switch (row) {
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d002      	beq.n	800076a <LCD_Pos_Cursor+0x1c>
 8000764:	2b01      	cmp	r3, #1
 8000766:	d005      	beq.n	8000774 <LCD_Pos_Cursor+0x26>
 8000768:	e009      	b.n	800077e <LCD_Pos_Cursor+0x30>
		case 0:
			col |= 0x80;
 800076a:	79bb      	ldrb	r3, [r7, #6]
 800076c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000770:	71bb      	strb	r3, [r7, #6]
	        break;
 8000772:	e009      	b.n	8000788 <LCD_Pos_Cursor+0x3a>
	    case 1:
	        col |= 0xC0;
 8000774:	79bb      	ldrb	r3, [r7, #6]
 8000776:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800077a:	71bb      	strb	r3, [r7, #6]
	        break;
 800077c:	e004      	b.n	8000788 <LCD_Pos_Cursor+0x3a>
	    default:
	    	row = 0;
 800077e:	2300      	movs	r3, #0
 8000780:	71fb      	strb	r3, [r7, #7]
	    	col = 0;
 8000782:	2300      	movs	r3, #0
 8000784:	71bb      	strb	r3, [r7, #6]
	    	break;
 8000786:	bf00      	nop
	}
	__LCD_Cmd(col);
 8000788:	79bb      	ldrb	r3, [r7, #6]
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff ffaa 	bl	80006e4 <__LCD_Cmd>

}
 8000790:	bf00      	nop
 8000792:	3708      	adds	r7, #8
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <LCD_Scroll_Display_Right>:
/*
 * @brief Function to scroll the display right
 * @param None
 * @retval None
 */
void LCD_Scroll_Display_Right(void) {
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0

	__LCD_Cmd(SCROLL_DISPLAY_RIGHT);
 800079c:	201c      	movs	r0, #28
 800079e:	f7ff ffa1 	bl	80006e4 <__LCD_Cmd>

}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <LCD_Scroll_Display_Left>:
/*
 * @brief Function to scroll the display left
 * @param None
 * @retval None
 */
void LCD_Scroll_Display_Left(void) {
 80007a6:	b580      	push	{r7, lr}
 80007a8:	af00      	add	r7, sp, #0

	__LCD_Cmd(SCROLL_DISPLAY_LEFT);
 80007aa:	2018      	movs	r0, #24
 80007ac:	f7ff ff9a 	bl	80006e4 <__LCD_Cmd>

}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <LCD_Init>:
 * @brief Function to initialize the LCD
 * @param cursor: true/false to enable cursor
 * @param blinking: true/false to enable blinking
 * @retval None
 */
void LCD_Init(bool cursor, bool blinking) {
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	4603      	mov	r3, r0
 80007bc:	460a      	mov	r2, r1
 80007be:	71fb      	strb	r3, [r7, #7]
 80007c0:	4613      	mov	r3, r2
 80007c2:	71bb      	strb	r3, [r7, #6]

	// Init
	__LCD_Delay(50000);
 80007c4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80007c8:	f7ff ff08 	bl	80005dc <__LCD_Delay>
	__LCD_Cmd(0x30);
 80007cc:	2030      	movs	r0, #48	; 0x30
 80007ce:	f7ff ff89 	bl	80006e4 <__LCD_Cmd>
	__LCD_Delay(4500);
 80007d2:	f241 1094 	movw	r0, #4500	; 0x1194
 80007d6:	f7ff ff01 	bl	80005dc <__LCD_Delay>
	__LCD_Cmd(0x30);
 80007da:	2030      	movs	r0, #48	; 0x30
 80007dc:	f7ff ff82 	bl	80006e4 <__LCD_Cmd>
	__LCD_Delay(150);
 80007e0:	2096      	movs	r0, #150	; 0x96
 80007e2:	f7ff fefb 	bl	80005dc <__LCD_Delay>
	__LCD_Cmd(0x30);
 80007e6:	2030      	movs	r0, #48	; 0x30
 80007e8:	f7ff ff7c 	bl	80006e4 <__LCD_Cmd>

	// Go to 4 bit mode
	__LCD_Delay(10);
 80007ec:	200a      	movs	r0, #10
 80007ee:	f7ff fef5 	bl	80005dc <__LCD_Delay>
	__LCD_Cmd(0x20);
 80007f2:	2020      	movs	r0, #32
 80007f4:	f7ff ff76 	bl	80006e4 <__LCD_Cmd>
	__LCD_Delay(50);
 80007f8:	2032      	movs	r0, #50	; 0x32
 80007fa:	f7ff feef 	bl	80005dc <__LCD_Delay>

	// Set display lines and font
	__LCD_Cmd(0x28);
 80007fe:	2028      	movs	r0, #40	; 0x28
 8000800:	f7ff ff70 	bl	80006e4 <__LCD_Cmd>
	__LCD_Delay(50);
 8000804:	2032      	movs	r0, #50	; 0x32
 8000806:	f7ff fee9 	bl	80005dc <__LCD_Delay>

	// Display on/off
	__LCD_Cmd(0x08);
 800080a:	2008      	movs	r0, #8
 800080c:	f7ff ff6a 	bl	80006e4 <__LCD_Cmd>
	__LCD_Delay(50);
 8000810:	2032      	movs	r0, #50	; 0x32
 8000812:	f7ff fee3 	bl	80005dc <__LCD_Delay>

	// Display clear
	__LCD_Cmd(0x01);
 8000816:	2001      	movs	r0, #1
 8000818:	f7ff ff64 	bl	80006e4 <__LCD_Cmd>
	__LCD_Delay(1500);
 800081c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000820:	f7ff fedc 	bl	80005dc <__LCD_Delay>

	// Entry mode set
	__LCD_Cmd(0x06);
 8000824:	2006      	movs	r0, #6
 8000826:	f7ff ff5d 	bl	80006e4 <__LCD_Cmd>
	__LCD_Delay(50);
 800082a:	2032      	movs	r0, #50	; 0x32
 800082c:	f7ff fed6 	bl	80005dc <__LCD_Delay>

	// Display on/off
	if (cursor && blinking) {
 8000830:	79fb      	ldrb	r3, [r7, #7]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d006      	beq.n	8000844 <LCD_Init+0x90>
 8000836:	79bb      	ldrb	r3, [r7, #6]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d003      	beq.n	8000844 <LCD_Init+0x90>
		__LCD_Cmd(CURSOR_BLINK);
 800083c:	200f      	movs	r0, #15
 800083e:	f7ff ff51 	bl	80006e4 <__LCD_Cmd>
 8000842:	e010      	b.n	8000866 <LCD_Init+0xb2>
	} else if (cursor) {
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d003      	beq.n	8000852 <LCD_Init+0x9e>
		__LCD_Cmd(CURSOR);
 800084a:	200e      	movs	r0, #14
 800084c:	f7ff ff4a 	bl	80006e4 <__LCD_Cmd>
 8000850:	e009      	b.n	8000866 <LCD_Init+0xb2>
	} else if (blinking) {
 8000852:	79bb      	ldrb	r3, [r7, #6]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d003      	beq.n	8000860 <LCD_Init+0xac>
		__LCD_Cmd(BLINK);
 8000858:	200d      	movs	r0, #13
 800085a:	f7ff ff43 	bl	80006e4 <__LCD_Cmd>
 800085e:	e002      	b.n	8000866 <LCD_Init+0xb2>
	} else {
		__LCD_Cmd(NO_BLINK_NO_CURSOR);
 8000860:	200c      	movs	r0, #12
 8000862:	f7ff ff3f 	bl	80006e4 <__LCD_Cmd>
	}

	__LCD_Delay(50000);
 8000866:	f24c 3050 	movw	r0, #50000	; 0xc350
 800086a:	f7ff feb7 	bl	80005dc <__LCD_Delay>
	LCD_Pos_Cursor(0, 0);
 800086e:	2100      	movs	r1, #0
 8000870:	2000      	movs	r0, #0
 8000872:	f7ff ff6c 	bl	800074e <LCD_Pos_Cursor>

}
 8000876:	bf00      	nop
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
	...

08000880 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000886:	f002 f8bb 	bl	8002a00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800088a:	f000 f855 	bl	8000938 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800088e:	f000 f8d5 	bl	8000a3c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000892:	f000 fe5d 	bl	8001550 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000896:	f000 f901 	bl	8000a9c <MX_ADC1_Init>
  MX_ADC2_Init();
 800089a:	f000 f975 	bl	8000b88 <MX_ADC2_Init>
  MX_ADC3_Init();
 800089e:	f000 f9d7 	bl	8000c50 <MX_ADC3_Init>
  MX_ETH_Init();
 80008a2:	f000 fa37 	bl	8000d14 <MX_ETH_Init>
  MX_FDCAN1_Init();
 80008a6:	f000 fa81 	bl	8000dac <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 80008aa:	f000 fae3 	bl	8000e74 <MX_FDCAN2_Init>
  MX_FMC_Init();
 80008ae:	f000 fe01 	bl	80014b4 <MX_FMC_Init>
  MX_LTDC_Init();
 80008b2:	f000 fb43 	bl	8000f3c <MX_LTDC_Init>
  MX_RTC_Init();
 80008b6:	f000 fbf3 	bl	80010a0 <MX_RTC_Init>
  MX_SAI2_Init();
 80008ba:	f000 fc19 	bl	80010f0 <MX_SAI2_Init>
  MX_SPI2_Init();
 80008be:	f000 fcd5 	bl	800126c <MX_SPI2_Init>
  MX_USART3_UART_Init();
 80008c2:	f000 fd79 	bl	80013b8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80008c6:	f000 fdc3 	bl	8001450 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 80008ca:	f000 fd23 	bl	8001314 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  int edge = 0, i = 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	607b      	str	r3, [r7, #4]
 80008d2:	2300      	movs	r3, #0
 80008d4:	603b      	str	r3, [r7, #0]
  LCD_Init(true, true);
 80008d6:	2101      	movs	r1, #1
 80008d8:	2001      	movs	r0, #1
 80008da:	f7ff ff6b 	bl	80007b4 <LCD_Init>
  HAL_Delay(1000);
 80008de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008e2:	f002 f91f 	bl	8002b24 <HAL_Delay>
  LCD_Write("Zdravo");
 80008e6:	4813      	ldr	r0, [pc, #76]	; (8000934 <main+0xb4>)
 80008e8:	f7ff ff18 	bl	800071c <LCD_Write>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (i < 10 && edge == 0) {
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	2b09      	cmp	r3, #9
 80008f0:	dc0d      	bgt.n	800090e <main+0x8e>
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d10a      	bne.n	800090e <main+0x8e>
		  LCD_Scroll_Display_Right();
 80008f8:	f7ff ff4e 	bl	8000798 <LCD_Scroll_Display_Right>
		  i++;
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	3301      	adds	r3, #1
 8000900:	603b      	str	r3, [r7, #0]
		  if (i == 10) {
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	2b0a      	cmp	r3, #10
 8000906:	d10f      	bne.n	8000928 <main+0xa8>
			  edge = 1;
 8000908:	2301      	movs	r3, #1
 800090a:	607b      	str	r3, [r7, #4]
		  if (i == 10) {
 800090c:	e00c      	b.n	8000928 <main+0xa8>
		  }
	  } else if (edge == 1) {
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2b01      	cmp	r3, #1
 8000912:	d109      	bne.n	8000928 <main+0xa8>
		  LCD_Scroll_Display_Left();
 8000914:	f7ff ff47 	bl	80007a6 <LCD_Scroll_Display_Left>
		  i--;
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	3b01      	subs	r3, #1
 800091c:	603b      	str	r3, [r7, #0]
		  if (i == 0) {
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d101      	bne.n	8000928 <main+0xa8>
			  edge = 0;
 8000924:	2300      	movs	r3, #0
 8000926:	607b      	str	r3, [r7, #4]
		  }
	  }
	  HAL_Delay(1000);
 8000928:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800092c:	f002 f8fa 	bl	8002b24 <HAL_Delay>
	  if (i < 10 && edge == 0) {
 8000930:	e7dc      	b.n	80008ec <main+0x6c>
 8000932:	bf00      	nop
 8000934:	0800bf6c 	.word	0x0800bf6c

08000938 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b09c      	sub	sp, #112	; 0x70
 800093c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800093e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000942:	224c      	movs	r2, #76	; 0x4c
 8000944:	2100      	movs	r1, #0
 8000946:	4618      	mov	r0, r3
 8000948:	f00b fafc 	bl	800bf44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800094c:	1d3b      	adds	r3, r7, #4
 800094e:	2220      	movs	r2, #32
 8000950:	2100      	movs	r1, #0
 8000952:	4618      	mov	r0, r3
 8000954:	f00b faf6 	bl	800bf44 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000958:	2002      	movs	r0, #2
 800095a:	f004 fff1 	bl	8005940 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800095e:	2300      	movs	r3, #0
 8000960:	603b      	str	r3, [r7, #0]
 8000962:	4b34      	ldr	r3, [pc, #208]	; (8000a34 <SystemClock_Config+0xfc>)
 8000964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000966:	4a33      	ldr	r2, [pc, #204]	; (8000a34 <SystemClock_Config+0xfc>)
 8000968:	f023 0301 	bic.w	r3, r3, #1
 800096c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800096e:	4b31      	ldr	r3, [pc, #196]	; (8000a34 <SystemClock_Config+0xfc>)
 8000970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	603b      	str	r3, [r7, #0]
 8000978:	4b2f      	ldr	r3, [pc, #188]	; (8000a38 <SystemClock_Config+0x100>)
 800097a:	699b      	ldr	r3, [r3, #24]
 800097c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000980:	4a2d      	ldr	r2, [pc, #180]	; (8000a38 <SystemClock_Config+0x100>)
 8000982:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000986:	6193      	str	r3, [r2, #24]
 8000988:	4b2b      	ldr	r3, [pc, #172]	; (8000a38 <SystemClock_Config+0x100>)
 800098a:	699b      	ldr	r3, [r3, #24]
 800098c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000990:	603b      	str	r3, [r7, #0]
 8000992:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000994:	bf00      	nop
 8000996:	4b28      	ldr	r3, [pc, #160]	; (8000a38 <SystemClock_Config+0x100>)
 8000998:	699b      	ldr	r3, [r3, #24]
 800099a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800099e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009a2:	d1f8      	bne.n	8000996 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 80009a4:	230b      	movs	r3, #11
 80009a6:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009a8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80009ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80009ae:	2301      	movs	r3, #1
 80009b0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009b2:	2340      	movs	r3, #64	; 0x40
 80009b4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80009b6:	2301      	movs	r3, #1
 80009b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ba:	2302      	movs	r3, #2
 80009bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009be:	2302      	movs	r3, #2
 80009c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 22;
 80009c2:	2316      	movs	r3, #22
 80009c4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 169;
 80009c6:	23a9      	movs	r3, #169	; 0xa9
 80009c8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009ca:	2302      	movs	r3, #2
 80009cc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009ce:	2304      	movs	r3, #4
 80009d0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009d2:	2302      	movs	r3, #2
 80009d4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 80009d6:	2300      	movs	r3, #0
 80009d8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009da:	2300      	movs	r3, #0
 80009dc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009de:	2300      	movs	r3, #0
 80009e0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e6:	4618      	mov	r0, r3
 80009e8:	f004 fff4 	bl	80059d4 <HAL_RCC_OscConfig>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80009f2:	f000 ffab 	bl	800194c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009f6:	233f      	movs	r3, #63	; 0x3f
 80009f8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009fa:	2300      	movs	r3, #0
 80009fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009fe:	2300      	movs	r3, #0
 8000a00:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a02:	2300      	movs	r3, #0
 8000a04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000a06:	2300      	movs	r3, #0
 8000a08:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000a12:	2300      	movs	r3, #0
 8000a14:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a16:	1d3b      	adds	r3, r7, #4
 8000a18:	2101      	movs	r1, #1
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f005 fc34 	bl	8006288 <HAL_RCC_ClockConfig>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000a26:	f000 ff91 	bl	800194c <Error_Handler>
  }
}
 8000a2a:	bf00      	nop
 8000a2c:	3770      	adds	r7, #112	; 0x70
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	58000400 	.word	0x58000400
 8000a38:	58024800 	.word	0x58024800

08000a3c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b0b0      	sub	sp, #192	; 0xc0
 8000a40:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a42:	463b      	mov	r3, r7
 8000a44:	22c0      	movs	r2, #192	; 0xc0
 8000a46:	2100      	movs	r1, #0
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f00b fa7b 	bl	800bf44 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a4e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000a52:	f04f 0300 	mov.w	r3, #0
 8000a56:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000a5e:	230c      	movs	r3, #12
 8000a60:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 8000a62:	2305      	movs	r3, #5
 8000a64:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000a66:	2302      	movs	r3, #2
 8000a68:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000a6e:	23c0      	movs	r3, #192	; 0xc0
 8000a70:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000a72:	2320      	movs	r3, #32
 8000a74:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000a76:	2300      	movs	r3, #0
 8000a78:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a80:	463b      	mov	r3, r7
 8000a82:	4618      	mov	r0, r3
 8000a84:	f005 ff8c 	bl	80069a0 <HAL_RCCEx_PeriphCLKConfig>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000a8e:	f000 ff5d 	bl	800194c <Error_Handler>
  }
}
 8000a92:	bf00      	nop
 8000a94:	37c0      	adds	r7, #192	; 0xc0
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
	...

08000a9c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08a      	sub	sp, #40	; 0x28
 8000aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000aa2:	f107 031c 	add.w	r3, r7, #28
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000aae:	463b      	mov	r3, r7
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
 8000ab6:	609a      	str	r2, [r3, #8]
 8000ab8:	60da      	str	r2, [r3, #12]
 8000aba:	611a      	str	r2, [r3, #16]
 8000abc:	615a      	str	r2, [r3, #20]
 8000abe:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ac0:	4b2f      	ldr	r3, [pc, #188]	; (8000b80 <MX_ADC1_Init+0xe4>)
 8000ac2:	4a30      	ldr	r2, [pc, #192]	; (8000b84 <MX_ADC1_Init+0xe8>)
 8000ac4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ac6:	4b2e      	ldr	r3, [pc, #184]	; (8000b80 <MX_ADC1_Init+0xe4>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000acc:	4b2c      	ldr	r3, [pc, #176]	; (8000b80 <MX_ADC1_Init+0xe4>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ad2:	4b2b      	ldr	r3, [pc, #172]	; (8000b80 <MX_ADC1_Init+0xe4>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ad8:	4b29      	ldr	r3, [pc, #164]	; (8000b80 <MX_ADC1_Init+0xe4>)
 8000ada:	2204      	movs	r2, #4
 8000adc:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ade:	4b28      	ldr	r3, [pc, #160]	; (8000b80 <MX_ADC1_Init+0xe4>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ae4:	4b26      	ldr	r3, [pc, #152]	; (8000b80 <MX_ADC1_Init+0xe4>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000aea:	4b25      	ldr	r3, [pc, #148]	; (8000b80 <MX_ADC1_Init+0xe4>)
 8000aec:	2201      	movs	r2, #1
 8000aee:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000af0:	4b23      	ldr	r3, [pc, #140]	; (8000b80 <MX_ADC1_Init+0xe4>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000af6:	4b22      	ldr	r3, [pc, #136]	; (8000b80 <MX_ADC1_Init+0xe4>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000afc:	4b20      	ldr	r3, [pc, #128]	; (8000b80 <MX_ADC1_Init+0xe4>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000b02:	4b1f      	ldr	r3, [pc, #124]	; (8000b80 <MX_ADC1_Init+0xe4>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b08:	4b1d      	ldr	r3, [pc, #116]	; (8000b80 <MX_ADC1_Init+0xe4>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b0e:	4b1c      	ldr	r3, [pc, #112]	; (8000b80 <MX_ADC1_Init+0xe4>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000b14:	4b1a      	ldr	r3, [pc, #104]	; (8000b80 <MX_ADC1_Init+0xe4>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b1c:	4818      	ldr	r0, [pc, #96]	; (8000b80 <MX_ADC1_Init+0xe4>)
 8000b1e:	f002 f9e7 	bl	8002ef0 <HAL_ADC_Init>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000b28:	f000 ff10 	bl	800194c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000b30:	f107 031c 	add.w	r3, r7, #28
 8000b34:	4619      	mov	r1, r3
 8000b36:	4812      	ldr	r0, [pc, #72]	; (8000b80 <MX_ADC1_Init+0xe4>)
 8000b38:	f002 fffe 	bl	8003b38 <HAL_ADCEx_MultiModeConfigChannel>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000b42:	f000 ff03 	bl	800194c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000b46:	2301      	movs	r3, #1
 8000b48:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b4a:	2306      	movs	r3, #6
 8000b4c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b52:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000b56:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b58:	2304      	movs	r3, #4
 8000b5a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b60:	2300      	movs	r3, #0
 8000b62:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b64:	463b      	mov	r3, r7
 8000b66:	4619      	mov	r1, r3
 8000b68:	4805      	ldr	r0, [pc, #20]	; (8000b80 <MX_ADC1_Init+0xe4>)
 8000b6a:	f002 fb63 	bl	8003234 <HAL_ADC_ConfigChannel>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000b74:	f000 feea 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b78:	bf00      	nop
 8000b7a:	3728      	adds	r7, #40	; 0x28
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	24000124 	.word	0x24000124
 8000b84:	40022000 	.word	0x40022000

08000b88 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b088      	sub	sp, #32
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b8e:	1d3b      	adds	r3, r7, #4
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
 8000b9a:	611a      	str	r2, [r3, #16]
 8000b9c:	615a      	str	r2, [r3, #20]
 8000b9e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000ba0:	4b29      	ldr	r3, [pc, #164]	; (8000c48 <MX_ADC2_Init+0xc0>)
 8000ba2:	4a2a      	ldr	r2, [pc, #168]	; (8000c4c <MX_ADC2_Init+0xc4>)
 8000ba4:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ba6:	4b28      	ldr	r3, [pc, #160]	; (8000c48 <MX_ADC2_Init+0xc0>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000bac:	4b26      	ldr	r3, [pc, #152]	; (8000c48 <MX_ADC2_Init+0xc0>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bb2:	4b25      	ldr	r3, [pc, #148]	; (8000c48 <MX_ADC2_Init+0xc0>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bb8:	4b23      	ldr	r3, [pc, #140]	; (8000c48 <MX_ADC2_Init+0xc0>)
 8000bba:	2204      	movs	r2, #4
 8000bbc:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000bbe:	4b22      	ldr	r3, [pc, #136]	; (8000c48 <MX_ADC2_Init+0xc0>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000bc4:	4b20      	ldr	r3, [pc, #128]	; (8000c48 <MX_ADC2_Init+0xc0>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000bca:	4b1f      	ldr	r3, [pc, #124]	; (8000c48 <MX_ADC2_Init+0xc0>)
 8000bcc:	2201      	movs	r2, #1
 8000bce:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000bd0:	4b1d      	ldr	r3, [pc, #116]	; (8000c48 <MX_ADC2_Init+0xc0>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bd6:	4b1c      	ldr	r3, [pc, #112]	; (8000c48 <MX_ADC2_Init+0xc0>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bdc:	4b1a      	ldr	r3, [pc, #104]	; (8000c48 <MX_ADC2_Init+0xc0>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000be2:	4b19      	ldr	r3, [pc, #100]	; (8000c48 <MX_ADC2_Init+0xc0>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000be8:	4b17      	ldr	r3, [pc, #92]	; (8000c48 <MX_ADC2_Init+0xc0>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000bee:	4b16      	ldr	r3, [pc, #88]	; (8000c48 <MX_ADC2_Init+0xc0>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000bf4:	4b14      	ldr	r3, [pc, #80]	; (8000c48 <MX_ADC2_Init+0xc0>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000bfc:	4812      	ldr	r0, [pc, #72]	; (8000c48 <MX_ADC2_Init+0xc0>)
 8000bfe:	f002 f977 	bl	8002ef0 <HAL_ADC_Init>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8000c08:	f000 fea0 	bl	800194c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c10:	2306      	movs	r3, #6
 8000c12:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c14:	2300      	movs	r3, #0
 8000c16:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c18:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000c1c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c1e:	2304      	movs	r3, #4
 8000c20:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000c26:	2300      	movs	r3, #0
 8000c28:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000c2a:	1d3b      	adds	r3, r7, #4
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4806      	ldr	r0, [pc, #24]	; (8000c48 <MX_ADC2_Init+0xc0>)
 8000c30:	f002 fb00 	bl	8003234 <HAL_ADC_ConfigChannel>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000c3a:	f000 fe87 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000c3e:	bf00      	nop
 8000c40:	3720      	adds	r7, #32
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	24000188 	.word	0x24000188
 8000c4c:	40022100 	.word	0x40022100

08000c50 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b088      	sub	sp, #32
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
 8000c64:	615a      	str	r2, [r3, #20]
 8000c66:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000c68:	4b27      	ldr	r3, [pc, #156]	; (8000d08 <MX_ADC3_Init+0xb8>)
 8000c6a:	4a28      	ldr	r2, [pc, #160]	; (8000d0c <MX_ADC3_Init+0xbc>)
 8000c6c:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000c6e:	4b26      	ldr	r3, [pc, #152]	; (8000d08 <MX_ADC3_Init+0xb8>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c74:	4b24      	ldr	r3, [pc, #144]	; (8000d08 <MX_ADC3_Init+0xb8>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c7a:	4b23      	ldr	r3, [pc, #140]	; (8000d08 <MX_ADC3_Init+0xb8>)
 8000c7c:	2204      	movs	r2, #4
 8000c7e:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000c80:	4b21      	ldr	r3, [pc, #132]	; (8000d08 <MX_ADC3_Init+0xb8>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000c86:	4b20      	ldr	r3, [pc, #128]	; (8000d08 <MX_ADC3_Init+0xb8>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000c8c:	4b1e      	ldr	r3, [pc, #120]	; (8000d08 <MX_ADC3_Init+0xb8>)
 8000c8e:	2201      	movs	r2, #1
 8000c90:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000c92:	4b1d      	ldr	r3, [pc, #116]	; (8000d08 <MX_ADC3_Init+0xb8>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c98:	4b1b      	ldr	r3, [pc, #108]	; (8000d08 <MX_ADC3_Init+0xb8>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c9e:	4b1a      	ldr	r3, [pc, #104]	; (8000d08 <MX_ADC3_Init+0xb8>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000ca4:	4b18      	ldr	r3, [pc, #96]	; (8000d08 <MX_ADC3_Init+0xb8>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000caa:	4b17      	ldr	r3, [pc, #92]	; (8000d08 <MX_ADC3_Init+0xb8>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000cb0:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <MX_ADC3_Init+0xb8>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000cb6:	4b14      	ldr	r3, [pc, #80]	; (8000d08 <MX_ADC3_Init+0xb8>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000cbe:	4812      	ldr	r0, [pc, #72]	; (8000d08 <MX_ADC3_Init+0xb8>)
 8000cc0:	f002 f916 	bl	8002ef0 <HAL_ADC_Init>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_ADC3_Init+0x7e>
  {
    Error_Handler();
 8000cca:	f000 fe3f 	bl	800194c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000cce:	4b10      	ldr	r3, [pc, #64]	; (8000d10 <MX_ADC3_Init+0xc0>)
 8000cd0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cd2:	2306      	movs	r3, #6
 8000cd4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000cda:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000cde:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ce0:	2304      	movs	r3, #4
 8000ce2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000cec:	1d3b      	adds	r3, r7, #4
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4805      	ldr	r0, [pc, #20]	; (8000d08 <MX_ADC3_Init+0xb8>)
 8000cf2:	f002 fa9f 	bl	8003234 <HAL_ADC_ConfigChannel>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8000cfc:	f000 fe26 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000d00:	bf00      	nop
 8000d02:	3720      	adds	r7, #32
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	240001ec 	.word	0x240001ec
 8000d0c:	58026000 	.word	0x58026000
 8000d10:	1d500080 	.word	0x1d500080

08000d14 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000d18:	4b1e      	ldr	r3, [pc, #120]	; (8000d94 <MX_ETH_Init+0x80>)
 8000d1a:	4a1f      	ldr	r2, [pc, #124]	; (8000d98 <MX_ETH_Init+0x84>)
 8000d1c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000d1e:	4b1f      	ldr	r3, [pc, #124]	; (8000d9c <MX_ETH_Init+0x88>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000d24:	4b1d      	ldr	r3, [pc, #116]	; (8000d9c <MX_ETH_Init+0x88>)
 8000d26:	2280      	movs	r2, #128	; 0x80
 8000d28:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000d2a:	4b1c      	ldr	r3, [pc, #112]	; (8000d9c <MX_ETH_Init+0x88>)
 8000d2c:	22e1      	movs	r2, #225	; 0xe1
 8000d2e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000d30:	4b1a      	ldr	r3, [pc, #104]	; (8000d9c <MX_ETH_Init+0x88>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000d36:	4b19      	ldr	r3, [pc, #100]	; (8000d9c <MX_ETH_Init+0x88>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000d3c:	4b17      	ldr	r3, [pc, #92]	; (8000d9c <MX_ETH_Init+0x88>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000d42:	4b14      	ldr	r3, [pc, #80]	; (8000d94 <MX_ETH_Init+0x80>)
 8000d44:	4a15      	ldr	r2, [pc, #84]	; (8000d9c <MX_ETH_Init+0x88>)
 8000d46:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_MII_MODE;
 8000d48:	4b12      	ldr	r3, [pc, #72]	; (8000d94 <MX_ETH_Init+0x80>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000d4e:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <MX_ETH_Init+0x80>)
 8000d50:	4a13      	ldr	r2, [pc, #76]	; (8000da0 <MX_ETH_Init+0x8c>)
 8000d52:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000d54:	4b0f      	ldr	r3, [pc, #60]	; (8000d94 <MX_ETH_Init+0x80>)
 8000d56:	4a13      	ldr	r2, [pc, #76]	; (8000da4 <MX_ETH_Init+0x90>)
 8000d58:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000d5a:	4b0e      	ldr	r3, [pc, #56]	; (8000d94 <MX_ETH_Init+0x80>)
 8000d5c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000d60:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000d62:	480c      	ldr	r0, [pc, #48]	; (8000d94 <MX_ETH_Init+0x80>)
 8000d64:	f003 f8aa 	bl	8003ebc <HAL_ETH_Init>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000d6e:	f000 fded 	bl	800194c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000d72:	2238      	movs	r2, #56	; 0x38
 8000d74:	2100      	movs	r1, #0
 8000d76:	480c      	ldr	r0, [pc, #48]	; (8000da8 <MX_ETH_Init+0x94>)
 8000d78:	f00b f8e4 	bl	800bf44 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000d7c:	4b0a      	ldr	r3, [pc, #40]	; (8000da8 <MX_ETH_Init+0x94>)
 8000d7e:	2221      	movs	r2, #33	; 0x21
 8000d80:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000d82:	4b09      	ldr	r3, [pc, #36]	; (8000da8 <MX_ETH_Init+0x94>)
 8000d84:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d88:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000d8a:	4b07      	ldr	r3, [pc, #28]	; (8000da8 <MX_ETH_Init+0x94>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000d90:	bf00      	nop
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	24000250 	.word	0x24000250
 8000d98:	40028000 	.word	0x40028000
 8000d9c:	24000ce4 	.word	0x24000ce4
 8000da0:	24000070 	.word	0x24000070
 8000da4:	24000010 	.word	0x24000010
 8000da8:	240000ec 	.word	0x240000ec

08000dac <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000db0:	4b2e      	ldr	r3, [pc, #184]	; (8000e6c <MX_FDCAN1_Init+0xc0>)
 8000db2:	4a2f      	ldr	r2, [pc, #188]	; (8000e70 <MX_FDCAN1_Init+0xc4>)
 8000db4:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000db6:	4b2d      	ldr	r3, [pc, #180]	; (8000e6c <MX_FDCAN1_Init+0xc0>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000dbc:	4b2b      	ldr	r3, [pc, #172]	; (8000e6c <MX_FDCAN1_Init+0xc0>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000dc2:	4b2a      	ldr	r3, [pc, #168]	; (8000e6c <MX_FDCAN1_Init+0xc0>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000dc8:	4b28      	ldr	r3, [pc, #160]	; (8000e6c <MX_FDCAN1_Init+0xc0>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000dce:	4b27      	ldr	r3, [pc, #156]	; (8000e6c <MX_FDCAN1_Init+0xc0>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000dd4:	4b25      	ldr	r3, [pc, #148]	; (8000e6c <MX_FDCAN1_Init+0xc0>)
 8000dd6:	2210      	movs	r2, #16
 8000dd8:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000dda:	4b24      	ldr	r3, [pc, #144]	; (8000e6c <MX_FDCAN1_Init+0xc0>)
 8000ddc:	2201      	movs	r2, #1
 8000dde:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000de0:	4b22      	ldr	r3, [pc, #136]	; (8000e6c <MX_FDCAN1_Init+0xc0>)
 8000de2:	2202      	movs	r2, #2
 8000de4:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000de6:	4b21      	ldr	r3, [pc, #132]	; (8000e6c <MX_FDCAN1_Init+0xc0>)
 8000de8:	2202      	movs	r2, #2
 8000dea:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000dec:	4b1f      	ldr	r3, [pc, #124]	; (8000e6c <MX_FDCAN1_Init+0xc0>)
 8000dee:	2201      	movs	r2, #1
 8000df0:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000df2:	4b1e      	ldr	r3, [pc, #120]	; (8000e6c <MX_FDCAN1_Init+0xc0>)
 8000df4:	2201      	movs	r2, #1
 8000df6:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000df8:	4b1c      	ldr	r3, [pc, #112]	; (8000e6c <MX_FDCAN1_Init+0xc0>)
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000dfe:	4b1b      	ldr	r3, [pc, #108]	; (8000e6c <MX_FDCAN1_Init+0xc0>)
 8000e00:	2201      	movs	r2, #1
 8000e02:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000e04:	4b19      	ldr	r3, [pc, #100]	; (8000e6c <MX_FDCAN1_Init+0xc0>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000e0a:	4b18      	ldr	r3, [pc, #96]	; (8000e6c <MX_FDCAN1_Init+0xc0>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000e10:	4b16      	ldr	r3, [pc, #88]	; (8000e6c <MX_FDCAN1_Init+0xc0>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000e16:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <MX_FDCAN1_Init+0xc0>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000e1c:	4b13      	ldr	r3, [pc, #76]	; (8000e6c <MX_FDCAN1_Init+0xc0>)
 8000e1e:	2204      	movs	r2, #4
 8000e20:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000e22:	4b12      	ldr	r3, [pc, #72]	; (8000e6c <MX_FDCAN1_Init+0xc0>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000e28:	4b10      	ldr	r3, [pc, #64]	; (8000e6c <MX_FDCAN1_Init+0xc0>)
 8000e2a:	2204      	movs	r2, #4
 8000e2c:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000e2e:	4b0f      	ldr	r3, [pc, #60]	; (8000e6c <MX_FDCAN1_Init+0xc0>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000e34:	4b0d      	ldr	r3, [pc, #52]	; (8000e6c <MX_FDCAN1_Init+0xc0>)
 8000e36:	2204      	movs	r2, #4
 8000e38:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000e3a:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <MX_FDCAN1_Init+0xc0>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000e40:	4b0a      	ldr	r3, [pc, #40]	; (8000e6c <MX_FDCAN1_Init+0xc0>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000e46:	4b09      	ldr	r3, [pc, #36]	; (8000e6c <MX_FDCAN1_Init+0xc0>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000e4c:	4b07      	ldr	r3, [pc, #28]	; (8000e6c <MX_FDCAN1_Init+0xc0>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000e52:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <MX_FDCAN1_Init+0xc0>)
 8000e54:	2204      	movs	r2, #4
 8000e56:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000e58:	4804      	ldr	r0, [pc, #16]	; (8000e6c <MX_FDCAN1_Init+0xc0>)
 8000e5a:	f003 fc53 	bl	8004704 <HAL_FDCAN_Init>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000e64:	f000 fd72 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000e68:	bf00      	nop
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	24000300 	.word	0x24000300
 8000e70:	4000a000 	.word	0x4000a000

08000e74 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000e78:	4b2e      	ldr	r3, [pc, #184]	; (8000f34 <MX_FDCAN2_Init+0xc0>)
 8000e7a:	4a2f      	ldr	r2, [pc, #188]	; (8000f38 <MX_FDCAN2_Init+0xc4>)
 8000e7c:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000e7e:	4b2d      	ldr	r3, [pc, #180]	; (8000f34 <MX_FDCAN2_Init+0xc0>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000e84:	4b2b      	ldr	r3, [pc, #172]	; (8000f34 <MX_FDCAN2_Init+0xc0>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000e8a:	4b2a      	ldr	r3, [pc, #168]	; (8000f34 <MX_FDCAN2_Init+0xc0>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000e90:	4b28      	ldr	r3, [pc, #160]	; (8000f34 <MX_FDCAN2_Init+0xc0>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000e96:	4b27      	ldr	r3, [pc, #156]	; (8000f34 <MX_FDCAN2_Init+0xc0>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8000e9c:	4b25      	ldr	r3, [pc, #148]	; (8000f34 <MX_FDCAN2_Init+0xc0>)
 8000e9e:	2210      	movs	r2, #16
 8000ea0:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000ea2:	4b24      	ldr	r3, [pc, #144]	; (8000f34 <MX_FDCAN2_Init+0xc0>)
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000ea8:	4b22      	ldr	r3, [pc, #136]	; (8000f34 <MX_FDCAN2_Init+0xc0>)
 8000eaa:	2202      	movs	r2, #2
 8000eac:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000eae:	4b21      	ldr	r3, [pc, #132]	; (8000f34 <MX_FDCAN2_Init+0xc0>)
 8000eb0:	2202      	movs	r2, #2
 8000eb2:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000eb4:	4b1f      	ldr	r3, [pc, #124]	; (8000f34 <MX_FDCAN2_Init+0xc0>)
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000eba:	4b1e      	ldr	r3, [pc, #120]	; (8000f34 <MX_FDCAN2_Init+0xc0>)
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000ec0:	4b1c      	ldr	r3, [pc, #112]	; (8000f34 <MX_FDCAN2_Init+0xc0>)
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000ec6:	4b1b      	ldr	r3, [pc, #108]	; (8000f34 <MX_FDCAN2_Init+0xc0>)
 8000ec8:	2201      	movs	r2, #1
 8000eca:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000ecc:	4b19      	ldr	r3, [pc, #100]	; (8000f34 <MX_FDCAN2_Init+0xc0>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000ed2:	4b18      	ldr	r3, [pc, #96]	; (8000f34 <MX_FDCAN2_Init+0xc0>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000ed8:	4b16      	ldr	r3, [pc, #88]	; (8000f34 <MX_FDCAN2_Init+0xc0>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000ede:	4b15      	ldr	r3, [pc, #84]	; (8000f34 <MX_FDCAN2_Init+0xc0>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000ee4:	4b13      	ldr	r3, [pc, #76]	; (8000f34 <MX_FDCAN2_Init+0xc0>)
 8000ee6:	2204      	movs	r2, #4
 8000ee8:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000eea:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <MX_FDCAN2_Init+0xc0>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000ef0:	4b10      	ldr	r3, [pc, #64]	; (8000f34 <MX_FDCAN2_Init+0xc0>)
 8000ef2:	2204      	movs	r2, #4
 8000ef4:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000ef6:	4b0f      	ldr	r3, [pc, #60]	; (8000f34 <MX_FDCAN2_Init+0xc0>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000efc:	4b0d      	ldr	r3, [pc, #52]	; (8000f34 <MX_FDCAN2_Init+0xc0>)
 8000efe:	2204      	movs	r2, #4
 8000f00:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000f02:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <MX_FDCAN2_Init+0xc0>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000f08:	4b0a      	ldr	r3, [pc, #40]	; (8000f34 <MX_FDCAN2_Init+0xc0>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000f0e:	4b09      	ldr	r3, [pc, #36]	; (8000f34 <MX_FDCAN2_Init+0xc0>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000f14:	4b07      	ldr	r3, [pc, #28]	; (8000f34 <MX_FDCAN2_Init+0xc0>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000f1a:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <MX_FDCAN2_Init+0xc0>)
 8000f1c:	2204      	movs	r2, #4
 8000f1e:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000f20:	4804      	ldr	r0, [pc, #16]	; (8000f34 <MX_FDCAN2_Init+0xc0>)
 8000f22:	f003 fbef 	bl	8004704 <HAL_FDCAN_Init>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000f2c:	f000 fd0e 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	240003a0 	.word	0x240003a0
 8000f38:	4000a400 	.word	0x4000a400

08000f3c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b09a      	sub	sp, #104	; 0x68
 8000f40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000f42:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f46:	2234      	movs	r2, #52	; 0x34
 8000f48:	2100      	movs	r1, #0
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f00a fffa 	bl	800bf44 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000f50:	463b      	mov	r3, r7
 8000f52:	2234      	movs	r2, #52	; 0x34
 8000f54:	2100      	movs	r1, #0
 8000f56:	4618      	mov	r0, r3
 8000f58:	f00a fff4 	bl	800bf44 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000f5c:	4b4e      	ldr	r3, [pc, #312]	; (8001098 <MX_LTDC_Init+0x15c>)
 8000f5e:	4a4f      	ldr	r2, [pc, #316]	; (800109c <MX_LTDC_Init+0x160>)
 8000f60:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000f62:	4b4d      	ldr	r3, [pc, #308]	; (8001098 <MX_LTDC_Init+0x15c>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000f68:	4b4b      	ldr	r3, [pc, #300]	; (8001098 <MX_LTDC_Init+0x15c>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000f6e:	4b4a      	ldr	r3, [pc, #296]	; (8001098 <MX_LTDC_Init+0x15c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000f74:	4b48      	ldr	r3, [pc, #288]	; (8001098 <MX_LTDC_Init+0x15c>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8000f7a:	4b47      	ldr	r3, [pc, #284]	; (8001098 <MX_LTDC_Init+0x15c>)
 8000f7c:	2207      	movs	r2, #7
 8000f7e:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8000f80:	4b45      	ldr	r3, [pc, #276]	; (8001098 <MX_LTDC_Init+0x15c>)
 8000f82:	2203      	movs	r2, #3
 8000f84:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8000f86:	4b44      	ldr	r3, [pc, #272]	; (8001098 <MX_LTDC_Init+0x15c>)
 8000f88:	220e      	movs	r2, #14
 8000f8a:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8000f8c:	4b42      	ldr	r3, [pc, #264]	; (8001098 <MX_LTDC_Init+0x15c>)
 8000f8e:	2205      	movs	r2, #5
 8000f90:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8000f92:	4b41      	ldr	r3, [pc, #260]	; (8001098 <MX_LTDC_Init+0x15c>)
 8000f94:	f240 228e 	movw	r2, #654	; 0x28e
 8000f98:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8000f9a:	4b3f      	ldr	r3, [pc, #252]	; (8001098 <MX_LTDC_Init+0x15c>)
 8000f9c:	f240 12e5 	movw	r2, #485	; 0x1e5
 8000fa0:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 8000fa2:	4b3d      	ldr	r3, [pc, #244]	; (8001098 <MX_LTDC_Init+0x15c>)
 8000fa4:	f44f 7225 	mov.w	r2, #660	; 0x294
 8000fa8:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 8000faa:	4b3b      	ldr	r3, [pc, #236]	; (8001098 <MX_LTDC_Init+0x15c>)
 8000fac:	f240 12e7 	movw	r2, #487	; 0x1e7
 8000fb0:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000fb2:	4b39      	ldr	r3, [pc, #228]	; (8001098 <MX_LTDC_Init+0x15c>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000fba:	4b37      	ldr	r3, [pc, #220]	; (8001098 <MX_LTDC_Init+0x15c>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000fc2:	4b35      	ldr	r3, [pc, #212]	; (8001098 <MX_LTDC_Init+0x15c>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000fca:	4833      	ldr	r0, [pc, #204]	; (8001098 <MX_LTDC_Init+0x15c>)
 8000fcc:	f004 f8c8 	bl	8005160 <HAL_LTDC_Init>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8000fd6:	f000 fcb9 	bl	800194c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000fea:	2300      	movs	r3, #0
 8000fec:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000ff6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ffa:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000ffc:	2305      	movs	r3, #5
 8000ffe:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8001000:	2300      	movs	r3, #0
 8001002:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8001004:	2300      	movs	r3, #0
 8001006:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8001018:	2300      	movs	r3, #0
 800101a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800101e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001022:	2200      	movs	r2, #0
 8001024:	4619      	mov	r1, r3
 8001026:	481c      	ldr	r0, [pc, #112]	; (8001098 <MX_LTDC_Init+0x15c>)
 8001028:	f004 f96a 	bl	8005300 <HAL_LTDC_ConfigLayer>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8001032:	f000 fc8b 	bl	800194c <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 800103a:	2300      	movs	r3, #0
 800103c:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 800103e:	2300      	movs	r3, #0
 8001040:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8001042:	2300      	movs	r3, #0
 8001044:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001046:	2300      	movs	r3, #0
 8001048:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 800104a:	2300      	movs	r3, #0
 800104c:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001052:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001056:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001058:	2305      	movs	r3, #5
 800105a:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 800105c:	2300      	movs	r3, #0
 800105e:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8001060:	2300      	movs	r3, #0
 8001062:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8001064:	2300      	movs	r3, #0
 8001066:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8001068:	2300      	movs	r3, #0
 800106a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001074:	2300      	movs	r3, #0
 8001076:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800107a:	463b      	mov	r3, r7
 800107c:	2201      	movs	r2, #1
 800107e:	4619      	mov	r1, r3
 8001080:	4805      	ldr	r0, [pc, #20]	; (8001098 <MX_LTDC_Init+0x15c>)
 8001082:	f004 f93d 	bl	8005300 <HAL_LTDC_ConfigLayer>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 800108c:	f000 fc5e 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001090:	bf00      	nop
 8001092:	3768      	adds	r7, #104	; 0x68
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	24000440 	.word	0x24000440
 800109c:	50001000 	.word	0x50001000

080010a0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80010a4:	4b10      	ldr	r3, [pc, #64]	; (80010e8 <MX_RTC_Init+0x48>)
 80010a6:	4a11      	ldr	r2, [pc, #68]	; (80010ec <MX_RTC_Init+0x4c>)
 80010a8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80010aa:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <MX_RTC_Init+0x48>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80010b0:	4b0d      	ldr	r3, [pc, #52]	; (80010e8 <MX_RTC_Init+0x48>)
 80010b2:	227f      	movs	r2, #127	; 0x7f
 80010b4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80010b6:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <MX_RTC_Init+0x48>)
 80010b8:	22ff      	movs	r2, #255	; 0xff
 80010ba:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80010bc:	4b0a      	ldr	r3, [pc, #40]	; (80010e8 <MX_RTC_Init+0x48>)
 80010be:	2200      	movs	r2, #0
 80010c0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80010c2:	4b09      	ldr	r3, [pc, #36]	; (80010e8 <MX_RTC_Init+0x48>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80010c8:	4b07      	ldr	r3, [pc, #28]	; (80010e8 <MX_RTC_Init+0x48>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80010ce:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <MX_RTC_Init+0x48>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80010d4:	4804      	ldr	r0, [pc, #16]	; (80010e8 <MX_RTC_Init+0x48>)
 80010d6:	f008 f961 	bl	800939c <HAL_RTC_Init>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80010e0:	f000 fc34 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	240004e8 	.word	0x240004e8
 80010ec:	58004000 	.word	0x58004000

080010f0 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 80010f4:	4b58      	ldr	r3, [pc, #352]	; (8001258 <MX_SAI2_Init+0x168>)
 80010f6:	4a59      	ldr	r2, [pc, #356]	; (800125c <MX_SAI2_Init+0x16c>)
 80010f8:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 80010fa:	4b57      	ldr	r3, [pc, #348]	; (8001258 <MX_SAI2_Init+0x168>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001100:	4b55      	ldr	r3, [pc, #340]	; (8001258 <MX_SAI2_Init+0x168>)
 8001102:	2200      	movs	r2, #0
 8001104:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8001106:	4b54      	ldr	r3, [pc, #336]	; (8001258 <MX_SAI2_Init+0x168>)
 8001108:	2240      	movs	r2, #64	; 0x40
 800110a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800110c:	4b52      	ldr	r3, [pc, #328]	; (8001258 <MX_SAI2_Init+0x168>)
 800110e:	2200      	movs	r2, #0
 8001110:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001112:	4b51      	ldr	r3, [pc, #324]	; (8001258 <MX_SAI2_Init+0x168>)
 8001114:	2200      	movs	r2, #0
 8001116:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001118:	4b4f      	ldr	r3, [pc, #316]	; (8001258 <MX_SAI2_Init+0x168>)
 800111a:	2200      	movs	r2, #0
 800111c:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800111e:	4b4e      	ldr	r3, [pc, #312]	; (8001258 <MX_SAI2_Init+0x168>)
 8001120:	2200      	movs	r2, #0
 8001122:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001124:	4b4c      	ldr	r3, [pc, #304]	; (8001258 <MX_SAI2_Init+0x168>)
 8001126:	2200      	movs	r2, #0
 8001128:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800112a:	4b4b      	ldr	r3, [pc, #300]	; (8001258 <MX_SAI2_Init+0x168>)
 800112c:	2200      	movs	r2, #0
 800112e:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001130:	4b49      	ldr	r3, [pc, #292]	; (8001258 <MX_SAI2_Init+0x168>)
 8001132:	4a4b      	ldr	r2, [pc, #300]	; (8001260 <MX_SAI2_Init+0x170>)
 8001134:	621a      	str	r2, [r3, #32]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001136:	4b48      	ldr	r3, [pc, #288]	; (8001258 <MX_SAI2_Init+0x168>)
 8001138:	2200      	movs	r2, #0
 800113a:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 800113c:	4b46      	ldr	r3, [pc, #280]	; (8001258 <MX_SAI2_Init+0x168>)
 800113e:	2200      	movs	r2, #0
 8001140:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001142:	4b45      	ldr	r3, [pc, #276]	; (8001258 <MX_SAI2_Init+0x168>)
 8001144:	2200      	movs	r2, #0
 8001146:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001148:	4b43      	ldr	r3, [pc, #268]	; (8001258 <MX_SAI2_Init+0x168>)
 800114a:	2200      	movs	r2, #0
 800114c:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.PdmInit.Activation = DISABLE;
 800114e:	4b42      	ldr	r3, [pc, #264]	; (8001258 <MX_SAI2_Init+0x168>)
 8001150:	2200      	movs	r2, #0
 8001152:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.PdmInit.MicPairsNbr = 1;
 8001156:	4b40      	ldr	r3, [pc, #256]	; (8001258 <MX_SAI2_Init+0x168>)
 8001158:	2201      	movs	r2, #1
 800115a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 800115c:	4b3e      	ldr	r3, [pc, #248]	; (8001258 <MX_SAI2_Init+0x168>)
 800115e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001162:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001164:	4b3c      	ldr	r3, [pc, #240]	; (8001258 <MX_SAI2_Init+0x168>)
 8001166:	2208      	movs	r2, #8
 8001168:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 800116a:	4b3b      	ldr	r3, [pc, #236]	; (8001258 <MX_SAI2_Init+0x168>)
 800116c:	2201      	movs	r2, #1
 800116e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001170:	4b39      	ldr	r3, [pc, #228]	; (8001258 <MX_SAI2_Init+0x168>)
 8001172:	2200      	movs	r2, #0
 8001174:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001176:	4b38      	ldr	r3, [pc, #224]	; (8001258 <MX_SAI2_Init+0x168>)
 8001178:	2200      	movs	r2, #0
 800117a:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800117c:	4b36      	ldr	r3, [pc, #216]	; (8001258 <MX_SAI2_Init+0x168>)
 800117e:	2200      	movs	r2, #0
 8001180:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001182:	4b35      	ldr	r3, [pc, #212]	; (8001258 <MX_SAI2_Init+0x168>)
 8001184:	2200      	movs	r2, #0
 8001186:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001188:	4b33      	ldr	r3, [pc, #204]	; (8001258 <MX_SAI2_Init+0x168>)
 800118a:	2200      	movs	r2, #0
 800118c:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 800118e:	4b32      	ldr	r3, [pc, #200]	; (8001258 <MX_SAI2_Init+0x168>)
 8001190:	2201      	movs	r2, #1
 8001192:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001194:	4b30      	ldr	r3, [pc, #192]	; (8001258 <MX_SAI2_Init+0x168>)
 8001196:	2200      	movs	r2, #0
 8001198:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 800119a:	482f      	ldr	r0, [pc, #188]	; (8001258 <MX_SAI2_Init+0x168>)
 800119c:	f008 fa16 	bl	80095cc <HAL_SAI_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_SAI2_Init+0xba>
  {
    Error_Handler();
 80011a6:	f000 fbd1 	bl	800194c <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 80011aa:	4b2e      	ldr	r3, [pc, #184]	; (8001264 <MX_SAI2_Init+0x174>)
 80011ac:	4a2e      	ldr	r2, [pc, #184]	; (8001268 <MX_SAI2_Init+0x178>)
 80011ae:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 80011b0:	4b2c      	ldr	r3, [pc, #176]	; (8001264 <MX_SAI2_Init+0x174>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 80011b6:	4b2b      	ldr	r3, [pc, #172]	; (8001264 <MX_SAI2_Init+0x174>)
 80011b8:	2203      	movs	r2, #3
 80011ba:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 80011bc:	4b29      	ldr	r3, [pc, #164]	; (8001264 <MX_SAI2_Init+0x174>)
 80011be:	2240      	movs	r2, #64	; 0x40
 80011c0:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80011c2:	4b28      	ldr	r3, [pc, #160]	; (8001264 <MX_SAI2_Init+0x174>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80011c8:	4b26      	ldr	r3, [pc, #152]	; (8001264 <MX_SAI2_Init+0x174>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 80011ce:	4b25      	ldr	r3, [pc, #148]	; (8001264 <MX_SAI2_Init+0x174>)
 80011d0:	2201      	movs	r2, #1
 80011d2:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80011d4:	4b23      	ldr	r3, [pc, #140]	; (8001264 <MX_SAI2_Init+0x174>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80011da:	4b22      	ldr	r3, [pc, #136]	; (8001264 <MX_SAI2_Init+0x174>)
 80011dc:	2200      	movs	r2, #0
 80011de:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80011e0:	4b20      	ldr	r3, [pc, #128]	; (8001264 <MX_SAI2_Init+0x174>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 80011e6:	4b1f      	ldr	r3, [pc, #124]	; (8001264 <MX_SAI2_Init+0x174>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 80011ec:	4b1d      	ldr	r3, [pc, #116]	; (8001264 <MX_SAI2_Init+0x174>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80011f2:	4b1c      	ldr	r3, [pc, #112]	; (8001264 <MX_SAI2_Init+0x174>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.PdmInit.Activation = DISABLE;
 80011f8:	4b1a      	ldr	r3, [pc, #104]	; (8001264 <MX_SAI2_Init+0x174>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.PdmInit.MicPairsNbr = 1;
 8001200:	4b18      	ldr	r3, [pc, #96]	; (8001264 <MX_SAI2_Init+0x174>)
 8001202:	2201      	movs	r2, #1
 8001204:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8001206:	4b17      	ldr	r3, [pc, #92]	; (8001264 <MX_SAI2_Init+0x174>)
 8001208:	f44f 7280 	mov.w	r2, #256	; 0x100
 800120c:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.FrameLength = 8;
 800120e:	4b15      	ldr	r3, [pc, #84]	; (8001264 <MX_SAI2_Init+0x174>)
 8001210:	2208      	movs	r2, #8
 8001212:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8001214:	4b13      	ldr	r3, [pc, #76]	; (8001264 <MX_SAI2_Init+0x174>)
 8001216:	2201      	movs	r2, #1
 8001218:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800121a:	4b12      	ldr	r3, [pc, #72]	; (8001264 <MX_SAI2_Init+0x174>)
 800121c:	2200      	movs	r2, #0
 800121e:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001220:	4b10      	ldr	r3, [pc, #64]	; (8001264 <MX_SAI2_Init+0x174>)
 8001222:	2200      	movs	r2, #0
 8001224:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001226:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <MX_SAI2_Init+0x174>)
 8001228:	2200      	movs	r2, #0
 800122a:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 800122c:	4b0d      	ldr	r3, [pc, #52]	; (8001264 <MX_SAI2_Init+0x174>)
 800122e:	2200      	movs	r2, #0
 8001230:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001232:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <MX_SAI2_Init+0x174>)
 8001234:	2200      	movs	r2, #0
 8001236:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8001238:	4b0a      	ldr	r3, [pc, #40]	; (8001264 <MX_SAI2_Init+0x174>)
 800123a:	2201      	movs	r2, #1
 800123c:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 800123e:	4b09      	ldr	r3, [pc, #36]	; (8001264 <MX_SAI2_Init+0x174>)
 8001240:	2200      	movs	r2, #0
 8001242:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001244:	4807      	ldr	r0, [pc, #28]	; (8001264 <MX_SAI2_Init+0x174>)
 8001246:	f008 f9c1 	bl	80095cc <HAL_SAI_Init>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_SAI2_Init+0x164>
  {
    Error_Handler();
 8001250:	f000 fb7c 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001254:	bf00      	nop
 8001256:	bd80      	pop	{r7, pc}
 8001258:	2400050c 	.word	0x2400050c
 800125c:	40015c04 	.word	0x40015c04
 8001260:	0002ee00 	.word	0x0002ee00
 8001264:	240005a4 	.word	0x240005a4
 8001268:	40015c24 	.word	0x40015c24

0800126c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001270:	4b26      	ldr	r3, [pc, #152]	; (800130c <MX_SPI2_Init+0xa0>)
 8001272:	4a27      	ldr	r2, [pc, #156]	; (8001310 <MX_SPI2_Init+0xa4>)
 8001274:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001276:	4b25      	ldr	r3, [pc, #148]	; (800130c <MX_SPI2_Init+0xa0>)
 8001278:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800127c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800127e:	4b23      	ldr	r3, [pc, #140]	; (800130c <MX_SPI2_Init+0xa0>)
 8001280:	2200      	movs	r2, #0
 8001282:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001284:	4b21      	ldr	r3, [pc, #132]	; (800130c <MX_SPI2_Init+0xa0>)
 8001286:	2203      	movs	r2, #3
 8001288:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800128a:	4b20      	ldr	r3, [pc, #128]	; (800130c <MX_SPI2_Init+0xa0>)
 800128c:	2200      	movs	r2, #0
 800128e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001290:	4b1e      	ldr	r3, [pc, #120]	; (800130c <MX_SPI2_Init+0xa0>)
 8001292:	2200      	movs	r2, #0
 8001294:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8001296:	4b1d      	ldr	r3, [pc, #116]	; (800130c <MX_SPI2_Init+0xa0>)
 8001298:	2200      	movs	r2, #0
 800129a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800129c:	4b1b      	ldr	r3, [pc, #108]	; (800130c <MX_SPI2_Init+0xa0>)
 800129e:	2200      	movs	r2, #0
 80012a0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012a2:	4b1a      	ldr	r3, [pc, #104]	; (800130c <MX_SPI2_Init+0xa0>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80012a8:	4b18      	ldr	r3, [pc, #96]	; (800130c <MX_SPI2_Init+0xa0>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012ae:	4b17      	ldr	r3, [pc, #92]	; (800130c <MX_SPI2_Init+0xa0>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80012b4:	4b15      	ldr	r3, [pc, #84]	; (800130c <MX_SPI2_Init+0xa0>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012ba:	4b14      	ldr	r3, [pc, #80]	; (800130c <MX_SPI2_Init+0xa0>)
 80012bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012c0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80012c2:	4b12      	ldr	r3, [pc, #72]	; (800130c <MX_SPI2_Init+0xa0>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80012c8:	4b10      	ldr	r3, [pc, #64]	; (800130c <MX_SPI2_Init+0xa0>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80012ce:	4b0f      	ldr	r3, [pc, #60]	; (800130c <MX_SPI2_Init+0xa0>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80012d4:	4b0d      	ldr	r3, [pc, #52]	; (800130c <MX_SPI2_Init+0xa0>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80012da:	4b0c      	ldr	r3, [pc, #48]	; (800130c <MX_SPI2_Init+0xa0>)
 80012dc:	2200      	movs	r2, #0
 80012de:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80012e0:	4b0a      	ldr	r3, [pc, #40]	; (800130c <MX_SPI2_Init+0xa0>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80012e6:	4b09      	ldr	r3, [pc, #36]	; (800130c <MX_SPI2_Init+0xa0>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80012ec:	4b07      	ldr	r3, [pc, #28]	; (800130c <MX_SPI2_Init+0xa0>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80012f2:	4b06      	ldr	r3, [pc, #24]	; (800130c <MX_SPI2_Init+0xa0>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80012f8:	4804      	ldr	r0, [pc, #16]	; (800130c <MX_SPI2_Init+0xa0>)
 80012fa:	f008 fc87 	bl	8009c0c <HAL_SPI_Init>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_SPI2_Init+0x9c>
  {
    Error_Handler();
 8001304:	f000 fb22 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001308:	bf00      	nop
 800130a:	bd80      	pop	{r7, pc}
 800130c:	2400063c 	.word	0x2400063c
 8001310:	40003800 	.word	0x40003800

08001314 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b088      	sub	sp, #32
 8001318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800131a:	f107 0310 	add.w	r3, r7, #16
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]
 8001324:	609a      	str	r2, [r3, #8]
 8001326:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001328:	1d3b      	adds	r3, r7, #4
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	605a      	str	r2, [r3, #4]
 8001330:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001332:	4b1f      	ldr	r3, [pc, #124]	; (80013b0 <MX_TIM3_Init+0x9c>)
 8001334:	4a1f      	ldr	r2, [pc, #124]	; (80013b4 <MX_TIM3_Init+0xa0>)
 8001336:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 8001338:	4b1d      	ldr	r3, [pc, #116]	; (80013b0 <MX_TIM3_Init+0x9c>)
 800133a:	223f      	movs	r2, #63	; 0x3f
 800133c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800133e:	4b1c      	ldr	r3, [pc, #112]	; (80013b0 <MX_TIM3_Init+0x9c>)
 8001340:	2200      	movs	r2, #0
 8001342:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001344:	4b1a      	ldr	r3, [pc, #104]	; (80013b0 <MX_TIM3_Init+0x9c>)
 8001346:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800134a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800134c:	4b18      	ldr	r3, [pc, #96]	; (80013b0 <MX_TIM3_Init+0x9c>)
 800134e:	2200      	movs	r2, #0
 8001350:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001352:	4b17      	ldr	r3, [pc, #92]	; (80013b0 <MX_TIM3_Init+0x9c>)
 8001354:	2200      	movs	r2, #0
 8001356:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001358:	4815      	ldr	r0, [pc, #84]	; (80013b0 <MX_TIM3_Init+0x9c>)
 800135a:	f008 fd96 	bl	8009e8a <HAL_TIM_Base_Init>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001364:	f000 faf2 	bl	800194c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001368:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800136c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800136e:	f107 0310 	add.w	r3, r7, #16
 8001372:	4619      	mov	r1, r3
 8001374:	480e      	ldr	r0, [pc, #56]	; (80013b0 <MX_TIM3_Init+0x9c>)
 8001376:	f008 fe4f 	bl	800a018 <HAL_TIM_ConfigClockSource>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001380:	f000 fae4 	bl	800194c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001384:	2300      	movs	r3, #0
 8001386:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001388:	2300      	movs	r3, #0
 800138a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800138c:	1d3b      	adds	r3, r7, #4
 800138e:	4619      	mov	r1, r3
 8001390:	4807      	ldr	r0, [pc, #28]	; (80013b0 <MX_TIM3_Init+0x9c>)
 8001392:	f009 f871 	bl	800a478 <HAL_TIMEx_MasterConfigSynchronization>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800139c:	f000 fad6 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Base_Start(&htim3);
 80013a0:	4803      	ldr	r0, [pc, #12]	; (80013b0 <MX_TIM3_Init+0x9c>)
 80013a2:	f008 fdc9 	bl	8009f38 <HAL_TIM_Base_Start>

  /* USER CODE END TIM3_Init 2 */

}
 80013a6:	bf00      	nop
 80013a8:	3720      	adds	r7, #32
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	240006c4 	.word	0x240006c4
 80013b4:	40000400 	.word	0x40000400

080013b8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80013bc:	4b22      	ldr	r3, [pc, #136]	; (8001448 <MX_USART3_UART_Init+0x90>)
 80013be:	4a23      	ldr	r2, [pc, #140]	; (800144c <MX_USART3_UART_Init+0x94>)
 80013c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80013c2:	4b21      	ldr	r3, [pc, #132]	; (8001448 <MX_USART3_UART_Init+0x90>)
 80013c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80013ca:	4b1f      	ldr	r3, [pc, #124]	; (8001448 <MX_USART3_UART_Init+0x90>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80013d0:	4b1d      	ldr	r3, [pc, #116]	; (8001448 <MX_USART3_UART_Init+0x90>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80013d6:	4b1c      	ldr	r3, [pc, #112]	; (8001448 <MX_USART3_UART_Init+0x90>)
 80013d8:	2200      	movs	r2, #0
 80013da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013dc:	4b1a      	ldr	r3, [pc, #104]	; (8001448 <MX_USART3_UART_Init+0x90>)
 80013de:	220c      	movs	r2, #12
 80013e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013e2:	4b19      	ldr	r3, [pc, #100]	; (8001448 <MX_USART3_UART_Init+0x90>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013e8:	4b17      	ldr	r3, [pc, #92]	; (8001448 <MX_USART3_UART_Init+0x90>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013ee:	4b16      	ldr	r3, [pc, #88]	; (8001448 <MX_USART3_UART_Init+0x90>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013f4:	4b14      	ldr	r3, [pc, #80]	; (8001448 <MX_USART3_UART_Init+0x90>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013fa:	4b13      	ldr	r3, [pc, #76]	; (8001448 <MX_USART3_UART_Init+0x90>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001400:	4811      	ldr	r0, [pc, #68]	; (8001448 <MX_USART3_UART_Init+0x90>)
 8001402:	f009 f8c7 	bl	800a594 <HAL_UART_Init>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800140c:	f000 fa9e 	bl	800194c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001410:	2100      	movs	r1, #0
 8001412:	480d      	ldr	r0, [pc, #52]	; (8001448 <MX_USART3_UART_Init+0x90>)
 8001414:	f00a f8c9 	bl	800b5aa <HAL_UARTEx_SetTxFifoThreshold>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800141e:	f000 fa95 	bl	800194c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001422:	2100      	movs	r1, #0
 8001424:	4808      	ldr	r0, [pc, #32]	; (8001448 <MX_USART3_UART_Init+0x90>)
 8001426:	f00a f8fe 	bl	800b626 <HAL_UARTEx_SetRxFifoThreshold>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001430:	f000 fa8c 	bl	800194c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001434:	4804      	ldr	r0, [pc, #16]	; (8001448 <MX_USART3_UART_Init+0x90>)
 8001436:	f00a f87f 	bl	800b538 <HAL_UARTEx_DisableFifoMode>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001440:	f000 fa84 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001444:	bf00      	nop
 8001446:	bd80      	pop	{r7, pc}
 8001448:	24000710 	.word	0x24000710
 800144c:	40004800 	.word	0x40004800

08001450 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001454:	4b15      	ldr	r3, [pc, #84]	; (80014ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001456:	4a16      	ldr	r2, [pc, #88]	; (80014b0 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001458:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800145a:	4b14      	ldr	r3, [pc, #80]	; (80014ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800145c:	2209      	movs	r2, #9
 800145e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001460:	4b12      	ldr	r3, [pc, #72]	; (80014ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001462:	2202      	movs	r2, #2
 8001464:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001466:	4b11      	ldr	r3, [pc, #68]	; (80014ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001468:	2200      	movs	r2, #0
 800146a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800146c:	4b0f      	ldr	r3, [pc, #60]	; (80014ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800146e:	2202      	movs	r2, #2
 8001470:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001472:	4b0e      	ldr	r3, [pc, #56]	; (80014ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001474:	2200      	movs	r2, #0
 8001476:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001478:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800147a:	2200      	movs	r2, #0
 800147c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800147e:	4b0b      	ldr	r3, [pc, #44]	; (80014ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001480:	2200      	movs	r2, #0
 8001482:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001484:	4b09      	ldr	r3, [pc, #36]	; (80014ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001486:	2201      	movs	r2, #1
 8001488:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800148a:	4b08      	ldr	r3, [pc, #32]	; (80014ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800148c:	2201      	movs	r2, #1
 800148e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001490:	4b06      	ldr	r3, [pc, #24]	; (80014ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001492:	2200      	movs	r2, #0
 8001494:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001496:	4805      	ldr	r0, [pc, #20]	; (80014ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001498:	f004 f90a 	bl	80056b0 <HAL_PCD_Init>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80014a2:	f000 fa53 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	240007a4 	.word	0x240007a4
 80014b0:	40080000 	.word	0x40080000

080014b4 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b088      	sub	sp, #32
 80014b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80014ba:	1d3b      	adds	r3, r7, #4
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	60da      	str	r2, [r3, #12]
 80014c6:	611a      	str	r2, [r3, #16]
 80014c8:	615a      	str	r2, [r3, #20]
 80014ca:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80014cc:	4b1e      	ldr	r3, [pc, #120]	; (8001548 <MX_FMC_Init+0x94>)
 80014ce:	4a1f      	ldr	r2, [pc, #124]	; (800154c <MX_FMC_Init+0x98>)
 80014d0:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80014d2:	4b1d      	ldr	r3, [pc, #116]	; (8001548 <MX_FMC_Init+0x94>)
 80014d4:	2201      	movs	r2, #1
 80014d6:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80014d8:	4b1b      	ldr	r3, [pc, #108]	; (8001548 <MX_FMC_Init+0x94>)
 80014da:	2200      	movs	r2, #0
 80014dc:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80014de:	4b1a      	ldr	r3, [pc, #104]	; (8001548 <MX_FMC_Init+0x94>)
 80014e0:	2204      	movs	r2, #4
 80014e2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80014e4:	4b18      	ldr	r3, [pc, #96]	; (8001548 <MX_FMC_Init+0x94>)
 80014e6:	2210      	movs	r2, #16
 80014e8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80014ea:	4b17      	ldr	r3, [pc, #92]	; (8001548 <MX_FMC_Init+0x94>)
 80014ec:	2240      	movs	r2, #64	; 0x40
 80014ee:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 80014f0:	4b15      	ldr	r3, [pc, #84]	; (8001548 <MX_FMC_Init+0x94>)
 80014f2:	2280      	movs	r2, #128	; 0x80
 80014f4:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80014f6:	4b14      	ldr	r3, [pc, #80]	; (8001548 <MX_FMC_Init+0x94>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 80014fc:	4b12      	ldr	r3, [pc, #72]	; (8001548 <MX_FMC_Init+0x94>)
 80014fe:	2200      	movs	r2, #0
 8001500:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001502:	4b11      	ldr	r3, [pc, #68]	; (8001548 <MX_FMC_Init+0x94>)
 8001504:	2200      	movs	r2, #0
 8001506:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001508:	4b0f      	ldr	r3, [pc, #60]	; (8001548 <MX_FMC_Init+0x94>)
 800150a:	2200      	movs	r2, #0
 800150c:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 800150e:	2310      	movs	r3, #16
 8001510:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8001512:	2310      	movs	r3, #16
 8001514:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8001516:	2310      	movs	r3, #16
 8001518:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 800151a:	2310      	movs	r3, #16
 800151c:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 800151e:	2310      	movs	r3, #16
 8001520:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8001522:	2310      	movs	r3, #16
 8001524:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8001526:	2310      	movs	r3, #16
 8001528:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800152a:	1d3b      	adds	r3, r7, #4
 800152c:	4619      	mov	r1, r3
 800152e:	4806      	ldr	r0, [pc, #24]	; (8001548 <MX_FMC_Init+0x94>)
 8001530:	f008 fb30 	bl	8009b94 <HAL_SDRAM_Init>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 800153a:	f000 fa07 	bl	800194c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800153e:	bf00      	nop
 8001540:	3720      	adds	r7, #32
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	24000cb0 	.word	0x24000cb0
 800154c:	52004140 	.word	0x52004140

08001550 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b090      	sub	sp, #64	; 0x40
 8001554:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001556:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	605a      	str	r2, [r3, #4]
 8001560:	609a      	str	r2, [r3, #8]
 8001562:	60da      	str	r2, [r3, #12]
 8001564:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001566:	4bc0      	ldr	r3, [pc, #768]	; (8001868 <MX_GPIO_Init+0x318>)
 8001568:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800156c:	4abe      	ldr	r2, [pc, #760]	; (8001868 <MX_GPIO_Init+0x318>)
 800156e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001572:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001576:	4bbc      	ldr	r3, [pc, #752]	; (8001868 <MX_GPIO_Init+0x318>)
 8001578:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800157c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001580:	62bb      	str	r3, [r7, #40]	; 0x28
 8001582:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001584:	4bb8      	ldr	r3, [pc, #736]	; (8001868 <MX_GPIO_Init+0x318>)
 8001586:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800158a:	4ab7      	ldr	r2, [pc, #732]	; (8001868 <MX_GPIO_Init+0x318>)
 800158c:	f043 0302 	orr.w	r3, r3, #2
 8001590:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001594:	4bb4      	ldr	r3, [pc, #720]	; (8001868 <MX_GPIO_Init+0x318>)
 8001596:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	627b      	str	r3, [r7, #36]	; 0x24
 80015a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80015a2:	4bb1      	ldr	r3, [pc, #708]	; (8001868 <MX_GPIO_Init+0x318>)
 80015a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015a8:	4aaf      	ldr	r2, [pc, #700]	; (8001868 <MX_GPIO_Init+0x318>)
 80015aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015b2:	4bad      	ldr	r3, [pc, #692]	; (8001868 <MX_GPIO_Init+0x318>)
 80015b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015bc:	623b      	str	r3, [r7, #32]
 80015be:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80015c0:	4ba9      	ldr	r3, [pc, #676]	; (8001868 <MX_GPIO_Init+0x318>)
 80015c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015c6:	4aa8      	ldr	r2, [pc, #672]	; (8001868 <MX_GPIO_Init+0x318>)
 80015c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015d0:	4ba5      	ldr	r3, [pc, #660]	; (8001868 <MX_GPIO_Init+0x318>)
 80015d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015da:	61fb      	str	r3, [r7, #28]
 80015dc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015de:	4ba2      	ldr	r3, [pc, #648]	; (8001868 <MX_GPIO_Init+0x318>)
 80015e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015e4:	4aa0      	ldr	r2, [pc, #640]	; (8001868 <MX_GPIO_Init+0x318>)
 80015e6:	f043 0304 	orr.w	r3, r3, #4
 80015ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015ee:	4b9e      	ldr	r3, [pc, #632]	; (8001868 <MX_GPIO_Init+0x318>)
 80015f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015f4:	f003 0304 	and.w	r3, r3, #4
 80015f8:	61bb      	str	r3, [r7, #24]
 80015fa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fc:	4b9a      	ldr	r3, [pc, #616]	; (8001868 <MX_GPIO_Init+0x318>)
 80015fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001602:	4a99      	ldr	r2, [pc, #612]	; (8001868 <MX_GPIO_Init+0x318>)
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800160c:	4b96      	ldr	r3, [pc, #600]	; (8001868 <MX_GPIO_Init+0x318>)
 800160e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	617b      	str	r3, [r7, #20]
 8001618:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800161a:	4b93      	ldr	r3, [pc, #588]	; (8001868 <MX_GPIO_Init+0x318>)
 800161c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001620:	4a91      	ldr	r2, [pc, #580]	; (8001868 <MX_GPIO_Init+0x318>)
 8001622:	f043 0310 	orr.w	r3, r3, #16
 8001626:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800162a:	4b8f      	ldr	r3, [pc, #572]	; (8001868 <MX_GPIO_Init+0x318>)
 800162c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001630:	f003 0310 	and.w	r3, r3, #16
 8001634:	613b      	str	r3, [r7, #16]
 8001636:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001638:	4b8b      	ldr	r3, [pc, #556]	; (8001868 <MX_GPIO_Init+0x318>)
 800163a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800163e:	4a8a      	ldr	r2, [pc, #552]	; (8001868 <MX_GPIO_Init+0x318>)
 8001640:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001644:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001648:	4b87      	ldr	r3, [pc, #540]	; (8001868 <MX_GPIO_Init+0x318>)
 800164a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800164e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001656:	4b84      	ldr	r3, [pc, #528]	; (8001868 <MX_GPIO_Init+0x318>)
 8001658:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800165c:	4a82      	ldr	r2, [pc, #520]	; (8001868 <MX_GPIO_Init+0x318>)
 800165e:	f043 0308 	orr.w	r3, r3, #8
 8001662:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001666:	4b80      	ldr	r3, [pc, #512]	; (8001868 <MX_GPIO_Init+0x318>)
 8001668:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800166c:	f003 0308 	and.w	r3, r3, #8
 8001670:	60bb      	str	r3, [r7, #8]
 8001672:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001674:	4b7c      	ldr	r3, [pc, #496]	; (8001868 <MX_GPIO_Init+0x318>)
 8001676:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800167a:	4a7b      	ldr	r2, [pc, #492]	; (8001868 <MX_GPIO_Init+0x318>)
 800167c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001680:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001684:	4b78      	ldr	r3, [pc, #480]	; (8001868 <MX_GPIO_Init+0x318>)
 8001686:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800168a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800168e:	607b      	str	r3, [r7, #4]
 8001690:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001692:	4b75      	ldr	r3, [pc, #468]	; (8001868 <MX_GPIO_Init+0x318>)
 8001694:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001698:	4a73      	ldr	r2, [pc, #460]	; (8001868 <MX_GPIO_Init+0x318>)
 800169a:	f043 0320 	orr.w	r3, r3, #32
 800169e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016a2:	4b71      	ldr	r3, [pc, #452]	; (8001868 <MX_GPIO_Init+0x318>)
 80016a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016a8:	f003 0320 	and.w	r3, r3, #32
 80016ac:	603b      	str	r3, [r7, #0]
 80016ae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7|MII_TX_ER_nINT_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 80016b0:	2200      	movs	r2, #0
 80016b2:	f241 01c4 	movw	r1, #4292	; 0x10c4
 80016b6:	486d      	ldr	r0, [pc, #436]	; (800186c <MX_GPIO_Init+0x31c>)
 80016b8:	f003 fd38 	bl	800512c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_6, GPIO_PIN_RESET);
 80016bc:	2200      	movs	r2, #0
 80016be:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80016c2:	486b      	ldr	r0, [pc, #428]	; (8001870 <MX_GPIO_Init+0x320>)
 80016c4:	f003 fd32 	bl	800512c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80016c8:	2200      	movs	r2, #0
 80016ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016ce:	4869      	ldr	r0, [pc, #420]	; (8001874 <MX_GPIO_Init+0x324>)
 80016d0:	f003 fd2c 	bl	800512c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, GPIO_PIN_RESET);
 80016d4:	2200      	movs	r2, #0
 80016d6:	2108      	movs	r1, #8
 80016d8:	4867      	ldr	r0, [pc, #412]	; (8001878 <MX_GPIO_Init+0x328>)
 80016da:	f003 fd27 	bl	800512c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_1, GPIO_PIN_RESET);
 80016de:	2200      	movs	r2, #0
 80016e0:	2102      	movs	r1, #2
 80016e2:	4866      	ldr	r0, [pc, #408]	; (800187c <MX_GPIO_Init+0x32c>)
 80016e4:	f003 fd22 	bl	800512c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80016e8:	2200      	movs	r2, #0
 80016ea:	2104      	movs	r1, #4
 80016ec:	4864      	ldr	r0, [pc, #400]	; (8001880 <MX_GPIO_Init+0x330>)
 80016ee:	f003 fd1d 	bl	800512c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB6 PB7 MII_TX_ER_nINT_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|MII_TX_ER_nINT_Pin|LCD_RST_Pin;
 80016f2:	f241 03c4 	movw	r3, #4292	; 0x10c4
 80016f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f8:	2301      	movs	r3, #1
 80016fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001700:	2300      	movs	r3, #0
 8001702:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001704:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001708:	4619      	mov	r1, r3
 800170a:	4858      	ldr	r0, [pc, #352]	; (800186c <MX_GPIO_Init+0x31c>)
 800170c:	f003 fb5e 	bl	8004dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001710:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001714:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001716:	2302      	movs	r3, #2
 8001718:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171e:	2300      	movs	r3, #0
 8001720:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001722:	2303      	movs	r3, #3
 8001724:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001726:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800172a:	4619      	mov	r1, r3
 800172c:	4855      	ldr	r0, [pc, #340]	; (8001884 <MX_GPIO_Init+0x334>)
 800172e:	f003 fb4d 	bl	8004dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISPD7_Pin */
  GPIO_InitStruct.Pin = LCD_DISPD7_Pin;
 8001732:	2380      	movs	r3, #128	; 0x80
 8001734:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001736:	2300      	movs	r3, #0
 8001738:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173a:	2300      	movs	r3, #0
 800173c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_DISPD7_GPIO_Port, &GPIO_InitStruct);
 800173e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001742:	4619      	mov	r1, r3
 8001744:	4850      	ldr	r0, [pc, #320]	; (8001888 <MX_GPIO_Init+0x338>)
 8001746:	f003 fb41 	bl	8004dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PE5 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 800174a:	2330      	movs	r3, #48	; 0x30
 800174c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174e:	2302      	movs	r3, #2
 8001750:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001756:	2300      	movs	r3, #0
 8001758:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 800175a:	230a      	movs	r3, #10
 800175c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800175e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001762:	4619      	mov	r1, r3
 8001764:	4849      	ldr	r0, [pc, #292]	; (800188c <MX_GPIO_Init+0x33c>)
 8001766:	f003 fb31 	bl	8004dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS2_ID_Pin OTG_FS2_PSO_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS2_ID_Pin|OTG_FS2_PSO_Pin;
 800176a:	f44f 6384 	mov.w	r3, #1056	; 0x420
 800176e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001770:	2300      	movs	r3, #0
 8001772:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001778:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800177c:	4619      	mov	r1, r3
 800177e:	483c      	ldr	r0, [pc, #240]	; (8001870 <MX_GPIO_Init+0x320>)
 8001780:	f003 fb24 	bl	8004dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001784:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001788:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800178a:	2300      	movs	r3, #0
 800178c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178e:	2300      	movs	r3, #0
 8001790:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001792:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001796:	4619      	mov	r1, r3
 8001798:	483d      	ldr	r0, [pc, #244]	; (8001890 <MX_GPIO_Init+0x340>)
 800179a:	f003 fb17 	bl	8004dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_6;
 800179e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80017a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a4:	2301      	movs	r3, #1
 80017a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a8:	2300      	movs	r3, #0
 80017aa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ac:	2300      	movs	r3, #0
 80017ae:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017b4:	4619      	mov	r1, r3
 80017b6:	482e      	ldr	r0, [pc, #184]	; (8001870 <MX_GPIO_Init+0x320>)
 80017b8:	f003 fb08 	bl	8004dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : audio_Int_Pin */
  GPIO_InitStruct.Pin = audio_Int_Pin;
 80017bc:	2380      	movs	r3, #128	; 0x80
 80017be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c0:	2302      	movs	r3, #2
 80017c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c4:	2300      	movs	r3, #0
 80017c6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c8:	2300      	movs	r3, #0
 80017ca:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80017cc:	2306      	movs	r3, #6
 80017ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(audio_Int_GPIO_Port, &GPIO_InitStruct);
 80017d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017d4:	4619      	mov	r1, r3
 80017d6:	4828      	ldr	r0, [pc, #160]	; (8001878 <MX_GPIO_Init+0x328>)
 80017d8:	f003 faf8 	bl	8004dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80017dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e2:	2301      	movs	r3, #1
 80017e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ea:	2300      	movs	r3, #0
 80017ec:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80017ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017f2:	4619      	mov	r1, r3
 80017f4:	481f      	ldr	r0, [pc, #124]	; (8001874 <MX_GPIO_Init+0x324>)
 80017f6:	f003 fae9 	bl	8004dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017fa:	2308      	movs	r3, #8
 80017fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017fe:	2301      	movs	r3, #1
 8001800:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001802:	2300      	movs	r3, #0
 8001804:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001806:	2300      	movs	r3, #0
 8001808:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800180a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800180e:	4619      	mov	r1, r3
 8001810:	4819      	ldr	r0, [pc, #100]	; (8001878 <MX_GPIO_Init+0x328>)
 8001812:	f003 fadb 	bl	8004dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001816:	2304      	movs	r3, #4
 8001818:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800181a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800181e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001820:	2300      	movs	r3, #0
 8001822:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001824:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001828:	4619      	mov	r1, r3
 800182a:	4813      	ldr	r0, [pc, #76]	; (8001878 <MX_GPIO_Init+0x328>)
 800182c:	f003 face 	bl	8004dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 8001830:	2301      	movs	r3, #1
 8001832:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001834:	2300      	movs	r3, #0
 8001836:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001838:	2300      	movs	r3, #0
 800183a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 800183c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001840:	4619      	mov	r1, r3
 8001842:	480e      	ldr	r0, [pc, #56]	; (800187c <MX_GPIO_Init+0x32c>)
 8001844:	f003 fac2 	bl	8004dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PK1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001848:	2302      	movs	r3, #2
 800184a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800184c:	2301      	movs	r3, #1
 800184e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001854:	2300      	movs	r3, #0
 8001856:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001858:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800185c:	4619      	mov	r1, r3
 800185e:	4807      	ldr	r0, [pc, #28]	; (800187c <MX_GPIO_Init+0x32c>)
 8001860:	f003 fab4 	bl	8004dcc <HAL_GPIO_Init>
 8001864:	e016      	b.n	8001894 <MX_GPIO_Init+0x344>
 8001866:	bf00      	nop
 8001868:	58024400 	.word	0x58024400
 800186c:	58020400 	.word	0x58020400
 8001870:	58020000 	.word	0x58020000
 8001874:	58022000 	.word	0x58022000
 8001878:	58021800 	.word	0x58021800
 800187c:	58022800 	.word	0x58022800
 8001880:	58022400 	.word	0x58022400
 8001884:	58021c00 	.word	0x58021c00
 8001888:	58020c00 	.word	0x58020c00
 800188c:	58021000 	.word	0x58021000
 8001890:	58020800 	.word	0x58020800

  /*Configure GPIO pins : PF6 PF7 PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8001894:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001898:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189a:	2302      	movs	r3, #2
 800189c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189e:	2300      	movs	r3, #0
 80018a0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a2:	2300      	movs	r3, #0
 80018a4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80018a6:	2309      	movs	r3, #9
 80018a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018ae:	4619      	mov	r1, r3
 80018b0:	4822      	ldr	r0, [pc, #136]	; (800193c <MX_GPIO_Init+0x3ec>)
 80018b2:	f003 fa8b 	bl	8004dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018bc:	2302      	movs	r3, #2
 80018be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c0:	2300      	movs	r3, #0
 80018c2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c4:	2300      	movs	r3, #0
 80018c6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80018c8:	230a      	movs	r3, #10
 80018ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018d0:	4619      	mov	r1, r3
 80018d2:	481a      	ldr	r0, [pc, #104]	; (800193c <MX_GPIO_Init+0x3ec>)
 80018d4:	f003 fa7a 	bl	8004dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS2_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS2_OverCurrent_Pin;
 80018d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80018dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018de:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS2_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80018e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018ec:	4619      	mov	r1, r3
 80018ee:	4814      	ldr	r0, [pc, #80]	; (8001940 <MX_GPIO_Init+0x3f0>)
 80018f0:	f003 fa6c 	bl	8004dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80018f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80018f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fa:	2302      	movs	r3, #2
 80018fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001902:	2300      	movs	r3, #0
 8001904:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001906:	2309      	movs	r3, #9
 8001908:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800190a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800190e:	4619      	mov	r1, r3
 8001910:	480c      	ldr	r0, [pc, #48]	; (8001944 <MX_GPIO_Init+0x3f4>)
 8001912:	f003 fa5b 	bl	8004dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8001916:	2304      	movs	r3, #4
 8001918:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800191a:	2301      	movs	r3, #1
 800191c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191e:	2300      	movs	r3, #0
 8001920:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001922:	2300      	movs	r3, #0
 8001924:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8001926:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800192a:	4619      	mov	r1, r3
 800192c:	4806      	ldr	r0, [pc, #24]	; (8001948 <MX_GPIO_Init+0x3f8>)
 800192e:	f003 fa4d 	bl	8004dcc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001932:	bf00      	nop
 8001934:	3740      	adds	r7, #64	; 0x40
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	58021400 	.word	0x58021400
 8001940:	58021c00 	.word	0x58021c00
 8001944:	58020c00 	.word	0x58020c00
 8001948:	58022400 	.word	0x58022400

0800194c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001950:	b672      	cpsid	i
}
 8001952:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001954:	e7fe      	b.n	8001954 <Error_Handler+0x8>
	...

08001958 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195e:	4b0a      	ldr	r3, [pc, #40]	; (8001988 <HAL_MspInit+0x30>)
 8001960:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001964:	4a08      	ldr	r2, [pc, #32]	; (8001988 <HAL_MspInit+0x30>)
 8001966:	f043 0302 	orr.w	r3, r3, #2
 800196a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800196e:	4b06      	ldr	r3, [pc, #24]	; (8001988 <HAL_MspInit+0x30>)
 8001970:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001974:	f003 0302 	and.w	r3, r3, #2
 8001978:	607b      	str	r3, [r7, #4]
 800197a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800197c:	bf00      	nop
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	58024400 	.word	0x58024400

0800198c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b090      	sub	sp, #64	; 0x40
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001994:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	605a      	str	r2, [r3, #4]
 800199e:	609a      	str	r2, [r3, #8]
 80019a0:	60da      	str	r2, [r3, #12]
 80019a2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a72      	ldr	r2, [pc, #456]	; (8001b74 <HAL_ADC_MspInit+0x1e8>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d14e      	bne.n	8001a4c <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80019ae:	4b72      	ldr	r3, [pc, #456]	; (8001b78 <HAL_ADC_MspInit+0x1ec>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	3301      	adds	r3, #1
 80019b4:	4a70      	ldr	r2, [pc, #448]	; (8001b78 <HAL_ADC_MspInit+0x1ec>)
 80019b6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80019b8:	4b6f      	ldr	r3, [pc, #444]	; (8001b78 <HAL_ADC_MspInit+0x1ec>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d10e      	bne.n	80019de <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80019c0:	4b6e      	ldr	r3, [pc, #440]	; (8001b7c <HAL_ADC_MspInit+0x1f0>)
 80019c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80019c6:	4a6d      	ldr	r2, [pc, #436]	; (8001b7c <HAL_ADC_MspInit+0x1f0>)
 80019c8:	f043 0320 	orr.w	r3, r3, #32
 80019cc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80019d0:	4b6a      	ldr	r3, [pc, #424]	; (8001b7c <HAL_ADC_MspInit+0x1f0>)
 80019d2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80019d6:	f003 0320 	and.w	r3, r3, #32
 80019da:	62bb      	str	r3, [r7, #40]	; 0x28
 80019dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019de:	4b67      	ldr	r3, [pc, #412]	; (8001b7c <HAL_ADC_MspInit+0x1f0>)
 80019e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019e4:	4a65      	ldr	r2, [pc, #404]	; (8001b7c <HAL_ADC_MspInit+0x1f0>)
 80019e6:	f043 0304 	orr.w	r3, r3, #4
 80019ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019ee:	4b63      	ldr	r3, [pc, #396]	; (8001b7c <HAL_ADC_MspInit+0x1f0>)
 80019f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019f4:	f003 0304 	and.w	r3, r3, #4
 80019f8:	627b      	str	r3, [r7, #36]	; 0x24
 80019fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fc:	4b5f      	ldr	r3, [pc, #380]	; (8001b7c <HAL_ADC_MspInit+0x1f0>)
 80019fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a02:	4a5e      	ldr	r2, [pc, #376]	; (8001b7c <HAL_ADC_MspInit+0x1f0>)
 8001a04:	f043 0301 	orr.w	r3, r3, #1
 8001a08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a0c:	4b5b      	ldr	r3, [pc, #364]	; (8001b7c <HAL_ADC_MspInit+0x1f0>)
 8001a0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	623b      	str	r3, [r7, #32]
 8001a18:	6a3b      	ldr	r3, [r7, #32]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    PA0_C     ------> ADC1_INP0
    PA1_C     ------> ADC1_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a22:	2300      	movs	r3, #0
 8001a24:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4854      	ldr	r0, [pc, #336]	; (8001b80 <HAL_ADC_MspInit+0x1f4>)
 8001a2e:	f003 f9cd 	bl	8004dcc <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8001a32:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8001a36:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8001a3a:	f001 f8b7 	bl	8002bac <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8001a3e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a42:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8001a46:	f001 f8b1 	bl	8002bac <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001a4a:	e08f      	b.n	8001b6c <HAL_ADC_MspInit+0x1e0>
  else if(hadc->Instance==ADC2)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a4c      	ldr	r2, [pc, #304]	; (8001b84 <HAL_ADC_MspInit+0x1f8>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d133      	bne.n	8001abe <HAL_ADC_MspInit+0x132>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001a56:	4b48      	ldr	r3, [pc, #288]	; (8001b78 <HAL_ADC_MspInit+0x1ec>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	4a46      	ldr	r2, [pc, #280]	; (8001b78 <HAL_ADC_MspInit+0x1ec>)
 8001a5e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001a60:	4b45      	ldr	r3, [pc, #276]	; (8001b78 <HAL_ADC_MspInit+0x1ec>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d10e      	bne.n	8001a86 <HAL_ADC_MspInit+0xfa>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001a68:	4b44      	ldr	r3, [pc, #272]	; (8001b7c <HAL_ADC_MspInit+0x1f0>)
 8001a6a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a6e:	4a43      	ldr	r2, [pc, #268]	; (8001b7c <HAL_ADC_MspInit+0x1f0>)
 8001a70:	f043 0320 	orr.w	r3, r3, #32
 8001a74:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001a78:	4b40      	ldr	r3, [pc, #256]	; (8001b7c <HAL_ADC_MspInit+0x1f0>)
 8001a7a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a7e:	f003 0320 	and.w	r3, r3, #32
 8001a82:	61fb      	str	r3, [r7, #28]
 8001a84:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a86:	4b3d      	ldr	r3, [pc, #244]	; (8001b7c <HAL_ADC_MspInit+0x1f0>)
 8001a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a8c:	4a3b      	ldr	r2, [pc, #236]	; (8001b7c <HAL_ADC_MspInit+0x1f0>)
 8001a8e:	f043 0301 	orr.w	r3, r3, #1
 8001a92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a96:	4b39      	ldr	r3, [pc, #228]	; (8001b7c <HAL_ADC_MspInit+0x1f0>)
 8001a98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a9c:	f003 0301 	and.w	r3, r3, #1
 8001aa0:	61bb      	str	r3, [r7, #24]
 8001aa2:	69bb      	ldr	r3, [r7, #24]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8001aa4:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8001aa8:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8001aac:	f001 f87e 	bl	8002bac <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8001ab0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ab4:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8001ab8:	f001 f878 	bl	8002bac <HAL_SYSCFG_AnalogSwitchConfig>
}
 8001abc:	e056      	b.n	8001b6c <HAL_ADC_MspInit+0x1e0>
  else if(hadc->Instance==ADC3)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a31      	ldr	r2, [pc, #196]	; (8001b88 <HAL_ADC_MspInit+0x1fc>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d151      	bne.n	8001b6c <HAL_ADC_MspInit+0x1e0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001ac8:	4b2c      	ldr	r3, [pc, #176]	; (8001b7c <HAL_ADC_MspInit+0x1f0>)
 8001aca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ace:	4a2b      	ldr	r2, [pc, #172]	; (8001b7c <HAL_ADC_MspInit+0x1f0>)
 8001ad0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ad4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ad8:	4b28      	ldr	r3, [pc, #160]	; (8001b7c <HAL_ADC_MspInit+0x1f0>)
 8001ada:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ade:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ae2:	617b      	str	r3, [r7, #20]
 8001ae4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ae6:	4b25      	ldr	r3, [pc, #148]	; (8001b7c <HAL_ADC_MspInit+0x1f0>)
 8001ae8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aec:	4a23      	ldr	r2, [pc, #140]	; (8001b7c <HAL_ADC_MspInit+0x1f0>)
 8001aee:	f043 0320 	orr.w	r3, r3, #32
 8001af2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001af6:	4b21      	ldr	r3, [pc, #132]	; (8001b7c <HAL_ADC_MspInit+0x1f0>)
 8001af8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001afc:	f003 0320 	and.w	r3, r3, #32
 8001b00:	613b      	str	r3, [r7, #16]
 8001b02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b04:	4b1d      	ldr	r3, [pc, #116]	; (8001b7c <HAL_ADC_MspInit+0x1f0>)
 8001b06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b0a:	4a1c      	ldr	r2, [pc, #112]	; (8001b7c <HAL_ADC_MspInit+0x1f0>)
 8001b0c:	f043 0304 	orr.w	r3, r3, #4
 8001b10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b14:	4b19      	ldr	r3, [pc, #100]	; (8001b7c <HAL_ADC_MspInit+0x1f0>)
 8001b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b1a:	f003 0304 	and.w	r3, r3, #4
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b26:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b34:	4619      	mov	r1, r3
 8001b36:	4815      	ldr	r0, [pc, #84]	; (8001b8c <HAL_ADC_MspInit+0x200>)
 8001b38:	f003 f948 	bl	8004dcc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b40:	2303      	movs	r3, #3
 8001b42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b44:	2300      	movs	r3, #0
 8001b46:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	480c      	ldr	r0, [pc, #48]	; (8001b80 <HAL_ADC_MspInit+0x1f4>)
 8001b50:	f003 f93c 	bl	8004dcc <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001b54:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001b58:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001b5c:	f001 f826 	bl	8002bac <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001b60:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001b64:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001b68:	f001 f820 	bl	8002bac <HAL_SYSCFG_AnalogSwitchConfig>
}
 8001b6c:	bf00      	nop
 8001b6e:	3740      	adds	r7, #64	; 0x40
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40022000 	.word	0x40022000
 8001b78:	24000cec 	.word	0x24000cec
 8001b7c:	58024400 	.word	0x58024400
 8001b80:	58020800 	.word	0x58020800
 8001b84:	40022100 	.word	0x40022100
 8001b88:	58026000 	.word	0x58026000
 8001b8c:	58021400 	.word	0x58021400

08001b90 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b092      	sub	sp, #72	; 0x48
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b98:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	605a      	str	r2, [r3, #4]
 8001ba2:	609a      	str	r2, [r3, #8]
 8001ba4:	60da      	str	r2, [r3, #12]
 8001ba6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a87      	ldr	r2, [pc, #540]	; (8001dcc <HAL_ETH_MspInit+0x23c>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	f040 8108 	bne.w	8001dc4 <HAL_ETH_MspInit+0x234>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001bb4:	4b86      	ldr	r3, [pc, #536]	; (8001dd0 <HAL_ETH_MspInit+0x240>)
 8001bb6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001bba:	4a85      	ldr	r2, [pc, #532]	; (8001dd0 <HAL_ETH_MspInit+0x240>)
 8001bbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bc0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001bc4:	4b82      	ldr	r3, [pc, #520]	; (8001dd0 <HAL_ETH_MspInit+0x240>)
 8001bc6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001bca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bce:	633b      	str	r3, [r7, #48]	; 0x30
 8001bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001bd2:	4b7f      	ldr	r3, [pc, #508]	; (8001dd0 <HAL_ETH_MspInit+0x240>)
 8001bd4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001bd8:	4a7d      	ldr	r2, [pc, #500]	; (8001dd0 <HAL_ETH_MspInit+0x240>)
 8001bda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bde:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001be2:	4b7b      	ldr	r3, [pc, #492]	; (8001dd0 <HAL_ETH_MspInit+0x240>)
 8001be4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001be8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001bf0:	4b77      	ldr	r3, [pc, #476]	; (8001dd0 <HAL_ETH_MspInit+0x240>)
 8001bf2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001bf6:	4a76      	ldr	r2, [pc, #472]	; (8001dd0 <HAL_ETH_MspInit+0x240>)
 8001bf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bfc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001c00:	4b73      	ldr	r3, [pc, #460]	; (8001dd0 <HAL_ETH_MspInit+0x240>)
 8001c02:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c0e:	4b70      	ldr	r3, [pc, #448]	; (8001dd0 <HAL_ETH_MspInit+0x240>)
 8001c10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c14:	4a6e      	ldr	r2, [pc, #440]	; (8001dd0 <HAL_ETH_MspInit+0x240>)
 8001c16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c1e:	4b6c      	ldr	r3, [pc, #432]	; (8001dd0 <HAL_ETH_MspInit+0x240>)
 8001c20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c28:	627b      	str	r3, [r7, #36]	; 0x24
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c2c:	4b68      	ldr	r3, [pc, #416]	; (8001dd0 <HAL_ETH_MspInit+0x240>)
 8001c2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c32:	4a67      	ldr	r2, [pc, #412]	; (8001dd0 <HAL_ETH_MspInit+0x240>)
 8001c34:	f043 0310 	orr.w	r3, r3, #16
 8001c38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c3c:	4b64      	ldr	r3, [pc, #400]	; (8001dd0 <HAL_ETH_MspInit+0x240>)
 8001c3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c42:	f003 0310 	and.w	r3, r3, #16
 8001c46:	623b      	str	r3, [r7, #32]
 8001c48:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001c4a:	4b61      	ldr	r3, [pc, #388]	; (8001dd0 <HAL_ETH_MspInit+0x240>)
 8001c4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c50:	4a5f      	ldr	r2, [pc, #380]	; (8001dd0 <HAL_ETH_MspInit+0x240>)
 8001c52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c5a:	4b5d      	ldr	r3, [pc, #372]	; (8001dd0 <HAL_ETH_MspInit+0x240>)
 8001c5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c64:	61fb      	str	r3, [r7, #28]
 8001c66:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c68:	4b59      	ldr	r3, [pc, #356]	; (8001dd0 <HAL_ETH_MspInit+0x240>)
 8001c6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c6e:	4a58      	ldr	r2, [pc, #352]	; (8001dd0 <HAL_ETH_MspInit+0x240>)
 8001c70:	f043 0304 	orr.w	r3, r3, #4
 8001c74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c78:	4b55      	ldr	r3, [pc, #340]	; (8001dd0 <HAL_ETH_MspInit+0x240>)
 8001c7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c7e:	f003 0304 	and.w	r3, r3, #4
 8001c82:	61bb      	str	r3, [r7, #24]
 8001c84:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c86:	4b52      	ldr	r3, [pc, #328]	; (8001dd0 <HAL_ETH_MspInit+0x240>)
 8001c88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c8c:	4a50      	ldr	r2, [pc, #320]	; (8001dd0 <HAL_ETH_MspInit+0x240>)
 8001c8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c96:	4b4e      	ldr	r3, [pc, #312]	; (8001dd0 <HAL_ETH_MspInit+0x240>)
 8001c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ca0:	617b      	str	r3, [r7, #20]
 8001ca2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca4:	4b4a      	ldr	r3, [pc, #296]	; (8001dd0 <HAL_ETH_MspInit+0x240>)
 8001ca6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001caa:	4a49      	ldr	r2, [pc, #292]	; (8001dd0 <HAL_ETH_MspInit+0x240>)
 8001cac:	f043 0301 	orr.w	r3, r3, #1
 8001cb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cb4:	4b46      	ldr	r3, [pc, #280]	; (8001dd0 <HAL_ETH_MspInit+0x240>)
 8001cb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	613b      	str	r3, [r7, #16]
 8001cc0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cc2:	4b43      	ldr	r3, [pc, #268]	; (8001dd0 <HAL_ETH_MspInit+0x240>)
 8001cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cc8:	4a41      	ldr	r2, [pc, #260]	; (8001dd0 <HAL_ETH_MspInit+0x240>)
 8001cca:	f043 0302 	orr.w	r3, r3, #2
 8001cce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cd2:	4b3f      	ldr	r3, [pc, #252]	; (8001dd0 <HAL_ETH_MspInit+0x240>)
 8001cd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cd8:	f003 0302 	and.w	r3, r3, #2
 8001cdc:	60fb      	str	r3, [r7, #12]
 8001cde:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PB1     ------> ETH_RXD3
    PC5     ------> ETH_RXD1
    PB0     ------> ETH_RXD2
    */
    GPIO_InitStruct.Pin = MII_TX_EN_Pin|MII_TXD1_Pin|MII_TXD0_Pin;
 8001ce0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001ce4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cea:	2300      	movs	r3, #0
 8001cec:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001cf2:	230b      	movs	r3, #11
 8001cf4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001cf6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4835      	ldr	r0, [pc, #212]	; (8001dd4 <HAL_ETH_MspInit+0x244>)
 8001cfe:	f003 f865 	bl	8004dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_TXD3_Pin;
 8001d02:	2304      	movs	r3, #4
 8001d04:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d06:	2302      	movs	r3, #2
 8001d08:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d12:	230b      	movs	r3, #11
 8001d14:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(MII_TXD3_GPIO_Port, &GPIO_InitStruct);
 8001d16:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	482e      	ldr	r0, [pc, #184]	; (8001dd8 <HAL_ETH_MspInit+0x248>)
 8001d1e:	f003 f855 	bl	8004dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RX_ER_Pin;
 8001d22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d26:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d28:	2302      	movs	r3, #2
 8001d2a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d30:	2300      	movs	r3, #0
 8001d32:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d34:	230b      	movs	r3, #11
 8001d36:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(MII_RX_ER_GPIO_Port, &GPIO_InitStruct);
 8001d38:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4827      	ldr	r0, [pc, #156]	; (8001ddc <HAL_ETH_MspInit+0x24c>)
 8001d40:	f003 f844 	bl	8004dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDC_Pin|MII_TXD2_Pin|MII_TX_CLK_Pin|MII_RXD0_Pin
 8001d44:	233e      	movs	r3, #62	; 0x3e
 8001d46:	637b      	str	r3, [r7, #52]	; 0x34
                          |MII_RXD1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d48:	2302      	movs	r3, #2
 8001d4a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d50:	2300      	movs	r3, #0
 8001d52:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d54:	230b      	movs	r3, #11
 8001d56:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d58:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4820      	ldr	r0, [pc, #128]	; (8001de0 <HAL_ETH_MspInit+0x250>)
 8001d60:	f003 f834 	bl	8004dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_CRS_Pin|MII_COL_Pin;
 8001d64:	230c      	movs	r3, #12
 8001d66:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d68:	2302      	movs	r3, #2
 8001d6a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d70:	2300      	movs	r3, #0
 8001d72:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d74:	230b      	movs	r3, #11
 8001d76:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001d78:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4819      	ldr	r0, [pc, #100]	; (8001de4 <HAL_ETH_MspInit+0x254>)
 8001d80:	f003 f824 	bl	8004dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDIO_Pin|MII_RX_CLK_Pin|MII_RX_DV_Pin;
 8001d84:	2386      	movs	r3, #134	; 0x86
 8001d86:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d88:	2302      	movs	r3, #2
 8001d8a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d90:	2300      	movs	r3, #0
 8001d92:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d94:	230b      	movs	r3, #11
 8001d96:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d98:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4812      	ldr	r0, [pc, #72]	; (8001de8 <HAL_ETH_MspInit+0x258>)
 8001da0:	f003 f814 	bl	8004dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RX_D3_Pin|MII_RX_D2_Pin;
 8001da4:	2303      	movs	r3, #3
 8001da6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da8:	2302      	movs	r3, #2
 8001daa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dac:	2300      	movs	r3, #0
 8001dae:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db0:	2300      	movs	r3, #0
 8001db2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001db4:	230b      	movs	r3, #11
 8001db6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001db8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	480b      	ldr	r0, [pc, #44]	; (8001dec <HAL_ETH_MspInit+0x25c>)
 8001dc0:	f003 f804 	bl	8004dcc <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001dc4:	bf00      	nop
 8001dc6:	3748      	adds	r7, #72	; 0x48
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	40028000 	.word	0x40028000
 8001dd0:	58024400 	.word	0x58024400
 8001dd4:	58021800 	.word	0x58021800
 8001dd8:	58021000 	.word	0x58021000
 8001ddc:	58022000 	.word	0x58022000
 8001de0:	58020800 	.word	0x58020800
 8001de4:	58021c00 	.word	0x58021c00
 8001de8:	58020000 	.word	0x58020000
 8001dec:	58020400 	.word	0x58020400

08001df0 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b0bc      	sub	sp, #240	; 0xf0
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	605a      	str	r2, [r3, #4]
 8001e02:	609a      	str	r2, [r3, #8]
 8001e04:	60da      	str	r2, [r3, #12]
 8001e06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e08:	f107 0318 	add.w	r3, r7, #24
 8001e0c:	22c0      	movs	r2, #192	; 0xc0
 8001e0e:	2100      	movs	r1, #0
 8001e10:	4618      	mov	r0, r3
 8001e12:	f00a f897 	bl	800bf44 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a57      	ldr	r2, [pc, #348]	; (8001f78 <HAL_FDCAN_MspInit+0x188>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d151      	bne.n	8001ec4 <HAL_FDCAN_MspInit+0xd4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001e20:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001e24:	f04f 0300 	mov.w	r3, #0
 8001e28:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001e2c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001e30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e34:	f107 0318 	add.w	r3, r7, #24
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f004 fdb1 	bl	80069a0 <HAL_RCCEx_PeriphCLKConfig>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8001e44:	f7ff fd82 	bl	800194c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001e48:	4b4c      	ldr	r3, [pc, #304]	; (8001f7c <HAL_FDCAN_MspInit+0x18c>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	4a4b      	ldr	r2, [pc, #300]	; (8001f7c <HAL_FDCAN_MspInit+0x18c>)
 8001e50:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001e52:	4b4a      	ldr	r3, [pc, #296]	; (8001f7c <HAL_FDCAN_MspInit+0x18c>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d10e      	bne.n	8001e78 <HAL_FDCAN_MspInit+0x88>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001e5a:	4b49      	ldr	r3, [pc, #292]	; (8001f80 <HAL_FDCAN_MspInit+0x190>)
 8001e5c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001e60:	4a47      	ldr	r2, [pc, #284]	; (8001f80 <HAL_FDCAN_MspInit+0x190>)
 8001e62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e66:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001e6a:	4b45      	ldr	r3, [pc, #276]	; (8001f80 <HAL_FDCAN_MspInit+0x190>)
 8001e6c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e74:	617b      	str	r3, [r7, #20]
 8001e76:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e78:	4b41      	ldr	r3, [pc, #260]	; (8001f80 <HAL_FDCAN_MspInit+0x190>)
 8001e7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e7e:	4a40      	ldr	r2, [pc, #256]	; (8001f80 <HAL_FDCAN_MspInit+0x190>)
 8001e80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e88:	4b3d      	ldr	r3, [pc, #244]	; (8001f80 <HAL_FDCAN_MspInit+0x190>)
 8001e8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e92:	613b      	str	r3, [r7, #16]
 8001e94:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PH14     ------> FDCAN1_RX
    PH13     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = FDCAN1_RX_Pin|FDCAN1_TX_Pin;
 8001e96:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001e9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001eb0:	2309      	movs	r3, #9
 8001eb2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001eb6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4831      	ldr	r0, [pc, #196]	; (8001f84 <HAL_FDCAN_MspInit+0x194>)
 8001ebe:	f002 ff85 	bl	8004dcc <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8001ec2:	e055      	b.n	8001f70 <HAL_FDCAN_MspInit+0x180>
  else if(hfdcan->Instance==FDCAN2)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a2f      	ldr	r2, [pc, #188]	; (8001f88 <HAL_FDCAN_MspInit+0x198>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d150      	bne.n	8001f70 <HAL_FDCAN_MspInit+0x180>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001ece:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001ed2:	f04f 0300 	mov.w	r3, #0
 8001ed6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001eda:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001ede:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ee2:	f107 0318 	add.w	r3, r7, #24
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f004 fd5a 	bl	80069a0 <HAL_RCCEx_PeriphCLKConfig>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <HAL_FDCAN_MspInit+0x106>
      Error_Handler();
 8001ef2:	f7ff fd2b 	bl	800194c <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001ef6:	4b21      	ldr	r3, [pc, #132]	; (8001f7c <HAL_FDCAN_MspInit+0x18c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	3301      	adds	r3, #1
 8001efc:	4a1f      	ldr	r2, [pc, #124]	; (8001f7c <HAL_FDCAN_MspInit+0x18c>)
 8001efe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001f00:	4b1e      	ldr	r3, [pc, #120]	; (8001f7c <HAL_FDCAN_MspInit+0x18c>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d10e      	bne.n	8001f26 <HAL_FDCAN_MspInit+0x136>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001f08:	4b1d      	ldr	r3, [pc, #116]	; (8001f80 <HAL_FDCAN_MspInit+0x190>)
 8001f0a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001f0e:	4a1c      	ldr	r2, [pc, #112]	; (8001f80 <HAL_FDCAN_MspInit+0x190>)
 8001f10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f14:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001f18:	4b19      	ldr	r3, [pc, #100]	; (8001f80 <HAL_FDCAN_MspInit+0x190>)
 8001f1a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f22:	60fb      	str	r3, [r7, #12]
 8001f24:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f26:	4b16      	ldr	r3, [pc, #88]	; (8001f80 <HAL_FDCAN_MspInit+0x190>)
 8001f28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f2c:	4a14      	ldr	r2, [pc, #80]	; (8001f80 <HAL_FDCAN_MspInit+0x190>)
 8001f2e:	f043 0302 	orr.w	r3, r3, #2
 8001f32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f36:	4b12      	ldr	r3, [pc, #72]	; (8001f80 <HAL_FDCAN_MspInit+0x190>)
 8001f38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	60bb      	str	r3, [r7, #8]
 8001f42:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FDCAN2_RX_Pin|FDCAN2_TX_Pin;
 8001f44:	f242 0320 	movw	r3, #8224	; 0x2020
 8001f48:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f52:	2300      	movs	r3, #0
 8001f54:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001f5e:	2309      	movs	r3, #9
 8001f60:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f64:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4808      	ldr	r0, [pc, #32]	; (8001f8c <HAL_FDCAN_MspInit+0x19c>)
 8001f6c:	f002 ff2e 	bl	8004dcc <HAL_GPIO_Init>
}
 8001f70:	bf00      	nop
 8001f72:	37f0      	adds	r7, #240	; 0xf0
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	4000a000 	.word	0x4000a000
 8001f7c:	24000cf0 	.word	0x24000cf0
 8001f80:	58024400 	.word	0x58024400
 8001f84:	58021c00 	.word	0x58021c00
 8001f88:	4000a400 	.word	0x4000a400
 8001f8c:	58020400 	.word	0x58020400

08001f90 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b0be      	sub	sp, #248	; 0xf8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f98:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]
 8001fa0:	605a      	str	r2, [r3, #4]
 8001fa2:	609a      	str	r2, [r3, #8]
 8001fa4:	60da      	str	r2, [r3, #12]
 8001fa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fa8:	f107 0320 	add.w	r3, r7, #32
 8001fac:	22c0      	movs	r2, #192	; 0xc0
 8001fae:	2100      	movs	r1, #0
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f009 ffc7 	bl	800bf44 <memset>
  if(hltdc->Instance==LTDC)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a66      	ldr	r2, [pc, #408]	; (8002154 <HAL_LTDC_MspInit+0x1c4>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	f040 80c4 	bne.w	800214a <HAL_LTDC_MspInit+0x1ba>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001fc2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001fc6:	f04f 0300 	mov.w	r3, #0
 8001fca:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.PLL3.PLL3M = 32;
 8001fce:	2320      	movs	r3, #32
 8001fd0:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3N = 192;
 8001fd2:	23c0      	movs	r3, #192	; 0xc0
 8001fd4:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001fda:	2302      	movs	r3, #2
 8001fdc:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001fde:	2302      	movs	r3, #2
 8001fe0:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001fe2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001fe6:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8001fe8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fec:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0.0;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ff2:	f107 0320 	add.w	r3, r7, #32
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f004 fcd2 	bl	80069a0 <HAL_RCCEx_PeriphCLKConfig>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <HAL_LTDC_MspInit+0x76>
    {
      Error_Handler();
 8002002:	f7ff fca3 	bl	800194c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002006:	4b54      	ldr	r3, [pc, #336]	; (8002158 <HAL_LTDC_MspInit+0x1c8>)
 8002008:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800200c:	4a52      	ldr	r2, [pc, #328]	; (8002158 <HAL_LTDC_MspInit+0x1c8>)
 800200e:	f043 0308 	orr.w	r3, r3, #8
 8002012:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8002016:	4b50      	ldr	r3, [pc, #320]	; (8002158 <HAL_LTDC_MspInit+0x1c8>)
 8002018:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800201c:	f003 0308 	and.w	r3, r3, #8
 8002020:	61fb      	str	r3, [r7, #28]
 8002022:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002024:	4b4c      	ldr	r3, [pc, #304]	; (8002158 <HAL_LTDC_MspInit+0x1c8>)
 8002026:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800202a:	4a4b      	ldr	r2, [pc, #300]	; (8002158 <HAL_LTDC_MspInit+0x1c8>)
 800202c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002030:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002034:	4b48      	ldr	r3, [pc, #288]	; (8002158 <HAL_LTDC_MspInit+0x1c8>)
 8002036:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800203a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800203e:	61bb      	str	r3, [r7, #24]
 8002040:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002042:	4b45      	ldr	r3, [pc, #276]	; (8002158 <HAL_LTDC_MspInit+0x1c8>)
 8002044:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002048:	4a43      	ldr	r2, [pc, #268]	; (8002158 <HAL_LTDC_MspInit+0x1c8>)
 800204a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800204e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002052:	4b41      	ldr	r3, [pc, #260]	; (8002158 <HAL_LTDC_MspInit+0x1c8>)
 8002054:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800205c:	617b      	str	r3, [r7, #20]
 800205e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002060:	4b3d      	ldr	r3, [pc, #244]	; (8002158 <HAL_LTDC_MspInit+0x1c8>)
 8002062:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002066:	4a3c      	ldr	r2, [pc, #240]	; (8002158 <HAL_LTDC_MspInit+0x1c8>)
 8002068:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800206c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002070:	4b39      	ldr	r3, [pc, #228]	; (8002158 <HAL_LTDC_MspInit+0x1c8>)
 8002072:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002076:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800207a:	613b      	str	r3, [r7, #16]
 800207c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800207e:	4b36      	ldr	r3, [pc, #216]	; (8002158 <HAL_LTDC_MspInit+0x1c8>)
 8002080:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002084:	4a34      	ldr	r2, [pc, #208]	; (8002158 <HAL_LTDC_MspInit+0x1c8>)
 8002086:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800208a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800208e:	4b32      	ldr	r3, [pc, #200]	; (8002158 <HAL_LTDC_MspInit+0x1c8>)
 8002090:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002094:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002098:	60fb      	str	r3, [r7, #12]
 800209a:	68fb      	ldr	r3, [r7, #12]
    PJ5     ------> LTDC_R6
    PH9     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    PJ4     ------> LTDC_R5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
 800209c:	23fc      	movs	r3, #252	; 0xfc
 800209e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_7|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a2:	2302      	movs	r3, #2
 80020a4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a8:	2300      	movs	r3, #0
 80020aa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ae:	2300      	movs	r3, #0
 80020b0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020b4:	230e      	movs	r3, #14
 80020b6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80020ba:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80020be:	4619      	mov	r1, r3
 80020c0:	4826      	ldr	r0, [pc, #152]	; (800215c <HAL_LTDC_MspInit+0x1cc>)
 80020c2:	f002 fe83 	bl	8004dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
 80020c6:	f24d 2303 	movw	r3, #53763	; 0xd203
 80020ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ce:	2302      	movs	r3, #2
 80020d0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d4:	2300      	movs	r3, #0
 80020d6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020da:	2300      	movs	r3, #0
 80020dc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020e0:	230e      	movs	r3, #14
 80020e2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80020e6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80020ea:	4619      	mov	r1, r3
 80020ec:	481c      	ldr	r0, [pc, #112]	; (8002160 <HAL_LTDC_MspInit+0x1d0>)
 80020ee:	f002 fe6d 	bl	8004dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DISP_Pin|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
 80020f2:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 80020f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fa:	2302      	movs	r3, #2
 80020fc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002100:	2300      	movs	r3, #0
 8002102:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002106:	2300      	movs	r3, #0
 8002108:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800210c:	230e      	movs	r3, #14
 800210e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002112:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002116:	4619      	mov	r1, r3
 8002118:	4812      	ldr	r0, [pc, #72]	; (8002164 <HAL_LTDC_MspInit+0x1d4>)
 800211a:	f002 fe57 	bl	8004dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800211e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002122:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002126:	2302      	movs	r3, #2
 8002128:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212c:	2300      	movs	r3, #0
 800212e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002132:	2300      	movs	r3, #0
 8002134:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002138:	230e      	movs	r3, #14
 800213a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800213e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002142:	4619      	mov	r1, r3
 8002144:	4808      	ldr	r0, [pc, #32]	; (8002168 <HAL_LTDC_MspInit+0x1d8>)
 8002146:	f002 fe41 	bl	8004dcc <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800214a:	bf00      	nop
 800214c:	37f8      	adds	r7, #248	; 0xf8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	50001000 	.word	0x50001000
 8002158:	58024400 	.word	0x58024400
 800215c:	58022800 	.word	0x58022800
 8002160:	58022000 	.word	0x58022000
 8002164:	58022400 	.word	0x58022400
 8002168:	58021c00 	.word	0x58021c00

0800216c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b0b2      	sub	sp, #200	; 0xc8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002174:	f107 0308 	add.w	r3, r7, #8
 8002178:	22c0      	movs	r2, #192	; 0xc0
 800217a:	2100      	movs	r1, #0
 800217c:	4618      	mov	r0, r3
 800217e:	f009 fee1 	bl	800bf44 <memset>
  if(hrtc->Instance==RTC)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a10      	ldr	r2, [pc, #64]	; (80021c8 <HAL_RTC_MspInit+0x5c>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d119      	bne.n	80021c0 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800218c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002190:	f04f 0300 	mov.w	r3, #0
 8002194:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002198:	f44f 7300 	mov.w	r3, #512	; 0x200
 800219c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021a0:	f107 0308 	add.w	r3, r7, #8
 80021a4:	4618      	mov	r0, r3
 80021a6:	f004 fbfb 	bl	80069a0 <HAL_RCCEx_PeriphCLKConfig>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 80021b0:	f7ff fbcc 	bl	800194c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80021b4:	4b05      	ldr	r3, [pc, #20]	; (80021cc <HAL_RTC_MspInit+0x60>)
 80021b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b8:	4a04      	ldr	r2, [pc, #16]	; (80021cc <HAL_RTC_MspInit+0x60>)
 80021ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021be:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80021c0:	bf00      	nop
 80021c2:	37c8      	adds	r7, #200	; 0xc8
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	58004000 	.word	0x58004000
 80021cc:	58024400 	.word	0x58024400

080021d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b0bc      	sub	sp, #240	; 0xf0
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	605a      	str	r2, [r3, #4]
 80021e2:	609a      	str	r2, [r3, #8]
 80021e4:	60da      	str	r2, [r3, #12]
 80021e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021e8:	f107 0318 	add.w	r3, r7, #24
 80021ec:	22c0      	movs	r2, #192	; 0xc0
 80021ee:	2100      	movs	r1, #0
 80021f0:	4618      	mov	r0, r3
 80021f2:	f009 fea7 	bl	800bf44 <memset>
  if(hspi->Instance==SPI2)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a55      	ldr	r2, [pc, #340]	; (8002350 <HAL_SPI_MspInit+0x180>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	f040 80a3 	bne.w	8002348 <HAL_SPI_MspInit+0x178>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002202:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002206:	f04f 0300 	mov.w	r3, #0
 800220a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800220e:	2300      	movs	r3, #0
 8002210:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002212:	f107 0318 	add.w	r3, r7, #24
 8002216:	4618      	mov	r0, r3
 8002218:	f004 fbc2 	bl	80069a0 <HAL_RCCEx_PeriphCLKConfig>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8002222:	f7ff fb93 	bl	800194c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002226:	4b4b      	ldr	r3, [pc, #300]	; (8002354 <HAL_SPI_MspInit+0x184>)
 8002228:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800222c:	4a49      	ldr	r2, [pc, #292]	; (8002354 <HAL_SPI_MspInit+0x184>)
 800222e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002232:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002236:	4b47      	ldr	r3, [pc, #284]	; (8002354 <HAL_SPI_MspInit+0x184>)
 8002238:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800223c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002240:	617b      	str	r3, [r7, #20]
 8002242:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002244:	4b43      	ldr	r3, [pc, #268]	; (8002354 <HAL_SPI_MspInit+0x184>)
 8002246:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800224a:	4a42      	ldr	r2, [pc, #264]	; (8002354 <HAL_SPI_MspInit+0x184>)
 800224c:	f043 0302 	orr.w	r3, r3, #2
 8002250:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002254:	4b3f      	ldr	r3, [pc, #252]	; (8002354 <HAL_SPI_MspInit+0x184>)
 8002256:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	613b      	str	r3, [r7, #16]
 8002260:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002262:	4b3c      	ldr	r3, [pc, #240]	; (8002354 <HAL_SPI_MspInit+0x184>)
 8002264:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002268:	4a3a      	ldr	r2, [pc, #232]	; (8002354 <HAL_SPI_MspInit+0x184>)
 800226a:	f043 0308 	orr.w	r3, r3, #8
 800226e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002272:	4b38      	ldr	r3, [pc, #224]	; (8002354 <HAL_SPI_MspInit+0x184>)
 8002274:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002278:	f003 0308 	and.w	r3, r3, #8
 800227c:	60fb      	str	r3, [r7, #12]
 800227e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002280:	4b34      	ldr	r3, [pc, #208]	; (8002354 <HAL_SPI_MspInit+0x184>)
 8002282:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002286:	4a33      	ldr	r2, [pc, #204]	; (8002354 <HAL_SPI_MspInit+0x184>)
 8002288:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800228c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002290:	4b30      	ldr	r3, [pc, #192]	; (8002354 <HAL_SPI_MspInit+0x184>)
 8002292:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800229a:	60bb      	str	r3, [r7, #8]
 800229c:	68bb      	ldr	r3, [r7, #8]
    PB4 (NJTRST)     ------> SPI2_NSS
    PD3     ------> SPI2_SCK
    PI2     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800229e:	2310      	movs	r3, #16
 80022a0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a4:	2302      	movs	r3, #2
 80022a6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022aa:	2300      	movs	r3, #0
 80022ac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b0:	2300      	movs	r3, #0
 80022b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 80022b6:	2307      	movs	r3, #7
 80022b8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022bc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80022c0:	4619      	mov	r1, r3
 80022c2:	4825      	ldr	r0, [pc, #148]	; (8002358 <HAL_SPI_MspInit+0x188>)
 80022c4:	f002 fd82 	bl	8004dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80022c8:	2308      	movs	r3, #8
 80022ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ce:	2302      	movs	r3, #2
 80022d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d4:	2300      	movs	r3, #0
 80022d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022da:	2300      	movs	r3, #0
 80022dc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80022e0:	2305      	movs	r3, #5
 80022e2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022e6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80022ea:	4619      	mov	r1, r3
 80022ec:	481b      	ldr	r0, [pc, #108]	; (800235c <HAL_SPI_MspInit+0x18c>)
 80022ee:	f002 fd6d 	bl	8004dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80022f2:	2304      	movs	r3, #4
 80022f4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f8:	2302      	movs	r3, #2
 80022fa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fe:	2300      	movs	r3, #0
 8002300:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002304:	2300      	movs	r3, #0
 8002306:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800230a:	2305      	movs	r3, #5
 800230c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002310:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002314:	4619      	mov	r1, r3
 8002316:	4812      	ldr	r0, [pc, #72]	; (8002360 <HAL_SPI_MspInit+0x190>)
 8002318:	f002 fd58 	bl	8004dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800231c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002320:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002324:	2302      	movs	r3, #2
 8002326:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232a:	2300      	movs	r3, #0
 800232c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002330:	2300      	movs	r3, #0
 8002332:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002336:	2305      	movs	r3, #5
 8002338:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800233c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002340:	4619      	mov	r1, r3
 8002342:	4805      	ldr	r0, [pc, #20]	; (8002358 <HAL_SPI_MspInit+0x188>)
 8002344:	f002 fd42 	bl	8004dcc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002348:	bf00      	nop
 800234a:	37f0      	adds	r7, #240	; 0xf0
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40003800 	.word	0x40003800
 8002354:	58024400 	.word	0x58024400
 8002358:	58020400 	.word	0x58020400
 800235c:	58020c00 	.word	0x58020c00
 8002360:	58022000 	.word	0x58022000

08002364 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a0b      	ldr	r2, [pc, #44]	; (80023a0 <HAL_TIM_Base_MspInit+0x3c>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d10e      	bne.n	8002394 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002376:	4b0b      	ldr	r3, [pc, #44]	; (80023a4 <HAL_TIM_Base_MspInit+0x40>)
 8002378:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800237c:	4a09      	ldr	r2, [pc, #36]	; (80023a4 <HAL_TIM_Base_MspInit+0x40>)
 800237e:	f043 0302 	orr.w	r3, r3, #2
 8002382:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002386:	4b07      	ldr	r3, [pc, #28]	; (80023a4 <HAL_TIM_Base_MspInit+0x40>)
 8002388:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	60fb      	str	r3, [r7, #12]
 8002392:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002394:	bf00      	nop
 8002396:	3714      	adds	r7, #20
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr
 80023a0:	40000400 	.word	0x40000400
 80023a4:	58024400 	.word	0x58024400

080023a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b0ba      	sub	sp, #232	; 0xe8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	605a      	str	r2, [r3, #4]
 80023ba:	609a      	str	r2, [r3, #8]
 80023bc:	60da      	str	r2, [r3, #12]
 80023be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023c0:	f107 0310 	add.w	r3, r7, #16
 80023c4:	22c0      	movs	r2, #192	; 0xc0
 80023c6:	2100      	movs	r1, #0
 80023c8:	4618      	mov	r0, r3
 80023ca:	f009 fdbb 	bl	800bf44 <memset>
  if(huart->Instance==USART3)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a27      	ldr	r2, [pc, #156]	; (8002470 <HAL_UART_MspInit+0xc8>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d146      	bne.n	8002466 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80023d8:	f04f 0202 	mov.w	r2, #2
 80023dc:	f04f 0300 	mov.w	r3, #0
 80023e0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80023e4:	2300      	movs	r3, #0
 80023e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023ea:	f107 0310 	add.w	r3, r7, #16
 80023ee:	4618      	mov	r0, r3
 80023f0:	f004 fad6 	bl	80069a0 <HAL_RCCEx_PeriphCLKConfig>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80023fa:	f7ff faa7 	bl	800194c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80023fe:	4b1d      	ldr	r3, [pc, #116]	; (8002474 <HAL_UART_MspInit+0xcc>)
 8002400:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002404:	4a1b      	ldr	r2, [pc, #108]	; (8002474 <HAL_UART_MspInit+0xcc>)
 8002406:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800240a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800240e:	4b19      	ldr	r3, [pc, #100]	; (8002474 <HAL_UART_MspInit+0xcc>)
 8002410:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002414:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002418:	60fb      	str	r3, [r7, #12]
 800241a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800241c:	4b15      	ldr	r3, [pc, #84]	; (8002474 <HAL_UART_MspInit+0xcc>)
 800241e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002422:	4a14      	ldr	r2, [pc, #80]	; (8002474 <HAL_UART_MspInit+0xcc>)
 8002424:	f043 0302 	orr.w	r3, r3, #2
 8002428:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800242c:	4b11      	ldr	r3, [pc, #68]	; (8002474 <HAL_UART_MspInit+0xcc>)
 800242e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	60bb      	str	r3, [r7, #8]
 8002438:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800243a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800243e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002442:	2302      	movs	r3, #2
 8002444:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002448:	2300      	movs	r3, #0
 800244a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800244e:	2300      	movs	r3, #0
 8002450:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002454:	2307      	movs	r3, #7
 8002456:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800245a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800245e:	4619      	mov	r1, r3
 8002460:	4805      	ldr	r0, [pc, #20]	; (8002478 <HAL_UART_MspInit+0xd0>)
 8002462:	f002 fcb3 	bl	8004dcc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002466:	bf00      	nop
 8002468:	37e8      	adds	r7, #232	; 0xe8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	40004800 	.word	0x40004800
 8002474:	58024400 	.word	0x58024400
 8002478:	58020400 	.word	0x58020400

0800247c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b0ba      	sub	sp, #232	; 0xe8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002484:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002488:	2200      	movs	r2, #0
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	605a      	str	r2, [r3, #4]
 800248e:	609a      	str	r2, [r3, #8]
 8002490:	60da      	str	r2, [r3, #12]
 8002492:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002494:	f107 0310 	add.w	r3, r7, #16
 8002498:	22c0      	movs	r2, #192	; 0xc0
 800249a:	2100      	movs	r1, #0
 800249c:	4618      	mov	r0, r3
 800249e:	f009 fd51 	bl	800bf44 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a30      	ldr	r2, [pc, #192]	; (8002568 <HAL_PCD_MspInit+0xec>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d159      	bne.n	8002560 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80024ac:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80024b0:	f04f 0300 	mov.w	r3, #0
 80024b4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80024b8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80024bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024c0:	f107 0310 	add.w	r3, r7, #16
 80024c4:	4618      	mov	r0, r3
 80024c6:	f004 fa6b 	bl	80069a0 <HAL_RCCEx_PeriphCLKConfig>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 80024d0:	f7ff fa3c 	bl	800194c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80024d4:	f003 fa6e 	bl	80059b4 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024d8:	4b24      	ldr	r3, [pc, #144]	; (800256c <HAL_PCD_MspInit+0xf0>)
 80024da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024de:	4a23      	ldr	r2, [pc, #140]	; (800256c <HAL_PCD_MspInit+0xf0>)
 80024e0:	f043 0301 	orr.w	r3, r3, #1
 80024e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024e8:	4b20      	ldr	r3, [pc, #128]	; (800256c <HAL_PCD_MspInit+0xf0>)
 80024ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	60fb      	str	r3, [r7, #12]
 80024f4:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = VBUS_FS2_Pin;
 80024f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024fe:	2300      	movs	r3, #0
 8002500:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002504:	2300      	movs	r3, #0
 8002506:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(VBUS_FS2_GPIO_Port, &GPIO_InitStruct);
 800250a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800250e:	4619      	mov	r1, r3
 8002510:	4817      	ldr	r0, [pc, #92]	; (8002570 <HAL_PCD_MspInit+0xf4>)
 8002512:	f002 fc5b 	bl	8004dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS2_P_Pin|USB_OTG_FS2_N_Pin;
 8002516:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800251a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800251e:	2302      	movs	r3, #2
 8002520:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002524:	2300      	movs	r3, #0
 8002526:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800252a:	2300      	movs	r3, #0
 800252c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002530:	230a      	movs	r3, #10
 8002532:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002536:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800253a:	4619      	mov	r1, r3
 800253c:	480c      	ldr	r0, [pc, #48]	; (8002570 <HAL_PCD_MspInit+0xf4>)
 800253e:	f002 fc45 	bl	8004dcc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002542:	4b0a      	ldr	r3, [pc, #40]	; (800256c <HAL_PCD_MspInit+0xf0>)
 8002544:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002548:	4a08      	ldr	r2, [pc, #32]	; (800256c <HAL_PCD_MspInit+0xf0>)
 800254a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800254e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002552:	4b06      	ldr	r3, [pc, #24]	; (800256c <HAL_PCD_MspInit+0xf0>)
 8002554:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002558:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800255c:	60bb      	str	r3, [r7, #8]
 800255e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002560:	bf00      	nop
 8002562:	37e8      	adds	r7, #232	; 0xe8
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	40080000 	.word	0x40080000
 800256c:	58024400 	.word	0x58024400
 8002570:	58020000 	.word	0x58020000

08002574 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002574:	b580      	push	{r7, lr}
 8002576:	b0b8      	sub	sp, #224	; 0xe0
 8002578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800257a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800257e:	2200      	movs	r2, #0
 8002580:	601a      	str	r2, [r3, #0]
 8002582:	605a      	str	r2, [r3, #4]
 8002584:	609a      	str	r2, [r3, #8]
 8002586:	60da      	str	r2, [r3, #12]
 8002588:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800258a:	4b51      	ldr	r3, [pc, #324]	; (80026d0 <HAL_FMC_MspInit+0x15c>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2b00      	cmp	r3, #0
 8002590:	f040 8099 	bne.w	80026c6 <HAL_FMC_MspInit+0x152>
    return;
  }
  FMC_Initialized = 1;
 8002594:	4b4e      	ldr	r3, [pc, #312]	; (80026d0 <HAL_FMC_MspInit+0x15c>)
 8002596:	2201      	movs	r2, #1
 8002598:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800259a:	f107 0308 	add.w	r3, r7, #8
 800259e:	22c0      	movs	r2, #192	; 0xc0
 80025a0:	2100      	movs	r1, #0
 80025a2:	4618      	mov	r0, r3
 80025a4:	f009 fcce 	bl	800bf44 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80025a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80025ac:	f04f 0300 	mov.w	r3, #0
 80025b0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 80025b4:	2300      	movs	r3, #0
 80025b6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025b8:	f107 0308 	add.w	r3, r7, #8
 80025bc:	4618      	mov	r0, r3
 80025be:	f004 f9ef 	bl	80069a0 <HAL_RCCEx_PeriphCLKConfig>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 80025c8:	f7ff f9c0 	bl	800194c <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80025cc:	4b41      	ldr	r3, [pc, #260]	; (80026d4 <HAL_FMC_MspInit+0x160>)
 80025ce:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80025d2:	4a40      	ldr	r2, [pc, #256]	; (80026d4 <HAL_FMC_MspInit+0x160>)
 80025d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025d8:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80025dc:	4b3d      	ldr	r3, [pc, #244]	; (80026d4 <HAL_FMC_MspInit+0x160>)
 80025de:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80025e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025e6:	607b      	str	r3, [r7, #4]
 80025e8:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 80025ea:	f64f 7383 	movw	r3, #65411	; 0xff83
 80025ee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f2:	2302      	movs	r3, #2
 80025f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f8:	2300      	movs	r3, #0
 80025fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025fe:	2303      	movs	r3, #3
 8002600:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002604:	230c      	movs	r3, #12
 8002606:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800260a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800260e:	4619      	mov	r1, r3
 8002610:	4831      	ldr	r0, [pc, #196]	; (80026d8 <HAL_FMC_MspInit+0x164>)
 8002612:	f002 fbdb 	bl	8004dcc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8002616:	f248 1333 	movw	r3, #33075	; 0x8133
 800261a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800261e:	2302      	movs	r3, #2
 8002620:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002624:	2300      	movs	r3, #0
 8002626:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800262a:	2303      	movs	r3, #3
 800262c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002630:	230c      	movs	r3, #12
 8002632:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002636:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800263a:	4619      	mov	r1, r3
 800263c:	4827      	ldr	r0, [pc, #156]	; (80026dc <HAL_FMC_MspInit+0x168>)
 800263e:	f002 fbc5 	bl	8004dcc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8002642:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002646:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800264a:	2302      	movs	r3, #2
 800264c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002650:	2300      	movs	r3, #0
 8002652:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002656:	2303      	movs	r3, #3
 8002658:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800265c:	230c      	movs	r3, #12
 800265e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002662:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002666:	4619      	mov	r1, r3
 8002668:	481d      	ldr	r0, [pc, #116]	; (80026e0 <HAL_FMC_MspInit+0x16c>)
 800266a:	f002 fbaf 	bl	8004dcc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 800266e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002672:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002676:	2302      	movs	r3, #2
 8002678:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267c:	2300      	movs	r3, #0
 800267e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002682:	2303      	movs	r3, #3
 8002684:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002688:	230c      	movs	r3, #12
 800268a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800268e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002692:	4619      	mov	r1, r3
 8002694:	4813      	ldr	r0, [pc, #76]	; (80026e4 <HAL_FMC_MspInit+0x170>)
 8002696:	f002 fb99 	bl	8004dcc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800269a:	23e0      	movs	r3, #224	; 0xe0
 800269c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a0:	2302      	movs	r3, #2
 80026a2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a6:	2300      	movs	r3, #0
 80026a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ac:	2303      	movs	r3, #3
 80026ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80026b2:	230c      	movs	r3, #12
 80026b4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80026b8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80026bc:	4619      	mov	r1, r3
 80026be:	480a      	ldr	r0, [pc, #40]	; (80026e8 <HAL_FMC_MspInit+0x174>)
 80026c0:	f002 fb84 	bl	8004dcc <HAL_GPIO_Init>
 80026c4:	e000      	b.n	80026c8 <HAL_FMC_MspInit+0x154>
    return;
 80026c6:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80026c8:	37e0      	adds	r7, #224	; 0xe0
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	24000cf4 	.word	0x24000cf4
 80026d4:	58024400 	.word	0x58024400
 80026d8:	58021000 	.word	0x58021000
 80026dc:	58021800 	.word	0x58021800
 80026e0:	58020c00 	.word	0x58020c00
 80026e4:	58021400 	.word	0x58021400
 80026e8:	58021c00 	.word	0x58021c00

080026ec <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80026f4:	f7ff ff3e 	bl	8002574 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80026f8:	bf00      	nop
 80026fa:	3708      	adds	r7, #8
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}

08002700 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b0ba      	sub	sp, #232	; 0xe8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002708:	f107 0310 	add.w	r3, r7, #16
 800270c:	22c0      	movs	r2, #192	; 0xc0
 800270e:	2100      	movs	r1, #0
 8002710:	4618      	mov	r0, r3
 8002712:	f009 fc17 	bl	800bf44 <memset>
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a45      	ldr	r2, [pc, #276]	; (8002830 <HAL_SAI_MspInit+0x130>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d13e      	bne.n	800279e <HAL_SAI_MspInit+0x9e>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8002720:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002724:	f04f 0300 	mov.w	r3, #0
 8002728:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 800272c:	2300      	movs	r3, #0
 800272e:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002730:	f107 0310 	add.w	r3, r7, #16
 8002734:	4618      	mov	r0, r3
 8002736:	f004 f933 	bl	80069a0 <HAL_RCCEx_PeriphCLKConfig>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <HAL_SAI_MspInit+0x44>
    {
      Error_Handler();
 8002740:	f7ff f904 	bl	800194c <Error_Handler>
    }

    if (SAI2_client == 0)
 8002744:	4b3b      	ldr	r3, [pc, #236]	; (8002834 <HAL_SAI_MspInit+0x134>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d10e      	bne.n	800276a <HAL_SAI_MspInit+0x6a>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800274c:	4b3a      	ldr	r3, [pc, #232]	; (8002838 <HAL_SAI_MspInit+0x138>)
 800274e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002752:	4a39      	ldr	r2, [pc, #228]	; (8002838 <HAL_SAI_MspInit+0x138>)
 8002754:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002758:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800275c:	4b36      	ldr	r3, [pc, #216]	; (8002838 <HAL_SAI_MspInit+0x138>)
 800275e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002762:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002766:	60fb      	str	r3, [r7, #12]
 8002768:	68fb      	ldr	r3, [r7, #12]
    }
    SAI2_client ++;
 800276a:	4b32      	ldr	r3, [pc, #200]	; (8002834 <HAL_SAI_MspInit+0x134>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	3301      	adds	r3, #1
 8002770:	4a30      	ldr	r2, [pc, #192]	; (8002834 <HAL_SAI_MspInit+0x134>)
 8002772:	6013      	str	r3, [r2, #0]
    PI6     ------> SAI2_SD_A
    PI5     ------> SAI2_SCK_A
    PI4     ------> SAI2_MCLK_A
    PI7     ------> SAI2_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_7;
 8002774:	23f0      	movs	r3, #240	; 0xf0
 8002776:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800277a:	2302      	movs	r3, #2
 800277c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002780:	2300      	movs	r3, #0
 8002782:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002786:	2300      	movs	r3, #0
 8002788:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800278c:	230a      	movs	r3, #10
 800278e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002792:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002796:	4619      	mov	r1, r3
 8002798:	4828      	ldr	r0, [pc, #160]	; (800283c <HAL_SAI_MspInit+0x13c>)
 800279a:	f002 fb17 	bl	8004dcc <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a27      	ldr	r2, [pc, #156]	; (8002840 <HAL_SAI_MspInit+0x140>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d13f      	bne.n	8002828 <HAL_SAI_MspInit+0x128>
    {
      /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 80027a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027ac:	f04f 0300 	mov.w	r3, #0
 80027b0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 80027b4:	2300      	movs	r3, #0
 80027b6:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027b8:	f107 0310 	add.w	r3, r7, #16
 80027bc:	4618      	mov	r0, r3
 80027be:	f004 f8ef 	bl	80069a0 <HAL_RCCEx_PeriphCLKConfig>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <HAL_SAI_MspInit+0xcc>
    {
      Error_Handler();
 80027c8:	f7ff f8c0 	bl	800194c <Error_Handler>
    }

      if (SAI2_client == 0)
 80027cc:	4b19      	ldr	r3, [pc, #100]	; (8002834 <HAL_SAI_MspInit+0x134>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d10e      	bne.n	80027f2 <HAL_SAI_MspInit+0xf2>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80027d4:	4b18      	ldr	r3, [pc, #96]	; (8002838 <HAL_SAI_MspInit+0x138>)
 80027d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80027da:	4a17      	ldr	r2, [pc, #92]	; (8002838 <HAL_SAI_MspInit+0x138>)
 80027dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80027e0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80027e4:	4b14      	ldr	r3, [pc, #80]	; (8002838 <HAL_SAI_MspInit+0x138>)
 80027e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80027ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027ee:	60bb      	str	r3, [r7, #8]
 80027f0:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 80027f2:	4b10      	ldr	r3, [pc, #64]	; (8002834 <HAL_SAI_MspInit+0x134>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	3301      	adds	r3, #1
 80027f8:	4a0e      	ldr	r2, [pc, #56]	; (8002834 <HAL_SAI_MspInit+0x134>)
 80027fa:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80027fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002800:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002804:	2302      	movs	r3, #2
 8002806:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280a:	2300      	movs	r3, #0
 800280c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002810:	2300      	movs	r3, #0
 8002812:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002816:	230a      	movs	r3, #10
 8002818:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800281c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002820:	4619      	mov	r1, r3
 8002822:	4808      	ldr	r0, [pc, #32]	; (8002844 <HAL_SAI_MspInit+0x144>)
 8002824:	f002 fad2 	bl	8004dcc <HAL_GPIO_Init>

    }
}
 8002828:	bf00      	nop
 800282a:	37e8      	adds	r7, #232	; 0xe8
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	40015c04 	.word	0x40015c04
 8002834:	24000cf8 	.word	0x24000cf8
 8002838:	58024400 	.word	0x58024400
 800283c:	58022000 	.word	0x58022000
 8002840:	40015c24 	.word	0x40015c24
 8002844:	58021800 	.word	0x58021800

08002848 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800284c:	e7fe      	b.n	800284c <NMI_Handler+0x4>

0800284e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800284e:	b480      	push	{r7}
 8002850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002852:	e7fe      	b.n	8002852 <HardFault_Handler+0x4>

08002854 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002858:	e7fe      	b.n	8002858 <MemManage_Handler+0x4>

0800285a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800285a:	b480      	push	{r7}
 800285c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800285e:	e7fe      	b.n	800285e <BusFault_Handler+0x4>

08002860 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002864:	e7fe      	b.n	8002864 <UsageFault_Handler+0x4>

08002866 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002866:	b480      	push	{r7}
 8002868:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800286a:	bf00      	nop
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002878:	bf00      	nop
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr

08002882 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002882:	b480      	push	{r7}
 8002884:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002886:	bf00      	nop
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002894:	f000 f926 	bl	8002ae4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002898:	bf00      	nop
 800289a:	bd80      	pop	{r7, pc}

0800289c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80028a0:	4b37      	ldr	r3, [pc, #220]	; (8002980 <SystemInit+0xe4>)
 80028a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a6:	4a36      	ldr	r2, [pc, #216]	; (8002980 <SystemInit+0xe4>)
 80028a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80028b0:	4b34      	ldr	r3, [pc, #208]	; (8002984 <SystemInit+0xe8>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 030f 	and.w	r3, r3, #15
 80028b8:	2b06      	cmp	r3, #6
 80028ba:	d807      	bhi.n	80028cc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80028bc:	4b31      	ldr	r3, [pc, #196]	; (8002984 <SystemInit+0xe8>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f023 030f 	bic.w	r3, r3, #15
 80028c4:	4a2f      	ldr	r2, [pc, #188]	; (8002984 <SystemInit+0xe8>)
 80028c6:	f043 0307 	orr.w	r3, r3, #7
 80028ca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80028cc:	4b2e      	ldr	r3, [pc, #184]	; (8002988 <SystemInit+0xec>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a2d      	ldr	r2, [pc, #180]	; (8002988 <SystemInit+0xec>)
 80028d2:	f043 0301 	orr.w	r3, r3, #1
 80028d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80028d8:	4b2b      	ldr	r3, [pc, #172]	; (8002988 <SystemInit+0xec>)
 80028da:	2200      	movs	r2, #0
 80028dc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80028de:	4b2a      	ldr	r3, [pc, #168]	; (8002988 <SystemInit+0xec>)
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	4929      	ldr	r1, [pc, #164]	; (8002988 <SystemInit+0xec>)
 80028e4:	4b29      	ldr	r3, [pc, #164]	; (800298c <SystemInit+0xf0>)
 80028e6:	4013      	ands	r3, r2
 80028e8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80028ea:	4b26      	ldr	r3, [pc, #152]	; (8002984 <SystemInit+0xe8>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0308 	and.w	r3, r3, #8
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d007      	beq.n	8002906 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80028f6:	4b23      	ldr	r3, [pc, #140]	; (8002984 <SystemInit+0xe8>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f023 030f 	bic.w	r3, r3, #15
 80028fe:	4a21      	ldr	r2, [pc, #132]	; (8002984 <SystemInit+0xe8>)
 8002900:	f043 0307 	orr.w	r3, r3, #7
 8002904:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002906:	4b20      	ldr	r3, [pc, #128]	; (8002988 <SystemInit+0xec>)
 8002908:	2200      	movs	r2, #0
 800290a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800290c:	4b1e      	ldr	r3, [pc, #120]	; (8002988 <SystemInit+0xec>)
 800290e:	2200      	movs	r2, #0
 8002910:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002912:	4b1d      	ldr	r3, [pc, #116]	; (8002988 <SystemInit+0xec>)
 8002914:	2200      	movs	r2, #0
 8002916:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002918:	4b1b      	ldr	r3, [pc, #108]	; (8002988 <SystemInit+0xec>)
 800291a:	4a1d      	ldr	r2, [pc, #116]	; (8002990 <SystemInit+0xf4>)
 800291c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800291e:	4b1a      	ldr	r3, [pc, #104]	; (8002988 <SystemInit+0xec>)
 8002920:	4a1c      	ldr	r2, [pc, #112]	; (8002994 <SystemInit+0xf8>)
 8002922:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002924:	4b18      	ldr	r3, [pc, #96]	; (8002988 <SystemInit+0xec>)
 8002926:	4a1c      	ldr	r2, [pc, #112]	; (8002998 <SystemInit+0xfc>)
 8002928:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800292a:	4b17      	ldr	r3, [pc, #92]	; (8002988 <SystemInit+0xec>)
 800292c:	2200      	movs	r2, #0
 800292e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002930:	4b15      	ldr	r3, [pc, #84]	; (8002988 <SystemInit+0xec>)
 8002932:	4a19      	ldr	r2, [pc, #100]	; (8002998 <SystemInit+0xfc>)
 8002934:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002936:	4b14      	ldr	r3, [pc, #80]	; (8002988 <SystemInit+0xec>)
 8002938:	2200      	movs	r2, #0
 800293a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800293c:	4b12      	ldr	r3, [pc, #72]	; (8002988 <SystemInit+0xec>)
 800293e:	4a16      	ldr	r2, [pc, #88]	; (8002998 <SystemInit+0xfc>)
 8002940:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002942:	4b11      	ldr	r3, [pc, #68]	; (8002988 <SystemInit+0xec>)
 8002944:	2200      	movs	r2, #0
 8002946:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002948:	4b0f      	ldr	r3, [pc, #60]	; (8002988 <SystemInit+0xec>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a0e      	ldr	r2, [pc, #56]	; (8002988 <SystemInit+0xec>)
 800294e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002952:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002954:	4b0c      	ldr	r3, [pc, #48]	; (8002988 <SystemInit+0xec>)
 8002956:	2200      	movs	r2, #0
 8002958:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800295a:	4b10      	ldr	r3, [pc, #64]	; (800299c <SystemInit+0x100>)
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	4b10      	ldr	r3, [pc, #64]	; (80029a0 <SystemInit+0x104>)
 8002960:	4013      	ands	r3, r2
 8002962:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002966:	d202      	bcs.n	800296e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002968:	4b0e      	ldr	r3, [pc, #56]	; (80029a4 <SystemInit+0x108>)
 800296a:	2201      	movs	r2, #1
 800296c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800296e:	4b0e      	ldr	r3, [pc, #56]	; (80029a8 <SystemInit+0x10c>)
 8002970:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002974:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002976:	bf00      	nop
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr
 8002980:	e000ed00 	.word	0xe000ed00
 8002984:	52002000 	.word	0x52002000
 8002988:	58024400 	.word	0x58024400
 800298c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002990:	02020200 	.word	0x02020200
 8002994:	01ff0000 	.word	0x01ff0000
 8002998:	01010280 	.word	0x01010280
 800299c:	5c001000 	.word	0x5c001000
 80029a0:	ffff0000 	.word	0xffff0000
 80029a4:	51008108 	.word	0x51008108
 80029a8:	52004000 	.word	0x52004000

080029ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80029ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029e4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80029b0:	f7ff ff74 	bl	800289c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029b4:	480c      	ldr	r0, [pc, #48]	; (80029e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80029b6:	490d      	ldr	r1, [pc, #52]	; (80029ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80029b8:	4a0d      	ldr	r2, [pc, #52]	; (80029f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80029ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029bc:	e002      	b.n	80029c4 <LoopCopyDataInit>

080029be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029c2:	3304      	adds	r3, #4

080029c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029c8:	d3f9      	bcc.n	80029be <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029ca:	4a0a      	ldr	r2, [pc, #40]	; (80029f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80029cc:	4c0a      	ldr	r4, [pc, #40]	; (80029f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80029ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029d0:	e001      	b.n	80029d6 <LoopFillZerobss>

080029d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029d4:	3204      	adds	r2, #4

080029d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029d8:	d3fb      	bcc.n	80029d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80029da:	f009 fa81 	bl	800bee0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029de:	f7fd ff4f 	bl	8000880 <main>
  bx  lr
 80029e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80029e4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80029e8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80029ec:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80029f0:	0800c008 	.word	0x0800c008
  ldr r2, =_sbss
 80029f4:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 80029f8:	24000d00 	.word	0x24000d00

080029fc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029fc:	e7fe      	b.n	80029fc <ADC3_IRQHandler>
	...

08002a00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a06:	2003      	movs	r0, #3
 8002a08:	f001 fa26 	bl	8003e58 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002a0c:	f003 fdf2 	bl	80065f4 <HAL_RCC_GetSysClockFreq>
 8002a10:	4602      	mov	r2, r0
 8002a12:	4b15      	ldr	r3, [pc, #84]	; (8002a68 <HAL_Init+0x68>)
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	0a1b      	lsrs	r3, r3, #8
 8002a18:	f003 030f 	and.w	r3, r3, #15
 8002a1c:	4913      	ldr	r1, [pc, #76]	; (8002a6c <HAL_Init+0x6c>)
 8002a1e:	5ccb      	ldrb	r3, [r1, r3]
 8002a20:	f003 031f 	and.w	r3, r3, #31
 8002a24:	fa22 f303 	lsr.w	r3, r2, r3
 8002a28:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002a2a:	4b0f      	ldr	r3, [pc, #60]	; (8002a68 <HAL_Init+0x68>)
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	f003 030f 	and.w	r3, r3, #15
 8002a32:	4a0e      	ldr	r2, [pc, #56]	; (8002a6c <HAL_Init+0x6c>)
 8002a34:	5cd3      	ldrb	r3, [r2, r3]
 8002a36:	f003 031f 	and.w	r3, r3, #31
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a40:	4a0b      	ldr	r2, [pc, #44]	; (8002a70 <HAL_Init+0x70>)
 8002a42:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002a44:	4a0b      	ldr	r2, [pc, #44]	; (8002a74 <HAL_Init+0x74>)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a4a:	2000      	movs	r0, #0
 8002a4c:	f000 f814 	bl	8002a78 <HAL_InitTick>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e002      	b.n	8002a60 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002a5a:	f7fe ff7d 	bl	8001958 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3708      	adds	r7, #8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	58024400 	.word	0x58024400
 8002a6c:	0800bfc0 	.word	0x0800bfc0
 8002a70:	24000004 	.word	0x24000004
 8002a74:	24000000 	.word	0x24000000

08002a78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002a80:	4b15      	ldr	r3, [pc, #84]	; (8002ad8 <HAL_InitTick+0x60>)
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d101      	bne.n	8002a8c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e021      	b.n	8002ad0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002a8c:	4b13      	ldr	r3, [pc, #76]	; (8002adc <HAL_InitTick+0x64>)
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	4b11      	ldr	r3, [pc, #68]	; (8002ad8 <HAL_InitTick+0x60>)
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	4619      	mov	r1, r3
 8002a96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f001 f9fd 	bl	8003ea2 <HAL_SYSTICK_Config>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e00e      	b.n	8002ad0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2b0f      	cmp	r3, #15
 8002ab6:	d80a      	bhi.n	8002ace <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ab8:	2200      	movs	r2, #0
 8002aba:	6879      	ldr	r1, [r7, #4]
 8002abc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ac0:	f001 f9d5 	bl	8003e6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ac4:	4a06      	ldr	r2, [pc, #24]	; (8002ae0 <HAL_InitTick+0x68>)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002aca:	2300      	movs	r3, #0
 8002acc:	e000      	b.n	8002ad0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3708      	adds	r7, #8
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	2400000c 	.word	0x2400000c
 8002adc:	24000000 	.word	0x24000000
 8002ae0:	24000008 	.word	0x24000008

08002ae4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ae8:	4b06      	ldr	r3, [pc, #24]	; (8002b04 <HAL_IncTick+0x20>)
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	461a      	mov	r2, r3
 8002aee:	4b06      	ldr	r3, [pc, #24]	; (8002b08 <HAL_IncTick+0x24>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4413      	add	r3, r2
 8002af4:	4a04      	ldr	r2, [pc, #16]	; (8002b08 <HAL_IncTick+0x24>)
 8002af6:	6013      	str	r3, [r2, #0]
}
 8002af8:	bf00      	nop
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	2400000c 	.word	0x2400000c
 8002b08:	24000cfc 	.word	0x24000cfc

08002b0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  return uwTick;
 8002b10:	4b03      	ldr	r3, [pc, #12]	; (8002b20 <HAL_GetTick+0x14>)
 8002b12:	681b      	ldr	r3, [r3, #0]
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	24000cfc 	.word	0x24000cfc

08002b24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b2c:	f7ff ffee 	bl	8002b0c <HAL_GetTick>
 8002b30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b3c:	d005      	beq.n	8002b4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b3e:	4b0a      	ldr	r3, [pc, #40]	; (8002b68 <HAL_Delay+0x44>)
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	461a      	mov	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	4413      	add	r3, r2
 8002b48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b4a:	bf00      	nop
 8002b4c:	f7ff ffde 	bl	8002b0c <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d8f7      	bhi.n	8002b4c <HAL_Delay+0x28>
  {
  }
}
 8002b5c:	bf00      	nop
 8002b5e:	bf00      	nop
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	2400000c 	.word	0x2400000c

08002b6c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002b70:	4b03      	ldr	r3, [pc, #12]	; (8002b80 <HAL_GetREVID+0x14>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	0c1b      	lsrs	r3, r3, #16
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr
 8002b80:	5c001000 	.word	0x5c001000

08002b84 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002b8c:	4b06      	ldr	r3, [pc, #24]	; (8002ba8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002b94:	4904      	ldr	r1, [pc, #16]	; (8002ba8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	604b      	str	r3, [r1, #4]
}
 8002b9c:	bf00      	nop
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr
 8002ba8:	58000400 	.word	0x58000400

08002bac <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002bb6:	4b07      	ldr	r3, [pc, #28]	; (8002bd4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002bb8:	685a      	ldr	r2, [r3, #4]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	43db      	mvns	r3, r3
 8002bbe:	401a      	ands	r2, r3
 8002bc0:	4904      	ldr	r1, [pc, #16]	; (8002bd4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	604b      	str	r3, [r1, #4]
}
 8002bc8:	bf00      	nop
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr
 8002bd4:	58000400 	.word	0x58000400

08002bd8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	431a      	orrs	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	609a      	str	r2, [r3, #8]
}
 8002bf2:	bf00      	nop
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr

08002bfe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b083      	sub	sp, #12
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
 8002c06:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	431a      	orrs	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	609a      	str	r2, [r3, #8]
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b087      	sub	sp, #28
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	60b9      	str	r1, [r7, #8]
 8002c4a:	607a      	str	r2, [r7, #4]
 8002c4c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	3360      	adds	r3, #96	; 0x60
 8002c52:	461a      	mov	r2, r3
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	4413      	add	r3, r2
 8002c5a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	430b      	orrs	r3, r1
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002c74:	bf00      	nop
 8002c76:	371c      	adds	r7, #28
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b085      	sub	sp, #20
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	691b      	ldr	r3, [r3, #16]
 8002c90:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	f003 031f 	and.w	r3, r3, #31
 8002c9a:	6879      	ldr	r1, [r7, #4]
 8002c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca0:	431a      	orrs	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	611a      	str	r2, [r3, #16]
}
 8002ca6:	bf00      	nop
 8002ca8:	3714      	adds	r7, #20
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr

08002cb2 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	b087      	sub	sp, #28
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	60f8      	str	r0, [r7, #12]
 8002cba:	60b9      	str	r1, [r7, #8]
 8002cbc:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	3360      	adds	r3, #96	; 0x60
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	4413      	add	r3, r2
 8002cca:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	431a      	orrs	r2, r3
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	601a      	str	r2, [r3, #0]
  }
}
 8002cdc:	bf00      	nop
 8002cde:	371c      	adds	r7, #28
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b087      	sub	sp, #28
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	3330      	adds	r3, #48	; 0x30
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	0a1b      	lsrs	r3, r3, #8
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	f003 030c 	and.w	r3, r3, #12
 8002d04:	4413      	add	r3, r2
 8002d06:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	f003 031f 	and.w	r3, r3, #31
 8002d12:	211f      	movs	r1, #31
 8002d14:	fa01 f303 	lsl.w	r3, r1, r3
 8002d18:	43db      	mvns	r3, r3
 8002d1a:	401a      	ands	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	0e9b      	lsrs	r3, r3, #26
 8002d20:	f003 011f 	and.w	r1, r3, #31
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	f003 031f 	and.w	r3, r3, #31
 8002d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002d34:	bf00      	nop
 8002d36:	371c      	adds	r7, #28
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b087      	sub	sp, #28
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	3314      	adds	r3, #20
 8002d50:	461a      	mov	r2, r3
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	0e5b      	lsrs	r3, r3, #25
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	f003 0304 	and.w	r3, r3, #4
 8002d5c:	4413      	add	r3, r2
 8002d5e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	0d1b      	lsrs	r3, r3, #20
 8002d68:	f003 031f 	and.w	r3, r3, #31
 8002d6c:	2107      	movs	r1, #7
 8002d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d72:	43db      	mvns	r3, r3
 8002d74:	401a      	ands	r2, r3
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	0d1b      	lsrs	r3, r3, #20
 8002d7a:	f003 031f 	and.w	r3, r3, #31
 8002d7e:	6879      	ldr	r1, [r7, #4]
 8002d80:	fa01 f303 	lsl.w	r3, r1, r3
 8002d84:	431a      	orrs	r2, r3
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002d8a:	bf00      	nop
 8002d8c:	371c      	adds	r7, #28
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
	...

08002d98 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b085      	sub	sp, #20
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002db0:	43db      	mvns	r3, r3
 8002db2:	401a      	ands	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f003 0318 	and.w	r3, r3, #24
 8002dba:	4908      	ldr	r1, [pc, #32]	; (8002ddc <LL_ADC_SetChannelSingleDiff+0x44>)
 8002dbc:	40d9      	lsrs	r1, r3
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	400b      	ands	r3, r1
 8002dc2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002dc6:	431a      	orrs	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002dce:	bf00      	nop
 8002dd0:	3714      	adds	r7, #20
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	000fffff 	.word	0x000fffff

08002de0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689a      	ldr	r2, [r3, #8]
 8002dec:	4b04      	ldr	r3, [pc, #16]	; (8002e00 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002dee:	4013      	ands	r3, r2
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	6093      	str	r3, [r2, #8]
}
 8002df4:	bf00      	nop
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr
 8002e00:	5fffffc0 	.word	0x5fffffc0

08002e04 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e18:	d101      	bne.n	8002e1e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e000      	b.n	8002e20 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689a      	ldr	r2, [r3, #8]
 8002e38:	4b05      	ldr	r3, [pc, #20]	; (8002e50 <LL_ADC_EnableInternalRegulator+0x24>)
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002e44:	bf00      	nop
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr
 8002e50:	6fffffc0 	.word	0x6fffffc0

08002e54 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e68:	d101      	bne.n	8002e6e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e000      	b.n	8002e70 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f003 0301 	and.w	r3, r3, #1
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d101      	bne.n	8002e94 <LL_ADC_IsEnabled+0x18>
 8002e90:	2301      	movs	r3, #1
 8002e92:	e000      	b.n	8002e96 <LL_ADC_IsEnabled+0x1a>
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	370c      	adds	r7, #12
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr

08002ea2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	b083      	sub	sp, #12
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f003 0304 	and.w	r3, r3, #4
 8002eb2:	2b04      	cmp	r3, #4
 8002eb4:	d101      	bne.n	8002eba <LL_ADC_REG_IsConversionOngoing+0x18>
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e000      	b.n	8002ebc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f003 0308 	and.w	r3, r3, #8
 8002ed8:	2b08      	cmp	r3, #8
 8002eda:	d101      	bne.n	8002ee0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002edc:	2301      	movs	r3, #1
 8002ede:	e000      	b.n	8002ee2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
	...

08002ef0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ef0:	b590      	push	{r4, r7, lr}
 8002ef2:	b089      	sub	sp, #36	; 0x24
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002efc:	2300      	movs	r3, #0
 8002efe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d101      	bne.n	8002f0a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e18f      	b.n	800322a <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d109      	bne.n	8002f2c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f7fe fd37 	bl	800198c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7ff ff67 	bl	8002e04 <LL_ADC_IsDeepPowerDownEnabled>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d004      	beq.n	8002f46 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7ff ff4d 	bl	8002de0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7ff ff82 	bl	8002e54 <LL_ADC_IsInternalRegulatorEnabled>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d114      	bne.n	8002f80 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7ff ff66 	bl	8002e2c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f60:	4b87      	ldr	r3, [pc, #540]	; (8003180 <HAL_ADC_Init+0x290>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	099b      	lsrs	r3, r3, #6
 8002f66:	4a87      	ldr	r2, [pc, #540]	; (8003184 <HAL_ADC_Init+0x294>)
 8002f68:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6c:	099b      	lsrs	r3, r3, #6
 8002f6e:	3301      	adds	r3, #1
 8002f70:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002f72:	e002      	b.n	8002f7a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	3b01      	subs	r3, #1
 8002f78:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d1f9      	bne.n	8002f74 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7ff ff65 	bl	8002e54 <LL_ADC_IsInternalRegulatorEnabled>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d10d      	bne.n	8002fac <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f94:	f043 0210 	orr.w	r2, r3, #16
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa0:	f043 0201 	orr.w	r2, r3, #1
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f7ff ff76 	bl	8002ea2 <LL_ADC_REG_IsConversionOngoing>
 8002fb6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fbc:	f003 0310 	and.w	r3, r3, #16
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f040 8129 	bne.w	8003218 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	f040 8125 	bne.w	8003218 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fd2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002fd6:	f043 0202 	orr.w	r2, r3, #2
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7ff ff4a 	bl	8002e7c <LL_ADC_IsEnabled>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d136      	bne.n	800305c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a65      	ldr	r2, [pc, #404]	; (8003188 <HAL_ADC_Init+0x298>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d004      	beq.n	8003002 <HAL_ADC_Init+0x112>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a63      	ldr	r2, [pc, #396]	; (800318c <HAL_ADC_Init+0x29c>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d10e      	bne.n	8003020 <HAL_ADC_Init+0x130>
 8003002:	4861      	ldr	r0, [pc, #388]	; (8003188 <HAL_ADC_Init+0x298>)
 8003004:	f7ff ff3a 	bl	8002e7c <LL_ADC_IsEnabled>
 8003008:	4604      	mov	r4, r0
 800300a:	4860      	ldr	r0, [pc, #384]	; (800318c <HAL_ADC_Init+0x29c>)
 800300c:	f7ff ff36 	bl	8002e7c <LL_ADC_IsEnabled>
 8003010:	4603      	mov	r3, r0
 8003012:	4323      	orrs	r3, r4
 8003014:	2b00      	cmp	r3, #0
 8003016:	bf0c      	ite	eq
 8003018:	2301      	moveq	r3, #1
 800301a:	2300      	movne	r3, #0
 800301c:	b2db      	uxtb	r3, r3
 800301e:	e008      	b.n	8003032 <HAL_ADC_Init+0x142>
 8003020:	485b      	ldr	r0, [pc, #364]	; (8003190 <HAL_ADC_Init+0x2a0>)
 8003022:	f7ff ff2b 	bl	8002e7c <LL_ADC_IsEnabled>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	bf0c      	ite	eq
 800302c:	2301      	moveq	r3, #1
 800302e:	2300      	movne	r3, #0
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b00      	cmp	r3, #0
 8003034:	d012      	beq.n	800305c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a53      	ldr	r2, [pc, #332]	; (8003188 <HAL_ADC_Init+0x298>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d004      	beq.n	800304a <HAL_ADC_Init+0x15a>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a51      	ldr	r2, [pc, #324]	; (800318c <HAL_ADC_Init+0x29c>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d101      	bne.n	800304e <HAL_ADC_Init+0x15e>
 800304a:	4a52      	ldr	r2, [pc, #328]	; (8003194 <HAL_ADC_Init+0x2a4>)
 800304c:	e000      	b.n	8003050 <HAL_ADC_Init+0x160>
 800304e:	4a52      	ldr	r2, [pc, #328]	; (8003198 <HAL_ADC_Init+0x2a8>)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	4619      	mov	r1, r3
 8003056:	4610      	mov	r0, r2
 8003058:	f7ff fdbe 	bl	8002bd8 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800305c:	f7ff fd86 	bl	8002b6c <HAL_GetREVID>
 8003060:	4603      	mov	r3, r0
 8003062:	f241 0203 	movw	r2, #4099	; 0x1003
 8003066:	4293      	cmp	r3, r2
 8003068:	d914      	bls.n	8003094 <HAL_ADC_Init+0x1a4>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	2b10      	cmp	r3, #16
 8003070:	d110      	bne.n	8003094 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	7d5b      	ldrb	r3, [r3, #21]
 8003076:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800307c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003082:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	7f1b      	ldrb	r3, [r3, #28]
 8003088:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800308a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800308c:	f043 030c 	orr.w	r3, r3, #12
 8003090:	61bb      	str	r3, [r7, #24]
 8003092:	e00d      	b.n	80030b0 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	7d5b      	ldrb	r3, [r3, #21]
 8003098:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800309e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80030a4:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	7f1b      	ldrb	r3, [r3, #28]
 80030aa:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030ac:	4313      	orrs	r3, r2
 80030ae:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	7f1b      	ldrb	r3, [r3, #28]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d106      	bne.n	80030c6 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a1b      	ldr	r3, [r3, #32]
 80030bc:	3b01      	subs	r3, #1
 80030be:	045b      	lsls	r3, r3, #17
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d009      	beq.n	80030e2 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d2:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030da:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	4313      	orrs	r3, r2
 80030e0:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68da      	ldr	r2, [r3, #12]
 80030e8:	4b2c      	ldr	r3, [pc, #176]	; (800319c <HAL_ADC_Init+0x2ac>)
 80030ea:	4013      	ands	r3, r2
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	6812      	ldr	r2, [r2, #0]
 80030f0:	69b9      	ldr	r1, [r7, #24]
 80030f2:	430b      	orrs	r3, r1
 80030f4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7ff fed1 	bl	8002ea2 <LL_ADC_REG_IsConversionOngoing>
 8003100:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4618      	mov	r0, r3
 8003108:	f7ff fede 	bl	8002ec8 <LL_ADC_INJ_IsConversionOngoing>
 800310c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d15f      	bne.n	80031d4 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d15c      	bne.n	80031d4 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	7d1b      	ldrb	r3, [r3, #20]
 800311e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8003124:	4313      	orrs	r3, r2
 8003126:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68da      	ldr	r2, [r3, #12]
 800312e:	4b1c      	ldr	r3, [pc, #112]	; (80031a0 <HAL_ADC_Init+0x2b0>)
 8003130:	4013      	ands	r3, r2
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	6812      	ldr	r2, [r2, #0]
 8003136:	69b9      	ldr	r1, [r7, #24]
 8003138:	430b      	orrs	r3, r1
 800313a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003142:	2b01      	cmp	r3, #1
 8003144:	d130      	bne.n	80031a8 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	691a      	ldr	r2, [r3, #16]
 8003152:	4b14      	ldr	r3, [pc, #80]	; (80031a4 <HAL_ADC_Init+0x2b4>)
 8003154:	4013      	ands	r3, r2
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800315a:	3a01      	subs	r2, #1
 800315c:	0411      	lsls	r1, r2, #16
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003162:	4311      	orrs	r1, r2
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003168:	4311      	orrs	r1, r2
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800316e:	430a      	orrs	r2, r1
 8003170:	431a      	orrs	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f042 0201 	orr.w	r2, r2, #1
 800317a:	611a      	str	r2, [r3, #16]
 800317c:	e01c      	b.n	80031b8 <HAL_ADC_Init+0x2c8>
 800317e:	bf00      	nop
 8003180:	24000000 	.word	0x24000000
 8003184:	053e2d63 	.word	0x053e2d63
 8003188:	40022000 	.word	0x40022000
 800318c:	40022100 	.word	0x40022100
 8003190:	58026000 	.word	0x58026000
 8003194:	40022300 	.word	0x40022300
 8003198:	58026300 	.word	0x58026300
 800319c:	fff0c003 	.word	0xfff0c003
 80031a0:	ffffbffc 	.word	0xffffbffc
 80031a4:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	691a      	ldr	r2, [r3, #16]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f022 0201 	bic.w	r2, r2, #1
 80031b6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	430a      	orrs	r2, r1
 80031cc:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 fb80 	bl	80038d4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d10c      	bne.n	80031f6 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e2:	f023 010f 	bic.w	r1, r3, #15
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	1e5a      	subs	r2, r3, #1
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	430a      	orrs	r2, r1
 80031f2:	631a      	str	r2, [r3, #48]	; 0x30
 80031f4:	e007      	b.n	8003206 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f022 020f 	bic.w	r2, r2, #15
 8003204:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800320a:	f023 0303 	bic.w	r3, r3, #3
 800320e:	f043 0201 	orr.w	r2, r3, #1
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	655a      	str	r2, [r3, #84]	; 0x54
 8003216:	e007      	b.n	8003228 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800321c:	f043 0210 	orr.w	r2, r3, #16
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003228:	7ffb      	ldrb	r3, [r7, #31]
}
 800322a:	4618      	mov	r0, r3
 800322c:	3724      	adds	r7, #36	; 0x24
 800322e:	46bd      	mov	sp, r7
 8003230:	bd90      	pop	{r4, r7, pc}
 8003232:	bf00      	nop

08003234 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003234:	b590      	push	{r4, r7, lr}
 8003236:	b0a1      	sub	sp, #132	; 0x84
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800323e:	2300      	movs	r3, #0
 8003240:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003244:	2300      	movs	r3, #0
 8003246:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	4a9d      	ldr	r2, [pc, #628]	; (80034c4 <HAL_ADC_ConfigChannel+0x290>)
 800324e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003256:	2b01      	cmp	r3, #1
 8003258:	d101      	bne.n	800325e <HAL_ADC_ConfigChannel+0x2a>
 800325a:	2302      	movs	r3, #2
 800325c:	e321      	b.n	80038a2 <HAL_ADC_ConfigChannel+0x66e>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2201      	movs	r2, #1
 8003262:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4618      	mov	r0, r3
 800326c:	f7ff fe19 	bl	8002ea2 <LL_ADC_REG_IsConversionOngoing>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	f040 8306 	bne.w	8003884 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003280:	2b00      	cmp	r3, #0
 8003282:	d108      	bne.n	8003296 <HAL_ADC_ConfigChannel+0x62>
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	0e9b      	lsrs	r3, r3, #26
 800328a:	f003 031f 	and.w	r3, r3, #31
 800328e:	2201      	movs	r2, #1
 8003290:	fa02 f303 	lsl.w	r3, r2, r3
 8003294:	e016      	b.n	80032c4 <HAL_ADC_ConfigChannel+0x90>
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800329c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800329e:	fa93 f3a3 	rbit	r3, r3
 80032a2:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80032a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032a6:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80032a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d101      	bne.n	80032b2 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80032ae:	2320      	movs	r3, #32
 80032b0:	e003      	b.n	80032ba <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80032b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032b4:	fab3 f383 	clz	r3, r3
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	f003 031f 	and.w	r3, r3, #31
 80032be:	2201      	movs	r2, #1
 80032c0:	fa02 f303 	lsl.w	r3, r2, r3
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	6812      	ldr	r2, [r2, #0]
 80032c8:	69d1      	ldr	r1, [r2, #28]
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	6812      	ldr	r2, [r2, #0]
 80032ce:	430b      	orrs	r3, r1
 80032d0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6818      	ldr	r0, [r3, #0]
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	6859      	ldr	r1, [r3, #4]
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	461a      	mov	r2, r3
 80032e0:	f7ff fd02 	bl	8002ce8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7ff fdda 	bl	8002ea2 <LL_ADC_REG_IsConversionOngoing>
 80032ee:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7ff fde7 	bl	8002ec8 <LL_ADC_INJ_IsConversionOngoing>
 80032fa:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80032fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032fe:	2b00      	cmp	r3, #0
 8003300:	f040 80b3 	bne.w	800346a <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003304:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003306:	2b00      	cmp	r3, #0
 8003308:	f040 80af 	bne.w	800346a <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6818      	ldr	r0, [r3, #0]
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	6819      	ldr	r1, [r3, #0]
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	461a      	mov	r2, r3
 800331a:	f7ff fd11 	bl	8002d40 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800331e:	4b6a      	ldr	r3, [pc, #424]	; (80034c8 <HAL_ADC_ConfigChannel+0x294>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003326:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800332a:	d10b      	bne.n	8003344 <HAL_ADC_ConfigChannel+0x110>
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	695a      	ldr	r2, [r3, #20]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	089b      	lsrs	r3, r3, #2
 8003338:	f003 0307 	and.w	r3, r3, #7
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	fa02 f303 	lsl.w	r3, r2, r3
 8003342:	e01d      	b.n	8003380 <HAL_ADC_ConfigChannel+0x14c>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	f003 0310 	and.w	r3, r3, #16
 800334e:	2b00      	cmp	r3, #0
 8003350:	d10b      	bne.n	800336a <HAL_ADC_ConfigChannel+0x136>
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	695a      	ldr	r2, [r3, #20]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	089b      	lsrs	r3, r3, #2
 800335e:	f003 0307 	and.w	r3, r3, #7
 8003362:	005b      	lsls	r3, r3, #1
 8003364:	fa02 f303 	lsl.w	r3, r2, r3
 8003368:	e00a      	b.n	8003380 <HAL_ADC_ConfigChannel+0x14c>
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	695a      	ldr	r2, [r3, #20]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	089b      	lsrs	r3, r3, #2
 8003376:	f003 0304 	and.w	r3, r3, #4
 800337a:	005b      	lsls	r3, r3, #1
 800337c:	fa02 f303 	lsl.w	r3, r2, r3
 8003380:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	2b04      	cmp	r3, #4
 8003388:	d027      	beq.n	80033da <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6818      	ldr	r0, [r3, #0]
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	6919      	ldr	r1, [r3, #16]
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003398:	f7ff fc52 	bl	8002c40 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6818      	ldr	r0, [r3, #0]
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	6919      	ldr	r1, [r3, #16]
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	7e5b      	ldrb	r3, [r3, #25]
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d102      	bne.n	80033b2 <HAL_ADC_ConfigChannel+0x17e>
 80033ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80033b0:	e000      	b.n	80033b4 <HAL_ADC_ConfigChannel+0x180>
 80033b2:	2300      	movs	r3, #0
 80033b4:	461a      	mov	r2, r3
 80033b6:	f7ff fc7c 	bl	8002cb2 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6818      	ldr	r0, [r3, #0]
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	6919      	ldr	r1, [r3, #16]
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	7e1b      	ldrb	r3, [r3, #24]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d102      	bne.n	80033d0 <HAL_ADC_ConfigChannel+0x19c>
 80033ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80033ce:	e000      	b.n	80033d2 <HAL_ADC_ConfigChannel+0x19e>
 80033d0:	2300      	movs	r3, #0
 80033d2:	461a      	mov	r2, r3
 80033d4:	f7ff fc54 	bl	8002c80 <LL_ADC_SetDataRightShift>
 80033d8:	e047      	b.n	800346a <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033e0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	069b      	lsls	r3, r3, #26
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d107      	bne.n	80033fe <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80033fc:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003404:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	069b      	lsls	r3, r3, #26
 800340e:	429a      	cmp	r2, r3
 8003410:	d107      	bne.n	8003422 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003420:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003428:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	069b      	lsls	r3, r3, #26
 8003432:	429a      	cmp	r2, r3
 8003434:	d107      	bne.n	8003446 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003444:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800344c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	069b      	lsls	r3, r3, #26
 8003456:	429a      	cmp	r2, r3
 8003458:	d107      	bne.n	800346a <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003468:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4618      	mov	r0, r3
 8003470:	f7ff fd04 	bl	8002e7c <LL_ADC_IsEnabled>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	f040 820d 	bne.w	8003896 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6818      	ldr	r0, [r3, #0]
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	6819      	ldr	r1, [r3, #0]
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	461a      	mov	r2, r3
 800348a:	f7ff fc85 	bl	8002d98 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	4a0c      	ldr	r2, [pc, #48]	; (80034c4 <HAL_ADC_ConfigChannel+0x290>)
 8003494:	4293      	cmp	r3, r2
 8003496:	f040 8133 	bne.w	8003700 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d110      	bne.n	80034cc <HAL_ADC_ConfigChannel+0x298>
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	0e9b      	lsrs	r3, r3, #26
 80034b0:	3301      	adds	r3, #1
 80034b2:	f003 031f 	and.w	r3, r3, #31
 80034b6:	2b09      	cmp	r3, #9
 80034b8:	bf94      	ite	ls
 80034ba:	2301      	movls	r3, #1
 80034bc:	2300      	movhi	r3, #0
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	e01e      	b.n	8003500 <HAL_ADC_ConfigChannel+0x2cc>
 80034c2:	bf00      	nop
 80034c4:	47ff0000 	.word	0x47ff0000
 80034c8:	5c001000 	.word	0x5c001000
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034d4:	fa93 f3a3 	rbit	r3, r3
 80034d8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80034da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80034de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d101      	bne.n	80034e8 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 80034e4:	2320      	movs	r3, #32
 80034e6:	e003      	b.n	80034f0 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80034e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034ea:	fab3 f383 	clz	r3, r3
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	3301      	adds	r3, #1
 80034f2:	f003 031f 	and.w	r3, r3, #31
 80034f6:	2b09      	cmp	r3, #9
 80034f8:	bf94      	ite	ls
 80034fa:	2301      	movls	r3, #1
 80034fc:	2300      	movhi	r3, #0
 80034fe:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003500:	2b00      	cmp	r3, #0
 8003502:	d079      	beq.n	80035f8 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800350c:	2b00      	cmp	r3, #0
 800350e:	d107      	bne.n	8003520 <HAL_ADC_ConfigChannel+0x2ec>
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	0e9b      	lsrs	r3, r3, #26
 8003516:	3301      	adds	r3, #1
 8003518:	069b      	lsls	r3, r3, #26
 800351a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800351e:	e015      	b.n	800354c <HAL_ADC_ConfigChannel+0x318>
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003526:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003528:	fa93 f3a3 	rbit	r3, r3
 800352c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800352e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003530:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003532:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003534:	2b00      	cmp	r3, #0
 8003536:	d101      	bne.n	800353c <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8003538:	2320      	movs	r3, #32
 800353a:	e003      	b.n	8003544 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800353c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800353e:	fab3 f383 	clz	r3, r3
 8003542:	b2db      	uxtb	r3, r3
 8003544:	3301      	adds	r3, #1
 8003546:	069b      	lsls	r3, r3, #26
 8003548:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003554:	2b00      	cmp	r3, #0
 8003556:	d109      	bne.n	800356c <HAL_ADC_ConfigChannel+0x338>
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	0e9b      	lsrs	r3, r3, #26
 800355e:	3301      	adds	r3, #1
 8003560:	f003 031f 	and.w	r3, r3, #31
 8003564:	2101      	movs	r1, #1
 8003566:	fa01 f303 	lsl.w	r3, r1, r3
 800356a:	e017      	b.n	800359c <HAL_ADC_ConfigChannel+0x368>
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003572:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003574:	fa93 f3a3 	rbit	r3, r3
 8003578:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800357a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800357c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800357e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003580:	2b00      	cmp	r3, #0
 8003582:	d101      	bne.n	8003588 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8003584:	2320      	movs	r3, #32
 8003586:	e003      	b.n	8003590 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8003588:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800358a:	fab3 f383 	clz	r3, r3
 800358e:	b2db      	uxtb	r3, r3
 8003590:	3301      	adds	r3, #1
 8003592:	f003 031f 	and.w	r3, r3, #31
 8003596:	2101      	movs	r1, #1
 8003598:	fa01 f303 	lsl.w	r3, r1, r3
 800359c:	ea42 0103 	orr.w	r1, r2, r3
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d10a      	bne.n	80035c2 <HAL_ADC_ConfigChannel+0x38e>
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	0e9b      	lsrs	r3, r3, #26
 80035b2:	3301      	adds	r3, #1
 80035b4:	f003 021f 	and.w	r2, r3, #31
 80035b8:	4613      	mov	r3, r2
 80035ba:	005b      	lsls	r3, r3, #1
 80035bc:	4413      	add	r3, r2
 80035be:	051b      	lsls	r3, r3, #20
 80035c0:	e018      	b.n	80035f4 <HAL_ADC_ConfigChannel+0x3c0>
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035ca:	fa93 f3a3 	rbit	r3, r3
 80035ce:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80035d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80035d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d101      	bne.n	80035de <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 80035da:	2320      	movs	r3, #32
 80035dc:	e003      	b.n	80035e6 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 80035de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035e0:	fab3 f383 	clz	r3, r3
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	3301      	adds	r3, #1
 80035e8:	f003 021f 	and.w	r2, r3, #31
 80035ec:	4613      	mov	r3, r2
 80035ee:	005b      	lsls	r3, r3, #1
 80035f0:	4413      	add	r3, r2
 80035f2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035f4:	430b      	orrs	r3, r1
 80035f6:	e07e      	b.n	80036f6 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003600:	2b00      	cmp	r3, #0
 8003602:	d107      	bne.n	8003614 <HAL_ADC_ConfigChannel+0x3e0>
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	0e9b      	lsrs	r3, r3, #26
 800360a:	3301      	adds	r3, #1
 800360c:	069b      	lsls	r3, r3, #26
 800360e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003612:	e015      	b.n	8003640 <HAL_ADC_ConfigChannel+0x40c>
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800361a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800361c:	fa93 f3a3 	rbit	r3, r3
 8003620:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003624:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003628:	2b00      	cmp	r3, #0
 800362a:	d101      	bne.n	8003630 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800362c:	2320      	movs	r3, #32
 800362e:	e003      	b.n	8003638 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003632:	fab3 f383 	clz	r3, r3
 8003636:	b2db      	uxtb	r3, r3
 8003638:	3301      	adds	r3, #1
 800363a:	069b      	lsls	r3, r3, #26
 800363c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003648:	2b00      	cmp	r3, #0
 800364a:	d109      	bne.n	8003660 <HAL_ADC_ConfigChannel+0x42c>
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	0e9b      	lsrs	r3, r3, #26
 8003652:	3301      	adds	r3, #1
 8003654:	f003 031f 	and.w	r3, r3, #31
 8003658:	2101      	movs	r1, #1
 800365a:	fa01 f303 	lsl.w	r3, r1, r3
 800365e:	e017      	b.n	8003690 <HAL_ADC_ConfigChannel+0x45c>
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	fa93 f3a3 	rbit	r3, r3
 800366c:	61bb      	str	r3, [r7, #24]
  return result;
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003672:	6a3b      	ldr	r3, [r7, #32]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d101      	bne.n	800367c <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8003678:	2320      	movs	r3, #32
 800367a:	e003      	b.n	8003684 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 800367c:	6a3b      	ldr	r3, [r7, #32]
 800367e:	fab3 f383 	clz	r3, r3
 8003682:	b2db      	uxtb	r3, r3
 8003684:	3301      	adds	r3, #1
 8003686:	f003 031f 	and.w	r3, r3, #31
 800368a:	2101      	movs	r1, #1
 800368c:	fa01 f303 	lsl.w	r3, r1, r3
 8003690:	ea42 0103 	orr.w	r1, r2, r3
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800369c:	2b00      	cmp	r3, #0
 800369e:	d10d      	bne.n	80036bc <HAL_ADC_ConfigChannel+0x488>
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	0e9b      	lsrs	r3, r3, #26
 80036a6:	3301      	adds	r3, #1
 80036a8:	f003 021f 	and.w	r2, r3, #31
 80036ac:	4613      	mov	r3, r2
 80036ae:	005b      	lsls	r3, r3, #1
 80036b0:	4413      	add	r3, r2
 80036b2:	3b1e      	subs	r3, #30
 80036b4:	051b      	lsls	r3, r3, #20
 80036b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80036ba:	e01b      	b.n	80036f4 <HAL_ADC_ConfigChannel+0x4c0>
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	fa93 f3a3 	rbit	r3, r3
 80036c8:	60fb      	str	r3, [r7, #12]
  return result;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d101      	bne.n	80036d8 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 80036d4:	2320      	movs	r3, #32
 80036d6:	e003      	b.n	80036e0 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	fab3 f383 	clz	r3, r3
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	3301      	adds	r3, #1
 80036e2:	f003 021f 	and.w	r2, r3, #31
 80036e6:	4613      	mov	r3, r2
 80036e8:	005b      	lsls	r3, r3, #1
 80036ea:	4413      	add	r3, r2
 80036ec:	3b1e      	subs	r3, #30
 80036ee:	051b      	lsls	r3, r3, #20
 80036f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036f4:	430b      	orrs	r3, r1
 80036f6:	683a      	ldr	r2, [r7, #0]
 80036f8:	6892      	ldr	r2, [r2, #8]
 80036fa:	4619      	mov	r1, r3
 80036fc:	f7ff fb20 	bl	8002d40 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2b00      	cmp	r3, #0
 8003706:	f280 80c6 	bge.w	8003896 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a67      	ldr	r2, [pc, #412]	; (80038ac <HAL_ADC_ConfigChannel+0x678>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d004      	beq.n	800371e <HAL_ADC_ConfigChannel+0x4ea>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a65      	ldr	r2, [pc, #404]	; (80038b0 <HAL_ADC_ConfigChannel+0x67c>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d101      	bne.n	8003722 <HAL_ADC_ConfigChannel+0x4ee>
 800371e:	4b65      	ldr	r3, [pc, #404]	; (80038b4 <HAL_ADC_ConfigChannel+0x680>)
 8003720:	e000      	b.n	8003724 <HAL_ADC_ConfigChannel+0x4f0>
 8003722:	4b65      	ldr	r3, [pc, #404]	; (80038b8 <HAL_ADC_ConfigChannel+0x684>)
 8003724:	4618      	mov	r0, r3
 8003726:	f7ff fa7d 	bl	8002c24 <LL_ADC_GetCommonPathInternalCh>
 800372a:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a5e      	ldr	r2, [pc, #376]	; (80038ac <HAL_ADC_ConfigChannel+0x678>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d004      	beq.n	8003740 <HAL_ADC_ConfigChannel+0x50c>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a5d      	ldr	r2, [pc, #372]	; (80038b0 <HAL_ADC_ConfigChannel+0x67c>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d10e      	bne.n	800375e <HAL_ADC_ConfigChannel+0x52a>
 8003740:	485a      	ldr	r0, [pc, #360]	; (80038ac <HAL_ADC_ConfigChannel+0x678>)
 8003742:	f7ff fb9b 	bl	8002e7c <LL_ADC_IsEnabled>
 8003746:	4604      	mov	r4, r0
 8003748:	4859      	ldr	r0, [pc, #356]	; (80038b0 <HAL_ADC_ConfigChannel+0x67c>)
 800374a:	f7ff fb97 	bl	8002e7c <LL_ADC_IsEnabled>
 800374e:	4603      	mov	r3, r0
 8003750:	4323      	orrs	r3, r4
 8003752:	2b00      	cmp	r3, #0
 8003754:	bf0c      	ite	eq
 8003756:	2301      	moveq	r3, #1
 8003758:	2300      	movne	r3, #0
 800375a:	b2db      	uxtb	r3, r3
 800375c:	e008      	b.n	8003770 <HAL_ADC_ConfigChannel+0x53c>
 800375e:	4857      	ldr	r0, [pc, #348]	; (80038bc <HAL_ADC_ConfigChannel+0x688>)
 8003760:	f7ff fb8c 	bl	8002e7c <LL_ADC_IsEnabled>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	bf0c      	ite	eq
 800376a:	2301      	moveq	r3, #1
 800376c:	2300      	movne	r3, #0
 800376e:	b2db      	uxtb	r3, r3
 8003770:	2b00      	cmp	r3, #0
 8003772:	d07d      	beq.n	8003870 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a51      	ldr	r2, [pc, #324]	; (80038c0 <HAL_ADC_ConfigChannel+0x68c>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d130      	bne.n	80037e0 <HAL_ADC_ConfigChannel+0x5ac>
 800377e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003780:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d12b      	bne.n	80037e0 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a4b      	ldr	r2, [pc, #300]	; (80038bc <HAL_ADC_ConfigChannel+0x688>)
 800378e:	4293      	cmp	r3, r2
 8003790:	f040 8081 	bne.w	8003896 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a44      	ldr	r2, [pc, #272]	; (80038ac <HAL_ADC_ConfigChannel+0x678>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d004      	beq.n	80037a8 <HAL_ADC_ConfigChannel+0x574>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a43      	ldr	r2, [pc, #268]	; (80038b0 <HAL_ADC_ConfigChannel+0x67c>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d101      	bne.n	80037ac <HAL_ADC_ConfigChannel+0x578>
 80037a8:	4a42      	ldr	r2, [pc, #264]	; (80038b4 <HAL_ADC_ConfigChannel+0x680>)
 80037aa:	e000      	b.n	80037ae <HAL_ADC_ConfigChannel+0x57a>
 80037ac:	4a42      	ldr	r2, [pc, #264]	; (80038b8 <HAL_ADC_ConfigChannel+0x684>)
 80037ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80037b4:	4619      	mov	r1, r3
 80037b6:	4610      	mov	r0, r2
 80037b8:	f7ff fa21 	bl	8002bfe <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80037bc:	4b41      	ldr	r3, [pc, #260]	; (80038c4 <HAL_ADC_ConfigChannel+0x690>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	099b      	lsrs	r3, r3, #6
 80037c2:	4a41      	ldr	r2, [pc, #260]	; (80038c8 <HAL_ADC_ConfigChannel+0x694>)
 80037c4:	fba2 2303 	umull	r2, r3, r2, r3
 80037c8:	099b      	lsrs	r3, r3, #6
 80037ca:	3301      	adds	r3, #1
 80037cc:	005b      	lsls	r3, r3, #1
 80037ce:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80037d0:	e002      	b.n	80037d8 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	3b01      	subs	r3, #1
 80037d6:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1f9      	bne.n	80037d2 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80037de:	e05a      	b.n	8003896 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a39      	ldr	r2, [pc, #228]	; (80038cc <HAL_ADC_ConfigChannel+0x698>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d11e      	bne.n	8003828 <HAL_ADC_ConfigChannel+0x5f4>
 80037ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d119      	bne.n	8003828 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a30      	ldr	r2, [pc, #192]	; (80038bc <HAL_ADC_ConfigChannel+0x688>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d14b      	bne.n	8003896 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a2a      	ldr	r2, [pc, #168]	; (80038ac <HAL_ADC_ConfigChannel+0x678>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d004      	beq.n	8003812 <HAL_ADC_ConfigChannel+0x5de>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a28      	ldr	r2, [pc, #160]	; (80038b0 <HAL_ADC_ConfigChannel+0x67c>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d101      	bne.n	8003816 <HAL_ADC_ConfigChannel+0x5e2>
 8003812:	4a28      	ldr	r2, [pc, #160]	; (80038b4 <HAL_ADC_ConfigChannel+0x680>)
 8003814:	e000      	b.n	8003818 <HAL_ADC_ConfigChannel+0x5e4>
 8003816:	4a28      	ldr	r2, [pc, #160]	; (80038b8 <HAL_ADC_ConfigChannel+0x684>)
 8003818:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800381a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800381e:	4619      	mov	r1, r3
 8003820:	4610      	mov	r0, r2
 8003822:	f7ff f9ec 	bl	8002bfe <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003826:	e036      	b.n	8003896 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a28      	ldr	r2, [pc, #160]	; (80038d0 <HAL_ADC_ConfigChannel+0x69c>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d131      	bne.n	8003896 <HAL_ADC_ConfigChannel+0x662>
 8003832:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003834:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d12c      	bne.n	8003896 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a1e      	ldr	r2, [pc, #120]	; (80038bc <HAL_ADC_ConfigChannel+0x688>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d127      	bne.n	8003896 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a18      	ldr	r2, [pc, #96]	; (80038ac <HAL_ADC_ConfigChannel+0x678>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d004      	beq.n	800385a <HAL_ADC_ConfigChannel+0x626>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a16      	ldr	r2, [pc, #88]	; (80038b0 <HAL_ADC_ConfigChannel+0x67c>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d101      	bne.n	800385e <HAL_ADC_ConfigChannel+0x62a>
 800385a:	4a16      	ldr	r2, [pc, #88]	; (80038b4 <HAL_ADC_ConfigChannel+0x680>)
 800385c:	e000      	b.n	8003860 <HAL_ADC_ConfigChannel+0x62c>
 800385e:	4a16      	ldr	r2, [pc, #88]	; (80038b8 <HAL_ADC_ConfigChannel+0x684>)
 8003860:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003862:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003866:	4619      	mov	r1, r3
 8003868:	4610      	mov	r0, r2
 800386a:	f7ff f9c8 	bl	8002bfe <LL_ADC_SetCommonPathInternalCh>
 800386e:	e012      	b.n	8003896 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003874:	f043 0220 	orr.w	r2, r3, #32
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003882:	e008      	b.n	8003896 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003888:	f043 0220 	orr.w	r2, r3, #32
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800389e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3784      	adds	r7, #132	; 0x84
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd90      	pop	{r4, r7, pc}
 80038aa:	bf00      	nop
 80038ac:	40022000 	.word	0x40022000
 80038b0:	40022100 	.word	0x40022100
 80038b4:	40022300 	.word	0x40022300
 80038b8:	58026300 	.word	0x58026300
 80038bc:	58026000 	.word	0x58026000
 80038c0:	cb840000 	.word	0xcb840000
 80038c4:	24000000 	.word	0x24000000
 80038c8:	053e2d63 	.word	0x053e2d63
 80038cc:	c7520000 	.word	0xc7520000
 80038d0:	cfb80000 	.word	0xcfb80000

080038d4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a7a      	ldr	r2, [pc, #488]	; (8003acc <ADC_ConfigureBoostMode+0x1f8>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d004      	beq.n	80038f0 <ADC_ConfigureBoostMode+0x1c>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a79      	ldr	r2, [pc, #484]	; (8003ad0 <ADC_ConfigureBoostMode+0x1fc>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d109      	bne.n	8003904 <ADC_ConfigureBoostMode+0x30>
 80038f0:	4b78      	ldr	r3, [pc, #480]	; (8003ad4 <ADC_ConfigureBoostMode+0x200>)
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	bf14      	ite	ne
 80038fc:	2301      	movne	r3, #1
 80038fe:	2300      	moveq	r3, #0
 8003900:	b2db      	uxtb	r3, r3
 8003902:	e008      	b.n	8003916 <ADC_ConfigureBoostMode+0x42>
 8003904:	4b74      	ldr	r3, [pc, #464]	; (8003ad8 <ADC_ConfigureBoostMode+0x204>)
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800390c:	2b00      	cmp	r3, #0
 800390e:	bf14      	ite	ne
 8003910:	2301      	movne	r3, #1
 8003912:	2300      	moveq	r3, #0
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d01c      	beq.n	8003954 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800391a:	f002 ffe5 	bl	80068e8 <HAL_RCC_GetHCLKFreq>
 800391e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003928:	d010      	beq.n	800394c <ADC_ConfigureBoostMode+0x78>
 800392a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800392e:	d873      	bhi.n	8003a18 <ADC_ConfigureBoostMode+0x144>
 8003930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003934:	d002      	beq.n	800393c <ADC_ConfigureBoostMode+0x68>
 8003936:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800393a:	d16d      	bne.n	8003a18 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	0c1b      	lsrs	r3, r3, #16
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	fbb2 f3f3 	udiv	r3, r2, r3
 8003948:	60fb      	str	r3, [r7, #12]
        break;
 800394a:	e068      	b.n	8003a1e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	089b      	lsrs	r3, r3, #2
 8003950:	60fb      	str	r3, [r7, #12]
        break;
 8003952:	e064      	b.n	8003a1e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003954:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003958:	f04f 0100 	mov.w	r1, #0
 800395c:	f004 fa2a 	bl	8007db4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003960:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800396a:	d051      	beq.n	8003a10 <ADC_ConfigureBoostMode+0x13c>
 800396c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003970:	d854      	bhi.n	8003a1c <ADC_ConfigureBoostMode+0x148>
 8003972:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003976:	d047      	beq.n	8003a08 <ADC_ConfigureBoostMode+0x134>
 8003978:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800397c:	d84e      	bhi.n	8003a1c <ADC_ConfigureBoostMode+0x148>
 800397e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003982:	d03d      	beq.n	8003a00 <ADC_ConfigureBoostMode+0x12c>
 8003984:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003988:	d848      	bhi.n	8003a1c <ADC_ConfigureBoostMode+0x148>
 800398a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800398e:	d033      	beq.n	80039f8 <ADC_ConfigureBoostMode+0x124>
 8003990:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003994:	d842      	bhi.n	8003a1c <ADC_ConfigureBoostMode+0x148>
 8003996:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800399a:	d029      	beq.n	80039f0 <ADC_ConfigureBoostMode+0x11c>
 800399c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80039a0:	d83c      	bhi.n	8003a1c <ADC_ConfigureBoostMode+0x148>
 80039a2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80039a6:	d01a      	beq.n	80039de <ADC_ConfigureBoostMode+0x10a>
 80039a8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80039ac:	d836      	bhi.n	8003a1c <ADC_ConfigureBoostMode+0x148>
 80039ae:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80039b2:	d014      	beq.n	80039de <ADC_ConfigureBoostMode+0x10a>
 80039b4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80039b8:	d830      	bhi.n	8003a1c <ADC_ConfigureBoostMode+0x148>
 80039ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039be:	d00e      	beq.n	80039de <ADC_ConfigureBoostMode+0x10a>
 80039c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039c4:	d82a      	bhi.n	8003a1c <ADC_ConfigureBoostMode+0x148>
 80039c6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80039ca:	d008      	beq.n	80039de <ADC_ConfigureBoostMode+0x10a>
 80039cc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80039d0:	d824      	bhi.n	8003a1c <ADC_ConfigureBoostMode+0x148>
 80039d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039d6:	d002      	beq.n	80039de <ADC_ConfigureBoostMode+0x10a>
 80039d8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80039dc:	d11e      	bne.n	8003a1c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	0c9b      	lsrs	r3, r3, #18
 80039e4:	005b      	lsls	r3, r3, #1
 80039e6:	68fa      	ldr	r2, [r7, #12]
 80039e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ec:	60fb      	str	r3, [r7, #12]
        break;
 80039ee:	e016      	b.n	8003a1e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	091b      	lsrs	r3, r3, #4
 80039f4:	60fb      	str	r3, [r7, #12]
        break;
 80039f6:	e012      	b.n	8003a1e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	095b      	lsrs	r3, r3, #5
 80039fc:	60fb      	str	r3, [r7, #12]
        break;
 80039fe:	e00e      	b.n	8003a1e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	099b      	lsrs	r3, r3, #6
 8003a04:	60fb      	str	r3, [r7, #12]
        break;
 8003a06:	e00a      	b.n	8003a1e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	09db      	lsrs	r3, r3, #7
 8003a0c:	60fb      	str	r3, [r7, #12]
        break;
 8003a0e:	e006      	b.n	8003a1e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	0a1b      	lsrs	r3, r3, #8
 8003a14:	60fb      	str	r3, [r7, #12]
        break;
 8003a16:	e002      	b.n	8003a1e <ADC_ConfigureBoostMode+0x14a>
        break;
 8003a18:	bf00      	nop
 8003a1a:	e000      	b.n	8003a1e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003a1c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003a1e:	f7ff f8a5 	bl	8002b6c <HAL_GetREVID>
 8003a22:	4603      	mov	r3, r0
 8003a24:	f241 0203 	movw	r2, #4099	; 0x1003
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d815      	bhi.n	8003a58 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	4a2b      	ldr	r2, [pc, #172]	; (8003adc <ADC_ConfigureBoostMode+0x208>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d908      	bls.n	8003a46 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	689a      	ldr	r2, [r3, #8]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a42:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003a44:	e03e      	b.n	8003ac4 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	689a      	ldr	r2, [r3, #8]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a54:	609a      	str	r2, [r3, #8]
}
 8003a56:	e035      	b.n	8003ac4 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	085b      	lsrs	r3, r3, #1
 8003a5c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	4a1f      	ldr	r2, [pc, #124]	; (8003ae0 <ADC_ConfigureBoostMode+0x20c>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d808      	bhi.n	8003a78 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	689a      	ldr	r2, [r3, #8]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003a74:	609a      	str	r2, [r3, #8]
}
 8003a76:	e025      	b.n	8003ac4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	4a1a      	ldr	r2, [pc, #104]	; (8003ae4 <ADC_ConfigureBoostMode+0x210>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d80a      	bhi.n	8003a96 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a92:	609a      	str	r2, [r3, #8]
}
 8003a94:	e016      	b.n	8003ac4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	4a13      	ldr	r2, [pc, #76]	; (8003ae8 <ADC_ConfigureBoostMode+0x214>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d80a      	bhi.n	8003ab4 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ab0:	609a      	str	r2, [r3, #8]
}
 8003ab2:	e007      	b.n	8003ac4 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	689a      	ldr	r2, [r3, #8]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003ac2:	609a      	str	r2, [r3, #8]
}
 8003ac4:	bf00      	nop
 8003ac6:	3710      	adds	r7, #16
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	40022000 	.word	0x40022000
 8003ad0:	40022100 	.word	0x40022100
 8003ad4:	40022300 	.word	0x40022300
 8003ad8:	58026300 	.word	0x58026300
 8003adc:	01312d00 	.word	0x01312d00
 8003ae0:	005f5e10 	.word	0x005f5e10
 8003ae4:	00bebc20 	.word	0x00bebc20
 8003ae8:	017d7840 	.word	0x017d7840

08003aec <LL_ADC_IsEnabled>:
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f003 0301 	and.w	r3, r3, #1
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d101      	bne.n	8003b04 <LL_ADC_IsEnabled+0x18>
 8003b00:	2301      	movs	r3, #1
 8003b02:	e000      	b.n	8003b06 <LL_ADC_IsEnabled+0x1a>
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	370c      	adds	r7, #12
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr

08003b12 <LL_ADC_REG_IsConversionOngoing>:
{
 8003b12:	b480      	push	{r7}
 8003b14:	b083      	sub	sp, #12
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f003 0304 	and.w	r3, r3, #4
 8003b22:	2b04      	cmp	r3, #4
 8003b24:	d101      	bne.n	8003b2a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003b26:	2301      	movs	r3, #1
 8003b28:	e000      	b.n	8003b2c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003b38:	b590      	push	{r4, r7, lr}
 8003b3a:	b09f      	sub	sp, #124	; 0x7c
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b42:	2300      	movs	r3, #0
 8003b44:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d101      	bne.n	8003b56 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003b52:	2302      	movs	r3, #2
 8003b54:	e0be      	b.n	8003cd4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2201      	movs	r2, #1
 8003b5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003b62:	2300      	movs	r3, #0
 8003b64:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a5c      	ldr	r2, [pc, #368]	; (8003cdc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d102      	bne.n	8003b76 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003b70:	4b5b      	ldr	r3, [pc, #364]	; (8003ce0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003b72:	60bb      	str	r3, [r7, #8]
 8003b74:	e001      	b.n	8003b7a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003b76:	2300      	movs	r3, #0
 8003b78:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d10b      	bne.n	8003b98 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b84:	f043 0220 	orr.w	r2, r3, #32
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e09d      	b.n	8003cd4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7ff ffb9 	bl	8003b12 <LL_ADC_REG_IsConversionOngoing>
 8003ba0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7ff ffb3 	bl	8003b12 <LL_ADC_REG_IsConversionOngoing>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d17f      	bne.n	8003cb2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003bb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d17c      	bne.n	8003cb2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a47      	ldr	r2, [pc, #284]	; (8003cdc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d004      	beq.n	8003bcc <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a46      	ldr	r2, [pc, #280]	; (8003ce0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d101      	bne.n	8003bd0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003bcc:	4b45      	ldr	r3, [pc, #276]	; (8003ce4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003bce:	e000      	b.n	8003bd2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003bd0:	4b45      	ldr	r3, [pc, #276]	; (8003ce8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003bd2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d039      	beq.n	8003c50 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003bdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	431a      	orrs	r2, r3
 8003bea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bec:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a3a      	ldr	r2, [pc, #232]	; (8003cdc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d004      	beq.n	8003c02 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a38      	ldr	r2, [pc, #224]	; (8003ce0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d10e      	bne.n	8003c20 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003c02:	4836      	ldr	r0, [pc, #216]	; (8003cdc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003c04:	f7ff ff72 	bl	8003aec <LL_ADC_IsEnabled>
 8003c08:	4604      	mov	r4, r0
 8003c0a:	4835      	ldr	r0, [pc, #212]	; (8003ce0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003c0c:	f7ff ff6e 	bl	8003aec <LL_ADC_IsEnabled>
 8003c10:	4603      	mov	r3, r0
 8003c12:	4323      	orrs	r3, r4
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	bf0c      	ite	eq
 8003c18:	2301      	moveq	r3, #1
 8003c1a:	2300      	movne	r3, #0
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	e008      	b.n	8003c32 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003c20:	4832      	ldr	r0, [pc, #200]	; (8003cec <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003c22:	f7ff ff63 	bl	8003aec <LL_ADC_IsEnabled>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	bf0c      	ite	eq
 8003c2c:	2301      	moveq	r3, #1
 8003c2e:	2300      	movne	r3, #0
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d047      	beq.n	8003cc6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003c36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c38:	689a      	ldr	r2, [r3, #8]
 8003c3a:	4b2d      	ldr	r3, [pc, #180]	; (8003cf0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	683a      	ldr	r2, [r7, #0]
 8003c40:	6811      	ldr	r1, [r2, #0]
 8003c42:	683a      	ldr	r2, [r7, #0]
 8003c44:	6892      	ldr	r2, [r2, #8]
 8003c46:	430a      	orrs	r2, r1
 8003c48:	431a      	orrs	r2, r3
 8003c4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c4c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c4e:	e03a      	b.n	8003cc6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003c50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c5a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a1e      	ldr	r2, [pc, #120]	; (8003cdc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d004      	beq.n	8003c70 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a1d      	ldr	r2, [pc, #116]	; (8003ce0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d10e      	bne.n	8003c8e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003c70:	481a      	ldr	r0, [pc, #104]	; (8003cdc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003c72:	f7ff ff3b 	bl	8003aec <LL_ADC_IsEnabled>
 8003c76:	4604      	mov	r4, r0
 8003c78:	4819      	ldr	r0, [pc, #100]	; (8003ce0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003c7a:	f7ff ff37 	bl	8003aec <LL_ADC_IsEnabled>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	4323      	orrs	r3, r4
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	bf0c      	ite	eq
 8003c86:	2301      	moveq	r3, #1
 8003c88:	2300      	movne	r3, #0
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	e008      	b.n	8003ca0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003c8e:	4817      	ldr	r0, [pc, #92]	; (8003cec <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003c90:	f7ff ff2c 	bl	8003aec <LL_ADC_IsEnabled>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	bf0c      	ite	eq
 8003c9a:	2301      	moveq	r3, #1
 8003c9c:	2300      	movne	r3, #0
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d010      	beq.n	8003cc6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003ca4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ca6:	689a      	ldr	r2, [r3, #8]
 8003ca8:	4b11      	ldr	r3, [pc, #68]	; (8003cf0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003caa:	4013      	ands	r3, r2
 8003cac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003cae:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003cb0:	e009      	b.n	8003cc6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cb6:	f043 0220 	orr.w	r2, r3, #32
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003cc4:	e000      	b.n	8003cc8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003cc6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003cd0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	377c      	adds	r7, #124	; 0x7c
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd90      	pop	{r4, r7, pc}
 8003cdc:	40022000 	.word	0x40022000
 8003ce0:	40022100 	.word	0x40022100
 8003ce4:	40022300 	.word	0x40022300
 8003ce8:	58026300 	.word	0x58026300
 8003cec:	58026000 	.word	0x58026000
 8003cf0:	fffff0e0 	.word	0xfffff0e0

08003cf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f003 0307 	and.w	r3, r3, #7
 8003d02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d04:	4b0b      	ldr	r3, [pc, #44]	; (8003d34 <__NVIC_SetPriorityGrouping+0x40>)
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d0a:	68ba      	ldr	r2, [r7, #8]
 8003d0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d10:	4013      	ands	r3, r2
 8003d12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003d1c:	4b06      	ldr	r3, [pc, #24]	; (8003d38 <__NVIC_SetPriorityGrouping+0x44>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d22:	4a04      	ldr	r2, [pc, #16]	; (8003d34 <__NVIC_SetPriorityGrouping+0x40>)
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	60d3      	str	r3, [r2, #12]
}
 8003d28:	bf00      	nop
 8003d2a:	3714      	adds	r7, #20
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr
 8003d34:	e000ed00 	.word	0xe000ed00
 8003d38:	05fa0000 	.word	0x05fa0000

08003d3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d40:	4b04      	ldr	r3, [pc, #16]	; (8003d54 <__NVIC_GetPriorityGrouping+0x18>)
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	0a1b      	lsrs	r3, r3, #8
 8003d46:	f003 0307 	and.w	r3, r3, #7
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr
 8003d54:	e000ed00 	.word	0xe000ed00

08003d58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	4603      	mov	r3, r0
 8003d60:	6039      	str	r1, [r7, #0]
 8003d62:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003d64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	db0a      	blt.n	8003d82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	b2da      	uxtb	r2, r3
 8003d70:	490c      	ldr	r1, [pc, #48]	; (8003da4 <__NVIC_SetPriority+0x4c>)
 8003d72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d76:	0112      	lsls	r2, r2, #4
 8003d78:	b2d2      	uxtb	r2, r2
 8003d7a:	440b      	add	r3, r1
 8003d7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d80:	e00a      	b.n	8003d98 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	b2da      	uxtb	r2, r3
 8003d86:	4908      	ldr	r1, [pc, #32]	; (8003da8 <__NVIC_SetPriority+0x50>)
 8003d88:	88fb      	ldrh	r3, [r7, #6]
 8003d8a:	f003 030f 	and.w	r3, r3, #15
 8003d8e:	3b04      	subs	r3, #4
 8003d90:	0112      	lsls	r2, r2, #4
 8003d92:	b2d2      	uxtb	r2, r2
 8003d94:	440b      	add	r3, r1
 8003d96:	761a      	strb	r2, [r3, #24]
}
 8003d98:	bf00      	nop
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr
 8003da4:	e000e100 	.word	0xe000e100
 8003da8:	e000ed00 	.word	0xe000ed00

08003dac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b089      	sub	sp, #36	; 0x24
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f003 0307 	and.w	r3, r3, #7
 8003dbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	f1c3 0307 	rsb	r3, r3, #7
 8003dc6:	2b04      	cmp	r3, #4
 8003dc8:	bf28      	it	cs
 8003dca:	2304      	movcs	r3, #4
 8003dcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	3304      	adds	r3, #4
 8003dd2:	2b06      	cmp	r3, #6
 8003dd4:	d902      	bls.n	8003ddc <NVIC_EncodePriority+0x30>
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	3b03      	subs	r3, #3
 8003dda:	e000      	b.n	8003dde <NVIC_EncodePriority+0x32>
 8003ddc:	2300      	movs	r3, #0
 8003dde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003de0:	f04f 32ff 	mov.w	r2, #4294967295
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dea:	43da      	mvns	r2, r3
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	401a      	ands	r2, r3
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003df4:	f04f 31ff 	mov.w	r1, #4294967295
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8003dfe:	43d9      	mvns	r1, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e04:	4313      	orrs	r3, r2
         );
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3724      	adds	r7, #36	; 0x24
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
	...

08003e14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e24:	d301      	bcc.n	8003e2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e26:	2301      	movs	r3, #1
 8003e28:	e00f      	b.n	8003e4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e2a:	4a0a      	ldr	r2, [pc, #40]	; (8003e54 <SysTick_Config+0x40>)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e32:	210f      	movs	r1, #15
 8003e34:	f04f 30ff 	mov.w	r0, #4294967295
 8003e38:	f7ff ff8e 	bl	8003d58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e3c:	4b05      	ldr	r3, [pc, #20]	; (8003e54 <SysTick_Config+0x40>)
 8003e3e:	2200      	movs	r2, #0
 8003e40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e42:	4b04      	ldr	r3, [pc, #16]	; (8003e54 <SysTick_Config+0x40>)
 8003e44:	2207      	movs	r2, #7
 8003e46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3708      	adds	r7, #8
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	e000e010 	.word	0xe000e010

08003e58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f7ff ff47 	bl	8003cf4 <__NVIC_SetPriorityGrouping>
}
 8003e66:	bf00      	nop
 8003e68:	3708      	adds	r7, #8
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}

08003e6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	b086      	sub	sp, #24
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	4603      	mov	r3, r0
 8003e76:	60b9      	str	r1, [r7, #8]
 8003e78:	607a      	str	r2, [r7, #4]
 8003e7a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003e7c:	f7ff ff5e 	bl	8003d3c <__NVIC_GetPriorityGrouping>
 8003e80:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	68b9      	ldr	r1, [r7, #8]
 8003e86:	6978      	ldr	r0, [r7, #20]
 8003e88:	f7ff ff90 	bl	8003dac <NVIC_EncodePriority>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003e92:	4611      	mov	r1, r2
 8003e94:	4618      	mov	r0, r3
 8003e96:	f7ff ff5f 	bl	8003d58 <__NVIC_SetPriority>
}
 8003e9a:	bf00      	nop
 8003e9c:	3718      	adds	r7, #24
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}

08003ea2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ea2:	b580      	push	{r7, lr}
 8003ea4:	b082      	sub	sp, #8
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f7ff ffb2 	bl	8003e14 <SysTick_Config>
 8003eb0:	4603      	mov	r3, r0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3708      	adds	r7, #8
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
	...

08003ebc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d101      	bne.n	8003ece <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e0cf      	b.n	800406e <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d106      	bne.n	8003ee6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2223      	movs	r2, #35	; 0x23
 8003edc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f7fd fe55 	bl	8001b90 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ee6:	4b64      	ldr	r3, [pc, #400]	; (8004078 <HAL_ETH_Init+0x1bc>)
 8003ee8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003eec:	4a62      	ldr	r2, [pc, #392]	; (8004078 <HAL_ETH_Init+0x1bc>)
 8003eee:	f043 0302 	orr.w	r3, r3, #2
 8003ef2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003ef6:	4b60      	ldr	r3, [pc, #384]	; (8004078 <HAL_ETH_Init+0x1bc>)
 8003ef8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003efc:	f003 0302 	and.w	r3, r3, #2
 8003f00:	60bb      	str	r3, [r7, #8]
 8003f02:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	7a1b      	ldrb	r3, [r3, #8]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d103      	bne.n	8003f14 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8003f0c:	2000      	movs	r0, #0
 8003f0e:	f7fe fe39 	bl	8002b84 <HAL_SYSCFG_ETHInterfaceSelect>
 8003f12:	e003      	b.n	8003f1c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8003f14:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003f18:	f7fe fe34 	bl	8002b84 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8003f1c:	4b57      	ldr	r3, [pc, #348]	; (800407c <HAL_ETH_Init+0x1c0>)
 8003f1e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	6812      	ldr	r2, [r2, #0]
 8003f2e:	f043 0301 	orr.w	r3, r3, #1
 8003f32:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003f36:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f38:	f7fe fde8 	bl	8002b0c <HAL_GetTick>
 8003f3c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003f3e:	e011      	b.n	8003f64 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003f40:	f7fe fde4 	bl	8002b0c <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003f4e:	d909      	bls.n	8003f64 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2204      	movs	r2, #4
 8003f54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	22e0      	movs	r2, #224	; 0xe0
 8003f5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e084      	b.n	800406e <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0301 	and.w	r3, r3, #1
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d1e4      	bne.n	8003f40 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 f886 	bl	8004088 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8003f7c:	f002 fcb4 	bl	80068e8 <HAL_RCC_GetHCLKFreq>
 8003f80:	4603      	mov	r3, r0
 8003f82:	4a3f      	ldr	r2, [pc, #252]	; (8004080 <HAL_ETH_Init+0x1c4>)
 8003f84:	fba2 2303 	umull	r2, r3, r2, r3
 8003f88:	0c9a      	lsrs	r2, r3, #18
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	3a01      	subs	r2, #1
 8003f90:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f000 fa71 	bl	800447c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fa2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003fa6:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	6812      	ldr	r2, [r2, #0]
 8003fae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003fb2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003fb6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	f003 0303 	and.w	r3, r3, #3
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d009      	beq.n	8003fda <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	22e0      	movs	r2, #224	; 0xe0
 8003fd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e049      	b.n	800406e <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fe2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8003fe6:	4b27      	ldr	r3, [pc, #156]	; (8004084 <HAL_ETH_Init+0x1c8>)
 8003fe8:	4013      	ands	r3, r2
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	6952      	ldr	r2, [r2, #20]
 8003fee:	0051      	lsls	r1, r2, #1
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	6812      	ldr	r2, [r2, #0]
 8003ff4:	430b      	orrs	r3, r1
 8003ff6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003ffa:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 fad9 	bl	80045b6 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f000 fb1f 	bl	8004648 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	3305      	adds	r3, #5
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	021a      	lsls	r2, r3, #8
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	3304      	adds	r3, #4
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	4619      	mov	r1, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	430a      	orrs	r2, r1
 8004024:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	3303      	adds	r3, #3
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	061a      	lsls	r2, r3, #24
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	3302      	adds	r3, #2
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	041b      	lsls	r3, r3, #16
 800403c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	3301      	adds	r3, #1
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004048:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004056:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004058:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2210      	movs	r2, #16
 8004068:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	3710      	adds	r7, #16
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	58024400 	.word	0x58024400
 800407c:	58000400 	.word	0x58000400
 8004080:	431bde83 	.word	0x431bde83
 8004084:	ffff8001 	.word	0xffff8001

08004088 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004098:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80040a0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80040a2:	f002 fc21 	bl	80068e8 <HAL_RCC_GetHCLKFreq>
 80040a6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	4a1e      	ldr	r2, [pc, #120]	; (8004124 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d908      	bls.n	80040c2 <HAL_ETH_SetMDIOClockRange+0x3a>
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	4a1d      	ldr	r2, [pc, #116]	; (8004128 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d804      	bhi.n	80040c2 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040be:	60fb      	str	r3, [r7, #12]
 80040c0:	e027      	b.n	8004112 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	4a18      	ldr	r2, [pc, #96]	; (8004128 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d908      	bls.n	80040dc <HAL_ETH_SetMDIOClockRange+0x54>
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	4a17      	ldr	r2, [pc, #92]	; (800412c <HAL_ETH_SetMDIOClockRange+0xa4>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d204      	bcs.n	80040dc <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80040d8:	60fb      	str	r3, [r7, #12]
 80040da:	e01a      	b.n	8004112 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	4a13      	ldr	r2, [pc, #76]	; (800412c <HAL_ETH_SetMDIOClockRange+0xa4>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d303      	bcc.n	80040ec <HAL_ETH_SetMDIOClockRange+0x64>
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	4a12      	ldr	r2, [pc, #72]	; (8004130 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d911      	bls.n	8004110 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	4a10      	ldr	r2, [pc, #64]	; (8004130 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d908      	bls.n	8004106 <HAL_ETH_SetMDIOClockRange+0x7e>
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	4a0f      	ldr	r2, [pc, #60]	; (8004134 <HAL_ETH_SetMDIOClockRange+0xac>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d804      	bhi.n	8004106 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004102:	60fb      	str	r3, [r7, #12]
 8004104:	e005      	b.n	8004112 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800410c:	60fb      	str	r3, [r7, #12]
 800410e:	e000      	b.n	8004112 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8004110:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800411c:	bf00      	nop
 800411e:	3710      	adds	r7, #16
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	01312cff 	.word	0x01312cff
 8004128:	02160ebf 	.word	0x02160ebf
 800412c:	03938700 	.word	0x03938700
 8004130:	05f5e0ff 	.word	0x05f5e0ff
 8004134:	08f0d17f 	.word	0x08f0d17f

08004138 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004138:	b480      	push	{r7}
 800413a:	b085      	sub	sp, #20
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800414a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	791b      	ldrb	r3, [r3, #4]
 8004150:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8004152:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	7b1b      	ldrb	r3, [r3, #12]
 8004158:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800415a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	7b5b      	ldrb	r3, [r3, #13]
 8004160:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004162:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	7b9b      	ldrb	r3, [r3, #14]
 8004168:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800416a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	7bdb      	ldrb	r3, [r3, #15]
 8004170:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004172:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004174:	683a      	ldr	r2, [r7, #0]
 8004176:	7c12      	ldrb	r2, [r2, #16]
 8004178:	2a00      	cmp	r2, #0
 800417a:	d102      	bne.n	8004182 <ETH_SetMACConfig+0x4a>
 800417c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004180:	e000      	b.n	8004184 <ETH_SetMACConfig+0x4c>
 8004182:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004184:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004186:	683a      	ldr	r2, [r7, #0]
 8004188:	7c52      	ldrb	r2, [r2, #17]
 800418a:	2a00      	cmp	r2, #0
 800418c:	d102      	bne.n	8004194 <ETH_SetMACConfig+0x5c>
 800418e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004192:	e000      	b.n	8004196 <ETH_SetMACConfig+0x5e>
 8004194:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004196:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	7c9b      	ldrb	r3, [r3, #18]
 800419c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800419e:	431a      	orrs	r2, r3
               macconf->Speed |
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80041a4:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80041aa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	7f1b      	ldrb	r3, [r3, #28]
 80041b0:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80041b2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	7f5b      	ldrb	r3, [r3, #29]
 80041b8:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80041ba:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80041bc:	683a      	ldr	r2, [r7, #0]
 80041be:	7f92      	ldrb	r2, [r2, #30]
 80041c0:	2a00      	cmp	r2, #0
 80041c2:	d102      	bne.n	80041ca <ETH_SetMACConfig+0x92>
 80041c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80041c8:	e000      	b.n	80041cc <ETH_SetMACConfig+0x94>
 80041ca:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80041cc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	7fdb      	ldrb	r3, [r3, #31]
 80041d2:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80041d4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80041d6:	683a      	ldr	r2, [r7, #0]
 80041d8:	f892 2020 	ldrb.w	r2, [r2, #32]
 80041dc:	2a00      	cmp	r2, #0
 80041de:	d102      	bne.n	80041e6 <ETH_SetMACConfig+0xae>
 80041e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80041e4:	e000      	b.n	80041e8 <ETH_SetMACConfig+0xb0>
 80041e6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80041e8:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80041ee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041f6:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80041f8:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80041fe:	4313      	orrs	r3, r2
 8004200:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	4b56      	ldr	r3, [pc, #344]	; (8004364 <ETH_SetMACConfig+0x22c>)
 800420a:	4013      	ands	r3, r2
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	6812      	ldr	r2, [r2, #0]
 8004210:	68f9      	ldr	r1, [r7, #12]
 8004212:	430b      	orrs	r3, r1
 8004214:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800421a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004222:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004224:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800422c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800422e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004236:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8004238:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800423a:	683a      	ldr	r2, [r7, #0]
 800423c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8004240:	2a00      	cmp	r2, #0
 8004242:	d102      	bne.n	800424a <ETH_SetMACConfig+0x112>
 8004244:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004248:	e000      	b.n	800424c <ETH_SetMACConfig+0x114>
 800424a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800424c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004252:	4313      	orrs	r3, r2
 8004254:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	685a      	ldr	r2, [r3, #4]
 800425c:	4b42      	ldr	r3, [pc, #264]	; (8004368 <ETH_SetMACConfig+0x230>)
 800425e:	4013      	ands	r3, r2
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	6812      	ldr	r2, [r2, #0]
 8004264:	68f9      	ldr	r1, [r7, #12]
 8004266:	430b      	orrs	r3, r1
 8004268:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004270:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004276:	4313      	orrs	r3, r2
 8004278:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	68da      	ldr	r2, [r3, #12]
 8004280:	4b3a      	ldr	r3, [pc, #232]	; (800436c <ETH_SetMACConfig+0x234>)
 8004282:	4013      	ands	r3, r2
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	6812      	ldr	r2, [r2, #0]
 8004288:	68f9      	ldr	r1, [r7, #12]
 800428a:	430b      	orrs	r3, r1
 800428c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004294:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800429a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800429c:	683a      	ldr	r2, [r7, #0]
 800429e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80042a2:	2a00      	cmp	r2, #0
 80042a4:	d101      	bne.n	80042aa <ETH_SetMACConfig+0x172>
 80042a6:	2280      	movs	r2, #128	; 0x80
 80042a8:	e000      	b.n	80042ac <ETH_SetMACConfig+0x174>
 80042aa:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80042ac:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042b2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80042b4:	4313      	orrs	r3, r2
 80042b6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80042be:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80042c2:	4013      	ands	r3, r2
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	6812      	ldr	r2, [r2, #0]
 80042c8:	68f9      	ldr	r1, [r7, #12]
 80042ca:	430b      	orrs	r3, r1
 80042cc:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80042d4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80042dc:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80042de:	4313      	orrs	r3, r2
 80042e0:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ea:	f023 0103 	bic.w	r1, r3, #3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68fa      	ldr	r2, [r7, #12]
 80042f4:	430a      	orrs	r2, r1
 80042f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8004302:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	430a      	orrs	r2, r1
 8004310:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004318:	683a      	ldr	r2, [r7, #0]
 800431a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800431e:	2a00      	cmp	r2, #0
 8004320:	d101      	bne.n	8004326 <ETH_SetMACConfig+0x1ee>
 8004322:	2240      	movs	r2, #64	; 0x40
 8004324:	e000      	b.n	8004328 <ETH_SetMACConfig+0x1f0>
 8004326:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8004328:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8004330:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004332:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800433a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800433c:	4313      	orrs	r3, r2
 800433e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004348:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68fa      	ldr	r2, [r7, #12]
 8004352:	430a      	orrs	r2, r1
 8004354:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8004358:	bf00      	nop
 800435a:	3714      	adds	r7, #20
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr
 8004364:	00048083 	.word	0x00048083
 8004368:	c0f88000 	.word	0xc0f88000
 800436c:	fffffef0 	.word	0xfffffef0

08004370 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004370:	b480      	push	{r7}
 8004372:	b085      	sub	sp, #20
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	4b38      	ldr	r3, [pc, #224]	; (8004468 <ETH_SetDMAConfig+0xf8>)
 8004386:	4013      	ands	r3, r2
 8004388:	683a      	ldr	r2, [r7, #0]
 800438a:	6811      	ldr	r1, [r2, #0]
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	6812      	ldr	r2, [r2, #0]
 8004390:	430b      	orrs	r3, r1
 8004392:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004396:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	791b      	ldrb	r3, [r3, #4]
 800439c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80043a2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	7b1b      	ldrb	r3, [r3, #12]
 80043a8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80043aa:	4313      	orrs	r3, r2
 80043ac:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043b6:	685a      	ldr	r2, [r3, #4]
 80043b8:	4b2c      	ldr	r3, [pc, #176]	; (800446c <ETH_SetDMAConfig+0xfc>)
 80043ba:	4013      	ands	r3, r2
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	6812      	ldr	r2, [r2, #0]
 80043c0:	68f9      	ldr	r1, [r7, #12]
 80043c2:	430b      	orrs	r3, r1
 80043c4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80043c8:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	7b5b      	ldrb	r3, [r3, #13]
 80043ce:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80043d4:	4313      	orrs	r3, r2
 80043d6:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043e0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80043e4:	4b22      	ldr	r3, [pc, #136]	; (8004470 <ETH_SetDMAConfig+0x100>)
 80043e6:	4013      	ands	r3, r2
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	6812      	ldr	r2, [r2, #0]
 80043ec:	68f9      	ldr	r1, [r7, #12]
 80043ee:	430b      	orrs	r3, r1
 80043f0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80043f4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	7d1b      	ldrb	r3, [r3, #20]
 8004400:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8004402:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	7f5b      	ldrb	r3, [r3, #29]
 8004408:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800440a:	4313      	orrs	r3, r2
 800440c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004416:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800441a:	4b16      	ldr	r3, [pc, #88]	; (8004474 <ETH_SetDMAConfig+0x104>)
 800441c:	4013      	ands	r3, r2
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	6812      	ldr	r2, [r2, #0]
 8004422:	68f9      	ldr	r1, [r7, #12]
 8004424:	430b      	orrs	r3, r1
 8004426:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800442a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	7f1b      	ldrb	r3, [r3, #28]
 8004432:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004438:	4313      	orrs	r3, r2
 800443a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004444:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8004448:	4b0b      	ldr	r3, [pc, #44]	; (8004478 <ETH_SetDMAConfig+0x108>)
 800444a:	4013      	ands	r3, r2
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	6812      	ldr	r2, [r2, #0]
 8004450:	68f9      	ldr	r1, [r7, #12]
 8004452:	430b      	orrs	r3, r1
 8004454:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004458:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 800445c:	bf00      	nop
 800445e:	3714      	adds	r7, #20
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr
 8004468:	ffff87fd 	.word	0xffff87fd
 800446c:	ffff2ffe 	.word	0xffff2ffe
 8004470:	fffec000 	.word	0xfffec000
 8004474:	ffc0efef 	.word	0xffc0efef
 8004478:	7fc0ffff 	.word	0x7fc0ffff

0800447c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b0a4      	sub	sp, #144	; 0x90
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8004484:	2301      	movs	r3, #1
 8004486:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800448a:	2300      	movs	r3, #0
 800448c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800448e:	2300      	movs	r3, #0
 8004490:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004494:	2300      	movs	r3, #0
 8004496:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800449a:	2301      	movs	r3, #1
 800449c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80044a0:	2301      	movs	r3, #1
 80044a2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80044a6:	2301      	movs	r3, #1
 80044a8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80044ac:	2300      	movs	r3, #0
 80044ae:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80044b2:	2301      	movs	r3, #1
 80044b4:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80044b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80044bc:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80044be:	2300      	movs	r3, #0
 80044c0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80044c4:	2300      	movs	r3, #0
 80044c6:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80044c8:	2300      	movs	r3, #0
 80044ca:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80044ce:	2300      	movs	r3, #0
 80044d0:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80044d4:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80044d8:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80044da:	2300      	movs	r3, #0
 80044dc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80044e0:	2300      	movs	r3, #0
 80044e2:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80044e4:	2301      	movs	r3, #1
 80044e6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80044ea:	2300      	movs	r3, #0
 80044ec:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80044f0:	2300      	movs	r3, #0
 80044f2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80044f6:	2300      	movs	r3, #0
 80044f8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80044fa:	2300      	movs	r3, #0
 80044fc:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80044fe:	2300      	movs	r3, #0
 8004500:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8004502:	2300      	movs	r3, #0
 8004504:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004508:	2300      	movs	r3, #0
 800450a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800450e:	2301      	movs	r3, #1
 8004510:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8004514:	2320      	movs	r3, #32
 8004516:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800451a:	2301      	movs	r3, #1
 800451c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8004520:	2300      	movs	r3, #0
 8004522:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8004526:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800452a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800452c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004530:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8004532:	2300      	movs	r3, #0
 8004534:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8004538:	2302      	movs	r3, #2
 800453a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800453e:	2300      	movs	r3, #0
 8004540:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004544:	2300      	movs	r3, #0
 8004546:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800454a:	2300      	movs	r3, #0
 800454c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8004550:	2301      	movs	r3, #1
 8004552:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8004556:	2300      	movs	r3, #0
 8004558:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800455a:	2301      	movs	r3, #1
 800455c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004560:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004564:	4619      	mov	r1, r3
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f7ff fde6 	bl	8004138 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800456c:	2301      	movs	r3, #1
 800456e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004570:	2301      	movs	r3, #1
 8004572:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8004574:	2300      	movs	r3, #0
 8004576:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004578:	2300      	movs	r3, #0
 800457a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800457e:	2300      	movs	r3, #0
 8004580:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8004582:	2300      	movs	r3, #0
 8004584:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004586:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800458a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800458c:	2300      	movs	r3, #0
 800458e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004590:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004594:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8004596:	2300      	movs	r3, #0
 8004598:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800459c:	f44f 7306 	mov.w	r3, #536	; 0x218
 80045a0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80045a2:	f107 0308 	add.w	r3, r7, #8
 80045a6:	4619      	mov	r1, r3
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f7ff fee1 	bl	8004370 <ETH_SetDMAConfig>
}
 80045ae:	bf00      	nop
 80045b0:	3790      	adds	r7, #144	; 0x90
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}

080045b6 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80045b6:	b480      	push	{r7}
 80045b8:	b085      	sub	sp, #20
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80045be:	2300      	movs	r3, #0
 80045c0:	60fb      	str	r3, [r7, #12]
 80045c2:	e01d      	b.n	8004600 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	68d9      	ldr	r1, [r3, #12]
 80045c8:	68fa      	ldr	r2, [r7, #12]
 80045ca:	4613      	mov	r3, r2
 80045cc:	005b      	lsls	r3, r3, #1
 80045ce:	4413      	add	r3, r2
 80045d0:	00db      	lsls	r3, r3, #3
 80045d2:	440b      	add	r3, r1
 80045d4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	2200      	movs	r2, #0
 80045da:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	2200      	movs	r2, #0
 80045e0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	2200      	movs	r2, #0
 80045e6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	2200      	movs	r2, #0
 80045ec:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80045ee:	68b9      	ldr	r1, [r7, #8]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	68fa      	ldr	r2, [r7, #12]
 80045f4:	3206      	adds	r2, #6
 80045f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	3301      	adds	r3, #1
 80045fe:	60fb      	str	r3, [r7, #12]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2b03      	cmp	r3, #3
 8004604:	d9de      	bls.n	80045c4 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004614:	461a      	mov	r2, r3
 8004616:	2303      	movs	r3, #3
 8004618:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	68da      	ldr	r2, [r3, #12]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004628:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	68da      	ldr	r2, [r3, #12]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004638:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 800463c:	bf00      	nop
 800463e:	3714      	adds	r7, #20
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004648:	b480      	push	{r7}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004650:	2300      	movs	r3, #0
 8004652:	60fb      	str	r3, [r7, #12]
 8004654:	e023      	b.n	800469e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6919      	ldr	r1, [r3, #16]
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	4613      	mov	r3, r2
 800465e:	005b      	lsls	r3, r3, #1
 8004660:	4413      	add	r3, r2
 8004662:	00db      	lsls	r3, r3, #3
 8004664:	440b      	add	r3, r1
 8004666:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	2200      	movs	r2, #0
 800466c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	2200      	movs	r2, #0
 8004672:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	2200      	movs	r2, #0
 8004678:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	2200      	movs	r2, #0
 800467e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	2200      	movs	r2, #0
 8004684:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	2200      	movs	r2, #0
 800468a:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800468c:	68b9      	ldr	r1, [r7, #8]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	68fa      	ldr	r2, [r7, #12]
 8004692:	3212      	adds	r2, #18
 8004694:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	3301      	adds	r3, #1
 800469c:	60fb      	str	r3, [r7, #12]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2b03      	cmp	r3, #3
 80046a2:	d9d8      	bls.n	8004656 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046ca:	461a      	mov	r2, r3
 80046cc:	2303      	movs	r3, #3
 80046ce:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	691a      	ldr	r2, [r3, #16]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046de:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046f2:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80046f6:	bf00      	nop
 80046f8:	3714      	adds	r7, #20
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr
	...

08004704 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b098      	sub	sp, #96	; 0x60
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 800470c:	4a84      	ldr	r2, [pc, #528]	; (8004920 <HAL_FDCAN_Init+0x21c>)
 800470e:	f107 030c 	add.w	r3, r7, #12
 8004712:	4611      	mov	r1, r2
 8004714:	224c      	movs	r2, #76	; 0x4c
 8004716:	4618      	mov	r0, r3
 8004718:	f007 fc06 	bl	800bf28 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d101      	bne.n	8004726 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e1c6      	b.n	8004ab4 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a7e      	ldr	r2, [pc, #504]	; (8004924 <HAL_FDCAN_Init+0x220>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d106      	bne.n	800473e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004738:	461a      	mov	r2, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b00      	cmp	r3, #0
 8004748:	d106      	bne.n	8004758 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f7fd fb4c 	bl	8001df0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	699a      	ldr	r2, [r3, #24]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f022 0210 	bic.w	r2, r2, #16
 8004766:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004768:	f7fe f9d0 	bl	8002b0c <HAL_GetTick>
 800476c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800476e:	e014      	b.n	800479a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004770:	f7fe f9cc 	bl	8002b0c <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	2b0a      	cmp	r3, #10
 800477c:	d90d      	bls.n	800479a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004784:	f043 0201 	orr.w	r2, r3, #1
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2203      	movs	r2, #3
 8004792:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e18c      	b.n	8004ab4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	f003 0308 	and.w	r3, r3, #8
 80047a4:	2b08      	cmp	r3, #8
 80047a6:	d0e3      	beq.n	8004770 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	699a      	ldr	r2, [r3, #24]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f042 0201 	orr.w	r2, r2, #1
 80047b6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80047b8:	f7fe f9a8 	bl	8002b0c <HAL_GetTick>
 80047bc:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80047be:	e014      	b.n	80047ea <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80047c0:	f7fe f9a4 	bl	8002b0c <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	2b0a      	cmp	r3, #10
 80047cc:	d90d      	bls.n	80047ea <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80047d4:	f043 0201 	orr.w	r2, r3, #1
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2203      	movs	r2, #3
 80047e2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e164      	b.n	8004ab4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	699b      	ldr	r3, [r3, #24]
 80047f0:	f003 0301 	and.w	r3, r3, #1
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d0e3      	beq.n	80047c0 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	699a      	ldr	r2, [r3, #24]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f042 0202 	orr.w	r2, r2, #2
 8004806:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	7c1b      	ldrb	r3, [r3, #16]
 800480c:	2b01      	cmp	r3, #1
 800480e:	d108      	bne.n	8004822 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	699a      	ldr	r2, [r3, #24]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800481e:	619a      	str	r2, [r3, #24]
 8004820:	e007      	b.n	8004832 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	699a      	ldr	r2, [r3, #24]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004830:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	7c5b      	ldrb	r3, [r3, #17]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d108      	bne.n	800484c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	699a      	ldr	r2, [r3, #24]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004848:	619a      	str	r2, [r3, #24]
 800484a:	e007      	b.n	800485c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	699a      	ldr	r2, [r3, #24]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800485a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	7c9b      	ldrb	r3, [r3, #18]
 8004860:	2b01      	cmp	r3, #1
 8004862:	d108      	bne.n	8004876 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	699a      	ldr	r2, [r3, #24]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004872:	619a      	str	r2, [r3, #24]
 8004874:	e007      	b.n	8004886 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	699a      	ldr	r2, [r3, #24]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004884:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	699b      	ldr	r3, [r3, #24]
 800488c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	689a      	ldr	r2, [r3, #8]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	430a      	orrs	r2, r1
 800489a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	699a      	ldr	r2, [r3, #24]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80048aa:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	691a      	ldr	r2, [r3, #16]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f022 0210 	bic.w	r2, r2, #16
 80048ba:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d108      	bne.n	80048d6 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	699a      	ldr	r2, [r3, #24]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f042 0204 	orr.w	r2, r2, #4
 80048d2:	619a      	str	r2, [r3, #24]
 80048d4:	e030      	b.n	8004938 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d02c      	beq.n	8004938 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d020      	beq.n	8004928 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	699a      	ldr	r2, [r3, #24]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80048f4:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	691a      	ldr	r2, [r3, #16]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f042 0210 	orr.w	r2, r2, #16
 8004904:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	2b03      	cmp	r3, #3
 800490c:	d114      	bne.n	8004938 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	699a      	ldr	r2, [r3, #24]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f042 0220 	orr.w	r2, r2, #32
 800491c:	619a      	str	r2, [r3, #24]
 800491e:	e00b      	b.n	8004938 <HAL_FDCAN_Init+0x234>
 8004920:	0800bf74 	.word	0x0800bf74
 8004924:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	699a      	ldr	r2, [r3, #24]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f042 0220 	orr.w	r2, r2, #32
 8004936:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	699b      	ldr	r3, [r3, #24]
 800493c:	3b01      	subs	r3, #1
 800493e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	69db      	ldr	r3, [r3, #28]
 8004944:	3b01      	subs	r3, #1
 8004946:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004948:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a1b      	ldr	r3, [r3, #32]
 800494e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004950:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	695b      	ldr	r3, [r3, #20]
 8004958:	3b01      	subs	r3, #1
 800495a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004960:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004962:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800496c:	d115      	bne.n	800499a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004972:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004978:	3b01      	subs	r3, #1
 800497a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800497c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004982:	3b01      	subs	r3, #1
 8004984:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004986:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498e:	3b01      	subs	r3, #1
 8004990:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004996:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004998:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d00a      	beq.n	80049b8 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	430a      	orrs	r2, r1
 80049b4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049c0:	4413      	add	r3, r2
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d011      	beq.n	80049ea <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80049ce:	f023 0107 	bic.w	r1, r3, #7
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	3360      	adds	r3, #96	; 0x60
 80049da:	443b      	add	r3, r7
 80049dc:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	430a      	orrs	r2, r1
 80049e6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d011      	beq.n	8004a16 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80049fa:	f023 0107 	bic.w	r1, r3, #7
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	3360      	adds	r3, #96	; 0x60
 8004a06:	443b      	add	r3, r7
 8004a08:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	430a      	orrs	r2, r1
 8004a12:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d012      	beq.n	8004a44 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004a26:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	3360      	adds	r3, #96	; 0x60
 8004a32:	443b      	add	r3, r7
 8004a34:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004a38:	011a      	lsls	r2, r3, #4
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	430a      	orrs	r2, r1
 8004a40:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d012      	beq.n	8004a72 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004a54:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	3360      	adds	r3, #96	; 0x60
 8004a60:	443b      	add	r3, r7
 8004a62:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004a66:	021a      	lsls	r2, r3, #8
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	430a      	orrs	r2, r1
 8004a6e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a11      	ldr	r2, [pc, #68]	; (8004abc <HAL_FDCAN_Init+0x3b8>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d107      	bne.n	8004a8c <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	689a      	ldr	r2, [r3, #8]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	f022 0203 	bic.w	r2, r2, #3
 8004a8a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f000 f80b 	bl	8004ac0 <FDCAN_CalcultateRamBlockAddresses>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8004ab0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3760      	adds	r7, #96	; 0x60
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	4000a000 	.word	0x4000a000

08004ac0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b085      	sub	sp, #20
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004acc:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004ad6:	4ba7      	ldr	r3, [pc, #668]	; (8004d74 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004ad8:	4013      	ands	r3, r2
 8004ada:	68ba      	ldr	r2, [r7, #8]
 8004adc:	0091      	lsls	r1, r2, #2
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	6812      	ldr	r2, [r2, #0]
 8004ae2:	430b      	orrs	r3, r1
 8004ae4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004af0:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af8:	041a      	lsls	r2, r3, #16
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	430a      	orrs	r2, r1
 8004b00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b08:	68ba      	ldr	r2, [r7, #8]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004b16:	4b97      	ldr	r3, [pc, #604]	; (8004d74 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004b18:	4013      	ands	r3, r2
 8004b1a:	68ba      	ldr	r2, [r7, #8]
 8004b1c:	0091      	lsls	r1, r2, #2
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	6812      	ldr	r2, [r2, #0]
 8004b22:	430b      	orrs	r3, r1
 8004b24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b30:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b38:	041a      	lsls	r2, r3, #16
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	430a      	orrs	r2, r1
 8004b40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b48:	005b      	lsls	r3, r3, #1
 8004b4a:	68ba      	ldr	r2, [r7, #8]
 8004b4c:	4413      	add	r3, r2
 8004b4e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004b58:	4b86      	ldr	r3, [pc, #536]	; (8004d74 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	68ba      	ldr	r2, [r7, #8]
 8004b5e:	0091      	lsls	r1, r2, #2
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	6812      	ldr	r2, [r2, #0]
 8004b64:	430b      	orrs	r3, r1
 8004b66:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004b72:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7a:	041a      	lsls	r2, r3, #16
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	430a      	orrs	r2, r1
 8004b82:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004b8e:	fb02 f303 	mul.w	r3, r2, r3
 8004b92:	68ba      	ldr	r2, [r7, #8]
 8004b94:	4413      	add	r3, r2
 8004b96:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004ba0:	4b74      	ldr	r3, [pc, #464]	; (8004d74 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	68ba      	ldr	r2, [r7, #8]
 8004ba6:	0091      	lsls	r1, r2, #2
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	6812      	ldr	r2, [r2, #0]
 8004bac:	430b      	orrs	r3, r1
 8004bae:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004bba:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bc2:	041a      	lsls	r2, r3, #16
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	430a      	orrs	r2, r1
 8004bca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004bd6:	fb02 f303 	mul.w	r3, r2, r3
 8004bda:	68ba      	ldr	r2, [r7, #8]
 8004bdc:	4413      	add	r3, r2
 8004bde:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004be8:	4b62      	ldr	r3, [pc, #392]	; (8004d74 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004bea:	4013      	ands	r3, r2
 8004bec:	68ba      	ldr	r2, [r7, #8]
 8004bee:	0091      	lsls	r1, r2, #2
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	6812      	ldr	r2, [r2, #0]
 8004bf4:	430b      	orrs	r3, r1
 8004bf6:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004c02:	fb02 f303 	mul.w	r3, r2, r3
 8004c06:	68ba      	ldr	r2, [r7, #8]
 8004c08:	4413      	add	r3, r2
 8004c0a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8004c14:	4b57      	ldr	r3, [pc, #348]	; (8004d74 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004c16:	4013      	ands	r3, r2
 8004c18:	68ba      	ldr	r2, [r7, #8]
 8004c1a:	0091      	lsls	r1, r2, #2
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	6812      	ldr	r2, [r2, #0]
 8004c20:	430b      	orrs	r3, r1
 8004c22:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004c2e:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c36:	041a      	lsls	r2, r3, #16
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	430a      	orrs	r2, r1
 8004c3e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c46:	005b      	lsls	r3, r3, #1
 8004c48:	68ba      	ldr	r2, [r7, #8]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004c56:	4b47      	ldr	r3, [pc, #284]	; (8004d74 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004c58:	4013      	ands	r3, r2
 8004c5a:	68ba      	ldr	r2, [r7, #8]
 8004c5c:	0091      	lsls	r1, r2, #2
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	6812      	ldr	r2, [r2, #0]
 8004c62:	430b      	orrs	r3, r1
 8004c64:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004c70:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c78:	041a      	lsls	r2, r3, #16
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004c8c:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c94:	061a      	lsls	r2, r3, #24
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	430a      	orrs	r2, r1
 8004c9c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ca4:	4b34      	ldr	r3, [pc, #208]	; (8004d78 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8004ca6:	4413      	add	r3, r2
 8004ca8:	009a      	lsls	r2, r3, #2
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	441a      	add	r2, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cc6:	00db      	lsls	r3, r3, #3
 8004cc8:	441a      	add	r2, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd6:	6879      	ldr	r1, [r7, #4]
 8004cd8:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8004cda:	fb01 f303 	mul.w	r3, r1, r3
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	441a      	add	r2, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cee:	6879      	ldr	r1, [r7, #4]
 8004cf0:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8004cf2:	fb01 f303 	mul.w	r3, r1, r3
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	441a      	add	r2, r3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d06:	6879      	ldr	r1, [r7, #4]
 8004d08:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8004d0a:	fb01 f303 	mul.w	r3, r1, r3
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	441a      	add	r2, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d22:	00db      	lsls	r3, r3, #3
 8004d24:	441a      	add	r2, r3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d36:	6879      	ldr	r1, [r7, #4]
 8004d38:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8004d3a:	fb01 f303 	mul.w	r3, r1, r3
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	441a      	add	r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d52:	6879      	ldr	r1, [r7, #4]
 8004d54:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8004d56:	fb01 f303 	mul.w	r3, r1, r3
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	441a      	add	r2, r3
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d6a:	4a04      	ldr	r2, [pc, #16]	; (8004d7c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d915      	bls.n	8004d9c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8004d70:	e006      	b.n	8004d80 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8004d72:	bf00      	nop
 8004d74:	ffff0003 	.word	0xffff0003
 8004d78:	10002b00 	.word	0x10002b00
 8004d7c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d86:	f043 0220 	orr.w	r2, r3, #32
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2203      	movs	r2, #3
 8004d94:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e010      	b.n	8004dbe <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004da0:	60fb      	str	r3, [r7, #12]
 8004da2:	e005      	b.n	8004db0 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2200      	movs	r2, #0
 8004da8:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	3304      	adds	r3, #4
 8004dae:	60fb      	str	r3, [r7, #12]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004db6:	68fa      	ldr	r2, [r7, #12]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d3f3      	bcc.n	8004da4 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3714      	adds	r7, #20
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr
 8004dca:	bf00      	nop

08004dcc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b089      	sub	sp, #36	; 0x24
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004dda:	4b89      	ldr	r3, [pc, #548]	; (8005000 <HAL_GPIO_Init+0x234>)
 8004ddc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004dde:	e194      	b.n	800510a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	2101      	movs	r1, #1
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	fa01 f303 	lsl.w	r3, r1, r3
 8004dec:	4013      	ands	r3, r2
 8004dee:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	f000 8186 	beq.w	8005104 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	f003 0303 	and.w	r3, r3, #3
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d005      	beq.n	8004e10 <HAL_GPIO_Init+0x44>
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	f003 0303 	and.w	r3, r3, #3
 8004e0c:	2b02      	cmp	r3, #2
 8004e0e:	d130      	bne.n	8004e72 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	005b      	lsls	r3, r3, #1
 8004e1a:	2203      	movs	r2, #3
 8004e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e20:	43db      	mvns	r3, r3
 8004e22:	69ba      	ldr	r2, [r7, #24]
 8004e24:	4013      	ands	r3, r2
 8004e26:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	68da      	ldr	r2, [r3, #12]
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	005b      	lsls	r3, r3, #1
 8004e30:	fa02 f303 	lsl.w	r3, r2, r3
 8004e34:	69ba      	ldr	r2, [r7, #24]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	69ba      	ldr	r2, [r7, #24]
 8004e3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004e46:	2201      	movs	r2, #1
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4e:	43db      	mvns	r3, r3
 8004e50:	69ba      	ldr	r2, [r7, #24]
 8004e52:	4013      	ands	r3, r2
 8004e54:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	091b      	lsrs	r3, r3, #4
 8004e5c:	f003 0201 	and.w	r2, r3, #1
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	fa02 f303 	lsl.w	r3, r2, r3
 8004e66:	69ba      	ldr	r2, [r7, #24]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	69ba      	ldr	r2, [r7, #24]
 8004e70:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	f003 0303 	and.w	r3, r3, #3
 8004e7a:	2b03      	cmp	r3, #3
 8004e7c:	d017      	beq.n	8004eae <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	005b      	lsls	r3, r3, #1
 8004e88:	2203      	movs	r2, #3
 8004e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e8e:	43db      	mvns	r3, r3
 8004e90:	69ba      	ldr	r2, [r7, #24]
 8004e92:	4013      	ands	r3, r2
 8004e94:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	689a      	ldr	r2, [r3, #8]
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	005b      	lsls	r3, r3, #1
 8004e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea2:	69ba      	ldr	r2, [r7, #24]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	69ba      	ldr	r2, [r7, #24]
 8004eac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	f003 0303 	and.w	r3, r3, #3
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d123      	bne.n	8004f02 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	08da      	lsrs	r2, r3, #3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	3208      	adds	r2, #8
 8004ec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	f003 0307 	and.w	r3, r3, #7
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	220f      	movs	r2, #15
 8004ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed6:	43db      	mvns	r3, r3
 8004ed8:	69ba      	ldr	r2, [r7, #24]
 8004eda:	4013      	ands	r3, r2
 8004edc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	691a      	ldr	r2, [r3, #16]
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	f003 0307 	and.w	r3, r3, #7
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	fa02 f303 	lsl.w	r3, r2, r3
 8004eee:	69ba      	ldr	r2, [r7, #24]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	08da      	lsrs	r2, r3, #3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	3208      	adds	r2, #8
 8004efc:	69b9      	ldr	r1, [r7, #24]
 8004efe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	005b      	lsls	r3, r3, #1
 8004f0c:	2203      	movs	r2, #3
 8004f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f12:	43db      	mvns	r3, r3
 8004f14:	69ba      	ldr	r2, [r7, #24]
 8004f16:	4013      	ands	r3, r2
 8004f18:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	f003 0203 	and.w	r2, r3, #3
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	005b      	lsls	r3, r3, #1
 8004f26:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2a:	69ba      	ldr	r2, [r7, #24]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	69ba      	ldr	r2, [r7, #24]
 8004f34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	f000 80e0 	beq.w	8005104 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f44:	4b2f      	ldr	r3, [pc, #188]	; (8005004 <HAL_GPIO_Init+0x238>)
 8004f46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f4a:	4a2e      	ldr	r2, [pc, #184]	; (8005004 <HAL_GPIO_Init+0x238>)
 8004f4c:	f043 0302 	orr.w	r3, r3, #2
 8004f50:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004f54:	4b2b      	ldr	r3, [pc, #172]	; (8005004 <HAL_GPIO_Init+0x238>)
 8004f56:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f5a:	f003 0302 	and.w	r3, r3, #2
 8004f5e:	60fb      	str	r3, [r7, #12]
 8004f60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f62:	4a29      	ldr	r2, [pc, #164]	; (8005008 <HAL_GPIO_Init+0x23c>)
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	089b      	lsrs	r3, r3, #2
 8004f68:	3302      	adds	r3, #2
 8004f6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	f003 0303 	and.w	r3, r3, #3
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	220f      	movs	r2, #15
 8004f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f7e:	43db      	mvns	r3, r3
 8004f80:	69ba      	ldr	r2, [r7, #24]
 8004f82:	4013      	ands	r3, r2
 8004f84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a20      	ldr	r2, [pc, #128]	; (800500c <HAL_GPIO_Init+0x240>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d052      	beq.n	8005034 <HAL_GPIO_Init+0x268>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a1f      	ldr	r2, [pc, #124]	; (8005010 <HAL_GPIO_Init+0x244>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d031      	beq.n	8004ffa <HAL_GPIO_Init+0x22e>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a1e      	ldr	r2, [pc, #120]	; (8005014 <HAL_GPIO_Init+0x248>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d02b      	beq.n	8004ff6 <HAL_GPIO_Init+0x22a>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a1d      	ldr	r2, [pc, #116]	; (8005018 <HAL_GPIO_Init+0x24c>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d025      	beq.n	8004ff2 <HAL_GPIO_Init+0x226>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a1c      	ldr	r2, [pc, #112]	; (800501c <HAL_GPIO_Init+0x250>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d01f      	beq.n	8004fee <HAL_GPIO_Init+0x222>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a1b      	ldr	r2, [pc, #108]	; (8005020 <HAL_GPIO_Init+0x254>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d019      	beq.n	8004fea <HAL_GPIO_Init+0x21e>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a1a      	ldr	r2, [pc, #104]	; (8005024 <HAL_GPIO_Init+0x258>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d013      	beq.n	8004fe6 <HAL_GPIO_Init+0x21a>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a19      	ldr	r2, [pc, #100]	; (8005028 <HAL_GPIO_Init+0x25c>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d00d      	beq.n	8004fe2 <HAL_GPIO_Init+0x216>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a18      	ldr	r2, [pc, #96]	; (800502c <HAL_GPIO_Init+0x260>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d007      	beq.n	8004fde <HAL_GPIO_Init+0x212>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a17      	ldr	r2, [pc, #92]	; (8005030 <HAL_GPIO_Init+0x264>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d101      	bne.n	8004fda <HAL_GPIO_Init+0x20e>
 8004fd6:	2309      	movs	r3, #9
 8004fd8:	e02d      	b.n	8005036 <HAL_GPIO_Init+0x26a>
 8004fda:	230a      	movs	r3, #10
 8004fdc:	e02b      	b.n	8005036 <HAL_GPIO_Init+0x26a>
 8004fde:	2308      	movs	r3, #8
 8004fe0:	e029      	b.n	8005036 <HAL_GPIO_Init+0x26a>
 8004fe2:	2307      	movs	r3, #7
 8004fe4:	e027      	b.n	8005036 <HAL_GPIO_Init+0x26a>
 8004fe6:	2306      	movs	r3, #6
 8004fe8:	e025      	b.n	8005036 <HAL_GPIO_Init+0x26a>
 8004fea:	2305      	movs	r3, #5
 8004fec:	e023      	b.n	8005036 <HAL_GPIO_Init+0x26a>
 8004fee:	2304      	movs	r3, #4
 8004ff0:	e021      	b.n	8005036 <HAL_GPIO_Init+0x26a>
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e01f      	b.n	8005036 <HAL_GPIO_Init+0x26a>
 8004ff6:	2302      	movs	r3, #2
 8004ff8:	e01d      	b.n	8005036 <HAL_GPIO_Init+0x26a>
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e01b      	b.n	8005036 <HAL_GPIO_Init+0x26a>
 8004ffe:	bf00      	nop
 8005000:	58000080 	.word	0x58000080
 8005004:	58024400 	.word	0x58024400
 8005008:	58000400 	.word	0x58000400
 800500c:	58020000 	.word	0x58020000
 8005010:	58020400 	.word	0x58020400
 8005014:	58020800 	.word	0x58020800
 8005018:	58020c00 	.word	0x58020c00
 800501c:	58021000 	.word	0x58021000
 8005020:	58021400 	.word	0x58021400
 8005024:	58021800 	.word	0x58021800
 8005028:	58021c00 	.word	0x58021c00
 800502c:	58022000 	.word	0x58022000
 8005030:	58022400 	.word	0x58022400
 8005034:	2300      	movs	r3, #0
 8005036:	69fa      	ldr	r2, [r7, #28]
 8005038:	f002 0203 	and.w	r2, r2, #3
 800503c:	0092      	lsls	r2, r2, #2
 800503e:	4093      	lsls	r3, r2
 8005040:	69ba      	ldr	r2, [r7, #24]
 8005042:	4313      	orrs	r3, r2
 8005044:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005046:	4938      	ldr	r1, [pc, #224]	; (8005128 <HAL_GPIO_Init+0x35c>)
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	089b      	lsrs	r3, r3, #2
 800504c:	3302      	adds	r3, #2
 800504e:	69ba      	ldr	r2, [r7, #24]
 8005050:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005054:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	43db      	mvns	r3, r3
 8005060:	69ba      	ldr	r2, [r7, #24]
 8005062:	4013      	ands	r3, r2
 8005064:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d003      	beq.n	800507a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005072:	69ba      	ldr	r2, [r7, #24]
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	4313      	orrs	r3, r2
 8005078:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800507a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005082:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	43db      	mvns	r3, r3
 800508e:	69ba      	ldr	r2, [r7, #24]
 8005090:	4013      	ands	r3, r2
 8005092:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800509c:	2b00      	cmp	r3, #0
 800509e:	d003      	beq.n	80050a8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80050a0:	69ba      	ldr	r2, [r7, #24]
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80050a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050ac:	69bb      	ldr	r3, [r7, #24]
 80050ae:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	43db      	mvns	r3, r3
 80050ba:	69ba      	ldr	r2, [r7, #24]
 80050bc:	4013      	ands	r3, r2
 80050be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d003      	beq.n	80050d4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80050cc:	69ba      	ldr	r2, [r7, #24]
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	69ba      	ldr	r2, [r7, #24]
 80050d8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	43db      	mvns	r3, r3
 80050e4:	69ba      	ldr	r2, [r7, #24]
 80050e6:	4013      	ands	r3, r2
 80050e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d003      	beq.n	80050fe <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80050f6:	69ba      	ldr	r2, [r7, #24]
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	69ba      	ldr	r2, [r7, #24]
 8005102:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	3301      	adds	r3, #1
 8005108:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	fa22 f303 	lsr.w	r3, r2, r3
 8005114:	2b00      	cmp	r3, #0
 8005116:	f47f ae63 	bne.w	8004de0 <HAL_GPIO_Init+0x14>
  }
}
 800511a:	bf00      	nop
 800511c:	bf00      	nop
 800511e:	3724      	adds	r7, #36	; 0x24
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr
 8005128:	58000400 	.word	0x58000400

0800512c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	460b      	mov	r3, r1
 8005136:	807b      	strh	r3, [r7, #2]
 8005138:	4613      	mov	r3, r2
 800513a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800513c:	787b      	ldrb	r3, [r7, #1]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d003      	beq.n	800514a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005142:	887a      	ldrh	r2, [r7, #2]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005148:	e003      	b.n	8005152 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800514a:	887b      	ldrh	r3, [r7, #2]
 800514c:	041a      	lsls	r2, r3, #16
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	619a      	str	r2, [r3, #24]
}
 8005152:	bf00      	nop
 8005154:	370c      	adds	r7, #12
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr
	...

08005160 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d101      	bne.n	8005172 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	e0bf      	b.n	80052f2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005178:	b2db      	uxtb	r3, r3
 800517a:	2b00      	cmp	r3, #0
 800517c:	d106      	bne.n	800518c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f7fc ff02 	bl	8001f90 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2202      	movs	r2, #2
 8005190:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	699a      	ldr	r2, [r3, #24]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80051a2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	6999      	ldr	r1, [r3, #24]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	685a      	ldr	r2, [r3, #4]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80051b8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	430a      	orrs	r2, r1
 80051c6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	6899      	ldr	r1, [r3, #8]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	4b4a      	ldr	r3, [pc, #296]	; (80052fc <HAL_LTDC_Init+0x19c>)
 80051d4:	400b      	ands	r3, r1
 80051d6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	695b      	ldr	r3, [r3, #20]
 80051dc:	041b      	lsls	r3, r3, #16
 80051de:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	6899      	ldr	r1, [r3, #8]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	699a      	ldr	r2, [r3, #24]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	431a      	orrs	r2, r3
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	430a      	orrs	r2, r1
 80051f4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68d9      	ldr	r1, [r3, #12]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	4b3e      	ldr	r3, [pc, #248]	; (80052fc <HAL_LTDC_Init+0x19c>)
 8005202:	400b      	ands	r3, r1
 8005204:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	69db      	ldr	r3, [r3, #28]
 800520a:	041b      	lsls	r3, r3, #16
 800520c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	68d9      	ldr	r1, [r3, #12]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a1a      	ldr	r2, [r3, #32]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	431a      	orrs	r2, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	430a      	orrs	r2, r1
 8005222:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	6919      	ldr	r1, [r3, #16]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	4b33      	ldr	r3, [pc, #204]	; (80052fc <HAL_LTDC_Init+0x19c>)
 8005230:	400b      	ands	r3, r1
 8005232:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005238:	041b      	lsls	r3, r3, #16
 800523a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	6919      	ldr	r1, [r3, #16]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	431a      	orrs	r2, r3
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	430a      	orrs	r2, r1
 8005250:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	6959      	ldr	r1, [r3, #20]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	4b27      	ldr	r3, [pc, #156]	; (80052fc <HAL_LTDC_Init+0x19c>)
 800525e:	400b      	ands	r3, r1
 8005260:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005266:	041b      	lsls	r3, r3, #16
 8005268:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	6959      	ldr	r1, [r3, #20]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	431a      	orrs	r2, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	430a      	orrs	r2, r1
 800527e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005286:	021b      	lsls	r3, r3, #8
 8005288:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005290:	041b      	lsls	r3, r3, #16
 8005292:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80052a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80052aa:	68ba      	ldr	r2, [r7, #8]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80052b6:	431a      	orrs	r2, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	430a      	orrs	r2, r1
 80052be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f042 0206 	orr.w	r2, r2, #6
 80052ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	699a      	ldr	r2, [r3, #24]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f042 0201 	orr.w	r2, r2, #1
 80052de:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3710      	adds	r7, #16
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	f000f800 	.word	0xf000f800

08005300 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005300:	b5b0      	push	{r4, r5, r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005312:	2b01      	cmp	r3, #1
 8005314:	d101      	bne.n	800531a <HAL_LTDC_ConfigLayer+0x1a>
 8005316:	2302      	movs	r3, #2
 8005318:	e02c      	b.n	8005374 <HAL_LTDC_ConfigLayer+0x74>
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2201      	movs	r2, #1
 800531e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2202      	movs	r2, #2
 8005326:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800532a:	68fa      	ldr	r2, [r7, #12]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2134      	movs	r1, #52	; 0x34
 8005330:	fb01 f303 	mul.w	r3, r1, r3
 8005334:	4413      	add	r3, r2
 8005336:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	4614      	mov	r4, r2
 800533e:	461d      	mov	r5, r3
 8005340:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005342:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005344:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005346:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005348:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800534a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800534c:	682b      	ldr	r3, [r5, #0]
 800534e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	68b9      	ldr	r1, [r7, #8]
 8005354:	68f8      	ldr	r0, [r7, #12]
 8005356:	f000 f811 	bl	800537c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	2201      	movs	r2, #1
 8005360:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2201      	movs	r2, #1
 8005366:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2200      	movs	r2, #0
 800536e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005372:	2300      	movs	r3, #0
}
 8005374:	4618      	mov	r0, r3
 8005376:	3710      	adds	r7, #16
 8005378:	46bd      	mov	sp, r7
 800537a:	bdb0      	pop	{r4, r5, r7, pc}

0800537c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800537c:	b480      	push	{r7}
 800537e:	b089      	sub	sp, #36	; 0x24
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	685a      	ldr	r2, [r3, #4]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	0c1b      	lsrs	r3, r3, #16
 8005394:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005398:	4413      	add	r3, r2
 800539a:	041b      	lsls	r3, r3, #16
 800539c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	461a      	mov	r2, r3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	01db      	lsls	r3, r3, #7
 80053a8:	4413      	add	r3, r2
 80053aa:	3384      	adds	r3, #132	; 0x84
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	68fa      	ldr	r2, [r7, #12]
 80053b0:	6812      	ldr	r2, [r2, #0]
 80053b2:	4611      	mov	r1, r2
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	01d2      	lsls	r2, r2, #7
 80053b8:	440a      	add	r2, r1
 80053ba:	3284      	adds	r2, #132	; 0x84
 80053bc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80053c0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	0c1b      	lsrs	r3, r3, #16
 80053ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80053d2:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80053d4:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4619      	mov	r1, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	01db      	lsls	r3, r3, #7
 80053e0:	440b      	add	r3, r1
 80053e2:	3384      	adds	r3, #132	; 0x84
 80053e4:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80053ea:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	68da      	ldr	r2, [r3, #12]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80053fa:	4413      	add	r3, r2
 80053fc:	041b      	lsls	r3, r3, #16
 80053fe:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	461a      	mov	r2, r3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	01db      	lsls	r3, r3, #7
 800540a:	4413      	add	r3, r2
 800540c:	3384      	adds	r3, #132	; 0x84
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	68fa      	ldr	r2, [r7, #12]
 8005412:	6812      	ldr	r2, [r2, #0]
 8005414:	4611      	mov	r1, r2
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	01d2      	lsls	r2, r2, #7
 800541a:	440a      	add	r2, r1
 800541c:	3284      	adds	r2, #132	; 0x84
 800541e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005422:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	689a      	ldr	r2, [r3, #8]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005432:	4413      	add	r3, r2
 8005434:	1c5a      	adds	r2, r3, #1
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4619      	mov	r1, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	01db      	lsls	r3, r3, #7
 8005440:	440b      	add	r3, r1
 8005442:	3384      	adds	r3, #132	; 0x84
 8005444:	4619      	mov	r1, r3
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	4313      	orrs	r3, r2
 800544a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	461a      	mov	r2, r3
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	01db      	lsls	r3, r3, #7
 8005456:	4413      	add	r3, r2
 8005458:	3384      	adds	r3, #132	; 0x84
 800545a:	691b      	ldr	r3, [r3, #16]
 800545c:	68fa      	ldr	r2, [r7, #12]
 800545e:	6812      	ldr	r2, [r2, #0]
 8005460:	4611      	mov	r1, r2
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	01d2      	lsls	r2, r2, #7
 8005466:	440a      	add	r2, r1
 8005468:	3284      	adds	r2, #132	; 0x84
 800546a:	f023 0307 	bic.w	r3, r3, #7
 800546e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	461a      	mov	r2, r3
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	01db      	lsls	r3, r3, #7
 800547a:	4413      	add	r3, r2
 800547c:	3384      	adds	r3, #132	; 0x84
 800547e:	461a      	mov	r2, r3
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800548c:	021b      	lsls	r3, r3, #8
 800548e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005496:	041b      	lsls	r3, r3, #16
 8005498:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	061b      	lsls	r3, r3, #24
 80054a0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	461a      	mov	r2, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	01db      	lsls	r3, r3, #7
 80054ac:	4413      	add	r3, r2
 80054ae:	3384      	adds	r3, #132	; 0x84
 80054b0:	699b      	ldr	r3, [r3, #24]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	461a      	mov	r2, r3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	01db      	lsls	r3, r3, #7
 80054bc:	4413      	add	r3, r2
 80054be:	3384      	adds	r3, #132	; 0x84
 80054c0:	461a      	mov	r2, r3
 80054c2:	2300      	movs	r3, #0
 80054c4:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80054cc:	461a      	mov	r2, r3
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	431a      	orrs	r2, r3
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	431a      	orrs	r2, r3
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4619      	mov	r1, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	01db      	lsls	r3, r3, #7
 80054e0:	440b      	add	r3, r1
 80054e2:	3384      	adds	r3, #132	; 0x84
 80054e4:	4619      	mov	r1, r3
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	461a      	mov	r2, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	01db      	lsls	r3, r3, #7
 80054f6:	4413      	add	r3, r2
 80054f8:	3384      	adds	r3, #132	; 0x84
 80054fa:	695b      	ldr	r3, [r3, #20]
 80054fc:	68fa      	ldr	r2, [r7, #12]
 80054fe:	6812      	ldr	r2, [r2, #0]
 8005500:	4611      	mov	r1, r2
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	01d2      	lsls	r2, r2, #7
 8005506:	440a      	add	r2, r1
 8005508:	3284      	adds	r2, #132	; 0x84
 800550a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800550e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	461a      	mov	r2, r3
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	01db      	lsls	r3, r3, #7
 800551a:	4413      	add	r3, r2
 800551c:	3384      	adds	r3, #132	; 0x84
 800551e:	461a      	mov	r2, r3
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	695b      	ldr	r3, [r3, #20]
 8005524:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	461a      	mov	r2, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	01db      	lsls	r3, r3, #7
 8005530:	4413      	add	r3, r2
 8005532:	3384      	adds	r3, #132	; 0x84
 8005534:	69da      	ldr	r2, [r3, #28]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4619      	mov	r1, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	01db      	lsls	r3, r3, #7
 8005540:	440b      	add	r3, r1
 8005542:	3384      	adds	r3, #132	; 0x84
 8005544:	4619      	mov	r1, r3
 8005546:	4b58      	ldr	r3, [pc, #352]	; (80056a8 <LTDC_SetConfig+0x32c>)
 8005548:	4013      	ands	r3, r2
 800554a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	69da      	ldr	r2, [r3, #28]
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	6a1b      	ldr	r3, [r3, #32]
 8005554:	68f9      	ldr	r1, [r7, #12]
 8005556:	6809      	ldr	r1, [r1, #0]
 8005558:	4608      	mov	r0, r1
 800555a:	6879      	ldr	r1, [r7, #4]
 800555c:	01c9      	lsls	r1, r1, #7
 800555e:	4401      	add	r1, r0
 8005560:	3184      	adds	r1, #132	; 0x84
 8005562:	4313      	orrs	r3, r2
 8005564:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	461a      	mov	r2, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	01db      	lsls	r3, r3, #7
 8005570:	4413      	add	r3, r2
 8005572:	3384      	adds	r3, #132	; 0x84
 8005574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	461a      	mov	r2, r3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	01db      	lsls	r3, r3, #7
 8005580:	4413      	add	r3, r2
 8005582:	3384      	adds	r3, #132	; 0x84
 8005584:	461a      	mov	r2, r3
 8005586:	2300      	movs	r3, #0
 8005588:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	461a      	mov	r2, r3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	01db      	lsls	r3, r3, #7
 8005594:	4413      	add	r3, r2
 8005596:	3384      	adds	r3, #132	; 0x84
 8005598:	461a      	mov	r2, r3
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	691b      	ldr	r3, [r3, #16]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d102      	bne.n	80055ae <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80055a8:	2304      	movs	r3, #4
 80055aa:	61fb      	str	r3, [r7, #28]
 80055ac:	e01b      	b.n	80055e6 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d102      	bne.n	80055bc <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80055b6:	2303      	movs	r3, #3
 80055b8:	61fb      	str	r3, [r7, #28]
 80055ba:	e014      	b.n	80055e6 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	2b04      	cmp	r3, #4
 80055c2:	d00b      	beq.n	80055dc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80055c8:	2b02      	cmp	r3, #2
 80055ca:	d007      	beq.n	80055dc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80055d0:	2b03      	cmp	r3, #3
 80055d2:	d003      	beq.n	80055dc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80055d8:	2b07      	cmp	r3, #7
 80055da:	d102      	bne.n	80055e2 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80055dc:	2302      	movs	r3, #2
 80055de:	61fb      	str	r3, [r7, #28]
 80055e0:	e001      	b.n	80055e6 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80055e2:	2301      	movs	r3, #1
 80055e4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	461a      	mov	r2, r3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	01db      	lsls	r3, r3, #7
 80055f0:	4413      	add	r3, r2
 80055f2:	3384      	adds	r3, #132	; 0x84
 80055f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	6812      	ldr	r2, [r2, #0]
 80055fa:	4611      	mov	r1, r2
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	01d2      	lsls	r2, r2, #7
 8005600:	440a      	add	r2, r1
 8005602:	3284      	adds	r2, #132	; 0x84
 8005604:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8005608:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800560e:	69fa      	ldr	r2, [r7, #28]
 8005610:	fb02 f303 	mul.w	r3, r2, r3
 8005614:	041a      	lsls	r2, r3, #16
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	6859      	ldr	r1, [r3, #4]
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	1acb      	subs	r3, r1, r3
 8005620:	69f9      	ldr	r1, [r7, #28]
 8005622:	fb01 f303 	mul.w	r3, r1, r3
 8005626:	3307      	adds	r3, #7
 8005628:	68f9      	ldr	r1, [r7, #12]
 800562a:	6809      	ldr	r1, [r1, #0]
 800562c:	4608      	mov	r0, r1
 800562e:	6879      	ldr	r1, [r7, #4]
 8005630:	01c9      	lsls	r1, r1, #7
 8005632:	4401      	add	r1, r0
 8005634:	3184      	adds	r1, #132	; 0x84
 8005636:	4313      	orrs	r3, r2
 8005638:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	461a      	mov	r2, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	01db      	lsls	r3, r3, #7
 8005644:	4413      	add	r3, r2
 8005646:	3384      	adds	r3, #132	; 0x84
 8005648:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4619      	mov	r1, r3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	01db      	lsls	r3, r3, #7
 8005654:	440b      	add	r3, r1
 8005656:	3384      	adds	r3, #132	; 0x84
 8005658:	4619      	mov	r1, r3
 800565a:	4b14      	ldr	r3, [pc, #80]	; (80056ac <LTDC_SetConfig+0x330>)
 800565c:	4013      	ands	r3, r2
 800565e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	461a      	mov	r2, r3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	01db      	lsls	r3, r3, #7
 800566a:	4413      	add	r3, r2
 800566c:	3384      	adds	r3, #132	; 0x84
 800566e:	461a      	mov	r2, r3
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005674:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	461a      	mov	r2, r3
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	01db      	lsls	r3, r3, #7
 8005680:	4413      	add	r3, r2
 8005682:	3384      	adds	r3, #132	; 0x84
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	6812      	ldr	r2, [r2, #0]
 800568a:	4611      	mov	r1, r2
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	01d2      	lsls	r2, r2, #7
 8005690:	440a      	add	r2, r1
 8005692:	3284      	adds	r2, #132	; 0x84
 8005694:	f043 0301 	orr.w	r3, r3, #1
 8005698:	6013      	str	r3, [r2, #0]
}
 800569a:	bf00      	nop
 800569c:	3724      	adds	r7, #36	; 0x24
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr
 80056a6:	bf00      	nop
 80056a8:	fffff8f8 	.word	0xfffff8f8
 80056ac:	fffff800 	.word	0xfffff800

080056b0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80056b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056b2:	b08f      	sub	sp, #60	; 0x3c
 80056b4:	af0a      	add	r7, sp, #40	; 0x28
 80056b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d101      	bne.n	80056c2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e116      	b.n	80058f0 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d106      	bne.n	80056e2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f7fc fecd 	bl	800247c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2203      	movs	r2, #3
 80056e6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d102      	bne.n	80056fc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4618      	mov	r0, r3
 8005702:	f006 f951 	bl	800b9a8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	603b      	str	r3, [r7, #0]
 800570c:	687e      	ldr	r6, [r7, #4]
 800570e:	466d      	mov	r5, sp
 8005710:	f106 0410 	add.w	r4, r6, #16
 8005714:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005716:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005718:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800571a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800571c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005720:	e885 0003 	stmia.w	r5, {r0, r1}
 8005724:	1d33      	adds	r3, r6, #4
 8005726:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005728:	6838      	ldr	r0, [r7, #0]
 800572a:	f006 f8cf 	bl	800b8cc <USB_CoreInit>
 800572e:	4603      	mov	r3, r0
 8005730:	2b00      	cmp	r3, #0
 8005732:	d005      	beq.n	8005740 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2202      	movs	r2, #2
 8005738:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	e0d7      	b.n	80058f0 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2100      	movs	r1, #0
 8005746:	4618      	mov	r0, r3
 8005748:	f006 f93f 	bl	800b9ca <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800574c:	2300      	movs	r3, #0
 800574e:	73fb      	strb	r3, [r7, #15]
 8005750:	e04a      	b.n	80057e8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005752:	7bfa      	ldrb	r2, [r7, #15]
 8005754:	6879      	ldr	r1, [r7, #4]
 8005756:	4613      	mov	r3, r2
 8005758:	00db      	lsls	r3, r3, #3
 800575a:	4413      	add	r3, r2
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	440b      	add	r3, r1
 8005760:	333d      	adds	r3, #61	; 0x3d
 8005762:	2201      	movs	r2, #1
 8005764:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005766:	7bfa      	ldrb	r2, [r7, #15]
 8005768:	6879      	ldr	r1, [r7, #4]
 800576a:	4613      	mov	r3, r2
 800576c:	00db      	lsls	r3, r3, #3
 800576e:	4413      	add	r3, r2
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	440b      	add	r3, r1
 8005774:	333c      	adds	r3, #60	; 0x3c
 8005776:	7bfa      	ldrb	r2, [r7, #15]
 8005778:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800577a:	7bfa      	ldrb	r2, [r7, #15]
 800577c:	7bfb      	ldrb	r3, [r7, #15]
 800577e:	b298      	uxth	r0, r3
 8005780:	6879      	ldr	r1, [r7, #4]
 8005782:	4613      	mov	r3, r2
 8005784:	00db      	lsls	r3, r3, #3
 8005786:	4413      	add	r3, r2
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	440b      	add	r3, r1
 800578c:	3356      	adds	r3, #86	; 0x56
 800578e:	4602      	mov	r2, r0
 8005790:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005792:	7bfa      	ldrb	r2, [r7, #15]
 8005794:	6879      	ldr	r1, [r7, #4]
 8005796:	4613      	mov	r3, r2
 8005798:	00db      	lsls	r3, r3, #3
 800579a:	4413      	add	r3, r2
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	440b      	add	r3, r1
 80057a0:	3340      	adds	r3, #64	; 0x40
 80057a2:	2200      	movs	r2, #0
 80057a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80057a6:	7bfa      	ldrb	r2, [r7, #15]
 80057a8:	6879      	ldr	r1, [r7, #4]
 80057aa:	4613      	mov	r3, r2
 80057ac:	00db      	lsls	r3, r3, #3
 80057ae:	4413      	add	r3, r2
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	440b      	add	r3, r1
 80057b4:	3344      	adds	r3, #68	; 0x44
 80057b6:	2200      	movs	r2, #0
 80057b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80057ba:	7bfa      	ldrb	r2, [r7, #15]
 80057bc:	6879      	ldr	r1, [r7, #4]
 80057be:	4613      	mov	r3, r2
 80057c0:	00db      	lsls	r3, r3, #3
 80057c2:	4413      	add	r3, r2
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	440b      	add	r3, r1
 80057c8:	3348      	adds	r3, #72	; 0x48
 80057ca:	2200      	movs	r2, #0
 80057cc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80057ce:	7bfa      	ldrb	r2, [r7, #15]
 80057d0:	6879      	ldr	r1, [r7, #4]
 80057d2:	4613      	mov	r3, r2
 80057d4:	00db      	lsls	r3, r3, #3
 80057d6:	4413      	add	r3, r2
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	440b      	add	r3, r1
 80057dc:	334c      	adds	r3, #76	; 0x4c
 80057de:	2200      	movs	r2, #0
 80057e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057e2:	7bfb      	ldrb	r3, [r7, #15]
 80057e4:	3301      	adds	r3, #1
 80057e6:	73fb      	strb	r3, [r7, #15]
 80057e8:	7bfa      	ldrb	r2, [r7, #15]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d3af      	bcc.n	8005752 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057f2:	2300      	movs	r3, #0
 80057f4:	73fb      	strb	r3, [r7, #15]
 80057f6:	e044      	b.n	8005882 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80057f8:	7bfa      	ldrb	r2, [r7, #15]
 80057fa:	6879      	ldr	r1, [r7, #4]
 80057fc:	4613      	mov	r3, r2
 80057fe:	00db      	lsls	r3, r3, #3
 8005800:	4413      	add	r3, r2
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	440b      	add	r3, r1
 8005806:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800580a:	2200      	movs	r2, #0
 800580c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800580e:	7bfa      	ldrb	r2, [r7, #15]
 8005810:	6879      	ldr	r1, [r7, #4]
 8005812:	4613      	mov	r3, r2
 8005814:	00db      	lsls	r3, r3, #3
 8005816:	4413      	add	r3, r2
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	440b      	add	r3, r1
 800581c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005820:	7bfa      	ldrb	r2, [r7, #15]
 8005822:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005824:	7bfa      	ldrb	r2, [r7, #15]
 8005826:	6879      	ldr	r1, [r7, #4]
 8005828:	4613      	mov	r3, r2
 800582a:	00db      	lsls	r3, r3, #3
 800582c:	4413      	add	r3, r2
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	440b      	add	r3, r1
 8005832:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005836:	2200      	movs	r2, #0
 8005838:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800583a:	7bfa      	ldrb	r2, [r7, #15]
 800583c:	6879      	ldr	r1, [r7, #4]
 800583e:	4613      	mov	r3, r2
 8005840:	00db      	lsls	r3, r3, #3
 8005842:	4413      	add	r3, r2
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	440b      	add	r3, r1
 8005848:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800584c:	2200      	movs	r2, #0
 800584e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005850:	7bfa      	ldrb	r2, [r7, #15]
 8005852:	6879      	ldr	r1, [r7, #4]
 8005854:	4613      	mov	r3, r2
 8005856:	00db      	lsls	r3, r3, #3
 8005858:	4413      	add	r3, r2
 800585a:	009b      	lsls	r3, r3, #2
 800585c:	440b      	add	r3, r1
 800585e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005862:	2200      	movs	r2, #0
 8005864:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005866:	7bfa      	ldrb	r2, [r7, #15]
 8005868:	6879      	ldr	r1, [r7, #4]
 800586a:	4613      	mov	r3, r2
 800586c:	00db      	lsls	r3, r3, #3
 800586e:	4413      	add	r3, r2
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	440b      	add	r3, r1
 8005874:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005878:	2200      	movs	r2, #0
 800587a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800587c:	7bfb      	ldrb	r3, [r7, #15]
 800587e:	3301      	adds	r3, #1
 8005880:	73fb      	strb	r3, [r7, #15]
 8005882:	7bfa      	ldrb	r2, [r7, #15]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	429a      	cmp	r2, r3
 800588a:	d3b5      	bcc.n	80057f8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	603b      	str	r3, [r7, #0]
 8005892:	687e      	ldr	r6, [r7, #4]
 8005894:	466d      	mov	r5, sp
 8005896:	f106 0410 	add.w	r4, r6, #16
 800589a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800589c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800589e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80058a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80058a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80058a6:	e885 0003 	stmia.w	r5, {r0, r1}
 80058aa:	1d33      	adds	r3, r6, #4
 80058ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80058ae:	6838      	ldr	r0, [r7, #0]
 80058b0:	f006 f8d8 	bl	800ba64 <USB_DevInit>
 80058b4:	4603      	mov	r3, r0
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d005      	beq.n	80058c6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2202      	movs	r2, #2
 80058be:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	e014      	b.n	80058f0 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2201      	movs	r2, #1
 80058d2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d102      	bne.n	80058e4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 f80a 	bl	80058f8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4618      	mov	r0, r3
 80058ea:	f006 fa96 	bl	800be1a <USB_DevDisconnect>

  return HAL_OK;
 80058ee:	2300      	movs	r3, #0
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3714      	adds	r7, #20
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080058f8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b085      	sub	sp, #20
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2201      	movs	r2, #1
 800590a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	699b      	ldr	r3, [r3, #24]
 800591a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005926:	4b05      	ldr	r3, [pc, #20]	; (800593c <HAL_PCDEx_ActivateLPM+0x44>)
 8005928:	4313      	orrs	r3, r2
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800592e:	2300      	movs	r3, #0
}
 8005930:	4618      	mov	r0, r3
 8005932:	3714      	adds	r7, #20
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr
 800593c:	10000003 	.word	0x10000003

08005940 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b084      	sub	sp, #16
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005948:	4b19      	ldr	r3, [pc, #100]	; (80059b0 <HAL_PWREx_ConfigSupply+0x70>)
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	f003 0304 	and.w	r3, r3, #4
 8005950:	2b04      	cmp	r3, #4
 8005952:	d00a      	beq.n	800596a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005954:	4b16      	ldr	r3, [pc, #88]	; (80059b0 <HAL_PWREx_ConfigSupply+0x70>)
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	f003 0307 	and.w	r3, r3, #7
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	429a      	cmp	r2, r3
 8005960:	d001      	beq.n	8005966 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e01f      	b.n	80059a6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005966:	2300      	movs	r3, #0
 8005968:	e01d      	b.n	80059a6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800596a:	4b11      	ldr	r3, [pc, #68]	; (80059b0 <HAL_PWREx_ConfigSupply+0x70>)
 800596c:	68db      	ldr	r3, [r3, #12]
 800596e:	f023 0207 	bic.w	r2, r3, #7
 8005972:	490f      	ldr	r1, [pc, #60]	; (80059b0 <HAL_PWREx_ConfigSupply+0x70>)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4313      	orrs	r3, r2
 8005978:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800597a:	f7fd f8c7 	bl	8002b0c <HAL_GetTick>
 800597e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005980:	e009      	b.n	8005996 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005982:	f7fd f8c3 	bl	8002b0c <HAL_GetTick>
 8005986:	4602      	mov	r2, r0
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	1ad3      	subs	r3, r2, r3
 800598c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005990:	d901      	bls.n	8005996 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	e007      	b.n	80059a6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005996:	4b06      	ldr	r3, [pc, #24]	; (80059b0 <HAL_PWREx_ConfigSupply+0x70>)
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800599e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059a2:	d1ee      	bne.n	8005982 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80059a4:	2300      	movs	r3, #0
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3710      	adds	r7, #16
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	58024800 	.word	0x58024800

080059b4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80059b4:	b480      	push	{r7}
 80059b6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80059b8:	4b05      	ldr	r3, [pc, #20]	; (80059d0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	4a04      	ldr	r2, [pc, #16]	; (80059d0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80059be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80059c2:	60d3      	str	r3, [r2, #12]
}
 80059c4:	bf00      	nop
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop
 80059d0:	58024800 	.word	0x58024800

080059d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b08c      	sub	sp, #48	; 0x30
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d102      	bne.n	80059e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	f000 bc48 	b.w	8006278 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 0301 	and.w	r3, r3, #1
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	f000 8088 	beq.w	8005b06 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059f6:	4b99      	ldr	r3, [pc, #612]	; (8005c5c <HAL_RCC_OscConfig+0x288>)
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80059fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005a00:	4b96      	ldr	r3, [pc, #600]	; (8005c5c <HAL_RCC_OscConfig+0x288>)
 8005a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a04:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a08:	2b10      	cmp	r3, #16
 8005a0a:	d007      	beq.n	8005a1c <HAL_RCC_OscConfig+0x48>
 8005a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a0e:	2b18      	cmp	r3, #24
 8005a10:	d111      	bne.n	8005a36 <HAL_RCC_OscConfig+0x62>
 8005a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a14:	f003 0303 	and.w	r3, r3, #3
 8005a18:	2b02      	cmp	r3, #2
 8005a1a:	d10c      	bne.n	8005a36 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a1c:	4b8f      	ldr	r3, [pc, #572]	; (8005c5c <HAL_RCC_OscConfig+0x288>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d06d      	beq.n	8005b04 <HAL_RCC_OscConfig+0x130>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d169      	bne.n	8005b04 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	f000 bc21 	b.w	8006278 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a3e:	d106      	bne.n	8005a4e <HAL_RCC_OscConfig+0x7a>
 8005a40:	4b86      	ldr	r3, [pc, #536]	; (8005c5c <HAL_RCC_OscConfig+0x288>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a85      	ldr	r2, [pc, #532]	; (8005c5c <HAL_RCC_OscConfig+0x288>)
 8005a46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a4a:	6013      	str	r3, [r2, #0]
 8005a4c:	e02e      	b.n	8005aac <HAL_RCC_OscConfig+0xd8>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d10c      	bne.n	8005a70 <HAL_RCC_OscConfig+0x9c>
 8005a56:	4b81      	ldr	r3, [pc, #516]	; (8005c5c <HAL_RCC_OscConfig+0x288>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a80      	ldr	r2, [pc, #512]	; (8005c5c <HAL_RCC_OscConfig+0x288>)
 8005a5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a60:	6013      	str	r3, [r2, #0]
 8005a62:	4b7e      	ldr	r3, [pc, #504]	; (8005c5c <HAL_RCC_OscConfig+0x288>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a7d      	ldr	r2, [pc, #500]	; (8005c5c <HAL_RCC_OscConfig+0x288>)
 8005a68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a6c:	6013      	str	r3, [r2, #0]
 8005a6e:	e01d      	b.n	8005aac <HAL_RCC_OscConfig+0xd8>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a78:	d10c      	bne.n	8005a94 <HAL_RCC_OscConfig+0xc0>
 8005a7a:	4b78      	ldr	r3, [pc, #480]	; (8005c5c <HAL_RCC_OscConfig+0x288>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a77      	ldr	r2, [pc, #476]	; (8005c5c <HAL_RCC_OscConfig+0x288>)
 8005a80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a84:	6013      	str	r3, [r2, #0]
 8005a86:	4b75      	ldr	r3, [pc, #468]	; (8005c5c <HAL_RCC_OscConfig+0x288>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a74      	ldr	r2, [pc, #464]	; (8005c5c <HAL_RCC_OscConfig+0x288>)
 8005a8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a90:	6013      	str	r3, [r2, #0]
 8005a92:	e00b      	b.n	8005aac <HAL_RCC_OscConfig+0xd8>
 8005a94:	4b71      	ldr	r3, [pc, #452]	; (8005c5c <HAL_RCC_OscConfig+0x288>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a70      	ldr	r2, [pc, #448]	; (8005c5c <HAL_RCC_OscConfig+0x288>)
 8005a9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a9e:	6013      	str	r3, [r2, #0]
 8005aa0:	4b6e      	ldr	r3, [pc, #440]	; (8005c5c <HAL_RCC_OscConfig+0x288>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a6d      	ldr	r2, [pc, #436]	; (8005c5c <HAL_RCC_OscConfig+0x288>)
 8005aa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005aaa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d013      	beq.n	8005adc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ab4:	f7fd f82a 	bl	8002b0c <HAL_GetTick>
 8005ab8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005aba:	e008      	b.n	8005ace <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005abc:	f7fd f826 	bl	8002b0c <HAL_GetTick>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	2b64      	cmp	r3, #100	; 0x64
 8005ac8:	d901      	bls.n	8005ace <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	e3d4      	b.n	8006278 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005ace:	4b63      	ldr	r3, [pc, #396]	; (8005c5c <HAL_RCC_OscConfig+0x288>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d0f0      	beq.n	8005abc <HAL_RCC_OscConfig+0xe8>
 8005ada:	e014      	b.n	8005b06 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005adc:	f7fd f816 	bl	8002b0c <HAL_GetTick>
 8005ae0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005ae2:	e008      	b.n	8005af6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ae4:	f7fd f812 	bl	8002b0c <HAL_GetTick>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aec:	1ad3      	subs	r3, r2, r3
 8005aee:	2b64      	cmp	r3, #100	; 0x64
 8005af0:	d901      	bls.n	8005af6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005af2:	2303      	movs	r3, #3
 8005af4:	e3c0      	b.n	8006278 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005af6:	4b59      	ldr	r3, [pc, #356]	; (8005c5c <HAL_RCC_OscConfig+0x288>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d1f0      	bne.n	8005ae4 <HAL_RCC_OscConfig+0x110>
 8005b02:	e000      	b.n	8005b06 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 0302 	and.w	r3, r3, #2
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	f000 80ca 	beq.w	8005ca8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b14:	4b51      	ldr	r3, [pc, #324]	; (8005c5c <HAL_RCC_OscConfig+0x288>)
 8005b16:	691b      	ldr	r3, [r3, #16]
 8005b18:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b1c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005b1e:	4b4f      	ldr	r3, [pc, #316]	; (8005c5c <HAL_RCC_OscConfig+0x288>)
 8005b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b22:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005b24:	6a3b      	ldr	r3, [r7, #32]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d007      	beq.n	8005b3a <HAL_RCC_OscConfig+0x166>
 8005b2a:	6a3b      	ldr	r3, [r7, #32]
 8005b2c:	2b18      	cmp	r3, #24
 8005b2e:	d156      	bne.n	8005bde <HAL_RCC_OscConfig+0x20a>
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	f003 0303 	and.w	r3, r3, #3
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d151      	bne.n	8005bde <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b3a:	4b48      	ldr	r3, [pc, #288]	; (8005c5c <HAL_RCC_OscConfig+0x288>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 0304 	and.w	r3, r3, #4
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d005      	beq.n	8005b52 <HAL_RCC_OscConfig+0x17e>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d101      	bne.n	8005b52 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e392      	b.n	8006278 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005b52:	4b42      	ldr	r3, [pc, #264]	; (8005c5c <HAL_RCC_OscConfig+0x288>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f023 0219 	bic.w	r2, r3, #25
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	493f      	ldr	r1, [pc, #252]	; (8005c5c <HAL_RCC_OscConfig+0x288>)
 8005b60:	4313      	orrs	r3, r2
 8005b62:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b64:	f7fc ffd2 	bl	8002b0c <HAL_GetTick>
 8005b68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b6a:	e008      	b.n	8005b7e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b6c:	f7fc ffce 	bl	8002b0c <HAL_GetTick>
 8005b70:	4602      	mov	r2, r0
 8005b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b74:	1ad3      	subs	r3, r2, r3
 8005b76:	2b02      	cmp	r3, #2
 8005b78:	d901      	bls.n	8005b7e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005b7a:	2303      	movs	r3, #3
 8005b7c:	e37c      	b.n	8006278 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b7e:	4b37      	ldr	r3, [pc, #220]	; (8005c5c <HAL_RCC_OscConfig+0x288>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f003 0304 	and.w	r3, r3, #4
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d0f0      	beq.n	8005b6c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b8a:	f7fc ffef 	bl	8002b6c <HAL_GetREVID>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	f241 0203 	movw	r2, #4099	; 0x1003
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d817      	bhi.n	8005bc8 <HAL_RCC_OscConfig+0x1f4>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	691b      	ldr	r3, [r3, #16]
 8005b9c:	2b40      	cmp	r3, #64	; 0x40
 8005b9e:	d108      	bne.n	8005bb2 <HAL_RCC_OscConfig+0x1de>
 8005ba0:	4b2e      	ldr	r3, [pc, #184]	; (8005c5c <HAL_RCC_OscConfig+0x288>)
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005ba8:	4a2c      	ldr	r2, [pc, #176]	; (8005c5c <HAL_RCC_OscConfig+0x288>)
 8005baa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bae:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005bb0:	e07a      	b.n	8005ca8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bb2:	4b2a      	ldr	r3, [pc, #168]	; (8005c5c <HAL_RCC_OscConfig+0x288>)
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	031b      	lsls	r3, r3, #12
 8005bc0:	4926      	ldr	r1, [pc, #152]	; (8005c5c <HAL_RCC_OscConfig+0x288>)
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005bc6:	e06f      	b.n	8005ca8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bc8:	4b24      	ldr	r3, [pc, #144]	; (8005c5c <HAL_RCC_OscConfig+0x288>)
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	691b      	ldr	r3, [r3, #16]
 8005bd4:	061b      	lsls	r3, r3, #24
 8005bd6:	4921      	ldr	r1, [pc, #132]	; (8005c5c <HAL_RCC_OscConfig+0x288>)
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005bdc:	e064      	b.n	8005ca8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d047      	beq.n	8005c76 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005be6:	4b1d      	ldr	r3, [pc, #116]	; (8005c5c <HAL_RCC_OscConfig+0x288>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f023 0219 	bic.w	r2, r3, #25
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	491a      	ldr	r1, [pc, #104]	; (8005c5c <HAL_RCC_OscConfig+0x288>)
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bf8:	f7fc ff88 	bl	8002b0c <HAL_GetTick>
 8005bfc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005bfe:	e008      	b.n	8005c12 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c00:	f7fc ff84 	bl	8002b0c <HAL_GetTick>
 8005c04:	4602      	mov	r2, r0
 8005c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c08:	1ad3      	subs	r3, r2, r3
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	d901      	bls.n	8005c12 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005c0e:	2303      	movs	r3, #3
 8005c10:	e332      	b.n	8006278 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c12:	4b12      	ldr	r3, [pc, #72]	; (8005c5c <HAL_RCC_OscConfig+0x288>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 0304 	and.w	r3, r3, #4
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d0f0      	beq.n	8005c00 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c1e:	f7fc ffa5 	bl	8002b6c <HAL_GetREVID>
 8005c22:	4603      	mov	r3, r0
 8005c24:	f241 0203 	movw	r2, #4099	; 0x1003
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d819      	bhi.n	8005c60 <HAL_RCC_OscConfig+0x28c>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	2b40      	cmp	r3, #64	; 0x40
 8005c32:	d108      	bne.n	8005c46 <HAL_RCC_OscConfig+0x272>
 8005c34:	4b09      	ldr	r3, [pc, #36]	; (8005c5c <HAL_RCC_OscConfig+0x288>)
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005c3c:	4a07      	ldr	r2, [pc, #28]	; (8005c5c <HAL_RCC_OscConfig+0x288>)
 8005c3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c42:	6053      	str	r3, [r2, #4]
 8005c44:	e030      	b.n	8005ca8 <HAL_RCC_OscConfig+0x2d4>
 8005c46:	4b05      	ldr	r3, [pc, #20]	; (8005c5c <HAL_RCC_OscConfig+0x288>)
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	031b      	lsls	r3, r3, #12
 8005c54:	4901      	ldr	r1, [pc, #4]	; (8005c5c <HAL_RCC_OscConfig+0x288>)
 8005c56:	4313      	orrs	r3, r2
 8005c58:	604b      	str	r3, [r1, #4]
 8005c5a:	e025      	b.n	8005ca8 <HAL_RCC_OscConfig+0x2d4>
 8005c5c:	58024400 	.word	0x58024400
 8005c60:	4b9a      	ldr	r3, [pc, #616]	; (8005ecc <HAL_RCC_OscConfig+0x4f8>)
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	061b      	lsls	r3, r3, #24
 8005c6e:	4997      	ldr	r1, [pc, #604]	; (8005ecc <HAL_RCC_OscConfig+0x4f8>)
 8005c70:	4313      	orrs	r3, r2
 8005c72:	604b      	str	r3, [r1, #4]
 8005c74:	e018      	b.n	8005ca8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c76:	4b95      	ldr	r3, [pc, #596]	; (8005ecc <HAL_RCC_OscConfig+0x4f8>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a94      	ldr	r2, [pc, #592]	; (8005ecc <HAL_RCC_OscConfig+0x4f8>)
 8005c7c:	f023 0301 	bic.w	r3, r3, #1
 8005c80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c82:	f7fc ff43 	bl	8002b0c <HAL_GetTick>
 8005c86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005c88:	e008      	b.n	8005c9c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c8a:	f7fc ff3f 	bl	8002b0c <HAL_GetTick>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c92:	1ad3      	subs	r3, r2, r3
 8005c94:	2b02      	cmp	r3, #2
 8005c96:	d901      	bls.n	8005c9c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005c98:	2303      	movs	r3, #3
 8005c9a:	e2ed      	b.n	8006278 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005c9c:	4b8b      	ldr	r3, [pc, #556]	; (8005ecc <HAL_RCC_OscConfig+0x4f8>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f003 0304 	and.w	r3, r3, #4
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d1f0      	bne.n	8005c8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f003 0310 	and.w	r3, r3, #16
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	f000 80a9 	beq.w	8005e08 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005cb6:	4b85      	ldr	r3, [pc, #532]	; (8005ecc <HAL_RCC_OscConfig+0x4f8>)
 8005cb8:	691b      	ldr	r3, [r3, #16]
 8005cba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005cbe:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005cc0:	4b82      	ldr	r3, [pc, #520]	; (8005ecc <HAL_RCC_OscConfig+0x4f8>)
 8005cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cc4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	2b08      	cmp	r3, #8
 8005cca:	d007      	beq.n	8005cdc <HAL_RCC_OscConfig+0x308>
 8005ccc:	69bb      	ldr	r3, [r7, #24]
 8005cce:	2b18      	cmp	r3, #24
 8005cd0:	d13a      	bne.n	8005d48 <HAL_RCC_OscConfig+0x374>
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	f003 0303 	and.w	r3, r3, #3
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d135      	bne.n	8005d48 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005cdc:	4b7b      	ldr	r3, [pc, #492]	; (8005ecc <HAL_RCC_OscConfig+0x4f8>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d005      	beq.n	8005cf4 <HAL_RCC_OscConfig+0x320>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	69db      	ldr	r3, [r3, #28]
 8005cec:	2b80      	cmp	r3, #128	; 0x80
 8005cee:	d001      	beq.n	8005cf4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e2c1      	b.n	8006278 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005cf4:	f7fc ff3a 	bl	8002b6c <HAL_GetREVID>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	f241 0203 	movw	r2, #4099	; 0x1003
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d817      	bhi.n	8005d32 <HAL_RCC_OscConfig+0x35e>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a1b      	ldr	r3, [r3, #32]
 8005d06:	2b20      	cmp	r3, #32
 8005d08:	d108      	bne.n	8005d1c <HAL_RCC_OscConfig+0x348>
 8005d0a:	4b70      	ldr	r3, [pc, #448]	; (8005ecc <HAL_RCC_OscConfig+0x4f8>)
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005d12:	4a6e      	ldr	r2, [pc, #440]	; (8005ecc <HAL_RCC_OscConfig+0x4f8>)
 8005d14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d18:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005d1a:	e075      	b.n	8005e08 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005d1c:	4b6b      	ldr	r3, [pc, #428]	; (8005ecc <HAL_RCC_OscConfig+0x4f8>)
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6a1b      	ldr	r3, [r3, #32]
 8005d28:	069b      	lsls	r3, r3, #26
 8005d2a:	4968      	ldr	r1, [pc, #416]	; (8005ecc <HAL_RCC_OscConfig+0x4f8>)
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005d30:	e06a      	b.n	8005e08 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005d32:	4b66      	ldr	r3, [pc, #408]	; (8005ecc <HAL_RCC_OscConfig+0x4f8>)
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6a1b      	ldr	r3, [r3, #32]
 8005d3e:	061b      	lsls	r3, r3, #24
 8005d40:	4962      	ldr	r1, [pc, #392]	; (8005ecc <HAL_RCC_OscConfig+0x4f8>)
 8005d42:	4313      	orrs	r3, r2
 8005d44:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005d46:	e05f      	b.n	8005e08 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	69db      	ldr	r3, [r3, #28]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d042      	beq.n	8005dd6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005d50:	4b5e      	ldr	r3, [pc, #376]	; (8005ecc <HAL_RCC_OscConfig+0x4f8>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a5d      	ldr	r2, [pc, #372]	; (8005ecc <HAL_RCC_OscConfig+0x4f8>)
 8005d56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d5c:	f7fc fed6 	bl	8002b0c <HAL_GetTick>
 8005d60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005d62:	e008      	b.n	8005d76 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005d64:	f7fc fed2 	bl	8002b0c <HAL_GetTick>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6c:	1ad3      	subs	r3, r2, r3
 8005d6e:	2b02      	cmp	r3, #2
 8005d70:	d901      	bls.n	8005d76 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005d72:	2303      	movs	r3, #3
 8005d74:	e280      	b.n	8006278 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005d76:	4b55      	ldr	r3, [pc, #340]	; (8005ecc <HAL_RCC_OscConfig+0x4f8>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d0f0      	beq.n	8005d64 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005d82:	f7fc fef3 	bl	8002b6c <HAL_GetREVID>
 8005d86:	4603      	mov	r3, r0
 8005d88:	f241 0203 	movw	r2, #4099	; 0x1003
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d817      	bhi.n	8005dc0 <HAL_RCC_OscConfig+0x3ec>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6a1b      	ldr	r3, [r3, #32]
 8005d94:	2b20      	cmp	r3, #32
 8005d96:	d108      	bne.n	8005daa <HAL_RCC_OscConfig+0x3d6>
 8005d98:	4b4c      	ldr	r3, [pc, #304]	; (8005ecc <HAL_RCC_OscConfig+0x4f8>)
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005da0:	4a4a      	ldr	r2, [pc, #296]	; (8005ecc <HAL_RCC_OscConfig+0x4f8>)
 8005da2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005da6:	6053      	str	r3, [r2, #4]
 8005da8:	e02e      	b.n	8005e08 <HAL_RCC_OscConfig+0x434>
 8005daa:	4b48      	ldr	r3, [pc, #288]	; (8005ecc <HAL_RCC_OscConfig+0x4f8>)
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6a1b      	ldr	r3, [r3, #32]
 8005db6:	069b      	lsls	r3, r3, #26
 8005db8:	4944      	ldr	r1, [pc, #272]	; (8005ecc <HAL_RCC_OscConfig+0x4f8>)
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	604b      	str	r3, [r1, #4]
 8005dbe:	e023      	b.n	8005e08 <HAL_RCC_OscConfig+0x434>
 8005dc0:	4b42      	ldr	r3, [pc, #264]	; (8005ecc <HAL_RCC_OscConfig+0x4f8>)
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6a1b      	ldr	r3, [r3, #32]
 8005dcc:	061b      	lsls	r3, r3, #24
 8005dce:	493f      	ldr	r1, [pc, #252]	; (8005ecc <HAL_RCC_OscConfig+0x4f8>)
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	60cb      	str	r3, [r1, #12]
 8005dd4:	e018      	b.n	8005e08 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005dd6:	4b3d      	ldr	r3, [pc, #244]	; (8005ecc <HAL_RCC_OscConfig+0x4f8>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a3c      	ldr	r2, [pc, #240]	; (8005ecc <HAL_RCC_OscConfig+0x4f8>)
 8005ddc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005de0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005de2:	f7fc fe93 	bl	8002b0c <HAL_GetTick>
 8005de6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005de8:	e008      	b.n	8005dfc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005dea:	f7fc fe8f 	bl	8002b0c <HAL_GetTick>
 8005dee:	4602      	mov	r2, r0
 8005df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df2:	1ad3      	subs	r3, r2, r3
 8005df4:	2b02      	cmp	r3, #2
 8005df6:	d901      	bls.n	8005dfc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005df8:	2303      	movs	r3, #3
 8005dfa:	e23d      	b.n	8006278 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005dfc:	4b33      	ldr	r3, [pc, #204]	; (8005ecc <HAL_RCC_OscConfig+0x4f8>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d1f0      	bne.n	8005dea <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f003 0308 	and.w	r3, r3, #8
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d036      	beq.n	8005e82 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	695b      	ldr	r3, [r3, #20]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d019      	beq.n	8005e50 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e1c:	4b2b      	ldr	r3, [pc, #172]	; (8005ecc <HAL_RCC_OscConfig+0x4f8>)
 8005e1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e20:	4a2a      	ldr	r2, [pc, #168]	; (8005ecc <HAL_RCC_OscConfig+0x4f8>)
 8005e22:	f043 0301 	orr.w	r3, r3, #1
 8005e26:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e28:	f7fc fe70 	bl	8002b0c <HAL_GetTick>
 8005e2c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005e2e:	e008      	b.n	8005e42 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e30:	f7fc fe6c 	bl	8002b0c <HAL_GetTick>
 8005e34:	4602      	mov	r2, r0
 8005e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e38:	1ad3      	subs	r3, r2, r3
 8005e3a:	2b02      	cmp	r3, #2
 8005e3c:	d901      	bls.n	8005e42 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005e3e:	2303      	movs	r3, #3
 8005e40:	e21a      	b.n	8006278 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005e42:	4b22      	ldr	r3, [pc, #136]	; (8005ecc <HAL_RCC_OscConfig+0x4f8>)
 8005e44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e46:	f003 0302 	and.w	r3, r3, #2
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d0f0      	beq.n	8005e30 <HAL_RCC_OscConfig+0x45c>
 8005e4e:	e018      	b.n	8005e82 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e50:	4b1e      	ldr	r3, [pc, #120]	; (8005ecc <HAL_RCC_OscConfig+0x4f8>)
 8005e52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e54:	4a1d      	ldr	r2, [pc, #116]	; (8005ecc <HAL_RCC_OscConfig+0x4f8>)
 8005e56:	f023 0301 	bic.w	r3, r3, #1
 8005e5a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e5c:	f7fc fe56 	bl	8002b0c <HAL_GetTick>
 8005e60:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005e62:	e008      	b.n	8005e76 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e64:	f7fc fe52 	bl	8002b0c <HAL_GetTick>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6c:	1ad3      	subs	r3, r2, r3
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	d901      	bls.n	8005e76 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005e72:	2303      	movs	r3, #3
 8005e74:	e200      	b.n	8006278 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005e76:	4b15      	ldr	r3, [pc, #84]	; (8005ecc <HAL_RCC_OscConfig+0x4f8>)
 8005e78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e7a:	f003 0302 	and.w	r3, r3, #2
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d1f0      	bne.n	8005e64 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f003 0320 	and.w	r3, r3, #32
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d039      	beq.n	8005f02 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	699b      	ldr	r3, [r3, #24]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d01c      	beq.n	8005ed0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005e96:	4b0d      	ldr	r3, [pc, #52]	; (8005ecc <HAL_RCC_OscConfig+0x4f8>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a0c      	ldr	r2, [pc, #48]	; (8005ecc <HAL_RCC_OscConfig+0x4f8>)
 8005e9c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005ea0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005ea2:	f7fc fe33 	bl	8002b0c <HAL_GetTick>
 8005ea6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005ea8:	e008      	b.n	8005ebc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005eaa:	f7fc fe2f 	bl	8002b0c <HAL_GetTick>
 8005eae:	4602      	mov	r2, r0
 8005eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb2:	1ad3      	subs	r3, r2, r3
 8005eb4:	2b02      	cmp	r3, #2
 8005eb6:	d901      	bls.n	8005ebc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005eb8:	2303      	movs	r3, #3
 8005eba:	e1dd      	b.n	8006278 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005ebc:	4b03      	ldr	r3, [pc, #12]	; (8005ecc <HAL_RCC_OscConfig+0x4f8>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d0f0      	beq.n	8005eaa <HAL_RCC_OscConfig+0x4d6>
 8005ec8:	e01b      	b.n	8005f02 <HAL_RCC_OscConfig+0x52e>
 8005eca:	bf00      	nop
 8005ecc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005ed0:	4b9b      	ldr	r3, [pc, #620]	; (8006140 <HAL_RCC_OscConfig+0x76c>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a9a      	ldr	r2, [pc, #616]	; (8006140 <HAL_RCC_OscConfig+0x76c>)
 8005ed6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005eda:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005edc:	f7fc fe16 	bl	8002b0c <HAL_GetTick>
 8005ee0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005ee2:	e008      	b.n	8005ef6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005ee4:	f7fc fe12 	bl	8002b0c <HAL_GetTick>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eec:	1ad3      	subs	r3, r2, r3
 8005eee:	2b02      	cmp	r3, #2
 8005ef0:	d901      	bls.n	8005ef6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005ef2:	2303      	movs	r3, #3
 8005ef4:	e1c0      	b.n	8006278 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005ef6:	4b92      	ldr	r3, [pc, #584]	; (8006140 <HAL_RCC_OscConfig+0x76c>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d1f0      	bne.n	8005ee4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f003 0304 	and.w	r3, r3, #4
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	f000 8081 	beq.w	8006012 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005f10:	4b8c      	ldr	r3, [pc, #560]	; (8006144 <HAL_RCC_OscConfig+0x770>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a8b      	ldr	r2, [pc, #556]	; (8006144 <HAL_RCC_OscConfig+0x770>)
 8005f16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f1a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005f1c:	f7fc fdf6 	bl	8002b0c <HAL_GetTick>
 8005f20:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f22:	e008      	b.n	8005f36 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f24:	f7fc fdf2 	bl	8002b0c <HAL_GetTick>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2c:	1ad3      	subs	r3, r2, r3
 8005f2e:	2b64      	cmp	r3, #100	; 0x64
 8005f30:	d901      	bls.n	8005f36 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005f32:	2303      	movs	r3, #3
 8005f34:	e1a0      	b.n	8006278 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f36:	4b83      	ldr	r3, [pc, #524]	; (8006144 <HAL_RCC_OscConfig+0x770>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d0f0      	beq.n	8005f24 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d106      	bne.n	8005f58 <HAL_RCC_OscConfig+0x584>
 8005f4a:	4b7d      	ldr	r3, [pc, #500]	; (8006140 <HAL_RCC_OscConfig+0x76c>)
 8005f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f4e:	4a7c      	ldr	r2, [pc, #496]	; (8006140 <HAL_RCC_OscConfig+0x76c>)
 8005f50:	f043 0301 	orr.w	r3, r3, #1
 8005f54:	6713      	str	r3, [r2, #112]	; 0x70
 8005f56:	e02d      	b.n	8005fb4 <HAL_RCC_OscConfig+0x5e0>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d10c      	bne.n	8005f7a <HAL_RCC_OscConfig+0x5a6>
 8005f60:	4b77      	ldr	r3, [pc, #476]	; (8006140 <HAL_RCC_OscConfig+0x76c>)
 8005f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f64:	4a76      	ldr	r2, [pc, #472]	; (8006140 <HAL_RCC_OscConfig+0x76c>)
 8005f66:	f023 0301 	bic.w	r3, r3, #1
 8005f6a:	6713      	str	r3, [r2, #112]	; 0x70
 8005f6c:	4b74      	ldr	r3, [pc, #464]	; (8006140 <HAL_RCC_OscConfig+0x76c>)
 8005f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f70:	4a73      	ldr	r2, [pc, #460]	; (8006140 <HAL_RCC_OscConfig+0x76c>)
 8005f72:	f023 0304 	bic.w	r3, r3, #4
 8005f76:	6713      	str	r3, [r2, #112]	; 0x70
 8005f78:	e01c      	b.n	8005fb4 <HAL_RCC_OscConfig+0x5e0>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	2b05      	cmp	r3, #5
 8005f80:	d10c      	bne.n	8005f9c <HAL_RCC_OscConfig+0x5c8>
 8005f82:	4b6f      	ldr	r3, [pc, #444]	; (8006140 <HAL_RCC_OscConfig+0x76c>)
 8005f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f86:	4a6e      	ldr	r2, [pc, #440]	; (8006140 <HAL_RCC_OscConfig+0x76c>)
 8005f88:	f043 0304 	orr.w	r3, r3, #4
 8005f8c:	6713      	str	r3, [r2, #112]	; 0x70
 8005f8e:	4b6c      	ldr	r3, [pc, #432]	; (8006140 <HAL_RCC_OscConfig+0x76c>)
 8005f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f92:	4a6b      	ldr	r2, [pc, #428]	; (8006140 <HAL_RCC_OscConfig+0x76c>)
 8005f94:	f043 0301 	orr.w	r3, r3, #1
 8005f98:	6713      	str	r3, [r2, #112]	; 0x70
 8005f9a:	e00b      	b.n	8005fb4 <HAL_RCC_OscConfig+0x5e0>
 8005f9c:	4b68      	ldr	r3, [pc, #416]	; (8006140 <HAL_RCC_OscConfig+0x76c>)
 8005f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fa0:	4a67      	ldr	r2, [pc, #412]	; (8006140 <HAL_RCC_OscConfig+0x76c>)
 8005fa2:	f023 0301 	bic.w	r3, r3, #1
 8005fa6:	6713      	str	r3, [r2, #112]	; 0x70
 8005fa8:	4b65      	ldr	r3, [pc, #404]	; (8006140 <HAL_RCC_OscConfig+0x76c>)
 8005faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fac:	4a64      	ldr	r2, [pc, #400]	; (8006140 <HAL_RCC_OscConfig+0x76c>)
 8005fae:	f023 0304 	bic.w	r3, r3, #4
 8005fb2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d015      	beq.n	8005fe8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fbc:	f7fc fda6 	bl	8002b0c <HAL_GetTick>
 8005fc0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005fc2:	e00a      	b.n	8005fda <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fc4:	f7fc fda2 	bl	8002b0c <HAL_GetTick>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fcc:	1ad3      	subs	r3, r2, r3
 8005fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d901      	bls.n	8005fda <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	e14e      	b.n	8006278 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005fda:	4b59      	ldr	r3, [pc, #356]	; (8006140 <HAL_RCC_OscConfig+0x76c>)
 8005fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fde:	f003 0302 	and.w	r3, r3, #2
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d0ee      	beq.n	8005fc4 <HAL_RCC_OscConfig+0x5f0>
 8005fe6:	e014      	b.n	8006012 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fe8:	f7fc fd90 	bl	8002b0c <HAL_GetTick>
 8005fec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005fee:	e00a      	b.n	8006006 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ff0:	f7fc fd8c 	bl	8002b0c <HAL_GetTick>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff8:	1ad3      	subs	r3, r2, r3
 8005ffa:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d901      	bls.n	8006006 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006002:	2303      	movs	r3, #3
 8006004:	e138      	b.n	8006278 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006006:	4b4e      	ldr	r3, [pc, #312]	; (8006140 <HAL_RCC_OscConfig+0x76c>)
 8006008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800600a:	f003 0302 	and.w	r3, r3, #2
 800600e:	2b00      	cmp	r3, #0
 8006010:	d1ee      	bne.n	8005ff0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006016:	2b00      	cmp	r3, #0
 8006018:	f000 812d 	beq.w	8006276 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800601c:	4b48      	ldr	r3, [pc, #288]	; (8006140 <HAL_RCC_OscConfig+0x76c>)
 800601e:	691b      	ldr	r3, [r3, #16]
 8006020:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006024:	2b18      	cmp	r3, #24
 8006026:	f000 80bd 	beq.w	80061a4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602e:	2b02      	cmp	r3, #2
 8006030:	f040 809e 	bne.w	8006170 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006034:	4b42      	ldr	r3, [pc, #264]	; (8006140 <HAL_RCC_OscConfig+0x76c>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a41      	ldr	r2, [pc, #260]	; (8006140 <HAL_RCC_OscConfig+0x76c>)
 800603a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800603e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006040:	f7fc fd64 	bl	8002b0c <HAL_GetTick>
 8006044:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006046:	e008      	b.n	800605a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006048:	f7fc fd60 	bl	8002b0c <HAL_GetTick>
 800604c:	4602      	mov	r2, r0
 800604e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006050:	1ad3      	subs	r3, r2, r3
 8006052:	2b02      	cmp	r3, #2
 8006054:	d901      	bls.n	800605a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006056:	2303      	movs	r3, #3
 8006058:	e10e      	b.n	8006278 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800605a:	4b39      	ldr	r3, [pc, #228]	; (8006140 <HAL_RCC_OscConfig+0x76c>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006062:	2b00      	cmp	r3, #0
 8006064:	d1f0      	bne.n	8006048 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006066:	4b36      	ldr	r3, [pc, #216]	; (8006140 <HAL_RCC_OscConfig+0x76c>)
 8006068:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800606a:	4b37      	ldr	r3, [pc, #220]	; (8006148 <HAL_RCC_OscConfig+0x774>)
 800606c:	4013      	ands	r3, r2
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006076:	0112      	lsls	r2, r2, #4
 8006078:	430a      	orrs	r2, r1
 800607a:	4931      	ldr	r1, [pc, #196]	; (8006140 <HAL_RCC_OscConfig+0x76c>)
 800607c:	4313      	orrs	r3, r2
 800607e:	628b      	str	r3, [r1, #40]	; 0x28
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006084:	3b01      	subs	r3, #1
 8006086:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800608e:	3b01      	subs	r3, #1
 8006090:	025b      	lsls	r3, r3, #9
 8006092:	b29b      	uxth	r3, r3
 8006094:	431a      	orrs	r2, r3
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800609a:	3b01      	subs	r3, #1
 800609c:	041b      	lsls	r3, r3, #16
 800609e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80060a2:	431a      	orrs	r2, r3
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060a8:	3b01      	subs	r3, #1
 80060aa:	061b      	lsls	r3, r3, #24
 80060ac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80060b0:	4923      	ldr	r1, [pc, #140]	; (8006140 <HAL_RCC_OscConfig+0x76c>)
 80060b2:	4313      	orrs	r3, r2
 80060b4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80060b6:	4b22      	ldr	r3, [pc, #136]	; (8006140 <HAL_RCC_OscConfig+0x76c>)
 80060b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ba:	4a21      	ldr	r2, [pc, #132]	; (8006140 <HAL_RCC_OscConfig+0x76c>)
 80060bc:	f023 0301 	bic.w	r3, r3, #1
 80060c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80060c2:	4b1f      	ldr	r3, [pc, #124]	; (8006140 <HAL_RCC_OscConfig+0x76c>)
 80060c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060c6:	4b21      	ldr	r3, [pc, #132]	; (800614c <HAL_RCC_OscConfig+0x778>)
 80060c8:	4013      	ands	r3, r2
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80060ce:	00d2      	lsls	r2, r2, #3
 80060d0:	491b      	ldr	r1, [pc, #108]	; (8006140 <HAL_RCC_OscConfig+0x76c>)
 80060d2:	4313      	orrs	r3, r2
 80060d4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80060d6:	4b1a      	ldr	r3, [pc, #104]	; (8006140 <HAL_RCC_OscConfig+0x76c>)
 80060d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060da:	f023 020c 	bic.w	r2, r3, #12
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e2:	4917      	ldr	r1, [pc, #92]	; (8006140 <HAL_RCC_OscConfig+0x76c>)
 80060e4:	4313      	orrs	r3, r2
 80060e6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80060e8:	4b15      	ldr	r3, [pc, #84]	; (8006140 <HAL_RCC_OscConfig+0x76c>)
 80060ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ec:	f023 0202 	bic.w	r2, r3, #2
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060f4:	4912      	ldr	r1, [pc, #72]	; (8006140 <HAL_RCC_OscConfig+0x76c>)
 80060f6:	4313      	orrs	r3, r2
 80060f8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80060fa:	4b11      	ldr	r3, [pc, #68]	; (8006140 <HAL_RCC_OscConfig+0x76c>)
 80060fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060fe:	4a10      	ldr	r2, [pc, #64]	; (8006140 <HAL_RCC_OscConfig+0x76c>)
 8006100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006104:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006106:	4b0e      	ldr	r3, [pc, #56]	; (8006140 <HAL_RCC_OscConfig+0x76c>)
 8006108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800610a:	4a0d      	ldr	r2, [pc, #52]	; (8006140 <HAL_RCC_OscConfig+0x76c>)
 800610c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006110:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006112:	4b0b      	ldr	r3, [pc, #44]	; (8006140 <HAL_RCC_OscConfig+0x76c>)
 8006114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006116:	4a0a      	ldr	r2, [pc, #40]	; (8006140 <HAL_RCC_OscConfig+0x76c>)
 8006118:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800611c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800611e:	4b08      	ldr	r3, [pc, #32]	; (8006140 <HAL_RCC_OscConfig+0x76c>)
 8006120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006122:	4a07      	ldr	r2, [pc, #28]	; (8006140 <HAL_RCC_OscConfig+0x76c>)
 8006124:	f043 0301 	orr.w	r3, r3, #1
 8006128:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800612a:	4b05      	ldr	r3, [pc, #20]	; (8006140 <HAL_RCC_OscConfig+0x76c>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a04      	ldr	r2, [pc, #16]	; (8006140 <HAL_RCC_OscConfig+0x76c>)
 8006130:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006134:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006136:	f7fc fce9 	bl	8002b0c <HAL_GetTick>
 800613a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800613c:	e011      	b.n	8006162 <HAL_RCC_OscConfig+0x78e>
 800613e:	bf00      	nop
 8006140:	58024400 	.word	0x58024400
 8006144:	58024800 	.word	0x58024800
 8006148:	fffffc0c 	.word	0xfffffc0c
 800614c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006150:	f7fc fcdc 	bl	8002b0c <HAL_GetTick>
 8006154:	4602      	mov	r2, r0
 8006156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006158:	1ad3      	subs	r3, r2, r3
 800615a:	2b02      	cmp	r3, #2
 800615c:	d901      	bls.n	8006162 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800615e:	2303      	movs	r3, #3
 8006160:	e08a      	b.n	8006278 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006162:	4b47      	ldr	r3, [pc, #284]	; (8006280 <HAL_RCC_OscConfig+0x8ac>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800616a:	2b00      	cmp	r3, #0
 800616c:	d0f0      	beq.n	8006150 <HAL_RCC_OscConfig+0x77c>
 800616e:	e082      	b.n	8006276 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006170:	4b43      	ldr	r3, [pc, #268]	; (8006280 <HAL_RCC_OscConfig+0x8ac>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a42      	ldr	r2, [pc, #264]	; (8006280 <HAL_RCC_OscConfig+0x8ac>)
 8006176:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800617a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800617c:	f7fc fcc6 	bl	8002b0c <HAL_GetTick>
 8006180:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006182:	e008      	b.n	8006196 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006184:	f7fc fcc2 	bl	8002b0c <HAL_GetTick>
 8006188:	4602      	mov	r2, r0
 800618a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618c:	1ad3      	subs	r3, r2, r3
 800618e:	2b02      	cmp	r3, #2
 8006190:	d901      	bls.n	8006196 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006192:	2303      	movs	r3, #3
 8006194:	e070      	b.n	8006278 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006196:	4b3a      	ldr	r3, [pc, #232]	; (8006280 <HAL_RCC_OscConfig+0x8ac>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d1f0      	bne.n	8006184 <HAL_RCC_OscConfig+0x7b0>
 80061a2:	e068      	b.n	8006276 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80061a4:	4b36      	ldr	r3, [pc, #216]	; (8006280 <HAL_RCC_OscConfig+0x8ac>)
 80061a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061a8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80061aa:	4b35      	ldr	r3, [pc, #212]	; (8006280 <HAL_RCC_OscConfig+0x8ac>)
 80061ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ae:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d031      	beq.n	800621c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	f003 0203 	and.w	r2, r3, #3
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d12a      	bne.n	800621c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	091b      	lsrs	r3, r3, #4
 80061ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d122      	bne.n	800621c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d11a      	bne.n	800621c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	0a5b      	lsrs	r3, r3, #9
 80061ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061f2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d111      	bne.n	800621c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	0c1b      	lsrs	r3, r3, #16
 80061fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006204:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006206:	429a      	cmp	r2, r3
 8006208:	d108      	bne.n	800621c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	0e1b      	lsrs	r3, r3, #24
 800620e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006216:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006218:	429a      	cmp	r2, r3
 800621a:	d001      	beq.n	8006220 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800621c:	2301      	movs	r3, #1
 800621e:	e02b      	b.n	8006278 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006220:	4b17      	ldr	r3, [pc, #92]	; (8006280 <HAL_RCC_OscConfig+0x8ac>)
 8006222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006224:	08db      	lsrs	r3, r3, #3
 8006226:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800622a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006230:	693a      	ldr	r2, [r7, #16]
 8006232:	429a      	cmp	r2, r3
 8006234:	d01f      	beq.n	8006276 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006236:	4b12      	ldr	r3, [pc, #72]	; (8006280 <HAL_RCC_OscConfig+0x8ac>)
 8006238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800623a:	4a11      	ldr	r2, [pc, #68]	; (8006280 <HAL_RCC_OscConfig+0x8ac>)
 800623c:	f023 0301 	bic.w	r3, r3, #1
 8006240:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006242:	f7fc fc63 	bl	8002b0c <HAL_GetTick>
 8006246:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006248:	bf00      	nop
 800624a:	f7fc fc5f 	bl	8002b0c <HAL_GetTick>
 800624e:	4602      	mov	r2, r0
 8006250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006252:	4293      	cmp	r3, r2
 8006254:	d0f9      	beq.n	800624a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006256:	4b0a      	ldr	r3, [pc, #40]	; (8006280 <HAL_RCC_OscConfig+0x8ac>)
 8006258:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800625a:	4b0a      	ldr	r3, [pc, #40]	; (8006284 <HAL_RCC_OscConfig+0x8b0>)
 800625c:	4013      	ands	r3, r2
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006262:	00d2      	lsls	r2, r2, #3
 8006264:	4906      	ldr	r1, [pc, #24]	; (8006280 <HAL_RCC_OscConfig+0x8ac>)
 8006266:	4313      	orrs	r3, r2
 8006268:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800626a:	4b05      	ldr	r3, [pc, #20]	; (8006280 <HAL_RCC_OscConfig+0x8ac>)
 800626c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800626e:	4a04      	ldr	r2, [pc, #16]	; (8006280 <HAL_RCC_OscConfig+0x8ac>)
 8006270:	f043 0301 	orr.w	r3, r3, #1
 8006274:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006276:	2300      	movs	r3, #0
}
 8006278:	4618      	mov	r0, r3
 800627a:	3730      	adds	r7, #48	; 0x30
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}
 8006280:	58024400 	.word	0x58024400
 8006284:	ffff0007 	.word	0xffff0007

08006288 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b086      	sub	sp, #24
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d101      	bne.n	800629c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	e19c      	b.n	80065d6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800629c:	4b8a      	ldr	r3, [pc, #552]	; (80064c8 <HAL_RCC_ClockConfig+0x240>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f003 030f 	and.w	r3, r3, #15
 80062a4:	683a      	ldr	r2, [r7, #0]
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d910      	bls.n	80062cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062aa:	4b87      	ldr	r3, [pc, #540]	; (80064c8 <HAL_RCC_ClockConfig+0x240>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f023 020f 	bic.w	r2, r3, #15
 80062b2:	4985      	ldr	r1, [pc, #532]	; (80064c8 <HAL_RCC_ClockConfig+0x240>)
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062ba:	4b83      	ldr	r3, [pc, #524]	; (80064c8 <HAL_RCC_ClockConfig+0x240>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f003 030f 	and.w	r3, r3, #15
 80062c2:	683a      	ldr	r2, [r7, #0]
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d001      	beq.n	80062cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	e184      	b.n	80065d6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f003 0304 	and.w	r3, r3, #4
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d010      	beq.n	80062fa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	691a      	ldr	r2, [r3, #16]
 80062dc:	4b7b      	ldr	r3, [pc, #492]	; (80064cc <HAL_RCC_ClockConfig+0x244>)
 80062de:	699b      	ldr	r3, [r3, #24]
 80062e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d908      	bls.n	80062fa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80062e8:	4b78      	ldr	r3, [pc, #480]	; (80064cc <HAL_RCC_ClockConfig+0x244>)
 80062ea:	699b      	ldr	r3, [r3, #24]
 80062ec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	691b      	ldr	r3, [r3, #16]
 80062f4:	4975      	ldr	r1, [pc, #468]	; (80064cc <HAL_RCC_ClockConfig+0x244>)
 80062f6:	4313      	orrs	r3, r2
 80062f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f003 0308 	and.w	r3, r3, #8
 8006302:	2b00      	cmp	r3, #0
 8006304:	d010      	beq.n	8006328 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	695a      	ldr	r2, [r3, #20]
 800630a:	4b70      	ldr	r3, [pc, #448]	; (80064cc <HAL_RCC_ClockConfig+0x244>)
 800630c:	69db      	ldr	r3, [r3, #28]
 800630e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006312:	429a      	cmp	r2, r3
 8006314:	d908      	bls.n	8006328 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006316:	4b6d      	ldr	r3, [pc, #436]	; (80064cc <HAL_RCC_ClockConfig+0x244>)
 8006318:	69db      	ldr	r3, [r3, #28]
 800631a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	695b      	ldr	r3, [r3, #20]
 8006322:	496a      	ldr	r1, [pc, #424]	; (80064cc <HAL_RCC_ClockConfig+0x244>)
 8006324:	4313      	orrs	r3, r2
 8006326:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 0310 	and.w	r3, r3, #16
 8006330:	2b00      	cmp	r3, #0
 8006332:	d010      	beq.n	8006356 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	699a      	ldr	r2, [r3, #24]
 8006338:	4b64      	ldr	r3, [pc, #400]	; (80064cc <HAL_RCC_ClockConfig+0x244>)
 800633a:	69db      	ldr	r3, [r3, #28]
 800633c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006340:	429a      	cmp	r2, r3
 8006342:	d908      	bls.n	8006356 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006344:	4b61      	ldr	r3, [pc, #388]	; (80064cc <HAL_RCC_ClockConfig+0x244>)
 8006346:	69db      	ldr	r3, [r3, #28]
 8006348:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	699b      	ldr	r3, [r3, #24]
 8006350:	495e      	ldr	r1, [pc, #376]	; (80064cc <HAL_RCC_ClockConfig+0x244>)
 8006352:	4313      	orrs	r3, r2
 8006354:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f003 0320 	and.w	r3, r3, #32
 800635e:	2b00      	cmp	r3, #0
 8006360:	d010      	beq.n	8006384 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	69da      	ldr	r2, [r3, #28]
 8006366:	4b59      	ldr	r3, [pc, #356]	; (80064cc <HAL_RCC_ClockConfig+0x244>)
 8006368:	6a1b      	ldr	r3, [r3, #32]
 800636a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800636e:	429a      	cmp	r2, r3
 8006370:	d908      	bls.n	8006384 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006372:	4b56      	ldr	r3, [pc, #344]	; (80064cc <HAL_RCC_ClockConfig+0x244>)
 8006374:	6a1b      	ldr	r3, [r3, #32]
 8006376:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	69db      	ldr	r3, [r3, #28]
 800637e:	4953      	ldr	r1, [pc, #332]	; (80064cc <HAL_RCC_ClockConfig+0x244>)
 8006380:	4313      	orrs	r3, r2
 8006382:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f003 0302 	and.w	r3, r3, #2
 800638c:	2b00      	cmp	r3, #0
 800638e:	d010      	beq.n	80063b2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	68da      	ldr	r2, [r3, #12]
 8006394:	4b4d      	ldr	r3, [pc, #308]	; (80064cc <HAL_RCC_ClockConfig+0x244>)
 8006396:	699b      	ldr	r3, [r3, #24]
 8006398:	f003 030f 	and.w	r3, r3, #15
 800639c:	429a      	cmp	r2, r3
 800639e:	d908      	bls.n	80063b2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063a0:	4b4a      	ldr	r3, [pc, #296]	; (80064cc <HAL_RCC_ClockConfig+0x244>)
 80063a2:	699b      	ldr	r3, [r3, #24]
 80063a4:	f023 020f 	bic.w	r2, r3, #15
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	4947      	ldr	r1, [pc, #284]	; (80064cc <HAL_RCC_ClockConfig+0x244>)
 80063ae:	4313      	orrs	r3, r2
 80063b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f003 0301 	and.w	r3, r3, #1
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d055      	beq.n	800646a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80063be:	4b43      	ldr	r3, [pc, #268]	; (80064cc <HAL_RCC_ClockConfig+0x244>)
 80063c0:	699b      	ldr	r3, [r3, #24]
 80063c2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	4940      	ldr	r1, [pc, #256]	; (80064cc <HAL_RCC_ClockConfig+0x244>)
 80063cc:	4313      	orrs	r3, r2
 80063ce:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	2b02      	cmp	r3, #2
 80063d6:	d107      	bne.n	80063e8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80063d8:	4b3c      	ldr	r3, [pc, #240]	; (80064cc <HAL_RCC_ClockConfig+0x244>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d121      	bne.n	8006428 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	e0f6      	b.n	80065d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	2b03      	cmp	r3, #3
 80063ee:	d107      	bne.n	8006400 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80063f0:	4b36      	ldr	r3, [pc, #216]	; (80064cc <HAL_RCC_ClockConfig+0x244>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d115      	bne.n	8006428 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	e0ea      	b.n	80065d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	2b01      	cmp	r3, #1
 8006406:	d107      	bne.n	8006418 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006408:	4b30      	ldr	r3, [pc, #192]	; (80064cc <HAL_RCC_ClockConfig+0x244>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006410:	2b00      	cmp	r3, #0
 8006412:	d109      	bne.n	8006428 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	e0de      	b.n	80065d6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006418:	4b2c      	ldr	r3, [pc, #176]	; (80064cc <HAL_RCC_ClockConfig+0x244>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 0304 	and.w	r3, r3, #4
 8006420:	2b00      	cmp	r3, #0
 8006422:	d101      	bne.n	8006428 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	e0d6      	b.n	80065d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006428:	4b28      	ldr	r3, [pc, #160]	; (80064cc <HAL_RCC_ClockConfig+0x244>)
 800642a:	691b      	ldr	r3, [r3, #16]
 800642c:	f023 0207 	bic.w	r2, r3, #7
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	4925      	ldr	r1, [pc, #148]	; (80064cc <HAL_RCC_ClockConfig+0x244>)
 8006436:	4313      	orrs	r3, r2
 8006438:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800643a:	f7fc fb67 	bl	8002b0c <HAL_GetTick>
 800643e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006440:	e00a      	b.n	8006458 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006442:	f7fc fb63 	bl	8002b0c <HAL_GetTick>
 8006446:	4602      	mov	r2, r0
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	1ad3      	subs	r3, r2, r3
 800644c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006450:	4293      	cmp	r3, r2
 8006452:	d901      	bls.n	8006458 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006454:	2303      	movs	r3, #3
 8006456:	e0be      	b.n	80065d6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006458:	4b1c      	ldr	r3, [pc, #112]	; (80064cc <HAL_RCC_ClockConfig+0x244>)
 800645a:	691b      	ldr	r3, [r3, #16]
 800645c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	00db      	lsls	r3, r3, #3
 8006466:	429a      	cmp	r2, r3
 8006468:	d1eb      	bne.n	8006442 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 0302 	and.w	r3, r3, #2
 8006472:	2b00      	cmp	r3, #0
 8006474:	d010      	beq.n	8006498 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	68da      	ldr	r2, [r3, #12]
 800647a:	4b14      	ldr	r3, [pc, #80]	; (80064cc <HAL_RCC_ClockConfig+0x244>)
 800647c:	699b      	ldr	r3, [r3, #24]
 800647e:	f003 030f 	and.w	r3, r3, #15
 8006482:	429a      	cmp	r2, r3
 8006484:	d208      	bcs.n	8006498 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006486:	4b11      	ldr	r3, [pc, #68]	; (80064cc <HAL_RCC_ClockConfig+0x244>)
 8006488:	699b      	ldr	r3, [r3, #24]
 800648a:	f023 020f 	bic.w	r2, r3, #15
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	68db      	ldr	r3, [r3, #12]
 8006492:	490e      	ldr	r1, [pc, #56]	; (80064cc <HAL_RCC_ClockConfig+0x244>)
 8006494:	4313      	orrs	r3, r2
 8006496:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006498:	4b0b      	ldr	r3, [pc, #44]	; (80064c8 <HAL_RCC_ClockConfig+0x240>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f003 030f 	and.w	r3, r3, #15
 80064a0:	683a      	ldr	r2, [r7, #0]
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d214      	bcs.n	80064d0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064a6:	4b08      	ldr	r3, [pc, #32]	; (80064c8 <HAL_RCC_ClockConfig+0x240>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f023 020f 	bic.w	r2, r3, #15
 80064ae:	4906      	ldr	r1, [pc, #24]	; (80064c8 <HAL_RCC_ClockConfig+0x240>)
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064b6:	4b04      	ldr	r3, [pc, #16]	; (80064c8 <HAL_RCC_ClockConfig+0x240>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f003 030f 	and.w	r3, r3, #15
 80064be:	683a      	ldr	r2, [r7, #0]
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d005      	beq.n	80064d0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	e086      	b.n	80065d6 <HAL_RCC_ClockConfig+0x34e>
 80064c8:	52002000 	.word	0x52002000
 80064cc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f003 0304 	and.w	r3, r3, #4
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d010      	beq.n	80064fe <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	691a      	ldr	r2, [r3, #16]
 80064e0:	4b3f      	ldr	r3, [pc, #252]	; (80065e0 <HAL_RCC_ClockConfig+0x358>)
 80064e2:	699b      	ldr	r3, [r3, #24]
 80064e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d208      	bcs.n	80064fe <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80064ec:	4b3c      	ldr	r3, [pc, #240]	; (80065e0 <HAL_RCC_ClockConfig+0x358>)
 80064ee:	699b      	ldr	r3, [r3, #24]
 80064f0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	691b      	ldr	r3, [r3, #16]
 80064f8:	4939      	ldr	r1, [pc, #228]	; (80065e0 <HAL_RCC_ClockConfig+0x358>)
 80064fa:	4313      	orrs	r3, r2
 80064fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f003 0308 	and.w	r3, r3, #8
 8006506:	2b00      	cmp	r3, #0
 8006508:	d010      	beq.n	800652c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	695a      	ldr	r2, [r3, #20]
 800650e:	4b34      	ldr	r3, [pc, #208]	; (80065e0 <HAL_RCC_ClockConfig+0x358>)
 8006510:	69db      	ldr	r3, [r3, #28]
 8006512:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006516:	429a      	cmp	r2, r3
 8006518:	d208      	bcs.n	800652c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800651a:	4b31      	ldr	r3, [pc, #196]	; (80065e0 <HAL_RCC_ClockConfig+0x358>)
 800651c:	69db      	ldr	r3, [r3, #28]
 800651e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	695b      	ldr	r3, [r3, #20]
 8006526:	492e      	ldr	r1, [pc, #184]	; (80065e0 <HAL_RCC_ClockConfig+0x358>)
 8006528:	4313      	orrs	r3, r2
 800652a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f003 0310 	and.w	r3, r3, #16
 8006534:	2b00      	cmp	r3, #0
 8006536:	d010      	beq.n	800655a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	699a      	ldr	r2, [r3, #24]
 800653c:	4b28      	ldr	r3, [pc, #160]	; (80065e0 <HAL_RCC_ClockConfig+0x358>)
 800653e:	69db      	ldr	r3, [r3, #28]
 8006540:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006544:	429a      	cmp	r2, r3
 8006546:	d208      	bcs.n	800655a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006548:	4b25      	ldr	r3, [pc, #148]	; (80065e0 <HAL_RCC_ClockConfig+0x358>)
 800654a:	69db      	ldr	r3, [r3, #28]
 800654c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	699b      	ldr	r3, [r3, #24]
 8006554:	4922      	ldr	r1, [pc, #136]	; (80065e0 <HAL_RCC_ClockConfig+0x358>)
 8006556:	4313      	orrs	r3, r2
 8006558:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f003 0320 	and.w	r3, r3, #32
 8006562:	2b00      	cmp	r3, #0
 8006564:	d010      	beq.n	8006588 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	69da      	ldr	r2, [r3, #28]
 800656a:	4b1d      	ldr	r3, [pc, #116]	; (80065e0 <HAL_RCC_ClockConfig+0x358>)
 800656c:	6a1b      	ldr	r3, [r3, #32]
 800656e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006572:	429a      	cmp	r2, r3
 8006574:	d208      	bcs.n	8006588 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006576:	4b1a      	ldr	r3, [pc, #104]	; (80065e0 <HAL_RCC_ClockConfig+0x358>)
 8006578:	6a1b      	ldr	r3, [r3, #32]
 800657a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	69db      	ldr	r3, [r3, #28]
 8006582:	4917      	ldr	r1, [pc, #92]	; (80065e0 <HAL_RCC_ClockConfig+0x358>)
 8006584:	4313      	orrs	r3, r2
 8006586:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006588:	f000 f834 	bl	80065f4 <HAL_RCC_GetSysClockFreq>
 800658c:	4602      	mov	r2, r0
 800658e:	4b14      	ldr	r3, [pc, #80]	; (80065e0 <HAL_RCC_ClockConfig+0x358>)
 8006590:	699b      	ldr	r3, [r3, #24]
 8006592:	0a1b      	lsrs	r3, r3, #8
 8006594:	f003 030f 	and.w	r3, r3, #15
 8006598:	4912      	ldr	r1, [pc, #72]	; (80065e4 <HAL_RCC_ClockConfig+0x35c>)
 800659a:	5ccb      	ldrb	r3, [r1, r3]
 800659c:	f003 031f 	and.w	r3, r3, #31
 80065a0:	fa22 f303 	lsr.w	r3, r2, r3
 80065a4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80065a6:	4b0e      	ldr	r3, [pc, #56]	; (80065e0 <HAL_RCC_ClockConfig+0x358>)
 80065a8:	699b      	ldr	r3, [r3, #24]
 80065aa:	f003 030f 	and.w	r3, r3, #15
 80065ae:	4a0d      	ldr	r2, [pc, #52]	; (80065e4 <HAL_RCC_ClockConfig+0x35c>)
 80065b0:	5cd3      	ldrb	r3, [r2, r3]
 80065b2:	f003 031f 	and.w	r3, r3, #31
 80065b6:	693a      	ldr	r2, [r7, #16]
 80065b8:	fa22 f303 	lsr.w	r3, r2, r3
 80065bc:	4a0a      	ldr	r2, [pc, #40]	; (80065e8 <HAL_RCC_ClockConfig+0x360>)
 80065be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80065c0:	4a0a      	ldr	r2, [pc, #40]	; (80065ec <HAL_RCC_ClockConfig+0x364>)
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80065c6:	4b0a      	ldr	r3, [pc, #40]	; (80065f0 <HAL_RCC_ClockConfig+0x368>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4618      	mov	r0, r3
 80065cc:	f7fc fa54 	bl	8002a78 <HAL_InitTick>
 80065d0:	4603      	mov	r3, r0
 80065d2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80065d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3718      	adds	r7, #24
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	bf00      	nop
 80065e0:	58024400 	.word	0x58024400
 80065e4:	0800bfc0 	.word	0x0800bfc0
 80065e8:	24000004 	.word	0x24000004
 80065ec:	24000000 	.word	0x24000000
 80065f0:	24000008 	.word	0x24000008

080065f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b089      	sub	sp, #36	; 0x24
 80065f8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80065fa:	4bb3      	ldr	r3, [pc, #716]	; (80068c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065fc:	691b      	ldr	r3, [r3, #16]
 80065fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006602:	2b18      	cmp	r3, #24
 8006604:	f200 8155 	bhi.w	80068b2 <HAL_RCC_GetSysClockFreq+0x2be>
 8006608:	a201      	add	r2, pc, #4	; (adr r2, 8006610 <HAL_RCC_GetSysClockFreq+0x1c>)
 800660a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800660e:	bf00      	nop
 8006610:	08006675 	.word	0x08006675
 8006614:	080068b3 	.word	0x080068b3
 8006618:	080068b3 	.word	0x080068b3
 800661c:	080068b3 	.word	0x080068b3
 8006620:	080068b3 	.word	0x080068b3
 8006624:	080068b3 	.word	0x080068b3
 8006628:	080068b3 	.word	0x080068b3
 800662c:	080068b3 	.word	0x080068b3
 8006630:	0800669b 	.word	0x0800669b
 8006634:	080068b3 	.word	0x080068b3
 8006638:	080068b3 	.word	0x080068b3
 800663c:	080068b3 	.word	0x080068b3
 8006640:	080068b3 	.word	0x080068b3
 8006644:	080068b3 	.word	0x080068b3
 8006648:	080068b3 	.word	0x080068b3
 800664c:	080068b3 	.word	0x080068b3
 8006650:	080066a1 	.word	0x080066a1
 8006654:	080068b3 	.word	0x080068b3
 8006658:	080068b3 	.word	0x080068b3
 800665c:	080068b3 	.word	0x080068b3
 8006660:	080068b3 	.word	0x080068b3
 8006664:	080068b3 	.word	0x080068b3
 8006668:	080068b3 	.word	0x080068b3
 800666c:	080068b3 	.word	0x080068b3
 8006670:	080066a7 	.word	0x080066a7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006674:	4b94      	ldr	r3, [pc, #592]	; (80068c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f003 0320 	and.w	r3, r3, #32
 800667c:	2b00      	cmp	r3, #0
 800667e:	d009      	beq.n	8006694 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006680:	4b91      	ldr	r3, [pc, #580]	; (80068c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	08db      	lsrs	r3, r3, #3
 8006686:	f003 0303 	and.w	r3, r3, #3
 800668a:	4a90      	ldr	r2, [pc, #576]	; (80068cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800668c:	fa22 f303 	lsr.w	r3, r2, r3
 8006690:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006692:	e111      	b.n	80068b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006694:	4b8d      	ldr	r3, [pc, #564]	; (80068cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006696:	61bb      	str	r3, [r7, #24]
      break;
 8006698:	e10e      	b.n	80068b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800669a:	4b8d      	ldr	r3, [pc, #564]	; (80068d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800669c:	61bb      	str	r3, [r7, #24]
      break;
 800669e:	e10b      	b.n	80068b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80066a0:	4b8c      	ldr	r3, [pc, #560]	; (80068d4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80066a2:	61bb      	str	r3, [r7, #24]
      break;
 80066a4:	e108      	b.n	80068b8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80066a6:	4b88      	ldr	r3, [pc, #544]	; (80068c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066aa:	f003 0303 	and.w	r3, r3, #3
 80066ae:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80066b0:	4b85      	ldr	r3, [pc, #532]	; (80068c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066b4:	091b      	lsrs	r3, r3, #4
 80066b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80066ba:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80066bc:	4b82      	ldr	r3, [pc, #520]	; (80068c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c0:	f003 0301 	and.w	r3, r3, #1
 80066c4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80066c6:	4b80      	ldr	r3, [pc, #512]	; (80068c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ca:	08db      	lsrs	r3, r3, #3
 80066cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80066d0:	68fa      	ldr	r2, [r7, #12]
 80066d2:	fb02 f303 	mul.w	r3, r2, r3
 80066d6:	ee07 3a90 	vmov	s15, r3
 80066da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066de:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	f000 80e1 	beq.w	80068ac <HAL_RCC_GetSysClockFreq+0x2b8>
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	2b02      	cmp	r3, #2
 80066ee:	f000 8083 	beq.w	80067f8 <HAL_RCC_GetSysClockFreq+0x204>
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	2b02      	cmp	r3, #2
 80066f6:	f200 80a1 	bhi.w	800683c <HAL_RCC_GetSysClockFreq+0x248>
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d003      	beq.n	8006708 <HAL_RCC_GetSysClockFreq+0x114>
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	2b01      	cmp	r3, #1
 8006704:	d056      	beq.n	80067b4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006706:	e099      	b.n	800683c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006708:	4b6f      	ldr	r3, [pc, #444]	; (80068c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f003 0320 	and.w	r3, r3, #32
 8006710:	2b00      	cmp	r3, #0
 8006712:	d02d      	beq.n	8006770 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006714:	4b6c      	ldr	r3, [pc, #432]	; (80068c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	08db      	lsrs	r3, r3, #3
 800671a:	f003 0303 	and.w	r3, r3, #3
 800671e:	4a6b      	ldr	r2, [pc, #428]	; (80068cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006720:	fa22 f303 	lsr.w	r3, r2, r3
 8006724:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	ee07 3a90 	vmov	s15, r3
 800672c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	ee07 3a90 	vmov	s15, r3
 8006736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800673a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800673e:	4b62      	ldr	r3, [pc, #392]	; (80068c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006746:	ee07 3a90 	vmov	s15, r3
 800674a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800674e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006752:	eddf 5a61 	vldr	s11, [pc, #388]	; 80068d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006756:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800675a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800675e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006762:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800676a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800676e:	e087      	b.n	8006880 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	ee07 3a90 	vmov	s15, r3
 8006776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800677a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80068dc <HAL_RCC_GetSysClockFreq+0x2e8>
 800677e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006782:	4b51      	ldr	r3, [pc, #324]	; (80068c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800678a:	ee07 3a90 	vmov	s15, r3
 800678e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006792:	ed97 6a02 	vldr	s12, [r7, #8]
 8006796:	eddf 5a50 	vldr	s11, [pc, #320]	; 80068d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800679a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800679e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80067b2:	e065      	b.n	8006880 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	ee07 3a90 	vmov	s15, r3
 80067ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067be:	eddf 6a48 	vldr	s13, [pc, #288]	; 80068e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80067c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067c6:	4b40      	ldr	r3, [pc, #256]	; (80068c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067ce:	ee07 3a90 	vmov	s15, r3
 80067d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80067da:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80068d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80067de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80067f6:	e043      	b.n	8006880 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	ee07 3a90 	vmov	s15, r3
 80067fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006802:	eddf 6a38 	vldr	s13, [pc, #224]	; 80068e4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006806:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800680a:	4b2f      	ldr	r3, [pc, #188]	; (80068c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800680c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800680e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006812:	ee07 3a90 	vmov	s15, r3
 8006816:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800681a:	ed97 6a02 	vldr	s12, [r7, #8]
 800681e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80068d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006822:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006826:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800682a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800682e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006836:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800683a:	e021      	b.n	8006880 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	ee07 3a90 	vmov	s15, r3
 8006842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006846:	eddf 6a26 	vldr	s13, [pc, #152]	; 80068e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800684a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800684e:	4b1e      	ldr	r3, [pc, #120]	; (80068c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006856:	ee07 3a90 	vmov	s15, r3
 800685a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800685e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006862:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80068d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006866:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800686a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800686e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006872:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800687a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800687e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006880:	4b11      	ldr	r3, [pc, #68]	; (80068c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006884:	0a5b      	lsrs	r3, r3, #9
 8006886:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800688a:	3301      	adds	r3, #1
 800688c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	ee07 3a90 	vmov	s15, r3
 8006894:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006898:	edd7 6a07 	vldr	s13, [r7, #28]
 800689c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068a4:	ee17 3a90 	vmov	r3, s15
 80068a8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80068aa:	e005      	b.n	80068b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80068ac:	2300      	movs	r3, #0
 80068ae:	61bb      	str	r3, [r7, #24]
      break;
 80068b0:	e002      	b.n	80068b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80068b2:	4b07      	ldr	r3, [pc, #28]	; (80068d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80068b4:	61bb      	str	r3, [r7, #24]
      break;
 80068b6:	bf00      	nop
  }

  return sysclockfreq;
 80068b8:	69bb      	ldr	r3, [r7, #24]
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3724      	adds	r7, #36	; 0x24
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr
 80068c6:	bf00      	nop
 80068c8:	58024400 	.word	0x58024400
 80068cc:	03d09000 	.word	0x03d09000
 80068d0:	003d0900 	.word	0x003d0900
 80068d4:	017d7840 	.word	0x017d7840
 80068d8:	46000000 	.word	0x46000000
 80068dc:	4c742400 	.word	0x4c742400
 80068e0:	4a742400 	.word	0x4a742400
 80068e4:	4bbebc20 	.word	0x4bbebc20

080068e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b082      	sub	sp, #8
 80068ec:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80068ee:	f7ff fe81 	bl	80065f4 <HAL_RCC_GetSysClockFreq>
 80068f2:	4602      	mov	r2, r0
 80068f4:	4b10      	ldr	r3, [pc, #64]	; (8006938 <HAL_RCC_GetHCLKFreq+0x50>)
 80068f6:	699b      	ldr	r3, [r3, #24]
 80068f8:	0a1b      	lsrs	r3, r3, #8
 80068fa:	f003 030f 	and.w	r3, r3, #15
 80068fe:	490f      	ldr	r1, [pc, #60]	; (800693c <HAL_RCC_GetHCLKFreq+0x54>)
 8006900:	5ccb      	ldrb	r3, [r1, r3]
 8006902:	f003 031f 	and.w	r3, r3, #31
 8006906:	fa22 f303 	lsr.w	r3, r2, r3
 800690a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800690c:	4b0a      	ldr	r3, [pc, #40]	; (8006938 <HAL_RCC_GetHCLKFreq+0x50>)
 800690e:	699b      	ldr	r3, [r3, #24]
 8006910:	f003 030f 	and.w	r3, r3, #15
 8006914:	4a09      	ldr	r2, [pc, #36]	; (800693c <HAL_RCC_GetHCLKFreq+0x54>)
 8006916:	5cd3      	ldrb	r3, [r2, r3]
 8006918:	f003 031f 	and.w	r3, r3, #31
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	fa22 f303 	lsr.w	r3, r2, r3
 8006922:	4a07      	ldr	r2, [pc, #28]	; (8006940 <HAL_RCC_GetHCLKFreq+0x58>)
 8006924:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006926:	4a07      	ldr	r2, [pc, #28]	; (8006944 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800692c:	4b04      	ldr	r3, [pc, #16]	; (8006940 <HAL_RCC_GetHCLKFreq+0x58>)
 800692e:	681b      	ldr	r3, [r3, #0]
}
 8006930:	4618      	mov	r0, r3
 8006932:	3708      	adds	r7, #8
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}
 8006938:	58024400 	.word	0x58024400
 800693c:	0800bfc0 	.word	0x0800bfc0
 8006940:	24000004 	.word	0x24000004
 8006944:	24000000 	.word	0x24000000

08006948 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800694c:	f7ff ffcc 	bl	80068e8 <HAL_RCC_GetHCLKFreq>
 8006950:	4602      	mov	r2, r0
 8006952:	4b06      	ldr	r3, [pc, #24]	; (800696c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006954:	69db      	ldr	r3, [r3, #28]
 8006956:	091b      	lsrs	r3, r3, #4
 8006958:	f003 0307 	and.w	r3, r3, #7
 800695c:	4904      	ldr	r1, [pc, #16]	; (8006970 <HAL_RCC_GetPCLK1Freq+0x28>)
 800695e:	5ccb      	ldrb	r3, [r1, r3]
 8006960:	f003 031f 	and.w	r3, r3, #31
 8006964:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006968:	4618      	mov	r0, r3
 800696a:	bd80      	pop	{r7, pc}
 800696c:	58024400 	.word	0x58024400
 8006970:	0800bfc0 	.word	0x0800bfc0

08006974 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006978:	f7ff ffb6 	bl	80068e8 <HAL_RCC_GetHCLKFreq>
 800697c:	4602      	mov	r2, r0
 800697e:	4b06      	ldr	r3, [pc, #24]	; (8006998 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006980:	69db      	ldr	r3, [r3, #28]
 8006982:	0a1b      	lsrs	r3, r3, #8
 8006984:	f003 0307 	and.w	r3, r3, #7
 8006988:	4904      	ldr	r1, [pc, #16]	; (800699c <HAL_RCC_GetPCLK2Freq+0x28>)
 800698a:	5ccb      	ldrb	r3, [r1, r3]
 800698c:	f003 031f 	and.w	r3, r3, #31
 8006990:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006994:	4618      	mov	r0, r3
 8006996:	bd80      	pop	{r7, pc}
 8006998:	58024400 	.word	0x58024400
 800699c:	0800bfc0 	.word	0x0800bfc0

080069a0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80069a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069a4:	b0ca      	sub	sp, #296	; 0x128
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80069ac:	2300      	movs	r3, #0
 80069ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80069b2:	2300      	movs	r3, #0
 80069b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80069b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80069c4:	2500      	movs	r5, #0
 80069c6:	ea54 0305 	orrs.w	r3, r4, r5
 80069ca:	d049      	beq.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80069cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069d2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80069d6:	d02f      	beq.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80069d8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80069dc:	d828      	bhi.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80069de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80069e2:	d01a      	beq.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80069e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80069e8:	d822      	bhi.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d003      	beq.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80069ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069f2:	d007      	beq.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80069f4:	e01c      	b.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069f6:	4bb8      	ldr	r3, [pc, #736]	; (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80069f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069fa:	4ab7      	ldr	r2, [pc, #732]	; (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80069fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a00:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006a02:	e01a      	b.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a08:	3308      	adds	r3, #8
 8006a0a:	2102      	movs	r1, #2
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f002 fb61 	bl	80090d4 <RCCEx_PLL2_Config>
 8006a12:	4603      	mov	r3, r0
 8006a14:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006a18:	e00f      	b.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a1e:	3328      	adds	r3, #40	; 0x28
 8006a20:	2102      	movs	r1, #2
 8006a22:	4618      	mov	r0, r3
 8006a24:	f002 fc08 	bl	8009238 <RCCEx_PLL3_Config>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006a2e:	e004      	b.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a30:	2301      	movs	r3, #1
 8006a32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006a36:	e000      	b.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006a38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d10a      	bne.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006a42:	4ba5      	ldr	r3, [pc, #660]	; (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a46:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a50:	4aa1      	ldr	r2, [pc, #644]	; (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a52:	430b      	orrs	r3, r1
 8006a54:	6513      	str	r3, [r2, #80]	; 0x50
 8006a56:	e003      	b.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a5c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006a60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a68:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8006a6c:	f04f 0900 	mov.w	r9, #0
 8006a70:	ea58 0309 	orrs.w	r3, r8, r9
 8006a74:	d047      	beq.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a7c:	2b04      	cmp	r3, #4
 8006a7e:	d82a      	bhi.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006a80:	a201      	add	r2, pc, #4	; (adr r2, 8006a88 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a86:	bf00      	nop
 8006a88:	08006a9d 	.word	0x08006a9d
 8006a8c:	08006aab 	.word	0x08006aab
 8006a90:	08006ac1 	.word	0x08006ac1
 8006a94:	08006adf 	.word	0x08006adf
 8006a98:	08006adf 	.word	0x08006adf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a9c:	4b8e      	ldr	r3, [pc, #568]	; (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa0:	4a8d      	ldr	r2, [pc, #564]	; (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006aa2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006aa6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006aa8:	e01a      	b.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006aae:	3308      	adds	r3, #8
 8006ab0:	2100      	movs	r1, #0
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f002 fb0e 	bl	80090d4 <RCCEx_PLL2_Config>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006abe:	e00f      	b.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ac4:	3328      	adds	r3, #40	; 0x28
 8006ac6:	2100      	movs	r1, #0
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f002 fbb5 	bl	8009238 <RCCEx_PLL3_Config>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006ad4:	e004      	b.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006adc:	e000      	b.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006ade:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ae0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d10a      	bne.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006ae8:	4b7b      	ldr	r3, [pc, #492]	; (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006aea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006aec:	f023 0107 	bic.w	r1, r3, #7
 8006af0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006af6:	4a78      	ldr	r2, [pc, #480]	; (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006af8:	430b      	orrs	r3, r1
 8006afa:	6513      	str	r3, [r2, #80]	; 0x50
 8006afc:	e003      	b.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006afe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b02:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b0e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8006b12:	f04f 0b00 	mov.w	fp, #0
 8006b16:	ea5a 030b 	orrs.w	r3, sl, fp
 8006b1a:	d04c      	beq.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006b1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b26:	d030      	beq.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006b28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b2c:	d829      	bhi.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006b2e:	2bc0      	cmp	r3, #192	; 0xc0
 8006b30:	d02d      	beq.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006b32:	2bc0      	cmp	r3, #192	; 0xc0
 8006b34:	d825      	bhi.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006b36:	2b80      	cmp	r3, #128	; 0x80
 8006b38:	d018      	beq.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006b3a:	2b80      	cmp	r3, #128	; 0x80
 8006b3c:	d821      	bhi.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d002      	beq.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006b42:	2b40      	cmp	r3, #64	; 0x40
 8006b44:	d007      	beq.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006b46:	e01c      	b.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b48:	4b63      	ldr	r3, [pc, #396]	; (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b4c:	4a62      	ldr	r2, [pc, #392]	; (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006b54:	e01c      	b.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b5a:	3308      	adds	r3, #8
 8006b5c:	2100      	movs	r1, #0
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f002 fab8 	bl	80090d4 <RCCEx_PLL2_Config>
 8006b64:	4603      	mov	r3, r0
 8006b66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006b6a:	e011      	b.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b70:	3328      	adds	r3, #40	; 0x28
 8006b72:	2100      	movs	r1, #0
 8006b74:	4618      	mov	r0, r3
 8006b76:	f002 fb5f 	bl	8009238 <RCCEx_PLL3_Config>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006b80:	e006      	b.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006b88:	e002      	b.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006b8a:	bf00      	nop
 8006b8c:	e000      	b.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006b8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d10a      	bne.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006b98:	4b4f      	ldr	r3, [pc, #316]	; (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b9c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8006ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ba4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ba6:	4a4c      	ldr	r2, [pc, #304]	; (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ba8:	430b      	orrs	r3, r1
 8006baa:	6513      	str	r3, [r2, #80]	; 0x50
 8006bac:	e003      	b.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006bb2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bbe:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8006bc2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006bcc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8006bd0:	460b      	mov	r3, r1
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	d053      	beq.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bda:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006bde:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006be2:	d035      	beq.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006be4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006be8:	d82e      	bhi.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006bea:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006bee:	d031      	beq.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006bf0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006bf4:	d828      	bhi.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006bf6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006bfa:	d01a      	beq.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006bfc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c00:	d822      	bhi.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d003      	beq.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006c06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c0a:	d007      	beq.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006c0c:	e01c      	b.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c0e:	4b32      	ldr	r3, [pc, #200]	; (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c12:	4a31      	ldr	r2, [pc, #196]	; (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c18:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006c1a:	e01c      	b.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c20:	3308      	adds	r3, #8
 8006c22:	2100      	movs	r1, #0
 8006c24:	4618      	mov	r0, r3
 8006c26:	f002 fa55 	bl	80090d4 <RCCEx_PLL2_Config>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006c30:	e011      	b.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c36:	3328      	adds	r3, #40	; 0x28
 8006c38:	2100      	movs	r1, #0
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f002 fafc 	bl	8009238 <RCCEx_PLL3_Config>
 8006c40:	4603      	mov	r3, r0
 8006c42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006c46:	e006      	b.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006c4e:	e002      	b.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006c50:	bf00      	nop
 8006c52:	e000      	b.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006c54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d10b      	bne.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006c5e:	4b1e      	ldr	r3, [pc, #120]	; (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c62:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8006c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c6a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006c6e:	4a1a      	ldr	r2, [pc, #104]	; (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c70:	430b      	orrs	r3, r1
 8006c72:	6593      	str	r3, [r2, #88]	; 0x58
 8006c74:	e003      	b.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c7a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c86:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8006c8a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006c8e:	2300      	movs	r3, #0
 8006c90:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006c94:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8006c98:	460b      	mov	r3, r1
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	d056      	beq.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ca2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006ca6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006caa:	d038      	beq.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006cac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006cb0:	d831      	bhi.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006cb2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006cb6:	d034      	beq.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006cb8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006cbc:	d82b      	bhi.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006cbe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006cc2:	d01d      	beq.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006cc4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006cc8:	d825      	bhi.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d006      	beq.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006cce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006cd2:	d00a      	beq.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006cd4:	e01f      	b.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006cd6:	bf00      	nop
 8006cd8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cdc:	4ba2      	ldr	r3, [pc, #648]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce0:	4aa1      	ldr	r2, [pc, #644]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006ce2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ce6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006ce8:	e01c      	b.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cee:	3308      	adds	r3, #8
 8006cf0:	2100      	movs	r1, #0
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f002 f9ee 	bl	80090d4 <RCCEx_PLL2_Config>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006cfe:	e011      	b.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d04:	3328      	adds	r3, #40	; 0x28
 8006d06:	2100      	movs	r1, #0
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f002 fa95 	bl	8009238 <RCCEx_PLL3_Config>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006d14:	e006      	b.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006d1c:	e002      	b.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006d1e:	bf00      	nop
 8006d20:	e000      	b.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006d22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d24:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d10b      	bne.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006d2c:	4b8e      	ldr	r3, [pc, #568]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d30:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8006d34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d38:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006d3c:	4a8a      	ldr	r2, [pc, #552]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d3e:	430b      	orrs	r3, r1
 8006d40:	6593      	str	r3, [r2, #88]	; 0x58
 8006d42:	e003      	b.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d44:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d48:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d54:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006d58:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006d62:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8006d66:	460b      	mov	r3, r1
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	d03a      	beq.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d72:	2b30      	cmp	r3, #48	; 0x30
 8006d74:	d01f      	beq.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006d76:	2b30      	cmp	r3, #48	; 0x30
 8006d78:	d819      	bhi.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006d7a:	2b20      	cmp	r3, #32
 8006d7c:	d00c      	beq.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006d7e:	2b20      	cmp	r3, #32
 8006d80:	d815      	bhi.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d019      	beq.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006d86:	2b10      	cmp	r3, #16
 8006d88:	d111      	bne.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d8a:	4b77      	ldr	r3, [pc, #476]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d8e:	4a76      	ldr	r2, [pc, #472]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d94:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006d96:	e011      	b.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d9c:	3308      	adds	r3, #8
 8006d9e:	2102      	movs	r1, #2
 8006da0:	4618      	mov	r0, r3
 8006da2:	f002 f997 	bl	80090d4 <RCCEx_PLL2_Config>
 8006da6:	4603      	mov	r3, r0
 8006da8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006dac:	e006      	b.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006dae:	2301      	movs	r3, #1
 8006db0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006db4:	e002      	b.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006db6:	bf00      	nop
 8006db8:	e000      	b.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006dba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dbc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d10a      	bne.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006dc4:	4b68      	ldr	r3, [pc, #416]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006dc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dc8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8006dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dd2:	4a65      	ldr	r2, [pc, #404]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006dd4:	430b      	orrs	r3, r1
 8006dd6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006dd8:	e003      	b.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006dde:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dea:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8006dee:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006df2:	2300      	movs	r3, #0
 8006df4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006df8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8006dfc:	460b      	mov	r3, r1
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	d051      	beq.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e0c:	d035      	beq.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006e0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e12:	d82e      	bhi.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006e14:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006e18:	d031      	beq.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006e1a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006e1e:	d828      	bhi.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006e20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e24:	d01a      	beq.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006e26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e2a:	d822      	bhi.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d003      	beq.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006e30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e34:	d007      	beq.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006e36:	e01c      	b.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e38:	4b4b      	ldr	r3, [pc, #300]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e3c:	4a4a      	ldr	r2, [pc, #296]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006e3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006e44:	e01c      	b.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e4a:	3308      	adds	r3, #8
 8006e4c:	2100      	movs	r1, #0
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f002 f940 	bl	80090d4 <RCCEx_PLL2_Config>
 8006e54:	4603      	mov	r3, r0
 8006e56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006e5a:	e011      	b.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e60:	3328      	adds	r3, #40	; 0x28
 8006e62:	2100      	movs	r1, #0
 8006e64:	4618      	mov	r0, r3
 8006e66:	f002 f9e7 	bl	8009238 <RCCEx_PLL3_Config>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006e70:	e006      	b.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006e78:	e002      	b.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006e7a:	bf00      	nop
 8006e7c:	e000      	b.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006e7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e80:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d10a      	bne.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006e88:	4b37      	ldr	r3, [pc, #220]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006e8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e8c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006e90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e96:	4a34      	ldr	r2, [pc, #208]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006e98:	430b      	orrs	r3, r1
 8006e9a:	6513      	str	r3, [r2, #80]	; 0x50
 8006e9c:	e003      	b.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ea2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eae:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8006eb2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006ebc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8006ec0:	460b      	mov	r3, r1
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	d056      	beq.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006eca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ecc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ed0:	d033      	beq.n	8006f3a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006ed2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ed6:	d82c      	bhi.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006ed8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006edc:	d02f      	beq.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006ede:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006ee2:	d826      	bhi.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006ee4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006ee8:	d02b      	beq.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8006eea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006eee:	d820      	bhi.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006ef0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ef4:	d012      	beq.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006ef6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006efa:	d81a      	bhi.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d022      	beq.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006f00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f04:	d115      	bne.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f0a:	3308      	adds	r3, #8
 8006f0c:	2101      	movs	r1, #1
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f002 f8e0 	bl	80090d4 <RCCEx_PLL2_Config>
 8006f14:	4603      	mov	r3, r0
 8006f16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006f1a:	e015      	b.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006f1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f20:	3328      	adds	r3, #40	; 0x28
 8006f22:	2101      	movs	r1, #1
 8006f24:	4618      	mov	r0, r3
 8006f26:	f002 f987 	bl	8009238 <RCCEx_PLL3_Config>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006f30:	e00a      	b.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f32:	2301      	movs	r3, #1
 8006f34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006f38:	e006      	b.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006f3a:	bf00      	nop
 8006f3c:	e004      	b.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006f3e:	bf00      	nop
 8006f40:	e002      	b.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006f42:	bf00      	nop
 8006f44:	e000      	b.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006f46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d10d      	bne.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006f50:	4b05      	ldr	r3, [pc, #20]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f54:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f5e:	4a02      	ldr	r2, [pc, #8]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f60:	430b      	orrs	r3, r1
 8006f62:	6513      	str	r3, [r2, #80]	; 0x50
 8006f64:	e006      	b.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006f66:	bf00      	nop
 8006f68:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f70:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f7c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8006f80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006f84:	2300      	movs	r3, #0
 8006f86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006f8a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8006f8e:	460b      	mov	r3, r1
 8006f90:	4313      	orrs	r3, r2
 8006f92:	d055      	beq.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006f94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f98:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006fa0:	d033      	beq.n	800700a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006fa2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006fa6:	d82c      	bhi.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fac:	d02f      	beq.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006fae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fb2:	d826      	bhi.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006fb4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006fb8:	d02b      	beq.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006fba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006fbe:	d820      	bhi.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006fc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fc4:	d012      	beq.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006fc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fca:	d81a      	bhi.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d022      	beq.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006fd0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006fd4:	d115      	bne.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fda:	3308      	adds	r3, #8
 8006fdc:	2101      	movs	r1, #1
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f002 f878 	bl	80090d4 <RCCEx_PLL2_Config>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006fea:	e015      	b.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ff0:	3328      	adds	r3, #40	; 0x28
 8006ff2:	2101      	movs	r1, #1
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f002 f91f 	bl	8009238 <RCCEx_PLL3_Config>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007000:	e00a      	b.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007002:	2301      	movs	r3, #1
 8007004:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007008:	e006      	b.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800700a:	bf00      	nop
 800700c:	e004      	b.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800700e:	bf00      	nop
 8007010:	e002      	b.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007012:	bf00      	nop
 8007014:	e000      	b.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007016:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007018:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800701c:	2b00      	cmp	r3, #0
 800701e:	d10b      	bne.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007020:	4ba3      	ldr	r3, [pc, #652]	; (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007024:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007028:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800702c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007030:	4a9f      	ldr	r2, [pc, #636]	; (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007032:	430b      	orrs	r3, r1
 8007034:	6593      	str	r3, [r2, #88]	; 0x58
 8007036:	e003      	b.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007038:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800703c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007040:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007048:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800704c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007050:	2300      	movs	r3, #0
 8007052:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007056:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800705a:	460b      	mov	r3, r1
 800705c:	4313      	orrs	r3, r2
 800705e:	d037      	beq.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007060:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007066:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800706a:	d00e      	beq.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800706c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007070:	d816      	bhi.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007072:	2b00      	cmp	r3, #0
 8007074:	d018      	beq.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007076:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800707a:	d111      	bne.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800707c:	4b8c      	ldr	r3, [pc, #560]	; (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800707e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007080:	4a8b      	ldr	r2, [pc, #556]	; (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007082:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007086:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007088:	e00f      	b.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800708a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800708e:	3308      	adds	r3, #8
 8007090:	2101      	movs	r1, #1
 8007092:	4618      	mov	r0, r3
 8007094:	f002 f81e 	bl	80090d4 <RCCEx_PLL2_Config>
 8007098:	4603      	mov	r3, r0
 800709a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800709e:	e004      	b.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070a0:	2301      	movs	r3, #1
 80070a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80070a6:	e000      	b.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80070a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d10a      	bne.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80070b2:	4b7f      	ldr	r3, [pc, #508]	; (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070b6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80070ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070c0:	4a7b      	ldr	r2, [pc, #492]	; (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070c2:	430b      	orrs	r3, r1
 80070c4:	6513      	str	r3, [r2, #80]	; 0x50
 80070c6:	e003      	b.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80070cc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80070d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80070dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80070e0:	2300      	movs	r3, #0
 80070e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80070e6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80070ea:	460b      	mov	r3, r1
 80070ec:	4313      	orrs	r3, r2
 80070ee:	d039      	beq.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80070f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070f6:	2b03      	cmp	r3, #3
 80070f8:	d81c      	bhi.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80070fa:	a201      	add	r2, pc, #4	; (adr r2, 8007100 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80070fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007100:	0800713d 	.word	0x0800713d
 8007104:	08007111 	.word	0x08007111
 8007108:	0800711f 	.word	0x0800711f
 800710c:	0800713d 	.word	0x0800713d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007110:	4b67      	ldr	r3, [pc, #412]	; (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007114:	4a66      	ldr	r2, [pc, #408]	; (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007116:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800711a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800711c:	e00f      	b.n	800713e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800711e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007122:	3308      	adds	r3, #8
 8007124:	2102      	movs	r1, #2
 8007126:	4618      	mov	r0, r3
 8007128:	f001 ffd4 	bl	80090d4 <RCCEx_PLL2_Config>
 800712c:	4603      	mov	r3, r0
 800712e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007132:	e004      	b.n	800713e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007134:	2301      	movs	r3, #1
 8007136:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800713a:	e000      	b.n	800713e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800713c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800713e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007142:	2b00      	cmp	r3, #0
 8007144:	d10a      	bne.n	800715c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007146:	4b5a      	ldr	r3, [pc, #360]	; (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800714a:	f023 0103 	bic.w	r1, r3, #3
 800714e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007152:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007154:	4a56      	ldr	r2, [pc, #344]	; (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007156:	430b      	orrs	r3, r1
 8007158:	64d3      	str	r3, [r2, #76]	; 0x4c
 800715a:	e003      	b.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800715c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007160:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007164:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800716c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8007170:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007174:	2300      	movs	r3, #0
 8007176:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800717a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800717e:	460b      	mov	r3, r1
 8007180:	4313      	orrs	r3, r2
 8007182:	f000 809f 	beq.w	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007186:	4b4b      	ldr	r3, [pc, #300]	; (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a4a      	ldr	r2, [pc, #296]	; (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800718c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007190:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007192:	f7fb fcbb 	bl	8002b0c <HAL_GetTick>
 8007196:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800719a:	e00b      	b.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800719c:	f7fb fcb6 	bl	8002b0c <HAL_GetTick>
 80071a0:	4602      	mov	r2, r0
 80071a2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80071a6:	1ad3      	subs	r3, r2, r3
 80071a8:	2b64      	cmp	r3, #100	; 0x64
 80071aa:	d903      	bls.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80071ac:	2303      	movs	r3, #3
 80071ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80071b2:	e005      	b.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80071b4:	4b3f      	ldr	r3, [pc, #252]	; (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d0ed      	beq.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80071c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d179      	bne.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80071c8:	4b39      	ldr	r3, [pc, #228]	; (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80071cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071d0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80071d4:	4053      	eors	r3, r2
 80071d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d015      	beq.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80071de:	4b34      	ldr	r3, [pc, #208]	; (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071e6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80071ea:	4b31      	ldr	r3, [pc, #196]	; (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071ee:	4a30      	ldr	r2, [pc, #192]	; (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071f4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80071f6:	4b2e      	ldr	r3, [pc, #184]	; (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071fa:	4a2d      	ldr	r2, [pc, #180]	; (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007200:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007202:	4a2b      	ldr	r2, [pc, #172]	; (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007204:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007208:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800720a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800720e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007212:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007216:	d118      	bne.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007218:	f7fb fc78 	bl	8002b0c <HAL_GetTick>
 800721c:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007220:	e00d      	b.n	800723e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007222:	f7fb fc73 	bl	8002b0c <HAL_GetTick>
 8007226:	4602      	mov	r2, r0
 8007228:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800722c:	1ad2      	subs	r2, r2, r3
 800722e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007232:	429a      	cmp	r2, r3
 8007234:	d903      	bls.n	800723e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8007236:	2303      	movs	r3, #3
 8007238:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800723c:	e005      	b.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800723e:	4b1c      	ldr	r3, [pc, #112]	; (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007242:	f003 0302 	and.w	r3, r3, #2
 8007246:	2b00      	cmp	r3, #0
 8007248:	d0eb      	beq.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800724a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800724e:	2b00      	cmp	r3, #0
 8007250:	d129      	bne.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007252:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007256:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800725a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800725e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007262:	d10e      	bne.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007264:	4b12      	ldr	r3, [pc, #72]	; (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007266:	691b      	ldr	r3, [r3, #16]
 8007268:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800726c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007270:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007274:	091a      	lsrs	r2, r3, #4
 8007276:	4b10      	ldr	r3, [pc, #64]	; (80072b8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007278:	4013      	ands	r3, r2
 800727a:	4a0d      	ldr	r2, [pc, #52]	; (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800727c:	430b      	orrs	r3, r1
 800727e:	6113      	str	r3, [r2, #16]
 8007280:	e005      	b.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007282:	4b0b      	ldr	r3, [pc, #44]	; (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007284:	691b      	ldr	r3, [r3, #16]
 8007286:	4a0a      	ldr	r2, [pc, #40]	; (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007288:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800728c:	6113      	str	r3, [r2, #16]
 800728e:	4b08      	ldr	r3, [pc, #32]	; (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007290:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8007292:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007296:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800729a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800729e:	4a04      	ldr	r2, [pc, #16]	; (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80072a0:	430b      	orrs	r3, r1
 80072a2:	6713      	str	r3, [r2, #112]	; 0x70
 80072a4:	e00e      	b.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80072a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80072aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80072ae:	e009      	b.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80072b0:	58024400 	.word	0x58024400
 80072b4:	58024800 	.word	0x58024800
 80072b8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80072c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80072c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072cc:	f002 0301 	and.w	r3, r2, #1
 80072d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80072d4:	2300      	movs	r3, #0
 80072d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80072da:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80072de:	460b      	mov	r3, r1
 80072e0:	4313      	orrs	r3, r2
 80072e2:	f000 8089 	beq.w	80073f8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80072e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072ec:	2b28      	cmp	r3, #40	; 0x28
 80072ee:	d86b      	bhi.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80072f0:	a201      	add	r2, pc, #4	; (adr r2, 80072f8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80072f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072f6:	bf00      	nop
 80072f8:	080073d1 	.word	0x080073d1
 80072fc:	080073c9 	.word	0x080073c9
 8007300:	080073c9 	.word	0x080073c9
 8007304:	080073c9 	.word	0x080073c9
 8007308:	080073c9 	.word	0x080073c9
 800730c:	080073c9 	.word	0x080073c9
 8007310:	080073c9 	.word	0x080073c9
 8007314:	080073c9 	.word	0x080073c9
 8007318:	0800739d 	.word	0x0800739d
 800731c:	080073c9 	.word	0x080073c9
 8007320:	080073c9 	.word	0x080073c9
 8007324:	080073c9 	.word	0x080073c9
 8007328:	080073c9 	.word	0x080073c9
 800732c:	080073c9 	.word	0x080073c9
 8007330:	080073c9 	.word	0x080073c9
 8007334:	080073c9 	.word	0x080073c9
 8007338:	080073b3 	.word	0x080073b3
 800733c:	080073c9 	.word	0x080073c9
 8007340:	080073c9 	.word	0x080073c9
 8007344:	080073c9 	.word	0x080073c9
 8007348:	080073c9 	.word	0x080073c9
 800734c:	080073c9 	.word	0x080073c9
 8007350:	080073c9 	.word	0x080073c9
 8007354:	080073c9 	.word	0x080073c9
 8007358:	080073d1 	.word	0x080073d1
 800735c:	080073c9 	.word	0x080073c9
 8007360:	080073c9 	.word	0x080073c9
 8007364:	080073c9 	.word	0x080073c9
 8007368:	080073c9 	.word	0x080073c9
 800736c:	080073c9 	.word	0x080073c9
 8007370:	080073c9 	.word	0x080073c9
 8007374:	080073c9 	.word	0x080073c9
 8007378:	080073d1 	.word	0x080073d1
 800737c:	080073c9 	.word	0x080073c9
 8007380:	080073c9 	.word	0x080073c9
 8007384:	080073c9 	.word	0x080073c9
 8007388:	080073c9 	.word	0x080073c9
 800738c:	080073c9 	.word	0x080073c9
 8007390:	080073c9 	.word	0x080073c9
 8007394:	080073c9 	.word	0x080073c9
 8007398:	080073d1 	.word	0x080073d1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800739c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073a0:	3308      	adds	r3, #8
 80073a2:	2101      	movs	r1, #1
 80073a4:	4618      	mov	r0, r3
 80073a6:	f001 fe95 	bl	80090d4 <RCCEx_PLL2_Config>
 80073aa:	4603      	mov	r3, r0
 80073ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80073b0:	e00f      	b.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80073b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073b6:	3328      	adds	r3, #40	; 0x28
 80073b8:	2101      	movs	r1, #1
 80073ba:	4618      	mov	r0, r3
 80073bc:	f001 ff3c 	bl	8009238 <RCCEx_PLL3_Config>
 80073c0:	4603      	mov	r3, r0
 80073c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80073c6:	e004      	b.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073c8:	2301      	movs	r3, #1
 80073ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80073ce:	e000      	b.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80073d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d10a      	bne.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80073da:	4bbf      	ldr	r3, [pc, #764]	; (80076d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80073dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073de:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80073e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073e8:	4abb      	ldr	r2, [pc, #748]	; (80076d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80073ea:	430b      	orrs	r3, r1
 80073ec:	6553      	str	r3, [r2, #84]	; 0x54
 80073ee:	e003      	b.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80073f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80073f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007400:	f002 0302 	and.w	r3, r2, #2
 8007404:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007408:	2300      	movs	r3, #0
 800740a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800740e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8007412:	460b      	mov	r3, r1
 8007414:	4313      	orrs	r3, r2
 8007416:	d041      	beq.n	800749c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007418:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800741c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800741e:	2b05      	cmp	r3, #5
 8007420:	d824      	bhi.n	800746c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007422:	a201      	add	r2, pc, #4	; (adr r2, 8007428 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007428:	08007475 	.word	0x08007475
 800742c:	08007441 	.word	0x08007441
 8007430:	08007457 	.word	0x08007457
 8007434:	08007475 	.word	0x08007475
 8007438:	08007475 	.word	0x08007475
 800743c:	08007475 	.word	0x08007475
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007440:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007444:	3308      	adds	r3, #8
 8007446:	2101      	movs	r1, #1
 8007448:	4618      	mov	r0, r3
 800744a:	f001 fe43 	bl	80090d4 <RCCEx_PLL2_Config>
 800744e:	4603      	mov	r3, r0
 8007450:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007454:	e00f      	b.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007456:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800745a:	3328      	adds	r3, #40	; 0x28
 800745c:	2101      	movs	r1, #1
 800745e:	4618      	mov	r0, r3
 8007460:	f001 feea 	bl	8009238 <RCCEx_PLL3_Config>
 8007464:	4603      	mov	r3, r0
 8007466:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800746a:	e004      	b.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800746c:	2301      	movs	r3, #1
 800746e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007472:	e000      	b.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007474:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007476:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800747a:	2b00      	cmp	r3, #0
 800747c:	d10a      	bne.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800747e:	4b96      	ldr	r3, [pc, #600]	; (80076d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007482:	f023 0107 	bic.w	r1, r3, #7
 8007486:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800748a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800748c:	4a92      	ldr	r2, [pc, #584]	; (80076d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800748e:	430b      	orrs	r3, r1
 8007490:	6553      	str	r3, [r2, #84]	; 0x54
 8007492:	e003      	b.n	800749c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007494:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007498:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800749c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a4:	f002 0304 	and.w	r3, r2, #4
 80074a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80074ac:	2300      	movs	r3, #0
 80074ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80074b2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80074b6:	460b      	mov	r3, r1
 80074b8:	4313      	orrs	r3, r2
 80074ba:	d044      	beq.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80074bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80074c4:	2b05      	cmp	r3, #5
 80074c6:	d825      	bhi.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80074c8:	a201      	add	r2, pc, #4	; (adr r2, 80074d0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80074ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ce:	bf00      	nop
 80074d0:	0800751d 	.word	0x0800751d
 80074d4:	080074e9 	.word	0x080074e9
 80074d8:	080074ff 	.word	0x080074ff
 80074dc:	0800751d 	.word	0x0800751d
 80074e0:	0800751d 	.word	0x0800751d
 80074e4:	0800751d 	.word	0x0800751d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80074e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074ec:	3308      	adds	r3, #8
 80074ee:	2101      	movs	r1, #1
 80074f0:	4618      	mov	r0, r3
 80074f2:	f001 fdef 	bl	80090d4 <RCCEx_PLL2_Config>
 80074f6:	4603      	mov	r3, r0
 80074f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80074fc:	e00f      	b.n	800751e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80074fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007502:	3328      	adds	r3, #40	; 0x28
 8007504:	2101      	movs	r1, #1
 8007506:	4618      	mov	r0, r3
 8007508:	f001 fe96 	bl	8009238 <RCCEx_PLL3_Config>
 800750c:	4603      	mov	r3, r0
 800750e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007512:	e004      	b.n	800751e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007514:	2301      	movs	r3, #1
 8007516:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800751a:	e000      	b.n	800751e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800751c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800751e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007522:	2b00      	cmp	r3, #0
 8007524:	d10b      	bne.n	800753e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007526:	4b6c      	ldr	r3, [pc, #432]	; (80076d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800752a:	f023 0107 	bic.w	r1, r3, #7
 800752e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007532:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007536:	4a68      	ldr	r2, [pc, #416]	; (80076d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007538:	430b      	orrs	r3, r1
 800753a:	6593      	str	r3, [r2, #88]	; 0x58
 800753c:	e003      	b.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800753e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007542:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007546:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800754a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800754e:	f002 0320 	and.w	r3, r2, #32
 8007552:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007556:	2300      	movs	r3, #0
 8007558:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800755c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007560:	460b      	mov	r3, r1
 8007562:	4313      	orrs	r3, r2
 8007564:	d055      	beq.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007566:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800756a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800756e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007572:	d033      	beq.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007574:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007578:	d82c      	bhi.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800757a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800757e:	d02f      	beq.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007580:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007584:	d826      	bhi.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007586:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800758a:	d02b      	beq.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800758c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007590:	d820      	bhi.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007592:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007596:	d012      	beq.n	80075be <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007598:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800759c:	d81a      	bhi.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d022      	beq.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80075a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80075a6:	d115      	bne.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80075a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075ac:	3308      	adds	r3, #8
 80075ae:	2100      	movs	r1, #0
 80075b0:	4618      	mov	r0, r3
 80075b2:	f001 fd8f 	bl	80090d4 <RCCEx_PLL2_Config>
 80075b6:	4603      	mov	r3, r0
 80075b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80075bc:	e015      	b.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80075be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075c2:	3328      	adds	r3, #40	; 0x28
 80075c4:	2102      	movs	r1, #2
 80075c6:	4618      	mov	r0, r3
 80075c8:	f001 fe36 	bl	8009238 <RCCEx_PLL3_Config>
 80075cc:	4603      	mov	r3, r0
 80075ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80075d2:	e00a      	b.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075d4:	2301      	movs	r3, #1
 80075d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80075da:	e006      	b.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80075dc:	bf00      	nop
 80075de:	e004      	b.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80075e0:	bf00      	nop
 80075e2:	e002      	b.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80075e4:	bf00      	nop
 80075e6:	e000      	b.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80075e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d10b      	bne.n	800760a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80075f2:	4b39      	ldr	r3, [pc, #228]	; (80076d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80075f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075f6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80075fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007602:	4a35      	ldr	r2, [pc, #212]	; (80076d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007604:	430b      	orrs	r3, r1
 8007606:	6553      	str	r3, [r2, #84]	; 0x54
 8007608:	e003      	b.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800760a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800760e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007612:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800761a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800761e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007622:	2300      	movs	r3, #0
 8007624:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007628:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800762c:	460b      	mov	r3, r1
 800762e:	4313      	orrs	r3, r2
 8007630:	d058      	beq.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007632:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007636:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800763a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800763e:	d033      	beq.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007640:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007644:	d82c      	bhi.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007646:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800764a:	d02f      	beq.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800764c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007650:	d826      	bhi.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007652:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007656:	d02b      	beq.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007658:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800765c:	d820      	bhi.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800765e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007662:	d012      	beq.n	800768a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007664:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007668:	d81a      	bhi.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800766a:	2b00      	cmp	r3, #0
 800766c:	d022      	beq.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800766e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007672:	d115      	bne.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007674:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007678:	3308      	adds	r3, #8
 800767a:	2100      	movs	r1, #0
 800767c:	4618      	mov	r0, r3
 800767e:	f001 fd29 	bl	80090d4 <RCCEx_PLL2_Config>
 8007682:	4603      	mov	r3, r0
 8007684:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007688:	e015      	b.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800768a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800768e:	3328      	adds	r3, #40	; 0x28
 8007690:	2102      	movs	r1, #2
 8007692:	4618      	mov	r0, r3
 8007694:	f001 fdd0 	bl	8009238 <RCCEx_PLL3_Config>
 8007698:	4603      	mov	r3, r0
 800769a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800769e:	e00a      	b.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076a0:	2301      	movs	r3, #1
 80076a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80076a6:	e006      	b.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80076a8:	bf00      	nop
 80076aa:	e004      	b.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80076ac:	bf00      	nop
 80076ae:	e002      	b.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80076b0:	bf00      	nop
 80076b2:	e000      	b.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80076b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d10e      	bne.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80076be:	4b06      	ldr	r3, [pc, #24]	; (80076d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80076c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076c2:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80076c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80076ce:	4a02      	ldr	r2, [pc, #8]	; (80076d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80076d0:	430b      	orrs	r3, r1
 80076d2:	6593      	str	r3, [r2, #88]	; 0x58
 80076d4:	e006      	b.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80076d6:	bf00      	nop
 80076d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80076e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80076e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ec:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80076f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80076f4:	2300      	movs	r3, #0
 80076f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80076fa:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80076fe:	460b      	mov	r3, r1
 8007700:	4313      	orrs	r3, r2
 8007702:	d055      	beq.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007704:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007708:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800770c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007710:	d033      	beq.n	800777a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8007712:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007716:	d82c      	bhi.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007718:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800771c:	d02f      	beq.n	800777e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800771e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007722:	d826      	bhi.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007724:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007728:	d02b      	beq.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800772a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800772e:	d820      	bhi.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007730:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007734:	d012      	beq.n	800775c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8007736:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800773a:	d81a      	bhi.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800773c:	2b00      	cmp	r3, #0
 800773e:	d022      	beq.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007740:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007744:	d115      	bne.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007746:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800774a:	3308      	adds	r3, #8
 800774c:	2100      	movs	r1, #0
 800774e:	4618      	mov	r0, r3
 8007750:	f001 fcc0 	bl	80090d4 <RCCEx_PLL2_Config>
 8007754:	4603      	mov	r3, r0
 8007756:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800775a:	e015      	b.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800775c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007760:	3328      	adds	r3, #40	; 0x28
 8007762:	2102      	movs	r1, #2
 8007764:	4618      	mov	r0, r3
 8007766:	f001 fd67 	bl	8009238 <RCCEx_PLL3_Config>
 800776a:	4603      	mov	r3, r0
 800776c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007770:	e00a      	b.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007772:	2301      	movs	r3, #1
 8007774:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007778:	e006      	b.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800777a:	bf00      	nop
 800777c:	e004      	b.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800777e:	bf00      	nop
 8007780:	e002      	b.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007782:	bf00      	nop
 8007784:	e000      	b.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007786:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007788:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800778c:	2b00      	cmp	r3, #0
 800778e:	d10b      	bne.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007790:	4ba1      	ldr	r3, [pc, #644]	; (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007794:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8007798:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800779c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80077a0:	4a9d      	ldr	r2, [pc, #628]	; (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80077a2:	430b      	orrs	r3, r1
 80077a4:	6593      	str	r3, [r2, #88]	; 0x58
 80077a6:	e003      	b.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80077ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80077b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b8:	f002 0308 	and.w	r3, r2, #8
 80077bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80077c0:	2300      	movs	r3, #0
 80077c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80077c6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80077ca:	460b      	mov	r3, r1
 80077cc:	4313      	orrs	r3, r2
 80077ce:	d01e      	beq.n	800780e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80077d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077dc:	d10c      	bne.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80077de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077e2:	3328      	adds	r3, #40	; 0x28
 80077e4:	2102      	movs	r1, #2
 80077e6:	4618      	mov	r0, r3
 80077e8:	f001 fd26 	bl	8009238 <RCCEx_PLL3_Config>
 80077ec:	4603      	mov	r3, r0
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d002      	beq.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80077f2:	2301      	movs	r3, #1
 80077f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80077f8:	4b87      	ldr	r3, [pc, #540]	; (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80077fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077fc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007800:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007804:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007808:	4a83      	ldr	r2, [pc, #524]	; (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800780a:	430b      	orrs	r3, r1
 800780c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800780e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007816:	f002 0310 	and.w	r3, r2, #16
 800781a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800781e:	2300      	movs	r3, #0
 8007820:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007824:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8007828:	460b      	mov	r3, r1
 800782a:	4313      	orrs	r3, r2
 800782c:	d01e      	beq.n	800786c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800782e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007832:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007836:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800783a:	d10c      	bne.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800783c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007840:	3328      	adds	r3, #40	; 0x28
 8007842:	2102      	movs	r1, #2
 8007844:	4618      	mov	r0, r3
 8007846:	f001 fcf7 	bl	8009238 <RCCEx_PLL3_Config>
 800784a:	4603      	mov	r3, r0
 800784c:	2b00      	cmp	r3, #0
 800784e:	d002      	beq.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007850:	2301      	movs	r3, #1
 8007852:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007856:	4b70      	ldr	r3, [pc, #448]	; (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800785a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800785e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007862:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007866:	4a6c      	ldr	r2, [pc, #432]	; (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007868:	430b      	orrs	r3, r1
 800786a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800786c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007874:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8007878:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800787c:	2300      	movs	r3, #0
 800787e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007882:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8007886:	460b      	mov	r3, r1
 8007888:	4313      	orrs	r3, r2
 800788a:	d03e      	beq.n	800790a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800788c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007890:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007894:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007898:	d022      	beq.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800789a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800789e:	d81b      	bhi.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d003      	beq.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80078a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078a8:	d00b      	beq.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80078aa:	e015      	b.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80078ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078b0:	3308      	adds	r3, #8
 80078b2:	2100      	movs	r1, #0
 80078b4:	4618      	mov	r0, r3
 80078b6:	f001 fc0d 	bl	80090d4 <RCCEx_PLL2_Config>
 80078ba:	4603      	mov	r3, r0
 80078bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80078c0:	e00f      	b.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80078c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078c6:	3328      	adds	r3, #40	; 0x28
 80078c8:	2102      	movs	r1, #2
 80078ca:	4618      	mov	r0, r3
 80078cc:	f001 fcb4 	bl	8009238 <RCCEx_PLL3_Config>
 80078d0:	4603      	mov	r3, r0
 80078d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80078d6:	e004      	b.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078d8:	2301      	movs	r3, #1
 80078da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80078de:	e000      	b.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80078e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d10b      	bne.n	8007902 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80078ea:	4b4b      	ldr	r3, [pc, #300]	; (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80078ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078ee:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80078f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80078fa:	4a47      	ldr	r2, [pc, #284]	; (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80078fc:	430b      	orrs	r3, r1
 80078fe:	6593      	str	r3, [r2, #88]	; 0x58
 8007900:	e003      	b.n	800790a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007902:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007906:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800790a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800790e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007912:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8007916:	67bb      	str	r3, [r7, #120]	; 0x78
 8007918:	2300      	movs	r3, #0
 800791a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800791c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8007920:	460b      	mov	r3, r1
 8007922:	4313      	orrs	r3, r2
 8007924:	d03b      	beq.n	800799e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007926:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800792a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800792e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007932:	d01f      	beq.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007934:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007938:	d818      	bhi.n	800796c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800793a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800793e:	d003      	beq.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007940:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007944:	d007      	beq.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007946:	e011      	b.n	800796c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007948:	4b33      	ldr	r3, [pc, #204]	; (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800794a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800794c:	4a32      	ldr	r2, [pc, #200]	; (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800794e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007952:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007954:	e00f      	b.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007956:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800795a:	3328      	adds	r3, #40	; 0x28
 800795c:	2101      	movs	r1, #1
 800795e:	4618      	mov	r0, r3
 8007960:	f001 fc6a 	bl	8009238 <RCCEx_PLL3_Config>
 8007964:	4603      	mov	r3, r0
 8007966:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800796a:	e004      	b.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800796c:	2301      	movs	r3, #1
 800796e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007972:	e000      	b.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007974:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007976:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800797a:	2b00      	cmp	r3, #0
 800797c:	d10b      	bne.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800797e:	4b26      	ldr	r3, [pc, #152]	; (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007982:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007986:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800798a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800798e:	4a22      	ldr	r2, [pc, #136]	; (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007990:	430b      	orrs	r3, r1
 8007992:	6553      	str	r3, [r2, #84]	; 0x54
 8007994:	e003      	b.n	800799e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007996:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800799a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800799e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80079aa:	673b      	str	r3, [r7, #112]	; 0x70
 80079ac:	2300      	movs	r3, #0
 80079ae:	677b      	str	r3, [r7, #116]	; 0x74
 80079b0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80079b4:	460b      	mov	r3, r1
 80079b6:	4313      	orrs	r3, r2
 80079b8:	d034      	beq.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80079ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d003      	beq.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80079c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079c8:	d007      	beq.n	80079da <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80079ca:	e011      	b.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079cc:	4b12      	ldr	r3, [pc, #72]	; (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80079ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d0:	4a11      	ldr	r2, [pc, #68]	; (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80079d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80079d8:	e00e      	b.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80079da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079de:	3308      	adds	r3, #8
 80079e0:	2102      	movs	r1, #2
 80079e2:	4618      	mov	r0, r3
 80079e4:	f001 fb76 	bl	80090d4 <RCCEx_PLL2_Config>
 80079e8:	4603      	mov	r3, r0
 80079ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80079ee:	e003      	b.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80079f0:	2301      	movs	r3, #1
 80079f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80079f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d10d      	bne.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007a00:	4b05      	ldr	r3, [pc, #20]	; (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a04:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a0e:	4a02      	ldr	r2, [pc, #8]	; (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a10:	430b      	orrs	r3, r1
 8007a12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007a14:	e006      	b.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007a16:	bf00      	nop
 8007a18:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a1c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a20:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007a24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a2c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8007a30:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a32:	2300      	movs	r3, #0
 8007a34:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007a36:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8007a3a:	460b      	mov	r3, r1
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	d00c      	beq.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a44:	3328      	adds	r3, #40	; 0x28
 8007a46:	2102      	movs	r1, #2
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f001 fbf5 	bl	8009238 <RCCEx_PLL3_Config>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d002      	beq.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007a54:	2301      	movs	r3, #1
 8007a56:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a62:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8007a66:	663b      	str	r3, [r7, #96]	; 0x60
 8007a68:	2300      	movs	r3, #0
 8007a6a:	667b      	str	r3, [r7, #100]	; 0x64
 8007a6c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8007a70:	460b      	mov	r3, r1
 8007a72:	4313      	orrs	r3, r2
 8007a74:	d038      	beq.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a82:	d018      	beq.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007a84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a88:	d811      	bhi.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007a8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a8e:	d014      	beq.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007a90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a94:	d80b      	bhi.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d011      	beq.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007a9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a9e:	d106      	bne.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007aa0:	4bc3      	ldr	r3, [pc, #780]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aa4:	4ac2      	ldr	r2, [pc, #776]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007aa6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007aaa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007aac:	e008      	b.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007ab4:	e004      	b.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007ab6:	bf00      	nop
 8007ab8:	e002      	b.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007aba:	bf00      	nop
 8007abc:	e000      	b.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007abe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ac0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d10b      	bne.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007ac8:	4bb9      	ldr	r3, [pc, #740]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007aca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007acc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ad4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ad8:	4ab5      	ldr	r2, [pc, #724]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ada:	430b      	orrs	r3, r1
 8007adc:	6553      	str	r3, [r2, #84]	; 0x54
 8007ade:	e003      	b.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ae0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ae4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8007af4:	65bb      	str	r3, [r7, #88]	; 0x58
 8007af6:	2300      	movs	r3, #0
 8007af8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007afa:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8007afe:	460b      	mov	r3, r1
 8007b00:	4313      	orrs	r3, r2
 8007b02:	d009      	beq.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007b04:	4baa      	ldr	r3, [pc, #680]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b08:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b12:	4aa7      	ldr	r2, [pc, #668]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b14:	430b      	orrs	r3, r1
 8007b16:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b20:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8007b24:	653b      	str	r3, [r7, #80]	; 0x50
 8007b26:	2300      	movs	r3, #0
 8007b28:	657b      	str	r3, [r7, #84]	; 0x54
 8007b2a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8007b2e:	460b      	mov	r3, r1
 8007b30:	4313      	orrs	r3, r2
 8007b32:	d00a      	beq.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007b34:	4b9e      	ldr	r3, [pc, #632]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b36:	691b      	ldr	r3, [r3, #16]
 8007b38:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8007b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b40:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007b44:	4a9a      	ldr	r2, [pc, #616]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b46:	430b      	orrs	r3, r1
 8007b48:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b52:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8007b56:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b58:	2300      	movs	r3, #0
 8007b5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b5c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8007b60:	460b      	mov	r3, r1
 8007b62:	4313      	orrs	r3, r2
 8007b64:	d009      	beq.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007b66:	4b92      	ldr	r3, [pc, #584]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b6a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8007b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b74:	4a8e      	ldr	r2, [pc, #568]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b76:	430b      	orrs	r3, r1
 8007b78:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007b7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b82:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8007b86:	643b      	str	r3, [r7, #64]	; 0x40
 8007b88:	2300      	movs	r3, #0
 8007b8a:	647b      	str	r3, [r7, #68]	; 0x44
 8007b8c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8007b90:	460b      	mov	r3, r1
 8007b92:	4313      	orrs	r3, r2
 8007b94:	d00e      	beq.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007b96:	4b86      	ldr	r3, [pc, #536]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b98:	691b      	ldr	r3, [r3, #16]
 8007b9a:	4a85      	ldr	r2, [pc, #532]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b9c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007ba0:	6113      	str	r3, [r2, #16]
 8007ba2:	4b83      	ldr	r3, [pc, #524]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ba4:	6919      	ldr	r1, [r3, #16]
 8007ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007baa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007bae:	4a80      	ldr	r2, [pc, #512]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007bb0:	430b      	orrs	r3, r1
 8007bb2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bbc:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8007bc0:	63bb      	str	r3, [r7, #56]	; 0x38
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007bc6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8007bca:	460b      	mov	r3, r1
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	d009      	beq.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007bd0:	4b77      	ldr	r3, [pc, #476]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007bd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bd4:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007bd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bde:	4a74      	ldr	r2, [pc, #464]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007be0:	430b      	orrs	r3, r1
 8007be2:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bec:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8007bf0:	633b      	str	r3, [r7, #48]	; 0x30
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	637b      	str	r3, [r7, #52]	; 0x34
 8007bf6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8007bfa:	460b      	mov	r3, r1
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	d00a      	beq.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007c00:	4b6b      	ldr	r3, [pc, #428]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c04:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8007c08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c10:	4a67      	ldr	r2, [pc, #412]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c12:	430b      	orrs	r3, r1
 8007c14:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c1e:	2100      	movs	r1, #0
 8007c20:	62b9      	str	r1, [r7, #40]	; 0x28
 8007c22:	f003 0301 	and.w	r3, r3, #1
 8007c26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c28:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007c2c:	460b      	mov	r3, r1
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	d011      	beq.n	8007c56 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c36:	3308      	adds	r3, #8
 8007c38:	2100      	movs	r1, #0
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f001 fa4a 	bl	80090d4 <RCCEx_PLL2_Config>
 8007c40:	4603      	mov	r3, r0
 8007c42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007c46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d003      	beq.n	8007c56 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c52:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007c56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c5e:	2100      	movs	r1, #0
 8007c60:	6239      	str	r1, [r7, #32]
 8007c62:	f003 0302 	and.w	r3, r3, #2
 8007c66:	627b      	str	r3, [r7, #36]	; 0x24
 8007c68:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007c6c:	460b      	mov	r3, r1
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	d011      	beq.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c76:	3308      	adds	r3, #8
 8007c78:	2101      	movs	r1, #1
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f001 fa2a 	bl	80090d4 <RCCEx_PLL2_Config>
 8007c80:	4603      	mov	r3, r0
 8007c82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007c86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d003      	beq.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c92:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c9e:	2100      	movs	r1, #0
 8007ca0:	61b9      	str	r1, [r7, #24]
 8007ca2:	f003 0304 	and.w	r3, r3, #4
 8007ca6:	61fb      	str	r3, [r7, #28]
 8007ca8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007cac:	460b      	mov	r3, r1
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	d011      	beq.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cb6:	3308      	adds	r3, #8
 8007cb8:	2102      	movs	r1, #2
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f001 fa0a 	bl	80090d4 <RCCEx_PLL2_Config>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007cc6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d003      	beq.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007cd2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cde:	2100      	movs	r1, #0
 8007ce0:	6139      	str	r1, [r7, #16]
 8007ce2:	f003 0308 	and.w	r3, r3, #8
 8007ce6:	617b      	str	r3, [r7, #20]
 8007ce8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007cec:	460b      	mov	r3, r1
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	d011      	beq.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cf6:	3328      	adds	r3, #40	; 0x28
 8007cf8:	2100      	movs	r1, #0
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f001 fa9c 	bl	8009238 <RCCEx_PLL3_Config>
 8007d00:	4603      	mov	r3, r0
 8007d02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8007d06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d003      	beq.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d12:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d1e:	2100      	movs	r1, #0
 8007d20:	60b9      	str	r1, [r7, #8]
 8007d22:	f003 0310 	and.w	r3, r3, #16
 8007d26:	60fb      	str	r3, [r7, #12]
 8007d28:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007d2c:	460b      	mov	r3, r1
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	d011      	beq.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007d32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d36:	3328      	adds	r3, #40	; 0x28
 8007d38:	2101      	movs	r1, #1
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f001 fa7c 	bl	8009238 <RCCEx_PLL3_Config>
 8007d40:	4603      	mov	r3, r0
 8007d42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007d46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d003      	beq.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d52:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d5e:	2100      	movs	r1, #0
 8007d60:	6039      	str	r1, [r7, #0]
 8007d62:	f003 0320 	and.w	r3, r3, #32
 8007d66:	607b      	str	r3, [r7, #4]
 8007d68:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007d6c:	460b      	mov	r3, r1
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	d011      	beq.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d76:	3328      	adds	r3, #40	; 0x28
 8007d78:	2102      	movs	r1, #2
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f001 fa5c 	bl	8009238 <RCCEx_PLL3_Config>
 8007d80:	4603      	mov	r3, r0
 8007d82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007d86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d003      	beq.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d92:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8007d96:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d101      	bne.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	e000      	b.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8007da2:	2301      	movs	r3, #1
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8007daa:	46bd      	mov	sp, r7
 8007dac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007db0:	58024400 	.word	0x58024400

08007db4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b090      	sub	sp, #64	; 0x40
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007dbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007dc2:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8007dc6:	430b      	orrs	r3, r1
 8007dc8:	f040 8094 	bne.w	8007ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007dcc:	4b9e      	ldr	r3, [pc, #632]	; (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007dce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dd0:	f003 0307 	and.w	r3, r3, #7
 8007dd4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd8:	2b04      	cmp	r3, #4
 8007dda:	f200 8087 	bhi.w	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007dde:	a201      	add	r2, pc, #4	; (adr r2, 8007de4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007de4:	08007df9 	.word	0x08007df9
 8007de8:	08007e21 	.word	0x08007e21
 8007dec:	08007e49 	.word	0x08007e49
 8007df0:	08007ee5 	.word	0x08007ee5
 8007df4:	08007e71 	.word	0x08007e71
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007df8:	4b93      	ldr	r3, [pc, #588]	; (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e00:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e04:	d108      	bne.n	8007e18 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f001 f810 	bl	8008e30 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e14:	f000 bd45 	b.w	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e1c:	f000 bd41 	b.w	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e20:	4b89      	ldr	r3, [pc, #548]	; (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e2c:	d108      	bne.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e2e:	f107 0318 	add.w	r3, r7, #24
 8007e32:	4618      	mov	r0, r3
 8007e34:	f000 fd54 	bl	80088e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007e38:	69bb      	ldr	r3, [r7, #24]
 8007e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e3c:	f000 bd31 	b.w	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e40:	2300      	movs	r3, #0
 8007e42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e44:	f000 bd2d 	b.w	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007e48:	4b7f      	ldr	r3, [pc, #508]	; (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e54:	d108      	bne.n	8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e56:	f107 030c 	add.w	r3, r7, #12
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f000 fe94 	bl	8008b88 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e64:	f000 bd1d 	b.w	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e6c:	f000 bd19 	b.w	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007e70:	4b75      	ldr	r3, [pc, #468]	; (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007e72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e74:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007e78:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007e7a:	4b73      	ldr	r3, [pc, #460]	; (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f003 0304 	and.w	r3, r3, #4
 8007e82:	2b04      	cmp	r3, #4
 8007e84:	d10c      	bne.n	8007ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d109      	bne.n	8007ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007e8c:	4b6e      	ldr	r3, [pc, #440]	; (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	08db      	lsrs	r3, r3, #3
 8007e92:	f003 0303 	and.w	r3, r3, #3
 8007e96:	4a6d      	ldr	r2, [pc, #436]	; (800804c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007e98:	fa22 f303 	lsr.w	r3, r2, r3
 8007e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e9e:	e01f      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007ea0:	4b69      	ldr	r3, [pc, #420]	; (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ea8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007eac:	d106      	bne.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8007eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eb0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007eb4:	d102      	bne.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007eb6:	4b66      	ldr	r3, [pc, #408]	; (8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007eba:	e011      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007ebc:	4b62      	ldr	r3, [pc, #392]	; (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ec4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ec8:	d106      	bne.n	8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8007eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ecc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ed0:	d102      	bne.n	8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007ed2:	4b60      	ldr	r3, [pc, #384]	; (8008054 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ed6:	e003      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007edc:	f000 bce1 	b.w	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007ee0:	f000 bcdf 	b.w	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007ee4:	4b5c      	ldr	r3, [pc, #368]	; (8008058 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ee8:	f000 bcdb 	b.w	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007eec:	2300      	movs	r3, #0
 8007eee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ef0:	f000 bcd7 	b.w	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007ef4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ef8:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8007efc:	430b      	orrs	r3, r1
 8007efe:	f040 80ad 	bne.w	800805c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8007f02:	4b51      	ldr	r3, [pc, #324]	; (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f06:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007f0a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f12:	d056      	beq.n	8007fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8007f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f1a:	f200 8090 	bhi.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f20:	2bc0      	cmp	r3, #192	; 0xc0
 8007f22:	f000 8088 	beq.w	8008036 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8007f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f28:	2bc0      	cmp	r3, #192	; 0xc0
 8007f2a:	f200 8088 	bhi.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f30:	2b80      	cmp	r3, #128	; 0x80
 8007f32:	d032      	beq.n	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f36:	2b80      	cmp	r3, #128	; 0x80
 8007f38:	f200 8081 	bhi.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d003      	beq.n	8007f4a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8007f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f44:	2b40      	cmp	r3, #64	; 0x40
 8007f46:	d014      	beq.n	8007f72 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8007f48:	e079      	b.n	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007f4a:	4b3f      	ldr	r3, [pc, #252]	; (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f56:	d108      	bne.n	8007f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f000 ff67 	bl	8008e30 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f64:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f66:	f000 bc9c 	b.w	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f6e:	f000 bc98 	b.w	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007f72:	4b35      	ldr	r3, [pc, #212]	; (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f7e:	d108      	bne.n	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f80:	f107 0318 	add.w	r3, r7, #24
 8007f84:	4618      	mov	r0, r3
 8007f86:	f000 fcab 	bl	80088e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007f8a:	69bb      	ldr	r3, [r7, #24]
 8007f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f8e:	f000 bc88 	b.w	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f92:	2300      	movs	r3, #0
 8007f94:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f96:	f000 bc84 	b.w	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007f9a:	4b2b      	ldr	r3, [pc, #172]	; (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007fa2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fa6:	d108      	bne.n	8007fba <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007fa8:	f107 030c 	add.w	r3, r7, #12
 8007fac:	4618      	mov	r0, r3
 8007fae:	f000 fdeb 	bl	8008b88 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fb6:	f000 bc74 	b.w	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fbe:	f000 bc70 	b.w	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007fc2:	4b21      	ldr	r3, [pc, #132]	; (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fc6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007fca:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007fcc:	4b1e      	ldr	r3, [pc, #120]	; (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f003 0304 	and.w	r3, r3, #4
 8007fd4:	2b04      	cmp	r3, #4
 8007fd6:	d10c      	bne.n	8007ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8007fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d109      	bne.n	8007ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007fde:	4b1a      	ldr	r3, [pc, #104]	; (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	08db      	lsrs	r3, r3, #3
 8007fe4:	f003 0303 	and.w	r3, r3, #3
 8007fe8:	4a18      	ldr	r2, [pc, #96]	; (800804c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007fea:	fa22 f303 	lsr.w	r3, r2, r3
 8007fee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ff0:	e01f      	b.n	8008032 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007ff2:	4b15      	ldr	r3, [pc, #84]	; (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ffa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ffe:	d106      	bne.n	800800e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8008000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008002:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008006:	d102      	bne.n	800800e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008008:	4b11      	ldr	r3, [pc, #68]	; (8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800800a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800800c:	e011      	b.n	8008032 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800800e:	4b0e      	ldr	r3, [pc, #56]	; (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008016:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800801a:	d106      	bne.n	800802a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800801c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800801e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008022:	d102      	bne.n	800802a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008024:	4b0b      	ldr	r3, [pc, #44]	; (8008054 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008026:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008028:	e003      	b.n	8008032 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800802a:	2300      	movs	r3, #0
 800802c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800802e:	f000 bc38 	b.w	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008032:	f000 bc36 	b.w	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008036:	4b08      	ldr	r3, [pc, #32]	; (8008058 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008038:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800803a:	f000 bc32 	b.w	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800803e:	2300      	movs	r3, #0
 8008040:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008042:	f000 bc2e 	b.w	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008046:	bf00      	nop
 8008048:	58024400 	.word	0x58024400
 800804c:	03d09000 	.word	0x03d09000
 8008050:	003d0900 	.word	0x003d0900
 8008054:	017d7840 	.word	0x017d7840
 8008058:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800805c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008060:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8008064:	430b      	orrs	r3, r1
 8008066:	f040 809c 	bne.w	80081a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800806a:	4b9e      	ldr	r3, [pc, #632]	; (80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800806c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800806e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8008072:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008076:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800807a:	d054      	beq.n	8008126 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800807c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800807e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008082:	f200 808b 	bhi.w	800819c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008088:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800808c:	f000 8083 	beq.w	8008196 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8008090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008092:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008096:	f200 8081 	bhi.w	800819c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800809a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800809c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80080a0:	d02f      	beq.n	8008102 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80080a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80080a8:	d878      	bhi.n	800819c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80080aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d004      	beq.n	80080ba <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80080b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80080b6:	d012      	beq.n	80080de <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80080b8:	e070      	b.n	800819c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80080ba:	4b8a      	ldr	r3, [pc, #552]	; (80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80080c6:	d107      	bne.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80080c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80080cc:	4618      	mov	r0, r3
 80080ce:	f000 feaf 	bl	8008e30 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80080d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080d6:	e3e4      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80080d8:	2300      	movs	r3, #0
 80080da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080dc:	e3e1      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80080de:	4b81      	ldr	r3, [pc, #516]	; (80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80080ea:	d107      	bne.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080ec:	f107 0318 	add.w	r3, r7, #24
 80080f0:	4618      	mov	r0, r3
 80080f2:	f000 fbf5 	bl	80088e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80080f6:	69bb      	ldr	r3, [r7, #24]
 80080f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080fa:	e3d2      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80080fc:	2300      	movs	r3, #0
 80080fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008100:	e3cf      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008102:	4b78      	ldr	r3, [pc, #480]	; (80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800810a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800810e:	d107      	bne.n	8008120 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008110:	f107 030c 	add.w	r3, r7, #12
 8008114:	4618      	mov	r0, r3
 8008116:	f000 fd37 	bl	8008b88 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800811e:	e3c0      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008120:	2300      	movs	r3, #0
 8008122:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008124:	e3bd      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008126:	4b6f      	ldr	r3, [pc, #444]	; (80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800812a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800812e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008130:	4b6c      	ldr	r3, [pc, #432]	; (80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f003 0304 	and.w	r3, r3, #4
 8008138:	2b04      	cmp	r3, #4
 800813a:	d10c      	bne.n	8008156 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800813c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800813e:	2b00      	cmp	r3, #0
 8008140:	d109      	bne.n	8008156 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008142:	4b68      	ldr	r3, [pc, #416]	; (80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	08db      	lsrs	r3, r3, #3
 8008148:	f003 0303 	and.w	r3, r3, #3
 800814c:	4a66      	ldr	r2, [pc, #408]	; (80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800814e:	fa22 f303 	lsr.w	r3, r2, r3
 8008152:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008154:	e01e      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008156:	4b63      	ldr	r3, [pc, #396]	; (80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800815e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008162:	d106      	bne.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8008164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008166:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800816a:	d102      	bne.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800816c:	4b5f      	ldr	r3, [pc, #380]	; (80082ec <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800816e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008170:	e010      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008172:	4b5c      	ldr	r3, [pc, #368]	; (80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800817a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800817e:	d106      	bne.n	800818e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8008180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008182:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008186:	d102      	bne.n	800818e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008188:	4b59      	ldr	r3, [pc, #356]	; (80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800818a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800818c:	e002      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800818e:	2300      	movs	r3, #0
 8008190:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008192:	e386      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008194:	e385      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008196:	4b57      	ldr	r3, [pc, #348]	; (80082f4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008198:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800819a:	e382      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800819c:	2300      	movs	r3, #0
 800819e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081a0:	e37f      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80081a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081a6:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 80081aa:	430b      	orrs	r3, r1
 80081ac:	f040 80a7 	bne.w	80082fe <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80081b0:	4b4c      	ldr	r3, [pc, #304]	; (80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80081b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081b4:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80081b8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80081ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80081c0:	d055      	beq.n	800826e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80081c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80081c8:	f200 8096 	bhi.w	80082f8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80081cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80081d2:	f000 8084 	beq.w	80082de <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80081d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081d8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80081dc:	f200 808c 	bhi.w	80082f8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80081e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80081e6:	d030      	beq.n	800824a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80081e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80081ee:	f200 8083 	bhi.w	80082f8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80081f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d004      	beq.n	8008202 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80081f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081fa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80081fe:	d012      	beq.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8008200:	e07a      	b.n	80082f8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008202:	4b38      	ldr	r3, [pc, #224]	; (80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800820a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800820e:	d107      	bne.n	8008220 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008210:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008214:	4618      	mov	r0, r3
 8008216:	f000 fe0b 	bl	8008e30 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800821a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800821c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800821e:	e340      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008220:	2300      	movs	r3, #0
 8008222:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008224:	e33d      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008226:	4b2f      	ldr	r3, [pc, #188]	; (80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800822e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008232:	d107      	bne.n	8008244 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008234:	f107 0318 	add.w	r3, r7, #24
 8008238:	4618      	mov	r0, r3
 800823a:	f000 fb51 	bl	80088e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800823e:	69bb      	ldr	r3, [r7, #24]
 8008240:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008242:	e32e      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008244:	2300      	movs	r3, #0
 8008246:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008248:	e32b      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800824a:	4b26      	ldr	r3, [pc, #152]	; (80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008252:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008256:	d107      	bne.n	8008268 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008258:	f107 030c 	add.w	r3, r7, #12
 800825c:	4618      	mov	r0, r3
 800825e:	f000 fc93 	bl	8008b88 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008266:	e31c      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008268:	2300      	movs	r3, #0
 800826a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800826c:	e319      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800826e:	4b1d      	ldr	r3, [pc, #116]	; (80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008272:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008276:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008278:	4b1a      	ldr	r3, [pc, #104]	; (80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f003 0304 	and.w	r3, r3, #4
 8008280:	2b04      	cmp	r3, #4
 8008282:	d10c      	bne.n	800829e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8008284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008286:	2b00      	cmp	r3, #0
 8008288:	d109      	bne.n	800829e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800828a:	4b16      	ldr	r3, [pc, #88]	; (80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	08db      	lsrs	r3, r3, #3
 8008290:	f003 0303 	and.w	r3, r3, #3
 8008294:	4a14      	ldr	r2, [pc, #80]	; (80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008296:	fa22 f303 	lsr.w	r3, r2, r3
 800829a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800829c:	e01e      	b.n	80082dc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800829e:	4b11      	ldr	r3, [pc, #68]	; (80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082aa:	d106      	bne.n	80082ba <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80082ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80082b2:	d102      	bne.n	80082ba <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80082b4:	4b0d      	ldr	r3, [pc, #52]	; (80082ec <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80082b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082b8:	e010      	b.n	80082dc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80082ba:	4b0a      	ldr	r3, [pc, #40]	; (80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80082c6:	d106      	bne.n	80082d6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80082c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082ce:	d102      	bne.n	80082d6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80082d0:	4b07      	ldr	r3, [pc, #28]	; (80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80082d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082d4:	e002      	b.n	80082dc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80082d6:	2300      	movs	r3, #0
 80082d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80082da:	e2e2      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80082dc:	e2e1      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80082de:	4b05      	ldr	r3, [pc, #20]	; (80082f4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80082e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082e2:	e2de      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80082e4:	58024400 	.word	0x58024400
 80082e8:	03d09000 	.word	0x03d09000
 80082ec:	003d0900 	.word	0x003d0900
 80082f0:	017d7840 	.word	0x017d7840
 80082f4:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80082f8:	2300      	movs	r3, #0
 80082fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082fc:	e2d1      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80082fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008302:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8008306:	430b      	orrs	r3, r1
 8008308:	f040 809c 	bne.w	8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800830c:	4b93      	ldr	r3, [pc, #588]	; (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800830e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008310:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008314:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008318:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800831c:	d054      	beq.n	80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800831e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008320:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008324:	f200 808b 	bhi.w	800843e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800832a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800832e:	f000 8083 	beq.w	8008438 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8008332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008334:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008338:	f200 8081 	bhi.w	800843e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800833c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800833e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008342:	d02f      	beq.n	80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8008344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008346:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800834a:	d878      	bhi.n	800843e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800834c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800834e:	2b00      	cmp	r3, #0
 8008350:	d004      	beq.n	800835c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8008352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008354:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008358:	d012      	beq.n	8008380 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800835a:	e070      	b.n	800843e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800835c:	4b7f      	ldr	r3, [pc, #508]	; (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008364:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008368:	d107      	bne.n	800837a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800836a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800836e:	4618      	mov	r0, r3
 8008370:	f000 fd5e 	bl	8008e30 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008376:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008378:	e293      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800837a:	2300      	movs	r3, #0
 800837c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800837e:	e290      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008380:	4b76      	ldr	r3, [pc, #472]	; (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008388:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800838c:	d107      	bne.n	800839e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800838e:	f107 0318 	add.w	r3, r7, #24
 8008392:	4618      	mov	r0, r3
 8008394:	f000 faa4 	bl	80088e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008398:	69bb      	ldr	r3, [r7, #24]
 800839a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800839c:	e281      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800839e:	2300      	movs	r3, #0
 80083a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083a2:	e27e      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80083a4:	4b6d      	ldr	r3, [pc, #436]	; (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80083ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083b0:	d107      	bne.n	80083c2 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083b2:	f107 030c 	add.w	r3, r7, #12
 80083b6:	4618      	mov	r0, r3
 80083b8:	f000 fbe6 	bl	8008b88 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083c0:	e26f      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80083c2:	2300      	movs	r3, #0
 80083c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083c6:	e26c      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80083c8:	4b64      	ldr	r3, [pc, #400]	; (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80083ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80083d0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80083d2:	4b62      	ldr	r3, [pc, #392]	; (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f003 0304 	and.w	r3, r3, #4
 80083da:	2b04      	cmp	r3, #4
 80083dc:	d10c      	bne.n	80083f8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80083de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d109      	bne.n	80083f8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80083e4:	4b5d      	ldr	r3, [pc, #372]	; (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	08db      	lsrs	r3, r3, #3
 80083ea:	f003 0303 	and.w	r3, r3, #3
 80083ee:	4a5c      	ldr	r2, [pc, #368]	; (8008560 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80083f0:	fa22 f303 	lsr.w	r3, r2, r3
 80083f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083f6:	e01e      	b.n	8008436 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80083f8:	4b58      	ldr	r3, [pc, #352]	; (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008400:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008404:	d106      	bne.n	8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8008406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008408:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800840c:	d102      	bne.n	8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800840e:	4b55      	ldr	r3, [pc, #340]	; (8008564 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008410:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008412:	e010      	b.n	8008436 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008414:	4b51      	ldr	r3, [pc, #324]	; (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800841c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008420:	d106      	bne.n	8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8008422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008424:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008428:	d102      	bne.n	8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800842a:	4b4f      	ldr	r3, [pc, #316]	; (8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800842c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800842e:	e002      	b.n	8008436 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008430:	2300      	movs	r3, #0
 8008432:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008434:	e235      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008436:	e234      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008438:	4b4c      	ldr	r3, [pc, #304]	; (800856c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800843a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800843c:	e231      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800843e:	2300      	movs	r3, #0
 8008440:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008442:	e22e      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008444:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008448:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800844c:	430b      	orrs	r3, r1
 800844e:	f040 808f 	bne.w	8008570 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008452:	4b42      	ldr	r3, [pc, #264]	; (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008454:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008456:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800845a:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800845c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800845e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008462:	d06b      	beq.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8008464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008466:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800846a:	d874      	bhi.n	8008556 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800846c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800846e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008472:	d056      	beq.n	8008522 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8008474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008476:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800847a:	d86c      	bhi.n	8008556 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800847c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800847e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008482:	d03b      	beq.n	80084fc <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8008484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008486:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800848a:	d864      	bhi.n	8008556 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800848c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800848e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008492:	d021      	beq.n	80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8008494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008496:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800849a:	d85c      	bhi.n	8008556 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800849c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d004      	beq.n	80084ac <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80084a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084a8:	d004      	beq.n	80084b4 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80084aa:	e054      	b.n	8008556 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80084ac:	f7fe fa4c 	bl	8006948 <HAL_RCC_GetPCLK1Freq>
 80084b0:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80084b2:	e1f6      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80084b4:	4b29      	ldr	r3, [pc, #164]	; (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80084bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80084c0:	d107      	bne.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084c2:	f107 0318 	add.w	r3, r7, #24
 80084c6:	4618      	mov	r0, r3
 80084c8:	f000 fa0a 	bl	80088e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80084cc:	69fb      	ldr	r3, [r7, #28]
 80084ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084d0:	e1e7      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80084d2:	2300      	movs	r3, #0
 80084d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084d6:	e1e4      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80084d8:	4b20      	ldr	r3, [pc, #128]	; (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80084e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084e4:	d107      	bne.n	80084f6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084e6:	f107 030c 	add.w	r3, r7, #12
 80084ea:	4618      	mov	r0, r3
 80084ec:	f000 fb4c 	bl	8008b88 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084f4:	e1d5      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80084f6:	2300      	movs	r3, #0
 80084f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084fa:	e1d2      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80084fc:	4b17      	ldr	r3, [pc, #92]	; (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f003 0304 	and.w	r3, r3, #4
 8008504:	2b04      	cmp	r3, #4
 8008506:	d109      	bne.n	800851c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008508:	4b14      	ldr	r3, [pc, #80]	; (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	08db      	lsrs	r3, r3, #3
 800850e:	f003 0303 	and.w	r3, r3, #3
 8008512:	4a13      	ldr	r2, [pc, #76]	; (8008560 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008514:	fa22 f303 	lsr.w	r3, r2, r3
 8008518:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800851a:	e1c2      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800851c:	2300      	movs	r3, #0
 800851e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008520:	e1bf      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008522:	4b0e      	ldr	r3, [pc, #56]	; (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800852a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800852e:	d102      	bne.n	8008536 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8008530:	4b0c      	ldr	r3, [pc, #48]	; (8008564 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008532:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008534:	e1b5      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008536:	2300      	movs	r3, #0
 8008538:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800853a:	e1b2      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800853c:	4b07      	ldr	r3, [pc, #28]	; (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008544:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008548:	d102      	bne.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800854a:	4b07      	ldr	r3, [pc, #28]	; (8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800854c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800854e:	e1a8      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008550:	2300      	movs	r3, #0
 8008552:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008554:	e1a5      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008556:	2300      	movs	r3, #0
 8008558:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800855a:	e1a2      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800855c:	58024400 	.word	0x58024400
 8008560:	03d09000 	.word	0x03d09000
 8008564:	003d0900 	.word	0x003d0900
 8008568:	017d7840 	.word	0x017d7840
 800856c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008570:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008574:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8008578:	430b      	orrs	r3, r1
 800857a:	d173      	bne.n	8008664 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800857c:	4b9c      	ldr	r3, [pc, #624]	; (80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800857e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008580:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008584:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008588:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800858c:	d02f      	beq.n	80085ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800858e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008590:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008594:	d863      	bhi.n	800865e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8008596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008598:	2b00      	cmp	r3, #0
 800859a:	d004      	beq.n	80085a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800859c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800859e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085a2:	d012      	beq.n	80085ca <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80085a4:	e05b      	b.n	800865e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80085a6:	4b92      	ldr	r3, [pc, #584]	; (80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80085ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80085b2:	d107      	bne.n	80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085b4:	f107 0318 	add.w	r3, r7, #24
 80085b8:	4618      	mov	r0, r3
 80085ba:	f000 f991 	bl	80088e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80085be:	69bb      	ldr	r3, [r7, #24]
 80085c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085c2:	e16e      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80085c4:	2300      	movs	r3, #0
 80085c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085c8:	e16b      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80085ca:	4b89      	ldr	r3, [pc, #548]	; (80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80085d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085d6:	d107      	bne.n	80085e8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085d8:	f107 030c 	add.w	r3, r7, #12
 80085dc:	4618      	mov	r0, r3
 80085de:	f000 fad3 	bl	8008b88 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085e6:	e15c      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80085e8:	2300      	movs	r3, #0
 80085ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085ec:	e159      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80085ee:	4b80      	ldr	r3, [pc, #512]	; (80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80085f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80085f6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80085f8:	4b7d      	ldr	r3, [pc, #500]	; (80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f003 0304 	and.w	r3, r3, #4
 8008600:	2b04      	cmp	r3, #4
 8008602:	d10c      	bne.n	800861e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8008604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008606:	2b00      	cmp	r3, #0
 8008608:	d109      	bne.n	800861e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800860a:	4b79      	ldr	r3, [pc, #484]	; (80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	08db      	lsrs	r3, r3, #3
 8008610:	f003 0303 	and.w	r3, r3, #3
 8008614:	4a77      	ldr	r2, [pc, #476]	; (80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008616:	fa22 f303 	lsr.w	r3, r2, r3
 800861a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800861c:	e01e      	b.n	800865c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800861e:	4b74      	ldr	r3, [pc, #464]	; (80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008626:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800862a:	d106      	bne.n	800863a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800862c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800862e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008632:	d102      	bne.n	800863a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008634:	4b70      	ldr	r3, [pc, #448]	; (80087f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008636:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008638:	e010      	b.n	800865c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800863a:	4b6d      	ldr	r3, [pc, #436]	; (80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008642:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008646:	d106      	bne.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8008648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800864a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800864e:	d102      	bne.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008650:	4b6a      	ldr	r3, [pc, #424]	; (80087fc <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008652:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008654:	e002      	b.n	800865c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008656:	2300      	movs	r3, #0
 8008658:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800865a:	e122      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800865c:	e121      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800865e:	2300      	movs	r3, #0
 8008660:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008662:	e11e      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008664:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008668:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800866c:	430b      	orrs	r3, r1
 800866e:	d133      	bne.n	80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008670:	4b5f      	ldr	r3, [pc, #380]	; (80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008674:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008678:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800867a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800867c:	2b00      	cmp	r3, #0
 800867e:	d004      	beq.n	800868a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8008680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008682:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008686:	d012      	beq.n	80086ae <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8008688:	e023      	b.n	80086d2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800868a:	4b59      	ldr	r3, [pc, #356]	; (80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008692:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008696:	d107      	bne.n	80086a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008698:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800869c:	4618      	mov	r0, r3
 800869e:	f000 fbc7 	bl	8008e30 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80086a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086a6:	e0fc      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80086a8:	2300      	movs	r3, #0
 80086aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086ac:	e0f9      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80086ae:	4b50      	ldr	r3, [pc, #320]	; (80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80086b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80086ba:	d107      	bne.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086bc:	f107 0318 	add.w	r3, r7, #24
 80086c0:	4618      	mov	r0, r3
 80086c2:	f000 f90d 	bl	80088e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80086c6:	6a3b      	ldr	r3, [r7, #32]
 80086c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086ca:	e0ea      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80086cc:	2300      	movs	r3, #0
 80086ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086d0:	e0e7      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80086d2:	2300      	movs	r3, #0
 80086d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086d6:	e0e4      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80086d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086dc:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 80086e0:	430b      	orrs	r3, r1
 80086e2:	f040 808d 	bne.w	8008800 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80086e6:	4b42      	ldr	r3, [pc, #264]	; (80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80086e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086ea:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80086ee:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80086f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80086f6:	d06b      	beq.n	80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80086f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80086fe:	d874      	bhi.n	80087ea <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008702:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008706:	d056      	beq.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8008708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800870a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800870e:	d86c      	bhi.n	80087ea <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008712:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008716:	d03b      	beq.n	8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8008718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800871a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800871e:	d864      	bhi.n	80087ea <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008722:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008726:	d021      	beq.n	800876c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8008728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800872a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800872e:	d85c      	bhi.n	80087ea <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008732:	2b00      	cmp	r3, #0
 8008734:	d004      	beq.n	8008740 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8008736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008738:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800873c:	d004      	beq.n	8008748 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800873e:	e054      	b.n	80087ea <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008740:	f000 f8b8 	bl	80088b4 <HAL_RCCEx_GetD3PCLK1Freq>
 8008744:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008746:	e0ac      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008748:	4b29      	ldr	r3, [pc, #164]	; (80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008750:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008754:	d107      	bne.n	8008766 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008756:	f107 0318 	add.w	r3, r7, #24
 800875a:	4618      	mov	r0, r3
 800875c:	f000 f8c0 	bl	80088e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008760:	69fb      	ldr	r3, [r7, #28]
 8008762:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008764:	e09d      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008766:	2300      	movs	r3, #0
 8008768:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800876a:	e09a      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800876c:	4b20      	ldr	r3, [pc, #128]	; (80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008774:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008778:	d107      	bne.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800877a:	f107 030c 	add.w	r3, r7, #12
 800877e:	4618      	mov	r0, r3
 8008780:	f000 fa02 	bl	8008b88 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008788:	e08b      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800878a:	2300      	movs	r3, #0
 800878c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800878e:	e088      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008790:	4b17      	ldr	r3, [pc, #92]	; (80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f003 0304 	and.w	r3, r3, #4
 8008798:	2b04      	cmp	r3, #4
 800879a:	d109      	bne.n	80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800879c:	4b14      	ldr	r3, [pc, #80]	; (80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	08db      	lsrs	r3, r3, #3
 80087a2:	f003 0303 	and.w	r3, r3, #3
 80087a6:	4a13      	ldr	r2, [pc, #76]	; (80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80087a8:	fa22 f303 	lsr.w	r3, r2, r3
 80087ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087ae:	e078      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087b0:	2300      	movs	r3, #0
 80087b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087b4:	e075      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80087b6:	4b0e      	ldr	r3, [pc, #56]	; (80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087c2:	d102      	bne.n	80087ca <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 80087c4:	4b0c      	ldr	r3, [pc, #48]	; (80087f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80087c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087c8:	e06b      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087ca:	2300      	movs	r3, #0
 80087cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087ce:	e068      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80087d0:	4b07      	ldr	r3, [pc, #28]	; (80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80087dc:	d102      	bne.n	80087e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 80087de:	4b07      	ldr	r3, [pc, #28]	; (80087fc <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80087e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087e2:	e05e      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087e4:	2300      	movs	r3, #0
 80087e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087e8:	e05b      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80087ea:	2300      	movs	r3, #0
 80087ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087ee:	e058      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80087f0:	58024400 	.word	0x58024400
 80087f4:	03d09000 	.word	0x03d09000
 80087f8:	003d0900 	.word	0x003d0900
 80087fc:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008800:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008804:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8008808:	430b      	orrs	r3, r1
 800880a:	d148      	bne.n	800889e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800880c:	4b27      	ldr	r3, [pc, #156]	; (80088ac <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800880e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008810:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008814:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008818:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800881c:	d02a      	beq.n	8008874 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800881e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008820:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008824:	d838      	bhi.n	8008898 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8008826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008828:	2b00      	cmp	r3, #0
 800882a:	d004      	beq.n	8008836 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800882c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800882e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008832:	d00d      	beq.n	8008850 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8008834:	e030      	b.n	8008898 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008836:	4b1d      	ldr	r3, [pc, #116]	; (80088ac <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800883e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008842:	d102      	bne.n	800884a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8008844:	4b1a      	ldr	r3, [pc, #104]	; (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8008846:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008848:	e02b      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800884a:	2300      	movs	r3, #0
 800884c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800884e:	e028      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008850:	4b16      	ldr	r3, [pc, #88]	; (80088ac <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008858:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800885c:	d107      	bne.n	800886e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800885e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008862:	4618      	mov	r0, r3
 8008864:	f000 fae4 	bl	8008e30 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800886a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800886c:	e019      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800886e:	2300      	movs	r3, #0
 8008870:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008872:	e016      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008874:	4b0d      	ldr	r3, [pc, #52]	; (80088ac <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800887c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008880:	d107      	bne.n	8008892 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008882:	f107 0318 	add.w	r3, r7, #24
 8008886:	4618      	mov	r0, r3
 8008888:	f000 f82a 	bl	80088e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800888c:	69fb      	ldr	r3, [r7, #28]
 800888e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008890:	e007      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008892:	2300      	movs	r3, #0
 8008894:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008896:	e004      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008898:	2300      	movs	r3, #0
 800889a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800889c:	e001      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800889e:	2300      	movs	r3, #0
 80088a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 80088a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	3740      	adds	r7, #64	; 0x40
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}
 80088ac:	58024400 	.word	0x58024400
 80088b0:	017d7840 	.word	0x017d7840

080088b4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80088b8:	f7fe f816 	bl	80068e8 <HAL_RCC_GetHCLKFreq>
 80088bc:	4602      	mov	r2, r0
 80088be:	4b06      	ldr	r3, [pc, #24]	; (80088d8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80088c0:	6a1b      	ldr	r3, [r3, #32]
 80088c2:	091b      	lsrs	r3, r3, #4
 80088c4:	f003 0307 	and.w	r3, r3, #7
 80088c8:	4904      	ldr	r1, [pc, #16]	; (80088dc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80088ca:	5ccb      	ldrb	r3, [r1, r3]
 80088cc:	f003 031f 	and.w	r3, r3, #31
 80088d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	bd80      	pop	{r7, pc}
 80088d8:	58024400 	.word	0x58024400
 80088dc:	0800bfc0 	.word	0x0800bfc0

080088e0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b089      	sub	sp, #36	; 0x24
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80088e8:	4ba1      	ldr	r3, [pc, #644]	; (8008b70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ec:	f003 0303 	and.w	r3, r3, #3
 80088f0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80088f2:	4b9f      	ldr	r3, [pc, #636]	; (8008b70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088f6:	0b1b      	lsrs	r3, r3, #12
 80088f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80088fc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80088fe:	4b9c      	ldr	r3, [pc, #624]	; (8008b70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008902:	091b      	lsrs	r3, r3, #4
 8008904:	f003 0301 	and.w	r3, r3, #1
 8008908:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800890a:	4b99      	ldr	r3, [pc, #612]	; (8008b70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800890c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800890e:	08db      	lsrs	r3, r3, #3
 8008910:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008914:	693a      	ldr	r2, [r7, #16]
 8008916:	fb02 f303 	mul.w	r3, r2, r3
 800891a:	ee07 3a90 	vmov	s15, r3
 800891e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008922:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	2b00      	cmp	r3, #0
 800892a:	f000 8111 	beq.w	8008b50 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800892e:	69bb      	ldr	r3, [r7, #24]
 8008930:	2b02      	cmp	r3, #2
 8008932:	f000 8083 	beq.w	8008a3c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008936:	69bb      	ldr	r3, [r7, #24]
 8008938:	2b02      	cmp	r3, #2
 800893a:	f200 80a1 	bhi.w	8008a80 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800893e:	69bb      	ldr	r3, [r7, #24]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d003      	beq.n	800894c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008944:	69bb      	ldr	r3, [r7, #24]
 8008946:	2b01      	cmp	r3, #1
 8008948:	d056      	beq.n	80089f8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800894a:	e099      	b.n	8008a80 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800894c:	4b88      	ldr	r3, [pc, #544]	; (8008b70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f003 0320 	and.w	r3, r3, #32
 8008954:	2b00      	cmp	r3, #0
 8008956:	d02d      	beq.n	80089b4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008958:	4b85      	ldr	r3, [pc, #532]	; (8008b70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	08db      	lsrs	r3, r3, #3
 800895e:	f003 0303 	and.w	r3, r3, #3
 8008962:	4a84      	ldr	r2, [pc, #528]	; (8008b74 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008964:	fa22 f303 	lsr.w	r3, r2, r3
 8008968:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	ee07 3a90 	vmov	s15, r3
 8008970:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	ee07 3a90 	vmov	s15, r3
 800897a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800897e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008982:	4b7b      	ldr	r3, [pc, #492]	; (8008b70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008986:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800898a:	ee07 3a90 	vmov	s15, r3
 800898e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008992:	ed97 6a03 	vldr	s12, [r7, #12]
 8008996:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008b78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800899a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800899e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089ae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80089b2:	e087      	b.n	8008ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	ee07 3a90 	vmov	s15, r3
 80089ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089be:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008b7c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80089c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089c6:	4b6a      	ldr	r3, [pc, #424]	; (8008b70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089ce:	ee07 3a90 	vmov	s15, r3
 80089d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80089da:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008b78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80089de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80089f6:	e065      	b.n	8008ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	ee07 3a90 	vmov	s15, r3
 80089fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a02:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008b80 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008a06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a0a:	4b59      	ldr	r3, [pc, #356]	; (8008b70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a12:	ee07 3a90 	vmov	s15, r3
 8008a16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a1e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008b78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a3a:	e043      	b.n	8008ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	ee07 3a90 	vmov	s15, r3
 8008a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a46:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008b84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008a4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a4e:	4b48      	ldr	r3, [pc, #288]	; (8008b70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a56:	ee07 3a90 	vmov	s15, r3
 8008a5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a62:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008b78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a7e:	e021      	b.n	8008ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	ee07 3a90 	vmov	s15, r3
 8008a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a8a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008b80 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008a8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a92:	4b37      	ldr	r3, [pc, #220]	; (8008b70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a9a:	ee07 3a90 	vmov	s15, r3
 8008a9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008aa2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008aa6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008b78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008aaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008aae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ab2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ab6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008abe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ac2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008ac4:	4b2a      	ldr	r3, [pc, #168]	; (8008b70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ac8:	0a5b      	lsrs	r3, r3, #9
 8008aca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ace:	ee07 3a90 	vmov	s15, r3
 8008ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ad6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ada:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ade:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ae2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ae6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008aea:	ee17 2a90 	vmov	r2, s15
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008af2:	4b1f      	ldr	r3, [pc, #124]	; (8008b70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008af6:	0c1b      	lsrs	r3, r3, #16
 8008af8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008afc:	ee07 3a90 	vmov	s15, r3
 8008b00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008b08:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b18:	ee17 2a90 	vmov	r2, s15
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008b20:	4b13      	ldr	r3, [pc, #76]	; (8008b70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b24:	0e1b      	lsrs	r3, r3, #24
 8008b26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b2a:	ee07 3a90 	vmov	s15, r3
 8008b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008b36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b46:	ee17 2a90 	vmov	r2, s15
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008b4e:	e008      	b.n	8008b62 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2200      	movs	r2, #0
 8008b54:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	609a      	str	r2, [r3, #8]
}
 8008b62:	bf00      	nop
 8008b64:	3724      	adds	r7, #36	; 0x24
 8008b66:	46bd      	mov	sp, r7
 8008b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6c:	4770      	bx	lr
 8008b6e:	bf00      	nop
 8008b70:	58024400 	.word	0x58024400
 8008b74:	03d09000 	.word	0x03d09000
 8008b78:	46000000 	.word	0x46000000
 8008b7c:	4c742400 	.word	0x4c742400
 8008b80:	4a742400 	.word	0x4a742400
 8008b84:	4bbebc20 	.word	0x4bbebc20

08008b88 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b089      	sub	sp, #36	; 0x24
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008b90:	4ba1      	ldr	r3, [pc, #644]	; (8008e18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b94:	f003 0303 	and.w	r3, r3, #3
 8008b98:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008b9a:	4b9f      	ldr	r3, [pc, #636]	; (8008e18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b9e:	0d1b      	lsrs	r3, r3, #20
 8008ba0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ba4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008ba6:	4b9c      	ldr	r3, [pc, #624]	; (8008e18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008baa:	0a1b      	lsrs	r3, r3, #8
 8008bac:	f003 0301 	and.w	r3, r3, #1
 8008bb0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008bb2:	4b99      	ldr	r3, [pc, #612]	; (8008e18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bb6:	08db      	lsrs	r3, r3, #3
 8008bb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008bbc:	693a      	ldr	r2, [r7, #16]
 8008bbe:	fb02 f303 	mul.w	r3, r2, r3
 8008bc2:	ee07 3a90 	vmov	s15, r3
 8008bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008bce:	697b      	ldr	r3, [r7, #20]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	f000 8111 	beq.w	8008df8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008bd6:	69bb      	ldr	r3, [r7, #24]
 8008bd8:	2b02      	cmp	r3, #2
 8008bda:	f000 8083 	beq.w	8008ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008bde:	69bb      	ldr	r3, [r7, #24]
 8008be0:	2b02      	cmp	r3, #2
 8008be2:	f200 80a1 	bhi.w	8008d28 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008be6:	69bb      	ldr	r3, [r7, #24]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d003      	beq.n	8008bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008bec:	69bb      	ldr	r3, [r7, #24]
 8008bee:	2b01      	cmp	r3, #1
 8008bf0:	d056      	beq.n	8008ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008bf2:	e099      	b.n	8008d28 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008bf4:	4b88      	ldr	r3, [pc, #544]	; (8008e18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f003 0320 	and.w	r3, r3, #32
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d02d      	beq.n	8008c5c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c00:	4b85      	ldr	r3, [pc, #532]	; (8008e18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	08db      	lsrs	r3, r3, #3
 8008c06:	f003 0303 	and.w	r3, r3, #3
 8008c0a:	4a84      	ldr	r2, [pc, #528]	; (8008e1c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8008c10:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	ee07 3a90 	vmov	s15, r3
 8008c18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	ee07 3a90 	vmov	s15, r3
 8008c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c2a:	4b7b      	ldr	r3, [pc, #492]	; (8008e18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c32:	ee07 3a90 	vmov	s15, r3
 8008c36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c3e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008e20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008c42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c56:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008c5a:	e087      	b.n	8008d6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	ee07 3a90 	vmov	s15, r3
 8008c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c66:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008e24 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008c6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c6e:	4b6a      	ldr	r3, [pc, #424]	; (8008e18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c76:	ee07 3a90 	vmov	s15, r3
 8008c7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c82:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008e20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008c86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c9e:	e065      	b.n	8008d6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008ca0:	697b      	ldr	r3, [r7, #20]
 8008ca2:	ee07 3a90 	vmov	s15, r3
 8008ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008caa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008e28 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008cae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cb2:	4b59      	ldr	r3, [pc, #356]	; (8008e18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cba:	ee07 3a90 	vmov	s15, r3
 8008cbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cc6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008e20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008cca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008cd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ce2:	e043      	b.n	8008d6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	ee07 3a90 	vmov	s15, r3
 8008cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cee:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008e2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008cf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cf6:	4b48      	ldr	r3, [pc, #288]	; (8008e18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cfe:	ee07 3a90 	vmov	s15, r3
 8008d02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d06:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d0a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008e20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008d0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d26:	e021      	b.n	8008d6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	ee07 3a90 	vmov	s15, r3
 8008d2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d32:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008e28 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008d36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d3a:	4b37      	ldr	r3, [pc, #220]	; (8008e18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d42:	ee07 3a90 	vmov	s15, r3
 8008d46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d4e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008e20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008d52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d6a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008d6c:	4b2a      	ldr	r3, [pc, #168]	; (8008e18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d70:	0a5b      	lsrs	r3, r3, #9
 8008d72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d76:	ee07 3a90 	vmov	s15, r3
 8008d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d82:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d86:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d92:	ee17 2a90 	vmov	r2, s15
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008d9a:	4b1f      	ldr	r3, [pc, #124]	; (8008e18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d9e:	0c1b      	lsrs	r3, r3, #16
 8008da0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008da4:	ee07 3a90 	vmov	s15, r3
 8008da8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008db0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008db4:	edd7 6a07 	vldr	s13, [r7, #28]
 8008db8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008dbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008dc0:	ee17 2a90 	vmov	r2, s15
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008dc8:	4b13      	ldr	r3, [pc, #76]	; (8008e18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dcc:	0e1b      	lsrs	r3, r3, #24
 8008dce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008dd2:	ee07 3a90 	vmov	s15, r3
 8008dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008dde:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008de2:	edd7 6a07 	vldr	s13, [r7, #28]
 8008de6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008dea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008dee:	ee17 2a90 	vmov	r2, s15
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008df6:	e008      	b.n	8008e0a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2200      	movs	r2, #0
 8008e02:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2200      	movs	r2, #0
 8008e08:	609a      	str	r2, [r3, #8]
}
 8008e0a:	bf00      	nop
 8008e0c:	3724      	adds	r7, #36	; 0x24
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e14:	4770      	bx	lr
 8008e16:	bf00      	nop
 8008e18:	58024400 	.word	0x58024400
 8008e1c:	03d09000 	.word	0x03d09000
 8008e20:	46000000 	.word	0x46000000
 8008e24:	4c742400 	.word	0x4c742400
 8008e28:	4a742400 	.word	0x4a742400
 8008e2c:	4bbebc20 	.word	0x4bbebc20

08008e30 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b089      	sub	sp, #36	; 0x24
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008e38:	4ba0      	ldr	r3, [pc, #640]	; (80090bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e3c:	f003 0303 	and.w	r3, r3, #3
 8008e40:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008e42:	4b9e      	ldr	r3, [pc, #632]	; (80090bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e46:	091b      	lsrs	r3, r3, #4
 8008e48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008e4c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008e4e:	4b9b      	ldr	r3, [pc, #620]	; (80090bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e52:	f003 0301 	and.w	r3, r3, #1
 8008e56:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008e58:	4b98      	ldr	r3, [pc, #608]	; (80090bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e5c:	08db      	lsrs	r3, r3, #3
 8008e5e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008e62:	693a      	ldr	r2, [r7, #16]
 8008e64:	fb02 f303 	mul.w	r3, r2, r3
 8008e68:	ee07 3a90 	vmov	s15, r3
 8008e6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e70:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	f000 8111 	beq.w	800909e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008e7c:	69bb      	ldr	r3, [r7, #24]
 8008e7e:	2b02      	cmp	r3, #2
 8008e80:	f000 8083 	beq.w	8008f8a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008e84:	69bb      	ldr	r3, [r7, #24]
 8008e86:	2b02      	cmp	r3, #2
 8008e88:	f200 80a1 	bhi.w	8008fce <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008e8c:	69bb      	ldr	r3, [r7, #24]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d003      	beq.n	8008e9a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008e92:	69bb      	ldr	r3, [r7, #24]
 8008e94:	2b01      	cmp	r3, #1
 8008e96:	d056      	beq.n	8008f46 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008e98:	e099      	b.n	8008fce <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e9a:	4b88      	ldr	r3, [pc, #544]	; (80090bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f003 0320 	and.w	r3, r3, #32
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d02d      	beq.n	8008f02 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ea6:	4b85      	ldr	r3, [pc, #532]	; (80090bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	08db      	lsrs	r3, r3, #3
 8008eac:	f003 0303 	and.w	r3, r3, #3
 8008eb0:	4a83      	ldr	r2, [pc, #524]	; (80090c0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008eb2:	fa22 f303 	lsr.w	r3, r2, r3
 8008eb6:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	ee07 3a90 	vmov	s15, r3
 8008ebe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ec2:	697b      	ldr	r3, [r7, #20]
 8008ec4:	ee07 3a90 	vmov	s15, r3
 8008ec8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ecc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ed0:	4b7a      	ldr	r3, [pc, #488]	; (80090bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ed4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ed8:	ee07 3a90 	vmov	s15, r3
 8008edc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ee0:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ee4:	eddf 5a77 	vldr	s11, [pc, #476]	; 80090c4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008ee8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008eec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ef0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ef4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ef8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008efc:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008f00:	e087      	b.n	8009012 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008f02:	697b      	ldr	r3, [r7, #20]
 8008f04:	ee07 3a90 	vmov	s15, r3
 8008f08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f0c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80090c8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008f10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f14:	4b69      	ldr	r3, [pc, #420]	; (80090bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f1c:	ee07 3a90 	vmov	s15, r3
 8008f20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f24:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f28:	eddf 5a66 	vldr	s11, [pc, #408]	; 80090c4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008f2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f40:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f44:	e065      	b.n	8009012 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	ee07 3a90 	vmov	s15, r3
 8008f4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f50:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80090cc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008f54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f58:	4b58      	ldr	r3, [pc, #352]	; (80090bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f60:	ee07 3a90 	vmov	s15, r3
 8008f64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f68:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f6c:	eddf 5a55 	vldr	s11, [pc, #340]	; 80090c4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008f70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f84:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f88:	e043      	b.n	8009012 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	ee07 3a90 	vmov	s15, r3
 8008f90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f94:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80090d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008f98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f9c:	4b47      	ldr	r3, [pc, #284]	; (80090bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fa4:	ee07 3a90 	vmov	s15, r3
 8008fa8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fac:	ed97 6a03 	vldr	s12, [r7, #12]
 8008fb0:	eddf 5a44 	vldr	s11, [pc, #272]	; 80090c4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008fb4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fbc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008fc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fc8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008fcc:	e021      	b.n	8009012 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	ee07 3a90 	vmov	s15, r3
 8008fd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fd8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80090c8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008fdc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fe0:	4b36      	ldr	r3, [pc, #216]	; (80090bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fe4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fe8:	ee07 3a90 	vmov	s15, r3
 8008fec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ff0:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ff4:	eddf 5a33 	vldr	s11, [pc, #204]	; 80090c4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008ff8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ffc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009000:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009004:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009008:	ee67 7a27 	vmul.f32	s15, s14, s15
 800900c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009010:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8009012:	4b2a      	ldr	r3, [pc, #168]	; (80090bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009016:	0a5b      	lsrs	r3, r3, #9
 8009018:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800901c:	ee07 3a90 	vmov	s15, r3
 8009020:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009024:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009028:	ee37 7a87 	vadd.f32	s14, s15, s14
 800902c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009030:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009034:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009038:	ee17 2a90 	vmov	r2, s15
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009040:	4b1e      	ldr	r3, [pc, #120]	; (80090bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009044:	0c1b      	lsrs	r3, r3, #16
 8009046:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800904a:	ee07 3a90 	vmov	s15, r3
 800904e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009052:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009056:	ee37 7a87 	vadd.f32	s14, s15, s14
 800905a:	edd7 6a07 	vldr	s13, [r7, #28]
 800905e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009062:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009066:	ee17 2a90 	vmov	r2, s15
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800906e:	4b13      	ldr	r3, [pc, #76]	; (80090bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009072:	0e1b      	lsrs	r3, r3, #24
 8009074:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009078:	ee07 3a90 	vmov	s15, r3
 800907c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009080:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009084:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009088:	edd7 6a07 	vldr	s13, [r7, #28]
 800908c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009090:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009094:	ee17 2a90 	vmov	r2, s15
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800909c:	e008      	b.n	80090b0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2200      	movs	r2, #0
 80090a2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2200      	movs	r2, #0
 80090a8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2200      	movs	r2, #0
 80090ae:	609a      	str	r2, [r3, #8]
}
 80090b0:	bf00      	nop
 80090b2:	3724      	adds	r7, #36	; 0x24
 80090b4:	46bd      	mov	sp, r7
 80090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ba:	4770      	bx	lr
 80090bc:	58024400 	.word	0x58024400
 80090c0:	03d09000 	.word	0x03d09000
 80090c4:	46000000 	.word	0x46000000
 80090c8:	4c742400 	.word	0x4c742400
 80090cc:	4a742400 	.word	0x4a742400
 80090d0:	4bbebc20 	.word	0x4bbebc20

080090d4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b084      	sub	sp, #16
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
 80090dc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80090de:	2300      	movs	r3, #0
 80090e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80090e2:	4b53      	ldr	r3, [pc, #332]	; (8009230 <RCCEx_PLL2_Config+0x15c>)
 80090e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090e6:	f003 0303 	and.w	r3, r3, #3
 80090ea:	2b03      	cmp	r3, #3
 80090ec:	d101      	bne.n	80090f2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80090ee:	2301      	movs	r3, #1
 80090f0:	e099      	b.n	8009226 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80090f2:	4b4f      	ldr	r3, [pc, #316]	; (8009230 <RCCEx_PLL2_Config+0x15c>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	4a4e      	ldr	r2, [pc, #312]	; (8009230 <RCCEx_PLL2_Config+0x15c>)
 80090f8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80090fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80090fe:	f7f9 fd05 	bl	8002b0c <HAL_GetTick>
 8009102:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009104:	e008      	b.n	8009118 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009106:	f7f9 fd01 	bl	8002b0c <HAL_GetTick>
 800910a:	4602      	mov	r2, r0
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	1ad3      	subs	r3, r2, r3
 8009110:	2b02      	cmp	r3, #2
 8009112:	d901      	bls.n	8009118 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009114:	2303      	movs	r3, #3
 8009116:	e086      	b.n	8009226 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009118:	4b45      	ldr	r3, [pc, #276]	; (8009230 <RCCEx_PLL2_Config+0x15c>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009120:	2b00      	cmp	r3, #0
 8009122:	d1f0      	bne.n	8009106 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009124:	4b42      	ldr	r3, [pc, #264]	; (8009230 <RCCEx_PLL2_Config+0x15c>)
 8009126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009128:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	031b      	lsls	r3, r3, #12
 8009132:	493f      	ldr	r1, [pc, #252]	; (8009230 <RCCEx_PLL2_Config+0x15c>)
 8009134:	4313      	orrs	r3, r2
 8009136:	628b      	str	r3, [r1, #40]	; 0x28
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	685b      	ldr	r3, [r3, #4]
 800913c:	3b01      	subs	r3, #1
 800913e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	689b      	ldr	r3, [r3, #8]
 8009146:	3b01      	subs	r3, #1
 8009148:	025b      	lsls	r3, r3, #9
 800914a:	b29b      	uxth	r3, r3
 800914c:	431a      	orrs	r2, r3
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	68db      	ldr	r3, [r3, #12]
 8009152:	3b01      	subs	r3, #1
 8009154:	041b      	lsls	r3, r3, #16
 8009156:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800915a:	431a      	orrs	r2, r3
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	691b      	ldr	r3, [r3, #16]
 8009160:	3b01      	subs	r3, #1
 8009162:	061b      	lsls	r3, r3, #24
 8009164:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009168:	4931      	ldr	r1, [pc, #196]	; (8009230 <RCCEx_PLL2_Config+0x15c>)
 800916a:	4313      	orrs	r3, r2
 800916c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800916e:	4b30      	ldr	r3, [pc, #192]	; (8009230 <RCCEx_PLL2_Config+0x15c>)
 8009170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009172:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	695b      	ldr	r3, [r3, #20]
 800917a:	492d      	ldr	r1, [pc, #180]	; (8009230 <RCCEx_PLL2_Config+0x15c>)
 800917c:	4313      	orrs	r3, r2
 800917e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009180:	4b2b      	ldr	r3, [pc, #172]	; (8009230 <RCCEx_PLL2_Config+0x15c>)
 8009182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009184:	f023 0220 	bic.w	r2, r3, #32
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	699b      	ldr	r3, [r3, #24]
 800918c:	4928      	ldr	r1, [pc, #160]	; (8009230 <RCCEx_PLL2_Config+0x15c>)
 800918e:	4313      	orrs	r3, r2
 8009190:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009192:	4b27      	ldr	r3, [pc, #156]	; (8009230 <RCCEx_PLL2_Config+0x15c>)
 8009194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009196:	4a26      	ldr	r2, [pc, #152]	; (8009230 <RCCEx_PLL2_Config+0x15c>)
 8009198:	f023 0310 	bic.w	r3, r3, #16
 800919c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800919e:	4b24      	ldr	r3, [pc, #144]	; (8009230 <RCCEx_PLL2_Config+0x15c>)
 80091a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80091a2:	4b24      	ldr	r3, [pc, #144]	; (8009234 <RCCEx_PLL2_Config+0x160>)
 80091a4:	4013      	ands	r3, r2
 80091a6:	687a      	ldr	r2, [r7, #4]
 80091a8:	69d2      	ldr	r2, [r2, #28]
 80091aa:	00d2      	lsls	r2, r2, #3
 80091ac:	4920      	ldr	r1, [pc, #128]	; (8009230 <RCCEx_PLL2_Config+0x15c>)
 80091ae:	4313      	orrs	r3, r2
 80091b0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80091b2:	4b1f      	ldr	r3, [pc, #124]	; (8009230 <RCCEx_PLL2_Config+0x15c>)
 80091b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091b6:	4a1e      	ldr	r2, [pc, #120]	; (8009230 <RCCEx_PLL2_Config+0x15c>)
 80091b8:	f043 0310 	orr.w	r3, r3, #16
 80091bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d106      	bne.n	80091d2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80091c4:	4b1a      	ldr	r3, [pc, #104]	; (8009230 <RCCEx_PLL2_Config+0x15c>)
 80091c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091c8:	4a19      	ldr	r2, [pc, #100]	; (8009230 <RCCEx_PLL2_Config+0x15c>)
 80091ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80091ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 80091d0:	e00f      	b.n	80091f2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	2b01      	cmp	r3, #1
 80091d6:	d106      	bne.n	80091e6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80091d8:	4b15      	ldr	r3, [pc, #84]	; (8009230 <RCCEx_PLL2_Config+0x15c>)
 80091da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091dc:	4a14      	ldr	r2, [pc, #80]	; (8009230 <RCCEx_PLL2_Config+0x15c>)
 80091de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80091e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80091e4:	e005      	b.n	80091f2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80091e6:	4b12      	ldr	r3, [pc, #72]	; (8009230 <RCCEx_PLL2_Config+0x15c>)
 80091e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091ea:	4a11      	ldr	r2, [pc, #68]	; (8009230 <RCCEx_PLL2_Config+0x15c>)
 80091ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80091f0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80091f2:	4b0f      	ldr	r3, [pc, #60]	; (8009230 <RCCEx_PLL2_Config+0x15c>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	4a0e      	ldr	r2, [pc, #56]	; (8009230 <RCCEx_PLL2_Config+0x15c>)
 80091f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80091fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80091fe:	f7f9 fc85 	bl	8002b0c <HAL_GetTick>
 8009202:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009204:	e008      	b.n	8009218 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009206:	f7f9 fc81 	bl	8002b0c <HAL_GetTick>
 800920a:	4602      	mov	r2, r0
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	1ad3      	subs	r3, r2, r3
 8009210:	2b02      	cmp	r3, #2
 8009212:	d901      	bls.n	8009218 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009214:	2303      	movs	r3, #3
 8009216:	e006      	b.n	8009226 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009218:	4b05      	ldr	r3, [pc, #20]	; (8009230 <RCCEx_PLL2_Config+0x15c>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009220:	2b00      	cmp	r3, #0
 8009222:	d0f0      	beq.n	8009206 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009224:	7bfb      	ldrb	r3, [r7, #15]
}
 8009226:	4618      	mov	r0, r3
 8009228:	3710      	adds	r7, #16
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}
 800922e:	bf00      	nop
 8009230:	58024400 	.word	0x58024400
 8009234:	ffff0007 	.word	0xffff0007

08009238 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b084      	sub	sp, #16
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
 8009240:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009242:	2300      	movs	r3, #0
 8009244:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009246:	4b53      	ldr	r3, [pc, #332]	; (8009394 <RCCEx_PLL3_Config+0x15c>)
 8009248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800924a:	f003 0303 	and.w	r3, r3, #3
 800924e:	2b03      	cmp	r3, #3
 8009250:	d101      	bne.n	8009256 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009252:	2301      	movs	r3, #1
 8009254:	e099      	b.n	800938a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009256:	4b4f      	ldr	r3, [pc, #316]	; (8009394 <RCCEx_PLL3_Config+0x15c>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	4a4e      	ldr	r2, [pc, #312]	; (8009394 <RCCEx_PLL3_Config+0x15c>)
 800925c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009260:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009262:	f7f9 fc53 	bl	8002b0c <HAL_GetTick>
 8009266:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009268:	e008      	b.n	800927c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800926a:	f7f9 fc4f 	bl	8002b0c <HAL_GetTick>
 800926e:	4602      	mov	r2, r0
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	1ad3      	subs	r3, r2, r3
 8009274:	2b02      	cmp	r3, #2
 8009276:	d901      	bls.n	800927c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009278:	2303      	movs	r3, #3
 800927a:	e086      	b.n	800938a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800927c:	4b45      	ldr	r3, [pc, #276]	; (8009394 <RCCEx_PLL3_Config+0x15c>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009284:	2b00      	cmp	r3, #0
 8009286:	d1f0      	bne.n	800926a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009288:	4b42      	ldr	r3, [pc, #264]	; (8009394 <RCCEx_PLL3_Config+0x15c>)
 800928a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800928c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	051b      	lsls	r3, r3, #20
 8009296:	493f      	ldr	r1, [pc, #252]	; (8009394 <RCCEx_PLL3_Config+0x15c>)
 8009298:	4313      	orrs	r3, r2
 800929a:	628b      	str	r3, [r1, #40]	; 0x28
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	685b      	ldr	r3, [r3, #4]
 80092a0:	3b01      	subs	r3, #1
 80092a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	689b      	ldr	r3, [r3, #8]
 80092aa:	3b01      	subs	r3, #1
 80092ac:	025b      	lsls	r3, r3, #9
 80092ae:	b29b      	uxth	r3, r3
 80092b0:	431a      	orrs	r2, r3
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	68db      	ldr	r3, [r3, #12]
 80092b6:	3b01      	subs	r3, #1
 80092b8:	041b      	lsls	r3, r3, #16
 80092ba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80092be:	431a      	orrs	r2, r3
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	691b      	ldr	r3, [r3, #16]
 80092c4:	3b01      	subs	r3, #1
 80092c6:	061b      	lsls	r3, r3, #24
 80092c8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80092cc:	4931      	ldr	r1, [pc, #196]	; (8009394 <RCCEx_PLL3_Config+0x15c>)
 80092ce:	4313      	orrs	r3, r2
 80092d0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80092d2:	4b30      	ldr	r3, [pc, #192]	; (8009394 <RCCEx_PLL3_Config+0x15c>)
 80092d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092d6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	695b      	ldr	r3, [r3, #20]
 80092de:	492d      	ldr	r1, [pc, #180]	; (8009394 <RCCEx_PLL3_Config+0x15c>)
 80092e0:	4313      	orrs	r3, r2
 80092e2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80092e4:	4b2b      	ldr	r3, [pc, #172]	; (8009394 <RCCEx_PLL3_Config+0x15c>)
 80092e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092e8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	699b      	ldr	r3, [r3, #24]
 80092f0:	4928      	ldr	r1, [pc, #160]	; (8009394 <RCCEx_PLL3_Config+0x15c>)
 80092f2:	4313      	orrs	r3, r2
 80092f4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80092f6:	4b27      	ldr	r3, [pc, #156]	; (8009394 <RCCEx_PLL3_Config+0x15c>)
 80092f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092fa:	4a26      	ldr	r2, [pc, #152]	; (8009394 <RCCEx_PLL3_Config+0x15c>)
 80092fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009300:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009302:	4b24      	ldr	r3, [pc, #144]	; (8009394 <RCCEx_PLL3_Config+0x15c>)
 8009304:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009306:	4b24      	ldr	r3, [pc, #144]	; (8009398 <RCCEx_PLL3_Config+0x160>)
 8009308:	4013      	ands	r3, r2
 800930a:	687a      	ldr	r2, [r7, #4]
 800930c:	69d2      	ldr	r2, [r2, #28]
 800930e:	00d2      	lsls	r2, r2, #3
 8009310:	4920      	ldr	r1, [pc, #128]	; (8009394 <RCCEx_PLL3_Config+0x15c>)
 8009312:	4313      	orrs	r3, r2
 8009314:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009316:	4b1f      	ldr	r3, [pc, #124]	; (8009394 <RCCEx_PLL3_Config+0x15c>)
 8009318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800931a:	4a1e      	ldr	r2, [pc, #120]	; (8009394 <RCCEx_PLL3_Config+0x15c>)
 800931c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009320:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d106      	bne.n	8009336 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009328:	4b1a      	ldr	r3, [pc, #104]	; (8009394 <RCCEx_PLL3_Config+0x15c>)
 800932a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800932c:	4a19      	ldr	r2, [pc, #100]	; (8009394 <RCCEx_PLL3_Config+0x15c>)
 800932e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009332:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009334:	e00f      	b.n	8009356 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	2b01      	cmp	r3, #1
 800933a:	d106      	bne.n	800934a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800933c:	4b15      	ldr	r3, [pc, #84]	; (8009394 <RCCEx_PLL3_Config+0x15c>)
 800933e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009340:	4a14      	ldr	r2, [pc, #80]	; (8009394 <RCCEx_PLL3_Config+0x15c>)
 8009342:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009346:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009348:	e005      	b.n	8009356 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800934a:	4b12      	ldr	r3, [pc, #72]	; (8009394 <RCCEx_PLL3_Config+0x15c>)
 800934c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800934e:	4a11      	ldr	r2, [pc, #68]	; (8009394 <RCCEx_PLL3_Config+0x15c>)
 8009350:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009354:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009356:	4b0f      	ldr	r3, [pc, #60]	; (8009394 <RCCEx_PLL3_Config+0x15c>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	4a0e      	ldr	r2, [pc, #56]	; (8009394 <RCCEx_PLL3_Config+0x15c>)
 800935c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009360:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009362:	f7f9 fbd3 	bl	8002b0c <HAL_GetTick>
 8009366:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009368:	e008      	b.n	800937c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800936a:	f7f9 fbcf 	bl	8002b0c <HAL_GetTick>
 800936e:	4602      	mov	r2, r0
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	1ad3      	subs	r3, r2, r3
 8009374:	2b02      	cmp	r3, #2
 8009376:	d901      	bls.n	800937c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009378:	2303      	movs	r3, #3
 800937a:	e006      	b.n	800938a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800937c:	4b05      	ldr	r3, [pc, #20]	; (8009394 <RCCEx_PLL3_Config+0x15c>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009384:	2b00      	cmp	r3, #0
 8009386:	d0f0      	beq.n	800936a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009388:	7bfb      	ldrb	r3, [r7, #15]
}
 800938a:	4618      	mov	r0, r3
 800938c:	3710      	adds	r7, #16
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}
 8009392:	bf00      	nop
 8009394:	58024400 	.word	0x58024400
 8009398:	ffff0007 	.word	0xffff0007

0800939c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b084      	sub	sp, #16
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80093a4:	2301      	movs	r3, #1
 80093a6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d071      	beq.n	8009492 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80093b4:	b2db      	uxtb	r3, r3
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d106      	bne.n	80093c8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2200      	movs	r2, #0
 80093be:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f7f8 fed2 	bl	800216c <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2202      	movs	r2, #2
 80093cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	68db      	ldr	r3, [r3, #12]
 80093d6:	f003 0310 	and.w	r3, r3, #16
 80093da:	2b10      	cmp	r3, #16
 80093dc:	d050      	beq.n	8009480 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	22ca      	movs	r2, #202	; 0xca
 80093e4:	625a      	str	r2, [r3, #36]	; 0x24
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	2253      	movs	r2, #83	; 0x53
 80093ec:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f000 f87a 	bl	80094e8 <RTC_EnterInitMode>
 80093f4:	4603      	mov	r3, r0
 80093f6:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 80093f8:	7bfb      	ldrb	r3, [r7, #15]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d124      	bne.n	8009448 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	6899      	ldr	r1, [r3, #8]
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681a      	ldr	r2, [r3, #0]
 8009408:	4b24      	ldr	r3, [pc, #144]	; (800949c <HAL_RTC_Init+0x100>)
 800940a:	400b      	ands	r3, r1
 800940c:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	6899      	ldr	r1, [r3, #8]
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	685a      	ldr	r2, [r3, #4]
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	691b      	ldr	r3, [r3, #16]
 800941c:	431a      	orrs	r2, r3
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	699b      	ldr	r3, [r3, #24]
 8009422:	431a      	orrs	r2, r3
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	430a      	orrs	r2, r1
 800942a:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	689b      	ldr	r3, [r3, #8]
 8009430:	0419      	lsls	r1, r3, #16
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	68da      	ldr	r2, [r3, #12]
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	430a      	orrs	r2, r1
 800943c:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f000 f886 	bl	8009550 <RTC_ExitInitMode>
 8009444:	4603      	mov	r3, r0
 8009446:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 8009448:	7bfb      	ldrb	r3, [r7, #15]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d113      	bne.n	8009476 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f022 0203 	bic.w	r2, r2, #3
 800945c:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	69da      	ldr	r2, [r3, #28]
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	695b      	ldr	r3, [r3, #20]
 800946c:	431a      	orrs	r2, r3
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	430a      	orrs	r2, r1
 8009474:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	22ff      	movs	r2, #255	; 0xff
 800947c:	625a      	str	r2, [r3, #36]	; 0x24
 800947e:	e001      	b.n	8009484 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8009480:	2300      	movs	r3, #0
 8009482:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8009484:	7bfb      	ldrb	r3, [r7, #15]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d103      	bne.n	8009492 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2201      	movs	r2, #1
 800948e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8009492:	7bfb      	ldrb	r3, [r7, #15]
}
 8009494:	4618      	mov	r0, r3
 8009496:	3710      	adds	r7, #16
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}
 800949c:	ff8fffbf 	.word	0xff8fffbf

080094a0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b084      	sub	sp, #16
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	4a0d      	ldr	r2, [pc, #52]	; (80094e4 <HAL_RTC_WaitForSynchro+0x44>)
 80094ae:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 80094b0:	f7f9 fb2c 	bl	8002b0c <HAL_GetTick>
 80094b4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80094b6:	e009      	b.n	80094cc <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80094b8:	f7f9 fb28 	bl	8002b0c <HAL_GetTick>
 80094bc:	4602      	mov	r2, r0
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	1ad3      	subs	r3, r2, r3
 80094c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80094c6:	d901      	bls.n	80094cc <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 80094c8:	2303      	movs	r3, #3
 80094ca:	e007      	b.n	80094dc <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	68db      	ldr	r3, [r3, #12]
 80094d2:	f003 0320 	and.w	r3, r3, #32
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d0ee      	beq.n	80094b8 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 80094da:	2300      	movs	r3, #0
}
 80094dc:	4618      	mov	r0, r3
 80094de:	3710      	adds	r7, #16
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bd80      	pop	{r7, pc}
 80094e4:	0003ff5f 	.word	0x0003ff5f

080094e8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b084      	sub	sp, #16
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80094f0:	2300      	movs	r3, #0
 80094f2:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	68db      	ldr	r3, [r3, #12]
 80094fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d120      	bne.n	8009544 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f04f 32ff 	mov.w	r2, #4294967295
 800950a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800950c:	f7f9 fafe 	bl	8002b0c <HAL_GetTick>
 8009510:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009512:	e00d      	b.n	8009530 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009514:	f7f9 fafa 	bl	8002b0c <HAL_GetTick>
 8009518:	4602      	mov	r2, r0
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	1ad3      	subs	r3, r2, r3
 800951e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009522:	d905      	bls.n	8009530 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8009524:	2303      	movs	r3, #3
 8009526:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2203      	movs	r2, #3
 800952c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	68db      	ldr	r3, [r3, #12]
 8009536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800953a:	2b00      	cmp	r3, #0
 800953c:	d102      	bne.n	8009544 <RTC_EnterInitMode+0x5c>
 800953e:	7bfb      	ldrb	r3, [r7, #15]
 8009540:	2b03      	cmp	r3, #3
 8009542:	d1e7      	bne.n	8009514 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8009544:	7bfb      	ldrb	r3, [r7, #15]
}
 8009546:	4618      	mov	r0, r3
 8009548:	3710      	adds	r7, #16
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}
	...

08009550 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b084      	sub	sp, #16
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009558:	2300      	movs	r3, #0
 800955a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 800955c:	4b1a      	ldr	r3, [pc, #104]	; (80095c8 <RTC_ExitInitMode+0x78>)
 800955e:	68db      	ldr	r3, [r3, #12]
 8009560:	4a19      	ldr	r2, [pc, #100]	; (80095c8 <RTC_ExitInitMode+0x78>)
 8009562:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009566:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8009568:	4b17      	ldr	r3, [pc, #92]	; (80095c8 <RTC_ExitInitMode+0x78>)
 800956a:	689b      	ldr	r3, [r3, #8]
 800956c:	f003 0320 	and.w	r3, r3, #32
 8009570:	2b00      	cmp	r3, #0
 8009572:	d10c      	bne.n	800958e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f7ff ff93 	bl	80094a0 <HAL_RTC_WaitForSynchro>
 800957a:	4603      	mov	r3, r0
 800957c:	2b00      	cmp	r3, #0
 800957e:	d01e      	beq.n	80095be <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2203      	movs	r2, #3
 8009584:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8009588:	2303      	movs	r3, #3
 800958a:	73fb      	strb	r3, [r7, #15]
 800958c:	e017      	b.n	80095be <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800958e:	4b0e      	ldr	r3, [pc, #56]	; (80095c8 <RTC_ExitInitMode+0x78>)
 8009590:	689b      	ldr	r3, [r3, #8]
 8009592:	4a0d      	ldr	r2, [pc, #52]	; (80095c8 <RTC_ExitInitMode+0x78>)
 8009594:	f023 0320 	bic.w	r3, r3, #32
 8009598:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f7ff ff80 	bl	80094a0 <HAL_RTC_WaitForSynchro>
 80095a0:	4603      	mov	r3, r0
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d005      	beq.n	80095b2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2203      	movs	r2, #3
 80095aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80095ae:	2303      	movs	r3, #3
 80095b0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80095b2:	4b05      	ldr	r3, [pc, #20]	; (80095c8 <RTC_ExitInitMode+0x78>)
 80095b4:	689b      	ldr	r3, [r3, #8]
 80095b6:	4a04      	ldr	r2, [pc, #16]	; (80095c8 <RTC_ExitInitMode+0x78>)
 80095b8:	f043 0320 	orr.w	r3, r3, #32
 80095bc:	6093      	str	r3, [r2, #8]
  }

  return status;
 80095be:	7bfb      	ldrb	r3, [r7, #15]
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	3710      	adds	r7, #16
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}
 80095c8:	58004000 	.word	0x58004000

080095cc <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b08a      	sub	sp, #40	; 0x28
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d101      	bne.n	80095de <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 80095da:	2301      	movs	r3, #1
 80095dc:	e28e      	b.n	8009afc <HAL_SAI_Init+0x530>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 80095de:	f7f9 fac5 	bl	8002b6c <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80095e8:	2b01      	cmp	r3, #1
 80095ea:	d113      	bne.n	8009614 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	4a96      	ldr	r2, [pc, #600]	; (800984c <HAL_SAI_Init+0x280>)
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d004      	beq.n	8009600 <HAL_SAI_Init+0x34>
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	4a95      	ldr	r2, [pc, #596]	; (8009850 <HAL_SAI_Init+0x284>)
 80095fc:	4293      	cmp	r3, r2
 80095fe:	d107      	bne.n	8009610 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8009604:	2b01      	cmp	r3, #1
 8009606:	d103      	bne.n	8009610 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800960c:	2b00      	cmp	r3, #0
 800960e:	d001      	beq.n	8009614 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 8009610:	2301      	movs	r3, #1
 8009612:	e273      	b.n	8009afc <HAL_SAI_Init+0x530>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	4a8c      	ldr	r2, [pc, #560]	; (800984c <HAL_SAI_Init+0x280>)
 800961a:	4293      	cmp	r3, r2
 800961c:	d004      	beq.n	8009628 <HAL_SAI_Init+0x5c>
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	4a8c      	ldr	r2, [pc, #560]	; (8009854 <HAL_SAI_Init+0x288>)
 8009624:	4293      	cmp	r3, r2
 8009626:	d102      	bne.n	800962e <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 8009628:	4b8b      	ldr	r3, [pc, #556]	; (8009858 <HAL_SAI_Init+0x28c>)
 800962a:	61bb      	str	r3, [r7, #24]
 800962c:	e028      	b.n	8009680 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	4a8a      	ldr	r2, [pc, #552]	; (800985c <HAL_SAI_Init+0x290>)
 8009634:	4293      	cmp	r3, r2
 8009636:	d004      	beq.n	8009642 <HAL_SAI_Init+0x76>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	4a88      	ldr	r2, [pc, #544]	; (8009860 <HAL_SAI_Init+0x294>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d102      	bne.n	8009648 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 8009642:	4b88      	ldr	r3, [pc, #544]	; (8009864 <HAL_SAI_Init+0x298>)
 8009644:	61bb      	str	r3, [r7, #24]
 8009646:	e01b      	b.n	8009680 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	4a86      	ldr	r2, [pc, #536]	; (8009868 <HAL_SAI_Init+0x29c>)
 800964e:	4293      	cmp	r3, r2
 8009650:	d004      	beq.n	800965c <HAL_SAI_Init+0x90>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	4a85      	ldr	r2, [pc, #532]	; (800986c <HAL_SAI_Init+0x2a0>)
 8009658:	4293      	cmp	r3, r2
 800965a:	d102      	bne.n	8009662 <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 800965c:	4b84      	ldr	r3, [pc, #528]	; (8009870 <HAL_SAI_Init+0x2a4>)
 800965e:	61bb      	str	r3, [r7, #24]
 8009660:	e00e      	b.n	8009680 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	4a7a      	ldr	r2, [pc, #488]	; (8009850 <HAL_SAI_Init+0x284>)
 8009668:	4293      	cmp	r3, r2
 800966a:	d004      	beq.n	8009676 <HAL_SAI_Init+0xaa>
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	4a80      	ldr	r2, [pc, #512]	; (8009874 <HAL_SAI_Init+0x2a8>)
 8009672:	4293      	cmp	r3, r2
 8009674:	d102      	bne.n	800967c <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 8009676:	4b80      	ldr	r3, [pc, #512]	; (8009878 <HAL_SAI_Init+0x2ac>)
 8009678:	61bb      	str	r3, [r7, #24]
 800967a:	e001      	b.n	8009680 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800967c:	2301      	movs	r3, #1
 800967e:	e23d      	b.n	8009afc <HAL_SAI_Init+0x530>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8009686:	b2db      	uxtb	r3, r3
 8009688:	2b00      	cmp	r3, #0
 800968a:	d106      	bne.n	800969a <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2200      	movs	r2, #0
 8009690:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f7f9 f833 	bl	8002700 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f000 fa40 	bl	8009b20 <SAI_Disable>
 80096a0:	4603      	mov	r3, r0
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d001      	beq.n	80096aa <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 80096a6:	2301      	movs	r3, #1
 80096a8:	e228      	b.n	8009afc <HAL_SAI_Init+0x530>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2202      	movs	r2, #2
 80096ae:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	68db      	ldr	r3, [r3, #12]
 80096b6:	2b02      	cmp	r3, #2
 80096b8:	d00c      	beq.n	80096d4 <HAL_SAI_Init+0x108>
 80096ba:	2b02      	cmp	r3, #2
 80096bc:	d80d      	bhi.n	80096da <HAL_SAI_Init+0x10e>
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d002      	beq.n	80096c8 <HAL_SAI_Init+0xfc>
 80096c2:	2b01      	cmp	r3, #1
 80096c4:	d003      	beq.n	80096ce <HAL_SAI_Init+0x102>
 80096c6:	e008      	b.n	80096da <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 80096c8:	2300      	movs	r3, #0
 80096ca:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80096cc:	e008      	b.n	80096e0 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80096ce:	2310      	movs	r3, #16
 80096d0:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80096d2:	e005      	b.n	80096e0 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80096d4:	2320      	movs	r3, #32
 80096d6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80096d8:	e002      	b.n	80096e0 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 80096da:	2300      	movs	r3, #0
 80096dc:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80096de:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	689b      	ldr	r3, [r3, #8]
 80096e4:	2b05      	cmp	r3, #5
 80096e6:	d832      	bhi.n	800974e <HAL_SAI_Init+0x182>
 80096e8:	a201      	add	r2, pc, #4	; (adr r2, 80096f0 <HAL_SAI_Init+0x124>)
 80096ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096ee:	bf00      	nop
 80096f0:	08009709 	.word	0x08009709
 80096f4:	0800970f 	.word	0x0800970f
 80096f8:	08009717 	.word	0x08009717
 80096fc:	0800971f 	.word	0x0800971f
 8009700:	0800972f 	.word	0x0800972f
 8009704:	0800973f 	.word	0x0800973f
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8009708:	2300      	movs	r3, #0
 800970a:	61fb      	str	r3, [r7, #28]
      break;
 800970c:	e022      	b.n	8009754 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800970e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009712:	61fb      	str	r3, [r7, #28]
      break;
 8009714:	e01e      	b.n	8009754 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009716:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800971a:	61fb      	str	r3, [r7, #28]
      break;
 800971c:	e01a      	b.n	8009754 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800971e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009722:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8009724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009726:	f043 0301 	orr.w	r3, r3, #1
 800972a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800972c:	e012      	b.n	8009754 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800972e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009732:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 8009734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009736:	f043 0302 	orr.w	r3, r3, #2
 800973a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800973c:	e00a      	b.n	8009754 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800973e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009742:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8009744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009746:	f043 0303 	orr.w	r3, r3, #3
 800974a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800974c:	e002      	b.n	8009754 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800974e:	2300      	movs	r3, #0
 8009750:	61fb      	str	r3, [r7, #28]
      break;
 8009752:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8009754:	69bb      	ldr	r3, [r7, #24]
 8009756:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009758:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6a1b      	ldr	r3, [r3, #32]
 800975e:	2b00      	cmp	r3, #0
 8009760:	f000 80c5 	beq.w	80098ee <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 8009764:	2300      	movs	r3, #0
 8009766:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4a37      	ldr	r2, [pc, #220]	; (800984c <HAL_SAI_Init+0x280>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d004      	beq.n	800977c <HAL_SAI_Init+0x1b0>
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	4a37      	ldr	r2, [pc, #220]	; (8009854 <HAL_SAI_Init+0x288>)
 8009778:	4293      	cmp	r3, r2
 800977a:	d106      	bne.n	800978a <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800977c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009780:	f04f 0100 	mov.w	r1, #0
 8009784:	f7fe fb16 	bl	8007db4 <HAL_RCCEx_GetPeriphCLKFreq>
 8009788:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	4a33      	ldr	r2, [pc, #204]	; (800985c <HAL_SAI_Init+0x290>)
 8009790:	4293      	cmp	r3, r2
 8009792:	d004      	beq.n	800979e <HAL_SAI_Init+0x1d2>
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	4a31      	ldr	r2, [pc, #196]	; (8009860 <HAL_SAI_Init+0x294>)
 800979a:	4293      	cmp	r3, r2
 800979c:	d106      	bne.n	80097ac <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800979e:	f44f 7000 	mov.w	r0, #512	; 0x200
 80097a2:	f04f 0100 	mov.w	r1, #0
 80097a6:	f7fe fb05 	bl	8007db4 <HAL_RCCEx_GetPeriphCLKFreq>
 80097aa:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	4a2d      	ldr	r2, [pc, #180]	; (8009868 <HAL_SAI_Init+0x29c>)
 80097b2:	4293      	cmp	r3, r2
 80097b4:	d004      	beq.n	80097c0 <HAL_SAI_Init+0x1f4>
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	4a2c      	ldr	r2, [pc, #176]	; (800986c <HAL_SAI_Init+0x2a0>)
 80097bc:	4293      	cmp	r3, r2
 80097be:	d106      	bne.n	80097ce <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 80097c0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80097c4:	f04f 0100 	mov.w	r1, #0
 80097c8:	f7fe faf4 	bl	8007db4 <HAL_RCCEx_GetPeriphCLKFreq>
 80097cc:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	4a1f      	ldr	r2, [pc, #124]	; (8009850 <HAL_SAI_Init+0x284>)
 80097d4:	4293      	cmp	r3, r2
 80097d6:	d106      	bne.n	80097e6 <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 80097d8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80097dc:	f04f 0100 	mov.w	r1, #0
 80097e0:	f7fe fae8 	bl	8007db4 <HAL_RCCEx_GetPeriphCLKFreq>
 80097e4:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	4a22      	ldr	r2, [pc, #136]	; (8009874 <HAL_SAI_Init+0x2a8>)
 80097ec:	4293      	cmp	r3, r2
 80097ee:	d106      	bne.n	80097fe <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 80097f0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80097f4:	f04f 0100 	mov.w	r1, #0
 80097f8:	f7fe fadc 	bl	8007db4 <HAL_RCCEx_GetPeriphCLKFreq>
 80097fc:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	699b      	ldr	r3, [r3, #24]
 8009802:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009806:	d139      	bne.n	800987c <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800980c:	2b04      	cmp	r3, #4
 800980e:	d102      	bne.n	8009816 <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 8009810:	2340      	movs	r3, #64	; 0x40
 8009812:	60fb      	str	r3, [r7, #12]
 8009814:	e00a      	b.n	800982c <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800981a:	2b08      	cmp	r3, #8
 800981c:	d103      	bne.n	8009826 <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800981e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009822:	60fb      	str	r3, [r7, #12]
 8009824:	e002      	b.n	800982c <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800982a:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800982c:	697a      	ldr	r2, [r7, #20]
 800982e:	4613      	mov	r3, r2
 8009830:	009b      	lsls	r3, r3, #2
 8009832:	4413      	add	r3, r2
 8009834:	005b      	lsls	r3, r3, #1
 8009836:	4619      	mov	r1, r3
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6a1b      	ldr	r3, [r3, #32]
 800983c:	68fa      	ldr	r2, [r7, #12]
 800983e:	fb02 f303 	mul.w	r3, r2, r3
 8009842:	fbb1 f3f3 	udiv	r3, r1, r3
 8009846:	613b      	str	r3, [r7, #16]
 8009848:	e030      	b.n	80098ac <HAL_SAI_Init+0x2e0>
 800984a:	bf00      	nop
 800984c:	40015804 	.word	0x40015804
 8009850:	58005404 	.word	0x58005404
 8009854:	40015824 	.word	0x40015824
 8009858:	40015800 	.word	0x40015800
 800985c:	40015c04 	.word	0x40015c04
 8009860:	40015c24 	.word	0x40015c24
 8009864:	40015c00 	.word	0x40015c00
 8009868:	40016004 	.word	0x40016004
 800986c:	40016024 	.word	0x40016024
 8009870:	40016000 	.word	0x40016000
 8009874:	58005424 	.word	0x58005424
 8009878:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009880:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009884:	d101      	bne.n	800988a <HAL_SAI_Init+0x2be>
 8009886:	2302      	movs	r3, #2
 8009888:	e000      	b.n	800988c <HAL_SAI_Init+0x2c0>
 800988a:	2301      	movs	r3, #1
 800988c:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800988e:	697a      	ldr	r2, [r7, #20]
 8009890:	4613      	mov	r3, r2
 8009892:	009b      	lsls	r3, r3, #2
 8009894:	4413      	add	r3, r2
 8009896:	005b      	lsls	r3, r3, #1
 8009898:	4619      	mov	r1, r3
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6a1b      	ldr	r3, [r3, #32]
 800989e:	68ba      	ldr	r2, [r7, #8]
 80098a0:	fb02 f303 	mul.w	r3, r2, r3
 80098a4:	021b      	lsls	r3, r3, #8
 80098a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80098aa:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 80098ac:	693b      	ldr	r3, [r7, #16]
 80098ae:	4a95      	ldr	r2, [pc, #596]	; (8009b04 <HAL_SAI_Init+0x538>)
 80098b0:	fba2 2303 	umull	r2, r3, r2, r3
 80098b4:	08da      	lsrs	r2, r3, #3
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 80098ba:	6939      	ldr	r1, [r7, #16]
 80098bc:	4b91      	ldr	r3, [pc, #580]	; (8009b04 <HAL_SAI_Init+0x538>)
 80098be:	fba3 2301 	umull	r2, r3, r3, r1
 80098c2:	08da      	lsrs	r2, r3, #3
 80098c4:	4613      	mov	r3, r2
 80098c6:	009b      	lsls	r3, r3, #2
 80098c8:	4413      	add	r3, r2
 80098ca:	005b      	lsls	r3, r3, #1
 80098cc:	1aca      	subs	r2, r1, r3
 80098ce:	2a08      	cmp	r2, #8
 80098d0:	d904      	bls.n	80098dc <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098d6:	1c5a      	adds	r2, r3, #1
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098e0:	2b04      	cmp	r3, #4
 80098e2:	d104      	bne.n	80098ee <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098e8:	085a      	lsrs	r2, r3, #1
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	685b      	ldr	r3, [r3, #4]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d003      	beq.n	80098fe <HAL_SAI_Init+0x332>
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	685b      	ldr	r3, [r3, #4]
 80098fa:	2b02      	cmp	r3, #2
 80098fc:	d109      	bne.n	8009912 <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009902:	2b01      	cmp	r3, #1
 8009904:	d101      	bne.n	800990a <HAL_SAI_Init+0x33e>
 8009906:	2300      	movs	r3, #0
 8009908:	e001      	b.n	800990e <HAL_SAI_Init+0x342>
 800990a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800990e:	623b      	str	r3, [r7, #32]
 8009910:	e008      	b.n	8009924 <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009916:	2b01      	cmp	r3, #1
 8009918:	d102      	bne.n	8009920 <HAL_SAI_Init+0x354>
 800991a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800991e:	e000      	b.n	8009922 <HAL_SAI_Init+0x356>
 8009920:	2300      	movs	r3, #0
 8009922:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8009924:	f7f9 f922 	bl	8002b6c <HAL_GetREVID>
 8009928:	4603      	mov	r3, r0
 800992a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800992e:	d331      	bcc.n	8009994 <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	6819      	ldr	r1, [r3, #0]
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681a      	ldr	r2, [r3, #0]
 800993a:	4b73      	ldr	r3, [pc, #460]	; (8009b08 <HAL_SAI_Init+0x53c>)
 800993c:	400b      	ands	r3, r1
 800993e:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	6819      	ldr	r1, [r3, #0]
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	685a      	ldr	r2, [r3, #4]
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800994e:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009954:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800995a:	431a      	orrs	r2, r3
 800995c:	6a3b      	ldr	r3, [r7, #32]
 800995e:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8009960:	69fb      	ldr	r3, [r7, #28]
 8009962:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8009968:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	695b      	ldr	r3, [r3, #20]
 800996e:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009974:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800997a:	051b      	lsls	r3, r3, #20
 800997c:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009982:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	691b      	ldr	r3, [r3, #16]
 8009988:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	430a      	orrs	r2, r1
 8009990:	601a      	str	r2, [r3, #0]
 8009992:	e02d      	b.n	80099f0 <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	6819      	ldr	r1, [r3, #0]
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681a      	ldr	r2, [r3, #0]
 800999e:	4b5b      	ldr	r3, [pc, #364]	; (8009b0c <HAL_SAI_Init+0x540>)
 80099a0:	400b      	ands	r3, r1
 80099a2:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	6819      	ldr	r1, [r3, #0]
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	685a      	ldr	r2, [r3, #4]
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099b2:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80099b8:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099be:	431a      	orrs	r2, r3
 80099c0:	6a3b      	ldr	r3, [r7, #32]
 80099c2:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 80099c4:	69fb      	ldr	r3, [r7, #28]
 80099c6:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 80099cc:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	695b      	ldr	r3, [r3, #20]
 80099d2:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80099d8:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099de:	051b      	lsls	r3, r3, #20
 80099e0:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80099e6:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	430a      	orrs	r2, r1
 80099ee:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	6859      	ldr	r1, [r3, #4]
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681a      	ldr	r2, [r3, #0]
 80099fa:	4b45      	ldr	r3, [pc, #276]	; (8009b10 <HAL_SAI_Init+0x544>)
 80099fc:	400b      	ands	r3, r1
 80099fe:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	6859      	ldr	r1, [r3, #4]
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	69da      	ldr	r2, [r3, #28]
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a0e:	431a      	orrs	r2, r3
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a14:	431a      	orrs	r2, r3
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	430a      	orrs	r2, r1
 8009a1c:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	6899      	ldr	r1, [r3, #8]
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681a      	ldr	r2, [r3, #0]
 8009a28:	4b3a      	ldr	r3, [pc, #232]	; (8009b14 <HAL_SAI_Init+0x548>)
 8009a2a:	400b      	ands	r3, r1
 8009a2c:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	6899      	ldr	r1, [r3, #8]
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a38:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009a3e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8009a44:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8009a4a:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a50:	3b01      	subs	r3, #1
 8009a52:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8009a54:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	430a      	orrs	r2, r1
 8009a5c:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	68d9      	ldr	r1, [r3, #12]
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681a      	ldr	r2, [r3, #0]
 8009a68:	f24f 0320 	movw	r3, #61472	; 0xf020
 8009a6c:	400b      	ands	r3, r1
 8009a6e:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	68d9      	ldr	r1, [r3, #12]
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a7e:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a84:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8009a86:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a8c:	3b01      	subs	r3, #1
 8009a8e:	021b      	lsls	r3, r3, #8
 8009a90:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	430a      	orrs	r2, r1
 8009a98:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	4a1e      	ldr	r2, [pc, #120]	; (8009b18 <HAL_SAI_Init+0x54c>)
 8009aa0:	4293      	cmp	r3, r2
 8009aa2:	d004      	beq.n	8009aae <HAL_SAI_Init+0x4e2>
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	4a1c      	ldr	r2, [pc, #112]	; (8009b1c <HAL_SAI_Init+0x550>)
 8009aaa:	4293      	cmp	r3, r2
 8009aac:	d119      	bne.n	8009ae2 <HAL_SAI_Init+0x516>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8009aae:	69bb      	ldr	r3, [r7, #24]
 8009ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ab2:	f023 0201 	bic.w	r2, r3, #1
 8009ab6:	69bb      	ldr	r3, [r7, #24]
 8009ab8:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009ac0:	2b01      	cmp	r3, #1
 8009ac2:	d10e      	bne.n	8009ae2 <HAL_SAI_Init+0x516>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009acc:	3b01      	subs	r3, #1
 8009ace:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8009ad0:	431a      	orrs	r2, r3
 8009ad2:	69bb      	ldr	r3, [r7, #24]
 8009ad4:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8009ad6:	69bb      	ldr	r3, [r7, #24]
 8009ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ada:	f043 0201 	orr.w	r2, r3, #1
 8009ade:	69bb      	ldr	r3, [r7, #24]
 8009ae0:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2201      	movs	r2, #1
 8009aee:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2200      	movs	r2, #0
 8009af6:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8009afa:	2300      	movs	r3, #0
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	3728      	adds	r7, #40	; 0x28
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}
 8009b04:	cccccccd 	.word	0xcccccccd
 8009b08:	f005c010 	.word	0xf005c010
 8009b0c:	f805c010 	.word	0xf805c010
 8009b10:	ffff1ff0 	.word	0xffff1ff0
 8009b14:	fff88000 	.word	0xfff88000
 8009b18:	40015804 	.word	0x40015804
 8009b1c:	58005404 	.word	0x58005404

08009b20 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8009b20:	b480      	push	{r7}
 8009b22:	b085      	sub	sp, #20
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8009b28:	4b18      	ldr	r3, [pc, #96]	; (8009b8c <SAI_Disable+0x6c>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	4a18      	ldr	r2, [pc, #96]	; (8009b90 <SAI_Disable+0x70>)
 8009b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8009b32:	0b1b      	lsrs	r3, r3, #12
 8009b34:	009b      	lsls	r3, r3, #2
 8009b36:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8009b38:	2300      	movs	r3, #0
 8009b3a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	681a      	ldr	r2, [r3, #0]
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009b4a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d10a      	bne.n	8009b68 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009b58:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 8009b62:	2303      	movs	r3, #3
 8009b64:	72fb      	strb	r3, [r7, #11]
      break;
 8009b66:	e009      	b.n	8009b7c <SAI_Disable+0x5c>
    }
    count--;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	3b01      	subs	r3, #1
 8009b6c:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d1e7      	bne.n	8009b4c <SAI_Disable+0x2c>

  return status;
 8009b7c:	7afb      	ldrb	r3, [r7, #11]
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3714      	adds	r7, #20
 8009b82:	46bd      	mov	sp, r7
 8009b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b88:	4770      	bx	lr
 8009b8a:	bf00      	nop
 8009b8c:	24000000 	.word	0x24000000
 8009b90:	95cbec1b 	.word	0x95cbec1b

08009b94 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b082      	sub	sp, #8
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
 8009b9c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d101      	bne.n	8009ba8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	e02b      	b.n	8009c00 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009bae:	b2db      	uxtb	r3, r3
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d106      	bne.n	8009bc2 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f7f8 fd95 	bl	80026ec <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2202      	movs	r2, #2
 8009bc6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681a      	ldr	r2, [r3, #0]
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	3304      	adds	r3, #4
 8009bd2:	4619      	mov	r1, r3
 8009bd4:	4610      	mov	r0, r2
 8009bd6:	f001 fdb3 	bl	800b740 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6818      	ldr	r0, [r3, #0]
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	685b      	ldr	r3, [r3, #4]
 8009be2:	461a      	mov	r2, r3
 8009be4:	6839      	ldr	r1, [r7, #0]
 8009be6:	f001 fe07 	bl	800b7f8 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8009bea:	4b07      	ldr	r3, [pc, #28]	; (8009c08 <HAL_SDRAM_Init+0x74>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	4a06      	ldr	r2, [pc, #24]	; (8009c08 <HAL_SDRAM_Init+0x74>)
 8009bf0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009bf4:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2201      	movs	r2, #1
 8009bfa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009bfe:	2300      	movs	r3, #0
}
 8009c00:	4618      	mov	r0, r3
 8009c02:	3708      	adds	r7, #8
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd80      	pop	{r7, pc}
 8009c08:	52004000 	.word	0x52004000

08009c0c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b084      	sub	sp, #16
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d101      	bne.n	8009c1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	e10f      	b.n	8009e3e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2200      	movs	r2, #0
 8009c22:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	4a87      	ldr	r2, [pc, #540]	; (8009e48 <HAL_SPI_Init+0x23c>)
 8009c2a:	4293      	cmp	r3, r2
 8009c2c:	d00f      	beq.n	8009c4e <HAL_SPI_Init+0x42>
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	4a86      	ldr	r2, [pc, #536]	; (8009e4c <HAL_SPI_Init+0x240>)
 8009c34:	4293      	cmp	r3, r2
 8009c36:	d00a      	beq.n	8009c4e <HAL_SPI_Init+0x42>
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	4a84      	ldr	r2, [pc, #528]	; (8009e50 <HAL_SPI_Init+0x244>)
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	d005      	beq.n	8009c4e <HAL_SPI_Init+0x42>
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	68db      	ldr	r3, [r3, #12]
 8009c46:	2b0f      	cmp	r3, #15
 8009c48:	d901      	bls.n	8009c4e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	e0f7      	b.n	8009e3e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f000 f900 	bl	8009e54 <SPI_GetPacketSize>
 8009c54:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	4a7b      	ldr	r2, [pc, #492]	; (8009e48 <HAL_SPI_Init+0x23c>)
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	d00c      	beq.n	8009c7a <HAL_SPI_Init+0x6e>
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	4a79      	ldr	r2, [pc, #484]	; (8009e4c <HAL_SPI_Init+0x240>)
 8009c66:	4293      	cmp	r3, r2
 8009c68:	d007      	beq.n	8009c7a <HAL_SPI_Init+0x6e>
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	4a78      	ldr	r2, [pc, #480]	; (8009e50 <HAL_SPI_Init+0x244>)
 8009c70:	4293      	cmp	r3, r2
 8009c72:	d002      	beq.n	8009c7a <HAL_SPI_Init+0x6e>
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	2b08      	cmp	r3, #8
 8009c78:	d811      	bhi.n	8009c9e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009c7e:	4a72      	ldr	r2, [pc, #456]	; (8009e48 <HAL_SPI_Init+0x23c>)
 8009c80:	4293      	cmp	r3, r2
 8009c82:	d009      	beq.n	8009c98 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	4a70      	ldr	r2, [pc, #448]	; (8009e4c <HAL_SPI_Init+0x240>)
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d004      	beq.n	8009c98 <HAL_SPI_Init+0x8c>
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	4a6f      	ldr	r2, [pc, #444]	; (8009e50 <HAL_SPI_Init+0x244>)
 8009c94:	4293      	cmp	r3, r2
 8009c96:	d104      	bne.n	8009ca2 <HAL_SPI_Init+0x96>
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	2b10      	cmp	r3, #16
 8009c9c:	d901      	bls.n	8009ca2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	e0cd      	b.n	8009e3e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009ca8:	b2db      	uxtb	r3, r3
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d106      	bne.n	8009cbc <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f7f8 fa8a 	bl	80021d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2202      	movs	r2, #2
 8009cc0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	681a      	ldr	r2, [r3, #0]
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	f022 0201 	bic.w	r2, r2, #1
 8009cd2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	689b      	ldr	r3, [r3, #8]
 8009cda:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8009cde:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	699b      	ldr	r3, [r3, #24]
 8009ce4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009ce8:	d119      	bne.n	8009d1e <HAL_SPI_Init+0x112>
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	685b      	ldr	r3, [r3, #4]
 8009cee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009cf2:	d103      	bne.n	8009cfc <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d008      	beq.n	8009d0e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d10c      	bne.n	8009d1e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009d08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009d0c:	d107      	bne.n	8009d1e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	681a      	ldr	r2, [r3, #0]
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009d1c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	685b      	ldr	r3, [r3, #4]
 8009d22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d00f      	beq.n	8009d4a <HAL_SPI_Init+0x13e>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	68db      	ldr	r3, [r3, #12]
 8009d2e:	2b06      	cmp	r3, #6
 8009d30:	d90b      	bls.n	8009d4a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	430a      	orrs	r2, r1
 8009d46:	601a      	str	r2, [r3, #0]
 8009d48:	e007      	b.n	8009d5a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	681a      	ldr	r2, [r3, #0]
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009d58:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	69da      	ldr	r2, [r3, #28]
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d62:	431a      	orrs	r2, r3
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	431a      	orrs	r2, r3
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d6c:	ea42 0103 	orr.w	r1, r2, r3
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	68da      	ldr	r2, [r3, #12]
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	430a      	orrs	r2, r1
 8009d7a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d84:	431a      	orrs	r2, r3
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d8a:	431a      	orrs	r2, r3
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	699b      	ldr	r3, [r3, #24]
 8009d90:	431a      	orrs	r2, r3
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	691b      	ldr	r3, [r3, #16]
 8009d96:	431a      	orrs	r2, r3
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	695b      	ldr	r3, [r3, #20]
 8009d9c:	431a      	orrs	r2, r3
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6a1b      	ldr	r3, [r3, #32]
 8009da2:	431a      	orrs	r2, r3
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	685b      	ldr	r3, [r3, #4]
 8009da8:	431a      	orrs	r2, r3
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009dae:	431a      	orrs	r2, r3
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	689b      	ldr	r3, [r3, #8]
 8009db4:	431a      	orrs	r2, r3
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009dba:	ea42 0103 	orr.w	r1, r2, r3
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	430a      	orrs	r2, r1
 8009dc8:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	685b      	ldr	r3, [r3, #4]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d113      	bne.n	8009dfa <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	689b      	ldr	r3, [r3, #8]
 8009dd8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009de4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	689b      	ldr	r3, [r3, #8]
 8009dec:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009df8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f022 0201 	bic.w	r2, r2, #1
 8009e08:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	685b      	ldr	r3, [r3, #4]
 8009e0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d00a      	beq.n	8009e2c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	68db      	ldr	r3, [r3, #12]
 8009e1c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	430a      	orrs	r2, r1
 8009e2a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2201      	movs	r2, #1
 8009e38:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8009e3c:	2300      	movs	r3, #0
}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	3710      	adds	r7, #16
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}
 8009e46:	bf00      	nop
 8009e48:	40013000 	.word	0x40013000
 8009e4c:	40003800 	.word	0x40003800
 8009e50:	40003c00 	.word	0x40003c00

08009e54 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8009e54:	b480      	push	{r7}
 8009e56:	b085      	sub	sp, #20
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e60:	095b      	lsrs	r3, r3, #5
 8009e62:	3301      	adds	r3, #1
 8009e64:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	68db      	ldr	r3, [r3, #12]
 8009e6a:	3301      	adds	r3, #1
 8009e6c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	3307      	adds	r3, #7
 8009e72:	08db      	lsrs	r3, r3, #3
 8009e74:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	68fa      	ldr	r2, [r7, #12]
 8009e7a:	fb02 f303 	mul.w	r3, r2, r3
}
 8009e7e:	4618      	mov	r0, r3
 8009e80:	3714      	adds	r7, #20
 8009e82:	46bd      	mov	sp, r7
 8009e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e88:	4770      	bx	lr

08009e8a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009e8a:	b580      	push	{r7, lr}
 8009e8c:	b082      	sub	sp, #8
 8009e8e:	af00      	add	r7, sp, #0
 8009e90:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d101      	bne.n	8009e9c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009e98:	2301      	movs	r3, #1
 8009e9a:	e049      	b.n	8009f30 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ea2:	b2db      	uxtb	r3, r3
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d106      	bne.n	8009eb6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2200      	movs	r2, #0
 8009eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	f7f8 fa57 	bl	8002364 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2202      	movs	r2, #2
 8009eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681a      	ldr	r2, [r3, #0]
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	3304      	adds	r3, #4
 8009ec6:	4619      	mov	r1, r3
 8009ec8:	4610      	mov	r0, r2
 8009eca:	f000 f99d 	bl	800a208 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2201      	movs	r2, #1
 8009ed2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2201      	movs	r2, #1
 8009eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2201      	movs	r2, #1
 8009ee2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	2201      	movs	r2, #1
 8009eea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2201      	movs	r2, #1
 8009ef2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2201      	movs	r2, #1
 8009efa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2201      	movs	r2, #1
 8009f02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2201      	movs	r2, #1
 8009f0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2201      	movs	r2, #1
 8009f12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2201      	movs	r2, #1
 8009f1a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2201      	movs	r2, #1
 8009f22:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2201      	movs	r2, #1
 8009f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009f2e:	2300      	movs	r3, #0
}
 8009f30:	4618      	mov	r0, r3
 8009f32:	3708      	adds	r7, #8
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}

08009f38 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b085      	sub	sp, #20
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f46:	b2db      	uxtb	r3, r3
 8009f48:	2b01      	cmp	r3, #1
 8009f4a:	d001      	beq.n	8009f50 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	e04c      	b.n	8009fea <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2202      	movs	r2, #2
 8009f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	4a26      	ldr	r2, [pc, #152]	; (8009ff8 <HAL_TIM_Base_Start+0xc0>)
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	d022      	beq.n	8009fa8 <HAL_TIM_Base_Start+0x70>
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f6a:	d01d      	beq.n	8009fa8 <HAL_TIM_Base_Start+0x70>
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	4a22      	ldr	r2, [pc, #136]	; (8009ffc <HAL_TIM_Base_Start+0xc4>)
 8009f72:	4293      	cmp	r3, r2
 8009f74:	d018      	beq.n	8009fa8 <HAL_TIM_Base_Start+0x70>
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	4a21      	ldr	r2, [pc, #132]	; (800a000 <HAL_TIM_Base_Start+0xc8>)
 8009f7c:	4293      	cmp	r3, r2
 8009f7e:	d013      	beq.n	8009fa8 <HAL_TIM_Base_Start+0x70>
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	4a1f      	ldr	r2, [pc, #124]	; (800a004 <HAL_TIM_Base_Start+0xcc>)
 8009f86:	4293      	cmp	r3, r2
 8009f88:	d00e      	beq.n	8009fa8 <HAL_TIM_Base_Start+0x70>
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	4a1e      	ldr	r2, [pc, #120]	; (800a008 <HAL_TIM_Base_Start+0xd0>)
 8009f90:	4293      	cmp	r3, r2
 8009f92:	d009      	beq.n	8009fa8 <HAL_TIM_Base_Start+0x70>
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	4a1c      	ldr	r2, [pc, #112]	; (800a00c <HAL_TIM_Base_Start+0xd4>)
 8009f9a:	4293      	cmp	r3, r2
 8009f9c:	d004      	beq.n	8009fa8 <HAL_TIM_Base_Start+0x70>
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	4a1b      	ldr	r2, [pc, #108]	; (800a010 <HAL_TIM_Base_Start+0xd8>)
 8009fa4:	4293      	cmp	r3, r2
 8009fa6:	d115      	bne.n	8009fd4 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	689a      	ldr	r2, [r3, #8]
 8009fae:	4b19      	ldr	r3, [pc, #100]	; (800a014 <HAL_TIM_Base_Start+0xdc>)
 8009fb0:	4013      	ands	r3, r2
 8009fb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	2b06      	cmp	r3, #6
 8009fb8:	d015      	beq.n	8009fe6 <HAL_TIM_Base_Start+0xae>
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fc0:	d011      	beq.n	8009fe6 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	681a      	ldr	r2, [r3, #0]
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f042 0201 	orr.w	r2, r2, #1
 8009fd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fd2:	e008      	b.n	8009fe6 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	681a      	ldr	r2, [r3, #0]
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f042 0201 	orr.w	r2, r2, #1
 8009fe2:	601a      	str	r2, [r3, #0]
 8009fe4:	e000      	b.n	8009fe8 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fe6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009fe8:	2300      	movs	r3, #0
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	3714      	adds	r7, #20
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff4:	4770      	bx	lr
 8009ff6:	bf00      	nop
 8009ff8:	40010000 	.word	0x40010000
 8009ffc:	40000400 	.word	0x40000400
 800a000:	40000800 	.word	0x40000800
 800a004:	40000c00 	.word	0x40000c00
 800a008:	40010400 	.word	0x40010400
 800a00c:	40001800 	.word	0x40001800
 800a010:	40014000 	.word	0x40014000
 800a014:	00010007 	.word	0x00010007

0800a018 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b084      	sub	sp, #16
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
 800a020:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a022:	2300      	movs	r3, #0
 800a024:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a02c:	2b01      	cmp	r3, #1
 800a02e:	d101      	bne.n	800a034 <HAL_TIM_ConfigClockSource+0x1c>
 800a030:	2302      	movs	r3, #2
 800a032:	e0dc      	b.n	800a1ee <HAL_TIM_ConfigClockSource+0x1d6>
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2201      	movs	r2, #1
 800a038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2202      	movs	r2, #2
 800a040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	689b      	ldr	r3, [r3, #8]
 800a04a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a04c:	68ba      	ldr	r2, [r7, #8]
 800a04e:	4b6a      	ldr	r3, [pc, #424]	; (800a1f8 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a050:	4013      	ands	r3, r2
 800a052:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a05a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	68ba      	ldr	r2, [r7, #8]
 800a062:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	4a64      	ldr	r2, [pc, #400]	; (800a1fc <HAL_TIM_ConfigClockSource+0x1e4>)
 800a06a:	4293      	cmp	r3, r2
 800a06c:	f000 80a9 	beq.w	800a1c2 <HAL_TIM_ConfigClockSource+0x1aa>
 800a070:	4a62      	ldr	r2, [pc, #392]	; (800a1fc <HAL_TIM_ConfigClockSource+0x1e4>)
 800a072:	4293      	cmp	r3, r2
 800a074:	f200 80ae 	bhi.w	800a1d4 <HAL_TIM_ConfigClockSource+0x1bc>
 800a078:	4a61      	ldr	r2, [pc, #388]	; (800a200 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a07a:	4293      	cmp	r3, r2
 800a07c:	f000 80a1 	beq.w	800a1c2 <HAL_TIM_ConfigClockSource+0x1aa>
 800a080:	4a5f      	ldr	r2, [pc, #380]	; (800a200 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a082:	4293      	cmp	r3, r2
 800a084:	f200 80a6 	bhi.w	800a1d4 <HAL_TIM_ConfigClockSource+0x1bc>
 800a088:	4a5e      	ldr	r2, [pc, #376]	; (800a204 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a08a:	4293      	cmp	r3, r2
 800a08c:	f000 8099 	beq.w	800a1c2 <HAL_TIM_ConfigClockSource+0x1aa>
 800a090:	4a5c      	ldr	r2, [pc, #368]	; (800a204 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a092:	4293      	cmp	r3, r2
 800a094:	f200 809e 	bhi.w	800a1d4 <HAL_TIM_ConfigClockSource+0x1bc>
 800a098:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a09c:	f000 8091 	beq.w	800a1c2 <HAL_TIM_ConfigClockSource+0x1aa>
 800a0a0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a0a4:	f200 8096 	bhi.w	800a1d4 <HAL_TIM_ConfigClockSource+0x1bc>
 800a0a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a0ac:	f000 8089 	beq.w	800a1c2 <HAL_TIM_ConfigClockSource+0x1aa>
 800a0b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a0b4:	f200 808e 	bhi.w	800a1d4 <HAL_TIM_ConfigClockSource+0x1bc>
 800a0b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0bc:	d03e      	beq.n	800a13c <HAL_TIM_ConfigClockSource+0x124>
 800a0be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0c2:	f200 8087 	bhi.w	800a1d4 <HAL_TIM_ConfigClockSource+0x1bc>
 800a0c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0ca:	f000 8086 	beq.w	800a1da <HAL_TIM_ConfigClockSource+0x1c2>
 800a0ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0d2:	d87f      	bhi.n	800a1d4 <HAL_TIM_ConfigClockSource+0x1bc>
 800a0d4:	2b70      	cmp	r3, #112	; 0x70
 800a0d6:	d01a      	beq.n	800a10e <HAL_TIM_ConfigClockSource+0xf6>
 800a0d8:	2b70      	cmp	r3, #112	; 0x70
 800a0da:	d87b      	bhi.n	800a1d4 <HAL_TIM_ConfigClockSource+0x1bc>
 800a0dc:	2b60      	cmp	r3, #96	; 0x60
 800a0de:	d050      	beq.n	800a182 <HAL_TIM_ConfigClockSource+0x16a>
 800a0e0:	2b60      	cmp	r3, #96	; 0x60
 800a0e2:	d877      	bhi.n	800a1d4 <HAL_TIM_ConfigClockSource+0x1bc>
 800a0e4:	2b50      	cmp	r3, #80	; 0x50
 800a0e6:	d03c      	beq.n	800a162 <HAL_TIM_ConfigClockSource+0x14a>
 800a0e8:	2b50      	cmp	r3, #80	; 0x50
 800a0ea:	d873      	bhi.n	800a1d4 <HAL_TIM_ConfigClockSource+0x1bc>
 800a0ec:	2b40      	cmp	r3, #64	; 0x40
 800a0ee:	d058      	beq.n	800a1a2 <HAL_TIM_ConfigClockSource+0x18a>
 800a0f0:	2b40      	cmp	r3, #64	; 0x40
 800a0f2:	d86f      	bhi.n	800a1d4 <HAL_TIM_ConfigClockSource+0x1bc>
 800a0f4:	2b30      	cmp	r3, #48	; 0x30
 800a0f6:	d064      	beq.n	800a1c2 <HAL_TIM_ConfigClockSource+0x1aa>
 800a0f8:	2b30      	cmp	r3, #48	; 0x30
 800a0fa:	d86b      	bhi.n	800a1d4 <HAL_TIM_ConfigClockSource+0x1bc>
 800a0fc:	2b20      	cmp	r3, #32
 800a0fe:	d060      	beq.n	800a1c2 <HAL_TIM_ConfigClockSource+0x1aa>
 800a100:	2b20      	cmp	r3, #32
 800a102:	d867      	bhi.n	800a1d4 <HAL_TIM_ConfigClockSource+0x1bc>
 800a104:	2b00      	cmp	r3, #0
 800a106:	d05c      	beq.n	800a1c2 <HAL_TIM_ConfigClockSource+0x1aa>
 800a108:	2b10      	cmp	r3, #16
 800a10a:	d05a      	beq.n	800a1c2 <HAL_TIM_ConfigClockSource+0x1aa>
 800a10c:	e062      	b.n	800a1d4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6818      	ldr	r0, [r3, #0]
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	6899      	ldr	r1, [r3, #8]
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	685a      	ldr	r2, [r3, #4]
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	68db      	ldr	r3, [r3, #12]
 800a11e:	f000 f98b 	bl	800a438 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	689b      	ldr	r3, [r3, #8]
 800a128:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a12a:	68bb      	ldr	r3, [r7, #8]
 800a12c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a130:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	68ba      	ldr	r2, [r7, #8]
 800a138:	609a      	str	r2, [r3, #8]
      break;
 800a13a:	e04f      	b.n	800a1dc <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	6818      	ldr	r0, [r3, #0]
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	6899      	ldr	r1, [r3, #8]
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	685a      	ldr	r2, [r3, #4]
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	68db      	ldr	r3, [r3, #12]
 800a14c:	f000 f974 	bl	800a438 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	689a      	ldr	r2, [r3, #8]
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a15e:	609a      	str	r2, [r3, #8]
      break;
 800a160:	e03c      	b.n	800a1dc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6818      	ldr	r0, [r3, #0]
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	6859      	ldr	r1, [r3, #4]
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	68db      	ldr	r3, [r3, #12]
 800a16e:	461a      	mov	r2, r3
 800a170:	f000 f8e4 	bl	800a33c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	2150      	movs	r1, #80	; 0x50
 800a17a:	4618      	mov	r0, r3
 800a17c:	f000 f93e 	bl	800a3fc <TIM_ITRx_SetConfig>
      break;
 800a180:	e02c      	b.n	800a1dc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6818      	ldr	r0, [r3, #0]
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	6859      	ldr	r1, [r3, #4]
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	68db      	ldr	r3, [r3, #12]
 800a18e:	461a      	mov	r2, r3
 800a190:	f000 f903 	bl	800a39a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	2160      	movs	r1, #96	; 0x60
 800a19a:	4618      	mov	r0, r3
 800a19c:	f000 f92e 	bl	800a3fc <TIM_ITRx_SetConfig>
      break;
 800a1a0:	e01c      	b.n	800a1dc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	6818      	ldr	r0, [r3, #0]
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	6859      	ldr	r1, [r3, #4]
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	68db      	ldr	r3, [r3, #12]
 800a1ae:	461a      	mov	r2, r3
 800a1b0:	f000 f8c4 	bl	800a33c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	2140      	movs	r1, #64	; 0x40
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	f000 f91e 	bl	800a3fc <TIM_ITRx_SetConfig>
      break;
 800a1c0:	e00c      	b.n	800a1dc <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681a      	ldr	r2, [r3, #0]
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	4619      	mov	r1, r3
 800a1cc:	4610      	mov	r0, r2
 800a1ce:	f000 f915 	bl	800a3fc <TIM_ITRx_SetConfig>
      break;
 800a1d2:	e003      	b.n	800a1dc <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	73fb      	strb	r3, [r7, #15]
      break;
 800a1d8:	e000      	b.n	800a1dc <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800a1da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2201      	movs	r2, #1
 800a1e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a1ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	3710      	adds	r7, #16
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bd80      	pop	{r7, pc}
 800a1f6:	bf00      	nop
 800a1f8:	ffceff88 	.word	0xffceff88
 800a1fc:	00100040 	.word	0x00100040
 800a200:	00100030 	.word	0x00100030
 800a204:	00100020 	.word	0x00100020

0800a208 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a208:	b480      	push	{r7}
 800a20a:	b085      	sub	sp, #20
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
 800a210:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	4a40      	ldr	r2, [pc, #256]	; (800a31c <TIM_Base_SetConfig+0x114>)
 800a21c:	4293      	cmp	r3, r2
 800a21e:	d013      	beq.n	800a248 <TIM_Base_SetConfig+0x40>
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a226:	d00f      	beq.n	800a248 <TIM_Base_SetConfig+0x40>
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	4a3d      	ldr	r2, [pc, #244]	; (800a320 <TIM_Base_SetConfig+0x118>)
 800a22c:	4293      	cmp	r3, r2
 800a22e:	d00b      	beq.n	800a248 <TIM_Base_SetConfig+0x40>
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	4a3c      	ldr	r2, [pc, #240]	; (800a324 <TIM_Base_SetConfig+0x11c>)
 800a234:	4293      	cmp	r3, r2
 800a236:	d007      	beq.n	800a248 <TIM_Base_SetConfig+0x40>
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	4a3b      	ldr	r2, [pc, #236]	; (800a328 <TIM_Base_SetConfig+0x120>)
 800a23c:	4293      	cmp	r3, r2
 800a23e:	d003      	beq.n	800a248 <TIM_Base_SetConfig+0x40>
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	4a3a      	ldr	r2, [pc, #232]	; (800a32c <TIM_Base_SetConfig+0x124>)
 800a244:	4293      	cmp	r3, r2
 800a246:	d108      	bne.n	800a25a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a24e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	685b      	ldr	r3, [r3, #4]
 800a254:	68fa      	ldr	r2, [r7, #12]
 800a256:	4313      	orrs	r3, r2
 800a258:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	4a2f      	ldr	r2, [pc, #188]	; (800a31c <TIM_Base_SetConfig+0x114>)
 800a25e:	4293      	cmp	r3, r2
 800a260:	d01f      	beq.n	800a2a2 <TIM_Base_SetConfig+0x9a>
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a268:	d01b      	beq.n	800a2a2 <TIM_Base_SetConfig+0x9a>
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	4a2c      	ldr	r2, [pc, #176]	; (800a320 <TIM_Base_SetConfig+0x118>)
 800a26e:	4293      	cmp	r3, r2
 800a270:	d017      	beq.n	800a2a2 <TIM_Base_SetConfig+0x9a>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	4a2b      	ldr	r2, [pc, #172]	; (800a324 <TIM_Base_SetConfig+0x11c>)
 800a276:	4293      	cmp	r3, r2
 800a278:	d013      	beq.n	800a2a2 <TIM_Base_SetConfig+0x9a>
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	4a2a      	ldr	r2, [pc, #168]	; (800a328 <TIM_Base_SetConfig+0x120>)
 800a27e:	4293      	cmp	r3, r2
 800a280:	d00f      	beq.n	800a2a2 <TIM_Base_SetConfig+0x9a>
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	4a29      	ldr	r2, [pc, #164]	; (800a32c <TIM_Base_SetConfig+0x124>)
 800a286:	4293      	cmp	r3, r2
 800a288:	d00b      	beq.n	800a2a2 <TIM_Base_SetConfig+0x9a>
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	4a28      	ldr	r2, [pc, #160]	; (800a330 <TIM_Base_SetConfig+0x128>)
 800a28e:	4293      	cmp	r3, r2
 800a290:	d007      	beq.n	800a2a2 <TIM_Base_SetConfig+0x9a>
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	4a27      	ldr	r2, [pc, #156]	; (800a334 <TIM_Base_SetConfig+0x12c>)
 800a296:	4293      	cmp	r3, r2
 800a298:	d003      	beq.n	800a2a2 <TIM_Base_SetConfig+0x9a>
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	4a26      	ldr	r2, [pc, #152]	; (800a338 <TIM_Base_SetConfig+0x130>)
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	d108      	bne.n	800a2b4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a2a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	68db      	ldr	r3, [r3, #12]
 800a2ae:	68fa      	ldr	r2, [r7, #12]
 800a2b0:	4313      	orrs	r3, r2
 800a2b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	695b      	ldr	r3, [r3, #20]
 800a2be:	4313      	orrs	r3, r2
 800a2c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	68fa      	ldr	r2, [r7, #12]
 800a2c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	689a      	ldr	r2, [r3, #8]
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	681a      	ldr	r2, [r3, #0]
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	4a10      	ldr	r2, [pc, #64]	; (800a31c <TIM_Base_SetConfig+0x114>)
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d00f      	beq.n	800a300 <TIM_Base_SetConfig+0xf8>
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	4a12      	ldr	r2, [pc, #72]	; (800a32c <TIM_Base_SetConfig+0x124>)
 800a2e4:	4293      	cmp	r3, r2
 800a2e6:	d00b      	beq.n	800a300 <TIM_Base_SetConfig+0xf8>
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	4a11      	ldr	r2, [pc, #68]	; (800a330 <TIM_Base_SetConfig+0x128>)
 800a2ec:	4293      	cmp	r3, r2
 800a2ee:	d007      	beq.n	800a300 <TIM_Base_SetConfig+0xf8>
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	4a10      	ldr	r2, [pc, #64]	; (800a334 <TIM_Base_SetConfig+0x12c>)
 800a2f4:	4293      	cmp	r3, r2
 800a2f6:	d003      	beq.n	800a300 <TIM_Base_SetConfig+0xf8>
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	4a0f      	ldr	r2, [pc, #60]	; (800a338 <TIM_Base_SetConfig+0x130>)
 800a2fc:	4293      	cmp	r3, r2
 800a2fe:	d103      	bne.n	800a308 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	691a      	ldr	r2, [r3, #16]
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2201      	movs	r2, #1
 800a30c:	615a      	str	r2, [r3, #20]
}
 800a30e:	bf00      	nop
 800a310:	3714      	adds	r7, #20
 800a312:	46bd      	mov	sp, r7
 800a314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a318:	4770      	bx	lr
 800a31a:	bf00      	nop
 800a31c:	40010000 	.word	0x40010000
 800a320:	40000400 	.word	0x40000400
 800a324:	40000800 	.word	0x40000800
 800a328:	40000c00 	.word	0x40000c00
 800a32c:	40010400 	.word	0x40010400
 800a330:	40014000 	.word	0x40014000
 800a334:	40014400 	.word	0x40014400
 800a338:	40014800 	.word	0x40014800

0800a33c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a33c:	b480      	push	{r7}
 800a33e:	b087      	sub	sp, #28
 800a340:	af00      	add	r7, sp, #0
 800a342:	60f8      	str	r0, [r7, #12]
 800a344:	60b9      	str	r1, [r7, #8]
 800a346:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	6a1b      	ldr	r3, [r3, #32]
 800a34c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	6a1b      	ldr	r3, [r3, #32]
 800a352:	f023 0201 	bic.w	r2, r3, #1
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	699b      	ldr	r3, [r3, #24]
 800a35e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a360:	693b      	ldr	r3, [r7, #16]
 800a362:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a366:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	011b      	lsls	r3, r3, #4
 800a36c:	693a      	ldr	r2, [r7, #16]
 800a36e:	4313      	orrs	r3, r2
 800a370:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a372:	697b      	ldr	r3, [r7, #20]
 800a374:	f023 030a 	bic.w	r3, r3, #10
 800a378:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a37a:	697a      	ldr	r2, [r7, #20]
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	4313      	orrs	r3, r2
 800a380:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	693a      	ldr	r2, [r7, #16]
 800a386:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	697a      	ldr	r2, [r7, #20]
 800a38c:	621a      	str	r2, [r3, #32]
}
 800a38e:	bf00      	nop
 800a390:	371c      	adds	r7, #28
 800a392:	46bd      	mov	sp, r7
 800a394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a398:	4770      	bx	lr

0800a39a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a39a:	b480      	push	{r7}
 800a39c:	b087      	sub	sp, #28
 800a39e:	af00      	add	r7, sp, #0
 800a3a0:	60f8      	str	r0, [r7, #12]
 800a3a2:	60b9      	str	r1, [r7, #8]
 800a3a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	6a1b      	ldr	r3, [r3, #32]
 800a3aa:	f023 0210 	bic.w	r2, r3, #16
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	699b      	ldr	r3, [r3, #24]
 800a3b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	6a1b      	ldr	r3, [r3, #32]
 800a3bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a3be:	697b      	ldr	r3, [r7, #20]
 800a3c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a3c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	031b      	lsls	r3, r3, #12
 800a3ca:	697a      	ldr	r2, [r7, #20]
 800a3cc:	4313      	orrs	r3, r2
 800a3ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a3d0:	693b      	ldr	r3, [r7, #16]
 800a3d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a3d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a3d8:	68bb      	ldr	r3, [r7, #8]
 800a3da:	011b      	lsls	r3, r3, #4
 800a3dc:	693a      	ldr	r2, [r7, #16]
 800a3de:	4313      	orrs	r3, r2
 800a3e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	697a      	ldr	r2, [r7, #20]
 800a3e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	693a      	ldr	r2, [r7, #16]
 800a3ec:	621a      	str	r2, [r3, #32]
}
 800a3ee:	bf00      	nop
 800a3f0:	371c      	adds	r7, #28
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f8:	4770      	bx	lr
	...

0800a3fc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a3fc:	b480      	push	{r7}
 800a3fe:	b085      	sub	sp, #20
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
 800a404:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	689b      	ldr	r3, [r3, #8]
 800a40a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a40c:	68fa      	ldr	r2, [r7, #12]
 800a40e:	4b09      	ldr	r3, [pc, #36]	; (800a434 <TIM_ITRx_SetConfig+0x38>)
 800a410:	4013      	ands	r3, r2
 800a412:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a414:	683a      	ldr	r2, [r7, #0]
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	4313      	orrs	r3, r2
 800a41a:	f043 0307 	orr.w	r3, r3, #7
 800a41e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	68fa      	ldr	r2, [r7, #12]
 800a424:	609a      	str	r2, [r3, #8]
}
 800a426:	bf00      	nop
 800a428:	3714      	adds	r7, #20
 800a42a:	46bd      	mov	sp, r7
 800a42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a430:	4770      	bx	lr
 800a432:	bf00      	nop
 800a434:	ffcfff8f 	.word	0xffcfff8f

0800a438 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a438:	b480      	push	{r7}
 800a43a:	b087      	sub	sp, #28
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	60f8      	str	r0, [r7, #12]
 800a440:	60b9      	str	r1, [r7, #8]
 800a442:	607a      	str	r2, [r7, #4]
 800a444:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	689b      	ldr	r3, [r3, #8]
 800a44a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a44c:	697b      	ldr	r3, [r7, #20]
 800a44e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a452:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	021a      	lsls	r2, r3, #8
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	431a      	orrs	r2, r3
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	4313      	orrs	r3, r2
 800a460:	697a      	ldr	r2, [r7, #20]
 800a462:	4313      	orrs	r3, r2
 800a464:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	697a      	ldr	r2, [r7, #20]
 800a46a:	609a      	str	r2, [r3, #8]
}
 800a46c:	bf00      	nop
 800a46e:	371c      	adds	r7, #28
 800a470:	46bd      	mov	sp, r7
 800a472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a476:	4770      	bx	lr

0800a478 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a478:	b480      	push	{r7}
 800a47a:	b085      	sub	sp, #20
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
 800a480:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a488:	2b01      	cmp	r3, #1
 800a48a:	d101      	bne.n	800a490 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a48c:	2302      	movs	r3, #2
 800a48e:	e06d      	b.n	800a56c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2201      	movs	r2, #1
 800a494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2202      	movs	r2, #2
 800a49c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	685b      	ldr	r3, [r3, #4]
 800a4a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	689b      	ldr	r3, [r3, #8]
 800a4ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	4a30      	ldr	r2, [pc, #192]	; (800a578 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a4b6:	4293      	cmp	r3, r2
 800a4b8:	d004      	beq.n	800a4c4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	4a2f      	ldr	r2, [pc, #188]	; (800a57c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a4c0:	4293      	cmp	r3, r2
 800a4c2:	d108      	bne.n	800a4d6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a4ca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	685b      	ldr	r3, [r3, #4]
 800a4d0:	68fa      	ldr	r2, [r7, #12]
 800a4d2:	4313      	orrs	r3, r2
 800a4d4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4dc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	68fa      	ldr	r2, [r7, #12]
 800a4e4:	4313      	orrs	r3, r2
 800a4e6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	68fa      	ldr	r2, [r7, #12]
 800a4ee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	4a20      	ldr	r2, [pc, #128]	; (800a578 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a4f6:	4293      	cmp	r3, r2
 800a4f8:	d022      	beq.n	800a540 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a502:	d01d      	beq.n	800a540 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	4a1d      	ldr	r2, [pc, #116]	; (800a580 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a50a:	4293      	cmp	r3, r2
 800a50c:	d018      	beq.n	800a540 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	4a1c      	ldr	r2, [pc, #112]	; (800a584 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a514:	4293      	cmp	r3, r2
 800a516:	d013      	beq.n	800a540 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	4a1a      	ldr	r2, [pc, #104]	; (800a588 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a51e:	4293      	cmp	r3, r2
 800a520:	d00e      	beq.n	800a540 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	4a15      	ldr	r2, [pc, #84]	; (800a57c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a528:	4293      	cmp	r3, r2
 800a52a:	d009      	beq.n	800a540 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	4a16      	ldr	r2, [pc, #88]	; (800a58c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a532:	4293      	cmp	r3, r2
 800a534:	d004      	beq.n	800a540 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	4a15      	ldr	r2, [pc, #84]	; (800a590 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a53c:	4293      	cmp	r3, r2
 800a53e:	d10c      	bne.n	800a55a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a546:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	689b      	ldr	r3, [r3, #8]
 800a54c:	68ba      	ldr	r2, [r7, #8]
 800a54e:	4313      	orrs	r3, r2
 800a550:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	68ba      	ldr	r2, [r7, #8]
 800a558:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2201      	movs	r2, #1
 800a55e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2200      	movs	r2, #0
 800a566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a56a:	2300      	movs	r3, #0
}
 800a56c:	4618      	mov	r0, r3
 800a56e:	3714      	adds	r7, #20
 800a570:	46bd      	mov	sp, r7
 800a572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a576:	4770      	bx	lr
 800a578:	40010000 	.word	0x40010000
 800a57c:	40010400 	.word	0x40010400
 800a580:	40000400 	.word	0x40000400
 800a584:	40000800 	.word	0x40000800
 800a588:	40000c00 	.word	0x40000c00
 800a58c:	40001800 	.word	0x40001800
 800a590:	40014000 	.word	0x40014000

0800a594 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b082      	sub	sp, #8
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d101      	bne.n	800a5a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	e042      	b.n	800a62c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d106      	bne.n	800a5be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	f7f7 fef5 	bl	80023a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	2224      	movs	r2, #36	; 0x24
 800a5c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	681a      	ldr	r2, [r3, #0]
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	f022 0201 	bic.w	r2, r2, #1
 800a5d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a5d6:	6878      	ldr	r0, [r7, #4]
 800a5d8:	f000 f82c 	bl	800a634 <UART_SetConfig>
 800a5dc:	4603      	mov	r3, r0
 800a5de:	2b01      	cmp	r3, #1
 800a5e0:	d101      	bne.n	800a5e6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	e022      	b.n	800a62c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d002      	beq.n	800a5f4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f000 fd88 	bl	800b104 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	685a      	ldr	r2, [r3, #4]
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a602:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	689a      	ldr	r2, [r3, #8]
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a612:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	681a      	ldr	r2, [r3, #0]
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f042 0201 	orr.w	r2, r2, #1
 800a622:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a624:	6878      	ldr	r0, [r7, #4]
 800a626:	f000 fe0f 	bl	800b248 <UART_CheckIdleState>
 800a62a:	4603      	mov	r3, r0
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3708      	adds	r7, #8
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}

0800a634 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a634:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a638:	b092      	sub	sp, #72	; 0x48
 800a63a:	af00      	add	r7, sp, #0
 800a63c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a63e:	2300      	movs	r3, #0
 800a640:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a644:	697b      	ldr	r3, [r7, #20]
 800a646:	689a      	ldr	r2, [r3, #8]
 800a648:	697b      	ldr	r3, [r7, #20]
 800a64a:	691b      	ldr	r3, [r3, #16]
 800a64c:	431a      	orrs	r2, r3
 800a64e:	697b      	ldr	r3, [r7, #20]
 800a650:	695b      	ldr	r3, [r3, #20]
 800a652:	431a      	orrs	r2, r3
 800a654:	697b      	ldr	r3, [r7, #20]
 800a656:	69db      	ldr	r3, [r3, #28]
 800a658:	4313      	orrs	r3, r2
 800a65a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a65c:	697b      	ldr	r3, [r7, #20]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	681a      	ldr	r2, [r3, #0]
 800a662:	4bbe      	ldr	r3, [pc, #760]	; (800a95c <UART_SetConfig+0x328>)
 800a664:	4013      	ands	r3, r2
 800a666:	697a      	ldr	r2, [r7, #20]
 800a668:	6812      	ldr	r2, [r2, #0]
 800a66a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a66c:	430b      	orrs	r3, r1
 800a66e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a670:	697b      	ldr	r3, [r7, #20]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	685b      	ldr	r3, [r3, #4]
 800a676:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a67a:	697b      	ldr	r3, [r7, #20]
 800a67c:	68da      	ldr	r2, [r3, #12]
 800a67e:	697b      	ldr	r3, [r7, #20]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	430a      	orrs	r2, r1
 800a684:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a686:	697b      	ldr	r3, [r7, #20]
 800a688:	699b      	ldr	r3, [r3, #24]
 800a68a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a68c:	697b      	ldr	r3, [r7, #20]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	4ab3      	ldr	r2, [pc, #716]	; (800a960 <UART_SetConfig+0x32c>)
 800a692:	4293      	cmp	r3, r2
 800a694:	d004      	beq.n	800a6a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a696:	697b      	ldr	r3, [r7, #20]
 800a698:	6a1b      	ldr	r3, [r3, #32]
 800a69a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a69c:	4313      	orrs	r3, r2
 800a69e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a6a0:	697b      	ldr	r3, [r7, #20]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	689a      	ldr	r2, [r3, #8]
 800a6a6:	4baf      	ldr	r3, [pc, #700]	; (800a964 <UART_SetConfig+0x330>)
 800a6a8:	4013      	ands	r3, r2
 800a6aa:	697a      	ldr	r2, [r7, #20]
 800a6ac:	6812      	ldr	r2, [r2, #0]
 800a6ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a6b0:	430b      	orrs	r3, r1
 800a6b2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a6b4:	697b      	ldr	r3, [r7, #20]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6ba:	f023 010f 	bic.w	r1, r3, #15
 800a6be:	697b      	ldr	r3, [r7, #20]
 800a6c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a6c2:	697b      	ldr	r3, [r7, #20]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	430a      	orrs	r2, r1
 800a6c8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a6ca:	697b      	ldr	r3, [r7, #20]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	4aa6      	ldr	r2, [pc, #664]	; (800a968 <UART_SetConfig+0x334>)
 800a6d0:	4293      	cmp	r3, r2
 800a6d2:	d177      	bne.n	800a7c4 <UART_SetConfig+0x190>
 800a6d4:	4ba5      	ldr	r3, [pc, #660]	; (800a96c <UART_SetConfig+0x338>)
 800a6d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a6dc:	2b28      	cmp	r3, #40	; 0x28
 800a6de:	d86d      	bhi.n	800a7bc <UART_SetConfig+0x188>
 800a6e0:	a201      	add	r2, pc, #4	; (adr r2, 800a6e8 <UART_SetConfig+0xb4>)
 800a6e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6e6:	bf00      	nop
 800a6e8:	0800a78d 	.word	0x0800a78d
 800a6ec:	0800a7bd 	.word	0x0800a7bd
 800a6f0:	0800a7bd 	.word	0x0800a7bd
 800a6f4:	0800a7bd 	.word	0x0800a7bd
 800a6f8:	0800a7bd 	.word	0x0800a7bd
 800a6fc:	0800a7bd 	.word	0x0800a7bd
 800a700:	0800a7bd 	.word	0x0800a7bd
 800a704:	0800a7bd 	.word	0x0800a7bd
 800a708:	0800a795 	.word	0x0800a795
 800a70c:	0800a7bd 	.word	0x0800a7bd
 800a710:	0800a7bd 	.word	0x0800a7bd
 800a714:	0800a7bd 	.word	0x0800a7bd
 800a718:	0800a7bd 	.word	0x0800a7bd
 800a71c:	0800a7bd 	.word	0x0800a7bd
 800a720:	0800a7bd 	.word	0x0800a7bd
 800a724:	0800a7bd 	.word	0x0800a7bd
 800a728:	0800a79d 	.word	0x0800a79d
 800a72c:	0800a7bd 	.word	0x0800a7bd
 800a730:	0800a7bd 	.word	0x0800a7bd
 800a734:	0800a7bd 	.word	0x0800a7bd
 800a738:	0800a7bd 	.word	0x0800a7bd
 800a73c:	0800a7bd 	.word	0x0800a7bd
 800a740:	0800a7bd 	.word	0x0800a7bd
 800a744:	0800a7bd 	.word	0x0800a7bd
 800a748:	0800a7a5 	.word	0x0800a7a5
 800a74c:	0800a7bd 	.word	0x0800a7bd
 800a750:	0800a7bd 	.word	0x0800a7bd
 800a754:	0800a7bd 	.word	0x0800a7bd
 800a758:	0800a7bd 	.word	0x0800a7bd
 800a75c:	0800a7bd 	.word	0x0800a7bd
 800a760:	0800a7bd 	.word	0x0800a7bd
 800a764:	0800a7bd 	.word	0x0800a7bd
 800a768:	0800a7ad 	.word	0x0800a7ad
 800a76c:	0800a7bd 	.word	0x0800a7bd
 800a770:	0800a7bd 	.word	0x0800a7bd
 800a774:	0800a7bd 	.word	0x0800a7bd
 800a778:	0800a7bd 	.word	0x0800a7bd
 800a77c:	0800a7bd 	.word	0x0800a7bd
 800a780:	0800a7bd 	.word	0x0800a7bd
 800a784:	0800a7bd 	.word	0x0800a7bd
 800a788:	0800a7b5 	.word	0x0800a7b5
 800a78c:	2301      	movs	r3, #1
 800a78e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a792:	e222      	b.n	800abda <UART_SetConfig+0x5a6>
 800a794:	2304      	movs	r3, #4
 800a796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a79a:	e21e      	b.n	800abda <UART_SetConfig+0x5a6>
 800a79c:	2308      	movs	r3, #8
 800a79e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7a2:	e21a      	b.n	800abda <UART_SetConfig+0x5a6>
 800a7a4:	2310      	movs	r3, #16
 800a7a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7aa:	e216      	b.n	800abda <UART_SetConfig+0x5a6>
 800a7ac:	2320      	movs	r3, #32
 800a7ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7b2:	e212      	b.n	800abda <UART_SetConfig+0x5a6>
 800a7b4:	2340      	movs	r3, #64	; 0x40
 800a7b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7ba:	e20e      	b.n	800abda <UART_SetConfig+0x5a6>
 800a7bc:	2380      	movs	r3, #128	; 0x80
 800a7be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7c2:	e20a      	b.n	800abda <UART_SetConfig+0x5a6>
 800a7c4:	697b      	ldr	r3, [r7, #20]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	4a69      	ldr	r2, [pc, #420]	; (800a970 <UART_SetConfig+0x33c>)
 800a7ca:	4293      	cmp	r3, r2
 800a7cc:	d130      	bne.n	800a830 <UART_SetConfig+0x1fc>
 800a7ce:	4b67      	ldr	r3, [pc, #412]	; (800a96c <UART_SetConfig+0x338>)
 800a7d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7d2:	f003 0307 	and.w	r3, r3, #7
 800a7d6:	2b05      	cmp	r3, #5
 800a7d8:	d826      	bhi.n	800a828 <UART_SetConfig+0x1f4>
 800a7da:	a201      	add	r2, pc, #4	; (adr r2, 800a7e0 <UART_SetConfig+0x1ac>)
 800a7dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7e0:	0800a7f9 	.word	0x0800a7f9
 800a7e4:	0800a801 	.word	0x0800a801
 800a7e8:	0800a809 	.word	0x0800a809
 800a7ec:	0800a811 	.word	0x0800a811
 800a7f0:	0800a819 	.word	0x0800a819
 800a7f4:	0800a821 	.word	0x0800a821
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7fe:	e1ec      	b.n	800abda <UART_SetConfig+0x5a6>
 800a800:	2304      	movs	r3, #4
 800a802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a806:	e1e8      	b.n	800abda <UART_SetConfig+0x5a6>
 800a808:	2308      	movs	r3, #8
 800a80a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a80e:	e1e4      	b.n	800abda <UART_SetConfig+0x5a6>
 800a810:	2310      	movs	r3, #16
 800a812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a816:	e1e0      	b.n	800abda <UART_SetConfig+0x5a6>
 800a818:	2320      	movs	r3, #32
 800a81a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a81e:	e1dc      	b.n	800abda <UART_SetConfig+0x5a6>
 800a820:	2340      	movs	r3, #64	; 0x40
 800a822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a826:	e1d8      	b.n	800abda <UART_SetConfig+0x5a6>
 800a828:	2380      	movs	r3, #128	; 0x80
 800a82a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a82e:	e1d4      	b.n	800abda <UART_SetConfig+0x5a6>
 800a830:	697b      	ldr	r3, [r7, #20]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	4a4f      	ldr	r2, [pc, #316]	; (800a974 <UART_SetConfig+0x340>)
 800a836:	4293      	cmp	r3, r2
 800a838:	d130      	bne.n	800a89c <UART_SetConfig+0x268>
 800a83a:	4b4c      	ldr	r3, [pc, #304]	; (800a96c <UART_SetConfig+0x338>)
 800a83c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a83e:	f003 0307 	and.w	r3, r3, #7
 800a842:	2b05      	cmp	r3, #5
 800a844:	d826      	bhi.n	800a894 <UART_SetConfig+0x260>
 800a846:	a201      	add	r2, pc, #4	; (adr r2, 800a84c <UART_SetConfig+0x218>)
 800a848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a84c:	0800a865 	.word	0x0800a865
 800a850:	0800a86d 	.word	0x0800a86d
 800a854:	0800a875 	.word	0x0800a875
 800a858:	0800a87d 	.word	0x0800a87d
 800a85c:	0800a885 	.word	0x0800a885
 800a860:	0800a88d 	.word	0x0800a88d
 800a864:	2300      	movs	r3, #0
 800a866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a86a:	e1b6      	b.n	800abda <UART_SetConfig+0x5a6>
 800a86c:	2304      	movs	r3, #4
 800a86e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a872:	e1b2      	b.n	800abda <UART_SetConfig+0x5a6>
 800a874:	2308      	movs	r3, #8
 800a876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a87a:	e1ae      	b.n	800abda <UART_SetConfig+0x5a6>
 800a87c:	2310      	movs	r3, #16
 800a87e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a882:	e1aa      	b.n	800abda <UART_SetConfig+0x5a6>
 800a884:	2320      	movs	r3, #32
 800a886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a88a:	e1a6      	b.n	800abda <UART_SetConfig+0x5a6>
 800a88c:	2340      	movs	r3, #64	; 0x40
 800a88e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a892:	e1a2      	b.n	800abda <UART_SetConfig+0x5a6>
 800a894:	2380      	movs	r3, #128	; 0x80
 800a896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a89a:	e19e      	b.n	800abda <UART_SetConfig+0x5a6>
 800a89c:	697b      	ldr	r3, [r7, #20]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	4a35      	ldr	r2, [pc, #212]	; (800a978 <UART_SetConfig+0x344>)
 800a8a2:	4293      	cmp	r3, r2
 800a8a4:	d130      	bne.n	800a908 <UART_SetConfig+0x2d4>
 800a8a6:	4b31      	ldr	r3, [pc, #196]	; (800a96c <UART_SetConfig+0x338>)
 800a8a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8aa:	f003 0307 	and.w	r3, r3, #7
 800a8ae:	2b05      	cmp	r3, #5
 800a8b0:	d826      	bhi.n	800a900 <UART_SetConfig+0x2cc>
 800a8b2:	a201      	add	r2, pc, #4	; (adr r2, 800a8b8 <UART_SetConfig+0x284>)
 800a8b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8b8:	0800a8d1 	.word	0x0800a8d1
 800a8bc:	0800a8d9 	.word	0x0800a8d9
 800a8c0:	0800a8e1 	.word	0x0800a8e1
 800a8c4:	0800a8e9 	.word	0x0800a8e9
 800a8c8:	0800a8f1 	.word	0x0800a8f1
 800a8cc:	0800a8f9 	.word	0x0800a8f9
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8d6:	e180      	b.n	800abda <UART_SetConfig+0x5a6>
 800a8d8:	2304      	movs	r3, #4
 800a8da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8de:	e17c      	b.n	800abda <UART_SetConfig+0x5a6>
 800a8e0:	2308      	movs	r3, #8
 800a8e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8e6:	e178      	b.n	800abda <UART_SetConfig+0x5a6>
 800a8e8:	2310      	movs	r3, #16
 800a8ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8ee:	e174      	b.n	800abda <UART_SetConfig+0x5a6>
 800a8f0:	2320      	movs	r3, #32
 800a8f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8f6:	e170      	b.n	800abda <UART_SetConfig+0x5a6>
 800a8f8:	2340      	movs	r3, #64	; 0x40
 800a8fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8fe:	e16c      	b.n	800abda <UART_SetConfig+0x5a6>
 800a900:	2380      	movs	r3, #128	; 0x80
 800a902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a906:	e168      	b.n	800abda <UART_SetConfig+0x5a6>
 800a908:	697b      	ldr	r3, [r7, #20]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	4a1b      	ldr	r2, [pc, #108]	; (800a97c <UART_SetConfig+0x348>)
 800a90e:	4293      	cmp	r3, r2
 800a910:	d142      	bne.n	800a998 <UART_SetConfig+0x364>
 800a912:	4b16      	ldr	r3, [pc, #88]	; (800a96c <UART_SetConfig+0x338>)
 800a914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a916:	f003 0307 	and.w	r3, r3, #7
 800a91a:	2b05      	cmp	r3, #5
 800a91c:	d838      	bhi.n	800a990 <UART_SetConfig+0x35c>
 800a91e:	a201      	add	r2, pc, #4	; (adr r2, 800a924 <UART_SetConfig+0x2f0>)
 800a920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a924:	0800a93d 	.word	0x0800a93d
 800a928:	0800a945 	.word	0x0800a945
 800a92c:	0800a94d 	.word	0x0800a94d
 800a930:	0800a955 	.word	0x0800a955
 800a934:	0800a981 	.word	0x0800a981
 800a938:	0800a989 	.word	0x0800a989
 800a93c:	2300      	movs	r3, #0
 800a93e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a942:	e14a      	b.n	800abda <UART_SetConfig+0x5a6>
 800a944:	2304      	movs	r3, #4
 800a946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a94a:	e146      	b.n	800abda <UART_SetConfig+0x5a6>
 800a94c:	2308      	movs	r3, #8
 800a94e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a952:	e142      	b.n	800abda <UART_SetConfig+0x5a6>
 800a954:	2310      	movs	r3, #16
 800a956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a95a:	e13e      	b.n	800abda <UART_SetConfig+0x5a6>
 800a95c:	cfff69f3 	.word	0xcfff69f3
 800a960:	58000c00 	.word	0x58000c00
 800a964:	11fff4ff 	.word	0x11fff4ff
 800a968:	40011000 	.word	0x40011000
 800a96c:	58024400 	.word	0x58024400
 800a970:	40004400 	.word	0x40004400
 800a974:	40004800 	.word	0x40004800
 800a978:	40004c00 	.word	0x40004c00
 800a97c:	40005000 	.word	0x40005000
 800a980:	2320      	movs	r3, #32
 800a982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a986:	e128      	b.n	800abda <UART_SetConfig+0x5a6>
 800a988:	2340      	movs	r3, #64	; 0x40
 800a98a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a98e:	e124      	b.n	800abda <UART_SetConfig+0x5a6>
 800a990:	2380      	movs	r3, #128	; 0x80
 800a992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a996:	e120      	b.n	800abda <UART_SetConfig+0x5a6>
 800a998:	697b      	ldr	r3, [r7, #20]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	4acb      	ldr	r2, [pc, #812]	; (800accc <UART_SetConfig+0x698>)
 800a99e:	4293      	cmp	r3, r2
 800a9a0:	d176      	bne.n	800aa90 <UART_SetConfig+0x45c>
 800a9a2:	4bcb      	ldr	r3, [pc, #812]	; (800acd0 <UART_SetConfig+0x69c>)
 800a9a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a9aa:	2b28      	cmp	r3, #40	; 0x28
 800a9ac:	d86c      	bhi.n	800aa88 <UART_SetConfig+0x454>
 800a9ae:	a201      	add	r2, pc, #4	; (adr r2, 800a9b4 <UART_SetConfig+0x380>)
 800a9b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9b4:	0800aa59 	.word	0x0800aa59
 800a9b8:	0800aa89 	.word	0x0800aa89
 800a9bc:	0800aa89 	.word	0x0800aa89
 800a9c0:	0800aa89 	.word	0x0800aa89
 800a9c4:	0800aa89 	.word	0x0800aa89
 800a9c8:	0800aa89 	.word	0x0800aa89
 800a9cc:	0800aa89 	.word	0x0800aa89
 800a9d0:	0800aa89 	.word	0x0800aa89
 800a9d4:	0800aa61 	.word	0x0800aa61
 800a9d8:	0800aa89 	.word	0x0800aa89
 800a9dc:	0800aa89 	.word	0x0800aa89
 800a9e0:	0800aa89 	.word	0x0800aa89
 800a9e4:	0800aa89 	.word	0x0800aa89
 800a9e8:	0800aa89 	.word	0x0800aa89
 800a9ec:	0800aa89 	.word	0x0800aa89
 800a9f0:	0800aa89 	.word	0x0800aa89
 800a9f4:	0800aa69 	.word	0x0800aa69
 800a9f8:	0800aa89 	.word	0x0800aa89
 800a9fc:	0800aa89 	.word	0x0800aa89
 800aa00:	0800aa89 	.word	0x0800aa89
 800aa04:	0800aa89 	.word	0x0800aa89
 800aa08:	0800aa89 	.word	0x0800aa89
 800aa0c:	0800aa89 	.word	0x0800aa89
 800aa10:	0800aa89 	.word	0x0800aa89
 800aa14:	0800aa71 	.word	0x0800aa71
 800aa18:	0800aa89 	.word	0x0800aa89
 800aa1c:	0800aa89 	.word	0x0800aa89
 800aa20:	0800aa89 	.word	0x0800aa89
 800aa24:	0800aa89 	.word	0x0800aa89
 800aa28:	0800aa89 	.word	0x0800aa89
 800aa2c:	0800aa89 	.word	0x0800aa89
 800aa30:	0800aa89 	.word	0x0800aa89
 800aa34:	0800aa79 	.word	0x0800aa79
 800aa38:	0800aa89 	.word	0x0800aa89
 800aa3c:	0800aa89 	.word	0x0800aa89
 800aa40:	0800aa89 	.word	0x0800aa89
 800aa44:	0800aa89 	.word	0x0800aa89
 800aa48:	0800aa89 	.word	0x0800aa89
 800aa4c:	0800aa89 	.word	0x0800aa89
 800aa50:	0800aa89 	.word	0x0800aa89
 800aa54:	0800aa81 	.word	0x0800aa81
 800aa58:	2301      	movs	r3, #1
 800aa5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa5e:	e0bc      	b.n	800abda <UART_SetConfig+0x5a6>
 800aa60:	2304      	movs	r3, #4
 800aa62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa66:	e0b8      	b.n	800abda <UART_SetConfig+0x5a6>
 800aa68:	2308      	movs	r3, #8
 800aa6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa6e:	e0b4      	b.n	800abda <UART_SetConfig+0x5a6>
 800aa70:	2310      	movs	r3, #16
 800aa72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa76:	e0b0      	b.n	800abda <UART_SetConfig+0x5a6>
 800aa78:	2320      	movs	r3, #32
 800aa7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa7e:	e0ac      	b.n	800abda <UART_SetConfig+0x5a6>
 800aa80:	2340      	movs	r3, #64	; 0x40
 800aa82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa86:	e0a8      	b.n	800abda <UART_SetConfig+0x5a6>
 800aa88:	2380      	movs	r3, #128	; 0x80
 800aa8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa8e:	e0a4      	b.n	800abda <UART_SetConfig+0x5a6>
 800aa90:	697b      	ldr	r3, [r7, #20]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	4a8f      	ldr	r2, [pc, #572]	; (800acd4 <UART_SetConfig+0x6a0>)
 800aa96:	4293      	cmp	r3, r2
 800aa98:	d130      	bne.n	800aafc <UART_SetConfig+0x4c8>
 800aa9a:	4b8d      	ldr	r3, [pc, #564]	; (800acd0 <UART_SetConfig+0x69c>)
 800aa9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa9e:	f003 0307 	and.w	r3, r3, #7
 800aaa2:	2b05      	cmp	r3, #5
 800aaa4:	d826      	bhi.n	800aaf4 <UART_SetConfig+0x4c0>
 800aaa6:	a201      	add	r2, pc, #4	; (adr r2, 800aaac <UART_SetConfig+0x478>)
 800aaa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaac:	0800aac5 	.word	0x0800aac5
 800aab0:	0800aacd 	.word	0x0800aacd
 800aab4:	0800aad5 	.word	0x0800aad5
 800aab8:	0800aadd 	.word	0x0800aadd
 800aabc:	0800aae5 	.word	0x0800aae5
 800aac0:	0800aaed 	.word	0x0800aaed
 800aac4:	2300      	movs	r3, #0
 800aac6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aaca:	e086      	b.n	800abda <UART_SetConfig+0x5a6>
 800aacc:	2304      	movs	r3, #4
 800aace:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aad2:	e082      	b.n	800abda <UART_SetConfig+0x5a6>
 800aad4:	2308      	movs	r3, #8
 800aad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aada:	e07e      	b.n	800abda <UART_SetConfig+0x5a6>
 800aadc:	2310      	movs	r3, #16
 800aade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aae2:	e07a      	b.n	800abda <UART_SetConfig+0x5a6>
 800aae4:	2320      	movs	r3, #32
 800aae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aaea:	e076      	b.n	800abda <UART_SetConfig+0x5a6>
 800aaec:	2340      	movs	r3, #64	; 0x40
 800aaee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aaf2:	e072      	b.n	800abda <UART_SetConfig+0x5a6>
 800aaf4:	2380      	movs	r3, #128	; 0x80
 800aaf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aafa:	e06e      	b.n	800abda <UART_SetConfig+0x5a6>
 800aafc:	697b      	ldr	r3, [r7, #20]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	4a75      	ldr	r2, [pc, #468]	; (800acd8 <UART_SetConfig+0x6a4>)
 800ab02:	4293      	cmp	r3, r2
 800ab04:	d130      	bne.n	800ab68 <UART_SetConfig+0x534>
 800ab06:	4b72      	ldr	r3, [pc, #456]	; (800acd0 <UART_SetConfig+0x69c>)
 800ab08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab0a:	f003 0307 	and.w	r3, r3, #7
 800ab0e:	2b05      	cmp	r3, #5
 800ab10:	d826      	bhi.n	800ab60 <UART_SetConfig+0x52c>
 800ab12:	a201      	add	r2, pc, #4	; (adr r2, 800ab18 <UART_SetConfig+0x4e4>)
 800ab14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab18:	0800ab31 	.word	0x0800ab31
 800ab1c:	0800ab39 	.word	0x0800ab39
 800ab20:	0800ab41 	.word	0x0800ab41
 800ab24:	0800ab49 	.word	0x0800ab49
 800ab28:	0800ab51 	.word	0x0800ab51
 800ab2c:	0800ab59 	.word	0x0800ab59
 800ab30:	2300      	movs	r3, #0
 800ab32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab36:	e050      	b.n	800abda <UART_SetConfig+0x5a6>
 800ab38:	2304      	movs	r3, #4
 800ab3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab3e:	e04c      	b.n	800abda <UART_SetConfig+0x5a6>
 800ab40:	2308      	movs	r3, #8
 800ab42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab46:	e048      	b.n	800abda <UART_SetConfig+0x5a6>
 800ab48:	2310      	movs	r3, #16
 800ab4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab4e:	e044      	b.n	800abda <UART_SetConfig+0x5a6>
 800ab50:	2320      	movs	r3, #32
 800ab52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab56:	e040      	b.n	800abda <UART_SetConfig+0x5a6>
 800ab58:	2340      	movs	r3, #64	; 0x40
 800ab5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab5e:	e03c      	b.n	800abda <UART_SetConfig+0x5a6>
 800ab60:	2380      	movs	r3, #128	; 0x80
 800ab62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab66:	e038      	b.n	800abda <UART_SetConfig+0x5a6>
 800ab68:	697b      	ldr	r3, [r7, #20]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	4a5b      	ldr	r2, [pc, #364]	; (800acdc <UART_SetConfig+0x6a8>)
 800ab6e:	4293      	cmp	r3, r2
 800ab70:	d130      	bne.n	800abd4 <UART_SetConfig+0x5a0>
 800ab72:	4b57      	ldr	r3, [pc, #348]	; (800acd0 <UART_SetConfig+0x69c>)
 800ab74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab76:	f003 0307 	and.w	r3, r3, #7
 800ab7a:	2b05      	cmp	r3, #5
 800ab7c:	d826      	bhi.n	800abcc <UART_SetConfig+0x598>
 800ab7e:	a201      	add	r2, pc, #4	; (adr r2, 800ab84 <UART_SetConfig+0x550>)
 800ab80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab84:	0800ab9d 	.word	0x0800ab9d
 800ab88:	0800aba5 	.word	0x0800aba5
 800ab8c:	0800abad 	.word	0x0800abad
 800ab90:	0800abb5 	.word	0x0800abb5
 800ab94:	0800abbd 	.word	0x0800abbd
 800ab98:	0800abc5 	.word	0x0800abc5
 800ab9c:	2302      	movs	r3, #2
 800ab9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aba2:	e01a      	b.n	800abda <UART_SetConfig+0x5a6>
 800aba4:	2304      	movs	r3, #4
 800aba6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abaa:	e016      	b.n	800abda <UART_SetConfig+0x5a6>
 800abac:	2308      	movs	r3, #8
 800abae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abb2:	e012      	b.n	800abda <UART_SetConfig+0x5a6>
 800abb4:	2310      	movs	r3, #16
 800abb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abba:	e00e      	b.n	800abda <UART_SetConfig+0x5a6>
 800abbc:	2320      	movs	r3, #32
 800abbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abc2:	e00a      	b.n	800abda <UART_SetConfig+0x5a6>
 800abc4:	2340      	movs	r3, #64	; 0x40
 800abc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abca:	e006      	b.n	800abda <UART_SetConfig+0x5a6>
 800abcc:	2380      	movs	r3, #128	; 0x80
 800abce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abd2:	e002      	b.n	800abda <UART_SetConfig+0x5a6>
 800abd4:	2380      	movs	r3, #128	; 0x80
 800abd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800abda:	697b      	ldr	r3, [r7, #20]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	4a3f      	ldr	r2, [pc, #252]	; (800acdc <UART_SetConfig+0x6a8>)
 800abe0:	4293      	cmp	r3, r2
 800abe2:	f040 80f8 	bne.w	800add6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800abe6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800abea:	2b20      	cmp	r3, #32
 800abec:	dc46      	bgt.n	800ac7c <UART_SetConfig+0x648>
 800abee:	2b02      	cmp	r3, #2
 800abf0:	f2c0 8082 	blt.w	800acf8 <UART_SetConfig+0x6c4>
 800abf4:	3b02      	subs	r3, #2
 800abf6:	2b1e      	cmp	r3, #30
 800abf8:	d87e      	bhi.n	800acf8 <UART_SetConfig+0x6c4>
 800abfa:	a201      	add	r2, pc, #4	; (adr r2, 800ac00 <UART_SetConfig+0x5cc>)
 800abfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac00:	0800ac83 	.word	0x0800ac83
 800ac04:	0800acf9 	.word	0x0800acf9
 800ac08:	0800ac8b 	.word	0x0800ac8b
 800ac0c:	0800acf9 	.word	0x0800acf9
 800ac10:	0800acf9 	.word	0x0800acf9
 800ac14:	0800acf9 	.word	0x0800acf9
 800ac18:	0800ac9b 	.word	0x0800ac9b
 800ac1c:	0800acf9 	.word	0x0800acf9
 800ac20:	0800acf9 	.word	0x0800acf9
 800ac24:	0800acf9 	.word	0x0800acf9
 800ac28:	0800acf9 	.word	0x0800acf9
 800ac2c:	0800acf9 	.word	0x0800acf9
 800ac30:	0800acf9 	.word	0x0800acf9
 800ac34:	0800acf9 	.word	0x0800acf9
 800ac38:	0800acab 	.word	0x0800acab
 800ac3c:	0800acf9 	.word	0x0800acf9
 800ac40:	0800acf9 	.word	0x0800acf9
 800ac44:	0800acf9 	.word	0x0800acf9
 800ac48:	0800acf9 	.word	0x0800acf9
 800ac4c:	0800acf9 	.word	0x0800acf9
 800ac50:	0800acf9 	.word	0x0800acf9
 800ac54:	0800acf9 	.word	0x0800acf9
 800ac58:	0800acf9 	.word	0x0800acf9
 800ac5c:	0800acf9 	.word	0x0800acf9
 800ac60:	0800acf9 	.word	0x0800acf9
 800ac64:	0800acf9 	.word	0x0800acf9
 800ac68:	0800acf9 	.word	0x0800acf9
 800ac6c:	0800acf9 	.word	0x0800acf9
 800ac70:	0800acf9 	.word	0x0800acf9
 800ac74:	0800acf9 	.word	0x0800acf9
 800ac78:	0800aceb 	.word	0x0800aceb
 800ac7c:	2b40      	cmp	r3, #64	; 0x40
 800ac7e:	d037      	beq.n	800acf0 <UART_SetConfig+0x6bc>
 800ac80:	e03a      	b.n	800acf8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ac82:	f7fd fe17 	bl	80088b4 <HAL_RCCEx_GetD3PCLK1Freq>
 800ac86:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ac88:	e03c      	b.n	800ad04 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac8e:	4618      	mov	r0, r3
 800ac90:	f7fd fe26 	bl	80088e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ac94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac98:	e034      	b.n	800ad04 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac9a:	f107 0318 	add.w	r3, r7, #24
 800ac9e:	4618      	mov	r0, r3
 800aca0:	f7fd ff72 	bl	8008b88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aca4:	69fb      	ldr	r3, [r7, #28]
 800aca6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aca8:	e02c      	b.n	800ad04 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800acaa:	4b09      	ldr	r3, [pc, #36]	; (800acd0 <UART_SetConfig+0x69c>)
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	f003 0320 	and.w	r3, r3, #32
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d016      	beq.n	800ace4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800acb6:	4b06      	ldr	r3, [pc, #24]	; (800acd0 <UART_SetConfig+0x69c>)
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	08db      	lsrs	r3, r3, #3
 800acbc:	f003 0303 	and.w	r3, r3, #3
 800acc0:	4a07      	ldr	r2, [pc, #28]	; (800ace0 <UART_SetConfig+0x6ac>)
 800acc2:	fa22 f303 	lsr.w	r3, r2, r3
 800acc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800acc8:	e01c      	b.n	800ad04 <UART_SetConfig+0x6d0>
 800acca:	bf00      	nop
 800accc:	40011400 	.word	0x40011400
 800acd0:	58024400 	.word	0x58024400
 800acd4:	40007800 	.word	0x40007800
 800acd8:	40007c00 	.word	0x40007c00
 800acdc:	58000c00 	.word	0x58000c00
 800ace0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800ace4:	4b9d      	ldr	r3, [pc, #628]	; (800af5c <UART_SetConfig+0x928>)
 800ace6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ace8:	e00c      	b.n	800ad04 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800acea:	4b9d      	ldr	r3, [pc, #628]	; (800af60 <UART_SetConfig+0x92c>)
 800acec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acee:	e009      	b.n	800ad04 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800acf0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800acf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acf6:	e005      	b.n	800ad04 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800acf8:	2300      	movs	r3, #0
 800acfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800acfc:	2301      	movs	r3, #1
 800acfe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ad02:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ad04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	f000 81de 	beq.w	800b0c8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ad0c:	697b      	ldr	r3, [r7, #20]
 800ad0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad10:	4a94      	ldr	r2, [pc, #592]	; (800af64 <UART_SetConfig+0x930>)
 800ad12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad16:	461a      	mov	r2, r3
 800ad18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad1a:	fbb3 f3f2 	udiv	r3, r3, r2
 800ad1e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ad20:	697b      	ldr	r3, [r7, #20]
 800ad22:	685a      	ldr	r2, [r3, #4]
 800ad24:	4613      	mov	r3, r2
 800ad26:	005b      	lsls	r3, r3, #1
 800ad28:	4413      	add	r3, r2
 800ad2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad2c:	429a      	cmp	r2, r3
 800ad2e:	d305      	bcc.n	800ad3c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ad30:	697b      	ldr	r3, [r7, #20]
 800ad32:	685b      	ldr	r3, [r3, #4]
 800ad34:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ad36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad38:	429a      	cmp	r2, r3
 800ad3a:	d903      	bls.n	800ad44 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800ad3c:	2301      	movs	r3, #1
 800ad3e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ad42:	e1c1      	b.n	800b0c8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad46:	2200      	movs	r2, #0
 800ad48:	60bb      	str	r3, [r7, #8]
 800ad4a:	60fa      	str	r2, [r7, #12]
 800ad4c:	697b      	ldr	r3, [r7, #20]
 800ad4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad50:	4a84      	ldr	r2, [pc, #528]	; (800af64 <UART_SetConfig+0x930>)
 800ad52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad56:	b29b      	uxth	r3, r3
 800ad58:	2200      	movs	r2, #0
 800ad5a:	603b      	str	r3, [r7, #0]
 800ad5c:	607a      	str	r2, [r7, #4]
 800ad5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad62:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ad66:	f7f5 fab7 	bl	80002d8 <__aeabi_uldivmod>
 800ad6a:	4602      	mov	r2, r0
 800ad6c:	460b      	mov	r3, r1
 800ad6e:	4610      	mov	r0, r2
 800ad70:	4619      	mov	r1, r3
 800ad72:	f04f 0200 	mov.w	r2, #0
 800ad76:	f04f 0300 	mov.w	r3, #0
 800ad7a:	020b      	lsls	r3, r1, #8
 800ad7c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ad80:	0202      	lsls	r2, r0, #8
 800ad82:	6979      	ldr	r1, [r7, #20]
 800ad84:	6849      	ldr	r1, [r1, #4]
 800ad86:	0849      	lsrs	r1, r1, #1
 800ad88:	2000      	movs	r0, #0
 800ad8a:	460c      	mov	r4, r1
 800ad8c:	4605      	mov	r5, r0
 800ad8e:	eb12 0804 	adds.w	r8, r2, r4
 800ad92:	eb43 0905 	adc.w	r9, r3, r5
 800ad96:	697b      	ldr	r3, [r7, #20]
 800ad98:	685b      	ldr	r3, [r3, #4]
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	469a      	mov	sl, r3
 800ad9e:	4693      	mov	fp, r2
 800ada0:	4652      	mov	r2, sl
 800ada2:	465b      	mov	r3, fp
 800ada4:	4640      	mov	r0, r8
 800ada6:	4649      	mov	r1, r9
 800ada8:	f7f5 fa96 	bl	80002d8 <__aeabi_uldivmod>
 800adac:	4602      	mov	r2, r0
 800adae:	460b      	mov	r3, r1
 800adb0:	4613      	mov	r3, r2
 800adb2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800adb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800adba:	d308      	bcc.n	800adce <UART_SetConfig+0x79a>
 800adbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800adc2:	d204      	bcs.n	800adce <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800adc4:	697b      	ldr	r3, [r7, #20]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800adca:	60da      	str	r2, [r3, #12]
 800adcc:	e17c      	b.n	800b0c8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800adce:	2301      	movs	r3, #1
 800add0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800add4:	e178      	b.n	800b0c8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800add6:	697b      	ldr	r3, [r7, #20]
 800add8:	69db      	ldr	r3, [r3, #28]
 800adda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800adde:	f040 80c5 	bne.w	800af6c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800ade2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ade6:	2b20      	cmp	r3, #32
 800ade8:	dc48      	bgt.n	800ae7c <UART_SetConfig+0x848>
 800adea:	2b00      	cmp	r3, #0
 800adec:	db7b      	blt.n	800aee6 <UART_SetConfig+0x8b2>
 800adee:	2b20      	cmp	r3, #32
 800adf0:	d879      	bhi.n	800aee6 <UART_SetConfig+0x8b2>
 800adf2:	a201      	add	r2, pc, #4	; (adr r2, 800adf8 <UART_SetConfig+0x7c4>)
 800adf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adf8:	0800ae83 	.word	0x0800ae83
 800adfc:	0800ae8b 	.word	0x0800ae8b
 800ae00:	0800aee7 	.word	0x0800aee7
 800ae04:	0800aee7 	.word	0x0800aee7
 800ae08:	0800ae93 	.word	0x0800ae93
 800ae0c:	0800aee7 	.word	0x0800aee7
 800ae10:	0800aee7 	.word	0x0800aee7
 800ae14:	0800aee7 	.word	0x0800aee7
 800ae18:	0800aea3 	.word	0x0800aea3
 800ae1c:	0800aee7 	.word	0x0800aee7
 800ae20:	0800aee7 	.word	0x0800aee7
 800ae24:	0800aee7 	.word	0x0800aee7
 800ae28:	0800aee7 	.word	0x0800aee7
 800ae2c:	0800aee7 	.word	0x0800aee7
 800ae30:	0800aee7 	.word	0x0800aee7
 800ae34:	0800aee7 	.word	0x0800aee7
 800ae38:	0800aeb3 	.word	0x0800aeb3
 800ae3c:	0800aee7 	.word	0x0800aee7
 800ae40:	0800aee7 	.word	0x0800aee7
 800ae44:	0800aee7 	.word	0x0800aee7
 800ae48:	0800aee7 	.word	0x0800aee7
 800ae4c:	0800aee7 	.word	0x0800aee7
 800ae50:	0800aee7 	.word	0x0800aee7
 800ae54:	0800aee7 	.word	0x0800aee7
 800ae58:	0800aee7 	.word	0x0800aee7
 800ae5c:	0800aee7 	.word	0x0800aee7
 800ae60:	0800aee7 	.word	0x0800aee7
 800ae64:	0800aee7 	.word	0x0800aee7
 800ae68:	0800aee7 	.word	0x0800aee7
 800ae6c:	0800aee7 	.word	0x0800aee7
 800ae70:	0800aee7 	.word	0x0800aee7
 800ae74:	0800aee7 	.word	0x0800aee7
 800ae78:	0800aed9 	.word	0x0800aed9
 800ae7c:	2b40      	cmp	r3, #64	; 0x40
 800ae7e:	d02e      	beq.n	800aede <UART_SetConfig+0x8aa>
 800ae80:	e031      	b.n	800aee6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ae82:	f7fb fd61 	bl	8006948 <HAL_RCC_GetPCLK1Freq>
 800ae86:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ae88:	e033      	b.n	800aef2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ae8a:	f7fb fd73 	bl	8006974 <HAL_RCC_GetPCLK2Freq>
 800ae8e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ae90:	e02f      	b.n	800aef2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ae96:	4618      	mov	r0, r3
 800ae98:	f7fd fd22 	bl	80088e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ae9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aea0:	e027      	b.n	800aef2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aea2:	f107 0318 	add.w	r3, r7, #24
 800aea6:	4618      	mov	r0, r3
 800aea8:	f7fd fe6e 	bl	8008b88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aeac:	69fb      	ldr	r3, [r7, #28]
 800aeae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aeb0:	e01f      	b.n	800aef2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aeb2:	4b2d      	ldr	r3, [pc, #180]	; (800af68 <UART_SetConfig+0x934>)
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	f003 0320 	and.w	r3, r3, #32
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d009      	beq.n	800aed2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aebe:	4b2a      	ldr	r3, [pc, #168]	; (800af68 <UART_SetConfig+0x934>)
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	08db      	lsrs	r3, r3, #3
 800aec4:	f003 0303 	and.w	r3, r3, #3
 800aec8:	4a24      	ldr	r2, [pc, #144]	; (800af5c <UART_SetConfig+0x928>)
 800aeca:	fa22 f303 	lsr.w	r3, r2, r3
 800aece:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aed0:	e00f      	b.n	800aef2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800aed2:	4b22      	ldr	r3, [pc, #136]	; (800af5c <UART_SetConfig+0x928>)
 800aed4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aed6:	e00c      	b.n	800aef2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800aed8:	4b21      	ldr	r3, [pc, #132]	; (800af60 <UART_SetConfig+0x92c>)
 800aeda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aedc:	e009      	b.n	800aef2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aede:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aee2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aee4:	e005      	b.n	800aef2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800aee6:	2300      	movs	r3, #0
 800aee8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800aeea:	2301      	movs	r3, #1
 800aeec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800aef0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800aef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	f000 80e7 	beq.w	800b0c8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aefa:	697b      	ldr	r3, [r7, #20]
 800aefc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aefe:	4a19      	ldr	r2, [pc, #100]	; (800af64 <UART_SetConfig+0x930>)
 800af00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af04:	461a      	mov	r2, r3
 800af06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af08:	fbb3 f3f2 	udiv	r3, r3, r2
 800af0c:	005a      	lsls	r2, r3, #1
 800af0e:	697b      	ldr	r3, [r7, #20]
 800af10:	685b      	ldr	r3, [r3, #4]
 800af12:	085b      	lsrs	r3, r3, #1
 800af14:	441a      	add	r2, r3
 800af16:	697b      	ldr	r3, [r7, #20]
 800af18:	685b      	ldr	r3, [r3, #4]
 800af1a:	fbb2 f3f3 	udiv	r3, r2, r3
 800af1e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af22:	2b0f      	cmp	r3, #15
 800af24:	d916      	bls.n	800af54 <UART_SetConfig+0x920>
 800af26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af2c:	d212      	bcs.n	800af54 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800af2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af30:	b29b      	uxth	r3, r3
 800af32:	f023 030f 	bic.w	r3, r3, #15
 800af36:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800af38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af3a:	085b      	lsrs	r3, r3, #1
 800af3c:	b29b      	uxth	r3, r3
 800af3e:	f003 0307 	and.w	r3, r3, #7
 800af42:	b29a      	uxth	r2, r3
 800af44:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800af46:	4313      	orrs	r3, r2
 800af48:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800af4a:	697b      	ldr	r3, [r7, #20]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800af50:	60da      	str	r2, [r3, #12]
 800af52:	e0b9      	b.n	800b0c8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800af54:	2301      	movs	r3, #1
 800af56:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800af5a:	e0b5      	b.n	800b0c8 <UART_SetConfig+0xa94>
 800af5c:	03d09000 	.word	0x03d09000
 800af60:	003d0900 	.word	0x003d0900
 800af64:	0800bfd0 	.word	0x0800bfd0
 800af68:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800af6c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800af70:	2b20      	cmp	r3, #32
 800af72:	dc49      	bgt.n	800b008 <UART_SetConfig+0x9d4>
 800af74:	2b00      	cmp	r3, #0
 800af76:	db7c      	blt.n	800b072 <UART_SetConfig+0xa3e>
 800af78:	2b20      	cmp	r3, #32
 800af7a:	d87a      	bhi.n	800b072 <UART_SetConfig+0xa3e>
 800af7c:	a201      	add	r2, pc, #4	; (adr r2, 800af84 <UART_SetConfig+0x950>)
 800af7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af82:	bf00      	nop
 800af84:	0800b00f 	.word	0x0800b00f
 800af88:	0800b017 	.word	0x0800b017
 800af8c:	0800b073 	.word	0x0800b073
 800af90:	0800b073 	.word	0x0800b073
 800af94:	0800b01f 	.word	0x0800b01f
 800af98:	0800b073 	.word	0x0800b073
 800af9c:	0800b073 	.word	0x0800b073
 800afa0:	0800b073 	.word	0x0800b073
 800afa4:	0800b02f 	.word	0x0800b02f
 800afa8:	0800b073 	.word	0x0800b073
 800afac:	0800b073 	.word	0x0800b073
 800afb0:	0800b073 	.word	0x0800b073
 800afb4:	0800b073 	.word	0x0800b073
 800afb8:	0800b073 	.word	0x0800b073
 800afbc:	0800b073 	.word	0x0800b073
 800afc0:	0800b073 	.word	0x0800b073
 800afc4:	0800b03f 	.word	0x0800b03f
 800afc8:	0800b073 	.word	0x0800b073
 800afcc:	0800b073 	.word	0x0800b073
 800afd0:	0800b073 	.word	0x0800b073
 800afd4:	0800b073 	.word	0x0800b073
 800afd8:	0800b073 	.word	0x0800b073
 800afdc:	0800b073 	.word	0x0800b073
 800afe0:	0800b073 	.word	0x0800b073
 800afe4:	0800b073 	.word	0x0800b073
 800afe8:	0800b073 	.word	0x0800b073
 800afec:	0800b073 	.word	0x0800b073
 800aff0:	0800b073 	.word	0x0800b073
 800aff4:	0800b073 	.word	0x0800b073
 800aff8:	0800b073 	.word	0x0800b073
 800affc:	0800b073 	.word	0x0800b073
 800b000:	0800b073 	.word	0x0800b073
 800b004:	0800b065 	.word	0x0800b065
 800b008:	2b40      	cmp	r3, #64	; 0x40
 800b00a:	d02e      	beq.n	800b06a <UART_SetConfig+0xa36>
 800b00c:	e031      	b.n	800b072 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b00e:	f7fb fc9b 	bl	8006948 <HAL_RCC_GetPCLK1Freq>
 800b012:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b014:	e033      	b.n	800b07e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b016:	f7fb fcad 	bl	8006974 <HAL_RCC_GetPCLK2Freq>
 800b01a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b01c:	e02f      	b.n	800b07e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b01e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b022:	4618      	mov	r0, r3
 800b024:	f7fd fc5c 	bl	80088e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b02a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b02c:	e027      	b.n	800b07e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b02e:	f107 0318 	add.w	r3, r7, #24
 800b032:	4618      	mov	r0, r3
 800b034:	f7fd fda8 	bl	8008b88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b038:	69fb      	ldr	r3, [r7, #28]
 800b03a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b03c:	e01f      	b.n	800b07e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b03e:	4b2d      	ldr	r3, [pc, #180]	; (800b0f4 <UART_SetConfig+0xac0>)
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	f003 0320 	and.w	r3, r3, #32
 800b046:	2b00      	cmp	r3, #0
 800b048:	d009      	beq.n	800b05e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b04a:	4b2a      	ldr	r3, [pc, #168]	; (800b0f4 <UART_SetConfig+0xac0>)
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	08db      	lsrs	r3, r3, #3
 800b050:	f003 0303 	and.w	r3, r3, #3
 800b054:	4a28      	ldr	r2, [pc, #160]	; (800b0f8 <UART_SetConfig+0xac4>)
 800b056:	fa22 f303 	lsr.w	r3, r2, r3
 800b05a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b05c:	e00f      	b.n	800b07e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800b05e:	4b26      	ldr	r3, [pc, #152]	; (800b0f8 <UART_SetConfig+0xac4>)
 800b060:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b062:	e00c      	b.n	800b07e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b064:	4b25      	ldr	r3, [pc, #148]	; (800b0fc <UART_SetConfig+0xac8>)
 800b066:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b068:	e009      	b.n	800b07e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b06a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b06e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b070:	e005      	b.n	800b07e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800b072:	2300      	movs	r3, #0
 800b074:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b076:	2301      	movs	r3, #1
 800b078:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b07c:	bf00      	nop
    }

    if (pclk != 0U)
 800b07e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b080:	2b00      	cmp	r3, #0
 800b082:	d021      	beq.n	800b0c8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b084:	697b      	ldr	r3, [r7, #20]
 800b086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b088:	4a1d      	ldr	r2, [pc, #116]	; (800b100 <UART_SetConfig+0xacc>)
 800b08a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b08e:	461a      	mov	r2, r3
 800b090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b092:	fbb3 f2f2 	udiv	r2, r3, r2
 800b096:	697b      	ldr	r3, [r7, #20]
 800b098:	685b      	ldr	r3, [r3, #4]
 800b09a:	085b      	lsrs	r3, r3, #1
 800b09c:	441a      	add	r2, r3
 800b09e:	697b      	ldr	r3, [r7, #20]
 800b0a0:	685b      	ldr	r3, [r3, #4]
 800b0a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0a6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b0a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0aa:	2b0f      	cmp	r3, #15
 800b0ac:	d909      	bls.n	800b0c2 <UART_SetConfig+0xa8e>
 800b0ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b0b4:	d205      	bcs.n	800b0c2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b0b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0b8:	b29a      	uxth	r2, r3
 800b0ba:	697b      	ldr	r3, [r7, #20]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	60da      	str	r2, [r3, #12]
 800b0c0:	e002      	b.n	800b0c8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b0c2:	2301      	movs	r3, #1
 800b0c4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b0c8:	697b      	ldr	r3, [r7, #20]
 800b0ca:	2201      	movs	r2, #1
 800b0cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b0d0:	697b      	ldr	r3, [r7, #20]
 800b0d2:	2201      	movs	r2, #1
 800b0d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b0d8:	697b      	ldr	r3, [r7, #20]
 800b0da:	2200      	movs	r2, #0
 800b0dc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800b0de:	697b      	ldr	r3, [r7, #20]
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800b0e4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	3748      	adds	r7, #72	; 0x48
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b0f2:	bf00      	nop
 800b0f4:	58024400 	.word	0x58024400
 800b0f8:	03d09000 	.word	0x03d09000
 800b0fc:	003d0900 	.word	0x003d0900
 800b100:	0800bfd0 	.word	0x0800bfd0

0800b104 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b104:	b480      	push	{r7}
 800b106:	b083      	sub	sp, #12
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b110:	f003 0301 	and.w	r3, r3, #1
 800b114:	2b00      	cmp	r3, #0
 800b116:	d00a      	beq.n	800b12e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	685b      	ldr	r3, [r3, #4]
 800b11e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	430a      	orrs	r2, r1
 800b12c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b132:	f003 0302 	and.w	r3, r3, #2
 800b136:	2b00      	cmp	r3, #0
 800b138:	d00a      	beq.n	800b150 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	685b      	ldr	r3, [r3, #4]
 800b140:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	430a      	orrs	r2, r1
 800b14e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b154:	f003 0304 	and.w	r3, r3, #4
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d00a      	beq.n	800b172 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	685b      	ldr	r3, [r3, #4]
 800b162:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	430a      	orrs	r2, r1
 800b170:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b176:	f003 0308 	and.w	r3, r3, #8
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d00a      	beq.n	800b194 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	685b      	ldr	r3, [r3, #4]
 800b184:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	430a      	orrs	r2, r1
 800b192:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b198:	f003 0310 	and.w	r3, r3, #16
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d00a      	beq.n	800b1b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	689b      	ldr	r3, [r3, #8]
 800b1a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	430a      	orrs	r2, r1
 800b1b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1ba:	f003 0320 	and.w	r3, r3, #32
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d00a      	beq.n	800b1d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	689b      	ldr	r3, [r3, #8]
 800b1c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	430a      	orrs	r2, r1
 800b1d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d01a      	beq.n	800b21a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	685b      	ldr	r3, [r3, #4]
 800b1ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	430a      	orrs	r2, r1
 800b1f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b202:	d10a      	bne.n	800b21a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	685b      	ldr	r3, [r3, #4]
 800b20a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	430a      	orrs	r2, r1
 800b218:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b21e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b222:	2b00      	cmp	r3, #0
 800b224:	d00a      	beq.n	800b23c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	685b      	ldr	r3, [r3, #4]
 800b22c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	430a      	orrs	r2, r1
 800b23a:	605a      	str	r2, [r3, #4]
  }
}
 800b23c:	bf00      	nop
 800b23e:	370c      	adds	r7, #12
 800b240:	46bd      	mov	sp, r7
 800b242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b246:	4770      	bx	lr

0800b248 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b098      	sub	sp, #96	; 0x60
 800b24c:	af02      	add	r7, sp, #8
 800b24e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2200      	movs	r2, #0
 800b254:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b258:	f7f7 fc58 	bl	8002b0c <HAL_GetTick>
 800b25c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	f003 0308 	and.w	r3, r3, #8
 800b268:	2b08      	cmp	r3, #8
 800b26a:	d12f      	bne.n	800b2cc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b26c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b270:	9300      	str	r3, [sp, #0]
 800b272:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b274:	2200      	movs	r2, #0
 800b276:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b27a:	6878      	ldr	r0, [r7, #4]
 800b27c:	f000 f88e 	bl	800b39c <UART_WaitOnFlagUntilTimeout>
 800b280:	4603      	mov	r3, r0
 800b282:	2b00      	cmp	r3, #0
 800b284:	d022      	beq.n	800b2cc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b28c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b28e:	e853 3f00 	ldrex	r3, [r3]
 800b292:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b296:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b29a:	653b      	str	r3, [r7, #80]	; 0x50
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	461a      	mov	r2, r3
 800b2a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2a4:	647b      	str	r3, [r7, #68]	; 0x44
 800b2a6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b2aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b2ac:	e841 2300 	strex	r3, r2, [r1]
 800b2b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b2b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d1e6      	bne.n	800b286 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2220      	movs	r2, #32
 800b2bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b2c8:	2303      	movs	r3, #3
 800b2ca:	e063      	b.n	800b394 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	f003 0304 	and.w	r3, r3, #4
 800b2d6:	2b04      	cmp	r3, #4
 800b2d8:	d149      	bne.n	800b36e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b2da:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b2de:	9300      	str	r3, [sp, #0]
 800b2e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b2e8:	6878      	ldr	r0, [r7, #4]
 800b2ea:	f000 f857 	bl	800b39c <UART_WaitOnFlagUntilTimeout>
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d03c      	beq.n	800b36e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2fc:	e853 3f00 	ldrex	r3, [r3]
 800b300:	623b      	str	r3, [r7, #32]
   return(result);
 800b302:	6a3b      	ldr	r3, [r7, #32]
 800b304:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b308:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	461a      	mov	r2, r3
 800b310:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b312:	633b      	str	r3, [r7, #48]	; 0x30
 800b314:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b316:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b318:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b31a:	e841 2300 	strex	r3, r2, [r1]
 800b31e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b322:	2b00      	cmp	r3, #0
 800b324:	d1e6      	bne.n	800b2f4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	3308      	adds	r3, #8
 800b32c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b32e:	693b      	ldr	r3, [r7, #16]
 800b330:	e853 3f00 	ldrex	r3, [r3]
 800b334:	60fb      	str	r3, [r7, #12]
   return(result);
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	f023 0301 	bic.w	r3, r3, #1
 800b33c:	64bb      	str	r3, [r7, #72]	; 0x48
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	3308      	adds	r3, #8
 800b344:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b346:	61fa      	str	r2, [r7, #28]
 800b348:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b34a:	69b9      	ldr	r1, [r7, #24]
 800b34c:	69fa      	ldr	r2, [r7, #28]
 800b34e:	e841 2300 	strex	r3, r2, [r1]
 800b352:	617b      	str	r3, [r7, #20]
   return(result);
 800b354:	697b      	ldr	r3, [r7, #20]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d1e5      	bne.n	800b326 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	2220      	movs	r2, #32
 800b35e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	2200      	movs	r2, #0
 800b366:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b36a:	2303      	movs	r3, #3
 800b36c:	e012      	b.n	800b394 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	2220      	movs	r2, #32
 800b372:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	2220      	movs	r2, #32
 800b37a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	2200      	movs	r2, #0
 800b382:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	2200      	movs	r2, #0
 800b388:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	2200      	movs	r2, #0
 800b38e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b392:	2300      	movs	r3, #0
}
 800b394:	4618      	mov	r0, r3
 800b396:	3758      	adds	r7, #88	; 0x58
 800b398:	46bd      	mov	sp, r7
 800b39a:	bd80      	pop	{r7, pc}

0800b39c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b084      	sub	sp, #16
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	60f8      	str	r0, [r7, #12]
 800b3a4:	60b9      	str	r1, [r7, #8]
 800b3a6:	603b      	str	r3, [r7, #0]
 800b3a8:	4613      	mov	r3, r2
 800b3aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b3ac:	e049      	b.n	800b442 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b3ae:	69bb      	ldr	r3, [r7, #24]
 800b3b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3b4:	d045      	beq.n	800b442 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b3b6:	f7f7 fba9 	bl	8002b0c <HAL_GetTick>
 800b3ba:	4602      	mov	r2, r0
 800b3bc:	683b      	ldr	r3, [r7, #0]
 800b3be:	1ad3      	subs	r3, r2, r3
 800b3c0:	69ba      	ldr	r2, [r7, #24]
 800b3c2:	429a      	cmp	r2, r3
 800b3c4:	d302      	bcc.n	800b3cc <UART_WaitOnFlagUntilTimeout+0x30>
 800b3c6:	69bb      	ldr	r3, [r7, #24]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d101      	bne.n	800b3d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b3cc:	2303      	movs	r3, #3
 800b3ce:	e048      	b.n	800b462 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	f003 0304 	and.w	r3, r3, #4
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d031      	beq.n	800b442 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	69db      	ldr	r3, [r3, #28]
 800b3e4:	f003 0308 	and.w	r3, r3, #8
 800b3e8:	2b08      	cmp	r3, #8
 800b3ea:	d110      	bne.n	800b40e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	2208      	movs	r2, #8
 800b3f2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800b3f4:	68f8      	ldr	r0, [r7, #12]
 800b3f6:	f000 f839 	bl	800b46c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	2208      	movs	r2, #8
 800b3fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	2200      	movs	r2, #0
 800b406:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800b40a:	2301      	movs	r3, #1
 800b40c:	e029      	b.n	800b462 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	69db      	ldr	r3, [r3, #28]
 800b414:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b418:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b41c:	d111      	bne.n	800b442 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b426:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b428:	68f8      	ldr	r0, [r7, #12]
 800b42a:	f000 f81f 	bl	800b46c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	2220      	movs	r2, #32
 800b432:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	2200      	movs	r2, #0
 800b43a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800b43e:	2303      	movs	r3, #3
 800b440:	e00f      	b.n	800b462 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	69da      	ldr	r2, [r3, #28]
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	4013      	ands	r3, r2
 800b44c:	68ba      	ldr	r2, [r7, #8]
 800b44e:	429a      	cmp	r2, r3
 800b450:	bf0c      	ite	eq
 800b452:	2301      	moveq	r3, #1
 800b454:	2300      	movne	r3, #0
 800b456:	b2db      	uxtb	r3, r3
 800b458:	461a      	mov	r2, r3
 800b45a:	79fb      	ldrb	r3, [r7, #7]
 800b45c:	429a      	cmp	r2, r3
 800b45e:	d0a6      	beq.n	800b3ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b460:	2300      	movs	r3, #0
}
 800b462:	4618      	mov	r0, r3
 800b464:	3710      	adds	r7, #16
 800b466:	46bd      	mov	sp, r7
 800b468:	bd80      	pop	{r7, pc}
	...

0800b46c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b46c:	b480      	push	{r7}
 800b46e:	b095      	sub	sp, #84	; 0x54
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b47a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b47c:	e853 3f00 	ldrex	r3, [r3]
 800b480:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b484:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b488:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	461a      	mov	r2, r3
 800b490:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b492:	643b      	str	r3, [r7, #64]	; 0x40
 800b494:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b496:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b498:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b49a:	e841 2300 	strex	r3, r2, [r1]
 800b49e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b4a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d1e6      	bne.n	800b474 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	3308      	adds	r3, #8
 800b4ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4ae:	6a3b      	ldr	r3, [r7, #32]
 800b4b0:	e853 3f00 	ldrex	r3, [r3]
 800b4b4:	61fb      	str	r3, [r7, #28]
   return(result);
 800b4b6:	69fa      	ldr	r2, [r7, #28]
 800b4b8:	4b1e      	ldr	r3, [pc, #120]	; (800b534 <UART_EndRxTransfer+0xc8>)
 800b4ba:	4013      	ands	r3, r2
 800b4bc:	64bb      	str	r3, [r7, #72]	; 0x48
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	3308      	adds	r3, #8
 800b4c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b4c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b4c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b4cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b4ce:	e841 2300 	strex	r3, r2, [r1]
 800b4d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d1e5      	bne.n	800b4a6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b4de:	2b01      	cmp	r3, #1
 800b4e0:	d118      	bne.n	800b514 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	e853 3f00 	ldrex	r3, [r3]
 800b4ee:	60bb      	str	r3, [r7, #8]
   return(result);
 800b4f0:	68bb      	ldr	r3, [r7, #8]
 800b4f2:	f023 0310 	bic.w	r3, r3, #16
 800b4f6:	647b      	str	r3, [r7, #68]	; 0x44
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	461a      	mov	r2, r3
 800b4fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b500:	61bb      	str	r3, [r7, #24]
 800b502:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b504:	6979      	ldr	r1, [r7, #20]
 800b506:	69ba      	ldr	r2, [r7, #24]
 800b508:	e841 2300 	strex	r3, r2, [r1]
 800b50c:	613b      	str	r3, [r7, #16]
   return(result);
 800b50e:	693b      	ldr	r3, [r7, #16]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d1e6      	bne.n	800b4e2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	2220      	movs	r2, #32
 800b518:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	2200      	movs	r2, #0
 800b520:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	2200      	movs	r2, #0
 800b526:	675a      	str	r2, [r3, #116]	; 0x74
}
 800b528:	bf00      	nop
 800b52a:	3754      	adds	r7, #84	; 0x54
 800b52c:	46bd      	mov	sp, r7
 800b52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b532:	4770      	bx	lr
 800b534:	effffffe 	.word	0xeffffffe

0800b538 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b538:	b480      	push	{r7}
 800b53a:	b085      	sub	sp, #20
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b546:	2b01      	cmp	r3, #1
 800b548:	d101      	bne.n	800b54e <HAL_UARTEx_DisableFifoMode+0x16>
 800b54a:	2302      	movs	r3, #2
 800b54c:	e027      	b.n	800b59e <HAL_UARTEx_DisableFifoMode+0x66>
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2201      	movs	r2, #1
 800b552:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	2224      	movs	r2, #36	; 0x24
 800b55a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	681a      	ldr	r2, [r3, #0]
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	f022 0201 	bic.w	r2, r2, #1
 800b574:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b57c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	2200      	movs	r2, #0
 800b582:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	68fa      	ldr	r2, [r7, #12]
 800b58a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	2220      	movs	r2, #32
 800b590:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	2200      	movs	r2, #0
 800b598:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b59c:	2300      	movs	r3, #0
}
 800b59e:	4618      	mov	r0, r3
 800b5a0:	3714      	adds	r7, #20
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a8:	4770      	bx	lr

0800b5aa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b5aa:	b580      	push	{r7, lr}
 800b5ac:	b084      	sub	sp, #16
 800b5ae:	af00      	add	r7, sp, #0
 800b5b0:	6078      	str	r0, [r7, #4]
 800b5b2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b5ba:	2b01      	cmp	r3, #1
 800b5bc:	d101      	bne.n	800b5c2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b5be:	2302      	movs	r3, #2
 800b5c0:	e02d      	b.n	800b61e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2201      	movs	r2, #1
 800b5c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2224      	movs	r2, #36	; 0x24
 800b5ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	681a      	ldr	r2, [r3, #0]
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	f022 0201 	bic.w	r2, r2, #1
 800b5e8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	689b      	ldr	r3, [r3, #8]
 800b5f0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	683a      	ldr	r2, [r7, #0]
 800b5fa:	430a      	orrs	r2, r1
 800b5fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b5fe:	6878      	ldr	r0, [r7, #4]
 800b600:	f000 f850 	bl	800b6a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	68fa      	ldr	r2, [r7, #12]
 800b60a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	2220      	movs	r2, #32
 800b610:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2200      	movs	r2, #0
 800b618:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b61c:	2300      	movs	r3, #0
}
 800b61e:	4618      	mov	r0, r3
 800b620:	3710      	adds	r7, #16
 800b622:	46bd      	mov	sp, r7
 800b624:	bd80      	pop	{r7, pc}

0800b626 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b626:	b580      	push	{r7, lr}
 800b628:	b084      	sub	sp, #16
 800b62a:	af00      	add	r7, sp, #0
 800b62c:	6078      	str	r0, [r7, #4]
 800b62e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b636:	2b01      	cmp	r3, #1
 800b638:	d101      	bne.n	800b63e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b63a:	2302      	movs	r3, #2
 800b63c:	e02d      	b.n	800b69a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2201      	movs	r2, #1
 800b642:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	2224      	movs	r2, #36	; 0x24
 800b64a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	681a      	ldr	r2, [r3, #0]
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	f022 0201 	bic.w	r2, r2, #1
 800b664:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	689b      	ldr	r3, [r3, #8]
 800b66c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	683a      	ldr	r2, [r7, #0]
 800b676:	430a      	orrs	r2, r1
 800b678:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b67a:	6878      	ldr	r0, [r7, #4]
 800b67c:	f000 f812 	bl	800b6a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	68fa      	ldr	r2, [r7, #12]
 800b686:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2220      	movs	r2, #32
 800b68c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2200      	movs	r2, #0
 800b694:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b698:	2300      	movs	r3, #0
}
 800b69a:	4618      	mov	r0, r3
 800b69c:	3710      	adds	r7, #16
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd80      	pop	{r7, pc}
	...

0800b6a4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b6a4:	b480      	push	{r7}
 800b6a6:	b085      	sub	sp, #20
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d108      	bne.n	800b6c6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	2201      	movs	r2, #1
 800b6b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2201      	movs	r2, #1
 800b6c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b6c4:	e031      	b.n	800b72a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b6c6:	2310      	movs	r3, #16
 800b6c8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b6ca:	2310      	movs	r3, #16
 800b6cc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	689b      	ldr	r3, [r3, #8]
 800b6d4:	0e5b      	lsrs	r3, r3, #25
 800b6d6:	b2db      	uxtb	r3, r3
 800b6d8:	f003 0307 	and.w	r3, r3, #7
 800b6dc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	689b      	ldr	r3, [r3, #8]
 800b6e4:	0f5b      	lsrs	r3, r3, #29
 800b6e6:	b2db      	uxtb	r3, r3
 800b6e8:	f003 0307 	and.w	r3, r3, #7
 800b6ec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b6ee:	7bbb      	ldrb	r3, [r7, #14]
 800b6f0:	7b3a      	ldrb	r2, [r7, #12]
 800b6f2:	4911      	ldr	r1, [pc, #68]	; (800b738 <UARTEx_SetNbDataToProcess+0x94>)
 800b6f4:	5c8a      	ldrb	r2, [r1, r2]
 800b6f6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b6fa:	7b3a      	ldrb	r2, [r7, #12]
 800b6fc:	490f      	ldr	r1, [pc, #60]	; (800b73c <UARTEx_SetNbDataToProcess+0x98>)
 800b6fe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b700:	fb93 f3f2 	sdiv	r3, r3, r2
 800b704:	b29a      	uxth	r2, r3
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b70c:	7bfb      	ldrb	r3, [r7, #15]
 800b70e:	7b7a      	ldrb	r2, [r7, #13]
 800b710:	4909      	ldr	r1, [pc, #36]	; (800b738 <UARTEx_SetNbDataToProcess+0x94>)
 800b712:	5c8a      	ldrb	r2, [r1, r2]
 800b714:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b718:	7b7a      	ldrb	r2, [r7, #13]
 800b71a:	4908      	ldr	r1, [pc, #32]	; (800b73c <UARTEx_SetNbDataToProcess+0x98>)
 800b71c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b71e:	fb93 f3f2 	sdiv	r3, r3, r2
 800b722:	b29a      	uxth	r2, r3
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b72a:	bf00      	nop
 800b72c:	3714      	adds	r7, #20
 800b72e:	46bd      	mov	sp, r7
 800b730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b734:	4770      	bx	lr
 800b736:	bf00      	nop
 800b738:	0800bfe8 	.word	0x0800bfe8
 800b73c:	0800bff0 	.word	0x0800bff0

0800b740 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b740:	b480      	push	{r7}
 800b742:	b083      	sub	sp, #12
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
 800b748:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d121      	bne.n	800b796 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681a      	ldr	r2, [r3, #0]
 800b756:	4b27      	ldr	r3, [pc, #156]	; (800b7f4 <FMC_SDRAM_Init+0xb4>)
 800b758:	4013      	ands	r3, r2
 800b75a:	683a      	ldr	r2, [r7, #0]
 800b75c:	6851      	ldr	r1, [r2, #4]
 800b75e:	683a      	ldr	r2, [r7, #0]
 800b760:	6892      	ldr	r2, [r2, #8]
 800b762:	4311      	orrs	r1, r2
 800b764:	683a      	ldr	r2, [r7, #0]
 800b766:	68d2      	ldr	r2, [r2, #12]
 800b768:	4311      	orrs	r1, r2
 800b76a:	683a      	ldr	r2, [r7, #0]
 800b76c:	6912      	ldr	r2, [r2, #16]
 800b76e:	4311      	orrs	r1, r2
 800b770:	683a      	ldr	r2, [r7, #0]
 800b772:	6952      	ldr	r2, [r2, #20]
 800b774:	4311      	orrs	r1, r2
 800b776:	683a      	ldr	r2, [r7, #0]
 800b778:	6992      	ldr	r2, [r2, #24]
 800b77a:	4311      	orrs	r1, r2
 800b77c:	683a      	ldr	r2, [r7, #0]
 800b77e:	69d2      	ldr	r2, [r2, #28]
 800b780:	4311      	orrs	r1, r2
 800b782:	683a      	ldr	r2, [r7, #0]
 800b784:	6a12      	ldr	r2, [r2, #32]
 800b786:	4311      	orrs	r1, r2
 800b788:	683a      	ldr	r2, [r7, #0]
 800b78a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b78c:	430a      	orrs	r2, r1
 800b78e:	431a      	orrs	r2, r3
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	601a      	str	r2, [r3, #0]
 800b794:	e026      	b.n	800b7e4 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	69d9      	ldr	r1, [r3, #28]
 800b7a2:	683b      	ldr	r3, [r7, #0]
 800b7a4:	6a1b      	ldr	r3, [r3, #32]
 800b7a6:	4319      	orrs	r1, r3
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7ac:	430b      	orrs	r3, r1
 800b7ae:	431a      	orrs	r2, r3
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	685a      	ldr	r2, [r3, #4]
 800b7b8:	4b0e      	ldr	r3, [pc, #56]	; (800b7f4 <FMC_SDRAM_Init+0xb4>)
 800b7ba:	4013      	ands	r3, r2
 800b7bc:	683a      	ldr	r2, [r7, #0]
 800b7be:	6851      	ldr	r1, [r2, #4]
 800b7c0:	683a      	ldr	r2, [r7, #0]
 800b7c2:	6892      	ldr	r2, [r2, #8]
 800b7c4:	4311      	orrs	r1, r2
 800b7c6:	683a      	ldr	r2, [r7, #0]
 800b7c8:	68d2      	ldr	r2, [r2, #12]
 800b7ca:	4311      	orrs	r1, r2
 800b7cc:	683a      	ldr	r2, [r7, #0]
 800b7ce:	6912      	ldr	r2, [r2, #16]
 800b7d0:	4311      	orrs	r1, r2
 800b7d2:	683a      	ldr	r2, [r7, #0]
 800b7d4:	6952      	ldr	r2, [r2, #20]
 800b7d6:	4311      	orrs	r1, r2
 800b7d8:	683a      	ldr	r2, [r7, #0]
 800b7da:	6992      	ldr	r2, [r2, #24]
 800b7dc:	430a      	orrs	r2, r1
 800b7de:	431a      	orrs	r2, r3
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800b7e4:	2300      	movs	r3, #0
}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	370c      	adds	r7, #12
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f0:	4770      	bx	lr
 800b7f2:	bf00      	nop
 800b7f4:	ffff8000 	.word	0xffff8000

0800b7f8 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b7f8:	b480      	push	{r7}
 800b7fa:	b085      	sub	sp, #20
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	60f8      	str	r0, [r7, #12]
 800b800:	60b9      	str	r1, [r7, #8]
 800b802:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d128      	bne.n	800b85c <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	689b      	ldr	r3, [r3, #8]
 800b80e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800b812:	68bb      	ldr	r3, [r7, #8]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	1e59      	subs	r1, r3, #1
 800b818:	68bb      	ldr	r3, [r7, #8]
 800b81a:	685b      	ldr	r3, [r3, #4]
 800b81c:	3b01      	subs	r3, #1
 800b81e:	011b      	lsls	r3, r3, #4
 800b820:	4319      	orrs	r1, r3
 800b822:	68bb      	ldr	r3, [r7, #8]
 800b824:	689b      	ldr	r3, [r3, #8]
 800b826:	3b01      	subs	r3, #1
 800b828:	021b      	lsls	r3, r3, #8
 800b82a:	4319      	orrs	r1, r3
 800b82c:	68bb      	ldr	r3, [r7, #8]
 800b82e:	68db      	ldr	r3, [r3, #12]
 800b830:	3b01      	subs	r3, #1
 800b832:	031b      	lsls	r3, r3, #12
 800b834:	4319      	orrs	r1, r3
 800b836:	68bb      	ldr	r3, [r7, #8]
 800b838:	691b      	ldr	r3, [r3, #16]
 800b83a:	3b01      	subs	r3, #1
 800b83c:	041b      	lsls	r3, r3, #16
 800b83e:	4319      	orrs	r1, r3
 800b840:	68bb      	ldr	r3, [r7, #8]
 800b842:	695b      	ldr	r3, [r3, #20]
 800b844:	3b01      	subs	r3, #1
 800b846:	051b      	lsls	r3, r3, #20
 800b848:	4319      	orrs	r1, r3
 800b84a:	68bb      	ldr	r3, [r7, #8]
 800b84c:	699b      	ldr	r3, [r3, #24]
 800b84e:	3b01      	subs	r3, #1
 800b850:	061b      	lsls	r3, r3, #24
 800b852:	430b      	orrs	r3, r1
 800b854:	431a      	orrs	r2, r3
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	609a      	str	r2, [r3, #8]
 800b85a:	e02d      	b.n	800b8b8 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	689a      	ldr	r2, [r3, #8]
 800b860:	4b19      	ldr	r3, [pc, #100]	; (800b8c8 <FMC_SDRAM_Timing_Init+0xd0>)
 800b862:	4013      	ands	r3, r2
 800b864:	68ba      	ldr	r2, [r7, #8]
 800b866:	68d2      	ldr	r2, [r2, #12]
 800b868:	3a01      	subs	r2, #1
 800b86a:	0311      	lsls	r1, r2, #12
 800b86c:	68ba      	ldr	r2, [r7, #8]
 800b86e:	6952      	ldr	r2, [r2, #20]
 800b870:	3a01      	subs	r2, #1
 800b872:	0512      	lsls	r2, r2, #20
 800b874:	430a      	orrs	r2, r1
 800b876:	431a      	orrs	r2, r3
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	68db      	ldr	r3, [r3, #12]
 800b880:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800b884:	68bb      	ldr	r3, [r7, #8]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	1e59      	subs	r1, r3, #1
 800b88a:	68bb      	ldr	r3, [r7, #8]
 800b88c:	685b      	ldr	r3, [r3, #4]
 800b88e:	3b01      	subs	r3, #1
 800b890:	011b      	lsls	r3, r3, #4
 800b892:	4319      	orrs	r1, r3
 800b894:	68bb      	ldr	r3, [r7, #8]
 800b896:	689b      	ldr	r3, [r3, #8]
 800b898:	3b01      	subs	r3, #1
 800b89a:	021b      	lsls	r3, r3, #8
 800b89c:	4319      	orrs	r1, r3
 800b89e:	68bb      	ldr	r3, [r7, #8]
 800b8a0:	691b      	ldr	r3, [r3, #16]
 800b8a2:	3b01      	subs	r3, #1
 800b8a4:	041b      	lsls	r3, r3, #16
 800b8a6:	4319      	orrs	r1, r3
 800b8a8:	68bb      	ldr	r3, [r7, #8]
 800b8aa:	699b      	ldr	r3, [r3, #24]
 800b8ac:	3b01      	subs	r3, #1
 800b8ae:	061b      	lsls	r3, r3, #24
 800b8b0:	430b      	orrs	r3, r1
 800b8b2:	431a      	orrs	r2, r3
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800b8b8:	2300      	movs	r3, #0
}
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	3714      	adds	r7, #20
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c4:	4770      	bx	lr
 800b8c6:	bf00      	nop
 800b8c8:	ff0f0fff 	.word	0xff0f0fff

0800b8cc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b8cc:	b084      	sub	sp, #16
 800b8ce:	b580      	push	{r7, lr}
 800b8d0:	b084      	sub	sp, #16
 800b8d2:	af00      	add	r7, sp, #0
 800b8d4:	6078      	str	r0, [r7, #4]
 800b8d6:	f107 001c 	add.w	r0, r7, #28
 800b8da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b8de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8e0:	2b01      	cmp	r3, #1
 800b8e2:	d120      	bne.n	800b926 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	68da      	ldr	r2, [r3, #12]
 800b8f4:	4b2a      	ldr	r3, [pc, #168]	; (800b9a0 <USB_CoreInit+0xd4>)
 800b8f6:	4013      	ands	r3, r2
 800b8f8:	687a      	ldr	r2, [r7, #4]
 800b8fa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	68db      	ldr	r3, [r3, #12]
 800b900:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b908:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b90a:	2b01      	cmp	r3, #1
 800b90c:	d105      	bne.n	800b91a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	68db      	ldr	r3, [r3, #12]
 800b912:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b91a:	6878      	ldr	r0, [r7, #4]
 800b91c:	f000 faac 	bl	800be78 <USB_CoreReset>
 800b920:	4603      	mov	r3, r0
 800b922:	73fb      	strb	r3, [r7, #15]
 800b924:	e01a      	b.n	800b95c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	68db      	ldr	r3, [r3, #12]
 800b92a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b932:	6878      	ldr	r0, [r7, #4]
 800b934:	f000 faa0 	bl	800be78 <USB_CoreReset>
 800b938:	4603      	mov	r3, r0
 800b93a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b93c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d106      	bne.n	800b950 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b946:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	639a      	str	r2, [r3, #56]	; 0x38
 800b94e:	e005      	b.n	800b95c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b954:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b95c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b95e:	2b01      	cmp	r3, #1
 800b960:	d116      	bne.n	800b990 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b966:	b29a      	uxth	r2, r3
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b970:	4b0c      	ldr	r3, [pc, #48]	; (800b9a4 <USB_CoreInit+0xd8>)
 800b972:	4313      	orrs	r3, r2
 800b974:	687a      	ldr	r2, [r7, #4]
 800b976:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	689b      	ldr	r3, [r3, #8]
 800b97c:	f043 0206 	orr.w	r2, r3, #6
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	689b      	ldr	r3, [r3, #8]
 800b988:	f043 0220 	orr.w	r2, r3, #32
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b990:	7bfb      	ldrb	r3, [r7, #15]
}
 800b992:	4618      	mov	r0, r3
 800b994:	3710      	adds	r7, #16
 800b996:	46bd      	mov	sp, r7
 800b998:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b99c:	b004      	add	sp, #16
 800b99e:	4770      	bx	lr
 800b9a0:	ffbdffbf 	.word	0xffbdffbf
 800b9a4:	03ee0000 	.word	0x03ee0000

0800b9a8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b9a8:	b480      	push	{r7}
 800b9aa:	b083      	sub	sp, #12
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	689b      	ldr	r3, [r3, #8]
 800b9b4:	f023 0201 	bic.w	r2, r3, #1
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b9bc:	2300      	movs	r3, #0
}
 800b9be:	4618      	mov	r0, r3
 800b9c0:	370c      	adds	r7, #12
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c8:	4770      	bx	lr

0800b9ca <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b9ca:	b580      	push	{r7, lr}
 800b9cc:	b084      	sub	sp, #16
 800b9ce:	af00      	add	r7, sp, #0
 800b9d0:	6078      	str	r0, [r7, #4]
 800b9d2:	460b      	mov	r3, r1
 800b9d4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	68db      	ldr	r3, [r3, #12]
 800b9de:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b9e6:	78fb      	ldrb	r3, [r7, #3]
 800b9e8:	2b01      	cmp	r3, #1
 800b9ea:	d115      	bne.n	800ba18 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	68db      	ldr	r3, [r3, #12]
 800b9f0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b9f8:	2001      	movs	r0, #1
 800b9fa:	f7f7 f893 	bl	8002b24 <HAL_Delay>
      ms++;
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	3301      	adds	r3, #1
 800ba02:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800ba04:	6878      	ldr	r0, [r7, #4]
 800ba06:	f000 fa29 	bl	800be5c <USB_GetMode>
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	2b01      	cmp	r3, #1
 800ba0e:	d01e      	beq.n	800ba4e <USB_SetCurrentMode+0x84>
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	2b31      	cmp	r3, #49	; 0x31
 800ba14:	d9f0      	bls.n	800b9f8 <USB_SetCurrentMode+0x2e>
 800ba16:	e01a      	b.n	800ba4e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ba18:	78fb      	ldrb	r3, [r7, #3]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d115      	bne.n	800ba4a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	68db      	ldr	r3, [r3, #12]
 800ba22:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ba2a:	2001      	movs	r0, #1
 800ba2c:	f7f7 f87a 	bl	8002b24 <HAL_Delay>
      ms++;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	3301      	adds	r3, #1
 800ba34:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800ba36:	6878      	ldr	r0, [r7, #4]
 800ba38:	f000 fa10 	bl	800be5c <USB_GetMode>
 800ba3c:	4603      	mov	r3, r0
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d005      	beq.n	800ba4e <USB_SetCurrentMode+0x84>
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	2b31      	cmp	r3, #49	; 0x31
 800ba46:	d9f0      	bls.n	800ba2a <USB_SetCurrentMode+0x60>
 800ba48:	e001      	b.n	800ba4e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ba4a:	2301      	movs	r3, #1
 800ba4c:	e005      	b.n	800ba5a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	2b32      	cmp	r3, #50	; 0x32
 800ba52:	d101      	bne.n	800ba58 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ba54:	2301      	movs	r3, #1
 800ba56:	e000      	b.n	800ba5a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ba58:	2300      	movs	r3, #0
}
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	3710      	adds	r7, #16
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	bd80      	pop	{r7, pc}
	...

0800ba64 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ba64:	b084      	sub	sp, #16
 800ba66:	b580      	push	{r7, lr}
 800ba68:	b086      	sub	sp, #24
 800ba6a:	af00      	add	r7, sp, #0
 800ba6c:	6078      	str	r0, [r7, #4]
 800ba6e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800ba72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ba76:	2300      	movs	r3, #0
 800ba78:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ba7e:	2300      	movs	r3, #0
 800ba80:	613b      	str	r3, [r7, #16]
 800ba82:	e009      	b.n	800ba98 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ba84:	687a      	ldr	r2, [r7, #4]
 800ba86:	693b      	ldr	r3, [r7, #16]
 800ba88:	3340      	adds	r3, #64	; 0x40
 800ba8a:	009b      	lsls	r3, r3, #2
 800ba8c:	4413      	add	r3, r2
 800ba8e:	2200      	movs	r2, #0
 800ba90:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ba92:	693b      	ldr	r3, [r7, #16]
 800ba94:	3301      	adds	r3, #1
 800ba96:	613b      	str	r3, [r7, #16]
 800ba98:	693b      	ldr	r3, [r7, #16]
 800ba9a:	2b0e      	cmp	r3, #14
 800ba9c:	d9f2      	bls.n	800ba84 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ba9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d11c      	bne.n	800bade <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800baaa:	685b      	ldr	r3, [r3, #4]
 800baac:	68fa      	ldr	r2, [r7, #12]
 800baae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bab2:	f043 0302 	orr.w	r3, r3, #2
 800bab6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800babc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	601a      	str	r2, [r3, #0]
 800badc:	e005      	b.n	800baea <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bae2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800baf0:	461a      	mov	r2, r3
 800baf2:	2300      	movs	r3, #0
 800baf4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bafc:	4619      	mov	r1, r3
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb04:	461a      	mov	r2, r3
 800bb06:	680b      	ldr	r3, [r1, #0]
 800bb08:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bb0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb0c:	2b01      	cmp	r3, #1
 800bb0e:	d10c      	bne.n	800bb2a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800bb10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d104      	bne.n	800bb20 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800bb16:	2100      	movs	r1, #0
 800bb18:	6878      	ldr	r0, [r7, #4]
 800bb1a:	f000 f965 	bl	800bde8 <USB_SetDevSpeed>
 800bb1e:	e008      	b.n	800bb32 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800bb20:	2101      	movs	r1, #1
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	f000 f960 	bl	800bde8 <USB_SetDevSpeed>
 800bb28:	e003      	b.n	800bb32 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800bb2a:	2103      	movs	r1, #3
 800bb2c:	6878      	ldr	r0, [r7, #4]
 800bb2e:	f000 f95b 	bl	800bde8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800bb32:	2110      	movs	r1, #16
 800bb34:	6878      	ldr	r0, [r7, #4]
 800bb36:	f000 f8f3 	bl	800bd20 <USB_FlushTxFifo>
 800bb3a:	4603      	mov	r3, r0
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d001      	beq.n	800bb44 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800bb40:	2301      	movs	r3, #1
 800bb42:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800bb44:	6878      	ldr	r0, [r7, #4]
 800bb46:	f000 f91f 	bl	800bd88 <USB_FlushRxFifo>
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d001      	beq.n	800bb54 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800bb50:	2301      	movs	r3, #1
 800bb52:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb5a:	461a      	mov	r2, r3
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb66:	461a      	mov	r2, r3
 800bb68:	2300      	movs	r3, #0
 800bb6a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb72:	461a      	mov	r2, r3
 800bb74:	2300      	movs	r3, #0
 800bb76:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bb78:	2300      	movs	r3, #0
 800bb7a:	613b      	str	r3, [r7, #16]
 800bb7c:	e043      	b.n	800bc06 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bb7e:	693b      	ldr	r3, [r7, #16]
 800bb80:	015a      	lsls	r2, r3, #5
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	4413      	add	r3, r2
 800bb86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bb90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bb94:	d118      	bne.n	800bbc8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800bb96:	693b      	ldr	r3, [r7, #16]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d10a      	bne.n	800bbb2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800bb9c:	693b      	ldr	r3, [r7, #16]
 800bb9e:	015a      	lsls	r2, r3, #5
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	4413      	add	r3, r2
 800bba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bba8:	461a      	mov	r2, r3
 800bbaa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bbae:	6013      	str	r3, [r2, #0]
 800bbb0:	e013      	b.n	800bbda <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800bbb2:	693b      	ldr	r3, [r7, #16]
 800bbb4:	015a      	lsls	r2, r3, #5
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	4413      	add	r3, r2
 800bbba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbbe:	461a      	mov	r2, r3
 800bbc0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bbc4:	6013      	str	r3, [r2, #0]
 800bbc6:	e008      	b.n	800bbda <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800bbc8:	693b      	ldr	r3, [r7, #16]
 800bbca:	015a      	lsls	r2, r3, #5
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	4413      	add	r3, r2
 800bbd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbd4:	461a      	mov	r2, r3
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800bbda:	693b      	ldr	r3, [r7, #16]
 800bbdc:	015a      	lsls	r2, r3, #5
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	4413      	add	r3, r2
 800bbe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbe6:	461a      	mov	r2, r3
 800bbe8:	2300      	movs	r3, #0
 800bbea:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800bbec:	693b      	ldr	r3, [r7, #16]
 800bbee:	015a      	lsls	r2, r3, #5
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	4413      	add	r3, r2
 800bbf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbf8:	461a      	mov	r2, r3
 800bbfa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bbfe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bc00:	693b      	ldr	r3, [r7, #16]
 800bc02:	3301      	adds	r3, #1
 800bc04:	613b      	str	r3, [r7, #16]
 800bc06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc08:	693a      	ldr	r2, [r7, #16]
 800bc0a:	429a      	cmp	r2, r3
 800bc0c:	d3b7      	bcc.n	800bb7e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bc0e:	2300      	movs	r3, #0
 800bc10:	613b      	str	r3, [r7, #16]
 800bc12:	e043      	b.n	800bc9c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bc14:	693b      	ldr	r3, [r7, #16]
 800bc16:	015a      	lsls	r2, r3, #5
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	4413      	add	r3, r2
 800bc1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bc26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bc2a:	d118      	bne.n	800bc5e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800bc2c:	693b      	ldr	r3, [r7, #16]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d10a      	bne.n	800bc48 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800bc32:	693b      	ldr	r3, [r7, #16]
 800bc34:	015a      	lsls	r2, r3, #5
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	4413      	add	r3, r2
 800bc3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc3e:	461a      	mov	r2, r3
 800bc40:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bc44:	6013      	str	r3, [r2, #0]
 800bc46:	e013      	b.n	800bc70 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800bc48:	693b      	ldr	r3, [r7, #16]
 800bc4a:	015a      	lsls	r2, r3, #5
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	4413      	add	r3, r2
 800bc50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc54:	461a      	mov	r2, r3
 800bc56:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bc5a:	6013      	str	r3, [r2, #0]
 800bc5c:	e008      	b.n	800bc70 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800bc5e:	693b      	ldr	r3, [r7, #16]
 800bc60:	015a      	lsls	r2, r3, #5
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	4413      	add	r3, r2
 800bc66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc6a:	461a      	mov	r2, r3
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800bc70:	693b      	ldr	r3, [r7, #16]
 800bc72:	015a      	lsls	r2, r3, #5
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	4413      	add	r3, r2
 800bc78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc7c:	461a      	mov	r2, r3
 800bc7e:	2300      	movs	r3, #0
 800bc80:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800bc82:	693b      	ldr	r3, [r7, #16]
 800bc84:	015a      	lsls	r2, r3, #5
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	4413      	add	r3, r2
 800bc8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc8e:	461a      	mov	r2, r3
 800bc90:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bc94:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bc96:	693b      	ldr	r3, [r7, #16]
 800bc98:	3301      	adds	r3, #1
 800bc9a:	613b      	str	r3, [r7, #16]
 800bc9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc9e:	693a      	ldr	r2, [r7, #16]
 800bca0:	429a      	cmp	r2, r3
 800bca2:	d3b7      	bcc.n	800bc14 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcaa:	691b      	ldr	r3, [r3, #16]
 800bcac:	68fa      	ldr	r2, [r7, #12]
 800bcae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bcb2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bcb6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	2200      	movs	r2, #0
 800bcbc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800bcc4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800bcc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d105      	bne.n	800bcd8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	699b      	ldr	r3, [r3, #24]
 800bcd0:	f043 0210 	orr.w	r2, r3, #16
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	699a      	ldr	r2, [r3, #24]
 800bcdc:	4b0e      	ldr	r3, [pc, #56]	; (800bd18 <USB_DevInit+0x2b4>)
 800bcde:	4313      	orrs	r3, r2
 800bce0:	687a      	ldr	r2, [r7, #4]
 800bce2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800bce4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d005      	beq.n	800bcf6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	699b      	ldr	r3, [r3, #24]
 800bcee:	f043 0208 	orr.w	r2, r3, #8
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800bcf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcf8:	2b01      	cmp	r3, #1
 800bcfa:	d105      	bne.n	800bd08 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	699a      	ldr	r2, [r3, #24]
 800bd00:	4b06      	ldr	r3, [pc, #24]	; (800bd1c <USB_DevInit+0x2b8>)
 800bd02:	4313      	orrs	r3, r2
 800bd04:	687a      	ldr	r2, [r7, #4]
 800bd06:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800bd08:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	3718      	adds	r7, #24
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bd14:	b004      	add	sp, #16
 800bd16:	4770      	bx	lr
 800bd18:	803c3800 	.word	0x803c3800
 800bd1c:	40000004 	.word	0x40000004

0800bd20 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bd20:	b480      	push	{r7}
 800bd22:	b085      	sub	sp, #20
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
 800bd28:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	3301      	adds	r3, #1
 800bd32:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	4a13      	ldr	r2, [pc, #76]	; (800bd84 <USB_FlushTxFifo+0x64>)
 800bd38:	4293      	cmp	r3, r2
 800bd3a:	d901      	bls.n	800bd40 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800bd3c:	2303      	movs	r3, #3
 800bd3e:	e01b      	b.n	800bd78 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	691b      	ldr	r3, [r3, #16]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	daf2      	bge.n	800bd2e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800bd48:	2300      	movs	r3, #0
 800bd4a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bd4c:	683b      	ldr	r3, [r7, #0]
 800bd4e:	019b      	lsls	r3, r3, #6
 800bd50:	f043 0220 	orr.w	r2, r3, #32
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	3301      	adds	r3, #1
 800bd5c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	4a08      	ldr	r2, [pc, #32]	; (800bd84 <USB_FlushTxFifo+0x64>)
 800bd62:	4293      	cmp	r3, r2
 800bd64:	d901      	bls.n	800bd6a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800bd66:	2303      	movs	r3, #3
 800bd68:	e006      	b.n	800bd78 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	691b      	ldr	r3, [r3, #16]
 800bd6e:	f003 0320 	and.w	r3, r3, #32
 800bd72:	2b20      	cmp	r3, #32
 800bd74:	d0f0      	beq.n	800bd58 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800bd76:	2300      	movs	r3, #0
}
 800bd78:	4618      	mov	r0, r3
 800bd7a:	3714      	adds	r7, #20
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd82:	4770      	bx	lr
 800bd84:	00030d40 	.word	0x00030d40

0800bd88 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bd88:	b480      	push	{r7}
 800bd8a:	b085      	sub	sp, #20
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bd90:	2300      	movs	r3, #0
 800bd92:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	3301      	adds	r3, #1
 800bd98:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	4a11      	ldr	r2, [pc, #68]	; (800bde4 <USB_FlushRxFifo+0x5c>)
 800bd9e:	4293      	cmp	r3, r2
 800bda0:	d901      	bls.n	800bda6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800bda2:	2303      	movs	r3, #3
 800bda4:	e018      	b.n	800bdd8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	691b      	ldr	r3, [r3, #16]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	daf2      	bge.n	800bd94 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800bdae:	2300      	movs	r3, #0
 800bdb0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	2210      	movs	r2, #16
 800bdb6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	3301      	adds	r3, #1
 800bdbc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	4a08      	ldr	r2, [pc, #32]	; (800bde4 <USB_FlushRxFifo+0x5c>)
 800bdc2:	4293      	cmp	r3, r2
 800bdc4:	d901      	bls.n	800bdca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800bdc6:	2303      	movs	r3, #3
 800bdc8:	e006      	b.n	800bdd8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	691b      	ldr	r3, [r3, #16]
 800bdce:	f003 0310 	and.w	r3, r3, #16
 800bdd2:	2b10      	cmp	r3, #16
 800bdd4:	d0f0      	beq.n	800bdb8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800bdd6:	2300      	movs	r3, #0
}
 800bdd8:	4618      	mov	r0, r3
 800bdda:	3714      	adds	r7, #20
 800bddc:	46bd      	mov	sp, r7
 800bdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde2:	4770      	bx	lr
 800bde4:	00030d40 	.word	0x00030d40

0800bde8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800bde8:	b480      	push	{r7}
 800bdea:	b085      	sub	sp, #20
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
 800bdf0:	460b      	mov	r3, r1
 800bdf2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bdfe:	681a      	ldr	r2, [r3, #0]
 800be00:	78fb      	ldrb	r3, [r7, #3]
 800be02:	68f9      	ldr	r1, [r7, #12]
 800be04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800be08:	4313      	orrs	r3, r2
 800be0a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800be0c:	2300      	movs	r3, #0
}
 800be0e:	4618      	mov	r0, r3
 800be10:	3714      	adds	r7, #20
 800be12:	46bd      	mov	sp, r7
 800be14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be18:	4770      	bx	lr

0800be1a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800be1a:	b480      	push	{r7}
 800be1c:	b085      	sub	sp, #20
 800be1e:	af00      	add	r7, sp, #0
 800be20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	68fa      	ldr	r2, [r7, #12]
 800be30:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800be34:	f023 0303 	bic.w	r3, r3, #3
 800be38:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be40:	685b      	ldr	r3, [r3, #4]
 800be42:	68fa      	ldr	r2, [r7, #12]
 800be44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800be48:	f043 0302 	orr.w	r3, r3, #2
 800be4c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800be4e:	2300      	movs	r3, #0
}
 800be50:	4618      	mov	r0, r3
 800be52:	3714      	adds	r7, #20
 800be54:	46bd      	mov	sp, r7
 800be56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5a:	4770      	bx	lr

0800be5c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800be5c:	b480      	push	{r7}
 800be5e:	b083      	sub	sp, #12
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	695b      	ldr	r3, [r3, #20]
 800be68:	f003 0301 	and.w	r3, r3, #1
}
 800be6c:	4618      	mov	r0, r3
 800be6e:	370c      	adds	r7, #12
 800be70:	46bd      	mov	sp, r7
 800be72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be76:	4770      	bx	lr

0800be78 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800be78:	b480      	push	{r7}
 800be7a:	b085      	sub	sp, #20
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800be80:	2300      	movs	r3, #0
 800be82:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	3301      	adds	r3, #1
 800be88:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	4a13      	ldr	r2, [pc, #76]	; (800bedc <USB_CoreReset+0x64>)
 800be8e:	4293      	cmp	r3, r2
 800be90:	d901      	bls.n	800be96 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800be92:	2303      	movs	r3, #3
 800be94:	e01b      	b.n	800bece <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	691b      	ldr	r3, [r3, #16]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	daf2      	bge.n	800be84 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800be9e:	2300      	movs	r3, #0
 800bea0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	691b      	ldr	r3, [r3, #16]
 800bea6:	f043 0201 	orr.w	r2, r3, #1
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	3301      	adds	r3, #1
 800beb2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	4a09      	ldr	r2, [pc, #36]	; (800bedc <USB_CoreReset+0x64>)
 800beb8:	4293      	cmp	r3, r2
 800beba:	d901      	bls.n	800bec0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800bebc:	2303      	movs	r3, #3
 800bebe:	e006      	b.n	800bece <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	691b      	ldr	r3, [r3, #16]
 800bec4:	f003 0301 	and.w	r3, r3, #1
 800bec8:	2b01      	cmp	r3, #1
 800beca:	d0f0      	beq.n	800beae <USB_CoreReset+0x36>

  return HAL_OK;
 800becc:	2300      	movs	r3, #0
}
 800bece:	4618      	mov	r0, r3
 800bed0:	3714      	adds	r7, #20
 800bed2:	46bd      	mov	sp, r7
 800bed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed8:	4770      	bx	lr
 800beda:	bf00      	nop
 800bedc:	00030d40 	.word	0x00030d40

0800bee0 <__libc_init_array>:
 800bee0:	b570      	push	{r4, r5, r6, lr}
 800bee2:	4d0d      	ldr	r5, [pc, #52]	; (800bf18 <__libc_init_array+0x38>)
 800bee4:	4c0d      	ldr	r4, [pc, #52]	; (800bf1c <__libc_init_array+0x3c>)
 800bee6:	1b64      	subs	r4, r4, r5
 800bee8:	10a4      	asrs	r4, r4, #2
 800beea:	2600      	movs	r6, #0
 800beec:	42a6      	cmp	r6, r4
 800beee:	d109      	bne.n	800bf04 <__libc_init_array+0x24>
 800bef0:	4d0b      	ldr	r5, [pc, #44]	; (800bf20 <__libc_init_array+0x40>)
 800bef2:	4c0c      	ldr	r4, [pc, #48]	; (800bf24 <__libc_init_array+0x44>)
 800bef4:	f000 f82e 	bl	800bf54 <_init>
 800bef8:	1b64      	subs	r4, r4, r5
 800befa:	10a4      	asrs	r4, r4, #2
 800befc:	2600      	movs	r6, #0
 800befe:	42a6      	cmp	r6, r4
 800bf00:	d105      	bne.n	800bf0e <__libc_init_array+0x2e>
 800bf02:	bd70      	pop	{r4, r5, r6, pc}
 800bf04:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf08:	4798      	blx	r3
 800bf0a:	3601      	adds	r6, #1
 800bf0c:	e7ee      	b.n	800beec <__libc_init_array+0xc>
 800bf0e:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf12:	4798      	blx	r3
 800bf14:	3601      	adds	r6, #1
 800bf16:	e7f2      	b.n	800befe <__libc_init_array+0x1e>
 800bf18:	0800c000 	.word	0x0800c000
 800bf1c:	0800c000 	.word	0x0800c000
 800bf20:	0800c000 	.word	0x0800c000
 800bf24:	0800c004 	.word	0x0800c004

0800bf28 <memcpy>:
 800bf28:	440a      	add	r2, r1
 800bf2a:	4291      	cmp	r1, r2
 800bf2c:	f100 33ff 	add.w	r3, r0, #4294967295
 800bf30:	d100      	bne.n	800bf34 <memcpy+0xc>
 800bf32:	4770      	bx	lr
 800bf34:	b510      	push	{r4, lr}
 800bf36:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bf3e:	4291      	cmp	r1, r2
 800bf40:	d1f9      	bne.n	800bf36 <memcpy+0xe>
 800bf42:	bd10      	pop	{r4, pc}

0800bf44 <memset>:
 800bf44:	4402      	add	r2, r0
 800bf46:	4603      	mov	r3, r0
 800bf48:	4293      	cmp	r3, r2
 800bf4a:	d100      	bne.n	800bf4e <memset+0xa>
 800bf4c:	4770      	bx	lr
 800bf4e:	f803 1b01 	strb.w	r1, [r3], #1
 800bf52:	e7f9      	b.n	800bf48 <memset+0x4>

0800bf54 <_init>:
 800bf54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf56:	bf00      	nop
 800bf58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf5a:	bc08      	pop	{r3}
 800bf5c:	469e      	mov	lr, r3
 800bf5e:	4770      	bx	lr

0800bf60 <_fini>:
 800bf60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf62:	bf00      	nop
 800bf64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf66:	bc08      	pop	{r3}
 800bf68:	469e      	mov	lr, r3
 800bf6a:	4770      	bx	lr
