
LCD_Display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc40  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  0800bed8  0800bed8  0001bed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bf74  0800bf74  0001bf74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800bf7c  0800bf7c  0001bf7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800bf80  0800bf80  0001bf80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  0800bf84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000010  0800bf94  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000070  0800bff4  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c30  240000d0  0800c054  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000d00  0800c054  00020d00  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030975  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000042ea  00000000  00000000  00050a73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002418  00000000  00000000  00054d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002298  00000000  00000000  00057178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000414e0  00000000  00000000  00059410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d272  00000000  00000000  0009a8f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001a3fa7  00000000  00000000  000c7b62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0026bb09  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a0b0  00000000  00000000  0026bb5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800bec0 	.word	0x0800bec0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	0800bec0 	.word	0x0800bec0

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <__LCD_Delay>:


#include "LCD.h"

extern TIM_HandleTypeDef timer;
void __LCD_Delay(uint16_t delay) {
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	80fb      	strh	r3, [r7, #6]

	__HAL_TIM_SET_COUNTER(&timer, 0);
 80005e6:	4b0c      	ldr	r3, [pc, #48]	; (8000618 <__LCD_Delay+0x3c>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	2200      	movs	r2, #0
 80005ec:	625a      	str	r2, [r3, #36]	; 0x24
	uint32_t val = 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	60fb      	str	r3, [r7, #12]
	while (__HAL_TIM_GET_COUNTER(&timer) < delay) {
 80005f2:	e003      	b.n	80005fc <__LCD_Delay+0x20>
		val = __HAL_TIM_GET_COUNTER(&timer);
 80005f4:	4b08      	ldr	r3, [pc, #32]	; (8000618 <__LCD_Delay+0x3c>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005fa:	60fb      	str	r3, [r7, #12]
	while (__HAL_TIM_GET_COUNTER(&timer) < delay) {
 80005fc:	4b06      	ldr	r3, [pc, #24]	; (8000618 <__LCD_Delay+0x3c>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000602:	88fb      	ldrh	r3, [r7, #6]
 8000604:	429a      	cmp	r2, r3
 8000606:	d3f5      	bcc.n	80005f4 <__LCD_Delay+0x18>
	}

}
 8000608:	bf00      	nop
 800060a:	bf00      	nop
 800060c:	3714      	adds	r7, #20
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	240006c4 	.word	0x240006c4

0800061c <__LCD_Write4Bits>:

void __LCD_Write4Bits(uint8_t value) {
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(DATA4_PORT, DATA4_PIN, (value >> 3) & 0x01);
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	08db      	lsrs	r3, r3, #3
 800062a:	b2db      	uxtb	r3, r3
 800062c:	f003 0301 	and.w	r3, r3, #1
 8000630:	b2db      	uxtb	r3, r3
 8000632:	461a      	mov	r2, r3
 8000634:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000638:	481a      	ldr	r0, [pc, #104]	; (80006a4 <__LCD_Write4Bits+0x88>)
 800063a:	f004 fd2d 	bl	8005098 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DATA3_PORT, DATA3_PIN, (value >> 2) & 0x01);
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	089b      	lsrs	r3, r3, #2
 8000642:	b2db      	uxtb	r3, r3
 8000644:	f003 0301 	and.w	r3, r3, #1
 8000648:	b2db      	uxtb	r3, r3
 800064a:	461a      	mov	r2, r3
 800064c:	2102      	movs	r1, #2
 800064e:	4816      	ldr	r0, [pc, #88]	; (80006a8 <__LCD_Write4Bits+0x8c>)
 8000650:	f004 fd22 	bl	8005098 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DATA2_PORT, DATA2_PIN, (value >> 1) & 0x01);
 8000654:	79fb      	ldrb	r3, [r7, #7]
 8000656:	085b      	lsrs	r3, r3, #1
 8000658:	b2db      	uxtb	r3, r3
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	b2db      	uxtb	r3, r3
 8000660:	461a      	mov	r2, r3
 8000662:	2140      	movs	r1, #64	; 0x40
 8000664:	480f      	ldr	r0, [pc, #60]	; (80006a4 <__LCD_Write4Bits+0x88>)
 8000666:	f004 fd17 	bl	8005098 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DATA1_PORT, DATA1_PIN, (value >> 0) & 0x01);
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	f003 0301 	and.w	r3, r3, #1
 8000670:	b2db      	uxtb	r3, r3
 8000672:	461a      	mov	r2, r3
 8000674:	2108      	movs	r1, #8
 8000676:	480d      	ldr	r0, [pc, #52]	; (80006ac <__LCD_Write4Bits+0x90>)
 8000678:	f004 fd0e 	bl	8005098 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(E_PORT, E_PIN, 1);
 800067c:	2201      	movs	r2, #1
 800067e:	2140      	movs	r1, #64	; 0x40
 8000680:	480b      	ldr	r0, [pc, #44]	; (80006b0 <__LCD_Write4Bits+0x94>)
 8000682:	f004 fd09 	bl	8005098 <HAL_GPIO_WritePin>
	__LCD_Delay(120);
 8000686:	2078      	movs	r0, #120	; 0x78
 8000688:	f7ff ffa8 	bl	80005dc <__LCD_Delay>
	HAL_GPIO_WritePin(E_PORT, E_PIN, 0);
 800068c:	2200      	movs	r2, #0
 800068e:	2140      	movs	r1, #64	; 0x40
 8000690:	4807      	ldr	r0, [pc, #28]	; (80006b0 <__LCD_Write4Bits+0x94>)
 8000692:	f004 fd01 	bl	8005098 <HAL_GPIO_WritePin>
	__LCD_Delay(120);
 8000696:	2078      	movs	r0, #120	; 0x78
 8000698:	f7ff ffa0 	bl	80005dc <__LCD_Delay>

}
 800069c:	bf00      	nop
 800069e:	3708      	adds	r7, #8
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	58020000 	.word	0x58020000
 80006a8:	58022800 	.word	0x58022800
 80006ac:	58021800 	.word	0x58021800
 80006b0:	58020400 	.word	0x58020400

080006b4 <__LCD_Send>:

void __LCD_Send(uint8_t value, int state) {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	6039      	str	r1, [r7, #0]
 80006be:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(RS_PORT, RS_PIN, state);
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	461a      	mov	r2, r3
 80006c6:	2180      	movs	r1, #128	; 0x80
 80006c8:	4808      	ldr	r0, [pc, #32]	; (80006ec <__LCD_Send+0x38>)
 80006ca:	f004 fce5 	bl	8005098 <HAL_GPIO_WritePin>
	__LCD_Write4Bits(value >> 4);
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	091b      	lsrs	r3, r3, #4
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	4618      	mov	r0, r3
 80006d6:	f7ff ffa1 	bl	800061c <__LCD_Write4Bits>
	__LCD_Write4Bits(value);
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	4618      	mov	r0, r3
 80006de:	f7ff ff9d 	bl	800061c <__LCD_Write4Bits>

}
 80006e2:	bf00      	nop
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	58020400 	.word	0x58020400

080006f0 <__LCD_Cmd>:

void __LCD_Cmd(uint8_t value) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	71fb      	strb	r3, [r7, #7]
	__LCD_Send(value, 0);
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	2100      	movs	r1, #0
 80006fe:	4618      	mov	r0, r3
 8000700:	f7ff ffd8 	bl	80006b4 <__LCD_Send>
}
 8000704:	bf00      	nop
 8000706:	3708      	adds	r7, #8
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <__LCD_Data>:

void __LCD_Data(uint8_t value) {
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	71fb      	strb	r3, [r7, #7]
	__LCD_Send(value, 1);
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	2101      	movs	r1, #1
 800071a:	4618      	mov	r0, r3
 800071c:	f7ff ffca 	bl	80006b4 <__LCD_Send>
}
 8000720:	bf00      	nop
 8000722:	3708      	adds	r7, #8
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}

08000728 <LCD_Write>:

void LCD_Write(char *str) {
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]

	while (*str) {
 8000730:	e006      	b.n	8000740 <LCD_Write+0x18>
		__LCD_Data(*str++);
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	1c5a      	adds	r2, r3, #1
 8000736:	607a      	str	r2, [r7, #4]
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	4618      	mov	r0, r3
 800073c:	f7ff ffe6 	bl	800070c <__LCD_Data>
	while (*str) {
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d1f4      	bne.n	8000732 <LCD_Write+0xa>
		// HAL_Delay(1000);
	}

}
 8000748:	bf00      	nop
 800074a:	bf00      	nop
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}

08000752 <LCD_Pos_Cursor>:

void LCD_Pos_Cursor(int row, int col) {
 8000752:	b580      	push	{r7, lr}
 8000754:	b082      	sub	sp, #8
 8000756:	af00      	add	r7, sp, #0
 8000758:	6078      	str	r0, [r7, #4]
 800075a:	6039      	str	r1, [r7, #0]

	switch (row) {
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d003      	beq.n	800076a <LCD_Pos_Cursor+0x18>
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	2b01      	cmp	r3, #1
 8000766:	d005      	beq.n	8000774 <LCD_Pos_Cursor+0x22>
 8000768:	e009      	b.n	800077e <LCD_Pos_Cursor+0x2c>
		case 0:
			col |= 0x80;
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000770:	603b      	str	r3, [r7, #0]
	        break;
 8000772:	e004      	b.n	800077e <LCD_Pos_Cursor+0x2c>
	    case 1:
	        col |= 0xC0;
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800077a:	603b      	str	r3, [r7, #0]
	        break;
 800077c:	bf00      	nop
	}
	__LCD_Cmd(col);
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	b2db      	uxtb	r3, r3
 8000782:	4618      	mov	r0, r3
 8000784:	f7ff ffb4 	bl	80006f0 <__LCD_Cmd>

}
 8000788:	bf00      	nop
 800078a:	3708      	adds	r7, #8
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}

08000790 <LCD_Clear>:

void LCD_Clear() {
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0

	__LCD_Cmd(0x01);
 8000794:	2001      	movs	r0, #1
 8000796:	f7ff ffab 	bl	80006f0 <__LCD_Cmd>

}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}

0800079e <LCD_Init>:

void LCD_Init(void) {
 800079e:	b580      	push	{r7, lr}
 80007a0:	af00      	add	r7, sp, #0

	// Init
	__LCD_Delay(50000);
 80007a2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80007a6:	f7ff ff19 	bl	80005dc <__LCD_Delay>
	__LCD_Cmd(0x30);
 80007aa:	2030      	movs	r0, #48	; 0x30
 80007ac:	f7ff ffa0 	bl	80006f0 <__LCD_Cmd>
	__LCD_Delay(4500);
 80007b0:	f241 1094 	movw	r0, #4500	; 0x1194
 80007b4:	f7ff ff12 	bl	80005dc <__LCD_Delay>
	__LCD_Cmd(0x30);
 80007b8:	2030      	movs	r0, #48	; 0x30
 80007ba:	f7ff ff99 	bl	80006f0 <__LCD_Cmd>
	__LCD_Delay(150);
 80007be:	2096      	movs	r0, #150	; 0x96
 80007c0:	f7ff ff0c 	bl	80005dc <__LCD_Delay>
	__LCD_Cmd(0x30);
 80007c4:	2030      	movs	r0, #48	; 0x30
 80007c6:	f7ff ff93 	bl	80006f0 <__LCD_Cmd>

	// Go to 4 bit mode
	__LCD_Delay(10);
 80007ca:	200a      	movs	r0, #10
 80007cc:	f7ff ff06 	bl	80005dc <__LCD_Delay>
	__LCD_Cmd(0x20);
 80007d0:	2020      	movs	r0, #32
 80007d2:	f7ff ff8d 	bl	80006f0 <__LCD_Cmd>
	__LCD_Delay(50);
 80007d6:	2032      	movs	r0, #50	; 0x32
 80007d8:	f7ff ff00 	bl	80005dc <__LCD_Delay>

	// Set display lines and font
	__LCD_Cmd(0x28);
 80007dc:	2028      	movs	r0, #40	; 0x28
 80007de:	f7ff ff87 	bl	80006f0 <__LCD_Cmd>
	__LCD_Delay(50);
 80007e2:	2032      	movs	r0, #50	; 0x32
 80007e4:	f7ff fefa 	bl	80005dc <__LCD_Delay>

	// Display on/off
	__LCD_Cmd(0x08);
 80007e8:	2008      	movs	r0, #8
 80007ea:	f7ff ff81 	bl	80006f0 <__LCD_Cmd>
	__LCD_Delay(50);
 80007ee:	2032      	movs	r0, #50	; 0x32
 80007f0:	f7ff fef4 	bl	80005dc <__LCD_Delay>

	// Display clear
	__LCD_Cmd(0x01);
 80007f4:	2001      	movs	r0, #1
 80007f6:	f7ff ff7b 	bl	80006f0 <__LCD_Cmd>
	__LCD_Delay(1500);
 80007fa:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80007fe:	f7ff feed 	bl	80005dc <__LCD_Delay>

	// Entry mode set
	__LCD_Cmd(0x06);
 8000802:	2006      	movs	r0, #6
 8000804:	f7ff ff74 	bl	80006f0 <__LCD_Cmd>
	__LCD_Delay(50);
 8000808:	2032      	movs	r0, #50	; 0x32
 800080a:	f7ff fee7 	bl	80005dc <__LCD_Delay>

	// Display on/off
	__LCD_Cmd(0x0F);
 800080e:	200f      	movs	r0, #15
 8000810:	f7ff ff6e 	bl	80006f0 <__LCD_Cmd>

}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}

08000818 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800081c:	f002 f8a6 	bl	800296c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000820:	f000 f840 	bl	80008a4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000824:	f000 f8c0 	bl	80009a8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000828:	f000 fe48 	bl	80014bc <MX_GPIO_Init>
  MX_ADC1_Init();
 800082c:	f000 f8ec 	bl	8000a08 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000830:	f000 f960 	bl	8000af4 <MX_ADC2_Init>
  MX_ADC3_Init();
 8000834:	f000 f9c2 	bl	8000bbc <MX_ADC3_Init>
  MX_ETH_Init();
 8000838:	f000 fa22 	bl	8000c80 <MX_ETH_Init>
  MX_FDCAN1_Init();
 800083c:	f000 fa6c 	bl	8000d18 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8000840:	f000 face 	bl	8000de0 <MX_FDCAN2_Init>
  MX_FMC_Init();
 8000844:	f000 fdec 	bl	8001420 <MX_FMC_Init>
  MX_LTDC_Init();
 8000848:	f000 fb2e 	bl	8000ea8 <MX_LTDC_Init>
  MX_RTC_Init();
 800084c:	f000 fbde 	bl	800100c <MX_RTC_Init>
  MX_SAI2_Init();
 8000850:	f000 fc04 	bl	800105c <MX_SAI2_Init>
  MX_SPI2_Init();
 8000854:	f000 fcc0 	bl	80011d8 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 8000858:	f000 fd64 	bl	8001324 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800085c:	f000 fdae 	bl	80013bc <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 8000860:	f000 fd0e 	bl	8001280 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  LCD_Init();
 8000864:	f7ff ff9b 	bl	800079e <LCD_Init>
  HAL_Delay(1000);
 8000868:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800086c:	f002 f910 	bl	8002a90 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(1000);
 8000870:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000874:	f002 f90c 	bl	8002a90 <HAL_Delay>
	  LCD_Write("Pozdravljen,");
 8000878:	4808      	ldr	r0, [pc, #32]	; (800089c <main+0x84>)
 800087a:	f7ff ff55 	bl	8000728 <LCD_Write>
	  LCD_Pos_Cursor(1, 0);
 800087e:	2100      	movs	r1, #0
 8000880:	2001      	movs	r0, #1
 8000882:	f7ff ff66 	bl	8000752 <LCD_Pos_Cursor>
	  LCD_Write("svet!");
 8000886:	4806      	ldr	r0, [pc, #24]	; (80008a0 <main+0x88>)
 8000888:	f7ff ff4e 	bl	8000728 <LCD_Write>
	   HAL_Delay(2000);
 800088c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000890:	f002 f8fe 	bl	8002a90 <HAL_Delay>
	   LCD_Clear();
 8000894:	f7ff ff7c 	bl	8000790 <LCD_Clear>
	  HAL_Delay(1000);
 8000898:	e7ea      	b.n	8000870 <main+0x58>
 800089a:	bf00      	nop
 800089c:	0800bed8 	.word	0x0800bed8
 80008a0:	0800bee8 	.word	0x0800bee8

080008a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b09c      	sub	sp, #112	; 0x70
 80008a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ae:	224c      	movs	r2, #76	; 0x4c
 80008b0:	2100      	movs	r1, #0
 80008b2:	4618      	mov	r0, r3
 80008b4:	f00b fafc 	bl	800beb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b8:	1d3b      	adds	r3, r7, #4
 80008ba:	2220      	movs	r2, #32
 80008bc:	2100      	movs	r1, #0
 80008be:	4618      	mov	r0, r3
 80008c0:	f00b faf6 	bl	800beb0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80008c4:	2002      	movs	r0, #2
 80008c6:	f004 fff1 	bl	80058ac <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008ca:	2300      	movs	r3, #0
 80008cc:	603b      	str	r3, [r7, #0]
 80008ce:	4b34      	ldr	r3, [pc, #208]	; (80009a0 <SystemClock_Config+0xfc>)
 80008d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008d2:	4a33      	ldr	r2, [pc, #204]	; (80009a0 <SystemClock_Config+0xfc>)
 80008d4:	f023 0301 	bic.w	r3, r3, #1
 80008d8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80008da:	4b31      	ldr	r3, [pc, #196]	; (80009a0 <SystemClock_Config+0xfc>)
 80008dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	603b      	str	r3, [r7, #0]
 80008e4:	4b2f      	ldr	r3, [pc, #188]	; (80009a4 <SystemClock_Config+0x100>)
 80008e6:	699b      	ldr	r3, [r3, #24]
 80008e8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008ec:	4a2d      	ldr	r2, [pc, #180]	; (80009a4 <SystemClock_Config+0x100>)
 80008ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008f2:	6193      	str	r3, [r2, #24]
 80008f4:	4b2b      	ldr	r3, [pc, #172]	; (80009a4 <SystemClock_Config+0x100>)
 80008f6:	699b      	ldr	r3, [r3, #24]
 80008f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008fc:	603b      	str	r3, [r7, #0]
 80008fe:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000900:	bf00      	nop
 8000902:	4b28      	ldr	r3, [pc, #160]	; (80009a4 <SystemClock_Config+0x100>)
 8000904:	699b      	ldr	r3, [r3, #24]
 8000906:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800090a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800090e:	d1f8      	bne.n	8000902 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000910:	230b      	movs	r3, #11
 8000912:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000914:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000918:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800091a:	2301      	movs	r3, #1
 800091c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800091e:	2340      	movs	r3, #64	; 0x40
 8000920:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000922:	2301      	movs	r3, #1
 8000924:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000926:	2302      	movs	r3, #2
 8000928:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800092a:	2302      	movs	r3, #2
 800092c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 22;
 800092e:	2316      	movs	r3, #22
 8000930:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 169;
 8000932:	23a9      	movs	r3, #169	; 0xa9
 8000934:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000936:	2302      	movs	r3, #2
 8000938:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800093a:	2304      	movs	r3, #4
 800093c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800093e:	2302      	movs	r3, #2
 8000940:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 8000942:	2300      	movs	r3, #0
 8000944:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000946:	2300      	movs	r3, #0
 8000948:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800094a:	2300      	movs	r3, #0
 800094c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800094e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000952:	4618      	mov	r0, r3
 8000954:	f004 fff4 	bl	8005940 <HAL_RCC_OscConfig>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800095e:	f000 ffab 	bl	80018b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000962:	233f      	movs	r3, #63	; 0x3f
 8000964:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000966:	2300      	movs	r3, #0
 8000968:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800096a:	2300      	movs	r3, #0
 800096c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800096e:	2300      	movs	r3, #0
 8000970:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000972:	2300      	movs	r3, #0
 8000974:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000976:	2300      	movs	r3, #0
 8000978:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800097a:	2300      	movs	r3, #0
 800097c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800097e:	2300      	movs	r3, #0
 8000980:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	2101      	movs	r1, #1
 8000986:	4618      	mov	r0, r3
 8000988:	f005 fc34 	bl	80061f4 <HAL_RCC_ClockConfig>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000992:	f000 ff91 	bl	80018b8 <Error_Handler>
  }
}
 8000996:	bf00      	nop
 8000998:	3770      	adds	r7, #112	; 0x70
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	58000400 	.word	0x58000400
 80009a4:	58024800 	.word	0x58024800

080009a8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b0b0      	sub	sp, #192	; 0xc0
 80009ac:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009ae:	463b      	mov	r3, r7
 80009b0:	22c0      	movs	r2, #192	; 0xc0
 80009b2:	2100      	movs	r1, #0
 80009b4:	4618      	mov	r0, r3
 80009b6:	f00b fa7b 	bl	800beb0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80009ba:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80009be:	f04f 0300 	mov.w	r3, #0
 80009c2:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80009c6:	2302      	movs	r3, #2
 80009c8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 80009ca:	230c      	movs	r3, #12
 80009cc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 80009ce:	2305      	movs	r3, #5
 80009d0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80009d2:	2302      	movs	r3, #2
 80009d4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80009d6:	2302      	movs	r3, #2
 80009d8:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80009da:	23c0      	movs	r3, #192	; 0xc0
 80009dc:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80009de:	2320      	movs	r3, #32
 80009e0:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80009e2:	2300      	movs	r3, #0
 80009e4:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80009e6:	2300      	movs	r3, #0
 80009e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009ec:	463b      	mov	r3, r7
 80009ee:	4618      	mov	r0, r3
 80009f0:	f005 ff8c 	bl	800690c <HAL_RCCEx_PeriphCLKConfig>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80009fa:	f000 ff5d 	bl	80018b8 <Error_Handler>
  }
}
 80009fe:	bf00      	nop
 8000a00:	37c0      	adds	r7, #192	; 0xc0
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
	...

08000a08 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b08a      	sub	sp, #40	; 0x28
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a0e:	f107 031c 	add.w	r3, r7, #28
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	605a      	str	r2, [r3, #4]
 8000a18:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a1a:	463b      	mov	r3, r7
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
 8000a28:	615a      	str	r2, [r3, #20]
 8000a2a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a2c:	4b2f      	ldr	r3, [pc, #188]	; (8000aec <MX_ADC1_Init+0xe4>)
 8000a2e:	4a30      	ldr	r2, [pc, #192]	; (8000af0 <MX_ADC1_Init+0xe8>)
 8000a30:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a32:	4b2e      	ldr	r3, [pc, #184]	; (8000aec <MX_ADC1_Init+0xe4>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000a38:	4b2c      	ldr	r3, [pc, #176]	; (8000aec <MX_ADC1_Init+0xe4>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a3e:	4b2b      	ldr	r3, [pc, #172]	; (8000aec <MX_ADC1_Init+0xe4>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a44:	4b29      	ldr	r3, [pc, #164]	; (8000aec <MX_ADC1_Init+0xe4>)
 8000a46:	2204      	movs	r2, #4
 8000a48:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a4a:	4b28      	ldr	r3, [pc, #160]	; (8000aec <MX_ADC1_Init+0xe4>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a50:	4b26      	ldr	r3, [pc, #152]	; (8000aec <MX_ADC1_Init+0xe4>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000a56:	4b25      	ldr	r3, [pc, #148]	; (8000aec <MX_ADC1_Init+0xe4>)
 8000a58:	2201      	movs	r2, #1
 8000a5a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a5c:	4b23      	ldr	r3, [pc, #140]	; (8000aec <MX_ADC1_Init+0xe4>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a62:	4b22      	ldr	r3, [pc, #136]	; (8000aec <MX_ADC1_Init+0xe4>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a68:	4b20      	ldr	r3, [pc, #128]	; (8000aec <MX_ADC1_Init+0xe4>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000a6e:	4b1f      	ldr	r3, [pc, #124]	; (8000aec <MX_ADC1_Init+0xe4>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a74:	4b1d      	ldr	r3, [pc, #116]	; (8000aec <MX_ADC1_Init+0xe4>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000a7a:	4b1c      	ldr	r3, [pc, #112]	; (8000aec <MX_ADC1_Init+0xe4>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000a80:	4b1a      	ldr	r3, [pc, #104]	; (8000aec <MX_ADC1_Init+0xe4>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a88:	4818      	ldr	r0, [pc, #96]	; (8000aec <MX_ADC1_Init+0xe4>)
 8000a8a:	f002 f9e7 	bl	8002e5c <HAL_ADC_Init>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000a94:	f000 ff10 	bl	80018b8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a9c:	f107 031c 	add.w	r3, r7, #28
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4812      	ldr	r0, [pc, #72]	; (8000aec <MX_ADC1_Init+0xe4>)
 8000aa4:	f002 fffe 	bl	8003aa4 <HAL_ADCEx_MultiModeConfigChannel>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000aae:	f000 ff03 	bl	80018b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ab6:	2306      	movs	r3, #6
 8000ab8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000aba:	2300      	movs	r3, #0
 8000abc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000abe:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000ac2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ac4:	2304      	movs	r3, #4
 8000ac6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000acc:	2300      	movs	r3, #0
 8000ace:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ad0:	463b      	mov	r3, r7
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4805      	ldr	r0, [pc, #20]	; (8000aec <MX_ADC1_Init+0xe4>)
 8000ad6:	f002 fb63 	bl	80031a0 <HAL_ADC_ConfigChannel>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000ae0:	f000 feea 	bl	80018b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ae4:	bf00      	nop
 8000ae6:	3728      	adds	r7, #40	; 0x28
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	24000124 	.word	0x24000124
 8000af0:	40022000 	.word	0x40022000

08000af4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b088      	sub	sp, #32
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000afa:	1d3b      	adds	r3, r7, #4
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
 8000b06:	611a      	str	r2, [r3, #16]
 8000b08:	615a      	str	r2, [r3, #20]
 8000b0a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000b0c:	4b29      	ldr	r3, [pc, #164]	; (8000bb4 <MX_ADC2_Init+0xc0>)
 8000b0e:	4a2a      	ldr	r2, [pc, #168]	; (8000bb8 <MX_ADC2_Init+0xc4>)
 8000b10:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b12:	4b28      	ldr	r3, [pc, #160]	; (8000bb4 <MX_ADC2_Init+0xc0>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000b18:	4b26      	ldr	r3, [pc, #152]	; (8000bb4 <MX_ADC2_Init+0xc0>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b1e:	4b25      	ldr	r3, [pc, #148]	; (8000bb4 <MX_ADC2_Init+0xc0>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b24:	4b23      	ldr	r3, [pc, #140]	; (8000bb4 <MX_ADC2_Init+0xc0>)
 8000b26:	2204      	movs	r2, #4
 8000b28:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000b2a:	4b22      	ldr	r3, [pc, #136]	; (8000bb4 <MX_ADC2_Init+0xc0>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000b30:	4b20      	ldr	r3, [pc, #128]	; (8000bb4 <MX_ADC2_Init+0xc0>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000b36:	4b1f      	ldr	r3, [pc, #124]	; (8000bb4 <MX_ADC2_Init+0xc0>)
 8000b38:	2201      	movs	r2, #1
 8000b3a:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000b3c:	4b1d      	ldr	r3, [pc, #116]	; (8000bb4 <MX_ADC2_Init+0xc0>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b42:	4b1c      	ldr	r3, [pc, #112]	; (8000bb4 <MX_ADC2_Init+0xc0>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b48:	4b1a      	ldr	r3, [pc, #104]	; (8000bb4 <MX_ADC2_Init+0xc0>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000b4e:	4b19      	ldr	r3, [pc, #100]	; (8000bb4 <MX_ADC2_Init+0xc0>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b54:	4b17      	ldr	r3, [pc, #92]	; (8000bb4 <MX_ADC2_Init+0xc0>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b5a:	4b16      	ldr	r3, [pc, #88]	; (8000bb4 <MX_ADC2_Init+0xc0>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000b60:	4b14      	ldr	r3, [pc, #80]	; (8000bb4 <MX_ADC2_Init+0xc0>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000b68:	4812      	ldr	r0, [pc, #72]	; (8000bb4 <MX_ADC2_Init+0xc0>)
 8000b6a:	f002 f977 	bl	8002e5c <HAL_ADC_Init>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8000b74:	f000 fea0 	bl	80018b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b7c:	2306      	movs	r3, #6
 8000b7e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b80:	2300      	movs	r3, #0
 8000b82:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b84:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000b88:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b8a:	2304      	movs	r3, #4
 8000b8c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b92:	2300      	movs	r3, #0
 8000b94:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b96:	1d3b      	adds	r3, r7, #4
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4806      	ldr	r0, [pc, #24]	; (8000bb4 <MX_ADC2_Init+0xc0>)
 8000b9c:	f002 fb00 	bl	80031a0 <HAL_ADC_ConfigChannel>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000ba6:	f000 fe87 	bl	80018b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000baa:	bf00      	nop
 8000bac:	3720      	adds	r7, #32
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	24000188 	.word	0x24000188
 8000bb8:	40022100 	.word	0x40022100

08000bbc <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b088      	sub	sp, #32
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bc2:	1d3b      	adds	r3, r7, #4
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]
 8000bd0:	615a      	str	r2, [r3, #20]
 8000bd2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000bd4:	4b27      	ldr	r3, [pc, #156]	; (8000c74 <MX_ADC3_Init+0xb8>)
 8000bd6:	4a28      	ldr	r2, [pc, #160]	; (8000c78 <MX_ADC3_Init+0xbc>)
 8000bd8:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000bda:	4b26      	ldr	r3, [pc, #152]	; (8000c74 <MX_ADC3_Init+0xb8>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000be0:	4b24      	ldr	r3, [pc, #144]	; (8000c74 <MX_ADC3_Init+0xb8>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000be6:	4b23      	ldr	r3, [pc, #140]	; (8000c74 <MX_ADC3_Init+0xb8>)
 8000be8:	2204      	movs	r2, #4
 8000bea:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000bec:	4b21      	ldr	r3, [pc, #132]	; (8000c74 <MX_ADC3_Init+0xb8>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000bf2:	4b20      	ldr	r3, [pc, #128]	; (8000c74 <MX_ADC3_Init+0xb8>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000bf8:	4b1e      	ldr	r3, [pc, #120]	; (8000c74 <MX_ADC3_Init+0xb8>)
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000bfe:	4b1d      	ldr	r3, [pc, #116]	; (8000c74 <MX_ADC3_Init+0xb8>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c04:	4b1b      	ldr	r3, [pc, #108]	; (8000c74 <MX_ADC3_Init+0xb8>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c0a:	4b1a      	ldr	r3, [pc, #104]	; (8000c74 <MX_ADC3_Init+0xb8>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000c10:	4b18      	ldr	r3, [pc, #96]	; (8000c74 <MX_ADC3_Init+0xb8>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c16:	4b17      	ldr	r3, [pc, #92]	; (8000c74 <MX_ADC3_Init+0xb8>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000c1c:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <MX_ADC3_Init+0xb8>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000c22:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <MX_ADC3_Init+0xb8>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000c2a:	4812      	ldr	r0, [pc, #72]	; (8000c74 <MX_ADC3_Init+0xb8>)
 8000c2c:	f002 f916 	bl	8002e5c <HAL_ADC_Init>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_ADC3_Init+0x7e>
  {
    Error_Handler();
 8000c36:	f000 fe3f 	bl	80018b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000c3a:	4b10      	ldr	r3, [pc, #64]	; (8000c7c <MX_ADC3_Init+0xc0>)
 8000c3c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c3e:	2306      	movs	r3, #6
 8000c40:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c42:	2300      	movs	r3, #0
 8000c44:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c46:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000c4a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c4c:	2304      	movs	r3, #4
 8000c4e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000c50:	2300      	movs	r3, #0
 8000c52:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000c54:	2300      	movs	r3, #0
 8000c56:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c58:	1d3b      	adds	r3, r7, #4
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4805      	ldr	r0, [pc, #20]	; (8000c74 <MX_ADC3_Init+0xb8>)
 8000c5e:	f002 fa9f 	bl	80031a0 <HAL_ADC_ConfigChannel>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8000c68:	f000 fe26 	bl	80018b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000c6c:	bf00      	nop
 8000c6e:	3720      	adds	r7, #32
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	240001ec 	.word	0x240001ec
 8000c78:	58026000 	.word	0x58026000
 8000c7c:	1d500080 	.word	0x1d500080

08000c80 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000c84:	4b1e      	ldr	r3, [pc, #120]	; (8000d00 <MX_ETH_Init+0x80>)
 8000c86:	4a1f      	ldr	r2, [pc, #124]	; (8000d04 <MX_ETH_Init+0x84>)
 8000c88:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000c8a:	4b1f      	ldr	r3, [pc, #124]	; (8000d08 <MX_ETH_Init+0x88>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000c90:	4b1d      	ldr	r3, [pc, #116]	; (8000d08 <MX_ETH_Init+0x88>)
 8000c92:	2280      	movs	r2, #128	; 0x80
 8000c94:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000c96:	4b1c      	ldr	r3, [pc, #112]	; (8000d08 <MX_ETH_Init+0x88>)
 8000c98:	22e1      	movs	r2, #225	; 0xe1
 8000c9a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000c9c:	4b1a      	ldr	r3, [pc, #104]	; (8000d08 <MX_ETH_Init+0x88>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000ca2:	4b19      	ldr	r3, [pc, #100]	; (8000d08 <MX_ETH_Init+0x88>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000ca8:	4b17      	ldr	r3, [pc, #92]	; (8000d08 <MX_ETH_Init+0x88>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000cae:	4b14      	ldr	r3, [pc, #80]	; (8000d00 <MX_ETH_Init+0x80>)
 8000cb0:	4a15      	ldr	r2, [pc, #84]	; (8000d08 <MX_ETH_Init+0x88>)
 8000cb2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_MII_MODE;
 8000cb4:	4b12      	ldr	r3, [pc, #72]	; (8000d00 <MX_ETH_Init+0x80>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000cba:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <MX_ETH_Init+0x80>)
 8000cbc:	4a13      	ldr	r2, [pc, #76]	; (8000d0c <MX_ETH_Init+0x8c>)
 8000cbe:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000cc0:	4b0f      	ldr	r3, [pc, #60]	; (8000d00 <MX_ETH_Init+0x80>)
 8000cc2:	4a13      	ldr	r2, [pc, #76]	; (8000d10 <MX_ETH_Init+0x90>)
 8000cc4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000cc6:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <MX_ETH_Init+0x80>)
 8000cc8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000ccc:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000cce:	480c      	ldr	r0, [pc, #48]	; (8000d00 <MX_ETH_Init+0x80>)
 8000cd0:	f003 f8aa 	bl	8003e28 <HAL_ETH_Init>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000cda:	f000 fded 	bl	80018b8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000cde:	2238      	movs	r2, #56	; 0x38
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	480c      	ldr	r0, [pc, #48]	; (8000d14 <MX_ETH_Init+0x94>)
 8000ce4:	f00b f8e4 	bl	800beb0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000ce8:	4b0a      	ldr	r3, [pc, #40]	; (8000d14 <MX_ETH_Init+0x94>)
 8000cea:	2221      	movs	r2, #33	; 0x21
 8000cec:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000cee:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <MX_ETH_Init+0x94>)
 8000cf0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000cf4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000cf6:	4b07      	ldr	r3, [pc, #28]	; (8000d14 <MX_ETH_Init+0x94>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000cfc:	bf00      	nop
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	24000250 	.word	0x24000250
 8000d04:	40028000 	.word	0x40028000
 8000d08:	24000ce4 	.word	0x24000ce4
 8000d0c:	24000070 	.word	0x24000070
 8000d10:	24000010 	.word	0x24000010
 8000d14:	240000ec 	.word	0x240000ec

08000d18 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000d1c:	4b2e      	ldr	r3, [pc, #184]	; (8000dd8 <MX_FDCAN1_Init+0xc0>)
 8000d1e:	4a2f      	ldr	r2, [pc, #188]	; (8000ddc <MX_FDCAN1_Init+0xc4>)
 8000d20:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000d22:	4b2d      	ldr	r3, [pc, #180]	; (8000dd8 <MX_FDCAN1_Init+0xc0>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000d28:	4b2b      	ldr	r3, [pc, #172]	; (8000dd8 <MX_FDCAN1_Init+0xc0>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000d2e:	4b2a      	ldr	r3, [pc, #168]	; (8000dd8 <MX_FDCAN1_Init+0xc0>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000d34:	4b28      	ldr	r3, [pc, #160]	; (8000dd8 <MX_FDCAN1_Init+0xc0>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000d3a:	4b27      	ldr	r3, [pc, #156]	; (8000dd8 <MX_FDCAN1_Init+0xc0>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000d40:	4b25      	ldr	r3, [pc, #148]	; (8000dd8 <MX_FDCAN1_Init+0xc0>)
 8000d42:	2210      	movs	r2, #16
 8000d44:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000d46:	4b24      	ldr	r3, [pc, #144]	; (8000dd8 <MX_FDCAN1_Init+0xc0>)
 8000d48:	2201      	movs	r2, #1
 8000d4a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000d4c:	4b22      	ldr	r3, [pc, #136]	; (8000dd8 <MX_FDCAN1_Init+0xc0>)
 8000d4e:	2202      	movs	r2, #2
 8000d50:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000d52:	4b21      	ldr	r3, [pc, #132]	; (8000dd8 <MX_FDCAN1_Init+0xc0>)
 8000d54:	2202      	movs	r2, #2
 8000d56:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000d58:	4b1f      	ldr	r3, [pc, #124]	; (8000dd8 <MX_FDCAN1_Init+0xc0>)
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000d5e:	4b1e      	ldr	r3, [pc, #120]	; (8000dd8 <MX_FDCAN1_Init+0xc0>)
 8000d60:	2201      	movs	r2, #1
 8000d62:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000d64:	4b1c      	ldr	r3, [pc, #112]	; (8000dd8 <MX_FDCAN1_Init+0xc0>)
 8000d66:	2201      	movs	r2, #1
 8000d68:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000d6a:	4b1b      	ldr	r3, [pc, #108]	; (8000dd8 <MX_FDCAN1_Init+0xc0>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000d70:	4b19      	ldr	r3, [pc, #100]	; (8000dd8 <MX_FDCAN1_Init+0xc0>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000d76:	4b18      	ldr	r3, [pc, #96]	; (8000dd8 <MX_FDCAN1_Init+0xc0>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000d7c:	4b16      	ldr	r3, [pc, #88]	; (8000dd8 <MX_FDCAN1_Init+0xc0>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000d82:	4b15      	ldr	r3, [pc, #84]	; (8000dd8 <MX_FDCAN1_Init+0xc0>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000d88:	4b13      	ldr	r3, [pc, #76]	; (8000dd8 <MX_FDCAN1_Init+0xc0>)
 8000d8a:	2204      	movs	r2, #4
 8000d8c:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000d8e:	4b12      	ldr	r3, [pc, #72]	; (8000dd8 <MX_FDCAN1_Init+0xc0>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000d94:	4b10      	ldr	r3, [pc, #64]	; (8000dd8 <MX_FDCAN1_Init+0xc0>)
 8000d96:	2204      	movs	r2, #4
 8000d98:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000d9a:	4b0f      	ldr	r3, [pc, #60]	; (8000dd8 <MX_FDCAN1_Init+0xc0>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000da0:	4b0d      	ldr	r3, [pc, #52]	; (8000dd8 <MX_FDCAN1_Init+0xc0>)
 8000da2:	2204      	movs	r2, #4
 8000da4:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000da6:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <MX_FDCAN1_Init+0xc0>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000dac:	4b0a      	ldr	r3, [pc, #40]	; (8000dd8 <MX_FDCAN1_Init+0xc0>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000db2:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <MX_FDCAN1_Init+0xc0>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000db8:	4b07      	ldr	r3, [pc, #28]	; (8000dd8 <MX_FDCAN1_Init+0xc0>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000dbe:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <MX_FDCAN1_Init+0xc0>)
 8000dc0:	2204      	movs	r2, #4
 8000dc2:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000dc4:	4804      	ldr	r0, [pc, #16]	; (8000dd8 <MX_FDCAN1_Init+0xc0>)
 8000dc6:	f003 fc53 	bl	8004670 <HAL_FDCAN_Init>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000dd0:	f000 fd72 	bl	80018b8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	24000300 	.word	0x24000300
 8000ddc:	4000a000 	.word	0x4000a000

08000de0 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000de4:	4b2e      	ldr	r3, [pc, #184]	; (8000ea0 <MX_FDCAN2_Init+0xc0>)
 8000de6:	4a2f      	ldr	r2, [pc, #188]	; (8000ea4 <MX_FDCAN2_Init+0xc4>)
 8000de8:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000dea:	4b2d      	ldr	r3, [pc, #180]	; (8000ea0 <MX_FDCAN2_Init+0xc0>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000df0:	4b2b      	ldr	r3, [pc, #172]	; (8000ea0 <MX_FDCAN2_Init+0xc0>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000df6:	4b2a      	ldr	r3, [pc, #168]	; (8000ea0 <MX_FDCAN2_Init+0xc0>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000dfc:	4b28      	ldr	r3, [pc, #160]	; (8000ea0 <MX_FDCAN2_Init+0xc0>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000e02:	4b27      	ldr	r3, [pc, #156]	; (8000ea0 <MX_FDCAN2_Init+0xc0>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8000e08:	4b25      	ldr	r3, [pc, #148]	; (8000ea0 <MX_FDCAN2_Init+0xc0>)
 8000e0a:	2210      	movs	r2, #16
 8000e0c:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000e0e:	4b24      	ldr	r3, [pc, #144]	; (8000ea0 <MX_FDCAN2_Init+0xc0>)
 8000e10:	2201      	movs	r2, #1
 8000e12:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000e14:	4b22      	ldr	r3, [pc, #136]	; (8000ea0 <MX_FDCAN2_Init+0xc0>)
 8000e16:	2202      	movs	r2, #2
 8000e18:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000e1a:	4b21      	ldr	r3, [pc, #132]	; (8000ea0 <MX_FDCAN2_Init+0xc0>)
 8000e1c:	2202      	movs	r2, #2
 8000e1e:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000e20:	4b1f      	ldr	r3, [pc, #124]	; (8000ea0 <MX_FDCAN2_Init+0xc0>)
 8000e22:	2201      	movs	r2, #1
 8000e24:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000e26:	4b1e      	ldr	r3, [pc, #120]	; (8000ea0 <MX_FDCAN2_Init+0xc0>)
 8000e28:	2201      	movs	r2, #1
 8000e2a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000e2c:	4b1c      	ldr	r3, [pc, #112]	; (8000ea0 <MX_FDCAN2_Init+0xc0>)
 8000e2e:	2201      	movs	r2, #1
 8000e30:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000e32:	4b1b      	ldr	r3, [pc, #108]	; (8000ea0 <MX_FDCAN2_Init+0xc0>)
 8000e34:	2201      	movs	r2, #1
 8000e36:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000e38:	4b19      	ldr	r3, [pc, #100]	; (8000ea0 <MX_FDCAN2_Init+0xc0>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000e3e:	4b18      	ldr	r3, [pc, #96]	; (8000ea0 <MX_FDCAN2_Init+0xc0>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000e44:	4b16      	ldr	r3, [pc, #88]	; (8000ea0 <MX_FDCAN2_Init+0xc0>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000e4a:	4b15      	ldr	r3, [pc, #84]	; (8000ea0 <MX_FDCAN2_Init+0xc0>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000e50:	4b13      	ldr	r3, [pc, #76]	; (8000ea0 <MX_FDCAN2_Init+0xc0>)
 8000e52:	2204      	movs	r2, #4
 8000e54:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000e56:	4b12      	ldr	r3, [pc, #72]	; (8000ea0 <MX_FDCAN2_Init+0xc0>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000e5c:	4b10      	ldr	r3, [pc, #64]	; (8000ea0 <MX_FDCAN2_Init+0xc0>)
 8000e5e:	2204      	movs	r2, #4
 8000e60:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000e62:	4b0f      	ldr	r3, [pc, #60]	; (8000ea0 <MX_FDCAN2_Init+0xc0>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000e68:	4b0d      	ldr	r3, [pc, #52]	; (8000ea0 <MX_FDCAN2_Init+0xc0>)
 8000e6a:	2204      	movs	r2, #4
 8000e6c:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000e6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <MX_FDCAN2_Init+0xc0>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000e74:	4b0a      	ldr	r3, [pc, #40]	; (8000ea0 <MX_FDCAN2_Init+0xc0>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000e7a:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <MX_FDCAN2_Init+0xc0>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000e80:	4b07      	ldr	r3, [pc, #28]	; (8000ea0 <MX_FDCAN2_Init+0xc0>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <MX_FDCAN2_Init+0xc0>)
 8000e88:	2204      	movs	r2, #4
 8000e8a:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000e8c:	4804      	ldr	r0, [pc, #16]	; (8000ea0 <MX_FDCAN2_Init+0xc0>)
 8000e8e:	f003 fbef 	bl	8004670 <HAL_FDCAN_Init>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000e98:	f000 fd0e 	bl	80018b8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000e9c:	bf00      	nop
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	240003a0 	.word	0x240003a0
 8000ea4:	4000a400 	.word	0x4000a400

08000ea8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b09a      	sub	sp, #104	; 0x68
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000eae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000eb2:	2234      	movs	r2, #52	; 0x34
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f00a fffa 	bl	800beb0 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000ebc:	463b      	mov	r3, r7
 8000ebe:	2234      	movs	r2, #52	; 0x34
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f00a fff4 	bl	800beb0 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000ec8:	4b4e      	ldr	r3, [pc, #312]	; (8001004 <MX_LTDC_Init+0x15c>)
 8000eca:	4a4f      	ldr	r2, [pc, #316]	; (8001008 <MX_LTDC_Init+0x160>)
 8000ecc:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000ece:	4b4d      	ldr	r3, [pc, #308]	; (8001004 <MX_LTDC_Init+0x15c>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000ed4:	4b4b      	ldr	r3, [pc, #300]	; (8001004 <MX_LTDC_Init+0x15c>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000eda:	4b4a      	ldr	r3, [pc, #296]	; (8001004 <MX_LTDC_Init+0x15c>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000ee0:	4b48      	ldr	r3, [pc, #288]	; (8001004 <MX_LTDC_Init+0x15c>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8000ee6:	4b47      	ldr	r3, [pc, #284]	; (8001004 <MX_LTDC_Init+0x15c>)
 8000ee8:	2207      	movs	r2, #7
 8000eea:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8000eec:	4b45      	ldr	r3, [pc, #276]	; (8001004 <MX_LTDC_Init+0x15c>)
 8000eee:	2203      	movs	r2, #3
 8000ef0:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8000ef2:	4b44      	ldr	r3, [pc, #272]	; (8001004 <MX_LTDC_Init+0x15c>)
 8000ef4:	220e      	movs	r2, #14
 8000ef6:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8000ef8:	4b42      	ldr	r3, [pc, #264]	; (8001004 <MX_LTDC_Init+0x15c>)
 8000efa:	2205      	movs	r2, #5
 8000efc:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8000efe:	4b41      	ldr	r3, [pc, #260]	; (8001004 <MX_LTDC_Init+0x15c>)
 8000f00:	f240 228e 	movw	r2, #654	; 0x28e
 8000f04:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8000f06:	4b3f      	ldr	r3, [pc, #252]	; (8001004 <MX_LTDC_Init+0x15c>)
 8000f08:	f240 12e5 	movw	r2, #485	; 0x1e5
 8000f0c:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 8000f0e:	4b3d      	ldr	r3, [pc, #244]	; (8001004 <MX_LTDC_Init+0x15c>)
 8000f10:	f44f 7225 	mov.w	r2, #660	; 0x294
 8000f14:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 8000f16:	4b3b      	ldr	r3, [pc, #236]	; (8001004 <MX_LTDC_Init+0x15c>)
 8000f18:	f240 12e7 	movw	r2, #487	; 0x1e7
 8000f1c:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000f1e:	4b39      	ldr	r3, [pc, #228]	; (8001004 <MX_LTDC_Init+0x15c>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000f26:	4b37      	ldr	r3, [pc, #220]	; (8001004 <MX_LTDC_Init+0x15c>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000f2e:	4b35      	ldr	r3, [pc, #212]	; (8001004 <MX_LTDC_Init+0x15c>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000f36:	4833      	ldr	r0, [pc, #204]	; (8001004 <MX_LTDC_Init+0x15c>)
 8000f38:	f004 f8c8 	bl	80050cc <HAL_LTDC_Init>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8000f42:	f000 fcb9 	bl	80018b8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000f56:	2300      	movs	r3, #0
 8000f58:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000f62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f66:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000f68:	2305      	movs	r3, #5
 8000f6a:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8000f74:	2300      	movs	r3, #0
 8000f76:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000f8a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f8e:	2200      	movs	r2, #0
 8000f90:	4619      	mov	r1, r3
 8000f92:	481c      	ldr	r0, [pc, #112]	; (8001004 <MX_LTDC_Init+0x15c>)
 8000f94:	f004 f96a 	bl	800526c <HAL_LTDC_ConfigLayer>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8000f9e:	f000 fc8b 	bl	80018b8 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000fbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fc2:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000fc4:	2305      	movs	r3, #5
 8000fc6:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000fe6:	463b      	mov	r3, r7
 8000fe8:	2201      	movs	r2, #1
 8000fea:	4619      	mov	r1, r3
 8000fec:	4805      	ldr	r0, [pc, #20]	; (8001004 <MX_LTDC_Init+0x15c>)
 8000fee:	f004 f93d 	bl	800526c <HAL_LTDC_ConfigLayer>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8000ff8:	f000 fc5e 	bl	80018b8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000ffc:	bf00      	nop
 8000ffe:	3768      	adds	r7, #104	; 0x68
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	24000440 	.word	0x24000440
 8001008:	50001000 	.word	0x50001000

0800100c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001010:	4b10      	ldr	r3, [pc, #64]	; (8001054 <MX_RTC_Init+0x48>)
 8001012:	4a11      	ldr	r2, [pc, #68]	; (8001058 <MX_RTC_Init+0x4c>)
 8001014:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001016:	4b0f      	ldr	r3, [pc, #60]	; (8001054 <MX_RTC_Init+0x48>)
 8001018:	2200      	movs	r2, #0
 800101a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800101c:	4b0d      	ldr	r3, [pc, #52]	; (8001054 <MX_RTC_Init+0x48>)
 800101e:	227f      	movs	r2, #127	; 0x7f
 8001020:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001022:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <MX_RTC_Init+0x48>)
 8001024:	22ff      	movs	r2, #255	; 0xff
 8001026:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001028:	4b0a      	ldr	r3, [pc, #40]	; (8001054 <MX_RTC_Init+0x48>)
 800102a:	2200      	movs	r2, #0
 800102c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800102e:	4b09      	ldr	r3, [pc, #36]	; (8001054 <MX_RTC_Init+0x48>)
 8001030:	2200      	movs	r2, #0
 8001032:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001034:	4b07      	ldr	r3, [pc, #28]	; (8001054 <MX_RTC_Init+0x48>)
 8001036:	2200      	movs	r2, #0
 8001038:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800103a:	4b06      	ldr	r3, [pc, #24]	; (8001054 <MX_RTC_Init+0x48>)
 800103c:	2200      	movs	r2, #0
 800103e:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001040:	4804      	ldr	r0, [pc, #16]	; (8001054 <MX_RTC_Init+0x48>)
 8001042:	f008 f961 	bl	8009308 <HAL_RTC_Init>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 800104c:	f000 fc34 	bl	80018b8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001050:	bf00      	nop
 8001052:	bd80      	pop	{r7, pc}
 8001054:	240004e8 	.word	0x240004e8
 8001058:	58004000 	.word	0x58004000

0800105c <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001060:	4b58      	ldr	r3, [pc, #352]	; (80011c4 <MX_SAI2_Init+0x168>)
 8001062:	4a59      	ldr	r2, [pc, #356]	; (80011c8 <MX_SAI2_Init+0x16c>)
 8001064:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001066:	4b57      	ldr	r3, [pc, #348]	; (80011c4 <MX_SAI2_Init+0x168>)
 8001068:	2200      	movs	r2, #0
 800106a:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 800106c:	4b55      	ldr	r3, [pc, #340]	; (80011c4 <MX_SAI2_Init+0x168>)
 800106e:	2200      	movs	r2, #0
 8001070:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8001072:	4b54      	ldr	r3, [pc, #336]	; (80011c4 <MX_SAI2_Init+0x168>)
 8001074:	2240      	movs	r2, #64	; 0x40
 8001076:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001078:	4b52      	ldr	r3, [pc, #328]	; (80011c4 <MX_SAI2_Init+0x168>)
 800107a:	2200      	movs	r2, #0
 800107c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800107e:	4b51      	ldr	r3, [pc, #324]	; (80011c4 <MX_SAI2_Init+0x168>)
 8001080:	2200      	movs	r2, #0
 8001082:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001084:	4b4f      	ldr	r3, [pc, #316]	; (80011c4 <MX_SAI2_Init+0x168>)
 8001086:	2200      	movs	r2, #0
 8001088:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800108a:	4b4e      	ldr	r3, [pc, #312]	; (80011c4 <MX_SAI2_Init+0x168>)
 800108c:	2200      	movs	r2, #0
 800108e:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001090:	4b4c      	ldr	r3, [pc, #304]	; (80011c4 <MX_SAI2_Init+0x168>)
 8001092:	2200      	movs	r2, #0
 8001094:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001096:	4b4b      	ldr	r3, [pc, #300]	; (80011c4 <MX_SAI2_Init+0x168>)
 8001098:	2200      	movs	r2, #0
 800109a:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 800109c:	4b49      	ldr	r3, [pc, #292]	; (80011c4 <MX_SAI2_Init+0x168>)
 800109e:	4a4b      	ldr	r2, [pc, #300]	; (80011cc <MX_SAI2_Init+0x170>)
 80010a0:	621a      	str	r2, [r3, #32]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80010a2:	4b48      	ldr	r3, [pc, #288]	; (80011c4 <MX_SAI2_Init+0x168>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80010a8:	4b46      	ldr	r3, [pc, #280]	; (80011c4 <MX_SAI2_Init+0x168>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80010ae:	4b45      	ldr	r3, [pc, #276]	; (80011c4 <MX_SAI2_Init+0x168>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80010b4:	4b43      	ldr	r3, [pc, #268]	; (80011c4 <MX_SAI2_Init+0x168>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.PdmInit.Activation = DISABLE;
 80010ba:	4b42      	ldr	r3, [pc, #264]	; (80011c4 <MX_SAI2_Init+0x168>)
 80010bc:	2200      	movs	r2, #0
 80010be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.PdmInit.MicPairsNbr = 1;
 80010c2:	4b40      	ldr	r3, [pc, #256]	; (80011c4 <MX_SAI2_Init+0x168>)
 80010c4:	2201      	movs	r2, #1
 80010c6:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 80010c8:	4b3e      	ldr	r3, [pc, #248]	; (80011c4 <MX_SAI2_Init+0x168>)
 80010ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010ce:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.FrameLength = 8;
 80010d0:	4b3c      	ldr	r3, [pc, #240]	; (80011c4 <MX_SAI2_Init+0x168>)
 80010d2:	2208      	movs	r2, #8
 80010d4:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 80010d6:	4b3b      	ldr	r3, [pc, #236]	; (80011c4 <MX_SAI2_Init+0x168>)
 80010d8:	2201      	movs	r2, #1
 80010da:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80010dc:	4b39      	ldr	r3, [pc, #228]	; (80011c4 <MX_SAI2_Init+0x168>)
 80010de:	2200      	movs	r2, #0
 80010e0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80010e2:	4b38      	ldr	r3, [pc, #224]	; (80011c4 <MX_SAI2_Init+0x168>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80010e8:	4b36      	ldr	r3, [pc, #216]	; (80011c4 <MX_SAI2_Init+0x168>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 80010ee:	4b35      	ldr	r3, [pc, #212]	; (80011c4 <MX_SAI2_Init+0x168>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80010f4:	4b33      	ldr	r3, [pc, #204]	; (80011c4 <MX_SAI2_Init+0x168>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 80010fa:	4b32      	ldr	r3, [pc, #200]	; (80011c4 <MX_SAI2_Init+0x168>)
 80010fc:	2201      	movs	r2, #1
 80010fe:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001100:	4b30      	ldr	r3, [pc, #192]	; (80011c4 <MX_SAI2_Init+0x168>)
 8001102:	2200      	movs	r2, #0
 8001104:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001106:	482f      	ldr	r0, [pc, #188]	; (80011c4 <MX_SAI2_Init+0x168>)
 8001108:	f008 fa16 	bl	8009538 <HAL_SAI_Init>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_SAI2_Init+0xba>
  {
    Error_Handler();
 8001112:	f000 fbd1 	bl	80018b8 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001116:	4b2e      	ldr	r3, [pc, #184]	; (80011d0 <MX_SAI2_Init+0x174>)
 8001118:	4a2e      	ldr	r2, [pc, #184]	; (80011d4 <MX_SAI2_Init+0x178>)
 800111a:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 800111c:	4b2c      	ldr	r3, [pc, #176]	; (80011d0 <MX_SAI2_Init+0x174>)
 800111e:	2200      	movs	r2, #0
 8001120:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001122:	4b2b      	ldr	r3, [pc, #172]	; (80011d0 <MX_SAI2_Init+0x174>)
 8001124:	2203      	movs	r2, #3
 8001126:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8001128:	4b29      	ldr	r3, [pc, #164]	; (80011d0 <MX_SAI2_Init+0x174>)
 800112a:	2240      	movs	r2, #64	; 0x40
 800112c:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800112e:	4b28      	ldr	r3, [pc, #160]	; (80011d0 <MX_SAI2_Init+0x174>)
 8001130:	2200      	movs	r2, #0
 8001132:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001134:	4b26      	ldr	r3, [pc, #152]	; (80011d0 <MX_SAI2_Init+0x174>)
 8001136:	2200      	movs	r2, #0
 8001138:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 800113a:	4b25      	ldr	r3, [pc, #148]	; (80011d0 <MX_SAI2_Init+0x174>)
 800113c:	2201      	movs	r2, #1
 800113e:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001140:	4b23      	ldr	r3, [pc, #140]	; (80011d0 <MX_SAI2_Init+0x174>)
 8001142:	2200      	movs	r2, #0
 8001144:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001146:	4b22      	ldr	r3, [pc, #136]	; (80011d0 <MX_SAI2_Init+0x174>)
 8001148:	2200      	movs	r2, #0
 800114a:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800114c:	4b20      	ldr	r3, [pc, #128]	; (80011d0 <MX_SAI2_Init+0x174>)
 800114e:	2200      	movs	r2, #0
 8001150:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001152:	4b1f      	ldr	r3, [pc, #124]	; (80011d0 <MX_SAI2_Init+0x174>)
 8001154:	2200      	movs	r2, #0
 8001156:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001158:	4b1d      	ldr	r3, [pc, #116]	; (80011d0 <MX_SAI2_Init+0x174>)
 800115a:	2200      	movs	r2, #0
 800115c:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800115e:	4b1c      	ldr	r3, [pc, #112]	; (80011d0 <MX_SAI2_Init+0x174>)
 8001160:	2200      	movs	r2, #0
 8001162:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.PdmInit.Activation = DISABLE;
 8001164:	4b1a      	ldr	r3, [pc, #104]	; (80011d0 <MX_SAI2_Init+0x174>)
 8001166:	2200      	movs	r2, #0
 8001168:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.PdmInit.MicPairsNbr = 1;
 800116c:	4b18      	ldr	r3, [pc, #96]	; (80011d0 <MX_SAI2_Init+0x174>)
 800116e:	2201      	movs	r2, #1
 8001170:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8001172:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <MX_SAI2_Init+0x174>)
 8001174:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001178:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.FrameLength = 8;
 800117a:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <MX_SAI2_Init+0x174>)
 800117c:	2208      	movs	r2, #8
 800117e:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8001180:	4b13      	ldr	r3, [pc, #76]	; (80011d0 <MX_SAI2_Init+0x174>)
 8001182:	2201      	movs	r2, #1
 8001184:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001186:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <MX_SAI2_Init+0x174>)
 8001188:	2200      	movs	r2, #0
 800118a:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800118c:	4b10      	ldr	r3, [pc, #64]	; (80011d0 <MX_SAI2_Init+0x174>)
 800118e:	2200      	movs	r2, #0
 8001190:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001192:	4b0f      	ldr	r3, [pc, #60]	; (80011d0 <MX_SAI2_Init+0x174>)
 8001194:	2200      	movs	r2, #0
 8001196:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001198:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <MX_SAI2_Init+0x174>)
 800119a:	2200      	movs	r2, #0
 800119c:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800119e:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <MX_SAI2_Init+0x174>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 80011a4:	4b0a      	ldr	r3, [pc, #40]	; (80011d0 <MX_SAI2_Init+0x174>)
 80011a6:	2201      	movs	r2, #1
 80011a8:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 80011aa:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <MX_SAI2_Init+0x174>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 80011b0:	4807      	ldr	r0, [pc, #28]	; (80011d0 <MX_SAI2_Init+0x174>)
 80011b2:	f008 f9c1 	bl	8009538 <HAL_SAI_Init>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_SAI2_Init+0x164>
  {
    Error_Handler();
 80011bc:	f000 fb7c 	bl	80018b8 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	2400050c 	.word	0x2400050c
 80011c8:	40015c04 	.word	0x40015c04
 80011cc:	0002ee00 	.word	0x0002ee00
 80011d0:	240005a4 	.word	0x240005a4
 80011d4:	40015c24 	.word	0x40015c24

080011d8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80011dc:	4b26      	ldr	r3, [pc, #152]	; (8001278 <MX_SPI2_Init+0xa0>)
 80011de:	4a27      	ldr	r2, [pc, #156]	; (800127c <MX_SPI2_Init+0xa4>)
 80011e0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80011e2:	4b25      	ldr	r3, [pc, #148]	; (8001278 <MX_SPI2_Init+0xa0>)
 80011e4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80011e8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80011ea:	4b23      	ldr	r3, [pc, #140]	; (8001278 <MX_SPI2_Init+0xa0>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80011f0:	4b21      	ldr	r3, [pc, #132]	; (8001278 <MX_SPI2_Init+0xa0>)
 80011f2:	2203      	movs	r2, #3
 80011f4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011f6:	4b20      	ldr	r3, [pc, #128]	; (8001278 <MX_SPI2_Init+0xa0>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011fc:	4b1e      	ldr	r3, [pc, #120]	; (8001278 <MX_SPI2_Init+0xa0>)
 80011fe:	2200      	movs	r2, #0
 8001200:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8001202:	4b1d      	ldr	r3, [pc, #116]	; (8001278 <MX_SPI2_Init+0xa0>)
 8001204:	2200      	movs	r2, #0
 8001206:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001208:	4b1b      	ldr	r3, [pc, #108]	; (8001278 <MX_SPI2_Init+0xa0>)
 800120a:	2200      	movs	r2, #0
 800120c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800120e:	4b1a      	ldr	r3, [pc, #104]	; (8001278 <MX_SPI2_Init+0xa0>)
 8001210:	2200      	movs	r2, #0
 8001212:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001214:	4b18      	ldr	r3, [pc, #96]	; (8001278 <MX_SPI2_Init+0xa0>)
 8001216:	2200      	movs	r2, #0
 8001218:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800121a:	4b17      	ldr	r3, [pc, #92]	; (8001278 <MX_SPI2_Init+0xa0>)
 800121c:	2200      	movs	r2, #0
 800121e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001220:	4b15      	ldr	r3, [pc, #84]	; (8001278 <MX_SPI2_Init+0xa0>)
 8001222:	2200      	movs	r2, #0
 8001224:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001226:	4b14      	ldr	r3, [pc, #80]	; (8001278 <MX_SPI2_Init+0xa0>)
 8001228:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800122c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800122e:	4b12      	ldr	r3, [pc, #72]	; (8001278 <MX_SPI2_Init+0xa0>)
 8001230:	2200      	movs	r2, #0
 8001232:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001234:	4b10      	ldr	r3, [pc, #64]	; (8001278 <MX_SPI2_Init+0xa0>)
 8001236:	2200      	movs	r2, #0
 8001238:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800123a:	4b0f      	ldr	r3, [pc, #60]	; (8001278 <MX_SPI2_Init+0xa0>)
 800123c:	2200      	movs	r2, #0
 800123e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001240:	4b0d      	ldr	r3, [pc, #52]	; (8001278 <MX_SPI2_Init+0xa0>)
 8001242:	2200      	movs	r2, #0
 8001244:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001246:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <MX_SPI2_Init+0xa0>)
 8001248:	2200      	movs	r2, #0
 800124a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800124c:	4b0a      	ldr	r3, [pc, #40]	; (8001278 <MX_SPI2_Init+0xa0>)
 800124e:	2200      	movs	r2, #0
 8001250:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001252:	4b09      	ldr	r3, [pc, #36]	; (8001278 <MX_SPI2_Init+0xa0>)
 8001254:	2200      	movs	r2, #0
 8001256:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001258:	4b07      	ldr	r3, [pc, #28]	; (8001278 <MX_SPI2_Init+0xa0>)
 800125a:	2200      	movs	r2, #0
 800125c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800125e:	4b06      	ldr	r3, [pc, #24]	; (8001278 <MX_SPI2_Init+0xa0>)
 8001260:	2200      	movs	r2, #0
 8001262:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001264:	4804      	ldr	r0, [pc, #16]	; (8001278 <MX_SPI2_Init+0xa0>)
 8001266:	f008 fc87 	bl	8009b78 <HAL_SPI_Init>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_SPI2_Init+0x9c>
  {
    Error_Handler();
 8001270:	f000 fb22 	bl	80018b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001274:	bf00      	nop
 8001276:	bd80      	pop	{r7, pc}
 8001278:	2400063c 	.word	0x2400063c
 800127c:	40003800 	.word	0x40003800

08001280 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b088      	sub	sp, #32
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001286:	f107 0310 	add.w	r3, r7, #16
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	605a      	str	r2, [r3, #4]
 8001290:	609a      	str	r2, [r3, #8]
 8001292:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001294:	1d3b      	adds	r3, r7, #4
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]
 800129c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800129e:	4b1f      	ldr	r3, [pc, #124]	; (800131c <MX_TIM3_Init+0x9c>)
 80012a0:	4a1f      	ldr	r2, [pc, #124]	; (8001320 <MX_TIM3_Init+0xa0>)
 80012a2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 80012a4:	4b1d      	ldr	r3, [pc, #116]	; (800131c <MX_TIM3_Init+0x9c>)
 80012a6:	223f      	movs	r2, #63	; 0x3f
 80012a8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012aa:	4b1c      	ldr	r3, [pc, #112]	; (800131c <MX_TIM3_Init+0x9c>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80012b0:	4b1a      	ldr	r3, [pc, #104]	; (800131c <MX_TIM3_Init+0x9c>)
 80012b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012b6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012b8:	4b18      	ldr	r3, [pc, #96]	; (800131c <MX_TIM3_Init+0x9c>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012be:	4b17      	ldr	r3, [pc, #92]	; (800131c <MX_TIM3_Init+0x9c>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012c4:	4815      	ldr	r0, [pc, #84]	; (800131c <MX_TIM3_Init+0x9c>)
 80012c6:	f008 fd96 	bl	8009df6 <HAL_TIM_Base_Init>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80012d0:	f000 faf2 	bl	80018b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012d8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012da:	f107 0310 	add.w	r3, r7, #16
 80012de:	4619      	mov	r1, r3
 80012e0:	480e      	ldr	r0, [pc, #56]	; (800131c <MX_TIM3_Init+0x9c>)
 80012e2:	f008 fe4f 	bl	8009f84 <HAL_TIM_ConfigClockSource>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80012ec:	f000 fae4 	bl	80018b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012f0:	2300      	movs	r3, #0
 80012f2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012f4:	2300      	movs	r3, #0
 80012f6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012f8:	1d3b      	adds	r3, r7, #4
 80012fa:	4619      	mov	r1, r3
 80012fc:	4807      	ldr	r0, [pc, #28]	; (800131c <MX_TIM3_Init+0x9c>)
 80012fe:	f009 f871 	bl	800a3e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001308:	f000 fad6 	bl	80018b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Base_Start(&htim3);
 800130c:	4803      	ldr	r0, [pc, #12]	; (800131c <MX_TIM3_Init+0x9c>)
 800130e:	f008 fdc9 	bl	8009ea4 <HAL_TIM_Base_Start>

  /* USER CODE END TIM3_Init 2 */

}
 8001312:	bf00      	nop
 8001314:	3720      	adds	r7, #32
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	240006c4 	.word	0x240006c4
 8001320:	40000400 	.word	0x40000400

08001324 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001328:	4b22      	ldr	r3, [pc, #136]	; (80013b4 <MX_USART3_UART_Init+0x90>)
 800132a:	4a23      	ldr	r2, [pc, #140]	; (80013b8 <MX_USART3_UART_Init+0x94>)
 800132c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800132e:	4b21      	ldr	r3, [pc, #132]	; (80013b4 <MX_USART3_UART_Init+0x90>)
 8001330:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001334:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001336:	4b1f      	ldr	r3, [pc, #124]	; (80013b4 <MX_USART3_UART_Init+0x90>)
 8001338:	2200      	movs	r2, #0
 800133a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800133c:	4b1d      	ldr	r3, [pc, #116]	; (80013b4 <MX_USART3_UART_Init+0x90>)
 800133e:	2200      	movs	r2, #0
 8001340:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001342:	4b1c      	ldr	r3, [pc, #112]	; (80013b4 <MX_USART3_UART_Init+0x90>)
 8001344:	2200      	movs	r2, #0
 8001346:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001348:	4b1a      	ldr	r3, [pc, #104]	; (80013b4 <MX_USART3_UART_Init+0x90>)
 800134a:	220c      	movs	r2, #12
 800134c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800134e:	4b19      	ldr	r3, [pc, #100]	; (80013b4 <MX_USART3_UART_Init+0x90>)
 8001350:	2200      	movs	r2, #0
 8001352:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001354:	4b17      	ldr	r3, [pc, #92]	; (80013b4 <MX_USART3_UART_Init+0x90>)
 8001356:	2200      	movs	r2, #0
 8001358:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800135a:	4b16      	ldr	r3, [pc, #88]	; (80013b4 <MX_USART3_UART_Init+0x90>)
 800135c:	2200      	movs	r2, #0
 800135e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001360:	4b14      	ldr	r3, [pc, #80]	; (80013b4 <MX_USART3_UART_Init+0x90>)
 8001362:	2200      	movs	r2, #0
 8001364:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001366:	4b13      	ldr	r3, [pc, #76]	; (80013b4 <MX_USART3_UART_Init+0x90>)
 8001368:	2200      	movs	r2, #0
 800136a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800136c:	4811      	ldr	r0, [pc, #68]	; (80013b4 <MX_USART3_UART_Init+0x90>)
 800136e:	f009 f8c7 	bl	800a500 <HAL_UART_Init>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001378:	f000 fa9e 	bl	80018b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800137c:	2100      	movs	r1, #0
 800137e:	480d      	ldr	r0, [pc, #52]	; (80013b4 <MX_USART3_UART_Init+0x90>)
 8001380:	f00a f8c9 	bl	800b516 <HAL_UARTEx_SetTxFifoThreshold>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800138a:	f000 fa95 	bl	80018b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800138e:	2100      	movs	r1, #0
 8001390:	4808      	ldr	r0, [pc, #32]	; (80013b4 <MX_USART3_UART_Init+0x90>)
 8001392:	f00a f8fe 	bl	800b592 <HAL_UARTEx_SetRxFifoThreshold>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800139c:	f000 fa8c 	bl	80018b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80013a0:	4804      	ldr	r0, [pc, #16]	; (80013b4 <MX_USART3_UART_Init+0x90>)
 80013a2:	f00a f87f 	bl	800b4a4 <HAL_UARTEx_DisableFifoMode>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80013ac:	f000 fa84 	bl	80018b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80013b0:	bf00      	nop
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	24000710 	.word	0x24000710
 80013b8:	40004800 	.word	0x40004800

080013bc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80013c0:	4b15      	ldr	r3, [pc, #84]	; (8001418 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80013c2:	4a16      	ldr	r2, [pc, #88]	; (800141c <MX_USB_OTG_FS_PCD_Init+0x60>)
 80013c4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80013c6:	4b14      	ldr	r3, [pc, #80]	; (8001418 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80013c8:	2209      	movs	r2, #9
 80013ca:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80013cc:	4b12      	ldr	r3, [pc, #72]	; (8001418 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80013ce:	2202      	movs	r2, #2
 80013d0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80013d2:	4b11      	ldr	r3, [pc, #68]	; (8001418 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80013d8:	4b0f      	ldr	r3, [pc, #60]	; (8001418 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80013da:	2202      	movs	r2, #2
 80013dc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80013de:	4b0e      	ldr	r3, [pc, #56]	; (8001418 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80013e4:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80013ea:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80013f0:	4b09      	ldr	r3, [pc, #36]	; (8001418 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80013f2:	2201      	movs	r2, #1
 80013f4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80013f6:	4b08      	ldr	r3, [pc, #32]	; (8001418 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80013f8:	2201      	movs	r2, #1
 80013fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80013fc:	4b06      	ldr	r3, [pc, #24]	; (8001418 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80013fe:	2200      	movs	r2, #0
 8001400:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001402:	4805      	ldr	r0, [pc, #20]	; (8001418 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001404:	f004 f90a 	bl	800561c <HAL_PCD_Init>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800140e:	f000 fa53 	bl	80018b8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	240007a4 	.word	0x240007a4
 800141c:	40080000 	.word	0x40080000

08001420 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b088      	sub	sp, #32
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001426:	1d3b      	adds	r3, r7, #4
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]
 8001432:	611a      	str	r2, [r3, #16]
 8001434:	615a      	str	r2, [r3, #20]
 8001436:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001438:	4b1e      	ldr	r3, [pc, #120]	; (80014b4 <MX_FMC_Init+0x94>)
 800143a:	4a1f      	ldr	r2, [pc, #124]	; (80014b8 <MX_FMC_Init+0x98>)
 800143c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800143e:	4b1d      	ldr	r3, [pc, #116]	; (80014b4 <MX_FMC_Init+0x94>)
 8001440:	2201      	movs	r2, #1
 8001442:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001444:	4b1b      	ldr	r3, [pc, #108]	; (80014b4 <MX_FMC_Init+0x94>)
 8001446:	2200      	movs	r2, #0
 8001448:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800144a:	4b1a      	ldr	r3, [pc, #104]	; (80014b4 <MX_FMC_Init+0x94>)
 800144c:	2204      	movs	r2, #4
 800144e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001450:	4b18      	ldr	r3, [pc, #96]	; (80014b4 <MX_FMC_Init+0x94>)
 8001452:	2210      	movs	r2, #16
 8001454:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001456:	4b17      	ldr	r3, [pc, #92]	; (80014b4 <MX_FMC_Init+0x94>)
 8001458:	2240      	movs	r2, #64	; 0x40
 800145a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 800145c:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <MX_FMC_Init+0x94>)
 800145e:	2280      	movs	r2, #128	; 0x80
 8001460:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001462:	4b14      	ldr	r3, [pc, #80]	; (80014b4 <MX_FMC_Init+0x94>)
 8001464:	2200      	movs	r2, #0
 8001466:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8001468:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <MX_FMC_Init+0x94>)
 800146a:	2200      	movs	r2, #0
 800146c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800146e:	4b11      	ldr	r3, [pc, #68]	; (80014b4 <MX_FMC_Init+0x94>)
 8001470:	2200      	movs	r2, #0
 8001472:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001474:	4b0f      	ldr	r3, [pc, #60]	; (80014b4 <MX_FMC_Init+0x94>)
 8001476:	2200      	movs	r2, #0
 8001478:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 800147a:	2310      	movs	r3, #16
 800147c:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 800147e:	2310      	movs	r3, #16
 8001480:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8001482:	2310      	movs	r3, #16
 8001484:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8001486:	2310      	movs	r3, #16
 8001488:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 800148a:	2310      	movs	r3, #16
 800148c:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 800148e:	2310      	movs	r3, #16
 8001490:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8001492:	2310      	movs	r3, #16
 8001494:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001496:	1d3b      	adds	r3, r7, #4
 8001498:	4619      	mov	r1, r3
 800149a:	4806      	ldr	r0, [pc, #24]	; (80014b4 <MX_FMC_Init+0x94>)
 800149c:	f008 fb30 	bl	8009b00 <HAL_SDRAM_Init>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 80014a6:	f000 fa07 	bl	80018b8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80014aa:	bf00      	nop
 80014ac:	3720      	adds	r7, #32
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	24000cb0 	.word	0x24000cb0
 80014b8:	52004140 	.word	0x52004140

080014bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b090      	sub	sp, #64	; 0x40
 80014c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	605a      	str	r2, [r3, #4]
 80014cc:	609a      	str	r2, [r3, #8]
 80014ce:	60da      	str	r2, [r3, #12]
 80014d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80014d2:	4bc0      	ldr	r3, [pc, #768]	; (80017d4 <MX_GPIO_Init+0x318>)
 80014d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014d8:	4abe      	ldr	r2, [pc, #760]	; (80017d4 <MX_GPIO_Init+0x318>)
 80014da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014e2:	4bbc      	ldr	r3, [pc, #752]	; (80017d4 <MX_GPIO_Init+0x318>)
 80014e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80014ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f0:	4bb8      	ldr	r3, [pc, #736]	; (80017d4 <MX_GPIO_Init+0x318>)
 80014f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014f6:	4ab7      	ldr	r2, [pc, #732]	; (80017d4 <MX_GPIO_Init+0x318>)
 80014f8:	f043 0302 	orr.w	r3, r3, #2
 80014fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001500:	4bb4      	ldr	r3, [pc, #720]	; (80017d4 <MX_GPIO_Init+0x318>)
 8001502:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	627b      	str	r3, [r7, #36]	; 0x24
 800150c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800150e:	4bb1      	ldr	r3, [pc, #708]	; (80017d4 <MX_GPIO_Init+0x318>)
 8001510:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001514:	4aaf      	ldr	r2, [pc, #700]	; (80017d4 <MX_GPIO_Init+0x318>)
 8001516:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800151a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800151e:	4bad      	ldr	r3, [pc, #692]	; (80017d4 <MX_GPIO_Init+0x318>)
 8001520:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001528:	623b      	str	r3, [r7, #32]
 800152a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800152c:	4ba9      	ldr	r3, [pc, #676]	; (80017d4 <MX_GPIO_Init+0x318>)
 800152e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001532:	4aa8      	ldr	r2, [pc, #672]	; (80017d4 <MX_GPIO_Init+0x318>)
 8001534:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001538:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800153c:	4ba5      	ldr	r3, [pc, #660]	; (80017d4 <MX_GPIO_Init+0x318>)
 800153e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001546:	61fb      	str	r3, [r7, #28]
 8001548:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800154a:	4ba2      	ldr	r3, [pc, #648]	; (80017d4 <MX_GPIO_Init+0x318>)
 800154c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001550:	4aa0      	ldr	r2, [pc, #640]	; (80017d4 <MX_GPIO_Init+0x318>)
 8001552:	f043 0304 	orr.w	r3, r3, #4
 8001556:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800155a:	4b9e      	ldr	r3, [pc, #632]	; (80017d4 <MX_GPIO_Init+0x318>)
 800155c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001560:	f003 0304 	and.w	r3, r3, #4
 8001564:	61bb      	str	r3, [r7, #24]
 8001566:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001568:	4b9a      	ldr	r3, [pc, #616]	; (80017d4 <MX_GPIO_Init+0x318>)
 800156a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800156e:	4a99      	ldr	r2, [pc, #612]	; (80017d4 <MX_GPIO_Init+0x318>)
 8001570:	f043 0301 	orr.w	r3, r3, #1
 8001574:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001578:	4b96      	ldr	r3, [pc, #600]	; (80017d4 <MX_GPIO_Init+0x318>)
 800157a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	617b      	str	r3, [r7, #20]
 8001584:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001586:	4b93      	ldr	r3, [pc, #588]	; (80017d4 <MX_GPIO_Init+0x318>)
 8001588:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800158c:	4a91      	ldr	r2, [pc, #580]	; (80017d4 <MX_GPIO_Init+0x318>)
 800158e:	f043 0310 	orr.w	r3, r3, #16
 8001592:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001596:	4b8f      	ldr	r3, [pc, #572]	; (80017d4 <MX_GPIO_Init+0x318>)
 8001598:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800159c:	f003 0310 	and.w	r3, r3, #16
 80015a0:	613b      	str	r3, [r7, #16]
 80015a2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80015a4:	4b8b      	ldr	r3, [pc, #556]	; (80017d4 <MX_GPIO_Init+0x318>)
 80015a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015aa:	4a8a      	ldr	r2, [pc, #552]	; (80017d4 <MX_GPIO_Init+0x318>)
 80015ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015b4:	4b87      	ldr	r3, [pc, #540]	; (80017d4 <MX_GPIO_Init+0x318>)
 80015b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015c2:	4b84      	ldr	r3, [pc, #528]	; (80017d4 <MX_GPIO_Init+0x318>)
 80015c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015c8:	4a82      	ldr	r2, [pc, #520]	; (80017d4 <MX_GPIO_Init+0x318>)
 80015ca:	f043 0308 	orr.w	r3, r3, #8
 80015ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015d2:	4b80      	ldr	r3, [pc, #512]	; (80017d4 <MX_GPIO_Init+0x318>)
 80015d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015d8:	f003 0308 	and.w	r3, r3, #8
 80015dc:	60bb      	str	r3, [r7, #8]
 80015de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015e0:	4b7c      	ldr	r3, [pc, #496]	; (80017d4 <MX_GPIO_Init+0x318>)
 80015e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015e6:	4a7b      	ldr	r2, [pc, #492]	; (80017d4 <MX_GPIO_Init+0x318>)
 80015e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015f0:	4b78      	ldr	r3, [pc, #480]	; (80017d4 <MX_GPIO_Init+0x318>)
 80015f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015fa:	607b      	str	r3, [r7, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015fe:	4b75      	ldr	r3, [pc, #468]	; (80017d4 <MX_GPIO_Init+0x318>)
 8001600:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001604:	4a73      	ldr	r2, [pc, #460]	; (80017d4 <MX_GPIO_Init+0x318>)
 8001606:	f043 0320 	orr.w	r3, r3, #32
 800160a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800160e:	4b71      	ldr	r3, [pc, #452]	; (80017d4 <MX_GPIO_Init+0x318>)
 8001610:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001614:	f003 0320 	and.w	r3, r3, #32
 8001618:	603b      	str	r3, [r7, #0]
 800161a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7|MII_TX_ER_nINT_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 800161c:	2200      	movs	r2, #0
 800161e:	f241 01c4 	movw	r1, #4292	; 0x10c4
 8001622:	486d      	ldr	r0, [pc, #436]	; (80017d8 <MX_GPIO_Init+0x31c>)
 8001624:	f003 fd38 	bl	8005098 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_6, GPIO_PIN_RESET);
 8001628:	2200      	movs	r2, #0
 800162a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800162e:	486b      	ldr	r0, [pc, #428]	; (80017dc <MX_GPIO_Init+0x320>)
 8001630:	f003 fd32 	bl	8005098 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001634:	2200      	movs	r2, #0
 8001636:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800163a:	4869      	ldr	r0, [pc, #420]	; (80017e0 <MX_GPIO_Init+0x324>)
 800163c:	f003 fd2c 	bl	8005098 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, GPIO_PIN_RESET);
 8001640:	2200      	movs	r2, #0
 8001642:	2108      	movs	r1, #8
 8001644:	4867      	ldr	r0, [pc, #412]	; (80017e4 <MX_GPIO_Init+0x328>)
 8001646:	f003 fd27 	bl	8005098 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_1, GPIO_PIN_RESET);
 800164a:	2200      	movs	r2, #0
 800164c:	2102      	movs	r1, #2
 800164e:	4866      	ldr	r0, [pc, #408]	; (80017e8 <MX_GPIO_Init+0x32c>)
 8001650:	f003 fd22 	bl	8005098 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8001654:	2200      	movs	r2, #0
 8001656:	2104      	movs	r1, #4
 8001658:	4864      	ldr	r0, [pc, #400]	; (80017ec <MX_GPIO_Init+0x330>)
 800165a:	f003 fd1d 	bl	8005098 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB6 PB7 MII_TX_ER_nINT_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|MII_TX_ER_nINT_Pin|LCD_RST_Pin;
 800165e:	f241 03c4 	movw	r3, #4292	; 0x10c4
 8001662:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001664:	2301      	movs	r3, #1
 8001666:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001668:	2300      	movs	r3, #0
 800166a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166c:	2300      	movs	r3, #0
 800166e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001670:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001674:	4619      	mov	r1, r3
 8001676:	4858      	ldr	r0, [pc, #352]	; (80017d8 <MX_GPIO_Init+0x31c>)
 8001678:	f003 fb5e 	bl	8004d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800167c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001680:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001682:	2302      	movs	r3, #2
 8001684:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001686:	2300      	movs	r3, #0
 8001688:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168a:	2300      	movs	r3, #0
 800168c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800168e:	2303      	movs	r3, #3
 8001690:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001692:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001696:	4619      	mov	r1, r3
 8001698:	4855      	ldr	r0, [pc, #340]	; (80017f0 <MX_GPIO_Init+0x334>)
 800169a:	f003 fb4d 	bl	8004d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISPD7_Pin */
  GPIO_InitStruct.Pin = LCD_DISPD7_Pin;
 800169e:	2380      	movs	r3, #128	; 0x80
 80016a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016a2:	2300      	movs	r3, #0
 80016a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_DISPD7_GPIO_Port, &GPIO_InitStruct);
 80016aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016ae:	4619      	mov	r1, r3
 80016b0:	4850      	ldr	r0, [pc, #320]	; (80017f4 <MX_GPIO_Init+0x338>)
 80016b2:	f003 fb41 	bl	8004d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE5 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 80016b6:	2330      	movs	r3, #48	; 0x30
 80016b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ba:	2302      	movs	r3, #2
 80016bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016be:	2300      	movs	r3, #0
 80016c0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c2:	2300      	movs	r3, #0
 80016c4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 80016c6:	230a      	movs	r3, #10
 80016c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016ce:	4619      	mov	r1, r3
 80016d0:	4849      	ldr	r0, [pc, #292]	; (80017f8 <MX_GPIO_Init+0x33c>)
 80016d2:	f003 fb31 	bl	8004d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS2_ID_Pin OTG_FS2_PSO_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS2_ID_Pin|OTG_FS2_PSO_Pin;
 80016d6:	f44f 6384 	mov.w	r3, #1056	; 0x420
 80016da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016dc:	2300      	movs	r3, #0
 80016de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016e8:	4619      	mov	r1, r3
 80016ea:	483c      	ldr	r0, [pc, #240]	; (80017dc <MX_GPIO_Init+0x320>)
 80016ec:	f003 fb24 	bl	8004d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016f6:	2300      	movs	r3, #0
 80016f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001702:	4619      	mov	r1, r3
 8001704:	483d      	ldr	r0, [pc, #244]	; (80017fc <MX_GPIO_Init+0x340>)
 8001706:	f003 fb17 	bl	8004d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_6;
 800170a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800170e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001710:	2301      	movs	r3, #1
 8001712:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001714:	2300      	movs	r3, #0
 8001716:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001718:	2300      	movs	r3, #0
 800171a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800171c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001720:	4619      	mov	r1, r3
 8001722:	482e      	ldr	r0, [pc, #184]	; (80017dc <MX_GPIO_Init+0x320>)
 8001724:	f003 fb08 	bl	8004d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : audio_Int_Pin */
  GPIO_InitStruct.Pin = audio_Int_Pin;
 8001728:	2380      	movs	r3, #128	; 0x80
 800172a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172c:	2302      	movs	r3, #2
 800172e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001730:	2300      	movs	r3, #0
 8001732:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001734:	2300      	movs	r3, #0
 8001736:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001738:	2306      	movs	r3, #6
 800173a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(audio_Int_GPIO_Port, &GPIO_InitStruct);
 800173c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001740:	4619      	mov	r1, r3
 8001742:	4828      	ldr	r0, [pc, #160]	; (80017e4 <MX_GPIO_Init+0x328>)
 8001744:	f003 faf8 	bl	8004d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001748:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800174c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800174e:	2301      	movs	r3, #1
 8001750:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001756:	2300      	movs	r3, #0
 8001758:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800175a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800175e:	4619      	mov	r1, r3
 8001760:	481f      	ldr	r0, [pc, #124]	; (80017e0 <MX_GPIO_Init+0x324>)
 8001762:	f003 fae9 	bl	8004d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001766:	2308      	movs	r3, #8
 8001768:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800176a:	2301      	movs	r3, #1
 800176c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001772:	2300      	movs	r3, #0
 8001774:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001776:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800177a:	4619      	mov	r1, r3
 800177c:	4819      	ldr	r0, [pc, #100]	; (80017e4 <MX_GPIO_Init+0x328>)
 800177e:	f003 fadb 	bl	8004d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001782:	2304      	movs	r3, #4
 8001784:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001786:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800178a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001790:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001794:	4619      	mov	r1, r3
 8001796:	4813      	ldr	r0, [pc, #76]	; (80017e4 <MX_GPIO_Init+0x328>)
 8001798:	f003 face 	bl	8004d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 800179c:	2301      	movs	r3, #1
 800179e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017a0:	2300      	movs	r3, #0
 80017a2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 80017a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017ac:	4619      	mov	r1, r3
 80017ae:	480e      	ldr	r0, [pc, #56]	; (80017e8 <MX_GPIO_Init+0x32c>)
 80017b0:	f003 fac2 	bl	8004d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PK1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80017b4:	2302      	movs	r3, #2
 80017b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b8:	2301      	movs	r3, #1
 80017ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017bc:	2300      	movs	r3, #0
 80017be:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c0:	2300      	movs	r3, #0
 80017c2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80017c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017c8:	4619      	mov	r1, r3
 80017ca:	4807      	ldr	r0, [pc, #28]	; (80017e8 <MX_GPIO_Init+0x32c>)
 80017cc:	f003 fab4 	bl	8004d38 <HAL_GPIO_Init>
 80017d0:	e016      	b.n	8001800 <MX_GPIO_Init+0x344>
 80017d2:	bf00      	nop
 80017d4:	58024400 	.word	0x58024400
 80017d8:	58020400 	.word	0x58020400
 80017dc:	58020000 	.word	0x58020000
 80017e0:	58022000 	.word	0x58022000
 80017e4:	58021800 	.word	0x58021800
 80017e8:	58022800 	.word	0x58022800
 80017ec:	58022400 	.word	0x58022400
 80017f0:	58021c00 	.word	0x58021c00
 80017f4:	58020c00 	.word	0x58020c00
 80017f8:	58021000 	.word	0x58021000
 80017fc:	58020800 	.word	0x58020800

  /*Configure GPIO pins : PF6 PF7 PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8001800:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001804:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001806:	2302      	movs	r3, #2
 8001808:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180e:	2300      	movs	r3, #0
 8001810:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001812:	2309      	movs	r3, #9
 8001814:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001816:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800181a:	4619      	mov	r1, r3
 800181c:	4822      	ldr	r0, [pc, #136]	; (80018a8 <MX_GPIO_Init+0x3ec>)
 800181e:	f003 fa8b 	bl	8004d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001822:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001826:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001828:	2302      	movs	r3, #2
 800182a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	2300      	movs	r3, #0
 800182e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001830:	2300      	movs	r3, #0
 8001832:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001834:	230a      	movs	r3, #10
 8001836:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001838:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800183c:	4619      	mov	r1, r3
 800183e:	481a      	ldr	r0, [pc, #104]	; (80018a8 <MX_GPIO_Init+0x3ec>)
 8001840:	f003 fa7a 	bl	8004d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS2_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS2_OverCurrent_Pin;
 8001844:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001848:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800184a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800184e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS2_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001854:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001858:	4619      	mov	r1, r3
 800185a:	4814      	ldr	r0, [pc, #80]	; (80018ac <MX_GPIO_Init+0x3f0>)
 800185c:	f003 fa6c 	bl	8004d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001860:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001864:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001866:	2302      	movs	r3, #2
 8001868:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186a:	2300      	movs	r3, #0
 800186c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186e:	2300      	movs	r3, #0
 8001870:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001872:	2309      	movs	r3, #9
 8001874:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001876:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800187a:	4619      	mov	r1, r3
 800187c:	480c      	ldr	r0, [pc, #48]	; (80018b0 <MX_GPIO_Init+0x3f4>)
 800187e:	f003 fa5b 	bl	8004d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8001882:	2304      	movs	r3, #4
 8001884:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001886:	2301      	movs	r3, #1
 8001888:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188e:	2300      	movs	r3, #0
 8001890:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8001892:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001896:	4619      	mov	r1, r3
 8001898:	4806      	ldr	r0, [pc, #24]	; (80018b4 <MX_GPIO_Init+0x3f8>)
 800189a:	f003 fa4d 	bl	8004d38 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800189e:	bf00      	nop
 80018a0:	3740      	adds	r7, #64	; 0x40
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	58021400 	.word	0x58021400
 80018ac:	58021c00 	.word	0x58021c00
 80018b0:	58020c00 	.word	0x58020c00
 80018b4:	58022400 	.word	0x58022400

080018b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018bc:	b672      	cpsid	i
}
 80018be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018c0:	e7fe      	b.n	80018c0 <Error_Handler+0x8>
	...

080018c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ca:	4b0a      	ldr	r3, [pc, #40]	; (80018f4 <HAL_MspInit+0x30>)
 80018cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80018d0:	4a08      	ldr	r2, [pc, #32]	; (80018f4 <HAL_MspInit+0x30>)
 80018d2:	f043 0302 	orr.w	r3, r3, #2
 80018d6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80018da:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <HAL_MspInit+0x30>)
 80018dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80018e0:	f003 0302 	and.w	r3, r3, #2
 80018e4:	607b      	str	r3, [r7, #4]
 80018e6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018e8:	bf00      	nop
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	58024400 	.word	0x58024400

080018f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b090      	sub	sp, #64	; 0x40
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001900:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	60da      	str	r2, [r3, #12]
 800190e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a72      	ldr	r2, [pc, #456]	; (8001ae0 <HAL_ADC_MspInit+0x1e8>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d14e      	bne.n	80019b8 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800191a:	4b72      	ldr	r3, [pc, #456]	; (8001ae4 <HAL_ADC_MspInit+0x1ec>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	3301      	adds	r3, #1
 8001920:	4a70      	ldr	r2, [pc, #448]	; (8001ae4 <HAL_ADC_MspInit+0x1ec>)
 8001922:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001924:	4b6f      	ldr	r3, [pc, #444]	; (8001ae4 <HAL_ADC_MspInit+0x1ec>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d10e      	bne.n	800194a <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800192c:	4b6e      	ldr	r3, [pc, #440]	; (8001ae8 <HAL_ADC_MspInit+0x1f0>)
 800192e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001932:	4a6d      	ldr	r2, [pc, #436]	; (8001ae8 <HAL_ADC_MspInit+0x1f0>)
 8001934:	f043 0320 	orr.w	r3, r3, #32
 8001938:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800193c:	4b6a      	ldr	r3, [pc, #424]	; (8001ae8 <HAL_ADC_MspInit+0x1f0>)
 800193e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001942:	f003 0320 	and.w	r3, r3, #32
 8001946:	62bb      	str	r3, [r7, #40]	; 0x28
 8001948:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800194a:	4b67      	ldr	r3, [pc, #412]	; (8001ae8 <HAL_ADC_MspInit+0x1f0>)
 800194c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001950:	4a65      	ldr	r2, [pc, #404]	; (8001ae8 <HAL_ADC_MspInit+0x1f0>)
 8001952:	f043 0304 	orr.w	r3, r3, #4
 8001956:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800195a:	4b63      	ldr	r3, [pc, #396]	; (8001ae8 <HAL_ADC_MspInit+0x1f0>)
 800195c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001960:	f003 0304 	and.w	r3, r3, #4
 8001964:	627b      	str	r3, [r7, #36]	; 0x24
 8001966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001968:	4b5f      	ldr	r3, [pc, #380]	; (8001ae8 <HAL_ADC_MspInit+0x1f0>)
 800196a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800196e:	4a5e      	ldr	r2, [pc, #376]	; (8001ae8 <HAL_ADC_MspInit+0x1f0>)
 8001970:	f043 0301 	orr.w	r3, r3, #1
 8001974:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001978:	4b5b      	ldr	r3, [pc, #364]	; (8001ae8 <HAL_ADC_MspInit+0x1f0>)
 800197a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	623b      	str	r3, [r7, #32]
 8001984:	6a3b      	ldr	r3, [r7, #32]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    PA0_C     ------> ADC1_INP0
    PA1_C     ------> ADC1_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001986:	2301      	movs	r3, #1
 8001988:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800198a:	2303      	movs	r3, #3
 800198c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198e:	2300      	movs	r3, #0
 8001990:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001992:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001996:	4619      	mov	r1, r3
 8001998:	4854      	ldr	r0, [pc, #336]	; (8001aec <HAL_ADC_MspInit+0x1f4>)
 800199a:	f003 f9cd 	bl	8004d38 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 800199e:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 80019a2:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80019a6:	f001 f8b7 	bl	8002b18 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 80019aa:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80019ae:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80019b2:	f001 f8b1 	bl	8002b18 <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80019b6:	e08f      	b.n	8001ad8 <HAL_ADC_MspInit+0x1e0>
  else if(hadc->Instance==ADC2)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a4c      	ldr	r2, [pc, #304]	; (8001af0 <HAL_ADC_MspInit+0x1f8>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d133      	bne.n	8001a2a <HAL_ADC_MspInit+0x132>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80019c2:	4b48      	ldr	r3, [pc, #288]	; (8001ae4 <HAL_ADC_MspInit+0x1ec>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	3301      	adds	r3, #1
 80019c8:	4a46      	ldr	r2, [pc, #280]	; (8001ae4 <HAL_ADC_MspInit+0x1ec>)
 80019ca:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80019cc:	4b45      	ldr	r3, [pc, #276]	; (8001ae4 <HAL_ADC_MspInit+0x1ec>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d10e      	bne.n	80019f2 <HAL_ADC_MspInit+0xfa>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80019d4:	4b44      	ldr	r3, [pc, #272]	; (8001ae8 <HAL_ADC_MspInit+0x1f0>)
 80019d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80019da:	4a43      	ldr	r2, [pc, #268]	; (8001ae8 <HAL_ADC_MspInit+0x1f0>)
 80019dc:	f043 0320 	orr.w	r3, r3, #32
 80019e0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80019e4:	4b40      	ldr	r3, [pc, #256]	; (8001ae8 <HAL_ADC_MspInit+0x1f0>)
 80019e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80019ea:	f003 0320 	and.w	r3, r3, #32
 80019ee:	61fb      	str	r3, [r7, #28]
 80019f0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f2:	4b3d      	ldr	r3, [pc, #244]	; (8001ae8 <HAL_ADC_MspInit+0x1f0>)
 80019f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019f8:	4a3b      	ldr	r2, [pc, #236]	; (8001ae8 <HAL_ADC_MspInit+0x1f0>)
 80019fa:	f043 0301 	orr.w	r3, r3, #1
 80019fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a02:	4b39      	ldr	r3, [pc, #228]	; (8001ae8 <HAL_ADC_MspInit+0x1f0>)
 8001a04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a08:	f003 0301 	and.w	r3, r3, #1
 8001a0c:	61bb      	str	r3, [r7, #24]
 8001a0e:	69bb      	ldr	r3, [r7, #24]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8001a10:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8001a14:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8001a18:	f001 f87e 	bl	8002b18 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8001a1c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a20:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8001a24:	f001 f878 	bl	8002b18 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8001a28:	e056      	b.n	8001ad8 <HAL_ADC_MspInit+0x1e0>
  else if(hadc->Instance==ADC3)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a31      	ldr	r2, [pc, #196]	; (8001af4 <HAL_ADC_MspInit+0x1fc>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d151      	bne.n	8001ad8 <HAL_ADC_MspInit+0x1e0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001a34:	4b2c      	ldr	r3, [pc, #176]	; (8001ae8 <HAL_ADC_MspInit+0x1f0>)
 8001a36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a3a:	4a2b      	ldr	r2, [pc, #172]	; (8001ae8 <HAL_ADC_MspInit+0x1f0>)
 8001a3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a44:	4b28      	ldr	r3, [pc, #160]	; (8001ae8 <HAL_ADC_MspInit+0x1f0>)
 8001a46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a4e:	617b      	str	r3, [r7, #20]
 8001a50:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a52:	4b25      	ldr	r3, [pc, #148]	; (8001ae8 <HAL_ADC_MspInit+0x1f0>)
 8001a54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a58:	4a23      	ldr	r2, [pc, #140]	; (8001ae8 <HAL_ADC_MspInit+0x1f0>)
 8001a5a:	f043 0320 	orr.w	r3, r3, #32
 8001a5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a62:	4b21      	ldr	r3, [pc, #132]	; (8001ae8 <HAL_ADC_MspInit+0x1f0>)
 8001a64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a68:	f003 0320 	and.w	r3, r3, #32
 8001a6c:	613b      	str	r3, [r7, #16]
 8001a6e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a70:	4b1d      	ldr	r3, [pc, #116]	; (8001ae8 <HAL_ADC_MspInit+0x1f0>)
 8001a72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a76:	4a1c      	ldr	r2, [pc, #112]	; (8001ae8 <HAL_ADC_MspInit+0x1f0>)
 8001a78:	f043 0304 	orr.w	r3, r3, #4
 8001a7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a80:	4b19      	ldr	r3, [pc, #100]	; (8001ae8 <HAL_ADC_MspInit+0x1f0>)
 8001a82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a86:	f003 0304 	and.w	r3, r3, #4
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a94:	2303      	movs	r3, #3
 8001a96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4815      	ldr	r0, [pc, #84]	; (8001af8 <HAL_ADC_MspInit+0x200>)
 8001aa4:	f003 f948 	bl	8004d38 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001aac:	2303      	movs	r3, #3
 8001aae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ab4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ab8:	4619      	mov	r1, r3
 8001aba:	480c      	ldr	r0, [pc, #48]	; (8001aec <HAL_ADC_MspInit+0x1f4>)
 8001abc:	f003 f93c 	bl	8004d38 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001ac0:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001ac4:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001ac8:	f001 f826 	bl	8002b18 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001acc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001ad0:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001ad4:	f001 f820 	bl	8002b18 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8001ad8:	bf00      	nop
 8001ada:	3740      	adds	r7, #64	; 0x40
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40022000 	.word	0x40022000
 8001ae4:	24000cec 	.word	0x24000cec
 8001ae8:	58024400 	.word	0x58024400
 8001aec:	58020800 	.word	0x58020800
 8001af0:	40022100 	.word	0x40022100
 8001af4:	58026000 	.word	0x58026000
 8001af8:	58021400 	.word	0x58021400

08001afc <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b092      	sub	sp, #72	; 0x48
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b04:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	60da      	str	r2, [r3, #12]
 8001b12:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a87      	ldr	r2, [pc, #540]	; (8001d38 <HAL_ETH_MspInit+0x23c>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	f040 8108 	bne.w	8001d30 <HAL_ETH_MspInit+0x234>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001b20:	4b86      	ldr	r3, [pc, #536]	; (8001d3c <HAL_ETH_MspInit+0x240>)
 8001b22:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b26:	4a85      	ldr	r2, [pc, #532]	; (8001d3c <HAL_ETH_MspInit+0x240>)
 8001b28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b2c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001b30:	4b82      	ldr	r3, [pc, #520]	; (8001d3c <HAL_ETH_MspInit+0x240>)
 8001b32:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b3a:	633b      	str	r3, [r7, #48]	; 0x30
 8001b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001b3e:	4b7f      	ldr	r3, [pc, #508]	; (8001d3c <HAL_ETH_MspInit+0x240>)
 8001b40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b44:	4a7d      	ldr	r2, [pc, #500]	; (8001d3c <HAL_ETH_MspInit+0x240>)
 8001b46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b4a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001b4e:	4b7b      	ldr	r3, [pc, #492]	; (8001d3c <HAL_ETH_MspInit+0x240>)
 8001b50:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001b5c:	4b77      	ldr	r3, [pc, #476]	; (8001d3c <HAL_ETH_MspInit+0x240>)
 8001b5e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b62:	4a76      	ldr	r2, [pc, #472]	; (8001d3c <HAL_ETH_MspInit+0x240>)
 8001b64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b68:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001b6c:	4b73      	ldr	r3, [pc, #460]	; (8001d3c <HAL_ETH_MspInit+0x240>)
 8001b6e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b76:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b78:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b7a:	4b70      	ldr	r3, [pc, #448]	; (8001d3c <HAL_ETH_MspInit+0x240>)
 8001b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b80:	4a6e      	ldr	r2, [pc, #440]	; (8001d3c <HAL_ETH_MspInit+0x240>)
 8001b82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b8a:	4b6c      	ldr	r3, [pc, #432]	; (8001d3c <HAL_ETH_MspInit+0x240>)
 8001b8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b94:	627b      	str	r3, [r7, #36]	; 0x24
 8001b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b98:	4b68      	ldr	r3, [pc, #416]	; (8001d3c <HAL_ETH_MspInit+0x240>)
 8001b9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b9e:	4a67      	ldr	r2, [pc, #412]	; (8001d3c <HAL_ETH_MspInit+0x240>)
 8001ba0:	f043 0310 	orr.w	r3, r3, #16
 8001ba4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ba8:	4b64      	ldr	r3, [pc, #400]	; (8001d3c <HAL_ETH_MspInit+0x240>)
 8001baa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bae:	f003 0310 	and.w	r3, r3, #16
 8001bb2:	623b      	str	r3, [r7, #32]
 8001bb4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001bb6:	4b61      	ldr	r3, [pc, #388]	; (8001d3c <HAL_ETH_MspInit+0x240>)
 8001bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bbc:	4a5f      	ldr	r2, [pc, #380]	; (8001d3c <HAL_ETH_MspInit+0x240>)
 8001bbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bc6:	4b5d      	ldr	r3, [pc, #372]	; (8001d3c <HAL_ETH_MspInit+0x240>)
 8001bc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bd0:	61fb      	str	r3, [r7, #28]
 8001bd2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bd4:	4b59      	ldr	r3, [pc, #356]	; (8001d3c <HAL_ETH_MspInit+0x240>)
 8001bd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bda:	4a58      	ldr	r2, [pc, #352]	; (8001d3c <HAL_ETH_MspInit+0x240>)
 8001bdc:	f043 0304 	orr.w	r3, r3, #4
 8001be0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001be4:	4b55      	ldr	r3, [pc, #340]	; (8001d3c <HAL_ETH_MspInit+0x240>)
 8001be6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bea:	f003 0304 	and.w	r3, r3, #4
 8001bee:	61bb      	str	r3, [r7, #24]
 8001bf0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bf2:	4b52      	ldr	r3, [pc, #328]	; (8001d3c <HAL_ETH_MspInit+0x240>)
 8001bf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bf8:	4a50      	ldr	r2, [pc, #320]	; (8001d3c <HAL_ETH_MspInit+0x240>)
 8001bfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bfe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c02:	4b4e      	ldr	r3, [pc, #312]	; (8001d3c <HAL_ETH_MspInit+0x240>)
 8001c04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c0c:	617b      	str	r3, [r7, #20]
 8001c0e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c10:	4b4a      	ldr	r3, [pc, #296]	; (8001d3c <HAL_ETH_MspInit+0x240>)
 8001c12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c16:	4a49      	ldr	r2, [pc, #292]	; (8001d3c <HAL_ETH_MspInit+0x240>)
 8001c18:	f043 0301 	orr.w	r3, r3, #1
 8001c1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c20:	4b46      	ldr	r3, [pc, #280]	; (8001d3c <HAL_ETH_MspInit+0x240>)
 8001c22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	613b      	str	r3, [r7, #16]
 8001c2c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c2e:	4b43      	ldr	r3, [pc, #268]	; (8001d3c <HAL_ETH_MspInit+0x240>)
 8001c30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c34:	4a41      	ldr	r2, [pc, #260]	; (8001d3c <HAL_ETH_MspInit+0x240>)
 8001c36:	f043 0302 	orr.w	r3, r3, #2
 8001c3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c3e:	4b3f      	ldr	r3, [pc, #252]	; (8001d3c <HAL_ETH_MspInit+0x240>)
 8001c40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c44:	f003 0302 	and.w	r3, r3, #2
 8001c48:	60fb      	str	r3, [r7, #12]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PB1     ------> ETH_RXD3
    PC5     ------> ETH_RXD1
    PB0     ------> ETH_RXD2
    */
    GPIO_InitStruct.Pin = MII_TX_EN_Pin|MII_TXD1_Pin|MII_TXD0_Pin;
 8001c4c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001c50:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c52:	2302      	movs	r3, #2
 8001c54:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c56:	2300      	movs	r3, #0
 8001c58:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c5e:	230b      	movs	r3, #11
 8001c60:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c62:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c66:	4619      	mov	r1, r3
 8001c68:	4835      	ldr	r0, [pc, #212]	; (8001d40 <HAL_ETH_MspInit+0x244>)
 8001c6a:	f003 f865 	bl	8004d38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_TXD3_Pin;
 8001c6e:	2304      	movs	r3, #4
 8001c70:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c72:	2302      	movs	r3, #2
 8001c74:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c76:	2300      	movs	r3, #0
 8001c78:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c7e:	230b      	movs	r3, #11
 8001c80:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(MII_TXD3_GPIO_Port, &GPIO_InitStruct);
 8001c82:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c86:	4619      	mov	r1, r3
 8001c88:	482e      	ldr	r0, [pc, #184]	; (8001d44 <HAL_ETH_MspInit+0x248>)
 8001c8a:	f003 f855 	bl	8004d38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RX_ER_Pin;
 8001c8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c92:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c94:	2302      	movs	r3, #2
 8001c96:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ca0:	230b      	movs	r3, #11
 8001ca2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(MII_RX_ER_GPIO_Port, &GPIO_InitStruct);
 8001ca4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4827      	ldr	r0, [pc, #156]	; (8001d48 <HAL_ETH_MspInit+0x24c>)
 8001cac:	f003 f844 	bl	8004d38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDC_Pin|MII_TXD2_Pin|MII_TX_CLK_Pin|MII_RXD0_Pin
 8001cb0:	233e      	movs	r3, #62	; 0x3e
 8001cb2:	637b      	str	r3, [r7, #52]	; 0x34
                          |MII_RXD1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001cc0:	230b      	movs	r3, #11
 8001cc2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cc4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4820      	ldr	r0, [pc, #128]	; (8001d4c <HAL_ETH_MspInit+0x250>)
 8001ccc:	f003 f834 	bl	8004d38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_CRS_Pin|MII_COL_Pin;
 8001cd0:	230c      	movs	r3, #12
 8001cd2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ce0:	230b      	movs	r3, #11
 8001ce2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001ce4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4819      	ldr	r0, [pc, #100]	; (8001d50 <HAL_ETH_MspInit+0x254>)
 8001cec:	f003 f824 	bl	8004d38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDIO_Pin|MII_RX_CLK_Pin|MII_RX_DV_Pin;
 8001cf0:	2386      	movs	r3, #134	; 0x86
 8001cf2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d00:	230b      	movs	r3, #11
 8001d02:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d04:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4812      	ldr	r0, [pc, #72]	; (8001d54 <HAL_ETH_MspInit+0x258>)
 8001d0c:	f003 f814 	bl	8004d38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RX_D3_Pin|MII_RX_D2_Pin;
 8001d10:	2303      	movs	r3, #3
 8001d12:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d14:	2302      	movs	r3, #2
 8001d16:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d20:	230b      	movs	r3, #11
 8001d22:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d24:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d28:	4619      	mov	r1, r3
 8001d2a:	480b      	ldr	r0, [pc, #44]	; (8001d58 <HAL_ETH_MspInit+0x25c>)
 8001d2c:	f003 f804 	bl	8004d38 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001d30:	bf00      	nop
 8001d32:	3748      	adds	r7, #72	; 0x48
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	40028000 	.word	0x40028000
 8001d3c:	58024400 	.word	0x58024400
 8001d40:	58021800 	.word	0x58021800
 8001d44:	58021000 	.word	0x58021000
 8001d48:	58022000 	.word	0x58022000
 8001d4c:	58020800 	.word	0x58020800
 8001d50:	58021c00 	.word	0x58021c00
 8001d54:	58020000 	.word	0x58020000
 8001d58:	58020400 	.word	0x58020400

08001d5c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b0bc      	sub	sp, #240	; 0xf0
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d64:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	605a      	str	r2, [r3, #4]
 8001d6e:	609a      	str	r2, [r3, #8]
 8001d70:	60da      	str	r2, [r3, #12]
 8001d72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d74:	f107 0318 	add.w	r3, r7, #24
 8001d78:	22c0      	movs	r2, #192	; 0xc0
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f00a f897 	bl	800beb0 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a57      	ldr	r2, [pc, #348]	; (8001ee4 <HAL_FDCAN_MspInit+0x188>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d151      	bne.n	8001e30 <HAL_FDCAN_MspInit+0xd4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001d8c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001d90:	f04f 0300 	mov.w	r3, #0
 8001d94:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001d98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001d9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001da0:	f107 0318 	add.w	r3, r7, #24
 8001da4:	4618      	mov	r0, r3
 8001da6:	f004 fdb1 	bl	800690c <HAL_RCCEx_PeriphCLKConfig>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8001db0:	f7ff fd82 	bl	80018b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001db4:	4b4c      	ldr	r3, [pc, #304]	; (8001ee8 <HAL_FDCAN_MspInit+0x18c>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	3301      	adds	r3, #1
 8001dba:	4a4b      	ldr	r2, [pc, #300]	; (8001ee8 <HAL_FDCAN_MspInit+0x18c>)
 8001dbc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001dbe:	4b4a      	ldr	r3, [pc, #296]	; (8001ee8 <HAL_FDCAN_MspInit+0x18c>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d10e      	bne.n	8001de4 <HAL_FDCAN_MspInit+0x88>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001dc6:	4b49      	ldr	r3, [pc, #292]	; (8001eec <HAL_FDCAN_MspInit+0x190>)
 8001dc8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001dcc:	4a47      	ldr	r2, [pc, #284]	; (8001eec <HAL_FDCAN_MspInit+0x190>)
 8001dce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dd2:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001dd6:	4b45      	ldr	r3, [pc, #276]	; (8001eec <HAL_FDCAN_MspInit+0x190>)
 8001dd8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de0:	617b      	str	r3, [r7, #20]
 8001de2:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001de4:	4b41      	ldr	r3, [pc, #260]	; (8001eec <HAL_FDCAN_MspInit+0x190>)
 8001de6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dea:	4a40      	ldr	r2, [pc, #256]	; (8001eec <HAL_FDCAN_MspInit+0x190>)
 8001dec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001df0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001df4:	4b3d      	ldr	r3, [pc, #244]	; (8001eec <HAL_FDCAN_MspInit+0x190>)
 8001df6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dfe:	613b      	str	r3, [r7, #16]
 8001e00:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PH14     ------> FDCAN1_RX
    PH13     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = FDCAN1_RX_Pin|FDCAN1_TX_Pin;
 8001e02:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001e06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e10:	2300      	movs	r3, #0
 8001e12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e16:	2300      	movs	r3, #0
 8001e18:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001e1c:	2309      	movs	r3, #9
 8001e1e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001e22:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001e26:	4619      	mov	r1, r3
 8001e28:	4831      	ldr	r0, [pc, #196]	; (8001ef0 <HAL_FDCAN_MspInit+0x194>)
 8001e2a:	f002 ff85 	bl	8004d38 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8001e2e:	e055      	b.n	8001edc <HAL_FDCAN_MspInit+0x180>
  else if(hfdcan->Instance==FDCAN2)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a2f      	ldr	r2, [pc, #188]	; (8001ef4 <HAL_FDCAN_MspInit+0x198>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d150      	bne.n	8001edc <HAL_FDCAN_MspInit+0x180>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001e3a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001e3e:	f04f 0300 	mov.w	r3, #0
 8001e42:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001e46:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001e4a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e4e:	f107 0318 	add.w	r3, r7, #24
 8001e52:	4618      	mov	r0, r3
 8001e54:	f004 fd5a 	bl	800690c <HAL_RCCEx_PeriphCLKConfig>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <HAL_FDCAN_MspInit+0x106>
      Error_Handler();
 8001e5e:	f7ff fd2b 	bl	80018b8 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001e62:	4b21      	ldr	r3, [pc, #132]	; (8001ee8 <HAL_FDCAN_MspInit+0x18c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	3301      	adds	r3, #1
 8001e68:	4a1f      	ldr	r2, [pc, #124]	; (8001ee8 <HAL_FDCAN_MspInit+0x18c>)
 8001e6a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001e6c:	4b1e      	ldr	r3, [pc, #120]	; (8001ee8 <HAL_FDCAN_MspInit+0x18c>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d10e      	bne.n	8001e92 <HAL_FDCAN_MspInit+0x136>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001e74:	4b1d      	ldr	r3, [pc, #116]	; (8001eec <HAL_FDCAN_MspInit+0x190>)
 8001e76:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001e7a:	4a1c      	ldr	r2, [pc, #112]	; (8001eec <HAL_FDCAN_MspInit+0x190>)
 8001e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e80:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001e84:	4b19      	ldr	r3, [pc, #100]	; (8001eec <HAL_FDCAN_MspInit+0x190>)
 8001e86:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e8e:	60fb      	str	r3, [r7, #12]
 8001e90:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e92:	4b16      	ldr	r3, [pc, #88]	; (8001eec <HAL_FDCAN_MspInit+0x190>)
 8001e94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e98:	4a14      	ldr	r2, [pc, #80]	; (8001eec <HAL_FDCAN_MspInit+0x190>)
 8001e9a:	f043 0302 	orr.w	r3, r3, #2
 8001e9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ea2:	4b12      	ldr	r3, [pc, #72]	; (8001eec <HAL_FDCAN_MspInit+0x190>)
 8001ea4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ea8:	f003 0302 	and.w	r3, r3, #2
 8001eac:	60bb      	str	r3, [r7, #8]
 8001eae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FDCAN2_RX_Pin|FDCAN2_TX_Pin;
 8001eb0:	f242 0320 	movw	r3, #8224	; 0x2020
 8001eb4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb8:	2302      	movs	r3, #2
 8001eba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001eca:	2309      	movs	r3, #9
 8001ecc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ed0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	4808      	ldr	r0, [pc, #32]	; (8001ef8 <HAL_FDCAN_MspInit+0x19c>)
 8001ed8:	f002 ff2e 	bl	8004d38 <HAL_GPIO_Init>
}
 8001edc:	bf00      	nop
 8001ede:	37f0      	adds	r7, #240	; 0xf0
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	4000a000 	.word	0x4000a000
 8001ee8:	24000cf0 	.word	0x24000cf0
 8001eec:	58024400 	.word	0x58024400
 8001ef0:	58021c00 	.word	0x58021c00
 8001ef4:	4000a400 	.word	0x4000a400
 8001ef8:	58020400 	.word	0x58020400

08001efc <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b0be      	sub	sp, #248	; 0xf8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f04:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	605a      	str	r2, [r3, #4]
 8001f0e:	609a      	str	r2, [r3, #8]
 8001f10:	60da      	str	r2, [r3, #12]
 8001f12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f14:	f107 0320 	add.w	r3, r7, #32
 8001f18:	22c0      	movs	r2, #192	; 0xc0
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f009 ffc7 	bl	800beb0 <memset>
  if(hltdc->Instance==LTDC)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a66      	ldr	r2, [pc, #408]	; (80020c0 <HAL_LTDC_MspInit+0x1c4>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	f040 80c4 	bne.w	80020b6 <HAL_LTDC_MspInit+0x1ba>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001f2e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001f32:	f04f 0300 	mov.w	r3, #0
 8001f36:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.PLL3.PLL3M = 32;
 8001f3a:	2320      	movs	r3, #32
 8001f3c:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3N = 192;
 8001f3e:	23c0      	movs	r3, #192	; 0xc0
 8001f40:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001f42:	2302      	movs	r3, #2
 8001f44:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001f46:	2302      	movs	r3, #2
 8001f48:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001f4e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001f52:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8001f54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f58:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0.0;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f5e:	f107 0320 	add.w	r3, r7, #32
 8001f62:	4618      	mov	r0, r3
 8001f64:	f004 fcd2 	bl	800690c <HAL_RCCEx_PeriphCLKConfig>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <HAL_LTDC_MspInit+0x76>
    {
      Error_Handler();
 8001f6e:	f7ff fca3 	bl	80018b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001f72:	4b54      	ldr	r3, [pc, #336]	; (80020c4 <HAL_LTDC_MspInit+0x1c8>)
 8001f74:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001f78:	4a52      	ldr	r2, [pc, #328]	; (80020c4 <HAL_LTDC_MspInit+0x1c8>)
 8001f7a:	f043 0308 	orr.w	r3, r3, #8
 8001f7e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8001f82:	4b50      	ldr	r3, [pc, #320]	; (80020c4 <HAL_LTDC_MspInit+0x1c8>)
 8001f84:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001f88:	f003 0308 	and.w	r3, r3, #8
 8001f8c:	61fb      	str	r3, [r7, #28]
 8001f8e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001f90:	4b4c      	ldr	r3, [pc, #304]	; (80020c4 <HAL_LTDC_MspInit+0x1c8>)
 8001f92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f96:	4a4b      	ldr	r2, [pc, #300]	; (80020c4 <HAL_LTDC_MspInit+0x1c8>)
 8001f98:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fa0:	4b48      	ldr	r3, [pc, #288]	; (80020c4 <HAL_LTDC_MspInit+0x1c8>)
 8001fa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001faa:	61bb      	str	r3, [r7, #24]
 8001fac:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001fae:	4b45      	ldr	r3, [pc, #276]	; (80020c4 <HAL_LTDC_MspInit+0x1c8>)
 8001fb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fb4:	4a43      	ldr	r2, [pc, #268]	; (80020c4 <HAL_LTDC_MspInit+0x1c8>)
 8001fb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fbe:	4b41      	ldr	r3, [pc, #260]	; (80020c4 <HAL_LTDC_MspInit+0x1c8>)
 8001fc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc8:	617b      	str	r3, [r7, #20]
 8001fca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001fcc:	4b3d      	ldr	r3, [pc, #244]	; (80020c4 <HAL_LTDC_MspInit+0x1c8>)
 8001fce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fd2:	4a3c      	ldr	r2, [pc, #240]	; (80020c4 <HAL_LTDC_MspInit+0x1c8>)
 8001fd4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fdc:	4b39      	ldr	r3, [pc, #228]	; (80020c4 <HAL_LTDC_MspInit+0x1c8>)
 8001fde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fe2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fe6:	613b      	str	r3, [r7, #16]
 8001fe8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fea:	4b36      	ldr	r3, [pc, #216]	; (80020c4 <HAL_LTDC_MspInit+0x1c8>)
 8001fec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ff0:	4a34      	ldr	r2, [pc, #208]	; (80020c4 <HAL_LTDC_MspInit+0x1c8>)
 8001ff2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ff6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ffa:	4b32      	ldr	r3, [pc, #200]	; (80020c4 <HAL_LTDC_MspInit+0x1c8>)
 8001ffc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002000:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002004:	60fb      	str	r3, [r7, #12]
 8002006:	68fb      	ldr	r3, [r7, #12]
    PJ5     ------> LTDC_R6
    PH9     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    PJ4     ------> LTDC_R5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
 8002008:	23fc      	movs	r3, #252	; 0xfc
 800200a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_7|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200e:	2302      	movs	r3, #2
 8002010:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002014:	2300      	movs	r3, #0
 8002016:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800201a:	2300      	movs	r3, #0
 800201c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002020:	230e      	movs	r3, #14
 8002022:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002026:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800202a:	4619      	mov	r1, r3
 800202c:	4826      	ldr	r0, [pc, #152]	; (80020c8 <HAL_LTDC_MspInit+0x1cc>)
 800202e:	f002 fe83 	bl	8004d38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
 8002032:	f24d 2303 	movw	r3, #53763	; 0xd203
 8002036:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203a:	2302      	movs	r3, #2
 800203c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002040:	2300      	movs	r3, #0
 8002042:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002046:	2300      	movs	r3, #0
 8002048:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800204c:	230e      	movs	r3, #14
 800204e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002052:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002056:	4619      	mov	r1, r3
 8002058:	481c      	ldr	r0, [pc, #112]	; (80020cc <HAL_LTDC_MspInit+0x1d0>)
 800205a:	f002 fe6d 	bl	8004d38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DISP_Pin|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
 800205e:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8002062:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002066:	2302      	movs	r3, #2
 8002068:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206c:	2300      	movs	r3, #0
 800206e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002072:	2300      	movs	r3, #0
 8002074:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002078:	230e      	movs	r3, #14
 800207a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800207e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002082:	4619      	mov	r1, r3
 8002084:	4812      	ldr	r0, [pc, #72]	; (80020d0 <HAL_LTDC_MspInit+0x1d4>)
 8002086:	f002 fe57 	bl	8004d38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800208a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800208e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002092:	2302      	movs	r3, #2
 8002094:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002098:	2300      	movs	r3, #0
 800209a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800209e:	2300      	movs	r3, #0
 80020a0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020a4:	230e      	movs	r3, #14
 80020a6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80020aa:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80020ae:	4619      	mov	r1, r3
 80020b0:	4808      	ldr	r0, [pc, #32]	; (80020d4 <HAL_LTDC_MspInit+0x1d8>)
 80020b2:	f002 fe41 	bl	8004d38 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80020b6:	bf00      	nop
 80020b8:	37f8      	adds	r7, #248	; 0xf8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	50001000 	.word	0x50001000
 80020c4:	58024400 	.word	0x58024400
 80020c8:	58022800 	.word	0x58022800
 80020cc:	58022000 	.word	0x58022000
 80020d0:	58022400 	.word	0x58022400
 80020d4:	58021c00 	.word	0x58021c00

080020d8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b0b2      	sub	sp, #200	; 0xc8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020e0:	f107 0308 	add.w	r3, r7, #8
 80020e4:	22c0      	movs	r2, #192	; 0xc0
 80020e6:	2100      	movs	r1, #0
 80020e8:	4618      	mov	r0, r3
 80020ea:	f009 fee1 	bl	800beb0 <memset>
  if(hrtc->Instance==RTC)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a10      	ldr	r2, [pc, #64]	; (8002134 <HAL_RTC_MspInit+0x5c>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d119      	bne.n	800212c <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80020f8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80020fc:	f04f 0300 	mov.w	r3, #0
 8002100:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002104:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002108:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800210c:	f107 0308 	add.w	r3, r7, #8
 8002110:	4618      	mov	r0, r3
 8002112:	f004 fbfb 	bl	800690c <HAL_RCCEx_PeriphCLKConfig>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 800211c:	f7ff fbcc 	bl	80018b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002120:	4b05      	ldr	r3, [pc, #20]	; (8002138 <HAL_RTC_MspInit+0x60>)
 8002122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002124:	4a04      	ldr	r2, [pc, #16]	; (8002138 <HAL_RTC_MspInit+0x60>)
 8002126:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800212a:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800212c:	bf00      	nop
 800212e:	37c8      	adds	r7, #200	; 0xc8
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	58004000 	.word	0x58004000
 8002138:	58024400 	.word	0x58024400

0800213c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b0bc      	sub	sp, #240	; 0xf0
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002144:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	605a      	str	r2, [r3, #4]
 800214e:	609a      	str	r2, [r3, #8]
 8002150:	60da      	str	r2, [r3, #12]
 8002152:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002154:	f107 0318 	add.w	r3, r7, #24
 8002158:	22c0      	movs	r2, #192	; 0xc0
 800215a:	2100      	movs	r1, #0
 800215c:	4618      	mov	r0, r3
 800215e:	f009 fea7 	bl	800beb0 <memset>
  if(hspi->Instance==SPI2)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a55      	ldr	r2, [pc, #340]	; (80022bc <HAL_SPI_MspInit+0x180>)
 8002168:	4293      	cmp	r3, r2
 800216a:	f040 80a3 	bne.w	80022b4 <HAL_SPI_MspInit+0x178>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800216e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002172:	f04f 0300 	mov.w	r3, #0
 8002176:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800217a:	2300      	movs	r3, #0
 800217c:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800217e:	f107 0318 	add.w	r3, r7, #24
 8002182:	4618      	mov	r0, r3
 8002184:	f004 fbc2 	bl	800690c <HAL_RCCEx_PeriphCLKConfig>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 800218e:	f7ff fb93 	bl	80018b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002192:	4b4b      	ldr	r3, [pc, #300]	; (80022c0 <HAL_SPI_MspInit+0x184>)
 8002194:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002198:	4a49      	ldr	r2, [pc, #292]	; (80022c0 <HAL_SPI_MspInit+0x184>)
 800219a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800219e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80021a2:	4b47      	ldr	r3, [pc, #284]	; (80022c0 <HAL_SPI_MspInit+0x184>)
 80021a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021ac:	617b      	str	r3, [r7, #20]
 80021ae:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021b0:	4b43      	ldr	r3, [pc, #268]	; (80022c0 <HAL_SPI_MspInit+0x184>)
 80021b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021b6:	4a42      	ldr	r2, [pc, #264]	; (80022c0 <HAL_SPI_MspInit+0x184>)
 80021b8:	f043 0302 	orr.w	r3, r3, #2
 80021bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021c0:	4b3f      	ldr	r3, [pc, #252]	; (80022c0 <HAL_SPI_MspInit+0x184>)
 80021c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	613b      	str	r3, [r7, #16]
 80021cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021ce:	4b3c      	ldr	r3, [pc, #240]	; (80022c0 <HAL_SPI_MspInit+0x184>)
 80021d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021d4:	4a3a      	ldr	r2, [pc, #232]	; (80022c0 <HAL_SPI_MspInit+0x184>)
 80021d6:	f043 0308 	orr.w	r3, r3, #8
 80021da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021de:	4b38      	ldr	r3, [pc, #224]	; (80022c0 <HAL_SPI_MspInit+0x184>)
 80021e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021e4:	f003 0308 	and.w	r3, r3, #8
 80021e8:	60fb      	str	r3, [r7, #12]
 80021ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80021ec:	4b34      	ldr	r3, [pc, #208]	; (80022c0 <HAL_SPI_MspInit+0x184>)
 80021ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021f2:	4a33      	ldr	r2, [pc, #204]	; (80022c0 <HAL_SPI_MspInit+0x184>)
 80021f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021fc:	4b30      	ldr	r3, [pc, #192]	; (80022c0 <HAL_SPI_MspInit+0x184>)
 80021fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002206:	60bb      	str	r3, [r7, #8]
 8002208:	68bb      	ldr	r3, [r7, #8]
    PB4 (NJTRST)     ------> SPI2_NSS
    PD3     ------> SPI2_SCK
    PI2     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800220a:	2310      	movs	r3, #16
 800220c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002210:	2302      	movs	r3, #2
 8002212:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002216:	2300      	movs	r3, #0
 8002218:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800221c:	2300      	movs	r3, #0
 800221e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8002222:	2307      	movs	r3, #7
 8002224:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002228:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800222c:	4619      	mov	r1, r3
 800222e:	4825      	ldr	r0, [pc, #148]	; (80022c4 <HAL_SPI_MspInit+0x188>)
 8002230:	f002 fd82 	bl	8004d38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002234:	2308      	movs	r3, #8
 8002236:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223a:	2302      	movs	r3, #2
 800223c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002240:	2300      	movs	r3, #0
 8002242:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002246:	2300      	movs	r3, #0
 8002248:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800224c:	2305      	movs	r3, #5
 800224e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002252:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002256:	4619      	mov	r1, r3
 8002258:	481b      	ldr	r0, [pc, #108]	; (80022c8 <HAL_SPI_MspInit+0x18c>)
 800225a:	f002 fd6d 	bl	8004d38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800225e:	2304      	movs	r3, #4
 8002260:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002264:	2302      	movs	r3, #2
 8002266:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226a:	2300      	movs	r3, #0
 800226c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002270:	2300      	movs	r3, #0
 8002272:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002276:	2305      	movs	r3, #5
 8002278:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800227c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002280:	4619      	mov	r1, r3
 8002282:	4812      	ldr	r0, [pc, #72]	; (80022cc <HAL_SPI_MspInit+0x190>)
 8002284:	f002 fd58 	bl	8004d38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002288:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800228c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002290:	2302      	movs	r3, #2
 8002292:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002296:	2300      	movs	r3, #0
 8002298:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800229c:	2300      	movs	r3, #0
 800229e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80022a2:	2305      	movs	r3, #5
 80022a4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022a8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80022ac:	4619      	mov	r1, r3
 80022ae:	4805      	ldr	r0, [pc, #20]	; (80022c4 <HAL_SPI_MspInit+0x188>)
 80022b0:	f002 fd42 	bl	8004d38 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80022b4:	bf00      	nop
 80022b6:	37f0      	adds	r7, #240	; 0xf0
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	40003800 	.word	0x40003800
 80022c0:	58024400 	.word	0x58024400
 80022c4:	58020400 	.word	0x58020400
 80022c8:	58020c00 	.word	0x58020c00
 80022cc:	58022000 	.word	0x58022000

080022d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a0b      	ldr	r2, [pc, #44]	; (800230c <HAL_TIM_Base_MspInit+0x3c>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d10e      	bne.n	8002300 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80022e2:	4b0b      	ldr	r3, [pc, #44]	; (8002310 <HAL_TIM_Base_MspInit+0x40>)
 80022e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022e8:	4a09      	ldr	r2, [pc, #36]	; (8002310 <HAL_TIM_Base_MspInit+0x40>)
 80022ea:	f043 0302 	orr.w	r3, r3, #2
 80022ee:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80022f2:	4b07      	ldr	r3, [pc, #28]	; (8002310 <HAL_TIM_Base_MspInit+0x40>)
 80022f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022f8:	f003 0302 	and.w	r3, r3, #2
 80022fc:	60fb      	str	r3, [r7, #12]
 80022fe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002300:	bf00      	nop
 8002302:	3714      	adds	r7, #20
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr
 800230c:	40000400 	.word	0x40000400
 8002310:	58024400 	.word	0x58024400

08002314 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b0ba      	sub	sp, #232	; 0xe8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800231c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	605a      	str	r2, [r3, #4]
 8002326:	609a      	str	r2, [r3, #8]
 8002328:	60da      	str	r2, [r3, #12]
 800232a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800232c:	f107 0310 	add.w	r3, r7, #16
 8002330:	22c0      	movs	r2, #192	; 0xc0
 8002332:	2100      	movs	r1, #0
 8002334:	4618      	mov	r0, r3
 8002336:	f009 fdbb 	bl	800beb0 <memset>
  if(huart->Instance==USART3)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a27      	ldr	r2, [pc, #156]	; (80023dc <HAL_UART_MspInit+0xc8>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d146      	bne.n	80023d2 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002344:	f04f 0202 	mov.w	r2, #2
 8002348:	f04f 0300 	mov.w	r3, #0
 800234c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002350:	2300      	movs	r3, #0
 8002352:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002356:	f107 0310 	add.w	r3, r7, #16
 800235a:	4618      	mov	r0, r3
 800235c:	f004 fad6 	bl	800690c <HAL_RCCEx_PeriphCLKConfig>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002366:	f7ff faa7 	bl	80018b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800236a:	4b1d      	ldr	r3, [pc, #116]	; (80023e0 <HAL_UART_MspInit+0xcc>)
 800236c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002370:	4a1b      	ldr	r2, [pc, #108]	; (80023e0 <HAL_UART_MspInit+0xcc>)
 8002372:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002376:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800237a:	4b19      	ldr	r3, [pc, #100]	; (80023e0 <HAL_UART_MspInit+0xcc>)
 800237c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002380:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002384:	60fb      	str	r3, [r7, #12]
 8002386:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002388:	4b15      	ldr	r3, [pc, #84]	; (80023e0 <HAL_UART_MspInit+0xcc>)
 800238a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800238e:	4a14      	ldr	r2, [pc, #80]	; (80023e0 <HAL_UART_MspInit+0xcc>)
 8002390:	f043 0302 	orr.w	r3, r3, #2
 8002394:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002398:	4b11      	ldr	r3, [pc, #68]	; (80023e0 <HAL_UART_MspInit+0xcc>)
 800239a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	60bb      	str	r3, [r7, #8]
 80023a4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80023a6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80023aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ae:	2302      	movs	r3, #2
 80023b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b4:	2300      	movs	r3, #0
 80023b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ba:	2300      	movs	r3, #0
 80023bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80023c0:	2307      	movs	r3, #7
 80023c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023c6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80023ca:	4619      	mov	r1, r3
 80023cc:	4805      	ldr	r0, [pc, #20]	; (80023e4 <HAL_UART_MspInit+0xd0>)
 80023ce:	f002 fcb3 	bl	8004d38 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80023d2:	bf00      	nop
 80023d4:	37e8      	adds	r7, #232	; 0xe8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	40004800 	.word	0x40004800
 80023e0:	58024400 	.word	0x58024400
 80023e4:	58020400 	.word	0x58020400

080023e8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b0ba      	sub	sp, #232	; 0xe8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	605a      	str	r2, [r3, #4]
 80023fa:	609a      	str	r2, [r3, #8]
 80023fc:	60da      	str	r2, [r3, #12]
 80023fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002400:	f107 0310 	add.w	r3, r7, #16
 8002404:	22c0      	movs	r2, #192	; 0xc0
 8002406:	2100      	movs	r1, #0
 8002408:	4618      	mov	r0, r3
 800240a:	f009 fd51 	bl	800beb0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a30      	ldr	r2, [pc, #192]	; (80024d4 <HAL_PCD_MspInit+0xec>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d159      	bne.n	80024cc <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002418:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800241c:	f04f 0300 	mov.w	r3, #0
 8002420:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8002424:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002428:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800242c:	f107 0310 	add.w	r3, r7, #16
 8002430:	4618      	mov	r0, r3
 8002432:	f004 fa6b 	bl	800690c <HAL_RCCEx_PeriphCLKConfig>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800243c:	f7ff fa3c 	bl	80018b8 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8002440:	f003 fa6e 	bl	8005920 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002444:	4b24      	ldr	r3, [pc, #144]	; (80024d8 <HAL_PCD_MspInit+0xf0>)
 8002446:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800244a:	4a23      	ldr	r2, [pc, #140]	; (80024d8 <HAL_PCD_MspInit+0xf0>)
 800244c:	f043 0301 	orr.w	r3, r3, #1
 8002450:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002454:	4b20      	ldr	r3, [pc, #128]	; (80024d8 <HAL_PCD_MspInit+0xf0>)
 8002456:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	60fb      	str	r3, [r7, #12]
 8002460:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = VBUS_FS2_Pin;
 8002462:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002466:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800246a:	2300      	movs	r3, #0
 800246c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002470:	2300      	movs	r3, #0
 8002472:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(VBUS_FS2_GPIO_Port, &GPIO_InitStruct);
 8002476:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800247a:	4619      	mov	r1, r3
 800247c:	4817      	ldr	r0, [pc, #92]	; (80024dc <HAL_PCD_MspInit+0xf4>)
 800247e:	f002 fc5b 	bl	8004d38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS2_P_Pin|USB_OTG_FS2_N_Pin;
 8002482:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002486:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800248a:	2302      	movs	r3, #2
 800248c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002490:	2300      	movs	r3, #0
 8002492:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002496:	2300      	movs	r3, #0
 8002498:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800249c:	230a      	movs	r3, #10
 800249e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024a2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80024a6:	4619      	mov	r1, r3
 80024a8:	480c      	ldr	r0, [pc, #48]	; (80024dc <HAL_PCD_MspInit+0xf4>)
 80024aa:	f002 fc45 	bl	8004d38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80024ae:	4b0a      	ldr	r3, [pc, #40]	; (80024d8 <HAL_PCD_MspInit+0xf0>)
 80024b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80024b4:	4a08      	ldr	r2, [pc, #32]	; (80024d8 <HAL_PCD_MspInit+0xf0>)
 80024b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80024ba:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80024be:	4b06      	ldr	r3, [pc, #24]	; (80024d8 <HAL_PCD_MspInit+0xf0>)
 80024c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80024c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024c8:	60bb      	str	r3, [r7, #8]
 80024ca:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80024cc:	bf00      	nop
 80024ce:	37e8      	adds	r7, #232	; 0xe8
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40080000 	.word	0x40080000
 80024d8:	58024400 	.word	0x58024400
 80024dc:	58020000 	.word	0x58020000

080024e0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b0b8      	sub	sp, #224	; 0xe0
 80024e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80024e6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80024ea:	2200      	movs	r2, #0
 80024ec:	601a      	str	r2, [r3, #0]
 80024ee:	605a      	str	r2, [r3, #4]
 80024f0:	609a      	str	r2, [r3, #8]
 80024f2:	60da      	str	r2, [r3, #12]
 80024f4:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80024f6:	4b51      	ldr	r3, [pc, #324]	; (800263c <HAL_FMC_MspInit+0x15c>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	f040 8099 	bne.w	8002632 <HAL_FMC_MspInit+0x152>
    return;
  }
  FMC_Initialized = 1;
 8002500:	4b4e      	ldr	r3, [pc, #312]	; (800263c <HAL_FMC_MspInit+0x15c>)
 8002502:	2201      	movs	r2, #1
 8002504:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002506:	f107 0308 	add.w	r3, r7, #8
 800250a:	22c0      	movs	r2, #192	; 0xc0
 800250c:	2100      	movs	r1, #0
 800250e:	4618      	mov	r0, r3
 8002510:	f009 fcce 	bl	800beb0 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8002514:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002518:	f04f 0300 	mov.w	r3, #0
 800251c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8002520:	2300      	movs	r3, #0
 8002522:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002524:	f107 0308 	add.w	r3, r7, #8
 8002528:	4618      	mov	r0, r3
 800252a:	f004 f9ef 	bl	800690c <HAL_RCCEx_PeriphCLKConfig>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 8002534:	f7ff f9c0 	bl	80018b8 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002538:	4b41      	ldr	r3, [pc, #260]	; (8002640 <HAL_FMC_MspInit+0x160>)
 800253a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800253e:	4a40      	ldr	r2, [pc, #256]	; (8002640 <HAL_FMC_MspInit+0x160>)
 8002540:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002544:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8002548:	4b3d      	ldr	r3, [pc, #244]	; (8002640 <HAL_FMC_MspInit+0x160>)
 800254a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800254e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002552:	607b      	str	r3, [r7, #4]
 8002554:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8002556:	f64f 7383 	movw	r3, #65411	; 0xff83
 800255a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255e:	2302      	movs	r3, #2
 8002560:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002564:	2300      	movs	r3, #0
 8002566:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800256a:	2303      	movs	r3, #3
 800256c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002570:	230c      	movs	r3, #12
 8002572:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002576:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800257a:	4619      	mov	r1, r3
 800257c:	4831      	ldr	r0, [pc, #196]	; (8002644 <HAL_FMC_MspInit+0x164>)
 800257e:	f002 fbdb 	bl	8004d38 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8002582:	f248 1333 	movw	r3, #33075	; 0x8133
 8002586:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800258a:	2302      	movs	r3, #2
 800258c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002590:	2300      	movs	r3, #0
 8002592:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002596:	2303      	movs	r3, #3
 8002598:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800259c:	230c      	movs	r3, #12
 800259e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80025a2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80025a6:	4619      	mov	r1, r3
 80025a8:	4827      	ldr	r0, [pc, #156]	; (8002648 <HAL_FMC_MspInit+0x168>)
 80025aa:	f002 fbc5 	bl	8004d38 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 80025ae:	f24c 7303 	movw	r3, #50947	; 0xc703
 80025b2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b6:	2302      	movs	r3, #2
 80025b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025bc:	2300      	movs	r3, #0
 80025be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025c2:	2303      	movs	r3, #3
 80025c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80025c8:	230c      	movs	r3, #12
 80025ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025ce:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80025d2:	4619      	mov	r1, r3
 80025d4:	481d      	ldr	r0, [pc, #116]	; (800264c <HAL_FMC_MspInit+0x16c>)
 80025d6:	f002 fbaf 	bl	8004d38 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 80025da:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80025de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e2:	2302      	movs	r3, #2
 80025e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e8:	2300      	movs	r3, #0
 80025ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ee:	2303      	movs	r3, #3
 80025f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80025f4:	230c      	movs	r3, #12
 80025f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80025fa:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80025fe:	4619      	mov	r1, r3
 8002600:	4813      	ldr	r0, [pc, #76]	; (8002650 <HAL_FMC_MspInit+0x170>)
 8002602:	f002 fb99 	bl	8004d38 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002606:	23e0      	movs	r3, #224	; 0xe0
 8002608:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800260c:	2302      	movs	r3, #2
 800260e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002612:	2300      	movs	r3, #0
 8002614:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002618:	2303      	movs	r3, #3
 800261a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800261e:	230c      	movs	r3, #12
 8002620:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002624:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002628:	4619      	mov	r1, r3
 800262a:	480a      	ldr	r0, [pc, #40]	; (8002654 <HAL_FMC_MspInit+0x174>)
 800262c:	f002 fb84 	bl	8004d38 <HAL_GPIO_Init>
 8002630:	e000      	b.n	8002634 <HAL_FMC_MspInit+0x154>
    return;
 8002632:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002634:	37e0      	adds	r7, #224	; 0xe0
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	24000cf4 	.word	0x24000cf4
 8002640:	58024400 	.word	0x58024400
 8002644:	58021000 	.word	0x58021000
 8002648:	58021800 	.word	0x58021800
 800264c:	58020c00 	.word	0x58020c00
 8002650:	58021400 	.word	0x58021400
 8002654:	58021c00 	.word	0x58021c00

08002658 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002660:	f7ff ff3e 	bl	80024e0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002664:	bf00      	nop
 8002666:	3708      	adds	r7, #8
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b0ba      	sub	sp, #232	; 0xe8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002674:	f107 0310 	add.w	r3, r7, #16
 8002678:	22c0      	movs	r2, #192	; 0xc0
 800267a:	2100      	movs	r1, #0
 800267c:	4618      	mov	r0, r3
 800267e:	f009 fc17 	bl	800beb0 <memset>
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a45      	ldr	r2, [pc, #276]	; (800279c <HAL_SAI_MspInit+0x130>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d13e      	bne.n	800270a <HAL_SAI_MspInit+0x9e>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 800268c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002690:	f04f 0300 	mov.w	r3, #0
 8002694:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 8002698:	2300      	movs	r3, #0
 800269a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800269c:	f107 0310 	add.w	r3, r7, #16
 80026a0:	4618      	mov	r0, r3
 80026a2:	f004 f933 	bl	800690c <HAL_RCCEx_PeriphCLKConfig>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <HAL_SAI_MspInit+0x44>
    {
      Error_Handler();
 80026ac:	f7ff f904 	bl	80018b8 <Error_Handler>
    }

    if (SAI2_client == 0)
 80026b0:	4b3b      	ldr	r3, [pc, #236]	; (80027a0 <HAL_SAI_MspInit+0x134>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d10e      	bne.n	80026d6 <HAL_SAI_MspInit+0x6a>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80026b8:	4b3a      	ldr	r3, [pc, #232]	; (80027a4 <HAL_SAI_MspInit+0x138>)
 80026ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80026be:	4a39      	ldr	r2, [pc, #228]	; (80027a4 <HAL_SAI_MspInit+0x138>)
 80026c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80026c4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80026c8:	4b36      	ldr	r3, [pc, #216]	; (80027a4 <HAL_SAI_MspInit+0x138>)
 80026ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80026ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026d2:	60fb      	str	r3, [r7, #12]
 80026d4:	68fb      	ldr	r3, [r7, #12]
    }
    SAI2_client ++;
 80026d6:	4b32      	ldr	r3, [pc, #200]	; (80027a0 <HAL_SAI_MspInit+0x134>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	3301      	adds	r3, #1
 80026dc:	4a30      	ldr	r2, [pc, #192]	; (80027a0 <HAL_SAI_MspInit+0x134>)
 80026de:	6013      	str	r3, [r2, #0]
    PI6     ------> SAI2_SD_A
    PI5     ------> SAI2_SCK_A
    PI4     ------> SAI2_MCLK_A
    PI7     ------> SAI2_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_7;
 80026e0:	23f0      	movs	r3, #240	; 0xf0
 80026e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e6:	2302      	movs	r3, #2
 80026e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ec:	2300      	movs	r3, #0
 80026ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f2:	2300      	movs	r3, #0
 80026f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80026f8:	230a      	movs	r3, #10
 80026fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80026fe:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002702:	4619      	mov	r1, r3
 8002704:	4828      	ldr	r0, [pc, #160]	; (80027a8 <HAL_SAI_MspInit+0x13c>)
 8002706:	f002 fb17 	bl	8004d38 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a27      	ldr	r2, [pc, #156]	; (80027ac <HAL_SAI_MspInit+0x140>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d13f      	bne.n	8002794 <HAL_SAI_MspInit+0x128>
    {
      /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8002714:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002718:	f04f 0300 	mov.w	r3, #0
 800271c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 8002720:	2300      	movs	r3, #0
 8002722:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002724:	f107 0310 	add.w	r3, r7, #16
 8002728:	4618      	mov	r0, r3
 800272a:	f004 f8ef 	bl	800690c <HAL_RCCEx_PeriphCLKConfig>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <HAL_SAI_MspInit+0xcc>
    {
      Error_Handler();
 8002734:	f7ff f8c0 	bl	80018b8 <Error_Handler>
    }

      if (SAI2_client == 0)
 8002738:	4b19      	ldr	r3, [pc, #100]	; (80027a0 <HAL_SAI_MspInit+0x134>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d10e      	bne.n	800275e <HAL_SAI_MspInit+0xf2>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002740:	4b18      	ldr	r3, [pc, #96]	; (80027a4 <HAL_SAI_MspInit+0x138>)
 8002742:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002746:	4a17      	ldr	r2, [pc, #92]	; (80027a4 <HAL_SAI_MspInit+0x138>)
 8002748:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800274c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002750:	4b14      	ldr	r3, [pc, #80]	; (80027a4 <HAL_SAI_MspInit+0x138>)
 8002752:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002756:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800275a:	60bb      	str	r3, [r7, #8]
 800275c:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 800275e:	4b10      	ldr	r3, [pc, #64]	; (80027a0 <HAL_SAI_MspInit+0x134>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	3301      	adds	r3, #1
 8002764:	4a0e      	ldr	r2, [pc, #56]	; (80027a0 <HAL_SAI_MspInit+0x134>)
 8002766:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002768:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800276c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002770:	2302      	movs	r3, #2
 8002772:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002776:	2300      	movs	r3, #0
 8002778:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800277c:	2300      	movs	r3, #0
 800277e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002782:	230a      	movs	r3, #10
 8002784:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002788:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800278c:	4619      	mov	r1, r3
 800278e:	4808      	ldr	r0, [pc, #32]	; (80027b0 <HAL_SAI_MspInit+0x144>)
 8002790:	f002 fad2 	bl	8004d38 <HAL_GPIO_Init>

    }
}
 8002794:	bf00      	nop
 8002796:	37e8      	adds	r7, #232	; 0xe8
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	40015c04 	.word	0x40015c04
 80027a0:	24000cf8 	.word	0x24000cf8
 80027a4:	58024400 	.word	0x58024400
 80027a8:	58022000 	.word	0x58022000
 80027ac:	40015c24 	.word	0x40015c24
 80027b0:	58021800 	.word	0x58021800

080027b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027b8:	e7fe      	b.n	80027b8 <NMI_Handler+0x4>

080027ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027ba:	b480      	push	{r7}
 80027bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027be:	e7fe      	b.n	80027be <HardFault_Handler+0x4>

080027c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027c4:	e7fe      	b.n	80027c4 <MemManage_Handler+0x4>

080027c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027c6:	b480      	push	{r7}
 80027c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027ca:	e7fe      	b.n	80027ca <BusFault_Handler+0x4>

080027cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027d0:	e7fe      	b.n	80027d0 <UsageFault_Handler+0x4>

080027d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027d2:	b480      	push	{r7}
 80027d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027d6:	bf00      	nop
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027e4:	bf00      	nop
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr

080027ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027ee:	b480      	push	{r7}
 80027f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027f2:	bf00      	nop
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002800:	f000 f926 	bl	8002a50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002804:	bf00      	nop
 8002806:	bd80      	pop	{r7, pc}

08002808 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800280c:	4b37      	ldr	r3, [pc, #220]	; (80028ec <SystemInit+0xe4>)
 800280e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002812:	4a36      	ldr	r2, [pc, #216]	; (80028ec <SystemInit+0xe4>)
 8002814:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002818:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800281c:	4b34      	ldr	r3, [pc, #208]	; (80028f0 <SystemInit+0xe8>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 030f 	and.w	r3, r3, #15
 8002824:	2b06      	cmp	r3, #6
 8002826:	d807      	bhi.n	8002838 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002828:	4b31      	ldr	r3, [pc, #196]	; (80028f0 <SystemInit+0xe8>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f023 030f 	bic.w	r3, r3, #15
 8002830:	4a2f      	ldr	r2, [pc, #188]	; (80028f0 <SystemInit+0xe8>)
 8002832:	f043 0307 	orr.w	r3, r3, #7
 8002836:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002838:	4b2e      	ldr	r3, [pc, #184]	; (80028f4 <SystemInit+0xec>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a2d      	ldr	r2, [pc, #180]	; (80028f4 <SystemInit+0xec>)
 800283e:	f043 0301 	orr.w	r3, r3, #1
 8002842:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002844:	4b2b      	ldr	r3, [pc, #172]	; (80028f4 <SystemInit+0xec>)
 8002846:	2200      	movs	r2, #0
 8002848:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800284a:	4b2a      	ldr	r3, [pc, #168]	; (80028f4 <SystemInit+0xec>)
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	4929      	ldr	r1, [pc, #164]	; (80028f4 <SystemInit+0xec>)
 8002850:	4b29      	ldr	r3, [pc, #164]	; (80028f8 <SystemInit+0xf0>)
 8002852:	4013      	ands	r3, r2
 8002854:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002856:	4b26      	ldr	r3, [pc, #152]	; (80028f0 <SystemInit+0xe8>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0308 	and.w	r3, r3, #8
 800285e:	2b00      	cmp	r3, #0
 8002860:	d007      	beq.n	8002872 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002862:	4b23      	ldr	r3, [pc, #140]	; (80028f0 <SystemInit+0xe8>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f023 030f 	bic.w	r3, r3, #15
 800286a:	4a21      	ldr	r2, [pc, #132]	; (80028f0 <SystemInit+0xe8>)
 800286c:	f043 0307 	orr.w	r3, r3, #7
 8002870:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002872:	4b20      	ldr	r3, [pc, #128]	; (80028f4 <SystemInit+0xec>)
 8002874:	2200      	movs	r2, #0
 8002876:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002878:	4b1e      	ldr	r3, [pc, #120]	; (80028f4 <SystemInit+0xec>)
 800287a:	2200      	movs	r2, #0
 800287c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800287e:	4b1d      	ldr	r3, [pc, #116]	; (80028f4 <SystemInit+0xec>)
 8002880:	2200      	movs	r2, #0
 8002882:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002884:	4b1b      	ldr	r3, [pc, #108]	; (80028f4 <SystemInit+0xec>)
 8002886:	4a1d      	ldr	r2, [pc, #116]	; (80028fc <SystemInit+0xf4>)
 8002888:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800288a:	4b1a      	ldr	r3, [pc, #104]	; (80028f4 <SystemInit+0xec>)
 800288c:	4a1c      	ldr	r2, [pc, #112]	; (8002900 <SystemInit+0xf8>)
 800288e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002890:	4b18      	ldr	r3, [pc, #96]	; (80028f4 <SystemInit+0xec>)
 8002892:	4a1c      	ldr	r2, [pc, #112]	; (8002904 <SystemInit+0xfc>)
 8002894:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002896:	4b17      	ldr	r3, [pc, #92]	; (80028f4 <SystemInit+0xec>)
 8002898:	2200      	movs	r2, #0
 800289a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800289c:	4b15      	ldr	r3, [pc, #84]	; (80028f4 <SystemInit+0xec>)
 800289e:	4a19      	ldr	r2, [pc, #100]	; (8002904 <SystemInit+0xfc>)
 80028a0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80028a2:	4b14      	ldr	r3, [pc, #80]	; (80028f4 <SystemInit+0xec>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80028a8:	4b12      	ldr	r3, [pc, #72]	; (80028f4 <SystemInit+0xec>)
 80028aa:	4a16      	ldr	r2, [pc, #88]	; (8002904 <SystemInit+0xfc>)
 80028ac:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80028ae:	4b11      	ldr	r3, [pc, #68]	; (80028f4 <SystemInit+0xec>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80028b4:	4b0f      	ldr	r3, [pc, #60]	; (80028f4 <SystemInit+0xec>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a0e      	ldr	r2, [pc, #56]	; (80028f4 <SystemInit+0xec>)
 80028ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028be:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80028c0:	4b0c      	ldr	r3, [pc, #48]	; (80028f4 <SystemInit+0xec>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80028c6:	4b10      	ldr	r3, [pc, #64]	; (8002908 <SystemInit+0x100>)
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	4b10      	ldr	r3, [pc, #64]	; (800290c <SystemInit+0x104>)
 80028cc:	4013      	ands	r3, r2
 80028ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028d2:	d202      	bcs.n	80028da <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80028d4:	4b0e      	ldr	r3, [pc, #56]	; (8002910 <SystemInit+0x108>)
 80028d6:	2201      	movs	r2, #1
 80028d8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80028da:	4b0e      	ldr	r3, [pc, #56]	; (8002914 <SystemInit+0x10c>)
 80028dc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80028e0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80028e2:	bf00      	nop
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr
 80028ec:	e000ed00 	.word	0xe000ed00
 80028f0:	52002000 	.word	0x52002000
 80028f4:	58024400 	.word	0x58024400
 80028f8:	eaf6ed7f 	.word	0xeaf6ed7f
 80028fc:	02020200 	.word	0x02020200
 8002900:	01ff0000 	.word	0x01ff0000
 8002904:	01010280 	.word	0x01010280
 8002908:	5c001000 	.word	0x5c001000
 800290c:	ffff0000 	.word	0xffff0000
 8002910:	51008108 	.word	0x51008108
 8002914:	52004000 	.word	0x52004000

08002918 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002918:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002950 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800291c:	f7ff ff74 	bl	8002808 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002920:	480c      	ldr	r0, [pc, #48]	; (8002954 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002922:	490d      	ldr	r1, [pc, #52]	; (8002958 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002924:	4a0d      	ldr	r2, [pc, #52]	; (800295c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002926:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002928:	e002      	b.n	8002930 <LoopCopyDataInit>

0800292a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800292a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800292c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800292e:	3304      	adds	r3, #4

08002930 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002930:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002932:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002934:	d3f9      	bcc.n	800292a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002936:	4a0a      	ldr	r2, [pc, #40]	; (8002960 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002938:	4c0a      	ldr	r4, [pc, #40]	; (8002964 <LoopFillZerobss+0x22>)
  movs r3, #0
 800293a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800293c:	e001      	b.n	8002942 <LoopFillZerobss>

0800293e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800293e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002940:	3204      	adds	r2, #4

08002942 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002942:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002944:	d3fb      	bcc.n	800293e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002946:	f009 fa81 	bl	800be4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800294a:	f7fd ff65 	bl	8000818 <main>
  bx  lr
 800294e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002950:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002954:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002958:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 800295c:	0800bf84 	.word	0x0800bf84
  ldr r2, =_sbss
 8002960:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8002964:	24000d00 	.word	0x24000d00

08002968 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002968:	e7fe      	b.n	8002968 <ADC3_IRQHandler>
	...

0800296c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002972:	2003      	movs	r0, #3
 8002974:	f001 fa26 	bl	8003dc4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002978:	f003 fdf2 	bl	8006560 <HAL_RCC_GetSysClockFreq>
 800297c:	4602      	mov	r2, r0
 800297e:	4b15      	ldr	r3, [pc, #84]	; (80029d4 <HAL_Init+0x68>)
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	0a1b      	lsrs	r3, r3, #8
 8002984:	f003 030f 	and.w	r3, r3, #15
 8002988:	4913      	ldr	r1, [pc, #76]	; (80029d8 <HAL_Init+0x6c>)
 800298a:	5ccb      	ldrb	r3, [r1, r3]
 800298c:	f003 031f 	and.w	r3, r3, #31
 8002990:	fa22 f303 	lsr.w	r3, r2, r3
 8002994:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002996:	4b0f      	ldr	r3, [pc, #60]	; (80029d4 <HAL_Init+0x68>)
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	f003 030f 	and.w	r3, r3, #15
 800299e:	4a0e      	ldr	r2, [pc, #56]	; (80029d8 <HAL_Init+0x6c>)
 80029a0:	5cd3      	ldrb	r3, [r2, r3]
 80029a2:	f003 031f 	and.w	r3, r3, #31
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	fa22 f303 	lsr.w	r3, r2, r3
 80029ac:	4a0b      	ldr	r2, [pc, #44]	; (80029dc <HAL_Init+0x70>)
 80029ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80029b0:	4a0b      	ldr	r2, [pc, #44]	; (80029e0 <HAL_Init+0x74>)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80029b6:	2000      	movs	r0, #0
 80029b8:	f000 f814 	bl	80029e4 <HAL_InitTick>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e002      	b.n	80029cc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80029c6:	f7fe ff7d 	bl	80018c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029ca:	2300      	movs	r3, #0
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3708      	adds	r7, #8
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	58024400 	.word	0x58024400
 80029d8:	0800bf3c 	.word	0x0800bf3c
 80029dc:	24000004 	.word	0x24000004
 80029e0:	24000000 	.word	0x24000000

080029e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80029ec:	4b15      	ldr	r3, [pc, #84]	; (8002a44 <HAL_InitTick+0x60>)
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d101      	bne.n	80029f8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e021      	b.n	8002a3c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80029f8:	4b13      	ldr	r3, [pc, #76]	; (8002a48 <HAL_InitTick+0x64>)
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	4b11      	ldr	r3, [pc, #68]	; (8002a44 <HAL_InitTick+0x60>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	4619      	mov	r1, r3
 8002a02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a06:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f001 f9fd 	bl	8003e0e <HAL_SYSTICK_Config>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e00e      	b.n	8002a3c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2b0f      	cmp	r3, #15
 8002a22:	d80a      	bhi.n	8002a3a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a24:	2200      	movs	r2, #0
 8002a26:	6879      	ldr	r1, [r7, #4]
 8002a28:	f04f 30ff 	mov.w	r0, #4294967295
 8002a2c:	f001 f9d5 	bl	8003dda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a30:	4a06      	ldr	r2, [pc, #24]	; (8002a4c <HAL_InitTick+0x68>)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a36:	2300      	movs	r3, #0
 8002a38:	e000      	b.n	8002a3c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3708      	adds	r7, #8
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	2400000c 	.word	0x2400000c
 8002a48:	24000000 	.word	0x24000000
 8002a4c:	24000008 	.word	0x24000008

08002a50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a54:	4b06      	ldr	r3, [pc, #24]	; (8002a70 <HAL_IncTick+0x20>)
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	461a      	mov	r2, r3
 8002a5a:	4b06      	ldr	r3, [pc, #24]	; (8002a74 <HAL_IncTick+0x24>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4413      	add	r3, r2
 8002a60:	4a04      	ldr	r2, [pc, #16]	; (8002a74 <HAL_IncTick+0x24>)
 8002a62:	6013      	str	r3, [r2, #0]
}
 8002a64:	bf00      	nop
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	2400000c 	.word	0x2400000c
 8002a74:	24000cfc 	.word	0x24000cfc

08002a78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a7c:	4b03      	ldr	r3, [pc, #12]	; (8002a8c <HAL_GetTick+0x14>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	24000cfc 	.word	0x24000cfc

08002a90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a98:	f7ff ffee 	bl	8002a78 <HAL_GetTick>
 8002a9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aa8:	d005      	beq.n	8002ab6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002aaa:	4b0a      	ldr	r3, [pc, #40]	; (8002ad4 <HAL_Delay+0x44>)
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	461a      	mov	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ab6:	bf00      	nop
 8002ab8:	f7ff ffde 	bl	8002a78 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d8f7      	bhi.n	8002ab8 <HAL_Delay+0x28>
  {
  }
}
 8002ac8:	bf00      	nop
 8002aca:	bf00      	nop
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	2400000c 	.word	0x2400000c

08002ad8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002adc:	4b03      	ldr	r3, [pc, #12]	; (8002aec <HAL_GetREVID+0x14>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	0c1b      	lsrs	r3, r3, #16
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr
 8002aec:	5c001000 	.word	0x5c001000

08002af0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002af8:	4b06      	ldr	r3, [pc, #24]	; (8002b14 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002b00:	4904      	ldr	r1, [pc, #16]	; (8002b14 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	604b      	str	r3, [r1, #4]
}
 8002b08:	bf00      	nop
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr
 8002b14:	58000400 	.word	0x58000400

08002b18 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002b22:	4b07      	ldr	r3, [pc, #28]	; (8002b40 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002b24:	685a      	ldr	r2, [r3, #4]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	43db      	mvns	r3, r3
 8002b2a:	401a      	ands	r2, r3
 8002b2c:	4904      	ldr	r1, [pc, #16]	; (8002b40 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	604b      	str	r3, [r1, #4]
}
 8002b34:	bf00      	nop
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr
 8002b40:	58000400 	.word	0x58000400

08002b44 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	431a      	orrs	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	609a      	str	r2, [r3, #8]
}
 8002b5e:	bf00      	nop
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr

08002b6a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	b083      	sub	sp, #12
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
 8002b72:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	431a      	orrs	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	609a      	str	r2, [r3, #8]
}
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b087      	sub	sp, #28
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
 8002bb8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	3360      	adds	r3, #96	; 0x60
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	4413      	add	r3, r2
 8002bc6:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	430b      	orrs	r3, r1
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002be0:	bf00      	nop
 8002be2:	371c      	adds	r7, #28
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	f003 031f 	and.w	r3, r3, #31
 8002c06:	6879      	ldr	r1, [r7, #4]
 8002c08:	fa01 f303 	lsl.w	r3, r1, r3
 8002c0c:	431a      	orrs	r2, r3
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	611a      	str	r2, [r3, #16]
}
 8002c12:	bf00      	nop
 8002c14:	3714      	adds	r7, #20
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr

08002c1e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	b087      	sub	sp, #28
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	60f8      	str	r0, [r7, #12]
 8002c26:	60b9      	str	r1, [r7, #8]
 8002c28:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	3360      	adds	r3, #96	; 0x60
 8002c2e:	461a      	mov	r2, r3
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4413      	add	r3, r2
 8002c36:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	431a      	orrs	r2, r3
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	601a      	str	r2, [r3, #0]
  }
}
 8002c48:	bf00      	nop
 8002c4a:	371c      	adds	r7, #28
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b087      	sub	sp, #28
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	3330      	adds	r3, #48	; 0x30
 8002c64:	461a      	mov	r2, r3
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	0a1b      	lsrs	r3, r3, #8
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	f003 030c 	and.w	r3, r3, #12
 8002c70:	4413      	add	r3, r2
 8002c72:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	f003 031f 	and.w	r3, r3, #31
 8002c7e:	211f      	movs	r1, #31
 8002c80:	fa01 f303 	lsl.w	r3, r1, r3
 8002c84:	43db      	mvns	r3, r3
 8002c86:	401a      	ands	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	0e9b      	lsrs	r3, r3, #26
 8002c8c:	f003 011f 	and.w	r1, r3, #31
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	f003 031f 	and.w	r3, r3, #31
 8002c96:	fa01 f303 	lsl.w	r3, r1, r3
 8002c9a:	431a      	orrs	r2, r3
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002ca0:	bf00      	nop
 8002ca2:	371c      	adds	r7, #28
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b087      	sub	sp, #28
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	3314      	adds	r3, #20
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	0e5b      	lsrs	r3, r3, #25
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	f003 0304 	and.w	r3, r3, #4
 8002cc8:	4413      	add	r3, r2
 8002cca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	0d1b      	lsrs	r3, r3, #20
 8002cd4:	f003 031f 	and.w	r3, r3, #31
 8002cd8:	2107      	movs	r1, #7
 8002cda:	fa01 f303 	lsl.w	r3, r1, r3
 8002cde:	43db      	mvns	r3, r3
 8002ce0:	401a      	ands	r2, r3
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	0d1b      	lsrs	r3, r3, #20
 8002ce6:	f003 031f 	and.w	r3, r3, #31
 8002cea:	6879      	ldr	r1, [r7, #4]
 8002cec:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf0:	431a      	orrs	r2, r3
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002cf6:	bf00      	nop
 8002cf8:	371c      	adds	r7, #28
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
	...

08002d04 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b085      	sub	sp, #20
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d1c:	43db      	mvns	r3, r3
 8002d1e:	401a      	ands	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f003 0318 	and.w	r3, r3, #24
 8002d26:	4908      	ldr	r1, [pc, #32]	; (8002d48 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002d28:	40d9      	lsrs	r1, r3
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	400b      	ands	r3, r1
 8002d2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d32:	431a      	orrs	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002d3a:	bf00      	nop
 8002d3c:	3714      	adds	r7, #20
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	000fffff 	.word	0x000fffff

08002d4c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689a      	ldr	r2, [r3, #8]
 8002d58:	4b04      	ldr	r3, [pc, #16]	; (8002d6c <LL_ADC_DisableDeepPowerDown+0x20>)
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	6093      	str	r3, [r2, #8]
}
 8002d60:	bf00      	nop
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr
 8002d6c:	5fffffc0 	.word	0x5fffffc0

08002d70 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d84:	d101      	bne.n	8002d8a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002d86:	2301      	movs	r3, #1
 8002d88:	e000      	b.n	8002d8c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	4b05      	ldr	r3, [pc, #20]	; (8002dbc <LL_ADC_EnableInternalRegulator+0x24>)
 8002da6:	4013      	ands	r3, r2
 8002da8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002db0:	bf00      	nop
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr
 8002dbc:	6fffffc0 	.word	0x6fffffc0

08002dc0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dd0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002dd4:	d101      	bne.n	8002dda <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e000      	b.n	8002ddc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002dda:	2300      	movs	r3, #0
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f003 0301 	and.w	r3, r3, #1
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d101      	bne.n	8002e00 <LL_ADC_IsEnabled+0x18>
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e000      	b.n	8002e02 <LL_ADC_IsEnabled+0x1a>
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr

08002e0e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002e0e:	b480      	push	{r7}
 8002e10:	b083      	sub	sp, #12
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f003 0304 	and.w	r3, r3, #4
 8002e1e:	2b04      	cmp	r3, #4
 8002e20:	d101      	bne.n	8002e26 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e22:	2301      	movs	r3, #1
 8002e24:	e000      	b.n	8002e28 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f003 0308 	and.w	r3, r3, #8
 8002e44:	2b08      	cmp	r3, #8
 8002e46:	d101      	bne.n	8002e4c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e000      	b.n	8002e4e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	370c      	adds	r7, #12
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
	...

08002e5c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e5c:	b590      	push	{r4, r7, lr}
 8002e5e:	b089      	sub	sp, #36	; 0x24
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e64:	2300      	movs	r3, #0
 8002e66:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e18f      	b.n	8003196 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d109      	bne.n	8002e98 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f7fe fd37 	bl	80018f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7ff ff67 	bl	8002d70 <LL_ADC_IsDeepPowerDownEnabled>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d004      	beq.n	8002eb2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7ff ff4d 	bl	8002d4c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7ff ff82 	bl	8002dc0 <LL_ADC_IsInternalRegulatorEnabled>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d114      	bne.n	8002eec <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7ff ff66 	bl	8002d98 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ecc:	4b87      	ldr	r3, [pc, #540]	; (80030ec <HAL_ADC_Init+0x290>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	099b      	lsrs	r3, r3, #6
 8002ed2:	4a87      	ldr	r2, [pc, #540]	; (80030f0 <HAL_ADC_Init+0x294>)
 8002ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed8:	099b      	lsrs	r3, r3, #6
 8002eda:	3301      	adds	r3, #1
 8002edc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002ede:	e002      	b.n	8002ee6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d1f9      	bne.n	8002ee0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7ff ff65 	bl	8002dc0 <LL_ADC_IsInternalRegulatorEnabled>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d10d      	bne.n	8002f18 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f00:	f043 0210 	orr.w	r2, r3, #16
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f0c:	f043 0201 	orr.w	r2, r3, #1
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7ff ff76 	bl	8002e0e <LL_ADC_REG_IsConversionOngoing>
 8002f22:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f28:	f003 0310 	and.w	r3, r3, #16
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f040 8129 	bne.w	8003184 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	f040 8125 	bne.w	8003184 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f3e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002f42:	f043 0202 	orr.w	r2, r3, #2
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7ff ff4a 	bl	8002de8 <LL_ADC_IsEnabled>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d136      	bne.n	8002fc8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a65      	ldr	r2, [pc, #404]	; (80030f4 <HAL_ADC_Init+0x298>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d004      	beq.n	8002f6e <HAL_ADC_Init+0x112>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a63      	ldr	r2, [pc, #396]	; (80030f8 <HAL_ADC_Init+0x29c>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d10e      	bne.n	8002f8c <HAL_ADC_Init+0x130>
 8002f6e:	4861      	ldr	r0, [pc, #388]	; (80030f4 <HAL_ADC_Init+0x298>)
 8002f70:	f7ff ff3a 	bl	8002de8 <LL_ADC_IsEnabled>
 8002f74:	4604      	mov	r4, r0
 8002f76:	4860      	ldr	r0, [pc, #384]	; (80030f8 <HAL_ADC_Init+0x29c>)
 8002f78:	f7ff ff36 	bl	8002de8 <LL_ADC_IsEnabled>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	4323      	orrs	r3, r4
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	bf0c      	ite	eq
 8002f84:	2301      	moveq	r3, #1
 8002f86:	2300      	movne	r3, #0
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	e008      	b.n	8002f9e <HAL_ADC_Init+0x142>
 8002f8c:	485b      	ldr	r0, [pc, #364]	; (80030fc <HAL_ADC_Init+0x2a0>)
 8002f8e:	f7ff ff2b 	bl	8002de8 <LL_ADC_IsEnabled>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	bf0c      	ite	eq
 8002f98:	2301      	moveq	r3, #1
 8002f9a:	2300      	movne	r3, #0
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d012      	beq.n	8002fc8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a53      	ldr	r2, [pc, #332]	; (80030f4 <HAL_ADC_Init+0x298>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d004      	beq.n	8002fb6 <HAL_ADC_Init+0x15a>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a51      	ldr	r2, [pc, #324]	; (80030f8 <HAL_ADC_Init+0x29c>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d101      	bne.n	8002fba <HAL_ADC_Init+0x15e>
 8002fb6:	4a52      	ldr	r2, [pc, #328]	; (8003100 <HAL_ADC_Init+0x2a4>)
 8002fb8:	e000      	b.n	8002fbc <HAL_ADC_Init+0x160>
 8002fba:	4a52      	ldr	r2, [pc, #328]	; (8003104 <HAL_ADC_Init+0x2a8>)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	4610      	mov	r0, r2
 8002fc4:	f7ff fdbe 	bl	8002b44 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002fc8:	f7ff fd86 	bl	8002ad8 <HAL_GetREVID>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	f241 0203 	movw	r2, #4099	; 0x1003
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d914      	bls.n	8003000 <HAL_ADC_Init+0x1a4>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	2b10      	cmp	r3, #16
 8002fdc:	d110      	bne.n	8003000 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	7d5b      	ldrb	r3, [r3, #21]
 8002fe2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002fe8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002fee:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	7f1b      	ldrb	r3, [r3, #28]
 8002ff4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002ff6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002ff8:	f043 030c 	orr.w	r3, r3, #12
 8002ffc:	61bb      	str	r3, [r7, #24]
 8002ffe:	e00d      	b.n	800301c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	7d5b      	ldrb	r3, [r3, #21]
 8003004:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800300a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003010:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	7f1b      	ldrb	r3, [r3, #28]
 8003016:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003018:	4313      	orrs	r3, r2
 800301a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	7f1b      	ldrb	r3, [r3, #28]
 8003020:	2b01      	cmp	r3, #1
 8003022:	d106      	bne.n	8003032 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a1b      	ldr	r3, [r3, #32]
 8003028:	3b01      	subs	r3, #1
 800302a:	045b      	lsls	r3, r3, #17
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	4313      	orrs	r3, r2
 8003030:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003036:	2b00      	cmp	r3, #0
 8003038:	d009      	beq.n	800304e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003046:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	4313      	orrs	r3, r2
 800304c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68da      	ldr	r2, [r3, #12]
 8003054:	4b2c      	ldr	r3, [pc, #176]	; (8003108 <HAL_ADC_Init+0x2ac>)
 8003056:	4013      	ands	r3, r2
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	6812      	ldr	r2, [r2, #0]
 800305c:	69b9      	ldr	r1, [r7, #24]
 800305e:	430b      	orrs	r3, r1
 8003060:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4618      	mov	r0, r3
 8003068:	f7ff fed1 	bl	8002e0e <LL_ADC_REG_IsConversionOngoing>
 800306c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4618      	mov	r0, r3
 8003074:	f7ff fede 	bl	8002e34 <LL_ADC_INJ_IsConversionOngoing>
 8003078:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d15f      	bne.n	8003140 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d15c      	bne.n	8003140 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	7d1b      	ldrb	r3, [r3, #20]
 800308a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8003090:	4313      	orrs	r3, r2
 8003092:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68da      	ldr	r2, [r3, #12]
 800309a:	4b1c      	ldr	r3, [pc, #112]	; (800310c <HAL_ADC_Init+0x2b0>)
 800309c:	4013      	ands	r3, r2
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	6812      	ldr	r2, [r2, #0]
 80030a2:	69b9      	ldr	r1, [r7, #24]
 80030a4:	430b      	orrs	r3, r1
 80030a6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d130      	bne.n	8003114 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	691a      	ldr	r2, [r3, #16]
 80030be:	4b14      	ldr	r3, [pc, #80]	; (8003110 <HAL_ADC_Init+0x2b4>)
 80030c0:	4013      	ands	r3, r2
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80030c6:	3a01      	subs	r2, #1
 80030c8:	0411      	lsls	r1, r2, #16
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80030ce:	4311      	orrs	r1, r2
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80030d4:	4311      	orrs	r1, r2
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80030da:	430a      	orrs	r2, r1
 80030dc:	431a      	orrs	r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f042 0201 	orr.w	r2, r2, #1
 80030e6:	611a      	str	r2, [r3, #16]
 80030e8:	e01c      	b.n	8003124 <HAL_ADC_Init+0x2c8>
 80030ea:	bf00      	nop
 80030ec:	24000000 	.word	0x24000000
 80030f0:	053e2d63 	.word	0x053e2d63
 80030f4:	40022000 	.word	0x40022000
 80030f8:	40022100 	.word	0x40022100
 80030fc:	58026000 	.word	0x58026000
 8003100:	40022300 	.word	0x40022300
 8003104:	58026300 	.word	0x58026300
 8003108:	fff0c003 	.word	0xfff0c003
 800310c:	ffffbffc 	.word	0xffffbffc
 8003110:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	691a      	ldr	r2, [r3, #16]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f022 0201 	bic.w	r2, r2, #1
 8003122:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	430a      	orrs	r2, r1
 8003138:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 fb80 	bl	8003840 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	2b01      	cmp	r3, #1
 8003146:	d10c      	bne.n	8003162 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314e:	f023 010f 	bic.w	r1, r3, #15
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	1e5a      	subs	r2, r3, #1
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	430a      	orrs	r2, r1
 800315e:	631a      	str	r2, [r3, #48]	; 0x30
 8003160:	e007      	b.n	8003172 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f022 020f 	bic.w	r2, r2, #15
 8003170:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003176:	f023 0303 	bic.w	r3, r3, #3
 800317a:	f043 0201 	orr.w	r2, r3, #1
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	655a      	str	r2, [r3, #84]	; 0x54
 8003182:	e007      	b.n	8003194 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003188:	f043 0210 	orr.w	r2, r3, #16
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003194:	7ffb      	ldrb	r3, [r7, #31]
}
 8003196:	4618      	mov	r0, r3
 8003198:	3724      	adds	r7, #36	; 0x24
 800319a:	46bd      	mov	sp, r7
 800319c:	bd90      	pop	{r4, r7, pc}
 800319e:	bf00      	nop

080031a0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80031a0:	b590      	push	{r4, r7, lr}
 80031a2:	b0a1      	sub	sp, #132	; 0x84
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031aa:	2300      	movs	r3, #0
 80031ac:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80031b0:	2300      	movs	r3, #0
 80031b2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	4a9d      	ldr	r2, [pc, #628]	; (8003430 <HAL_ADC_ConfigChannel+0x290>)
 80031ba:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d101      	bne.n	80031ca <HAL_ADC_ConfigChannel+0x2a>
 80031c6:	2302      	movs	r3, #2
 80031c8:	e321      	b.n	800380e <HAL_ADC_ConfigChannel+0x66e>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2201      	movs	r2, #1
 80031ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7ff fe19 	bl	8002e0e <LL_ADC_REG_IsConversionOngoing>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	f040 8306 	bne.w	80037f0 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d108      	bne.n	8003202 <HAL_ADC_ConfigChannel+0x62>
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	0e9b      	lsrs	r3, r3, #26
 80031f6:	f003 031f 	and.w	r3, r3, #31
 80031fa:	2201      	movs	r2, #1
 80031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003200:	e016      	b.n	8003230 <HAL_ADC_ConfigChannel+0x90>
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003208:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800320a:	fa93 f3a3 	rbit	r3, r3
 800320e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003210:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003212:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003214:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003216:	2b00      	cmp	r3, #0
 8003218:	d101      	bne.n	800321e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800321a:	2320      	movs	r3, #32
 800321c:	e003      	b.n	8003226 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800321e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003220:	fab3 f383 	clz	r3, r3
 8003224:	b2db      	uxtb	r3, r3
 8003226:	f003 031f 	and.w	r3, r3, #31
 800322a:	2201      	movs	r2, #1
 800322c:	fa02 f303 	lsl.w	r3, r2, r3
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	6812      	ldr	r2, [r2, #0]
 8003234:	69d1      	ldr	r1, [r2, #28]
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	6812      	ldr	r2, [r2, #0]
 800323a:	430b      	orrs	r3, r1
 800323c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6818      	ldr	r0, [r3, #0]
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	6859      	ldr	r1, [r3, #4]
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	461a      	mov	r2, r3
 800324c:	f7ff fd02 	bl	8002c54 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4618      	mov	r0, r3
 8003256:	f7ff fdda 	bl	8002e0e <LL_ADC_REG_IsConversionOngoing>
 800325a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4618      	mov	r0, r3
 8003262:	f7ff fde7 	bl	8002e34 <LL_ADC_INJ_IsConversionOngoing>
 8003266:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003268:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800326a:	2b00      	cmp	r3, #0
 800326c:	f040 80b3 	bne.w	80033d6 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003270:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003272:	2b00      	cmp	r3, #0
 8003274:	f040 80af 	bne.w	80033d6 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6818      	ldr	r0, [r3, #0]
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	6819      	ldr	r1, [r3, #0]
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	461a      	mov	r2, r3
 8003286:	f7ff fd11 	bl	8002cac <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800328a:	4b6a      	ldr	r3, [pc, #424]	; (8003434 <HAL_ADC_ConfigChannel+0x294>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003292:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003296:	d10b      	bne.n	80032b0 <HAL_ADC_ConfigChannel+0x110>
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	695a      	ldr	r2, [r3, #20]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	089b      	lsrs	r3, r3, #2
 80032a4:	f003 0307 	and.w	r3, r3, #7
 80032a8:	005b      	lsls	r3, r3, #1
 80032aa:	fa02 f303 	lsl.w	r3, r2, r3
 80032ae:	e01d      	b.n	80032ec <HAL_ADC_ConfigChannel+0x14c>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	f003 0310 	and.w	r3, r3, #16
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d10b      	bne.n	80032d6 <HAL_ADC_ConfigChannel+0x136>
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	695a      	ldr	r2, [r3, #20]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	089b      	lsrs	r3, r3, #2
 80032ca:	f003 0307 	and.w	r3, r3, #7
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	fa02 f303 	lsl.w	r3, r2, r3
 80032d4:	e00a      	b.n	80032ec <HAL_ADC_ConfigChannel+0x14c>
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	695a      	ldr	r2, [r3, #20]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	089b      	lsrs	r3, r3, #2
 80032e2:	f003 0304 	and.w	r3, r3, #4
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ec:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	2b04      	cmp	r3, #4
 80032f4:	d027      	beq.n	8003346 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6818      	ldr	r0, [r3, #0]
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	6919      	ldr	r1, [r3, #16]
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003304:	f7ff fc52 	bl	8002bac <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6818      	ldr	r0, [r3, #0]
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	6919      	ldr	r1, [r3, #16]
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	7e5b      	ldrb	r3, [r3, #25]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d102      	bne.n	800331e <HAL_ADC_ConfigChannel+0x17e>
 8003318:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800331c:	e000      	b.n	8003320 <HAL_ADC_ConfigChannel+0x180>
 800331e:	2300      	movs	r3, #0
 8003320:	461a      	mov	r2, r3
 8003322:	f7ff fc7c 	bl	8002c1e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6818      	ldr	r0, [r3, #0]
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	6919      	ldr	r1, [r3, #16]
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	7e1b      	ldrb	r3, [r3, #24]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d102      	bne.n	800333c <HAL_ADC_ConfigChannel+0x19c>
 8003336:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800333a:	e000      	b.n	800333e <HAL_ADC_ConfigChannel+0x19e>
 800333c:	2300      	movs	r3, #0
 800333e:	461a      	mov	r2, r3
 8003340:	f7ff fc54 	bl	8002bec <LL_ADC_SetDataRightShift>
 8003344:	e047      	b.n	80033d6 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800334c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	069b      	lsls	r3, r3, #26
 8003356:	429a      	cmp	r2, r3
 8003358:	d107      	bne.n	800336a <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003368:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003370:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	069b      	lsls	r3, r3, #26
 800337a:	429a      	cmp	r2, r3
 800337c:	d107      	bne.n	800338e <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800338c:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003394:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	069b      	lsls	r3, r3, #26
 800339e:	429a      	cmp	r2, r3
 80033a0:	d107      	bne.n	80033b2 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80033b0:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033b8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	069b      	lsls	r3, r3, #26
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d107      	bne.n	80033d6 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80033d4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4618      	mov	r0, r3
 80033dc:	f7ff fd04 	bl	8002de8 <LL_ADC_IsEnabled>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	f040 820d 	bne.w	8003802 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6818      	ldr	r0, [r3, #0]
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	6819      	ldr	r1, [r3, #0]
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	461a      	mov	r2, r3
 80033f6:	f7ff fc85 	bl	8002d04 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	4a0c      	ldr	r2, [pc, #48]	; (8003430 <HAL_ADC_ConfigChannel+0x290>)
 8003400:	4293      	cmp	r3, r2
 8003402:	f040 8133 	bne.w	800366c <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003412:	2b00      	cmp	r3, #0
 8003414:	d110      	bne.n	8003438 <HAL_ADC_ConfigChannel+0x298>
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	0e9b      	lsrs	r3, r3, #26
 800341c:	3301      	adds	r3, #1
 800341e:	f003 031f 	and.w	r3, r3, #31
 8003422:	2b09      	cmp	r3, #9
 8003424:	bf94      	ite	ls
 8003426:	2301      	movls	r3, #1
 8003428:	2300      	movhi	r3, #0
 800342a:	b2db      	uxtb	r3, r3
 800342c:	e01e      	b.n	800346c <HAL_ADC_ConfigChannel+0x2cc>
 800342e:	bf00      	nop
 8003430:	47ff0000 	.word	0x47ff0000
 8003434:	5c001000 	.word	0x5c001000
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800343e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003440:	fa93 f3a3 	rbit	r3, r3
 8003444:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003446:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003448:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800344a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800344c:	2b00      	cmp	r3, #0
 800344e:	d101      	bne.n	8003454 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8003450:	2320      	movs	r3, #32
 8003452:	e003      	b.n	800345c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003454:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003456:	fab3 f383 	clz	r3, r3
 800345a:	b2db      	uxtb	r3, r3
 800345c:	3301      	adds	r3, #1
 800345e:	f003 031f 	and.w	r3, r3, #31
 8003462:	2b09      	cmp	r3, #9
 8003464:	bf94      	ite	ls
 8003466:	2301      	movls	r3, #1
 8003468:	2300      	movhi	r3, #0
 800346a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800346c:	2b00      	cmp	r3, #0
 800346e:	d079      	beq.n	8003564 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003478:	2b00      	cmp	r3, #0
 800347a:	d107      	bne.n	800348c <HAL_ADC_ConfigChannel+0x2ec>
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	0e9b      	lsrs	r3, r3, #26
 8003482:	3301      	adds	r3, #1
 8003484:	069b      	lsls	r3, r3, #26
 8003486:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800348a:	e015      	b.n	80034b8 <HAL_ADC_ConfigChannel+0x318>
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003492:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003494:	fa93 f3a3 	rbit	r3, r3
 8003498:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800349a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800349c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800349e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d101      	bne.n	80034a8 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80034a4:	2320      	movs	r3, #32
 80034a6:	e003      	b.n	80034b0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80034a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034aa:	fab3 f383 	clz	r3, r3
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	3301      	adds	r3, #1
 80034b2:	069b      	lsls	r3, r3, #26
 80034b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d109      	bne.n	80034d8 <HAL_ADC_ConfigChannel+0x338>
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	0e9b      	lsrs	r3, r3, #26
 80034ca:	3301      	adds	r3, #1
 80034cc:	f003 031f 	and.w	r3, r3, #31
 80034d0:	2101      	movs	r1, #1
 80034d2:	fa01 f303 	lsl.w	r3, r1, r3
 80034d6:	e017      	b.n	8003508 <HAL_ADC_ConfigChannel+0x368>
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034e0:	fa93 f3a3 	rbit	r3, r3
 80034e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80034e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034e8:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80034ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d101      	bne.n	80034f4 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80034f0:	2320      	movs	r3, #32
 80034f2:	e003      	b.n	80034fc <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 80034f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034f6:	fab3 f383 	clz	r3, r3
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	3301      	adds	r3, #1
 80034fe:	f003 031f 	and.w	r3, r3, #31
 8003502:	2101      	movs	r1, #1
 8003504:	fa01 f303 	lsl.w	r3, r1, r3
 8003508:	ea42 0103 	orr.w	r1, r2, r3
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003514:	2b00      	cmp	r3, #0
 8003516:	d10a      	bne.n	800352e <HAL_ADC_ConfigChannel+0x38e>
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	0e9b      	lsrs	r3, r3, #26
 800351e:	3301      	adds	r3, #1
 8003520:	f003 021f 	and.w	r2, r3, #31
 8003524:	4613      	mov	r3, r2
 8003526:	005b      	lsls	r3, r3, #1
 8003528:	4413      	add	r3, r2
 800352a:	051b      	lsls	r3, r3, #20
 800352c:	e018      	b.n	8003560 <HAL_ADC_ConfigChannel+0x3c0>
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003536:	fa93 f3a3 	rbit	r3, r3
 800353a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800353c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800353e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003542:	2b00      	cmp	r3, #0
 8003544:	d101      	bne.n	800354a <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8003546:	2320      	movs	r3, #32
 8003548:	e003      	b.n	8003552 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 800354a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800354c:	fab3 f383 	clz	r3, r3
 8003550:	b2db      	uxtb	r3, r3
 8003552:	3301      	adds	r3, #1
 8003554:	f003 021f 	and.w	r2, r3, #31
 8003558:	4613      	mov	r3, r2
 800355a:	005b      	lsls	r3, r3, #1
 800355c:	4413      	add	r3, r2
 800355e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003560:	430b      	orrs	r3, r1
 8003562:	e07e      	b.n	8003662 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800356c:	2b00      	cmp	r3, #0
 800356e:	d107      	bne.n	8003580 <HAL_ADC_ConfigChannel+0x3e0>
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	0e9b      	lsrs	r3, r3, #26
 8003576:	3301      	adds	r3, #1
 8003578:	069b      	lsls	r3, r3, #26
 800357a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800357e:	e015      	b.n	80035ac <HAL_ADC_ConfigChannel+0x40c>
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003588:	fa93 f3a3 	rbit	r3, r3
 800358c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800358e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003590:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003594:	2b00      	cmp	r3, #0
 8003596:	d101      	bne.n	800359c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003598:	2320      	movs	r3, #32
 800359a:	e003      	b.n	80035a4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800359c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800359e:	fab3 f383 	clz	r3, r3
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	3301      	adds	r3, #1
 80035a6:	069b      	lsls	r3, r3, #26
 80035a8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d109      	bne.n	80035cc <HAL_ADC_ConfigChannel+0x42c>
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	0e9b      	lsrs	r3, r3, #26
 80035be:	3301      	adds	r3, #1
 80035c0:	f003 031f 	and.w	r3, r3, #31
 80035c4:	2101      	movs	r1, #1
 80035c6:	fa01 f303 	lsl.w	r3, r1, r3
 80035ca:	e017      	b.n	80035fc <HAL_ADC_ConfigChannel+0x45c>
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	fa93 f3a3 	rbit	r3, r3
 80035d8:	61bb      	str	r3, [r7, #24]
  return result;
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80035de:	6a3b      	ldr	r3, [r7, #32]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d101      	bne.n	80035e8 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 80035e4:	2320      	movs	r3, #32
 80035e6:	e003      	b.n	80035f0 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 80035e8:	6a3b      	ldr	r3, [r7, #32]
 80035ea:	fab3 f383 	clz	r3, r3
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	3301      	adds	r3, #1
 80035f2:	f003 031f 	and.w	r3, r3, #31
 80035f6:	2101      	movs	r1, #1
 80035f8:	fa01 f303 	lsl.w	r3, r1, r3
 80035fc:	ea42 0103 	orr.w	r1, r2, r3
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003608:	2b00      	cmp	r3, #0
 800360a:	d10d      	bne.n	8003628 <HAL_ADC_ConfigChannel+0x488>
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	0e9b      	lsrs	r3, r3, #26
 8003612:	3301      	adds	r3, #1
 8003614:	f003 021f 	and.w	r2, r3, #31
 8003618:	4613      	mov	r3, r2
 800361a:	005b      	lsls	r3, r3, #1
 800361c:	4413      	add	r3, r2
 800361e:	3b1e      	subs	r3, #30
 8003620:	051b      	lsls	r3, r3, #20
 8003622:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003626:	e01b      	b.n	8003660 <HAL_ADC_ConfigChannel+0x4c0>
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	fa93 f3a3 	rbit	r3, r3
 8003634:	60fb      	str	r3, [r7, #12]
  return result;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d101      	bne.n	8003644 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8003640:	2320      	movs	r3, #32
 8003642:	e003      	b.n	800364c <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	fab3 f383 	clz	r3, r3
 800364a:	b2db      	uxtb	r3, r3
 800364c:	3301      	adds	r3, #1
 800364e:	f003 021f 	and.w	r2, r3, #31
 8003652:	4613      	mov	r3, r2
 8003654:	005b      	lsls	r3, r3, #1
 8003656:	4413      	add	r3, r2
 8003658:	3b1e      	subs	r3, #30
 800365a:	051b      	lsls	r3, r3, #20
 800365c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003660:	430b      	orrs	r3, r1
 8003662:	683a      	ldr	r2, [r7, #0]
 8003664:	6892      	ldr	r2, [r2, #8]
 8003666:	4619      	mov	r1, r3
 8003668:	f7ff fb20 	bl	8002cac <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2b00      	cmp	r3, #0
 8003672:	f280 80c6 	bge.w	8003802 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a67      	ldr	r2, [pc, #412]	; (8003818 <HAL_ADC_ConfigChannel+0x678>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d004      	beq.n	800368a <HAL_ADC_ConfigChannel+0x4ea>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a65      	ldr	r2, [pc, #404]	; (800381c <HAL_ADC_ConfigChannel+0x67c>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d101      	bne.n	800368e <HAL_ADC_ConfigChannel+0x4ee>
 800368a:	4b65      	ldr	r3, [pc, #404]	; (8003820 <HAL_ADC_ConfigChannel+0x680>)
 800368c:	e000      	b.n	8003690 <HAL_ADC_ConfigChannel+0x4f0>
 800368e:	4b65      	ldr	r3, [pc, #404]	; (8003824 <HAL_ADC_ConfigChannel+0x684>)
 8003690:	4618      	mov	r0, r3
 8003692:	f7ff fa7d 	bl	8002b90 <LL_ADC_GetCommonPathInternalCh>
 8003696:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a5e      	ldr	r2, [pc, #376]	; (8003818 <HAL_ADC_ConfigChannel+0x678>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d004      	beq.n	80036ac <HAL_ADC_ConfigChannel+0x50c>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a5d      	ldr	r2, [pc, #372]	; (800381c <HAL_ADC_ConfigChannel+0x67c>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d10e      	bne.n	80036ca <HAL_ADC_ConfigChannel+0x52a>
 80036ac:	485a      	ldr	r0, [pc, #360]	; (8003818 <HAL_ADC_ConfigChannel+0x678>)
 80036ae:	f7ff fb9b 	bl	8002de8 <LL_ADC_IsEnabled>
 80036b2:	4604      	mov	r4, r0
 80036b4:	4859      	ldr	r0, [pc, #356]	; (800381c <HAL_ADC_ConfigChannel+0x67c>)
 80036b6:	f7ff fb97 	bl	8002de8 <LL_ADC_IsEnabled>
 80036ba:	4603      	mov	r3, r0
 80036bc:	4323      	orrs	r3, r4
 80036be:	2b00      	cmp	r3, #0
 80036c0:	bf0c      	ite	eq
 80036c2:	2301      	moveq	r3, #1
 80036c4:	2300      	movne	r3, #0
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	e008      	b.n	80036dc <HAL_ADC_ConfigChannel+0x53c>
 80036ca:	4857      	ldr	r0, [pc, #348]	; (8003828 <HAL_ADC_ConfigChannel+0x688>)
 80036cc:	f7ff fb8c 	bl	8002de8 <LL_ADC_IsEnabled>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	bf0c      	ite	eq
 80036d6:	2301      	moveq	r3, #1
 80036d8:	2300      	movne	r3, #0
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d07d      	beq.n	80037dc <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a51      	ldr	r2, [pc, #324]	; (800382c <HAL_ADC_ConfigChannel+0x68c>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d130      	bne.n	800374c <HAL_ADC_ConfigChannel+0x5ac>
 80036ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d12b      	bne.n	800374c <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a4b      	ldr	r2, [pc, #300]	; (8003828 <HAL_ADC_ConfigChannel+0x688>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	f040 8081 	bne.w	8003802 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a44      	ldr	r2, [pc, #272]	; (8003818 <HAL_ADC_ConfigChannel+0x678>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d004      	beq.n	8003714 <HAL_ADC_ConfigChannel+0x574>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a43      	ldr	r2, [pc, #268]	; (800381c <HAL_ADC_ConfigChannel+0x67c>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d101      	bne.n	8003718 <HAL_ADC_ConfigChannel+0x578>
 8003714:	4a42      	ldr	r2, [pc, #264]	; (8003820 <HAL_ADC_ConfigChannel+0x680>)
 8003716:	e000      	b.n	800371a <HAL_ADC_ConfigChannel+0x57a>
 8003718:	4a42      	ldr	r2, [pc, #264]	; (8003824 <HAL_ADC_ConfigChannel+0x684>)
 800371a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800371c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003720:	4619      	mov	r1, r3
 8003722:	4610      	mov	r0, r2
 8003724:	f7ff fa21 	bl	8002b6a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003728:	4b41      	ldr	r3, [pc, #260]	; (8003830 <HAL_ADC_ConfigChannel+0x690>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	099b      	lsrs	r3, r3, #6
 800372e:	4a41      	ldr	r2, [pc, #260]	; (8003834 <HAL_ADC_ConfigChannel+0x694>)
 8003730:	fba2 2303 	umull	r2, r3, r2, r3
 8003734:	099b      	lsrs	r3, r3, #6
 8003736:	3301      	adds	r3, #1
 8003738:	005b      	lsls	r3, r3, #1
 800373a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800373c:	e002      	b.n	8003744 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	3b01      	subs	r3, #1
 8003742:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d1f9      	bne.n	800373e <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800374a:	e05a      	b.n	8003802 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a39      	ldr	r2, [pc, #228]	; (8003838 <HAL_ADC_ConfigChannel+0x698>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d11e      	bne.n	8003794 <HAL_ADC_ConfigChannel+0x5f4>
 8003756:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003758:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d119      	bne.n	8003794 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a30      	ldr	r2, [pc, #192]	; (8003828 <HAL_ADC_ConfigChannel+0x688>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d14b      	bne.n	8003802 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a2a      	ldr	r2, [pc, #168]	; (8003818 <HAL_ADC_ConfigChannel+0x678>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d004      	beq.n	800377e <HAL_ADC_ConfigChannel+0x5de>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a28      	ldr	r2, [pc, #160]	; (800381c <HAL_ADC_ConfigChannel+0x67c>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d101      	bne.n	8003782 <HAL_ADC_ConfigChannel+0x5e2>
 800377e:	4a28      	ldr	r2, [pc, #160]	; (8003820 <HAL_ADC_ConfigChannel+0x680>)
 8003780:	e000      	b.n	8003784 <HAL_ADC_ConfigChannel+0x5e4>
 8003782:	4a28      	ldr	r2, [pc, #160]	; (8003824 <HAL_ADC_ConfigChannel+0x684>)
 8003784:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003786:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800378a:	4619      	mov	r1, r3
 800378c:	4610      	mov	r0, r2
 800378e:	f7ff f9ec 	bl	8002b6a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003792:	e036      	b.n	8003802 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a28      	ldr	r2, [pc, #160]	; (800383c <HAL_ADC_ConfigChannel+0x69c>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d131      	bne.n	8003802 <HAL_ADC_ConfigChannel+0x662>
 800379e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d12c      	bne.n	8003802 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a1e      	ldr	r2, [pc, #120]	; (8003828 <HAL_ADC_ConfigChannel+0x688>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d127      	bne.n	8003802 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a18      	ldr	r2, [pc, #96]	; (8003818 <HAL_ADC_ConfigChannel+0x678>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d004      	beq.n	80037c6 <HAL_ADC_ConfigChannel+0x626>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a16      	ldr	r2, [pc, #88]	; (800381c <HAL_ADC_ConfigChannel+0x67c>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d101      	bne.n	80037ca <HAL_ADC_ConfigChannel+0x62a>
 80037c6:	4a16      	ldr	r2, [pc, #88]	; (8003820 <HAL_ADC_ConfigChannel+0x680>)
 80037c8:	e000      	b.n	80037cc <HAL_ADC_ConfigChannel+0x62c>
 80037ca:	4a16      	ldr	r2, [pc, #88]	; (8003824 <HAL_ADC_ConfigChannel+0x684>)
 80037cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80037d2:	4619      	mov	r1, r3
 80037d4:	4610      	mov	r0, r2
 80037d6:	f7ff f9c8 	bl	8002b6a <LL_ADC_SetCommonPathInternalCh>
 80037da:	e012      	b.n	8003802 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e0:	f043 0220 	orr.w	r2, r3, #32
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80037ee:	e008      	b.n	8003802 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f4:	f043 0220 	orr.w	r2, r3, #32
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800380a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800380e:	4618      	mov	r0, r3
 8003810:	3784      	adds	r7, #132	; 0x84
 8003812:	46bd      	mov	sp, r7
 8003814:	bd90      	pop	{r4, r7, pc}
 8003816:	bf00      	nop
 8003818:	40022000 	.word	0x40022000
 800381c:	40022100 	.word	0x40022100
 8003820:	40022300 	.word	0x40022300
 8003824:	58026300 	.word	0x58026300
 8003828:	58026000 	.word	0x58026000
 800382c:	cb840000 	.word	0xcb840000
 8003830:	24000000 	.word	0x24000000
 8003834:	053e2d63 	.word	0x053e2d63
 8003838:	c7520000 	.word	0xc7520000
 800383c:	cfb80000 	.word	0xcfb80000

08003840 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a7a      	ldr	r2, [pc, #488]	; (8003a38 <ADC_ConfigureBoostMode+0x1f8>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d004      	beq.n	800385c <ADC_ConfigureBoostMode+0x1c>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a79      	ldr	r2, [pc, #484]	; (8003a3c <ADC_ConfigureBoostMode+0x1fc>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d109      	bne.n	8003870 <ADC_ConfigureBoostMode+0x30>
 800385c:	4b78      	ldr	r3, [pc, #480]	; (8003a40 <ADC_ConfigureBoostMode+0x200>)
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003864:	2b00      	cmp	r3, #0
 8003866:	bf14      	ite	ne
 8003868:	2301      	movne	r3, #1
 800386a:	2300      	moveq	r3, #0
 800386c:	b2db      	uxtb	r3, r3
 800386e:	e008      	b.n	8003882 <ADC_ConfigureBoostMode+0x42>
 8003870:	4b74      	ldr	r3, [pc, #464]	; (8003a44 <ADC_ConfigureBoostMode+0x204>)
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003878:	2b00      	cmp	r3, #0
 800387a:	bf14      	ite	ne
 800387c:	2301      	movne	r3, #1
 800387e:	2300      	moveq	r3, #0
 8003880:	b2db      	uxtb	r3, r3
 8003882:	2b00      	cmp	r3, #0
 8003884:	d01c      	beq.n	80038c0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003886:	f002 ffe5 	bl	8006854 <HAL_RCC_GetHCLKFreq>
 800388a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003894:	d010      	beq.n	80038b8 <ADC_ConfigureBoostMode+0x78>
 8003896:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800389a:	d873      	bhi.n	8003984 <ADC_ConfigureBoostMode+0x144>
 800389c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038a0:	d002      	beq.n	80038a8 <ADC_ConfigureBoostMode+0x68>
 80038a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038a6:	d16d      	bne.n	8003984 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	0c1b      	lsrs	r3, r3, #16
 80038ae:	68fa      	ldr	r2, [r7, #12]
 80038b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b4:	60fb      	str	r3, [r7, #12]
        break;
 80038b6:	e068      	b.n	800398a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	089b      	lsrs	r3, r3, #2
 80038bc:	60fb      	str	r3, [r7, #12]
        break;
 80038be:	e064      	b.n	800398a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80038c0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80038c4:	f04f 0100 	mov.w	r1, #0
 80038c8:	f004 fa2a 	bl	8007d20 <HAL_RCCEx_GetPeriphCLKFreq>
 80038cc:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80038d6:	d051      	beq.n	800397c <ADC_ConfigureBoostMode+0x13c>
 80038d8:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80038dc:	d854      	bhi.n	8003988 <ADC_ConfigureBoostMode+0x148>
 80038de:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80038e2:	d047      	beq.n	8003974 <ADC_ConfigureBoostMode+0x134>
 80038e4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80038e8:	d84e      	bhi.n	8003988 <ADC_ConfigureBoostMode+0x148>
 80038ea:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80038ee:	d03d      	beq.n	800396c <ADC_ConfigureBoostMode+0x12c>
 80038f0:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80038f4:	d848      	bhi.n	8003988 <ADC_ConfigureBoostMode+0x148>
 80038f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038fa:	d033      	beq.n	8003964 <ADC_ConfigureBoostMode+0x124>
 80038fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003900:	d842      	bhi.n	8003988 <ADC_ConfigureBoostMode+0x148>
 8003902:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003906:	d029      	beq.n	800395c <ADC_ConfigureBoostMode+0x11c>
 8003908:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800390c:	d83c      	bhi.n	8003988 <ADC_ConfigureBoostMode+0x148>
 800390e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003912:	d01a      	beq.n	800394a <ADC_ConfigureBoostMode+0x10a>
 8003914:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003918:	d836      	bhi.n	8003988 <ADC_ConfigureBoostMode+0x148>
 800391a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800391e:	d014      	beq.n	800394a <ADC_ConfigureBoostMode+0x10a>
 8003920:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003924:	d830      	bhi.n	8003988 <ADC_ConfigureBoostMode+0x148>
 8003926:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800392a:	d00e      	beq.n	800394a <ADC_ConfigureBoostMode+0x10a>
 800392c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003930:	d82a      	bhi.n	8003988 <ADC_ConfigureBoostMode+0x148>
 8003932:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003936:	d008      	beq.n	800394a <ADC_ConfigureBoostMode+0x10a>
 8003938:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800393c:	d824      	bhi.n	8003988 <ADC_ConfigureBoostMode+0x148>
 800393e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003942:	d002      	beq.n	800394a <ADC_ConfigureBoostMode+0x10a>
 8003944:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003948:	d11e      	bne.n	8003988 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	0c9b      	lsrs	r3, r3, #18
 8003950:	005b      	lsls	r3, r3, #1
 8003952:	68fa      	ldr	r2, [r7, #12]
 8003954:	fbb2 f3f3 	udiv	r3, r2, r3
 8003958:	60fb      	str	r3, [r7, #12]
        break;
 800395a:	e016      	b.n	800398a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	091b      	lsrs	r3, r3, #4
 8003960:	60fb      	str	r3, [r7, #12]
        break;
 8003962:	e012      	b.n	800398a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	095b      	lsrs	r3, r3, #5
 8003968:	60fb      	str	r3, [r7, #12]
        break;
 800396a:	e00e      	b.n	800398a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	099b      	lsrs	r3, r3, #6
 8003970:	60fb      	str	r3, [r7, #12]
        break;
 8003972:	e00a      	b.n	800398a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	09db      	lsrs	r3, r3, #7
 8003978:	60fb      	str	r3, [r7, #12]
        break;
 800397a:	e006      	b.n	800398a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	0a1b      	lsrs	r3, r3, #8
 8003980:	60fb      	str	r3, [r7, #12]
        break;
 8003982:	e002      	b.n	800398a <ADC_ConfigureBoostMode+0x14a>
        break;
 8003984:	bf00      	nop
 8003986:	e000      	b.n	800398a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003988:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800398a:	f7ff f8a5 	bl	8002ad8 <HAL_GetREVID>
 800398e:	4603      	mov	r3, r0
 8003990:	f241 0203 	movw	r2, #4099	; 0x1003
 8003994:	4293      	cmp	r3, r2
 8003996:	d815      	bhi.n	80039c4 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	4a2b      	ldr	r2, [pc, #172]	; (8003a48 <ADC_ConfigureBoostMode+0x208>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d908      	bls.n	80039b2 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	689a      	ldr	r2, [r3, #8]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039ae:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80039b0:	e03e      	b.n	8003a30 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	689a      	ldr	r2, [r3, #8]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039c0:	609a      	str	r2, [r3, #8]
}
 80039c2:	e035      	b.n	8003a30 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	085b      	lsrs	r3, r3, #1
 80039c8:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	4a1f      	ldr	r2, [pc, #124]	; (8003a4c <ADC_ConfigureBoostMode+0x20c>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d808      	bhi.n	80039e4 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	689a      	ldr	r2, [r3, #8]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80039e0:	609a      	str	r2, [r3, #8]
}
 80039e2:	e025      	b.n	8003a30 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	4a1a      	ldr	r2, [pc, #104]	; (8003a50 <ADC_ConfigureBoostMode+0x210>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d80a      	bhi.n	8003a02 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039fe:	609a      	str	r2, [r3, #8]
}
 8003a00:	e016      	b.n	8003a30 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	4a13      	ldr	r2, [pc, #76]	; (8003a54 <ADC_ConfigureBoostMode+0x214>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d80a      	bhi.n	8003a20 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a1c:	609a      	str	r2, [r3, #8]
}
 8003a1e:	e007      	b.n	8003a30 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	689a      	ldr	r2, [r3, #8]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003a2e:	609a      	str	r2, [r3, #8]
}
 8003a30:	bf00      	nop
 8003a32:	3710      	adds	r7, #16
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	40022000 	.word	0x40022000
 8003a3c:	40022100 	.word	0x40022100
 8003a40:	40022300 	.word	0x40022300
 8003a44:	58026300 	.word	0x58026300
 8003a48:	01312d00 	.word	0x01312d00
 8003a4c:	005f5e10 	.word	0x005f5e10
 8003a50:	00bebc20 	.word	0x00bebc20
 8003a54:	017d7840 	.word	0x017d7840

08003a58 <LL_ADC_IsEnabled>:
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f003 0301 	and.w	r3, r3, #1
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d101      	bne.n	8003a70 <LL_ADC_IsEnabled+0x18>
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e000      	b.n	8003a72 <LL_ADC_IsEnabled+0x1a>
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	370c      	adds	r7, #12
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr

08003a7e <LL_ADC_REG_IsConversionOngoing>:
{
 8003a7e:	b480      	push	{r7}
 8003a80:	b083      	sub	sp, #12
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f003 0304 	and.w	r3, r3, #4
 8003a8e:	2b04      	cmp	r3, #4
 8003a90:	d101      	bne.n	8003a96 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003a92:	2301      	movs	r3, #1
 8003a94:	e000      	b.n	8003a98 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003a96:	2300      	movs	r3, #0
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003aa4:	b590      	push	{r4, r7, lr}
 8003aa6:	b09f      	sub	sp, #124	; 0x7c
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d101      	bne.n	8003ac2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003abe:	2302      	movs	r3, #2
 8003ac0:	e0be      	b.n	8003c40 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003aca:	2300      	movs	r3, #0
 8003acc:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a5c      	ldr	r2, [pc, #368]	; (8003c48 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d102      	bne.n	8003ae2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003adc:	4b5b      	ldr	r3, [pc, #364]	; (8003c4c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003ade:	60bb      	str	r3, [r7, #8]
 8003ae0:	e001      	b.n	8003ae6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d10b      	bne.n	8003b04 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003af0:	f043 0220 	orr.w	r2, r3, #32
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e09d      	b.n	8003c40 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	4618      	mov	r0, r3
 8003b08:	f7ff ffb9 	bl	8003a7e <LL_ADC_REG_IsConversionOngoing>
 8003b0c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7ff ffb3 	bl	8003a7e <LL_ADC_REG_IsConversionOngoing>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d17f      	bne.n	8003c1e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003b1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d17c      	bne.n	8003c1e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a47      	ldr	r2, [pc, #284]	; (8003c48 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d004      	beq.n	8003b38 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a46      	ldr	r2, [pc, #280]	; (8003c4c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d101      	bne.n	8003b3c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003b38:	4b45      	ldr	r3, [pc, #276]	; (8003c50 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003b3a:	e000      	b.n	8003b3e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003b3c:	4b45      	ldr	r3, [pc, #276]	; (8003c54 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003b3e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d039      	beq.n	8003bbc <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003b48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	431a      	orrs	r2, r3
 8003b56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b58:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a3a      	ldr	r2, [pc, #232]	; (8003c48 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d004      	beq.n	8003b6e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a38      	ldr	r2, [pc, #224]	; (8003c4c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d10e      	bne.n	8003b8c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003b6e:	4836      	ldr	r0, [pc, #216]	; (8003c48 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003b70:	f7ff ff72 	bl	8003a58 <LL_ADC_IsEnabled>
 8003b74:	4604      	mov	r4, r0
 8003b76:	4835      	ldr	r0, [pc, #212]	; (8003c4c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003b78:	f7ff ff6e 	bl	8003a58 <LL_ADC_IsEnabled>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	4323      	orrs	r3, r4
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	bf0c      	ite	eq
 8003b84:	2301      	moveq	r3, #1
 8003b86:	2300      	movne	r3, #0
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	e008      	b.n	8003b9e <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003b8c:	4832      	ldr	r0, [pc, #200]	; (8003c58 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003b8e:	f7ff ff63 	bl	8003a58 <LL_ADC_IsEnabled>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	bf0c      	ite	eq
 8003b98:	2301      	moveq	r3, #1
 8003b9a:	2300      	movne	r3, #0
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d047      	beq.n	8003c32 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003ba2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ba4:	689a      	ldr	r2, [r3, #8]
 8003ba6:	4b2d      	ldr	r3, [pc, #180]	; (8003c5c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003ba8:	4013      	ands	r3, r2
 8003baa:	683a      	ldr	r2, [r7, #0]
 8003bac:	6811      	ldr	r1, [r2, #0]
 8003bae:	683a      	ldr	r2, [r7, #0]
 8003bb0:	6892      	ldr	r2, [r2, #8]
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	431a      	orrs	r2, r3
 8003bb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bb8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003bba:	e03a      	b.n	8003c32 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003bbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003bc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bc6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a1e      	ldr	r2, [pc, #120]	; (8003c48 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d004      	beq.n	8003bdc <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a1d      	ldr	r2, [pc, #116]	; (8003c4c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d10e      	bne.n	8003bfa <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003bdc:	481a      	ldr	r0, [pc, #104]	; (8003c48 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003bde:	f7ff ff3b 	bl	8003a58 <LL_ADC_IsEnabled>
 8003be2:	4604      	mov	r4, r0
 8003be4:	4819      	ldr	r0, [pc, #100]	; (8003c4c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003be6:	f7ff ff37 	bl	8003a58 <LL_ADC_IsEnabled>
 8003bea:	4603      	mov	r3, r0
 8003bec:	4323      	orrs	r3, r4
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	bf0c      	ite	eq
 8003bf2:	2301      	moveq	r3, #1
 8003bf4:	2300      	movne	r3, #0
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	e008      	b.n	8003c0c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003bfa:	4817      	ldr	r0, [pc, #92]	; (8003c58 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003bfc:	f7ff ff2c 	bl	8003a58 <LL_ADC_IsEnabled>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	bf0c      	ite	eq
 8003c06:	2301      	moveq	r3, #1
 8003c08:	2300      	movne	r3, #0
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d010      	beq.n	8003c32 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003c10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c12:	689a      	ldr	r2, [r3, #8]
 8003c14:	4b11      	ldr	r3, [pc, #68]	; (8003c5c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003c16:	4013      	ands	r3, r2
 8003c18:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003c1a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c1c:	e009      	b.n	8003c32 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c22:	f043 0220 	orr.w	r2, r3, #32
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003c30:	e000      	b.n	8003c34 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c32:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003c3c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	377c      	adds	r7, #124	; 0x7c
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd90      	pop	{r4, r7, pc}
 8003c48:	40022000 	.word	0x40022000
 8003c4c:	40022100 	.word	0x40022100
 8003c50:	40022300 	.word	0x40022300
 8003c54:	58026300 	.word	0x58026300
 8003c58:	58026000 	.word	0x58026000
 8003c5c:	fffff0e0 	.word	0xfffff0e0

08003c60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b085      	sub	sp, #20
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f003 0307 	and.w	r3, r3, #7
 8003c6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c70:	4b0b      	ldr	r3, [pc, #44]	; (8003ca0 <__NVIC_SetPriorityGrouping+0x40>)
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c76:	68ba      	ldr	r2, [r7, #8]
 8003c78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003c88:	4b06      	ldr	r3, [pc, #24]	; (8003ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c8e:	4a04      	ldr	r2, [pc, #16]	; (8003ca0 <__NVIC_SetPriorityGrouping+0x40>)
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	60d3      	str	r3, [r2, #12]
}
 8003c94:	bf00      	nop
 8003c96:	3714      	adds	r7, #20
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr
 8003ca0:	e000ed00 	.word	0xe000ed00
 8003ca4:	05fa0000 	.word	0x05fa0000

08003ca8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cac:	4b04      	ldr	r3, [pc, #16]	; (8003cc0 <__NVIC_GetPriorityGrouping+0x18>)
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	0a1b      	lsrs	r3, r3, #8
 8003cb2:	f003 0307 	and.w	r3, r3, #7
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr
 8003cc0:	e000ed00 	.word	0xe000ed00

08003cc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	4603      	mov	r3, r0
 8003ccc:	6039      	str	r1, [r7, #0]
 8003cce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003cd0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	db0a      	blt.n	8003cee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	b2da      	uxtb	r2, r3
 8003cdc:	490c      	ldr	r1, [pc, #48]	; (8003d10 <__NVIC_SetPriority+0x4c>)
 8003cde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ce2:	0112      	lsls	r2, r2, #4
 8003ce4:	b2d2      	uxtb	r2, r2
 8003ce6:	440b      	add	r3, r1
 8003ce8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003cec:	e00a      	b.n	8003d04 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	b2da      	uxtb	r2, r3
 8003cf2:	4908      	ldr	r1, [pc, #32]	; (8003d14 <__NVIC_SetPriority+0x50>)
 8003cf4:	88fb      	ldrh	r3, [r7, #6]
 8003cf6:	f003 030f 	and.w	r3, r3, #15
 8003cfa:	3b04      	subs	r3, #4
 8003cfc:	0112      	lsls	r2, r2, #4
 8003cfe:	b2d2      	uxtb	r2, r2
 8003d00:	440b      	add	r3, r1
 8003d02:	761a      	strb	r2, [r3, #24]
}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr
 8003d10:	e000e100 	.word	0xe000e100
 8003d14:	e000ed00 	.word	0xe000ed00

08003d18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b089      	sub	sp, #36	; 0x24
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f003 0307 	and.w	r3, r3, #7
 8003d2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	f1c3 0307 	rsb	r3, r3, #7
 8003d32:	2b04      	cmp	r3, #4
 8003d34:	bf28      	it	cs
 8003d36:	2304      	movcs	r3, #4
 8003d38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	3304      	adds	r3, #4
 8003d3e:	2b06      	cmp	r3, #6
 8003d40:	d902      	bls.n	8003d48 <NVIC_EncodePriority+0x30>
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	3b03      	subs	r3, #3
 8003d46:	e000      	b.n	8003d4a <NVIC_EncodePriority+0x32>
 8003d48:	2300      	movs	r3, #0
 8003d4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	fa02 f303 	lsl.w	r3, r2, r3
 8003d56:	43da      	mvns	r2, r3
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	401a      	ands	r2, r3
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d60:	f04f 31ff 	mov.w	r1, #4294967295
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	fa01 f303 	lsl.w	r3, r1, r3
 8003d6a:	43d9      	mvns	r1, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d70:	4313      	orrs	r3, r2
         );
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3724      	adds	r7, #36	; 0x24
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
	...

08003d80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d90:	d301      	bcc.n	8003d96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d92:	2301      	movs	r3, #1
 8003d94:	e00f      	b.n	8003db6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d96:	4a0a      	ldr	r2, [pc, #40]	; (8003dc0 <SysTick_Config+0x40>)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d9e:	210f      	movs	r1, #15
 8003da0:	f04f 30ff 	mov.w	r0, #4294967295
 8003da4:	f7ff ff8e 	bl	8003cc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003da8:	4b05      	ldr	r3, [pc, #20]	; (8003dc0 <SysTick_Config+0x40>)
 8003daa:	2200      	movs	r2, #0
 8003dac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003dae:	4b04      	ldr	r3, [pc, #16]	; (8003dc0 <SysTick_Config+0x40>)
 8003db0:	2207      	movs	r2, #7
 8003db2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3708      	adds	r7, #8
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	e000e010 	.word	0xe000e010

08003dc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f7ff ff47 	bl	8003c60 <__NVIC_SetPriorityGrouping>
}
 8003dd2:	bf00      	nop
 8003dd4:	3708      	adds	r7, #8
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}

08003dda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dda:	b580      	push	{r7, lr}
 8003ddc:	b086      	sub	sp, #24
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	4603      	mov	r3, r0
 8003de2:	60b9      	str	r1, [r7, #8]
 8003de4:	607a      	str	r2, [r7, #4]
 8003de6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003de8:	f7ff ff5e 	bl	8003ca8 <__NVIC_GetPriorityGrouping>
 8003dec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	68b9      	ldr	r1, [r7, #8]
 8003df2:	6978      	ldr	r0, [r7, #20]
 8003df4:	f7ff ff90 	bl	8003d18 <NVIC_EncodePriority>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003dfe:	4611      	mov	r1, r2
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7ff ff5f 	bl	8003cc4 <__NVIC_SetPriority>
}
 8003e06:	bf00      	nop
 8003e08:	3718      	adds	r7, #24
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}

08003e0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e0e:	b580      	push	{r7, lr}
 8003e10:	b082      	sub	sp, #8
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f7ff ffb2 	bl	8003d80 <SysTick_Config>
 8003e1c:	4603      	mov	r3, r0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3708      	adds	r7, #8
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
	...

08003e28 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d101      	bne.n	8003e3a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e0cf      	b.n	8003fda <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d106      	bne.n	8003e52 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2223      	movs	r2, #35	; 0x23
 8003e48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f7fd fe55 	bl	8001afc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e52:	4b64      	ldr	r3, [pc, #400]	; (8003fe4 <HAL_ETH_Init+0x1bc>)
 8003e54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003e58:	4a62      	ldr	r2, [pc, #392]	; (8003fe4 <HAL_ETH_Init+0x1bc>)
 8003e5a:	f043 0302 	orr.w	r3, r3, #2
 8003e5e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003e62:	4b60      	ldr	r3, [pc, #384]	; (8003fe4 <HAL_ETH_Init+0x1bc>)
 8003e64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	60bb      	str	r3, [r7, #8]
 8003e6e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	7a1b      	ldrb	r3, [r3, #8]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d103      	bne.n	8003e80 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8003e78:	2000      	movs	r0, #0
 8003e7a:	f7fe fe39 	bl	8002af0 <HAL_SYSCFG_ETHInterfaceSelect>
 8003e7e:	e003      	b.n	8003e88 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8003e80:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003e84:	f7fe fe34 	bl	8002af0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8003e88:	4b57      	ldr	r3, [pc, #348]	; (8003fe8 <HAL_ETH_Init+0x1c0>)
 8003e8a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	6812      	ldr	r2, [r2, #0]
 8003e9a:	f043 0301 	orr.w	r3, r3, #1
 8003e9e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003ea2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ea4:	f7fe fde8 	bl	8002a78 <HAL_GetTick>
 8003ea8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003eaa:	e011      	b.n	8003ed0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003eac:	f7fe fde4 	bl	8002a78 <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003eba:	d909      	bls.n	8003ed0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2204      	movs	r2, #4
 8003ec0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	22e0      	movs	r2, #224	; 0xe0
 8003ec8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e084      	b.n	8003fda <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0301 	and.w	r3, r3, #1
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d1e4      	bne.n	8003eac <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 f886 	bl	8003ff4 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8003ee8:	f002 fcb4 	bl	8006854 <HAL_RCC_GetHCLKFreq>
 8003eec:	4603      	mov	r3, r0
 8003eee:	4a3f      	ldr	r2, [pc, #252]	; (8003fec <HAL_ETH_Init+0x1c4>)
 8003ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef4:	0c9a      	lsrs	r2, r3, #18
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	3a01      	subs	r2, #1
 8003efc:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f000 fa71 	bl	80043e8 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f0e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003f12:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	6812      	ldr	r2, [r2, #0]
 8003f1a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003f1e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003f22:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	f003 0303 	and.w	r3, r3, #3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d009      	beq.n	8003f46 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2201      	movs	r2, #1
 8003f36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	22e0      	movs	r2, #224	; 0xe0
 8003f3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e049      	b.n	8003fda <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f4e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8003f52:	4b27      	ldr	r3, [pc, #156]	; (8003ff0 <HAL_ETH_Init+0x1c8>)
 8003f54:	4013      	ands	r3, r2
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	6952      	ldr	r2, [r2, #20]
 8003f5a:	0051      	lsls	r1, r2, #1
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	6812      	ldr	r2, [r2, #0]
 8003f60:	430b      	orrs	r3, r1
 8003f62:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003f66:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 fad9 	bl	8004522 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f000 fb1f 	bl	80045b4 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	3305      	adds	r3, #5
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	021a      	lsls	r2, r3, #8
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	3304      	adds	r3, #4
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	4619      	mov	r1, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	3303      	adds	r3, #3
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	061a      	lsls	r2, r3, #24
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	3302      	adds	r3, #2
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	041b      	lsls	r3, r3, #16
 8003fa8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	3301      	adds	r3, #1
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003fb4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003fc2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003fc4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2210      	movs	r2, #16
 8003fd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3710      	adds	r7, #16
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	58024400 	.word	0x58024400
 8003fe8:	58000400 	.word	0x58000400
 8003fec:	431bde83 	.word	0x431bde83
 8003ff0:	ffff8001 	.word	0xffff8001

08003ff4 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004004:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800400c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800400e:	f002 fc21 	bl	8006854 <HAL_RCC_GetHCLKFreq>
 8004012:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	4a1e      	ldr	r2, [pc, #120]	; (8004090 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d908      	bls.n	800402e <HAL_ETH_SetMDIOClockRange+0x3a>
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	4a1d      	ldr	r2, [pc, #116]	; (8004094 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d804      	bhi.n	800402e <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800402a:	60fb      	str	r3, [r7, #12]
 800402c:	e027      	b.n	800407e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	4a18      	ldr	r2, [pc, #96]	; (8004094 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d908      	bls.n	8004048 <HAL_ETH_SetMDIOClockRange+0x54>
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	4a17      	ldr	r2, [pc, #92]	; (8004098 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d204      	bcs.n	8004048 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004044:	60fb      	str	r3, [r7, #12]
 8004046:	e01a      	b.n	800407e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	4a13      	ldr	r2, [pc, #76]	; (8004098 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d303      	bcc.n	8004058 <HAL_ETH_SetMDIOClockRange+0x64>
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	4a12      	ldr	r2, [pc, #72]	; (800409c <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d911      	bls.n	800407c <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	4a10      	ldr	r2, [pc, #64]	; (800409c <HAL_ETH_SetMDIOClockRange+0xa8>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d908      	bls.n	8004072 <HAL_ETH_SetMDIOClockRange+0x7e>
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	4a0f      	ldr	r2, [pc, #60]	; (80040a0 <HAL_ETH_SetMDIOClockRange+0xac>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d804      	bhi.n	8004072 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800406e:	60fb      	str	r3, [r7, #12]
 8004070:	e005      	b.n	800407e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004078:	60fb      	str	r3, [r7, #12]
 800407a:	e000      	b.n	800407e <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800407c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8004088:	bf00      	nop
 800408a:	3710      	adds	r7, #16
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	01312cff 	.word	0x01312cff
 8004094:	02160ebf 	.word	0x02160ebf
 8004098:	03938700 	.word	0x03938700
 800409c:	05f5e0ff 	.word	0x05f5e0ff
 80040a0:	08f0d17f 	.word	0x08f0d17f

080040a4 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b085      	sub	sp, #20
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80040b6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	791b      	ldrb	r3, [r3, #4]
 80040bc:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80040be:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	7b1b      	ldrb	r3, [r3, #12]
 80040c4:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80040c6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	7b5b      	ldrb	r3, [r3, #13]
 80040cc:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80040ce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	7b9b      	ldrb	r3, [r3, #14]
 80040d4:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80040d6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	7bdb      	ldrb	r3, [r3, #15]
 80040dc:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80040de:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80040e0:	683a      	ldr	r2, [r7, #0]
 80040e2:	7c12      	ldrb	r2, [r2, #16]
 80040e4:	2a00      	cmp	r2, #0
 80040e6:	d102      	bne.n	80040ee <ETH_SetMACConfig+0x4a>
 80040e8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80040ec:	e000      	b.n	80040f0 <ETH_SetMACConfig+0x4c>
 80040ee:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80040f0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80040f2:	683a      	ldr	r2, [r7, #0]
 80040f4:	7c52      	ldrb	r2, [r2, #17]
 80040f6:	2a00      	cmp	r2, #0
 80040f8:	d102      	bne.n	8004100 <ETH_SetMACConfig+0x5c>
 80040fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80040fe:	e000      	b.n	8004102 <ETH_SetMACConfig+0x5e>
 8004100:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004102:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	7c9b      	ldrb	r3, [r3, #18]
 8004108:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800410a:	431a      	orrs	r2, r3
               macconf->Speed |
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8004110:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8004116:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	7f1b      	ldrb	r3, [r3, #28]
 800411c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800411e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	7f5b      	ldrb	r3, [r3, #29]
 8004124:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004126:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004128:	683a      	ldr	r2, [r7, #0]
 800412a:	7f92      	ldrb	r2, [r2, #30]
 800412c:	2a00      	cmp	r2, #0
 800412e:	d102      	bne.n	8004136 <ETH_SetMACConfig+0x92>
 8004130:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004134:	e000      	b.n	8004138 <ETH_SetMACConfig+0x94>
 8004136:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004138:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	7fdb      	ldrb	r3, [r3, #31]
 800413e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004140:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004142:	683a      	ldr	r2, [r7, #0]
 8004144:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004148:	2a00      	cmp	r2, #0
 800414a:	d102      	bne.n	8004152 <ETH_SetMACConfig+0xae>
 800414c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004150:	e000      	b.n	8004154 <ETH_SetMACConfig+0xb0>
 8004152:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004154:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800415a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004162:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8004164:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800416a:	4313      	orrs	r3, r2
 800416c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	4b56      	ldr	r3, [pc, #344]	; (80042d0 <ETH_SetMACConfig+0x22c>)
 8004176:	4013      	ands	r3, r2
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	6812      	ldr	r2, [r2, #0]
 800417c:	68f9      	ldr	r1, [r7, #12]
 800417e:	430b      	orrs	r3, r1
 8004180:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004186:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800418e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004190:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004198:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800419a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80041a2:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80041a4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80041a6:	683a      	ldr	r2, [r7, #0]
 80041a8:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80041ac:	2a00      	cmp	r2, #0
 80041ae:	d102      	bne.n	80041b6 <ETH_SetMACConfig+0x112>
 80041b0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80041b4:	e000      	b.n	80041b8 <ETH_SetMACConfig+0x114>
 80041b6:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80041b8:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80041be:	4313      	orrs	r3, r2
 80041c0:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	685a      	ldr	r2, [r3, #4]
 80041c8:	4b42      	ldr	r3, [pc, #264]	; (80042d4 <ETH_SetMACConfig+0x230>)
 80041ca:	4013      	ands	r3, r2
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	6812      	ldr	r2, [r2, #0]
 80041d0:	68f9      	ldr	r1, [r7, #12]
 80041d2:	430b      	orrs	r3, r1
 80041d4:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041dc:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80041e2:	4313      	orrs	r3, r2
 80041e4:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68da      	ldr	r2, [r3, #12]
 80041ec:	4b3a      	ldr	r3, [pc, #232]	; (80042d8 <ETH_SetMACConfig+0x234>)
 80041ee:	4013      	ands	r3, r2
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	6812      	ldr	r2, [r2, #0]
 80041f4:	68f9      	ldr	r1, [r7, #12]
 80041f6:	430b      	orrs	r3, r1
 80041f8:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004200:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004206:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8004208:	683a      	ldr	r2, [r7, #0]
 800420a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800420e:	2a00      	cmp	r2, #0
 8004210:	d101      	bne.n	8004216 <ETH_SetMACConfig+0x172>
 8004212:	2280      	movs	r2, #128	; 0x80
 8004214:	e000      	b.n	8004218 <ETH_SetMACConfig+0x174>
 8004216:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8004218:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800421e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004220:	4313      	orrs	r3, r2
 8004222:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800422a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800422e:	4013      	ands	r3, r2
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	6812      	ldr	r2, [r2, #0]
 8004234:	68f9      	ldr	r1, [r7, #12]
 8004236:	430b      	orrs	r3, r1
 8004238:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8004240:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8004248:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800424a:	4313      	orrs	r3, r2
 800424c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004256:	f023 0103 	bic.w	r1, r3, #3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	430a      	orrs	r2, r1
 8004262:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800426e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	430a      	orrs	r2, r1
 800427c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004284:	683a      	ldr	r2, [r7, #0]
 8004286:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800428a:	2a00      	cmp	r2, #0
 800428c:	d101      	bne.n	8004292 <ETH_SetMACConfig+0x1ee>
 800428e:	2240      	movs	r2, #64	; 0x40
 8004290:	e000      	b.n	8004294 <ETH_SetMACConfig+0x1f0>
 8004292:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8004294:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800429c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800429e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80042a6:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80042a8:	4313      	orrs	r3, r2
 80042aa:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80042b4:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	68fa      	ldr	r2, [r7, #12]
 80042be:	430a      	orrs	r2, r1
 80042c0:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80042c4:	bf00      	nop
 80042c6:	3714      	adds	r7, #20
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr
 80042d0:	00048083 	.word	0x00048083
 80042d4:	c0f88000 	.word	0xc0f88000
 80042d8:	fffffef0 	.word	0xfffffef0

080042dc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80042dc:	b480      	push	{r7}
 80042de:	b085      	sub	sp, #20
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	4b38      	ldr	r3, [pc, #224]	; (80043d4 <ETH_SetDMAConfig+0xf8>)
 80042f2:	4013      	ands	r3, r2
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	6811      	ldr	r1, [r2, #0]
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	6812      	ldr	r2, [r2, #0]
 80042fc:	430b      	orrs	r3, r1
 80042fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004302:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	791b      	ldrb	r3, [r3, #4]
 8004308:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800430e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	7b1b      	ldrb	r3, [r3, #12]
 8004314:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004316:	4313      	orrs	r3, r2
 8004318:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004322:	685a      	ldr	r2, [r3, #4]
 8004324:	4b2c      	ldr	r3, [pc, #176]	; (80043d8 <ETH_SetDMAConfig+0xfc>)
 8004326:	4013      	ands	r3, r2
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	6812      	ldr	r2, [r2, #0]
 800432c:	68f9      	ldr	r1, [r7, #12]
 800432e:	430b      	orrs	r3, r1
 8004330:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004334:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	7b5b      	ldrb	r3, [r3, #13]
 800433a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004340:	4313      	orrs	r3, r2
 8004342:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800434c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8004350:	4b22      	ldr	r3, [pc, #136]	; (80043dc <ETH_SetDMAConfig+0x100>)
 8004352:	4013      	ands	r3, r2
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	6812      	ldr	r2, [r2, #0]
 8004358:	68f9      	ldr	r1, [r7, #12]
 800435a:	430b      	orrs	r3, r1
 800435c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004360:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	7d1b      	ldrb	r3, [r3, #20]
 800436c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800436e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	7f5b      	ldrb	r3, [r3, #29]
 8004374:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8004376:	4313      	orrs	r3, r2
 8004378:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004382:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8004386:	4b16      	ldr	r3, [pc, #88]	; (80043e0 <ETH_SetDMAConfig+0x104>)
 8004388:	4013      	ands	r3, r2
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	6812      	ldr	r2, [r2, #0]
 800438e:	68f9      	ldr	r1, [r7, #12]
 8004390:	430b      	orrs	r3, r1
 8004392:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004396:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	7f1b      	ldrb	r3, [r3, #28]
 800439e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80043a4:	4313      	orrs	r3, r2
 80043a6:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043b0:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80043b4:	4b0b      	ldr	r3, [pc, #44]	; (80043e4 <ETH_SetDMAConfig+0x108>)
 80043b6:	4013      	ands	r3, r2
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	6812      	ldr	r2, [r2, #0]
 80043bc:	68f9      	ldr	r1, [r7, #12]
 80043be:	430b      	orrs	r3, r1
 80043c0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80043c4:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80043c8:	bf00      	nop
 80043ca:	3714      	adds	r7, #20
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr
 80043d4:	ffff87fd 	.word	0xffff87fd
 80043d8:	ffff2ffe 	.word	0xffff2ffe
 80043dc:	fffec000 	.word	0xfffec000
 80043e0:	ffc0efef 	.word	0xffc0efef
 80043e4:	7fc0ffff 	.word	0x7fc0ffff

080043e8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b0a4      	sub	sp, #144	; 0x90
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80043f0:	2301      	movs	r3, #1
 80043f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80043f6:	2300      	movs	r3, #0
 80043f8:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80043fa:	2300      	movs	r3, #0
 80043fc:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004400:	2300      	movs	r3, #0
 8004402:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8004406:	2301      	movs	r3, #1
 8004408:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800440c:	2301      	movs	r3, #1
 800440e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004412:	2301      	movs	r3, #1
 8004414:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8004418:	2300      	movs	r3, #0
 800441a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800441e:	2301      	movs	r3, #1
 8004420:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004424:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004428:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800442a:	2300      	movs	r3, #0
 800442c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8004430:	2300      	movs	r3, #0
 8004432:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8004434:	2300      	movs	r3, #0
 8004436:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800443a:	2300      	movs	r3, #0
 800443c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8004440:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8004444:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8004446:	2300      	movs	r3, #0
 8004448:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800444c:	2300      	movs	r3, #0
 800444e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8004450:	2301      	movs	r3, #1
 8004452:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8004456:	2300      	movs	r3, #0
 8004458:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800445c:	2300      	movs	r3, #0
 800445e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8004462:	2300      	movs	r3, #0
 8004464:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8004466:	2300      	movs	r3, #0
 8004468:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800446a:	2300      	movs	r3, #0
 800446c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800446e:	2300      	movs	r3, #0
 8004470:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004474:	2300      	movs	r3, #0
 8004476:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800447a:	2301      	movs	r3, #1
 800447c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8004480:	2320      	movs	r3, #32
 8004482:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8004486:	2301      	movs	r3, #1
 8004488:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800448c:	2300      	movs	r3, #0
 800448e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8004492:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8004496:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004498:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800449c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800449e:	2300      	movs	r3, #0
 80044a0:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80044a4:	2302      	movs	r3, #2
 80044a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80044aa:	2300      	movs	r3, #0
 80044ac:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80044b0:	2300      	movs	r3, #0
 80044b2:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80044b6:	2300      	movs	r3, #0
 80044b8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80044bc:	2301      	movs	r3, #1
 80044be:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80044c2:	2300      	movs	r3, #0
 80044c4:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80044c6:	2301      	movs	r3, #1
 80044c8:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80044cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80044d0:	4619      	mov	r1, r3
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f7ff fde6 	bl	80040a4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80044d8:	2301      	movs	r3, #1
 80044da:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80044dc:	2301      	movs	r3, #1
 80044de:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80044e0:	2300      	movs	r3, #0
 80044e2:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80044e4:	2300      	movs	r3, #0
 80044e6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80044ea:	2300      	movs	r3, #0
 80044ec:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80044ee:	2300      	movs	r3, #0
 80044f0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80044f2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80044f6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80044f8:	2300      	movs	r3, #0
 80044fa:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80044fc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004500:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8004502:	2300      	movs	r3, #0
 8004504:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8004508:	f44f 7306 	mov.w	r3, #536	; 0x218
 800450c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800450e:	f107 0308 	add.w	r3, r7, #8
 8004512:	4619      	mov	r1, r3
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f7ff fee1 	bl	80042dc <ETH_SetDMAConfig>
}
 800451a:	bf00      	nop
 800451c:	3790      	adds	r7, #144	; 0x90
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004522:	b480      	push	{r7}
 8004524:	b085      	sub	sp, #20
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800452a:	2300      	movs	r3, #0
 800452c:	60fb      	str	r3, [r7, #12]
 800452e:	e01d      	b.n	800456c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	68d9      	ldr	r1, [r3, #12]
 8004534:	68fa      	ldr	r2, [r7, #12]
 8004536:	4613      	mov	r3, r2
 8004538:	005b      	lsls	r3, r3, #1
 800453a:	4413      	add	r3, r2
 800453c:	00db      	lsls	r3, r3, #3
 800453e:	440b      	add	r3, r1
 8004540:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	2200      	movs	r2, #0
 8004546:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	2200      	movs	r2, #0
 800454c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	2200      	movs	r2, #0
 8004552:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	2200      	movs	r2, #0
 8004558:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800455a:	68b9      	ldr	r1, [r7, #8]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	3206      	adds	r2, #6
 8004562:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	3301      	adds	r3, #1
 800456a:	60fb      	str	r3, [r7, #12]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2b03      	cmp	r3, #3
 8004570:	d9de      	bls.n	8004530 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004580:	461a      	mov	r2, r3
 8004582:	2303      	movs	r3, #3
 8004584:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	68da      	ldr	r2, [r3, #12]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004594:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	68da      	ldr	r2, [r3, #12]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045a4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 80045a8:	bf00      	nop
 80045aa:	3714      	adds	r7, #20
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr

080045b4 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b085      	sub	sp, #20
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80045bc:	2300      	movs	r3, #0
 80045be:	60fb      	str	r3, [r7, #12]
 80045c0:	e023      	b.n	800460a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6919      	ldr	r1, [r3, #16]
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	4613      	mov	r3, r2
 80045ca:	005b      	lsls	r3, r3, #1
 80045cc:	4413      	add	r3, r2
 80045ce:	00db      	lsls	r3, r3, #3
 80045d0:	440b      	add	r3, r1
 80045d2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	2200      	movs	r2, #0
 80045d8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	2200      	movs	r2, #0
 80045de:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	2200      	movs	r2, #0
 80045e4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	2200      	movs	r2, #0
 80045ea:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	2200      	movs	r2, #0
 80045f0:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	2200      	movs	r2, #0
 80045f6:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80045f8:	68b9      	ldr	r1, [r7, #8]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	68fa      	ldr	r2, [r7, #12]
 80045fe:	3212      	adds	r2, #18
 8004600:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	3301      	adds	r3, #1
 8004608:	60fb      	str	r3, [r7, #12]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2b03      	cmp	r3, #3
 800460e:	d9d8      	bls.n	80045c2 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004636:	461a      	mov	r2, r3
 8004638:	2303      	movs	r3, #3
 800463a:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	691a      	ldr	r2, [r3, #16]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800464a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800465e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8004662:	bf00      	nop
 8004664:	3714      	adds	r7, #20
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr
	...

08004670 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b098      	sub	sp, #96	; 0x60
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8004678:	4a84      	ldr	r2, [pc, #528]	; (800488c <HAL_FDCAN_Init+0x21c>)
 800467a:	f107 030c 	add.w	r3, r7, #12
 800467e:	4611      	mov	r1, r2
 8004680:	224c      	movs	r2, #76	; 0x4c
 8004682:	4618      	mov	r0, r3
 8004684:	f007 fc06 	bl	800be94 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d101      	bne.n	8004692 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e1c6      	b.n	8004a20 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a7e      	ldr	r2, [pc, #504]	; (8004890 <HAL_FDCAN_Init+0x220>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d106      	bne.n	80046aa <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80046a4:	461a      	mov	r2, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d106      	bne.n	80046c4 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f7fd fb4c 	bl	8001d5c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	699a      	ldr	r2, [r3, #24]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f022 0210 	bic.w	r2, r2, #16
 80046d2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80046d4:	f7fe f9d0 	bl	8002a78 <HAL_GetTick>
 80046d8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80046da:	e014      	b.n	8004706 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80046dc:	f7fe f9cc 	bl	8002a78 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	2b0a      	cmp	r3, #10
 80046e8:	d90d      	bls.n	8004706 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046f0:	f043 0201 	orr.w	r2, r3, #1
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2203      	movs	r2, #3
 80046fe:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e18c      	b.n	8004a20 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	f003 0308 	and.w	r3, r3, #8
 8004710:	2b08      	cmp	r3, #8
 8004712:	d0e3      	beq.n	80046dc <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	699a      	ldr	r2, [r3, #24]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f042 0201 	orr.w	r2, r2, #1
 8004722:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004724:	f7fe f9a8 	bl	8002a78 <HAL_GetTick>
 8004728:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800472a:	e014      	b.n	8004756 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800472c:	f7fe f9a4 	bl	8002a78 <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	2b0a      	cmp	r3, #10
 8004738:	d90d      	bls.n	8004756 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004740:	f043 0201 	orr.w	r2, r3, #1
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2203      	movs	r2, #3
 800474e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e164      	b.n	8004a20 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	699b      	ldr	r3, [r3, #24]
 800475c:	f003 0301 	and.w	r3, r3, #1
 8004760:	2b00      	cmp	r3, #0
 8004762:	d0e3      	beq.n	800472c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	699a      	ldr	r2, [r3, #24]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f042 0202 	orr.w	r2, r2, #2
 8004772:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	7c1b      	ldrb	r3, [r3, #16]
 8004778:	2b01      	cmp	r3, #1
 800477a:	d108      	bne.n	800478e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	699a      	ldr	r2, [r3, #24]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800478a:	619a      	str	r2, [r3, #24]
 800478c:	e007      	b.n	800479e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	699a      	ldr	r2, [r3, #24]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800479c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	7c5b      	ldrb	r3, [r3, #17]
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d108      	bne.n	80047b8 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	699a      	ldr	r2, [r3, #24]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047b4:	619a      	str	r2, [r3, #24]
 80047b6:	e007      	b.n	80047c8 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	699a      	ldr	r2, [r3, #24]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80047c6:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	7c9b      	ldrb	r3, [r3, #18]
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d108      	bne.n	80047e2 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	699a      	ldr	r2, [r3, #24]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80047de:	619a      	str	r2, [r3, #24]
 80047e0:	e007      	b.n	80047f2 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	699a      	ldr	r2, [r3, #24]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80047f0:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	699b      	ldr	r3, [r3, #24]
 80047f8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	689a      	ldr	r2, [r3, #8]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	430a      	orrs	r2, r1
 8004806:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	699a      	ldr	r2, [r3, #24]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8004816:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	691a      	ldr	r2, [r3, #16]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f022 0210 	bic.w	r2, r2, #16
 8004826:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	2b01      	cmp	r3, #1
 800482e:	d108      	bne.n	8004842 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	699a      	ldr	r2, [r3, #24]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f042 0204 	orr.w	r2, r2, #4
 800483e:	619a      	str	r2, [r3, #24]
 8004840:	e030      	b.n	80048a4 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d02c      	beq.n	80048a4 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	2b02      	cmp	r3, #2
 8004850:	d020      	beq.n	8004894 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	699a      	ldr	r2, [r3, #24]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004860:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	691a      	ldr	r2, [r3, #16]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f042 0210 	orr.w	r2, r2, #16
 8004870:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	2b03      	cmp	r3, #3
 8004878:	d114      	bne.n	80048a4 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	699a      	ldr	r2, [r3, #24]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f042 0220 	orr.w	r2, r2, #32
 8004888:	619a      	str	r2, [r3, #24]
 800488a:	e00b      	b.n	80048a4 <HAL_FDCAN_Init+0x234>
 800488c:	0800bef0 	.word	0x0800bef0
 8004890:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	699a      	ldr	r2, [r3, #24]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f042 0220 	orr.w	r2, r2, #32
 80048a2:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	699b      	ldr	r3, [r3, #24]
 80048a8:	3b01      	subs	r3, #1
 80048aa:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	69db      	ldr	r3, [r3, #28]
 80048b0:	3b01      	subs	r3, #1
 80048b2:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80048b4:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a1b      	ldr	r3, [r3, #32]
 80048ba:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80048bc:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	695b      	ldr	r3, [r3, #20]
 80048c4:	3b01      	subs	r3, #1
 80048c6:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80048cc:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80048ce:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048d8:	d115      	bne.n	8004906 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048de:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e4:	3b01      	subs	r3, #1
 80048e6:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80048e8:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ee:	3b01      	subs	r3, #1
 80048f0:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80048f2:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fa:	3b01      	subs	r3, #1
 80048fc:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004902:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004904:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00a      	beq.n	8004924 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	430a      	orrs	r2, r1
 8004920:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800492c:	4413      	add	r3, r2
 800492e:	2b00      	cmp	r3, #0
 8004930:	d011      	beq.n	8004956 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800493a:	f023 0107 	bic.w	r1, r3, #7
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	3360      	adds	r3, #96	; 0x60
 8004946:	443b      	add	r3, r7
 8004948:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	430a      	orrs	r2, r1
 8004952:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495a:	2b00      	cmp	r3, #0
 800495c:	d011      	beq.n	8004982 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004966:	f023 0107 	bic.w	r1, r3, #7
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	3360      	adds	r3, #96	; 0x60
 8004972:	443b      	add	r3, r7
 8004974:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	430a      	orrs	r2, r1
 800497e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004986:	2b00      	cmp	r3, #0
 8004988:	d012      	beq.n	80049b0 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004992:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	3360      	adds	r3, #96	; 0x60
 800499e:	443b      	add	r3, r7
 80049a0:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80049a4:	011a      	lsls	r2, r3, #4
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	430a      	orrs	r2, r1
 80049ac:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d012      	beq.n	80049de <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80049c0:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	3360      	adds	r3, #96	; 0x60
 80049cc:	443b      	add	r3, r7
 80049ce:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80049d2:	021a      	lsls	r2, r3, #8
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	430a      	orrs	r2, r1
 80049da:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a11      	ldr	r2, [pc, #68]	; (8004a28 <HAL_FDCAN_Init+0x3b8>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d107      	bne.n	80049f8 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	689a      	ldr	r2, [r3, #8]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	f022 0203 	bic.w	r2, r2, #3
 80049f6:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f000 f80b 	bl	8004a2c <FDCAN_CalcultateRamBlockAddresses>
 8004a16:	4603      	mov	r3, r0
 8004a18:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8004a1c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3760      	adds	r7, #96	; 0x60
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	4000a000 	.word	0x4000a000

08004a2c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b085      	sub	sp, #20
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a38:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004a42:	4ba7      	ldr	r3, [pc, #668]	; (8004ce0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004a44:	4013      	ands	r3, r2
 8004a46:	68ba      	ldr	r2, [r7, #8]
 8004a48:	0091      	lsls	r1, r2, #2
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	6812      	ldr	r2, [r2, #0]
 8004a4e:	430b      	orrs	r3, r1
 8004a50:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a5c:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a64:	041a      	lsls	r2, r3, #16
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	430a      	orrs	r2, r1
 8004a6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a74:	68ba      	ldr	r2, [r7, #8]
 8004a76:	4413      	add	r3, r2
 8004a78:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004a82:	4b97      	ldr	r3, [pc, #604]	; (8004ce0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004a84:	4013      	ands	r3, r2
 8004a86:	68ba      	ldr	r2, [r7, #8]
 8004a88:	0091      	lsls	r1, r2, #2
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	6812      	ldr	r2, [r2, #0]
 8004a8e:	430b      	orrs	r3, r1
 8004a90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a9c:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aa4:	041a      	lsls	r2, r3, #16
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ab4:	005b      	lsls	r3, r3, #1
 8004ab6:	68ba      	ldr	r2, [r7, #8]
 8004ab8:	4413      	add	r3, r2
 8004aba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004ac4:	4b86      	ldr	r3, [pc, #536]	; (8004ce0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	68ba      	ldr	r2, [r7, #8]
 8004aca:	0091      	lsls	r1, r2, #2
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	6812      	ldr	r2, [r2, #0]
 8004ad0:	430b      	orrs	r3, r1
 8004ad2:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004ade:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae6:	041a      	lsls	r2, r3, #16
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	430a      	orrs	r2, r1
 8004aee:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004afa:	fb02 f303 	mul.w	r3, r2, r3
 8004afe:	68ba      	ldr	r2, [r7, #8]
 8004b00:	4413      	add	r3, r2
 8004b02:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004b0c:	4b74      	ldr	r3, [pc, #464]	; (8004ce0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004b0e:	4013      	ands	r3, r2
 8004b10:	68ba      	ldr	r2, [r7, #8]
 8004b12:	0091      	lsls	r1, r2, #2
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	6812      	ldr	r2, [r2, #0]
 8004b18:	430b      	orrs	r3, r1
 8004b1a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004b26:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b2e:	041a      	lsls	r2, r3, #16
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	430a      	orrs	r2, r1
 8004b36:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004b42:	fb02 f303 	mul.w	r3, r2, r3
 8004b46:	68ba      	ldr	r2, [r7, #8]
 8004b48:	4413      	add	r3, r2
 8004b4a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004b54:	4b62      	ldr	r3, [pc, #392]	; (8004ce0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004b56:	4013      	ands	r3, r2
 8004b58:	68ba      	ldr	r2, [r7, #8]
 8004b5a:	0091      	lsls	r1, r2, #2
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	6812      	ldr	r2, [r2, #0]
 8004b60:	430b      	orrs	r3, r1
 8004b62:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004b6e:	fb02 f303 	mul.w	r3, r2, r3
 8004b72:	68ba      	ldr	r2, [r7, #8]
 8004b74:	4413      	add	r3, r2
 8004b76:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8004b80:	4b57      	ldr	r3, [pc, #348]	; (8004ce0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004b82:	4013      	ands	r3, r2
 8004b84:	68ba      	ldr	r2, [r7, #8]
 8004b86:	0091      	lsls	r1, r2, #2
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	6812      	ldr	r2, [r2, #0]
 8004b8c:	430b      	orrs	r3, r1
 8004b8e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004b9a:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ba2:	041a      	lsls	r2, r3, #16
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	430a      	orrs	r2, r1
 8004baa:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bb2:	005b      	lsls	r3, r3, #1
 8004bb4:	68ba      	ldr	r2, [r7, #8]
 8004bb6:	4413      	add	r3, r2
 8004bb8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004bc2:	4b47      	ldr	r3, [pc, #284]	; (8004ce0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	68ba      	ldr	r2, [r7, #8]
 8004bc8:	0091      	lsls	r1, r2, #2
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	6812      	ldr	r2, [r2, #0]
 8004bce:	430b      	orrs	r3, r1
 8004bd0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004bdc:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004be4:	041a      	lsls	r2, r3, #16
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	430a      	orrs	r2, r1
 8004bec:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004bf8:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c00:	061a      	lsls	r2, r3, #24
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	430a      	orrs	r2, r1
 8004c08:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c10:	4b34      	ldr	r3, [pc, #208]	; (8004ce4 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8004c12:	4413      	add	r3, r2
 8004c14:	009a      	lsls	r2, r3, #2
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	441a      	add	r2, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c32:	00db      	lsls	r3, r3, #3
 8004c34:	441a      	add	r2, r3
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c42:	6879      	ldr	r1, [r7, #4]
 8004c44:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8004c46:	fb01 f303 	mul.w	r3, r1, r3
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	441a      	add	r2, r3
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c5a:	6879      	ldr	r1, [r7, #4]
 8004c5c:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8004c5e:	fb01 f303 	mul.w	r3, r1, r3
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	441a      	add	r2, r3
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c72:	6879      	ldr	r1, [r7, #4]
 8004c74:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8004c76:	fb01 f303 	mul.w	r3, r1, r3
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	441a      	add	r2, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c8e:	00db      	lsls	r3, r3, #3
 8004c90:	441a      	add	r2, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ca2:	6879      	ldr	r1, [r7, #4]
 8004ca4:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8004ca6:	fb01 f303 	mul.w	r3, r1, r3
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	441a      	add	r2, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cbe:	6879      	ldr	r1, [r7, #4]
 8004cc0:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8004cc2:	fb01 f303 	mul.w	r3, r1, r3
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	441a      	add	r2, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cd6:	4a04      	ldr	r2, [pc, #16]	; (8004ce8 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d915      	bls.n	8004d08 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8004cdc:	e006      	b.n	8004cec <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8004cde:	bf00      	nop
 8004ce0:	ffff0003 	.word	0xffff0003
 8004ce4:	10002b00 	.word	0x10002b00
 8004ce8:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004cf2:	f043 0220 	orr.w	r2, r3, #32
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2203      	movs	r2, #3
 8004d00:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e010      	b.n	8004d2a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d0c:	60fb      	str	r3, [r7, #12]
 8004d0e:	e005      	b.n	8004d1c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2200      	movs	r2, #0
 8004d14:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	3304      	adds	r3, #4
 8004d1a:	60fb      	str	r3, [r7, #12]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d22:	68fa      	ldr	r2, [r7, #12]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d3f3      	bcc.n	8004d10 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3714      	adds	r7, #20
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr
 8004d36:	bf00      	nop

08004d38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b089      	sub	sp, #36	; 0x24
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004d42:	2300      	movs	r3, #0
 8004d44:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004d46:	4b89      	ldr	r3, [pc, #548]	; (8004f6c <HAL_GPIO_Init+0x234>)
 8004d48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004d4a:	e194      	b.n	8005076 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	2101      	movs	r1, #1
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	fa01 f303 	lsl.w	r3, r1, r3
 8004d58:	4013      	ands	r3, r2
 8004d5a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	f000 8186 	beq.w	8005070 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	f003 0303 	and.w	r3, r3, #3
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d005      	beq.n	8004d7c <HAL_GPIO_Init+0x44>
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	f003 0303 	and.w	r3, r3, #3
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d130      	bne.n	8004dde <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	005b      	lsls	r3, r3, #1
 8004d86:	2203      	movs	r2, #3
 8004d88:	fa02 f303 	lsl.w	r3, r2, r3
 8004d8c:	43db      	mvns	r3, r3
 8004d8e:	69ba      	ldr	r2, [r7, #24]
 8004d90:	4013      	ands	r3, r2
 8004d92:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	68da      	ldr	r2, [r3, #12]
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	005b      	lsls	r3, r3, #1
 8004d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004da0:	69ba      	ldr	r2, [r7, #24]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	69ba      	ldr	r2, [r7, #24]
 8004daa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004db2:	2201      	movs	r2, #1
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dba:	43db      	mvns	r3, r3
 8004dbc:	69ba      	ldr	r2, [r7, #24]
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	091b      	lsrs	r3, r3, #4
 8004dc8:	f003 0201 	and.w	r2, r3, #1
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd2:	69ba      	ldr	r2, [r7, #24]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	69ba      	ldr	r2, [r7, #24]
 8004ddc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	f003 0303 	and.w	r3, r3, #3
 8004de6:	2b03      	cmp	r3, #3
 8004de8:	d017      	beq.n	8004e1a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	005b      	lsls	r3, r3, #1
 8004df4:	2203      	movs	r2, #3
 8004df6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfa:	43db      	mvns	r3, r3
 8004dfc:	69ba      	ldr	r2, [r7, #24]
 8004dfe:	4013      	ands	r3, r2
 8004e00:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	689a      	ldr	r2, [r3, #8]
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	005b      	lsls	r3, r3, #1
 8004e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0e:	69ba      	ldr	r2, [r7, #24]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	69ba      	ldr	r2, [r7, #24]
 8004e18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	f003 0303 	and.w	r3, r3, #3
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	d123      	bne.n	8004e6e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	08da      	lsrs	r2, r3, #3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	3208      	adds	r2, #8
 8004e2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	f003 0307 	and.w	r3, r3, #7
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	220f      	movs	r2, #15
 8004e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e42:	43db      	mvns	r3, r3
 8004e44:	69ba      	ldr	r2, [r7, #24]
 8004e46:	4013      	ands	r3, r2
 8004e48:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	691a      	ldr	r2, [r3, #16]
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	f003 0307 	and.w	r3, r3, #7
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	fa02 f303 	lsl.w	r3, r2, r3
 8004e5a:	69ba      	ldr	r2, [r7, #24]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	08da      	lsrs	r2, r3, #3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	3208      	adds	r2, #8
 8004e68:	69b9      	ldr	r1, [r7, #24]
 8004e6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	005b      	lsls	r3, r3, #1
 8004e78:	2203      	movs	r2, #3
 8004e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7e:	43db      	mvns	r3, r3
 8004e80:	69ba      	ldr	r2, [r7, #24]
 8004e82:	4013      	ands	r3, r2
 8004e84:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	f003 0203 	and.w	r2, r3, #3
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	005b      	lsls	r3, r3, #1
 8004e92:	fa02 f303 	lsl.w	r3, r2, r3
 8004e96:	69ba      	ldr	r2, [r7, #24]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	69ba      	ldr	r2, [r7, #24]
 8004ea0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	f000 80e0 	beq.w	8005070 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004eb0:	4b2f      	ldr	r3, [pc, #188]	; (8004f70 <HAL_GPIO_Init+0x238>)
 8004eb2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004eb6:	4a2e      	ldr	r2, [pc, #184]	; (8004f70 <HAL_GPIO_Init+0x238>)
 8004eb8:	f043 0302 	orr.w	r3, r3, #2
 8004ebc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004ec0:	4b2b      	ldr	r3, [pc, #172]	; (8004f70 <HAL_GPIO_Init+0x238>)
 8004ec2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004ec6:	f003 0302 	and.w	r3, r3, #2
 8004eca:	60fb      	str	r3, [r7, #12]
 8004ecc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ece:	4a29      	ldr	r2, [pc, #164]	; (8004f74 <HAL_GPIO_Init+0x23c>)
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	089b      	lsrs	r3, r3, #2
 8004ed4:	3302      	adds	r3, #2
 8004ed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	f003 0303 	and.w	r3, r3, #3
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	220f      	movs	r2, #15
 8004ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eea:	43db      	mvns	r3, r3
 8004eec:	69ba      	ldr	r2, [r7, #24]
 8004eee:	4013      	ands	r3, r2
 8004ef0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a20      	ldr	r2, [pc, #128]	; (8004f78 <HAL_GPIO_Init+0x240>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d052      	beq.n	8004fa0 <HAL_GPIO_Init+0x268>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a1f      	ldr	r2, [pc, #124]	; (8004f7c <HAL_GPIO_Init+0x244>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d031      	beq.n	8004f66 <HAL_GPIO_Init+0x22e>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a1e      	ldr	r2, [pc, #120]	; (8004f80 <HAL_GPIO_Init+0x248>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d02b      	beq.n	8004f62 <HAL_GPIO_Init+0x22a>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a1d      	ldr	r2, [pc, #116]	; (8004f84 <HAL_GPIO_Init+0x24c>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d025      	beq.n	8004f5e <HAL_GPIO_Init+0x226>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a1c      	ldr	r2, [pc, #112]	; (8004f88 <HAL_GPIO_Init+0x250>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d01f      	beq.n	8004f5a <HAL_GPIO_Init+0x222>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a1b      	ldr	r2, [pc, #108]	; (8004f8c <HAL_GPIO_Init+0x254>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d019      	beq.n	8004f56 <HAL_GPIO_Init+0x21e>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a1a      	ldr	r2, [pc, #104]	; (8004f90 <HAL_GPIO_Init+0x258>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d013      	beq.n	8004f52 <HAL_GPIO_Init+0x21a>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a19      	ldr	r2, [pc, #100]	; (8004f94 <HAL_GPIO_Init+0x25c>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d00d      	beq.n	8004f4e <HAL_GPIO_Init+0x216>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a18      	ldr	r2, [pc, #96]	; (8004f98 <HAL_GPIO_Init+0x260>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d007      	beq.n	8004f4a <HAL_GPIO_Init+0x212>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a17      	ldr	r2, [pc, #92]	; (8004f9c <HAL_GPIO_Init+0x264>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d101      	bne.n	8004f46 <HAL_GPIO_Init+0x20e>
 8004f42:	2309      	movs	r3, #9
 8004f44:	e02d      	b.n	8004fa2 <HAL_GPIO_Init+0x26a>
 8004f46:	230a      	movs	r3, #10
 8004f48:	e02b      	b.n	8004fa2 <HAL_GPIO_Init+0x26a>
 8004f4a:	2308      	movs	r3, #8
 8004f4c:	e029      	b.n	8004fa2 <HAL_GPIO_Init+0x26a>
 8004f4e:	2307      	movs	r3, #7
 8004f50:	e027      	b.n	8004fa2 <HAL_GPIO_Init+0x26a>
 8004f52:	2306      	movs	r3, #6
 8004f54:	e025      	b.n	8004fa2 <HAL_GPIO_Init+0x26a>
 8004f56:	2305      	movs	r3, #5
 8004f58:	e023      	b.n	8004fa2 <HAL_GPIO_Init+0x26a>
 8004f5a:	2304      	movs	r3, #4
 8004f5c:	e021      	b.n	8004fa2 <HAL_GPIO_Init+0x26a>
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e01f      	b.n	8004fa2 <HAL_GPIO_Init+0x26a>
 8004f62:	2302      	movs	r3, #2
 8004f64:	e01d      	b.n	8004fa2 <HAL_GPIO_Init+0x26a>
 8004f66:	2301      	movs	r3, #1
 8004f68:	e01b      	b.n	8004fa2 <HAL_GPIO_Init+0x26a>
 8004f6a:	bf00      	nop
 8004f6c:	58000080 	.word	0x58000080
 8004f70:	58024400 	.word	0x58024400
 8004f74:	58000400 	.word	0x58000400
 8004f78:	58020000 	.word	0x58020000
 8004f7c:	58020400 	.word	0x58020400
 8004f80:	58020800 	.word	0x58020800
 8004f84:	58020c00 	.word	0x58020c00
 8004f88:	58021000 	.word	0x58021000
 8004f8c:	58021400 	.word	0x58021400
 8004f90:	58021800 	.word	0x58021800
 8004f94:	58021c00 	.word	0x58021c00
 8004f98:	58022000 	.word	0x58022000
 8004f9c:	58022400 	.word	0x58022400
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	69fa      	ldr	r2, [r7, #28]
 8004fa4:	f002 0203 	and.w	r2, r2, #3
 8004fa8:	0092      	lsls	r2, r2, #2
 8004faa:	4093      	lsls	r3, r2
 8004fac:	69ba      	ldr	r2, [r7, #24]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004fb2:	4938      	ldr	r1, [pc, #224]	; (8005094 <HAL_GPIO_Init+0x35c>)
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	089b      	lsrs	r3, r3, #2
 8004fb8:	3302      	adds	r3, #2
 8004fba:	69ba      	ldr	r2, [r7, #24]
 8004fbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004fc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	43db      	mvns	r3, r3
 8004fcc:	69ba      	ldr	r2, [r7, #24]
 8004fce:	4013      	ands	r3, r2
 8004fd0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d003      	beq.n	8004fe6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004fde:	69ba      	ldr	r2, [r7, #24]
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004fe6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004fee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	43db      	mvns	r3, r3
 8004ffa:	69ba      	ldr	r2, [r7, #24]
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005008:	2b00      	cmp	r3, #0
 800500a:	d003      	beq.n	8005014 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800500c:	69ba      	ldr	r2, [r7, #24]
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	4313      	orrs	r3, r2
 8005012:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005014:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	43db      	mvns	r3, r3
 8005026:	69ba      	ldr	r2, [r7, #24]
 8005028:	4013      	ands	r3, r2
 800502a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005034:	2b00      	cmp	r3, #0
 8005036:	d003      	beq.n	8005040 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005038:	69ba      	ldr	r2, [r7, #24]
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	4313      	orrs	r3, r2
 800503e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	69ba      	ldr	r2, [r7, #24]
 8005044:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	43db      	mvns	r3, r3
 8005050:	69ba      	ldr	r2, [r7, #24]
 8005052:	4013      	ands	r3, r2
 8005054:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800505e:	2b00      	cmp	r3, #0
 8005060:	d003      	beq.n	800506a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005062:	69ba      	ldr	r2, [r7, #24]
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	4313      	orrs	r3, r2
 8005068:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	69ba      	ldr	r2, [r7, #24]
 800506e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005070:	69fb      	ldr	r3, [r7, #28]
 8005072:	3301      	adds	r3, #1
 8005074:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	fa22 f303 	lsr.w	r3, r2, r3
 8005080:	2b00      	cmp	r3, #0
 8005082:	f47f ae63 	bne.w	8004d4c <HAL_GPIO_Init+0x14>
  }
}
 8005086:	bf00      	nop
 8005088:	bf00      	nop
 800508a:	3724      	adds	r7, #36	; 0x24
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr
 8005094:	58000400 	.word	0x58000400

08005098 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005098:	b480      	push	{r7}
 800509a:	b083      	sub	sp, #12
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	460b      	mov	r3, r1
 80050a2:	807b      	strh	r3, [r7, #2]
 80050a4:	4613      	mov	r3, r2
 80050a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80050a8:	787b      	ldrb	r3, [r7, #1]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d003      	beq.n	80050b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80050ae:	887a      	ldrh	r2, [r7, #2]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80050b4:	e003      	b.n	80050be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80050b6:	887b      	ldrh	r3, [r7, #2]
 80050b8:	041a      	lsls	r2, r3, #16
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	619a      	str	r2, [r3, #24]
}
 80050be:	bf00      	nop
 80050c0:	370c      	adds	r7, #12
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr
	...

080050cc <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d101      	bne.n	80050de <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e0bf      	b.n	800525e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d106      	bne.n	80050f8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f7fc ff02 	bl	8001efc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2202      	movs	r2, #2
 80050fc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	699a      	ldr	r2, [r3, #24]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800510e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	6999      	ldr	r1, [r3, #24]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	685a      	ldr	r2, [r3, #4]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005124:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	430a      	orrs	r2, r1
 8005132:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	6899      	ldr	r1, [r3, #8]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	4b4a      	ldr	r3, [pc, #296]	; (8005268 <HAL_LTDC_Init+0x19c>)
 8005140:	400b      	ands	r3, r1
 8005142:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	695b      	ldr	r3, [r3, #20]
 8005148:	041b      	lsls	r3, r3, #16
 800514a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	6899      	ldr	r1, [r3, #8]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	699a      	ldr	r2, [r3, #24]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	431a      	orrs	r2, r3
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	430a      	orrs	r2, r1
 8005160:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68d9      	ldr	r1, [r3, #12]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	4b3e      	ldr	r3, [pc, #248]	; (8005268 <HAL_LTDC_Init+0x19c>)
 800516e:	400b      	ands	r3, r1
 8005170:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	69db      	ldr	r3, [r3, #28]
 8005176:	041b      	lsls	r3, r3, #16
 8005178:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68d9      	ldr	r1, [r3, #12]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a1a      	ldr	r2, [r3, #32]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	431a      	orrs	r2, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	430a      	orrs	r2, r1
 800518e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	6919      	ldr	r1, [r3, #16]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	4b33      	ldr	r3, [pc, #204]	; (8005268 <HAL_LTDC_Init+0x19c>)
 800519c:	400b      	ands	r3, r1
 800519e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a4:	041b      	lsls	r3, r3, #16
 80051a6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	6919      	ldr	r1, [r3, #16]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	431a      	orrs	r2, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	430a      	orrs	r2, r1
 80051bc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	6959      	ldr	r1, [r3, #20]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	4b27      	ldr	r3, [pc, #156]	; (8005268 <HAL_LTDC_Init+0x19c>)
 80051ca:	400b      	ands	r3, r1
 80051cc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d2:	041b      	lsls	r3, r3, #16
 80051d4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	6959      	ldr	r1, [r3, #20]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	431a      	orrs	r2, r3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	430a      	orrs	r2, r1
 80051ea:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80051f2:	021b      	lsls	r3, r3, #8
 80051f4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80051fc:	041b      	lsls	r3, r3, #16
 80051fe:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800520e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005216:	68ba      	ldr	r2, [r7, #8]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	4313      	orrs	r3, r2
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005222:	431a      	orrs	r2, r3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	430a      	orrs	r2, r1
 800522a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f042 0206 	orr.w	r2, r2, #6
 800523a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	699a      	ldr	r2, [r3, #24]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f042 0201 	orr.w	r2, r2, #1
 800524a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3710      	adds	r7, #16
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	f000f800 	.word	0xf000f800

0800526c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800526c:	b5b0      	push	{r4, r5, r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800527e:	2b01      	cmp	r3, #1
 8005280:	d101      	bne.n	8005286 <HAL_LTDC_ConfigLayer+0x1a>
 8005282:	2302      	movs	r3, #2
 8005284:	e02c      	b.n	80052e0 <HAL_LTDC_ConfigLayer+0x74>
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2201      	movs	r2, #1
 800528a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2202      	movs	r2, #2
 8005292:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2134      	movs	r1, #52	; 0x34
 800529c:	fb01 f303 	mul.w	r3, r1, r3
 80052a0:	4413      	add	r3, r2
 80052a2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	4614      	mov	r4, r2
 80052aa:	461d      	mov	r5, r3
 80052ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80052ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80052b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80052b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80052b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80052b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80052b8:	682b      	ldr	r3, [r5, #0]
 80052ba:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	68b9      	ldr	r1, [r7, #8]
 80052c0:	68f8      	ldr	r0, [r7, #12]
 80052c2:	f000 f811 	bl	80052e8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	2201      	movs	r2, #1
 80052cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2201      	movs	r2, #1
 80052d2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80052de:	2300      	movs	r3, #0
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3710      	adds	r7, #16
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bdb0      	pop	{r4, r5, r7, pc}

080052e8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b089      	sub	sp, #36	; 0x24
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	60b9      	str	r1, [r7, #8]
 80052f2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	685a      	ldr	r2, [r3, #4]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	0c1b      	lsrs	r3, r3, #16
 8005300:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005304:	4413      	add	r3, r2
 8005306:	041b      	lsls	r3, r3, #16
 8005308:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	461a      	mov	r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	01db      	lsls	r3, r3, #7
 8005314:	4413      	add	r3, r2
 8005316:	3384      	adds	r3, #132	; 0x84
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	6812      	ldr	r2, [r2, #0]
 800531e:	4611      	mov	r1, r2
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	01d2      	lsls	r2, r2, #7
 8005324:	440a      	add	r2, r1
 8005326:	3284      	adds	r2, #132	; 0x84
 8005328:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800532c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	0c1b      	lsrs	r3, r3, #16
 800533a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800533e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005340:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4619      	mov	r1, r3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	01db      	lsls	r3, r3, #7
 800534c:	440b      	add	r3, r1
 800534e:	3384      	adds	r3, #132	; 0x84
 8005350:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005356:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	68da      	ldr	r2, [r3, #12]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005366:	4413      	add	r3, r2
 8005368:	041b      	lsls	r3, r3, #16
 800536a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	461a      	mov	r2, r3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	01db      	lsls	r3, r3, #7
 8005376:	4413      	add	r3, r2
 8005378:	3384      	adds	r3, #132	; 0x84
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	6812      	ldr	r2, [r2, #0]
 8005380:	4611      	mov	r1, r2
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	01d2      	lsls	r2, r2, #7
 8005386:	440a      	add	r2, r1
 8005388:	3284      	adds	r2, #132	; 0x84
 800538a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800538e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	689a      	ldr	r2, [r3, #8]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800539e:	4413      	add	r3, r2
 80053a0:	1c5a      	adds	r2, r3, #1
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4619      	mov	r1, r3
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	01db      	lsls	r3, r3, #7
 80053ac:	440b      	add	r3, r1
 80053ae:	3384      	adds	r3, #132	; 0x84
 80053b0:	4619      	mov	r1, r3
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	461a      	mov	r2, r3
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	01db      	lsls	r3, r3, #7
 80053c2:	4413      	add	r3, r2
 80053c4:	3384      	adds	r3, #132	; 0x84
 80053c6:	691b      	ldr	r3, [r3, #16]
 80053c8:	68fa      	ldr	r2, [r7, #12]
 80053ca:	6812      	ldr	r2, [r2, #0]
 80053cc:	4611      	mov	r1, r2
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	01d2      	lsls	r2, r2, #7
 80053d2:	440a      	add	r2, r1
 80053d4:	3284      	adds	r2, #132	; 0x84
 80053d6:	f023 0307 	bic.w	r3, r3, #7
 80053da:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	461a      	mov	r2, r3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	01db      	lsls	r3, r3, #7
 80053e6:	4413      	add	r3, r2
 80053e8:	3384      	adds	r3, #132	; 0x84
 80053ea:	461a      	mov	r2, r3
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80053f8:	021b      	lsls	r3, r3, #8
 80053fa:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005402:	041b      	lsls	r3, r3, #16
 8005404:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	699b      	ldr	r3, [r3, #24]
 800540a:	061b      	lsls	r3, r3, #24
 800540c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	461a      	mov	r2, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	01db      	lsls	r3, r3, #7
 8005418:	4413      	add	r3, r2
 800541a:	3384      	adds	r3, #132	; 0x84
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	461a      	mov	r2, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	01db      	lsls	r3, r3, #7
 8005428:	4413      	add	r3, r2
 800542a:	3384      	adds	r3, #132	; 0x84
 800542c:	461a      	mov	r2, r3
 800542e:	2300      	movs	r3, #0
 8005430:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005438:	461a      	mov	r2, r3
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	431a      	orrs	r2, r3
 800543e:	69bb      	ldr	r3, [r7, #24]
 8005440:	431a      	orrs	r2, r3
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4619      	mov	r1, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	01db      	lsls	r3, r3, #7
 800544c:	440b      	add	r3, r1
 800544e:	3384      	adds	r3, #132	; 0x84
 8005450:	4619      	mov	r1, r3
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	4313      	orrs	r3, r2
 8005456:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	461a      	mov	r2, r3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	01db      	lsls	r3, r3, #7
 8005462:	4413      	add	r3, r2
 8005464:	3384      	adds	r3, #132	; 0x84
 8005466:	695b      	ldr	r3, [r3, #20]
 8005468:	68fa      	ldr	r2, [r7, #12]
 800546a:	6812      	ldr	r2, [r2, #0]
 800546c:	4611      	mov	r1, r2
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	01d2      	lsls	r2, r2, #7
 8005472:	440a      	add	r2, r1
 8005474:	3284      	adds	r2, #132	; 0x84
 8005476:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800547a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	461a      	mov	r2, r3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	01db      	lsls	r3, r3, #7
 8005486:	4413      	add	r3, r2
 8005488:	3384      	adds	r3, #132	; 0x84
 800548a:	461a      	mov	r2, r3
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	695b      	ldr	r3, [r3, #20]
 8005490:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	461a      	mov	r2, r3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	01db      	lsls	r3, r3, #7
 800549c:	4413      	add	r3, r2
 800549e:	3384      	adds	r3, #132	; 0x84
 80054a0:	69da      	ldr	r2, [r3, #28]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4619      	mov	r1, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	01db      	lsls	r3, r3, #7
 80054ac:	440b      	add	r3, r1
 80054ae:	3384      	adds	r3, #132	; 0x84
 80054b0:	4619      	mov	r1, r3
 80054b2:	4b58      	ldr	r3, [pc, #352]	; (8005614 <LTDC_SetConfig+0x32c>)
 80054b4:	4013      	ands	r3, r2
 80054b6:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	69da      	ldr	r2, [r3, #28]
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	6a1b      	ldr	r3, [r3, #32]
 80054c0:	68f9      	ldr	r1, [r7, #12]
 80054c2:	6809      	ldr	r1, [r1, #0]
 80054c4:	4608      	mov	r0, r1
 80054c6:	6879      	ldr	r1, [r7, #4]
 80054c8:	01c9      	lsls	r1, r1, #7
 80054ca:	4401      	add	r1, r0
 80054cc:	3184      	adds	r1, #132	; 0x84
 80054ce:	4313      	orrs	r3, r2
 80054d0:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	461a      	mov	r2, r3
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	01db      	lsls	r3, r3, #7
 80054dc:	4413      	add	r3, r2
 80054de:	3384      	adds	r3, #132	; 0x84
 80054e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	461a      	mov	r2, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	01db      	lsls	r3, r3, #7
 80054ec:	4413      	add	r3, r2
 80054ee:	3384      	adds	r3, #132	; 0x84
 80054f0:	461a      	mov	r2, r3
 80054f2:	2300      	movs	r3, #0
 80054f4:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	461a      	mov	r2, r3
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	01db      	lsls	r3, r3, #7
 8005500:	4413      	add	r3, r2
 8005502:	3384      	adds	r3, #132	; 0x84
 8005504:	461a      	mov	r2, r3
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	691b      	ldr	r3, [r3, #16]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d102      	bne.n	800551a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8005514:	2304      	movs	r3, #4
 8005516:	61fb      	str	r3, [r7, #28]
 8005518:	e01b      	b.n	8005552 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	2b01      	cmp	r3, #1
 8005520:	d102      	bne.n	8005528 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8005522:	2303      	movs	r3, #3
 8005524:	61fb      	str	r3, [r7, #28]
 8005526:	e014      	b.n	8005552 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	691b      	ldr	r3, [r3, #16]
 800552c:	2b04      	cmp	r3, #4
 800552e:	d00b      	beq.n	8005548 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005534:	2b02      	cmp	r3, #2
 8005536:	d007      	beq.n	8005548 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800553c:	2b03      	cmp	r3, #3
 800553e:	d003      	beq.n	8005548 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005544:	2b07      	cmp	r3, #7
 8005546:	d102      	bne.n	800554e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8005548:	2302      	movs	r3, #2
 800554a:	61fb      	str	r3, [r7, #28]
 800554c:	e001      	b.n	8005552 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800554e:	2301      	movs	r3, #1
 8005550:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	461a      	mov	r2, r3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	01db      	lsls	r3, r3, #7
 800555c:	4413      	add	r3, r2
 800555e:	3384      	adds	r3, #132	; 0x84
 8005560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005562:	68fa      	ldr	r2, [r7, #12]
 8005564:	6812      	ldr	r2, [r2, #0]
 8005566:	4611      	mov	r1, r2
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	01d2      	lsls	r2, r2, #7
 800556c:	440a      	add	r2, r1
 800556e:	3284      	adds	r2, #132	; 0x84
 8005570:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8005574:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800557a:	69fa      	ldr	r2, [r7, #28]
 800557c:	fb02 f303 	mul.w	r3, r2, r3
 8005580:	041a      	lsls	r2, r3, #16
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	6859      	ldr	r1, [r3, #4]
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	1acb      	subs	r3, r1, r3
 800558c:	69f9      	ldr	r1, [r7, #28]
 800558e:	fb01 f303 	mul.w	r3, r1, r3
 8005592:	3307      	adds	r3, #7
 8005594:	68f9      	ldr	r1, [r7, #12]
 8005596:	6809      	ldr	r1, [r1, #0]
 8005598:	4608      	mov	r0, r1
 800559a:	6879      	ldr	r1, [r7, #4]
 800559c:	01c9      	lsls	r1, r1, #7
 800559e:	4401      	add	r1, r0
 80055a0:	3184      	adds	r1, #132	; 0x84
 80055a2:	4313      	orrs	r3, r2
 80055a4:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	461a      	mov	r2, r3
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	01db      	lsls	r3, r3, #7
 80055b0:	4413      	add	r3, r2
 80055b2:	3384      	adds	r3, #132	; 0x84
 80055b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4619      	mov	r1, r3
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	01db      	lsls	r3, r3, #7
 80055c0:	440b      	add	r3, r1
 80055c2:	3384      	adds	r3, #132	; 0x84
 80055c4:	4619      	mov	r1, r3
 80055c6:	4b14      	ldr	r3, [pc, #80]	; (8005618 <LTDC_SetConfig+0x330>)
 80055c8:	4013      	ands	r3, r2
 80055ca:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	461a      	mov	r2, r3
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	01db      	lsls	r3, r3, #7
 80055d6:	4413      	add	r3, r2
 80055d8:	3384      	adds	r3, #132	; 0x84
 80055da:	461a      	mov	r2, r3
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	461a      	mov	r2, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	01db      	lsls	r3, r3, #7
 80055ec:	4413      	add	r3, r2
 80055ee:	3384      	adds	r3, #132	; 0x84
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	6812      	ldr	r2, [r2, #0]
 80055f6:	4611      	mov	r1, r2
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	01d2      	lsls	r2, r2, #7
 80055fc:	440a      	add	r2, r1
 80055fe:	3284      	adds	r2, #132	; 0x84
 8005600:	f043 0301 	orr.w	r3, r3, #1
 8005604:	6013      	str	r3, [r2, #0]
}
 8005606:	bf00      	nop
 8005608:	3724      	adds	r7, #36	; 0x24
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr
 8005612:	bf00      	nop
 8005614:	fffff8f8 	.word	0xfffff8f8
 8005618:	fffff800 	.word	0xfffff800

0800561c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800561c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800561e:	b08f      	sub	sp, #60	; 0x3c
 8005620:	af0a      	add	r7, sp, #40	; 0x28
 8005622:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d101      	bne.n	800562e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e116      	b.n	800585c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800563a:	b2db      	uxtb	r3, r3
 800563c:	2b00      	cmp	r3, #0
 800563e:	d106      	bne.n	800564e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f7fc fecd 	bl	80023e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2203      	movs	r2, #3
 8005652:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800565a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800565e:	2b00      	cmp	r3, #0
 8005660:	d102      	bne.n	8005668 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4618      	mov	r0, r3
 800566e:	f006 f951 	bl	800b914 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	603b      	str	r3, [r7, #0]
 8005678:	687e      	ldr	r6, [r7, #4]
 800567a:	466d      	mov	r5, sp
 800567c:	f106 0410 	add.w	r4, r6, #16
 8005680:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005682:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005684:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005686:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005688:	e894 0003 	ldmia.w	r4, {r0, r1}
 800568c:	e885 0003 	stmia.w	r5, {r0, r1}
 8005690:	1d33      	adds	r3, r6, #4
 8005692:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005694:	6838      	ldr	r0, [r7, #0]
 8005696:	f006 f8cf 	bl	800b838 <USB_CoreInit>
 800569a:	4603      	mov	r3, r0
 800569c:	2b00      	cmp	r3, #0
 800569e:	d005      	beq.n	80056ac <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2202      	movs	r2, #2
 80056a4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e0d7      	b.n	800585c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2100      	movs	r1, #0
 80056b2:	4618      	mov	r0, r3
 80056b4:	f006 f93f 	bl	800b936 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056b8:	2300      	movs	r3, #0
 80056ba:	73fb      	strb	r3, [r7, #15]
 80056bc:	e04a      	b.n	8005754 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80056be:	7bfa      	ldrb	r2, [r7, #15]
 80056c0:	6879      	ldr	r1, [r7, #4]
 80056c2:	4613      	mov	r3, r2
 80056c4:	00db      	lsls	r3, r3, #3
 80056c6:	4413      	add	r3, r2
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	440b      	add	r3, r1
 80056cc:	333d      	adds	r3, #61	; 0x3d
 80056ce:	2201      	movs	r2, #1
 80056d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80056d2:	7bfa      	ldrb	r2, [r7, #15]
 80056d4:	6879      	ldr	r1, [r7, #4]
 80056d6:	4613      	mov	r3, r2
 80056d8:	00db      	lsls	r3, r3, #3
 80056da:	4413      	add	r3, r2
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	440b      	add	r3, r1
 80056e0:	333c      	adds	r3, #60	; 0x3c
 80056e2:	7bfa      	ldrb	r2, [r7, #15]
 80056e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80056e6:	7bfa      	ldrb	r2, [r7, #15]
 80056e8:	7bfb      	ldrb	r3, [r7, #15]
 80056ea:	b298      	uxth	r0, r3
 80056ec:	6879      	ldr	r1, [r7, #4]
 80056ee:	4613      	mov	r3, r2
 80056f0:	00db      	lsls	r3, r3, #3
 80056f2:	4413      	add	r3, r2
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	440b      	add	r3, r1
 80056f8:	3356      	adds	r3, #86	; 0x56
 80056fa:	4602      	mov	r2, r0
 80056fc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80056fe:	7bfa      	ldrb	r2, [r7, #15]
 8005700:	6879      	ldr	r1, [r7, #4]
 8005702:	4613      	mov	r3, r2
 8005704:	00db      	lsls	r3, r3, #3
 8005706:	4413      	add	r3, r2
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	440b      	add	r3, r1
 800570c:	3340      	adds	r3, #64	; 0x40
 800570e:	2200      	movs	r2, #0
 8005710:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005712:	7bfa      	ldrb	r2, [r7, #15]
 8005714:	6879      	ldr	r1, [r7, #4]
 8005716:	4613      	mov	r3, r2
 8005718:	00db      	lsls	r3, r3, #3
 800571a:	4413      	add	r3, r2
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	440b      	add	r3, r1
 8005720:	3344      	adds	r3, #68	; 0x44
 8005722:	2200      	movs	r2, #0
 8005724:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005726:	7bfa      	ldrb	r2, [r7, #15]
 8005728:	6879      	ldr	r1, [r7, #4]
 800572a:	4613      	mov	r3, r2
 800572c:	00db      	lsls	r3, r3, #3
 800572e:	4413      	add	r3, r2
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	440b      	add	r3, r1
 8005734:	3348      	adds	r3, #72	; 0x48
 8005736:	2200      	movs	r2, #0
 8005738:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800573a:	7bfa      	ldrb	r2, [r7, #15]
 800573c:	6879      	ldr	r1, [r7, #4]
 800573e:	4613      	mov	r3, r2
 8005740:	00db      	lsls	r3, r3, #3
 8005742:	4413      	add	r3, r2
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	440b      	add	r3, r1
 8005748:	334c      	adds	r3, #76	; 0x4c
 800574a:	2200      	movs	r2, #0
 800574c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800574e:	7bfb      	ldrb	r3, [r7, #15]
 8005750:	3301      	adds	r3, #1
 8005752:	73fb      	strb	r3, [r7, #15]
 8005754:	7bfa      	ldrb	r2, [r7, #15]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	429a      	cmp	r2, r3
 800575c:	d3af      	bcc.n	80056be <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800575e:	2300      	movs	r3, #0
 8005760:	73fb      	strb	r3, [r7, #15]
 8005762:	e044      	b.n	80057ee <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005764:	7bfa      	ldrb	r2, [r7, #15]
 8005766:	6879      	ldr	r1, [r7, #4]
 8005768:	4613      	mov	r3, r2
 800576a:	00db      	lsls	r3, r3, #3
 800576c:	4413      	add	r3, r2
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	440b      	add	r3, r1
 8005772:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005776:	2200      	movs	r2, #0
 8005778:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800577a:	7bfa      	ldrb	r2, [r7, #15]
 800577c:	6879      	ldr	r1, [r7, #4]
 800577e:	4613      	mov	r3, r2
 8005780:	00db      	lsls	r3, r3, #3
 8005782:	4413      	add	r3, r2
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	440b      	add	r3, r1
 8005788:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800578c:	7bfa      	ldrb	r2, [r7, #15]
 800578e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005790:	7bfa      	ldrb	r2, [r7, #15]
 8005792:	6879      	ldr	r1, [r7, #4]
 8005794:	4613      	mov	r3, r2
 8005796:	00db      	lsls	r3, r3, #3
 8005798:	4413      	add	r3, r2
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	440b      	add	r3, r1
 800579e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80057a2:	2200      	movs	r2, #0
 80057a4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80057a6:	7bfa      	ldrb	r2, [r7, #15]
 80057a8:	6879      	ldr	r1, [r7, #4]
 80057aa:	4613      	mov	r3, r2
 80057ac:	00db      	lsls	r3, r3, #3
 80057ae:	4413      	add	r3, r2
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	440b      	add	r3, r1
 80057b4:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80057b8:	2200      	movs	r2, #0
 80057ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80057bc:	7bfa      	ldrb	r2, [r7, #15]
 80057be:	6879      	ldr	r1, [r7, #4]
 80057c0:	4613      	mov	r3, r2
 80057c2:	00db      	lsls	r3, r3, #3
 80057c4:	4413      	add	r3, r2
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	440b      	add	r3, r1
 80057ca:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80057ce:	2200      	movs	r2, #0
 80057d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80057d2:	7bfa      	ldrb	r2, [r7, #15]
 80057d4:	6879      	ldr	r1, [r7, #4]
 80057d6:	4613      	mov	r3, r2
 80057d8:	00db      	lsls	r3, r3, #3
 80057da:	4413      	add	r3, r2
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	440b      	add	r3, r1
 80057e0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80057e4:	2200      	movs	r2, #0
 80057e6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057e8:	7bfb      	ldrb	r3, [r7, #15]
 80057ea:	3301      	adds	r3, #1
 80057ec:	73fb      	strb	r3, [r7, #15]
 80057ee:	7bfa      	ldrb	r2, [r7, #15]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d3b5      	bcc.n	8005764 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	603b      	str	r3, [r7, #0]
 80057fe:	687e      	ldr	r6, [r7, #4]
 8005800:	466d      	mov	r5, sp
 8005802:	f106 0410 	add.w	r4, r6, #16
 8005806:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005808:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800580a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800580c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800580e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005812:	e885 0003 	stmia.w	r5, {r0, r1}
 8005816:	1d33      	adds	r3, r6, #4
 8005818:	cb0e      	ldmia	r3, {r1, r2, r3}
 800581a:	6838      	ldr	r0, [r7, #0]
 800581c:	f006 f8d8 	bl	800b9d0 <USB_DevInit>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d005      	beq.n	8005832 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2202      	movs	r2, #2
 800582a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e014      	b.n	800585c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2201      	movs	r2, #1
 800583e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005846:	2b01      	cmp	r3, #1
 8005848:	d102      	bne.n	8005850 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 f80a 	bl	8005864 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4618      	mov	r0, r3
 8005856:	f006 fa96 	bl	800bd86 <USB_DevDisconnect>

  return HAL_OK;
 800585a:	2300      	movs	r3, #0
}
 800585c:	4618      	mov	r0, r3
 800585e:	3714      	adds	r7, #20
 8005860:	46bd      	mov	sp, r7
 8005862:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005864 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005864:	b480      	push	{r7}
 8005866:	b085      	sub	sp, #20
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2201      	movs	r2, #1
 8005876:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	699b      	ldr	r3, [r3, #24]
 8005886:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005892:	4b05      	ldr	r3, [pc, #20]	; (80058a8 <HAL_PCDEx_ActivateLPM+0x44>)
 8005894:	4313      	orrs	r3, r2
 8005896:	68fa      	ldr	r2, [r7, #12]
 8005898:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800589a:	2300      	movs	r3, #0
}
 800589c:	4618      	mov	r0, r3
 800589e:	3714      	adds	r7, #20
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr
 80058a8:	10000003 	.word	0x10000003

080058ac <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80058b4:	4b19      	ldr	r3, [pc, #100]	; (800591c <HAL_PWREx_ConfigSupply+0x70>)
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	f003 0304 	and.w	r3, r3, #4
 80058bc:	2b04      	cmp	r3, #4
 80058be:	d00a      	beq.n	80058d6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80058c0:	4b16      	ldr	r3, [pc, #88]	; (800591c <HAL_PWREx_ConfigSupply+0x70>)
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	f003 0307 	and.w	r3, r3, #7
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d001      	beq.n	80058d2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e01f      	b.n	8005912 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80058d2:	2300      	movs	r3, #0
 80058d4:	e01d      	b.n	8005912 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80058d6:	4b11      	ldr	r3, [pc, #68]	; (800591c <HAL_PWREx_ConfigSupply+0x70>)
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	f023 0207 	bic.w	r2, r3, #7
 80058de:	490f      	ldr	r1, [pc, #60]	; (800591c <HAL_PWREx_ConfigSupply+0x70>)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80058e6:	f7fd f8c7 	bl	8002a78 <HAL_GetTick>
 80058ea:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80058ec:	e009      	b.n	8005902 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80058ee:	f7fd f8c3 	bl	8002a78 <HAL_GetTick>
 80058f2:	4602      	mov	r2, r0
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	1ad3      	subs	r3, r2, r3
 80058f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80058fc:	d901      	bls.n	8005902 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	e007      	b.n	8005912 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005902:	4b06      	ldr	r3, [pc, #24]	; (800591c <HAL_PWREx_ConfigSupply+0x70>)
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800590a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800590e:	d1ee      	bne.n	80058ee <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005910:	2300      	movs	r3, #0
}
 8005912:	4618      	mov	r0, r3
 8005914:	3710      	adds	r7, #16
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}
 800591a:	bf00      	nop
 800591c:	58024800 	.word	0x58024800

08005920 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005920:	b480      	push	{r7}
 8005922:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005924:	4b05      	ldr	r3, [pc, #20]	; (800593c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	4a04      	ldr	r2, [pc, #16]	; (800593c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800592a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800592e:	60d3      	str	r3, [r2, #12]
}
 8005930:	bf00      	nop
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr
 800593a:	bf00      	nop
 800593c:	58024800 	.word	0x58024800

08005940 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b08c      	sub	sp, #48	; 0x30
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d102      	bne.n	8005954 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	f000 bc48 	b.w	80061e4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 0301 	and.w	r3, r3, #1
 800595c:	2b00      	cmp	r3, #0
 800595e:	f000 8088 	beq.w	8005a72 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005962:	4b99      	ldr	r3, [pc, #612]	; (8005bc8 <HAL_RCC_OscConfig+0x288>)
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800596a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800596c:	4b96      	ldr	r3, [pc, #600]	; (8005bc8 <HAL_RCC_OscConfig+0x288>)
 800596e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005970:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005974:	2b10      	cmp	r3, #16
 8005976:	d007      	beq.n	8005988 <HAL_RCC_OscConfig+0x48>
 8005978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800597a:	2b18      	cmp	r3, #24
 800597c:	d111      	bne.n	80059a2 <HAL_RCC_OscConfig+0x62>
 800597e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005980:	f003 0303 	and.w	r3, r3, #3
 8005984:	2b02      	cmp	r3, #2
 8005986:	d10c      	bne.n	80059a2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005988:	4b8f      	ldr	r3, [pc, #572]	; (8005bc8 <HAL_RCC_OscConfig+0x288>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005990:	2b00      	cmp	r3, #0
 8005992:	d06d      	beq.n	8005a70 <HAL_RCC_OscConfig+0x130>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d169      	bne.n	8005a70 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	f000 bc21 	b.w	80061e4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059aa:	d106      	bne.n	80059ba <HAL_RCC_OscConfig+0x7a>
 80059ac:	4b86      	ldr	r3, [pc, #536]	; (8005bc8 <HAL_RCC_OscConfig+0x288>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a85      	ldr	r2, [pc, #532]	; (8005bc8 <HAL_RCC_OscConfig+0x288>)
 80059b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059b6:	6013      	str	r3, [r2, #0]
 80059b8:	e02e      	b.n	8005a18 <HAL_RCC_OscConfig+0xd8>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d10c      	bne.n	80059dc <HAL_RCC_OscConfig+0x9c>
 80059c2:	4b81      	ldr	r3, [pc, #516]	; (8005bc8 <HAL_RCC_OscConfig+0x288>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a80      	ldr	r2, [pc, #512]	; (8005bc8 <HAL_RCC_OscConfig+0x288>)
 80059c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059cc:	6013      	str	r3, [r2, #0]
 80059ce:	4b7e      	ldr	r3, [pc, #504]	; (8005bc8 <HAL_RCC_OscConfig+0x288>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a7d      	ldr	r2, [pc, #500]	; (8005bc8 <HAL_RCC_OscConfig+0x288>)
 80059d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059d8:	6013      	str	r3, [r2, #0]
 80059da:	e01d      	b.n	8005a18 <HAL_RCC_OscConfig+0xd8>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80059e4:	d10c      	bne.n	8005a00 <HAL_RCC_OscConfig+0xc0>
 80059e6:	4b78      	ldr	r3, [pc, #480]	; (8005bc8 <HAL_RCC_OscConfig+0x288>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a77      	ldr	r2, [pc, #476]	; (8005bc8 <HAL_RCC_OscConfig+0x288>)
 80059ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059f0:	6013      	str	r3, [r2, #0]
 80059f2:	4b75      	ldr	r3, [pc, #468]	; (8005bc8 <HAL_RCC_OscConfig+0x288>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a74      	ldr	r2, [pc, #464]	; (8005bc8 <HAL_RCC_OscConfig+0x288>)
 80059f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059fc:	6013      	str	r3, [r2, #0]
 80059fe:	e00b      	b.n	8005a18 <HAL_RCC_OscConfig+0xd8>
 8005a00:	4b71      	ldr	r3, [pc, #452]	; (8005bc8 <HAL_RCC_OscConfig+0x288>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a70      	ldr	r2, [pc, #448]	; (8005bc8 <HAL_RCC_OscConfig+0x288>)
 8005a06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a0a:	6013      	str	r3, [r2, #0]
 8005a0c:	4b6e      	ldr	r3, [pc, #440]	; (8005bc8 <HAL_RCC_OscConfig+0x288>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a6d      	ldr	r2, [pc, #436]	; (8005bc8 <HAL_RCC_OscConfig+0x288>)
 8005a12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d013      	beq.n	8005a48 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a20:	f7fd f82a 	bl	8002a78 <HAL_GetTick>
 8005a24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005a26:	e008      	b.n	8005a3a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a28:	f7fd f826 	bl	8002a78 <HAL_GetTick>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a30:	1ad3      	subs	r3, r2, r3
 8005a32:	2b64      	cmp	r3, #100	; 0x64
 8005a34:	d901      	bls.n	8005a3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a36:	2303      	movs	r3, #3
 8005a38:	e3d4      	b.n	80061e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005a3a:	4b63      	ldr	r3, [pc, #396]	; (8005bc8 <HAL_RCC_OscConfig+0x288>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d0f0      	beq.n	8005a28 <HAL_RCC_OscConfig+0xe8>
 8005a46:	e014      	b.n	8005a72 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a48:	f7fd f816 	bl	8002a78 <HAL_GetTick>
 8005a4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005a4e:	e008      	b.n	8005a62 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a50:	f7fd f812 	bl	8002a78 <HAL_GetTick>
 8005a54:	4602      	mov	r2, r0
 8005a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a58:	1ad3      	subs	r3, r2, r3
 8005a5a:	2b64      	cmp	r3, #100	; 0x64
 8005a5c:	d901      	bls.n	8005a62 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005a5e:	2303      	movs	r3, #3
 8005a60:	e3c0      	b.n	80061e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005a62:	4b59      	ldr	r3, [pc, #356]	; (8005bc8 <HAL_RCC_OscConfig+0x288>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d1f0      	bne.n	8005a50 <HAL_RCC_OscConfig+0x110>
 8005a6e:	e000      	b.n	8005a72 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 0302 	and.w	r3, r3, #2
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	f000 80ca 	beq.w	8005c14 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a80:	4b51      	ldr	r3, [pc, #324]	; (8005bc8 <HAL_RCC_OscConfig+0x288>)
 8005a82:	691b      	ldr	r3, [r3, #16]
 8005a84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a88:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005a8a:	4b4f      	ldr	r3, [pc, #316]	; (8005bc8 <HAL_RCC_OscConfig+0x288>)
 8005a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a8e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005a90:	6a3b      	ldr	r3, [r7, #32]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d007      	beq.n	8005aa6 <HAL_RCC_OscConfig+0x166>
 8005a96:	6a3b      	ldr	r3, [r7, #32]
 8005a98:	2b18      	cmp	r3, #24
 8005a9a:	d156      	bne.n	8005b4a <HAL_RCC_OscConfig+0x20a>
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	f003 0303 	and.w	r3, r3, #3
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d151      	bne.n	8005b4a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005aa6:	4b48      	ldr	r3, [pc, #288]	; (8005bc8 <HAL_RCC_OscConfig+0x288>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 0304 	and.w	r3, r3, #4
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d005      	beq.n	8005abe <HAL_RCC_OscConfig+0x17e>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d101      	bne.n	8005abe <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	e392      	b.n	80061e4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005abe:	4b42      	ldr	r3, [pc, #264]	; (8005bc8 <HAL_RCC_OscConfig+0x288>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f023 0219 	bic.w	r2, r3, #25
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	493f      	ldr	r1, [pc, #252]	; (8005bc8 <HAL_RCC_OscConfig+0x288>)
 8005acc:	4313      	orrs	r3, r2
 8005ace:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ad0:	f7fc ffd2 	bl	8002a78 <HAL_GetTick>
 8005ad4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ad6:	e008      	b.n	8005aea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ad8:	f7fc ffce 	bl	8002a78 <HAL_GetTick>
 8005adc:	4602      	mov	r2, r0
 8005ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae0:	1ad3      	subs	r3, r2, r3
 8005ae2:	2b02      	cmp	r3, #2
 8005ae4:	d901      	bls.n	8005aea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	e37c      	b.n	80061e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005aea:	4b37      	ldr	r3, [pc, #220]	; (8005bc8 <HAL_RCC_OscConfig+0x288>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f003 0304 	and.w	r3, r3, #4
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d0f0      	beq.n	8005ad8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005af6:	f7fc ffef 	bl	8002ad8 <HAL_GetREVID>
 8005afa:	4603      	mov	r3, r0
 8005afc:	f241 0203 	movw	r2, #4099	; 0x1003
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d817      	bhi.n	8005b34 <HAL_RCC_OscConfig+0x1f4>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	691b      	ldr	r3, [r3, #16]
 8005b08:	2b40      	cmp	r3, #64	; 0x40
 8005b0a:	d108      	bne.n	8005b1e <HAL_RCC_OscConfig+0x1de>
 8005b0c:	4b2e      	ldr	r3, [pc, #184]	; (8005bc8 <HAL_RCC_OscConfig+0x288>)
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005b14:	4a2c      	ldr	r2, [pc, #176]	; (8005bc8 <HAL_RCC_OscConfig+0x288>)
 8005b16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b1a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b1c:	e07a      	b.n	8005c14 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b1e:	4b2a      	ldr	r3, [pc, #168]	; (8005bc8 <HAL_RCC_OscConfig+0x288>)
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	031b      	lsls	r3, r3, #12
 8005b2c:	4926      	ldr	r1, [pc, #152]	; (8005bc8 <HAL_RCC_OscConfig+0x288>)
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b32:	e06f      	b.n	8005c14 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b34:	4b24      	ldr	r3, [pc, #144]	; (8005bc8 <HAL_RCC_OscConfig+0x288>)
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	061b      	lsls	r3, r3, #24
 8005b42:	4921      	ldr	r1, [pc, #132]	; (8005bc8 <HAL_RCC_OscConfig+0x288>)
 8005b44:	4313      	orrs	r3, r2
 8005b46:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b48:	e064      	b.n	8005c14 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d047      	beq.n	8005be2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005b52:	4b1d      	ldr	r3, [pc, #116]	; (8005bc8 <HAL_RCC_OscConfig+0x288>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f023 0219 	bic.w	r2, r3, #25
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	491a      	ldr	r1, [pc, #104]	; (8005bc8 <HAL_RCC_OscConfig+0x288>)
 8005b60:	4313      	orrs	r3, r2
 8005b62:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b64:	f7fc ff88 	bl	8002a78 <HAL_GetTick>
 8005b68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b6a:	e008      	b.n	8005b7e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b6c:	f7fc ff84 	bl	8002a78 <HAL_GetTick>
 8005b70:	4602      	mov	r2, r0
 8005b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b74:	1ad3      	subs	r3, r2, r3
 8005b76:	2b02      	cmp	r3, #2
 8005b78:	d901      	bls.n	8005b7e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005b7a:	2303      	movs	r3, #3
 8005b7c:	e332      	b.n	80061e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b7e:	4b12      	ldr	r3, [pc, #72]	; (8005bc8 <HAL_RCC_OscConfig+0x288>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f003 0304 	and.w	r3, r3, #4
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d0f0      	beq.n	8005b6c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b8a:	f7fc ffa5 	bl	8002ad8 <HAL_GetREVID>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	f241 0203 	movw	r2, #4099	; 0x1003
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d819      	bhi.n	8005bcc <HAL_RCC_OscConfig+0x28c>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	691b      	ldr	r3, [r3, #16]
 8005b9c:	2b40      	cmp	r3, #64	; 0x40
 8005b9e:	d108      	bne.n	8005bb2 <HAL_RCC_OscConfig+0x272>
 8005ba0:	4b09      	ldr	r3, [pc, #36]	; (8005bc8 <HAL_RCC_OscConfig+0x288>)
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005ba8:	4a07      	ldr	r2, [pc, #28]	; (8005bc8 <HAL_RCC_OscConfig+0x288>)
 8005baa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bae:	6053      	str	r3, [r2, #4]
 8005bb0:	e030      	b.n	8005c14 <HAL_RCC_OscConfig+0x2d4>
 8005bb2:	4b05      	ldr	r3, [pc, #20]	; (8005bc8 <HAL_RCC_OscConfig+0x288>)
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	031b      	lsls	r3, r3, #12
 8005bc0:	4901      	ldr	r1, [pc, #4]	; (8005bc8 <HAL_RCC_OscConfig+0x288>)
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	604b      	str	r3, [r1, #4]
 8005bc6:	e025      	b.n	8005c14 <HAL_RCC_OscConfig+0x2d4>
 8005bc8:	58024400 	.word	0x58024400
 8005bcc:	4b9a      	ldr	r3, [pc, #616]	; (8005e38 <HAL_RCC_OscConfig+0x4f8>)
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	691b      	ldr	r3, [r3, #16]
 8005bd8:	061b      	lsls	r3, r3, #24
 8005bda:	4997      	ldr	r1, [pc, #604]	; (8005e38 <HAL_RCC_OscConfig+0x4f8>)
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	604b      	str	r3, [r1, #4]
 8005be0:	e018      	b.n	8005c14 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005be2:	4b95      	ldr	r3, [pc, #596]	; (8005e38 <HAL_RCC_OscConfig+0x4f8>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a94      	ldr	r2, [pc, #592]	; (8005e38 <HAL_RCC_OscConfig+0x4f8>)
 8005be8:	f023 0301 	bic.w	r3, r3, #1
 8005bec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bee:	f7fc ff43 	bl	8002a78 <HAL_GetTick>
 8005bf2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005bf4:	e008      	b.n	8005c08 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005bf6:	f7fc ff3f 	bl	8002a78 <HAL_GetTick>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfe:	1ad3      	subs	r3, r2, r3
 8005c00:	2b02      	cmp	r3, #2
 8005c02:	d901      	bls.n	8005c08 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005c04:	2303      	movs	r3, #3
 8005c06:	e2ed      	b.n	80061e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005c08:	4b8b      	ldr	r3, [pc, #556]	; (8005e38 <HAL_RCC_OscConfig+0x4f8>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 0304 	and.w	r3, r3, #4
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d1f0      	bne.n	8005bf6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f003 0310 	and.w	r3, r3, #16
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	f000 80a9 	beq.w	8005d74 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c22:	4b85      	ldr	r3, [pc, #532]	; (8005e38 <HAL_RCC_OscConfig+0x4f8>)
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c2a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005c2c:	4b82      	ldr	r3, [pc, #520]	; (8005e38 <HAL_RCC_OscConfig+0x4f8>)
 8005c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c30:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005c32:	69bb      	ldr	r3, [r7, #24]
 8005c34:	2b08      	cmp	r3, #8
 8005c36:	d007      	beq.n	8005c48 <HAL_RCC_OscConfig+0x308>
 8005c38:	69bb      	ldr	r3, [r7, #24]
 8005c3a:	2b18      	cmp	r3, #24
 8005c3c:	d13a      	bne.n	8005cb4 <HAL_RCC_OscConfig+0x374>
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	f003 0303 	and.w	r3, r3, #3
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d135      	bne.n	8005cb4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005c48:	4b7b      	ldr	r3, [pc, #492]	; (8005e38 <HAL_RCC_OscConfig+0x4f8>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d005      	beq.n	8005c60 <HAL_RCC_OscConfig+0x320>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	69db      	ldr	r3, [r3, #28]
 8005c58:	2b80      	cmp	r3, #128	; 0x80
 8005c5a:	d001      	beq.n	8005c60 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e2c1      	b.n	80061e4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005c60:	f7fc ff3a 	bl	8002ad8 <HAL_GetREVID>
 8005c64:	4603      	mov	r3, r0
 8005c66:	f241 0203 	movw	r2, #4099	; 0x1003
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d817      	bhi.n	8005c9e <HAL_RCC_OscConfig+0x35e>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a1b      	ldr	r3, [r3, #32]
 8005c72:	2b20      	cmp	r3, #32
 8005c74:	d108      	bne.n	8005c88 <HAL_RCC_OscConfig+0x348>
 8005c76:	4b70      	ldr	r3, [pc, #448]	; (8005e38 <HAL_RCC_OscConfig+0x4f8>)
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005c7e:	4a6e      	ldr	r2, [pc, #440]	; (8005e38 <HAL_RCC_OscConfig+0x4f8>)
 8005c80:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c84:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005c86:	e075      	b.n	8005d74 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005c88:	4b6b      	ldr	r3, [pc, #428]	; (8005e38 <HAL_RCC_OscConfig+0x4f8>)
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6a1b      	ldr	r3, [r3, #32]
 8005c94:	069b      	lsls	r3, r3, #26
 8005c96:	4968      	ldr	r1, [pc, #416]	; (8005e38 <HAL_RCC_OscConfig+0x4f8>)
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005c9c:	e06a      	b.n	8005d74 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005c9e:	4b66      	ldr	r3, [pc, #408]	; (8005e38 <HAL_RCC_OscConfig+0x4f8>)
 8005ca0:	68db      	ldr	r3, [r3, #12]
 8005ca2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a1b      	ldr	r3, [r3, #32]
 8005caa:	061b      	lsls	r3, r3, #24
 8005cac:	4962      	ldr	r1, [pc, #392]	; (8005e38 <HAL_RCC_OscConfig+0x4f8>)
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005cb2:	e05f      	b.n	8005d74 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	69db      	ldr	r3, [r3, #28]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d042      	beq.n	8005d42 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005cbc:	4b5e      	ldr	r3, [pc, #376]	; (8005e38 <HAL_RCC_OscConfig+0x4f8>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a5d      	ldr	r2, [pc, #372]	; (8005e38 <HAL_RCC_OscConfig+0x4f8>)
 8005cc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cc8:	f7fc fed6 	bl	8002a78 <HAL_GetTick>
 8005ccc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005cce:	e008      	b.n	8005ce2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005cd0:	f7fc fed2 	bl	8002a78 <HAL_GetTick>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd8:	1ad3      	subs	r3, r2, r3
 8005cda:	2b02      	cmp	r3, #2
 8005cdc:	d901      	bls.n	8005ce2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005cde:	2303      	movs	r3, #3
 8005ce0:	e280      	b.n	80061e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005ce2:	4b55      	ldr	r3, [pc, #340]	; (8005e38 <HAL_RCC_OscConfig+0x4f8>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d0f0      	beq.n	8005cd0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005cee:	f7fc fef3 	bl	8002ad8 <HAL_GetREVID>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	f241 0203 	movw	r2, #4099	; 0x1003
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d817      	bhi.n	8005d2c <HAL_RCC_OscConfig+0x3ec>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6a1b      	ldr	r3, [r3, #32]
 8005d00:	2b20      	cmp	r3, #32
 8005d02:	d108      	bne.n	8005d16 <HAL_RCC_OscConfig+0x3d6>
 8005d04:	4b4c      	ldr	r3, [pc, #304]	; (8005e38 <HAL_RCC_OscConfig+0x4f8>)
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005d0c:	4a4a      	ldr	r2, [pc, #296]	; (8005e38 <HAL_RCC_OscConfig+0x4f8>)
 8005d0e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d12:	6053      	str	r3, [r2, #4]
 8005d14:	e02e      	b.n	8005d74 <HAL_RCC_OscConfig+0x434>
 8005d16:	4b48      	ldr	r3, [pc, #288]	; (8005e38 <HAL_RCC_OscConfig+0x4f8>)
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a1b      	ldr	r3, [r3, #32]
 8005d22:	069b      	lsls	r3, r3, #26
 8005d24:	4944      	ldr	r1, [pc, #272]	; (8005e38 <HAL_RCC_OscConfig+0x4f8>)
 8005d26:	4313      	orrs	r3, r2
 8005d28:	604b      	str	r3, [r1, #4]
 8005d2a:	e023      	b.n	8005d74 <HAL_RCC_OscConfig+0x434>
 8005d2c:	4b42      	ldr	r3, [pc, #264]	; (8005e38 <HAL_RCC_OscConfig+0x4f8>)
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6a1b      	ldr	r3, [r3, #32]
 8005d38:	061b      	lsls	r3, r3, #24
 8005d3a:	493f      	ldr	r1, [pc, #252]	; (8005e38 <HAL_RCC_OscConfig+0x4f8>)
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	60cb      	str	r3, [r1, #12]
 8005d40:	e018      	b.n	8005d74 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005d42:	4b3d      	ldr	r3, [pc, #244]	; (8005e38 <HAL_RCC_OscConfig+0x4f8>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a3c      	ldr	r2, [pc, #240]	; (8005e38 <HAL_RCC_OscConfig+0x4f8>)
 8005d48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d4e:	f7fc fe93 	bl	8002a78 <HAL_GetTick>
 8005d52:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005d54:	e008      	b.n	8005d68 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005d56:	f7fc fe8f 	bl	8002a78 <HAL_GetTick>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5e:	1ad3      	subs	r3, r2, r3
 8005d60:	2b02      	cmp	r3, #2
 8005d62:	d901      	bls.n	8005d68 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005d64:	2303      	movs	r3, #3
 8005d66:	e23d      	b.n	80061e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005d68:	4b33      	ldr	r3, [pc, #204]	; (8005e38 <HAL_RCC_OscConfig+0x4f8>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d1f0      	bne.n	8005d56 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f003 0308 	and.w	r3, r3, #8
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d036      	beq.n	8005dee <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	695b      	ldr	r3, [r3, #20]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d019      	beq.n	8005dbc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d88:	4b2b      	ldr	r3, [pc, #172]	; (8005e38 <HAL_RCC_OscConfig+0x4f8>)
 8005d8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d8c:	4a2a      	ldr	r2, [pc, #168]	; (8005e38 <HAL_RCC_OscConfig+0x4f8>)
 8005d8e:	f043 0301 	orr.w	r3, r3, #1
 8005d92:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d94:	f7fc fe70 	bl	8002a78 <HAL_GetTick>
 8005d98:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005d9a:	e008      	b.n	8005dae <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d9c:	f7fc fe6c 	bl	8002a78 <HAL_GetTick>
 8005da0:	4602      	mov	r2, r0
 8005da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	d901      	bls.n	8005dae <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e21a      	b.n	80061e4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005dae:	4b22      	ldr	r3, [pc, #136]	; (8005e38 <HAL_RCC_OscConfig+0x4f8>)
 8005db0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005db2:	f003 0302 	and.w	r3, r3, #2
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d0f0      	beq.n	8005d9c <HAL_RCC_OscConfig+0x45c>
 8005dba:	e018      	b.n	8005dee <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005dbc:	4b1e      	ldr	r3, [pc, #120]	; (8005e38 <HAL_RCC_OscConfig+0x4f8>)
 8005dbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dc0:	4a1d      	ldr	r2, [pc, #116]	; (8005e38 <HAL_RCC_OscConfig+0x4f8>)
 8005dc2:	f023 0301 	bic.w	r3, r3, #1
 8005dc6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dc8:	f7fc fe56 	bl	8002a78 <HAL_GetTick>
 8005dcc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005dce:	e008      	b.n	8005de2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005dd0:	f7fc fe52 	bl	8002a78 <HAL_GetTick>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd8:	1ad3      	subs	r3, r2, r3
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	d901      	bls.n	8005de2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005dde:	2303      	movs	r3, #3
 8005de0:	e200      	b.n	80061e4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005de2:	4b15      	ldr	r3, [pc, #84]	; (8005e38 <HAL_RCC_OscConfig+0x4f8>)
 8005de4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005de6:	f003 0302 	and.w	r3, r3, #2
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d1f0      	bne.n	8005dd0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f003 0320 	and.w	r3, r3, #32
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d039      	beq.n	8005e6e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	699b      	ldr	r3, [r3, #24]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d01c      	beq.n	8005e3c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005e02:	4b0d      	ldr	r3, [pc, #52]	; (8005e38 <HAL_RCC_OscConfig+0x4f8>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a0c      	ldr	r2, [pc, #48]	; (8005e38 <HAL_RCC_OscConfig+0x4f8>)
 8005e08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005e0c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005e0e:	f7fc fe33 	bl	8002a78 <HAL_GetTick>
 8005e12:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005e14:	e008      	b.n	8005e28 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005e16:	f7fc fe2f 	bl	8002a78 <HAL_GetTick>
 8005e1a:	4602      	mov	r2, r0
 8005e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1e:	1ad3      	subs	r3, r2, r3
 8005e20:	2b02      	cmp	r3, #2
 8005e22:	d901      	bls.n	8005e28 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005e24:	2303      	movs	r3, #3
 8005e26:	e1dd      	b.n	80061e4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005e28:	4b03      	ldr	r3, [pc, #12]	; (8005e38 <HAL_RCC_OscConfig+0x4f8>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d0f0      	beq.n	8005e16 <HAL_RCC_OscConfig+0x4d6>
 8005e34:	e01b      	b.n	8005e6e <HAL_RCC_OscConfig+0x52e>
 8005e36:	bf00      	nop
 8005e38:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005e3c:	4b9b      	ldr	r3, [pc, #620]	; (80060ac <HAL_RCC_OscConfig+0x76c>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a9a      	ldr	r2, [pc, #616]	; (80060ac <HAL_RCC_OscConfig+0x76c>)
 8005e42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e46:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005e48:	f7fc fe16 	bl	8002a78 <HAL_GetTick>
 8005e4c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005e4e:	e008      	b.n	8005e62 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005e50:	f7fc fe12 	bl	8002a78 <HAL_GetTick>
 8005e54:	4602      	mov	r2, r0
 8005e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e58:	1ad3      	subs	r3, r2, r3
 8005e5a:	2b02      	cmp	r3, #2
 8005e5c:	d901      	bls.n	8005e62 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005e5e:	2303      	movs	r3, #3
 8005e60:	e1c0      	b.n	80061e4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005e62:	4b92      	ldr	r3, [pc, #584]	; (80060ac <HAL_RCC_OscConfig+0x76c>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d1f0      	bne.n	8005e50 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 0304 	and.w	r3, r3, #4
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	f000 8081 	beq.w	8005f7e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005e7c:	4b8c      	ldr	r3, [pc, #560]	; (80060b0 <HAL_RCC_OscConfig+0x770>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a8b      	ldr	r2, [pc, #556]	; (80060b0 <HAL_RCC_OscConfig+0x770>)
 8005e82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e86:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e88:	f7fc fdf6 	bl	8002a78 <HAL_GetTick>
 8005e8c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e8e:	e008      	b.n	8005ea2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e90:	f7fc fdf2 	bl	8002a78 <HAL_GetTick>
 8005e94:	4602      	mov	r2, r0
 8005e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e98:	1ad3      	subs	r3, r2, r3
 8005e9a:	2b64      	cmp	r3, #100	; 0x64
 8005e9c:	d901      	bls.n	8005ea2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	e1a0      	b.n	80061e4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ea2:	4b83      	ldr	r3, [pc, #524]	; (80060b0 <HAL_RCC_OscConfig+0x770>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d0f0      	beq.n	8005e90 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d106      	bne.n	8005ec4 <HAL_RCC_OscConfig+0x584>
 8005eb6:	4b7d      	ldr	r3, [pc, #500]	; (80060ac <HAL_RCC_OscConfig+0x76c>)
 8005eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eba:	4a7c      	ldr	r2, [pc, #496]	; (80060ac <HAL_RCC_OscConfig+0x76c>)
 8005ebc:	f043 0301 	orr.w	r3, r3, #1
 8005ec0:	6713      	str	r3, [r2, #112]	; 0x70
 8005ec2:	e02d      	b.n	8005f20 <HAL_RCC_OscConfig+0x5e0>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d10c      	bne.n	8005ee6 <HAL_RCC_OscConfig+0x5a6>
 8005ecc:	4b77      	ldr	r3, [pc, #476]	; (80060ac <HAL_RCC_OscConfig+0x76c>)
 8005ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ed0:	4a76      	ldr	r2, [pc, #472]	; (80060ac <HAL_RCC_OscConfig+0x76c>)
 8005ed2:	f023 0301 	bic.w	r3, r3, #1
 8005ed6:	6713      	str	r3, [r2, #112]	; 0x70
 8005ed8:	4b74      	ldr	r3, [pc, #464]	; (80060ac <HAL_RCC_OscConfig+0x76c>)
 8005eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005edc:	4a73      	ldr	r2, [pc, #460]	; (80060ac <HAL_RCC_OscConfig+0x76c>)
 8005ede:	f023 0304 	bic.w	r3, r3, #4
 8005ee2:	6713      	str	r3, [r2, #112]	; 0x70
 8005ee4:	e01c      	b.n	8005f20 <HAL_RCC_OscConfig+0x5e0>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	2b05      	cmp	r3, #5
 8005eec:	d10c      	bne.n	8005f08 <HAL_RCC_OscConfig+0x5c8>
 8005eee:	4b6f      	ldr	r3, [pc, #444]	; (80060ac <HAL_RCC_OscConfig+0x76c>)
 8005ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ef2:	4a6e      	ldr	r2, [pc, #440]	; (80060ac <HAL_RCC_OscConfig+0x76c>)
 8005ef4:	f043 0304 	orr.w	r3, r3, #4
 8005ef8:	6713      	str	r3, [r2, #112]	; 0x70
 8005efa:	4b6c      	ldr	r3, [pc, #432]	; (80060ac <HAL_RCC_OscConfig+0x76c>)
 8005efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005efe:	4a6b      	ldr	r2, [pc, #428]	; (80060ac <HAL_RCC_OscConfig+0x76c>)
 8005f00:	f043 0301 	orr.w	r3, r3, #1
 8005f04:	6713      	str	r3, [r2, #112]	; 0x70
 8005f06:	e00b      	b.n	8005f20 <HAL_RCC_OscConfig+0x5e0>
 8005f08:	4b68      	ldr	r3, [pc, #416]	; (80060ac <HAL_RCC_OscConfig+0x76c>)
 8005f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f0c:	4a67      	ldr	r2, [pc, #412]	; (80060ac <HAL_RCC_OscConfig+0x76c>)
 8005f0e:	f023 0301 	bic.w	r3, r3, #1
 8005f12:	6713      	str	r3, [r2, #112]	; 0x70
 8005f14:	4b65      	ldr	r3, [pc, #404]	; (80060ac <HAL_RCC_OscConfig+0x76c>)
 8005f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f18:	4a64      	ldr	r2, [pc, #400]	; (80060ac <HAL_RCC_OscConfig+0x76c>)
 8005f1a:	f023 0304 	bic.w	r3, r3, #4
 8005f1e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d015      	beq.n	8005f54 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f28:	f7fc fda6 	bl	8002a78 <HAL_GetTick>
 8005f2c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f2e:	e00a      	b.n	8005f46 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f30:	f7fc fda2 	bl	8002a78 <HAL_GetTick>
 8005f34:	4602      	mov	r2, r0
 8005f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f38:	1ad3      	subs	r3, r2, r3
 8005f3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d901      	bls.n	8005f46 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005f42:	2303      	movs	r3, #3
 8005f44:	e14e      	b.n	80061e4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f46:	4b59      	ldr	r3, [pc, #356]	; (80060ac <HAL_RCC_OscConfig+0x76c>)
 8005f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f4a:	f003 0302 	and.w	r3, r3, #2
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d0ee      	beq.n	8005f30 <HAL_RCC_OscConfig+0x5f0>
 8005f52:	e014      	b.n	8005f7e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f54:	f7fc fd90 	bl	8002a78 <HAL_GetTick>
 8005f58:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005f5a:	e00a      	b.n	8005f72 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f5c:	f7fc fd8c 	bl	8002a78 <HAL_GetTick>
 8005f60:	4602      	mov	r2, r0
 8005f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f64:	1ad3      	subs	r3, r2, r3
 8005f66:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d901      	bls.n	8005f72 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005f6e:	2303      	movs	r3, #3
 8005f70:	e138      	b.n	80061e4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005f72:	4b4e      	ldr	r3, [pc, #312]	; (80060ac <HAL_RCC_OscConfig+0x76c>)
 8005f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f76:	f003 0302 	and.w	r3, r3, #2
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d1ee      	bne.n	8005f5c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	f000 812d 	beq.w	80061e2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005f88:	4b48      	ldr	r3, [pc, #288]	; (80060ac <HAL_RCC_OscConfig+0x76c>)
 8005f8a:	691b      	ldr	r3, [r3, #16]
 8005f8c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f90:	2b18      	cmp	r3, #24
 8005f92:	f000 80bd 	beq.w	8006110 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9a:	2b02      	cmp	r3, #2
 8005f9c:	f040 809e 	bne.w	80060dc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fa0:	4b42      	ldr	r3, [pc, #264]	; (80060ac <HAL_RCC_OscConfig+0x76c>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a41      	ldr	r2, [pc, #260]	; (80060ac <HAL_RCC_OscConfig+0x76c>)
 8005fa6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005faa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fac:	f7fc fd64 	bl	8002a78 <HAL_GetTick>
 8005fb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005fb2:	e008      	b.n	8005fc6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fb4:	f7fc fd60 	bl	8002a78 <HAL_GetTick>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fbc:	1ad3      	subs	r3, r2, r3
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	d901      	bls.n	8005fc6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	e10e      	b.n	80061e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005fc6:	4b39      	ldr	r3, [pc, #228]	; (80060ac <HAL_RCC_OscConfig+0x76c>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d1f0      	bne.n	8005fb4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005fd2:	4b36      	ldr	r3, [pc, #216]	; (80060ac <HAL_RCC_OscConfig+0x76c>)
 8005fd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005fd6:	4b37      	ldr	r3, [pc, #220]	; (80060b4 <HAL_RCC_OscConfig+0x774>)
 8005fd8:	4013      	ands	r3, r2
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005fe2:	0112      	lsls	r2, r2, #4
 8005fe4:	430a      	orrs	r2, r1
 8005fe6:	4931      	ldr	r1, [pc, #196]	; (80060ac <HAL_RCC_OscConfig+0x76c>)
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	628b      	str	r3, [r1, #40]	; 0x28
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ff0:	3b01      	subs	r3, #1
 8005ff2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ffa:	3b01      	subs	r3, #1
 8005ffc:	025b      	lsls	r3, r3, #9
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	431a      	orrs	r2, r3
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006006:	3b01      	subs	r3, #1
 8006008:	041b      	lsls	r3, r3, #16
 800600a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800600e:	431a      	orrs	r2, r3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006014:	3b01      	subs	r3, #1
 8006016:	061b      	lsls	r3, r3, #24
 8006018:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800601c:	4923      	ldr	r1, [pc, #140]	; (80060ac <HAL_RCC_OscConfig+0x76c>)
 800601e:	4313      	orrs	r3, r2
 8006020:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006022:	4b22      	ldr	r3, [pc, #136]	; (80060ac <HAL_RCC_OscConfig+0x76c>)
 8006024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006026:	4a21      	ldr	r2, [pc, #132]	; (80060ac <HAL_RCC_OscConfig+0x76c>)
 8006028:	f023 0301 	bic.w	r3, r3, #1
 800602c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800602e:	4b1f      	ldr	r3, [pc, #124]	; (80060ac <HAL_RCC_OscConfig+0x76c>)
 8006030:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006032:	4b21      	ldr	r3, [pc, #132]	; (80060b8 <HAL_RCC_OscConfig+0x778>)
 8006034:	4013      	ands	r3, r2
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800603a:	00d2      	lsls	r2, r2, #3
 800603c:	491b      	ldr	r1, [pc, #108]	; (80060ac <HAL_RCC_OscConfig+0x76c>)
 800603e:	4313      	orrs	r3, r2
 8006040:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006042:	4b1a      	ldr	r3, [pc, #104]	; (80060ac <HAL_RCC_OscConfig+0x76c>)
 8006044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006046:	f023 020c 	bic.w	r2, r3, #12
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800604e:	4917      	ldr	r1, [pc, #92]	; (80060ac <HAL_RCC_OscConfig+0x76c>)
 8006050:	4313      	orrs	r3, r2
 8006052:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006054:	4b15      	ldr	r3, [pc, #84]	; (80060ac <HAL_RCC_OscConfig+0x76c>)
 8006056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006058:	f023 0202 	bic.w	r2, r3, #2
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006060:	4912      	ldr	r1, [pc, #72]	; (80060ac <HAL_RCC_OscConfig+0x76c>)
 8006062:	4313      	orrs	r3, r2
 8006064:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006066:	4b11      	ldr	r3, [pc, #68]	; (80060ac <HAL_RCC_OscConfig+0x76c>)
 8006068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800606a:	4a10      	ldr	r2, [pc, #64]	; (80060ac <HAL_RCC_OscConfig+0x76c>)
 800606c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006070:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006072:	4b0e      	ldr	r3, [pc, #56]	; (80060ac <HAL_RCC_OscConfig+0x76c>)
 8006074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006076:	4a0d      	ldr	r2, [pc, #52]	; (80060ac <HAL_RCC_OscConfig+0x76c>)
 8006078:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800607c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800607e:	4b0b      	ldr	r3, [pc, #44]	; (80060ac <HAL_RCC_OscConfig+0x76c>)
 8006080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006082:	4a0a      	ldr	r2, [pc, #40]	; (80060ac <HAL_RCC_OscConfig+0x76c>)
 8006084:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006088:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800608a:	4b08      	ldr	r3, [pc, #32]	; (80060ac <HAL_RCC_OscConfig+0x76c>)
 800608c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800608e:	4a07      	ldr	r2, [pc, #28]	; (80060ac <HAL_RCC_OscConfig+0x76c>)
 8006090:	f043 0301 	orr.w	r3, r3, #1
 8006094:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006096:	4b05      	ldr	r3, [pc, #20]	; (80060ac <HAL_RCC_OscConfig+0x76c>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a04      	ldr	r2, [pc, #16]	; (80060ac <HAL_RCC_OscConfig+0x76c>)
 800609c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80060a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060a2:	f7fc fce9 	bl	8002a78 <HAL_GetTick>
 80060a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80060a8:	e011      	b.n	80060ce <HAL_RCC_OscConfig+0x78e>
 80060aa:	bf00      	nop
 80060ac:	58024400 	.word	0x58024400
 80060b0:	58024800 	.word	0x58024800
 80060b4:	fffffc0c 	.word	0xfffffc0c
 80060b8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060bc:	f7fc fcdc 	bl	8002a78 <HAL_GetTick>
 80060c0:	4602      	mov	r2, r0
 80060c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c4:	1ad3      	subs	r3, r2, r3
 80060c6:	2b02      	cmp	r3, #2
 80060c8:	d901      	bls.n	80060ce <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80060ca:	2303      	movs	r3, #3
 80060cc:	e08a      	b.n	80061e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80060ce:	4b47      	ldr	r3, [pc, #284]	; (80061ec <HAL_RCC_OscConfig+0x8ac>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d0f0      	beq.n	80060bc <HAL_RCC_OscConfig+0x77c>
 80060da:	e082      	b.n	80061e2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060dc:	4b43      	ldr	r3, [pc, #268]	; (80061ec <HAL_RCC_OscConfig+0x8ac>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a42      	ldr	r2, [pc, #264]	; (80061ec <HAL_RCC_OscConfig+0x8ac>)
 80060e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80060e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060e8:	f7fc fcc6 	bl	8002a78 <HAL_GetTick>
 80060ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80060ee:	e008      	b.n	8006102 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060f0:	f7fc fcc2 	bl	8002a78 <HAL_GetTick>
 80060f4:	4602      	mov	r2, r0
 80060f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f8:	1ad3      	subs	r3, r2, r3
 80060fa:	2b02      	cmp	r3, #2
 80060fc:	d901      	bls.n	8006102 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80060fe:	2303      	movs	r3, #3
 8006100:	e070      	b.n	80061e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006102:	4b3a      	ldr	r3, [pc, #232]	; (80061ec <HAL_RCC_OscConfig+0x8ac>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800610a:	2b00      	cmp	r3, #0
 800610c:	d1f0      	bne.n	80060f0 <HAL_RCC_OscConfig+0x7b0>
 800610e:	e068      	b.n	80061e2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006110:	4b36      	ldr	r3, [pc, #216]	; (80061ec <HAL_RCC_OscConfig+0x8ac>)
 8006112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006114:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006116:	4b35      	ldr	r3, [pc, #212]	; (80061ec <HAL_RCC_OscConfig+0x8ac>)
 8006118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800611a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006120:	2b01      	cmp	r3, #1
 8006122:	d031      	beq.n	8006188 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	f003 0203 	and.w	r2, r3, #3
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800612e:	429a      	cmp	r2, r3
 8006130:	d12a      	bne.n	8006188 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	091b      	lsrs	r3, r3, #4
 8006136:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800613e:	429a      	cmp	r2, r3
 8006140:	d122      	bne.n	8006188 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800614c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800614e:	429a      	cmp	r2, r3
 8006150:	d11a      	bne.n	8006188 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	0a5b      	lsrs	r3, r3, #9
 8006156:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800615e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006160:	429a      	cmp	r2, r3
 8006162:	d111      	bne.n	8006188 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	0c1b      	lsrs	r3, r3, #16
 8006168:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006170:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006172:	429a      	cmp	r2, r3
 8006174:	d108      	bne.n	8006188 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	0e1b      	lsrs	r3, r3, #24
 800617a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006182:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006184:	429a      	cmp	r2, r3
 8006186:	d001      	beq.n	800618c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006188:	2301      	movs	r3, #1
 800618a:	e02b      	b.n	80061e4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800618c:	4b17      	ldr	r3, [pc, #92]	; (80061ec <HAL_RCC_OscConfig+0x8ac>)
 800618e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006190:	08db      	lsrs	r3, r3, #3
 8006192:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006196:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800619c:	693a      	ldr	r2, [r7, #16]
 800619e:	429a      	cmp	r2, r3
 80061a0:	d01f      	beq.n	80061e2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80061a2:	4b12      	ldr	r3, [pc, #72]	; (80061ec <HAL_RCC_OscConfig+0x8ac>)
 80061a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a6:	4a11      	ldr	r2, [pc, #68]	; (80061ec <HAL_RCC_OscConfig+0x8ac>)
 80061a8:	f023 0301 	bic.w	r3, r3, #1
 80061ac:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80061ae:	f7fc fc63 	bl	8002a78 <HAL_GetTick>
 80061b2:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80061b4:	bf00      	nop
 80061b6:	f7fc fc5f 	bl	8002a78 <HAL_GetTick>
 80061ba:	4602      	mov	r2, r0
 80061bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061be:	4293      	cmp	r3, r2
 80061c0:	d0f9      	beq.n	80061b6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80061c2:	4b0a      	ldr	r3, [pc, #40]	; (80061ec <HAL_RCC_OscConfig+0x8ac>)
 80061c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061c6:	4b0a      	ldr	r3, [pc, #40]	; (80061f0 <HAL_RCC_OscConfig+0x8b0>)
 80061c8:	4013      	ands	r3, r2
 80061ca:	687a      	ldr	r2, [r7, #4]
 80061cc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80061ce:	00d2      	lsls	r2, r2, #3
 80061d0:	4906      	ldr	r1, [pc, #24]	; (80061ec <HAL_RCC_OscConfig+0x8ac>)
 80061d2:	4313      	orrs	r3, r2
 80061d4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80061d6:	4b05      	ldr	r3, [pc, #20]	; (80061ec <HAL_RCC_OscConfig+0x8ac>)
 80061d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061da:	4a04      	ldr	r2, [pc, #16]	; (80061ec <HAL_RCC_OscConfig+0x8ac>)
 80061dc:	f043 0301 	orr.w	r3, r3, #1
 80061e0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80061e2:	2300      	movs	r3, #0
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3730      	adds	r7, #48	; 0x30
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}
 80061ec:	58024400 	.word	0x58024400
 80061f0:	ffff0007 	.word	0xffff0007

080061f4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b086      	sub	sp, #24
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d101      	bne.n	8006208 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	e19c      	b.n	8006542 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006208:	4b8a      	ldr	r3, [pc, #552]	; (8006434 <HAL_RCC_ClockConfig+0x240>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f003 030f 	and.w	r3, r3, #15
 8006210:	683a      	ldr	r2, [r7, #0]
 8006212:	429a      	cmp	r2, r3
 8006214:	d910      	bls.n	8006238 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006216:	4b87      	ldr	r3, [pc, #540]	; (8006434 <HAL_RCC_ClockConfig+0x240>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f023 020f 	bic.w	r2, r3, #15
 800621e:	4985      	ldr	r1, [pc, #532]	; (8006434 <HAL_RCC_ClockConfig+0x240>)
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	4313      	orrs	r3, r2
 8006224:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006226:	4b83      	ldr	r3, [pc, #524]	; (8006434 <HAL_RCC_ClockConfig+0x240>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f003 030f 	and.w	r3, r3, #15
 800622e:	683a      	ldr	r2, [r7, #0]
 8006230:	429a      	cmp	r2, r3
 8006232:	d001      	beq.n	8006238 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	e184      	b.n	8006542 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f003 0304 	and.w	r3, r3, #4
 8006240:	2b00      	cmp	r3, #0
 8006242:	d010      	beq.n	8006266 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	691a      	ldr	r2, [r3, #16]
 8006248:	4b7b      	ldr	r3, [pc, #492]	; (8006438 <HAL_RCC_ClockConfig+0x244>)
 800624a:	699b      	ldr	r3, [r3, #24]
 800624c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006250:	429a      	cmp	r2, r3
 8006252:	d908      	bls.n	8006266 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006254:	4b78      	ldr	r3, [pc, #480]	; (8006438 <HAL_RCC_ClockConfig+0x244>)
 8006256:	699b      	ldr	r3, [r3, #24]
 8006258:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	691b      	ldr	r3, [r3, #16]
 8006260:	4975      	ldr	r1, [pc, #468]	; (8006438 <HAL_RCC_ClockConfig+0x244>)
 8006262:	4313      	orrs	r3, r2
 8006264:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f003 0308 	and.w	r3, r3, #8
 800626e:	2b00      	cmp	r3, #0
 8006270:	d010      	beq.n	8006294 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	695a      	ldr	r2, [r3, #20]
 8006276:	4b70      	ldr	r3, [pc, #448]	; (8006438 <HAL_RCC_ClockConfig+0x244>)
 8006278:	69db      	ldr	r3, [r3, #28]
 800627a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800627e:	429a      	cmp	r2, r3
 8006280:	d908      	bls.n	8006294 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006282:	4b6d      	ldr	r3, [pc, #436]	; (8006438 <HAL_RCC_ClockConfig+0x244>)
 8006284:	69db      	ldr	r3, [r3, #28]
 8006286:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	695b      	ldr	r3, [r3, #20]
 800628e:	496a      	ldr	r1, [pc, #424]	; (8006438 <HAL_RCC_ClockConfig+0x244>)
 8006290:	4313      	orrs	r3, r2
 8006292:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 0310 	and.w	r3, r3, #16
 800629c:	2b00      	cmp	r3, #0
 800629e:	d010      	beq.n	80062c2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	699a      	ldr	r2, [r3, #24]
 80062a4:	4b64      	ldr	r3, [pc, #400]	; (8006438 <HAL_RCC_ClockConfig+0x244>)
 80062a6:	69db      	ldr	r3, [r3, #28]
 80062a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d908      	bls.n	80062c2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80062b0:	4b61      	ldr	r3, [pc, #388]	; (8006438 <HAL_RCC_ClockConfig+0x244>)
 80062b2:	69db      	ldr	r3, [r3, #28]
 80062b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	699b      	ldr	r3, [r3, #24]
 80062bc:	495e      	ldr	r1, [pc, #376]	; (8006438 <HAL_RCC_ClockConfig+0x244>)
 80062be:	4313      	orrs	r3, r2
 80062c0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f003 0320 	and.w	r3, r3, #32
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d010      	beq.n	80062f0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	69da      	ldr	r2, [r3, #28]
 80062d2:	4b59      	ldr	r3, [pc, #356]	; (8006438 <HAL_RCC_ClockConfig+0x244>)
 80062d4:	6a1b      	ldr	r3, [r3, #32]
 80062d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80062da:	429a      	cmp	r2, r3
 80062dc:	d908      	bls.n	80062f0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80062de:	4b56      	ldr	r3, [pc, #344]	; (8006438 <HAL_RCC_ClockConfig+0x244>)
 80062e0:	6a1b      	ldr	r3, [r3, #32]
 80062e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	69db      	ldr	r3, [r3, #28]
 80062ea:	4953      	ldr	r1, [pc, #332]	; (8006438 <HAL_RCC_ClockConfig+0x244>)
 80062ec:	4313      	orrs	r3, r2
 80062ee:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f003 0302 	and.w	r3, r3, #2
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d010      	beq.n	800631e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	68da      	ldr	r2, [r3, #12]
 8006300:	4b4d      	ldr	r3, [pc, #308]	; (8006438 <HAL_RCC_ClockConfig+0x244>)
 8006302:	699b      	ldr	r3, [r3, #24]
 8006304:	f003 030f 	and.w	r3, r3, #15
 8006308:	429a      	cmp	r2, r3
 800630a:	d908      	bls.n	800631e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800630c:	4b4a      	ldr	r3, [pc, #296]	; (8006438 <HAL_RCC_ClockConfig+0x244>)
 800630e:	699b      	ldr	r3, [r3, #24]
 8006310:	f023 020f 	bic.w	r2, r3, #15
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	4947      	ldr	r1, [pc, #284]	; (8006438 <HAL_RCC_ClockConfig+0x244>)
 800631a:	4313      	orrs	r3, r2
 800631c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f003 0301 	and.w	r3, r3, #1
 8006326:	2b00      	cmp	r3, #0
 8006328:	d055      	beq.n	80063d6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800632a:	4b43      	ldr	r3, [pc, #268]	; (8006438 <HAL_RCC_ClockConfig+0x244>)
 800632c:	699b      	ldr	r3, [r3, #24]
 800632e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	4940      	ldr	r1, [pc, #256]	; (8006438 <HAL_RCC_ClockConfig+0x244>)
 8006338:	4313      	orrs	r3, r2
 800633a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	2b02      	cmp	r3, #2
 8006342:	d107      	bne.n	8006354 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006344:	4b3c      	ldr	r3, [pc, #240]	; (8006438 <HAL_RCC_ClockConfig+0x244>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800634c:	2b00      	cmp	r3, #0
 800634e:	d121      	bne.n	8006394 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	e0f6      	b.n	8006542 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	2b03      	cmp	r3, #3
 800635a:	d107      	bne.n	800636c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800635c:	4b36      	ldr	r3, [pc, #216]	; (8006438 <HAL_RCC_ClockConfig+0x244>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006364:	2b00      	cmp	r3, #0
 8006366:	d115      	bne.n	8006394 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	e0ea      	b.n	8006542 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	2b01      	cmp	r3, #1
 8006372:	d107      	bne.n	8006384 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006374:	4b30      	ldr	r3, [pc, #192]	; (8006438 <HAL_RCC_ClockConfig+0x244>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800637c:	2b00      	cmp	r3, #0
 800637e:	d109      	bne.n	8006394 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	e0de      	b.n	8006542 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006384:	4b2c      	ldr	r3, [pc, #176]	; (8006438 <HAL_RCC_ClockConfig+0x244>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f003 0304 	and.w	r3, r3, #4
 800638c:	2b00      	cmp	r3, #0
 800638e:	d101      	bne.n	8006394 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	e0d6      	b.n	8006542 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006394:	4b28      	ldr	r3, [pc, #160]	; (8006438 <HAL_RCC_ClockConfig+0x244>)
 8006396:	691b      	ldr	r3, [r3, #16]
 8006398:	f023 0207 	bic.w	r2, r3, #7
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	4925      	ldr	r1, [pc, #148]	; (8006438 <HAL_RCC_ClockConfig+0x244>)
 80063a2:	4313      	orrs	r3, r2
 80063a4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063a6:	f7fc fb67 	bl	8002a78 <HAL_GetTick>
 80063aa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063ac:	e00a      	b.n	80063c4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063ae:	f7fc fb63 	bl	8002a78 <HAL_GetTick>
 80063b2:	4602      	mov	r2, r0
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	1ad3      	subs	r3, r2, r3
 80063b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80063bc:	4293      	cmp	r3, r2
 80063be:	d901      	bls.n	80063c4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80063c0:	2303      	movs	r3, #3
 80063c2:	e0be      	b.n	8006542 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063c4:	4b1c      	ldr	r3, [pc, #112]	; (8006438 <HAL_RCC_ClockConfig+0x244>)
 80063c6:	691b      	ldr	r3, [r3, #16]
 80063c8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	00db      	lsls	r3, r3, #3
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d1eb      	bne.n	80063ae <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f003 0302 	and.w	r3, r3, #2
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d010      	beq.n	8006404 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	68da      	ldr	r2, [r3, #12]
 80063e6:	4b14      	ldr	r3, [pc, #80]	; (8006438 <HAL_RCC_ClockConfig+0x244>)
 80063e8:	699b      	ldr	r3, [r3, #24]
 80063ea:	f003 030f 	and.w	r3, r3, #15
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d208      	bcs.n	8006404 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063f2:	4b11      	ldr	r3, [pc, #68]	; (8006438 <HAL_RCC_ClockConfig+0x244>)
 80063f4:	699b      	ldr	r3, [r3, #24]
 80063f6:	f023 020f 	bic.w	r2, r3, #15
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	490e      	ldr	r1, [pc, #56]	; (8006438 <HAL_RCC_ClockConfig+0x244>)
 8006400:	4313      	orrs	r3, r2
 8006402:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006404:	4b0b      	ldr	r3, [pc, #44]	; (8006434 <HAL_RCC_ClockConfig+0x240>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f003 030f 	and.w	r3, r3, #15
 800640c:	683a      	ldr	r2, [r7, #0]
 800640e:	429a      	cmp	r2, r3
 8006410:	d214      	bcs.n	800643c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006412:	4b08      	ldr	r3, [pc, #32]	; (8006434 <HAL_RCC_ClockConfig+0x240>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f023 020f 	bic.w	r2, r3, #15
 800641a:	4906      	ldr	r1, [pc, #24]	; (8006434 <HAL_RCC_ClockConfig+0x240>)
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	4313      	orrs	r3, r2
 8006420:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006422:	4b04      	ldr	r3, [pc, #16]	; (8006434 <HAL_RCC_ClockConfig+0x240>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f003 030f 	and.w	r3, r3, #15
 800642a:	683a      	ldr	r2, [r7, #0]
 800642c:	429a      	cmp	r2, r3
 800642e:	d005      	beq.n	800643c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	e086      	b.n	8006542 <HAL_RCC_ClockConfig+0x34e>
 8006434:	52002000 	.word	0x52002000
 8006438:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f003 0304 	and.w	r3, r3, #4
 8006444:	2b00      	cmp	r3, #0
 8006446:	d010      	beq.n	800646a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	691a      	ldr	r2, [r3, #16]
 800644c:	4b3f      	ldr	r3, [pc, #252]	; (800654c <HAL_RCC_ClockConfig+0x358>)
 800644e:	699b      	ldr	r3, [r3, #24]
 8006450:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006454:	429a      	cmp	r2, r3
 8006456:	d208      	bcs.n	800646a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006458:	4b3c      	ldr	r3, [pc, #240]	; (800654c <HAL_RCC_ClockConfig+0x358>)
 800645a:	699b      	ldr	r3, [r3, #24]
 800645c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	691b      	ldr	r3, [r3, #16]
 8006464:	4939      	ldr	r1, [pc, #228]	; (800654c <HAL_RCC_ClockConfig+0x358>)
 8006466:	4313      	orrs	r3, r2
 8006468:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 0308 	and.w	r3, r3, #8
 8006472:	2b00      	cmp	r3, #0
 8006474:	d010      	beq.n	8006498 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	695a      	ldr	r2, [r3, #20]
 800647a:	4b34      	ldr	r3, [pc, #208]	; (800654c <HAL_RCC_ClockConfig+0x358>)
 800647c:	69db      	ldr	r3, [r3, #28]
 800647e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006482:	429a      	cmp	r2, r3
 8006484:	d208      	bcs.n	8006498 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006486:	4b31      	ldr	r3, [pc, #196]	; (800654c <HAL_RCC_ClockConfig+0x358>)
 8006488:	69db      	ldr	r3, [r3, #28]
 800648a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	695b      	ldr	r3, [r3, #20]
 8006492:	492e      	ldr	r1, [pc, #184]	; (800654c <HAL_RCC_ClockConfig+0x358>)
 8006494:	4313      	orrs	r3, r2
 8006496:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f003 0310 	and.w	r3, r3, #16
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d010      	beq.n	80064c6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	699a      	ldr	r2, [r3, #24]
 80064a8:	4b28      	ldr	r3, [pc, #160]	; (800654c <HAL_RCC_ClockConfig+0x358>)
 80064aa:	69db      	ldr	r3, [r3, #28]
 80064ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d208      	bcs.n	80064c6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80064b4:	4b25      	ldr	r3, [pc, #148]	; (800654c <HAL_RCC_ClockConfig+0x358>)
 80064b6:	69db      	ldr	r3, [r3, #28]
 80064b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	699b      	ldr	r3, [r3, #24]
 80064c0:	4922      	ldr	r1, [pc, #136]	; (800654c <HAL_RCC_ClockConfig+0x358>)
 80064c2:	4313      	orrs	r3, r2
 80064c4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f003 0320 	and.w	r3, r3, #32
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d010      	beq.n	80064f4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	69da      	ldr	r2, [r3, #28]
 80064d6:	4b1d      	ldr	r3, [pc, #116]	; (800654c <HAL_RCC_ClockConfig+0x358>)
 80064d8:	6a1b      	ldr	r3, [r3, #32]
 80064da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80064de:	429a      	cmp	r2, r3
 80064e0:	d208      	bcs.n	80064f4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80064e2:	4b1a      	ldr	r3, [pc, #104]	; (800654c <HAL_RCC_ClockConfig+0x358>)
 80064e4:	6a1b      	ldr	r3, [r3, #32]
 80064e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	69db      	ldr	r3, [r3, #28]
 80064ee:	4917      	ldr	r1, [pc, #92]	; (800654c <HAL_RCC_ClockConfig+0x358>)
 80064f0:	4313      	orrs	r3, r2
 80064f2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80064f4:	f000 f834 	bl	8006560 <HAL_RCC_GetSysClockFreq>
 80064f8:	4602      	mov	r2, r0
 80064fa:	4b14      	ldr	r3, [pc, #80]	; (800654c <HAL_RCC_ClockConfig+0x358>)
 80064fc:	699b      	ldr	r3, [r3, #24]
 80064fe:	0a1b      	lsrs	r3, r3, #8
 8006500:	f003 030f 	and.w	r3, r3, #15
 8006504:	4912      	ldr	r1, [pc, #72]	; (8006550 <HAL_RCC_ClockConfig+0x35c>)
 8006506:	5ccb      	ldrb	r3, [r1, r3]
 8006508:	f003 031f 	and.w	r3, r3, #31
 800650c:	fa22 f303 	lsr.w	r3, r2, r3
 8006510:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006512:	4b0e      	ldr	r3, [pc, #56]	; (800654c <HAL_RCC_ClockConfig+0x358>)
 8006514:	699b      	ldr	r3, [r3, #24]
 8006516:	f003 030f 	and.w	r3, r3, #15
 800651a:	4a0d      	ldr	r2, [pc, #52]	; (8006550 <HAL_RCC_ClockConfig+0x35c>)
 800651c:	5cd3      	ldrb	r3, [r2, r3]
 800651e:	f003 031f 	and.w	r3, r3, #31
 8006522:	693a      	ldr	r2, [r7, #16]
 8006524:	fa22 f303 	lsr.w	r3, r2, r3
 8006528:	4a0a      	ldr	r2, [pc, #40]	; (8006554 <HAL_RCC_ClockConfig+0x360>)
 800652a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800652c:	4a0a      	ldr	r2, [pc, #40]	; (8006558 <HAL_RCC_ClockConfig+0x364>)
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006532:	4b0a      	ldr	r3, [pc, #40]	; (800655c <HAL_RCC_ClockConfig+0x368>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4618      	mov	r0, r3
 8006538:	f7fc fa54 	bl	80029e4 <HAL_InitTick>
 800653c:	4603      	mov	r3, r0
 800653e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006540:	7bfb      	ldrb	r3, [r7, #15]
}
 8006542:	4618      	mov	r0, r3
 8006544:	3718      	adds	r7, #24
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop
 800654c:	58024400 	.word	0x58024400
 8006550:	0800bf3c 	.word	0x0800bf3c
 8006554:	24000004 	.word	0x24000004
 8006558:	24000000 	.word	0x24000000
 800655c:	24000008 	.word	0x24000008

08006560 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006560:	b480      	push	{r7}
 8006562:	b089      	sub	sp, #36	; 0x24
 8006564:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006566:	4bb3      	ldr	r3, [pc, #716]	; (8006834 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006568:	691b      	ldr	r3, [r3, #16]
 800656a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800656e:	2b18      	cmp	r3, #24
 8006570:	f200 8155 	bhi.w	800681e <HAL_RCC_GetSysClockFreq+0x2be>
 8006574:	a201      	add	r2, pc, #4	; (adr r2, 800657c <HAL_RCC_GetSysClockFreq+0x1c>)
 8006576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800657a:	bf00      	nop
 800657c:	080065e1 	.word	0x080065e1
 8006580:	0800681f 	.word	0x0800681f
 8006584:	0800681f 	.word	0x0800681f
 8006588:	0800681f 	.word	0x0800681f
 800658c:	0800681f 	.word	0x0800681f
 8006590:	0800681f 	.word	0x0800681f
 8006594:	0800681f 	.word	0x0800681f
 8006598:	0800681f 	.word	0x0800681f
 800659c:	08006607 	.word	0x08006607
 80065a0:	0800681f 	.word	0x0800681f
 80065a4:	0800681f 	.word	0x0800681f
 80065a8:	0800681f 	.word	0x0800681f
 80065ac:	0800681f 	.word	0x0800681f
 80065b0:	0800681f 	.word	0x0800681f
 80065b4:	0800681f 	.word	0x0800681f
 80065b8:	0800681f 	.word	0x0800681f
 80065bc:	0800660d 	.word	0x0800660d
 80065c0:	0800681f 	.word	0x0800681f
 80065c4:	0800681f 	.word	0x0800681f
 80065c8:	0800681f 	.word	0x0800681f
 80065cc:	0800681f 	.word	0x0800681f
 80065d0:	0800681f 	.word	0x0800681f
 80065d4:	0800681f 	.word	0x0800681f
 80065d8:	0800681f 	.word	0x0800681f
 80065dc:	08006613 	.word	0x08006613
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065e0:	4b94      	ldr	r3, [pc, #592]	; (8006834 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 0320 	and.w	r3, r3, #32
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d009      	beq.n	8006600 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80065ec:	4b91      	ldr	r3, [pc, #580]	; (8006834 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	08db      	lsrs	r3, r3, #3
 80065f2:	f003 0303 	and.w	r3, r3, #3
 80065f6:	4a90      	ldr	r2, [pc, #576]	; (8006838 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80065f8:	fa22 f303 	lsr.w	r3, r2, r3
 80065fc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80065fe:	e111      	b.n	8006824 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006600:	4b8d      	ldr	r3, [pc, #564]	; (8006838 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006602:	61bb      	str	r3, [r7, #24]
      break;
 8006604:	e10e      	b.n	8006824 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006606:	4b8d      	ldr	r3, [pc, #564]	; (800683c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006608:	61bb      	str	r3, [r7, #24]
      break;
 800660a:	e10b      	b.n	8006824 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800660c:	4b8c      	ldr	r3, [pc, #560]	; (8006840 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800660e:	61bb      	str	r3, [r7, #24]
      break;
 8006610:	e108      	b.n	8006824 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006612:	4b88      	ldr	r3, [pc, #544]	; (8006834 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006616:	f003 0303 	and.w	r3, r3, #3
 800661a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800661c:	4b85      	ldr	r3, [pc, #532]	; (8006834 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800661e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006620:	091b      	lsrs	r3, r3, #4
 8006622:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006626:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006628:	4b82      	ldr	r3, [pc, #520]	; (8006834 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800662a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800662c:	f003 0301 	and.w	r3, r3, #1
 8006630:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006632:	4b80      	ldr	r3, [pc, #512]	; (8006834 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006636:	08db      	lsrs	r3, r3, #3
 8006638:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800663c:	68fa      	ldr	r2, [r7, #12]
 800663e:	fb02 f303 	mul.w	r3, r2, r3
 8006642:	ee07 3a90 	vmov	s15, r3
 8006646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800664a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	2b00      	cmp	r3, #0
 8006652:	f000 80e1 	beq.w	8006818 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	2b02      	cmp	r3, #2
 800665a:	f000 8083 	beq.w	8006764 <HAL_RCC_GetSysClockFreq+0x204>
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	2b02      	cmp	r3, #2
 8006662:	f200 80a1 	bhi.w	80067a8 <HAL_RCC_GetSysClockFreq+0x248>
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d003      	beq.n	8006674 <HAL_RCC_GetSysClockFreq+0x114>
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	2b01      	cmp	r3, #1
 8006670:	d056      	beq.n	8006720 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006672:	e099      	b.n	80067a8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006674:	4b6f      	ldr	r3, [pc, #444]	; (8006834 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f003 0320 	and.w	r3, r3, #32
 800667c:	2b00      	cmp	r3, #0
 800667e:	d02d      	beq.n	80066dc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006680:	4b6c      	ldr	r3, [pc, #432]	; (8006834 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	08db      	lsrs	r3, r3, #3
 8006686:	f003 0303 	and.w	r3, r3, #3
 800668a:	4a6b      	ldr	r2, [pc, #428]	; (8006838 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800668c:	fa22 f303 	lsr.w	r3, r2, r3
 8006690:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	ee07 3a90 	vmov	s15, r3
 8006698:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	ee07 3a90 	vmov	s15, r3
 80066a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066aa:	4b62      	ldr	r3, [pc, #392]	; (8006834 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066b2:	ee07 3a90 	vmov	s15, r3
 80066b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80066be:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006844 <HAL_RCC_GetSysClockFreq+0x2e4>
 80066c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066d6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80066da:	e087      	b.n	80067ec <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	ee07 3a90 	vmov	s15, r3
 80066e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066e6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006848 <HAL_RCC_GetSysClockFreq+0x2e8>
 80066ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066ee:	4b51      	ldr	r3, [pc, #324]	; (8006834 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066f6:	ee07 3a90 	vmov	s15, r3
 80066fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8006702:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006844 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006706:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800670a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800670e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006712:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800671a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800671e:	e065      	b.n	80067ec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	ee07 3a90 	vmov	s15, r3
 8006726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800672a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800684c <HAL_RCC_GetSysClockFreq+0x2ec>
 800672e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006732:	4b40      	ldr	r3, [pc, #256]	; (8006834 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800673a:	ee07 3a90 	vmov	s15, r3
 800673e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006742:	ed97 6a02 	vldr	s12, [r7, #8]
 8006746:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006844 <HAL_RCC_GetSysClockFreq+0x2e4>
 800674a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800674e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006752:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006756:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800675a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800675e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006762:	e043      	b.n	80067ec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	ee07 3a90 	vmov	s15, r3
 800676a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800676e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006850 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006772:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006776:	4b2f      	ldr	r3, [pc, #188]	; (8006834 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800677a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800677e:	ee07 3a90 	vmov	s15, r3
 8006782:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006786:	ed97 6a02 	vldr	s12, [r7, #8]
 800678a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006844 <HAL_RCC_GetSysClockFreq+0x2e4>
 800678e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006792:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006796:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800679a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800679e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80067a6:	e021      	b.n	80067ec <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	ee07 3a90 	vmov	s15, r3
 80067ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067b2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800684c <HAL_RCC_GetSysClockFreq+0x2ec>
 80067b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067ba:	4b1e      	ldr	r3, [pc, #120]	; (8006834 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067c2:	ee07 3a90 	vmov	s15, r3
 80067c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80067ce:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006844 <HAL_RCC_GetSysClockFreq+0x2e4>
 80067d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80067ea:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80067ec:	4b11      	ldr	r3, [pc, #68]	; (8006834 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067f0:	0a5b      	lsrs	r3, r3, #9
 80067f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067f6:	3301      	adds	r3, #1
 80067f8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	ee07 3a90 	vmov	s15, r3
 8006800:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006804:	edd7 6a07 	vldr	s13, [r7, #28]
 8006808:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800680c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006810:	ee17 3a90 	vmov	r3, s15
 8006814:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006816:	e005      	b.n	8006824 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006818:	2300      	movs	r3, #0
 800681a:	61bb      	str	r3, [r7, #24]
      break;
 800681c:	e002      	b.n	8006824 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800681e:	4b07      	ldr	r3, [pc, #28]	; (800683c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006820:	61bb      	str	r3, [r7, #24]
      break;
 8006822:	bf00      	nop
  }

  return sysclockfreq;
 8006824:	69bb      	ldr	r3, [r7, #24]
}
 8006826:	4618      	mov	r0, r3
 8006828:	3724      	adds	r7, #36	; 0x24
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr
 8006832:	bf00      	nop
 8006834:	58024400 	.word	0x58024400
 8006838:	03d09000 	.word	0x03d09000
 800683c:	003d0900 	.word	0x003d0900
 8006840:	017d7840 	.word	0x017d7840
 8006844:	46000000 	.word	0x46000000
 8006848:	4c742400 	.word	0x4c742400
 800684c:	4a742400 	.word	0x4a742400
 8006850:	4bbebc20 	.word	0x4bbebc20

08006854 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b082      	sub	sp, #8
 8006858:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800685a:	f7ff fe81 	bl	8006560 <HAL_RCC_GetSysClockFreq>
 800685e:	4602      	mov	r2, r0
 8006860:	4b10      	ldr	r3, [pc, #64]	; (80068a4 <HAL_RCC_GetHCLKFreq+0x50>)
 8006862:	699b      	ldr	r3, [r3, #24]
 8006864:	0a1b      	lsrs	r3, r3, #8
 8006866:	f003 030f 	and.w	r3, r3, #15
 800686a:	490f      	ldr	r1, [pc, #60]	; (80068a8 <HAL_RCC_GetHCLKFreq+0x54>)
 800686c:	5ccb      	ldrb	r3, [r1, r3]
 800686e:	f003 031f 	and.w	r3, r3, #31
 8006872:	fa22 f303 	lsr.w	r3, r2, r3
 8006876:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006878:	4b0a      	ldr	r3, [pc, #40]	; (80068a4 <HAL_RCC_GetHCLKFreq+0x50>)
 800687a:	699b      	ldr	r3, [r3, #24]
 800687c:	f003 030f 	and.w	r3, r3, #15
 8006880:	4a09      	ldr	r2, [pc, #36]	; (80068a8 <HAL_RCC_GetHCLKFreq+0x54>)
 8006882:	5cd3      	ldrb	r3, [r2, r3]
 8006884:	f003 031f 	and.w	r3, r3, #31
 8006888:	687a      	ldr	r2, [r7, #4]
 800688a:	fa22 f303 	lsr.w	r3, r2, r3
 800688e:	4a07      	ldr	r2, [pc, #28]	; (80068ac <HAL_RCC_GetHCLKFreq+0x58>)
 8006890:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006892:	4a07      	ldr	r2, [pc, #28]	; (80068b0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006898:	4b04      	ldr	r3, [pc, #16]	; (80068ac <HAL_RCC_GetHCLKFreq+0x58>)
 800689a:	681b      	ldr	r3, [r3, #0]
}
 800689c:	4618      	mov	r0, r3
 800689e:	3708      	adds	r7, #8
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}
 80068a4:	58024400 	.word	0x58024400
 80068a8:	0800bf3c 	.word	0x0800bf3c
 80068ac:	24000004 	.word	0x24000004
 80068b0:	24000000 	.word	0x24000000

080068b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80068b8:	f7ff ffcc 	bl	8006854 <HAL_RCC_GetHCLKFreq>
 80068bc:	4602      	mov	r2, r0
 80068be:	4b06      	ldr	r3, [pc, #24]	; (80068d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80068c0:	69db      	ldr	r3, [r3, #28]
 80068c2:	091b      	lsrs	r3, r3, #4
 80068c4:	f003 0307 	and.w	r3, r3, #7
 80068c8:	4904      	ldr	r1, [pc, #16]	; (80068dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80068ca:	5ccb      	ldrb	r3, [r1, r3]
 80068cc:	f003 031f 	and.w	r3, r3, #31
 80068d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	bd80      	pop	{r7, pc}
 80068d8:	58024400 	.word	0x58024400
 80068dc:	0800bf3c 	.word	0x0800bf3c

080068e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80068e4:	f7ff ffb6 	bl	8006854 <HAL_RCC_GetHCLKFreq>
 80068e8:	4602      	mov	r2, r0
 80068ea:	4b06      	ldr	r3, [pc, #24]	; (8006904 <HAL_RCC_GetPCLK2Freq+0x24>)
 80068ec:	69db      	ldr	r3, [r3, #28]
 80068ee:	0a1b      	lsrs	r3, r3, #8
 80068f0:	f003 0307 	and.w	r3, r3, #7
 80068f4:	4904      	ldr	r1, [pc, #16]	; (8006908 <HAL_RCC_GetPCLK2Freq+0x28>)
 80068f6:	5ccb      	ldrb	r3, [r1, r3]
 80068f8:	f003 031f 	and.w	r3, r3, #31
 80068fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006900:	4618      	mov	r0, r3
 8006902:	bd80      	pop	{r7, pc}
 8006904:	58024400 	.word	0x58024400
 8006908:	0800bf3c 	.word	0x0800bf3c

0800690c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800690c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006910:	b0ca      	sub	sp, #296	; 0x128
 8006912:	af00      	add	r7, sp, #0
 8006914:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006918:	2300      	movs	r3, #0
 800691a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800691e:	2300      	movs	r3, #0
 8006920:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006924:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800692c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8006930:	2500      	movs	r5, #0
 8006932:	ea54 0305 	orrs.w	r3, r4, r5
 8006936:	d049      	beq.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006938:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800693c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800693e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006942:	d02f      	beq.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006944:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006948:	d828      	bhi.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800694a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800694e:	d01a      	beq.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006950:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006954:	d822      	bhi.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006956:	2b00      	cmp	r3, #0
 8006958:	d003      	beq.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800695a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800695e:	d007      	beq.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006960:	e01c      	b.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006962:	4bb8      	ldr	r3, [pc, #736]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006966:	4ab7      	ldr	r2, [pc, #732]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800696c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800696e:	e01a      	b.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006970:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006974:	3308      	adds	r3, #8
 8006976:	2102      	movs	r1, #2
 8006978:	4618      	mov	r0, r3
 800697a:	f002 fb61 	bl	8009040 <RCCEx_PLL2_Config>
 800697e:	4603      	mov	r3, r0
 8006980:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006984:	e00f      	b.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006986:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800698a:	3328      	adds	r3, #40	; 0x28
 800698c:	2102      	movs	r1, #2
 800698e:	4618      	mov	r0, r3
 8006990:	f002 fc08 	bl	80091a4 <RCCEx_PLL3_Config>
 8006994:	4603      	mov	r3, r0
 8006996:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800699a:	e004      	b.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800699c:	2301      	movs	r3, #1
 800699e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80069a2:	e000      	b.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80069a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d10a      	bne.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80069ae:	4ba5      	ldr	r3, [pc, #660]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80069b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069b2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80069b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069bc:	4aa1      	ldr	r2, [pc, #644]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80069be:	430b      	orrs	r3, r1
 80069c0:	6513      	str	r3, [r2, #80]	; 0x50
 80069c2:	e003      	b.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80069c8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80069cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80069d8:	f04f 0900 	mov.w	r9, #0
 80069dc:	ea58 0309 	orrs.w	r3, r8, r9
 80069e0:	d047      	beq.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80069e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069e8:	2b04      	cmp	r3, #4
 80069ea:	d82a      	bhi.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80069ec:	a201      	add	r2, pc, #4	; (adr r2, 80069f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80069ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069f2:	bf00      	nop
 80069f4:	08006a09 	.word	0x08006a09
 80069f8:	08006a17 	.word	0x08006a17
 80069fc:	08006a2d 	.word	0x08006a2d
 8006a00:	08006a4b 	.word	0x08006a4b
 8006a04:	08006a4b 	.word	0x08006a4b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a08:	4b8e      	ldr	r3, [pc, #568]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a0c:	4a8d      	ldr	r2, [pc, #564]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006a14:	e01a      	b.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a1a:	3308      	adds	r3, #8
 8006a1c:	2100      	movs	r1, #0
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f002 fb0e 	bl	8009040 <RCCEx_PLL2_Config>
 8006a24:	4603      	mov	r3, r0
 8006a26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006a2a:	e00f      	b.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006a2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a30:	3328      	adds	r3, #40	; 0x28
 8006a32:	2100      	movs	r1, #0
 8006a34:	4618      	mov	r0, r3
 8006a36:	f002 fbb5 	bl	80091a4 <RCCEx_PLL3_Config>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006a40:	e004      	b.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a42:	2301      	movs	r3, #1
 8006a44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006a48:	e000      	b.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006a4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d10a      	bne.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006a54:	4b7b      	ldr	r3, [pc, #492]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a58:	f023 0107 	bic.w	r1, r3, #7
 8006a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a62:	4a78      	ldr	r2, [pc, #480]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a64:	430b      	orrs	r3, r1
 8006a66:	6513      	str	r3, [r2, #80]	; 0x50
 8006a68:	e003      	b.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a6e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a7a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8006a7e:	f04f 0b00 	mov.w	fp, #0
 8006a82:	ea5a 030b 	orrs.w	r3, sl, fp
 8006a86:	d04c      	beq.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a92:	d030      	beq.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006a94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a98:	d829      	bhi.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006a9a:	2bc0      	cmp	r3, #192	; 0xc0
 8006a9c:	d02d      	beq.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006a9e:	2bc0      	cmp	r3, #192	; 0xc0
 8006aa0:	d825      	bhi.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006aa2:	2b80      	cmp	r3, #128	; 0x80
 8006aa4:	d018      	beq.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006aa6:	2b80      	cmp	r3, #128	; 0x80
 8006aa8:	d821      	bhi.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d002      	beq.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006aae:	2b40      	cmp	r3, #64	; 0x40
 8006ab0:	d007      	beq.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006ab2:	e01c      	b.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ab4:	4b63      	ldr	r3, [pc, #396]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ab8:	4a62      	ldr	r2, [pc, #392]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006aba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006abe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006ac0:	e01c      	b.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ac6:	3308      	adds	r3, #8
 8006ac8:	2100      	movs	r1, #0
 8006aca:	4618      	mov	r0, r3
 8006acc:	f002 fab8 	bl	8009040 <RCCEx_PLL2_Config>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006ad6:	e011      	b.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006adc:	3328      	adds	r3, #40	; 0x28
 8006ade:	2100      	movs	r1, #0
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f002 fb5f 	bl	80091a4 <RCCEx_PLL3_Config>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006aec:	e006      	b.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006af4:	e002      	b.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006af6:	bf00      	nop
 8006af8:	e000      	b.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006afa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006afc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d10a      	bne.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006b04:	4b4f      	ldr	r3, [pc, #316]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b08:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8006b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b12:	4a4c      	ldr	r2, [pc, #304]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b14:	430b      	orrs	r3, r1
 8006b16:	6513      	str	r3, [r2, #80]	; 0x50
 8006b18:	e003      	b.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b1e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b2a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8006b2e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006b32:	2300      	movs	r3, #0
 8006b34:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006b38:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8006b3c:	460b      	mov	r3, r1
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	d053      	beq.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b46:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006b4a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006b4e:	d035      	beq.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006b50:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006b54:	d82e      	bhi.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006b56:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006b5a:	d031      	beq.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006b5c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006b60:	d828      	bhi.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006b62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b66:	d01a      	beq.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006b68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b6c:	d822      	bhi.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d003      	beq.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006b72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b76:	d007      	beq.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006b78:	e01c      	b.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b7a:	4b32      	ldr	r3, [pc, #200]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b7e:	4a31      	ldr	r2, [pc, #196]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b84:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006b86:	e01c      	b.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b8c:	3308      	adds	r3, #8
 8006b8e:	2100      	movs	r1, #0
 8006b90:	4618      	mov	r0, r3
 8006b92:	f002 fa55 	bl	8009040 <RCCEx_PLL2_Config>
 8006b96:	4603      	mov	r3, r0
 8006b98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006b9c:	e011      	b.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ba2:	3328      	adds	r3, #40	; 0x28
 8006ba4:	2100      	movs	r1, #0
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f002 fafc 	bl	80091a4 <RCCEx_PLL3_Config>
 8006bac:	4603      	mov	r3, r0
 8006bae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006bb2:	e006      	b.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006bba:	e002      	b.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006bbc:	bf00      	nop
 8006bbe:	e000      	b.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006bc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d10b      	bne.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006bca:	4b1e      	ldr	r3, [pc, #120]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bce:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8006bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bd6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006bda:	4a1a      	ldr	r2, [pc, #104]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006bdc:	430b      	orrs	r3, r1
 8006bde:	6593      	str	r3, [r2, #88]	; 0x58
 8006be0:	e003      	b.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006be2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006be6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf2:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8006bf6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006c00:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8006c04:	460b      	mov	r3, r1
 8006c06:	4313      	orrs	r3, r2
 8006c08:	d056      	beq.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c0e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006c12:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006c16:	d038      	beq.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006c18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006c1c:	d831      	bhi.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006c1e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006c22:	d034      	beq.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006c24:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006c28:	d82b      	bhi.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006c2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c2e:	d01d      	beq.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006c30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c34:	d825      	bhi.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d006      	beq.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006c3a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006c3e:	d00a      	beq.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006c40:	e01f      	b.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006c42:	bf00      	nop
 8006c44:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c48:	4ba2      	ldr	r3, [pc, #648]	; (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c4c:	4aa1      	ldr	r2, [pc, #644]	; (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006c4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006c54:	e01c      	b.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c5a:	3308      	adds	r3, #8
 8006c5c:	2100      	movs	r1, #0
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f002 f9ee 	bl	8009040 <RCCEx_PLL2_Config>
 8006c64:	4603      	mov	r3, r0
 8006c66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006c6a:	e011      	b.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006c6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c70:	3328      	adds	r3, #40	; 0x28
 8006c72:	2100      	movs	r1, #0
 8006c74:	4618      	mov	r0, r3
 8006c76:	f002 fa95 	bl	80091a4 <RCCEx_PLL3_Config>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006c80:	e006      	b.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006c88:	e002      	b.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006c8a:	bf00      	nop
 8006c8c:	e000      	b.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006c8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d10b      	bne.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006c98:	4b8e      	ldr	r3, [pc, #568]	; (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c9c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8006ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ca4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006ca8:	4a8a      	ldr	r2, [pc, #552]	; (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006caa:	430b      	orrs	r3, r1
 8006cac:	6593      	str	r3, [r2, #88]	; 0x58
 8006cae:	e003      	b.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cb0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006cb4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006cb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006cc4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006cc8:	2300      	movs	r3, #0
 8006cca:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006cce:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8006cd2:	460b      	mov	r3, r1
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	d03a      	beq.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006cd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cde:	2b30      	cmp	r3, #48	; 0x30
 8006ce0:	d01f      	beq.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006ce2:	2b30      	cmp	r3, #48	; 0x30
 8006ce4:	d819      	bhi.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006ce6:	2b20      	cmp	r3, #32
 8006ce8:	d00c      	beq.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006cea:	2b20      	cmp	r3, #32
 8006cec:	d815      	bhi.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d019      	beq.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006cf2:	2b10      	cmp	r3, #16
 8006cf4:	d111      	bne.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cf6:	4b77      	ldr	r3, [pc, #476]	; (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cfa:	4a76      	ldr	r2, [pc, #472]	; (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006cfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d00:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006d02:	e011      	b.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006d04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d08:	3308      	adds	r3, #8
 8006d0a:	2102      	movs	r1, #2
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f002 f997 	bl	8009040 <RCCEx_PLL2_Config>
 8006d12:	4603      	mov	r3, r0
 8006d14:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006d18:	e006      	b.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006d20:	e002      	b.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006d22:	bf00      	nop
 8006d24:	e000      	b.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006d26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d28:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d10a      	bne.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006d30:	4b68      	ldr	r3, [pc, #416]	; (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d34:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8006d38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d3e:	4a65      	ldr	r2, [pc, #404]	; (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d40:	430b      	orrs	r3, r1
 8006d42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006d44:	e003      	b.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d4a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d56:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8006d5a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006d5e:	2300      	movs	r3, #0
 8006d60:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006d64:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8006d68:	460b      	mov	r3, r1
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	d051      	beq.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d78:	d035      	beq.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006d7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d7e:	d82e      	bhi.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006d80:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006d84:	d031      	beq.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006d86:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006d8a:	d828      	bhi.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006d8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d90:	d01a      	beq.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006d92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d96:	d822      	bhi.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d003      	beq.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006d9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006da0:	d007      	beq.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006da2:	e01c      	b.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006da4:	4b4b      	ldr	r3, [pc, #300]	; (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da8:	4a4a      	ldr	r2, [pc, #296]	; (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006daa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006dae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006db0:	e01c      	b.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006db6:	3308      	adds	r3, #8
 8006db8:	2100      	movs	r1, #0
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f002 f940 	bl	8009040 <RCCEx_PLL2_Config>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006dc6:	e011      	b.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006dcc:	3328      	adds	r3, #40	; 0x28
 8006dce:	2100      	movs	r1, #0
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f002 f9e7 	bl	80091a4 <RCCEx_PLL3_Config>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006ddc:	e006      	b.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006dde:	2301      	movs	r3, #1
 8006de0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006de4:	e002      	b.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006de6:	bf00      	nop
 8006de8:	e000      	b.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006dea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d10a      	bne.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006df4:	4b37      	ldr	r3, [pc, #220]	; (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006df6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006df8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e02:	4a34      	ldr	r2, [pc, #208]	; (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006e04:	430b      	orrs	r3, r1
 8006e06:	6513      	str	r3, [r2, #80]	; 0x50
 8006e08:	e003      	b.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e0e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e1a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8006e1e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006e22:	2300      	movs	r3, #0
 8006e24:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006e28:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8006e2c:	460b      	mov	r3, r1
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	d056      	beq.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006e3c:	d033      	beq.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006e3e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006e42:	d82c      	bhi.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006e44:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006e48:	d02f      	beq.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006e4a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006e4e:	d826      	bhi.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006e50:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006e54:	d02b      	beq.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8006e56:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006e5a:	d820      	bhi.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006e5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e60:	d012      	beq.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006e62:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e66:	d81a      	bhi.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d022      	beq.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006e6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e70:	d115      	bne.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e76:	3308      	adds	r3, #8
 8006e78:	2101      	movs	r1, #1
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f002 f8e0 	bl	8009040 <RCCEx_PLL2_Config>
 8006e80:	4603      	mov	r3, r0
 8006e82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006e86:	e015      	b.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006e88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e8c:	3328      	adds	r3, #40	; 0x28
 8006e8e:	2101      	movs	r1, #1
 8006e90:	4618      	mov	r0, r3
 8006e92:	f002 f987 	bl	80091a4 <RCCEx_PLL3_Config>
 8006e96:	4603      	mov	r3, r0
 8006e98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006e9c:	e00a      	b.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006ea4:	e006      	b.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006ea6:	bf00      	nop
 8006ea8:	e004      	b.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006eaa:	bf00      	nop
 8006eac:	e002      	b.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006eae:	bf00      	nop
 8006eb0:	e000      	b.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006eb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006eb4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d10d      	bne.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006ebc:	4b05      	ldr	r3, [pc, #20]	; (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006ebe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ec0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ec8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006eca:	4a02      	ldr	r2, [pc, #8]	; (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006ecc:	430b      	orrs	r3, r1
 8006ece:	6513      	str	r3, [r2, #80]	; 0x50
 8006ed0:	e006      	b.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006ed2:	bf00      	nop
 8006ed4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ed8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006edc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee8:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8006eec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006ef6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8006efa:	460b      	mov	r3, r1
 8006efc:	4313      	orrs	r3, r2
 8006efe:	d055      	beq.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006f00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f04:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006f0c:	d033      	beq.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006f0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006f12:	d82c      	bhi.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006f14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f18:	d02f      	beq.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f1e:	d826      	bhi.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006f20:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006f24:	d02b      	beq.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006f26:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006f2a:	d820      	bhi.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006f2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f30:	d012      	beq.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006f32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f36:	d81a      	bhi.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d022      	beq.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006f3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f40:	d115      	bne.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f46:	3308      	adds	r3, #8
 8006f48:	2101      	movs	r1, #1
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f002 f878 	bl	8009040 <RCCEx_PLL2_Config>
 8006f50:	4603      	mov	r3, r0
 8006f52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006f56:	e015      	b.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f5c:	3328      	adds	r3, #40	; 0x28
 8006f5e:	2101      	movs	r1, #1
 8006f60:	4618      	mov	r0, r3
 8006f62:	f002 f91f 	bl	80091a4 <RCCEx_PLL3_Config>
 8006f66:	4603      	mov	r3, r0
 8006f68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006f6c:	e00a      	b.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006f74:	e006      	b.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006f76:	bf00      	nop
 8006f78:	e004      	b.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006f7a:	bf00      	nop
 8006f7c:	e002      	b.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006f7e:	bf00      	nop
 8006f80:	e000      	b.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006f82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f84:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d10b      	bne.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006f8c:	4ba3      	ldr	r3, [pc, #652]	; (800721c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f90:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006f94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f98:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f9c:	4a9f      	ldr	r2, [pc, #636]	; (800721c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f9e:	430b      	orrs	r3, r1
 8006fa0:	6593      	str	r3, [r2, #88]	; 0x58
 8006fa2:	e003      	b.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fa4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006fa8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006fac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8006fb8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006fc2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006fc6:	460b      	mov	r3, r1
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	d037      	beq.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006fcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fd6:	d00e      	beq.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006fd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fdc:	d816      	bhi.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d018      	beq.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006fe2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006fe6:	d111      	bne.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fe8:	4b8c      	ldr	r3, [pc, #560]	; (800721c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fec:	4a8b      	ldr	r2, [pc, #556]	; (800721c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ff2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006ff4:	e00f      	b.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ffa:	3308      	adds	r3, #8
 8006ffc:	2101      	movs	r1, #1
 8006ffe:	4618      	mov	r0, r3
 8007000:	f002 f81e 	bl	8009040 <RCCEx_PLL2_Config>
 8007004:	4603      	mov	r3, r0
 8007006:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800700a:	e004      	b.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800700c:	2301      	movs	r3, #1
 800700e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007012:	e000      	b.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007014:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007016:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800701a:	2b00      	cmp	r3, #0
 800701c:	d10a      	bne.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800701e:	4b7f      	ldr	r3, [pc, #508]	; (800721c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007020:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007022:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007026:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800702a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800702c:	4a7b      	ldr	r2, [pc, #492]	; (800721c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800702e:	430b      	orrs	r3, r1
 8007030:	6513      	str	r3, [r2, #80]	; 0x50
 8007032:	e003      	b.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007034:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007038:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800703c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007044:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8007048:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800704c:	2300      	movs	r3, #0
 800704e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007052:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8007056:	460b      	mov	r3, r1
 8007058:	4313      	orrs	r3, r2
 800705a:	d039      	beq.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800705c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007060:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007062:	2b03      	cmp	r3, #3
 8007064:	d81c      	bhi.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007066:	a201      	add	r2, pc, #4	; (adr r2, 800706c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800706c:	080070a9 	.word	0x080070a9
 8007070:	0800707d 	.word	0x0800707d
 8007074:	0800708b 	.word	0x0800708b
 8007078:	080070a9 	.word	0x080070a9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800707c:	4b67      	ldr	r3, [pc, #412]	; (800721c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800707e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007080:	4a66      	ldr	r2, [pc, #408]	; (800721c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007082:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007086:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007088:	e00f      	b.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800708a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800708e:	3308      	adds	r3, #8
 8007090:	2102      	movs	r1, #2
 8007092:	4618      	mov	r0, r3
 8007094:	f001 ffd4 	bl	8009040 <RCCEx_PLL2_Config>
 8007098:	4603      	mov	r3, r0
 800709a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800709e:	e004      	b.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80070a0:	2301      	movs	r3, #1
 80070a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80070a6:	e000      	b.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80070a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d10a      	bne.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80070b2:	4b5a      	ldr	r3, [pc, #360]	; (800721c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070b6:	f023 0103 	bic.w	r1, r3, #3
 80070ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070c0:	4a56      	ldr	r2, [pc, #344]	; (800721c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070c2:	430b      	orrs	r3, r1
 80070c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80070c6:	e003      	b.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80070cc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80070d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80070dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80070e0:	2300      	movs	r3, #0
 80070e2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80070e6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80070ea:	460b      	mov	r3, r1
 80070ec:	4313      	orrs	r3, r2
 80070ee:	f000 809f 	beq.w	8007230 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80070f2:	4b4b      	ldr	r3, [pc, #300]	; (8007220 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a4a      	ldr	r2, [pc, #296]	; (8007220 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80070f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80070fe:	f7fb fcbb 	bl	8002a78 <HAL_GetTick>
 8007102:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007106:	e00b      	b.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007108:	f7fb fcb6 	bl	8002a78 <HAL_GetTick>
 800710c:	4602      	mov	r2, r0
 800710e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007112:	1ad3      	subs	r3, r2, r3
 8007114:	2b64      	cmp	r3, #100	; 0x64
 8007116:	d903      	bls.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007118:	2303      	movs	r3, #3
 800711a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800711e:	e005      	b.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007120:	4b3f      	ldr	r3, [pc, #252]	; (8007220 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007128:	2b00      	cmp	r3, #0
 800712a:	d0ed      	beq.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800712c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007130:	2b00      	cmp	r3, #0
 8007132:	d179      	bne.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007134:	4b39      	ldr	r3, [pc, #228]	; (800721c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007136:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007138:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800713c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007140:	4053      	eors	r3, r2
 8007142:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007146:	2b00      	cmp	r3, #0
 8007148:	d015      	beq.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800714a:	4b34      	ldr	r3, [pc, #208]	; (800721c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800714c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800714e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007152:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007156:	4b31      	ldr	r3, [pc, #196]	; (800721c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800715a:	4a30      	ldr	r2, [pc, #192]	; (800721c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800715c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007160:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007162:	4b2e      	ldr	r3, [pc, #184]	; (800721c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007166:	4a2d      	ldr	r2, [pc, #180]	; (800721c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007168:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800716c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800716e:	4a2b      	ldr	r2, [pc, #172]	; (800721c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007170:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007174:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007176:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800717a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800717e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007182:	d118      	bne.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007184:	f7fb fc78 	bl	8002a78 <HAL_GetTick>
 8007188:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800718c:	e00d      	b.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800718e:	f7fb fc73 	bl	8002a78 <HAL_GetTick>
 8007192:	4602      	mov	r2, r0
 8007194:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007198:	1ad2      	subs	r2, r2, r3
 800719a:	f241 3388 	movw	r3, #5000	; 0x1388
 800719e:	429a      	cmp	r2, r3
 80071a0:	d903      	bls.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80071a2:	2303      	movs	r3, #3
 80071a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 80071a8:	e005      	b.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80071aa:	4b1c      	ldr	r3, [pc, #112]	; (800721c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071ae:	f003 0302 	and.w	r3, r3, #2
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d0eb      	beq.n	800718e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80071b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d129      	bne.n	8007212 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80071be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80071c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071ce:	d10e      	bne.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80071d0:	4b12      	ldr	r3, [pc, #72]	; (800721c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071d2:	691b      	ldr	r3, [r3, #16]
 80071d4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80071d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071dc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80071e0:	091a      	lsrs	r2, r3, #4
 80071e2:	4b10      	ldr	r3, [pc, #64]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80071e4:	4013      	ands	r3, r2
 80071e6:	4a0d      	ldr	r2, [pc, #52]	; (800721c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071e8:	430b      	orrs	r3, r1
 80071ea:	6113      	str	r3, [r2, #16]
 80071ec:	e005      	b.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80071ee:	4b0b      	ldr	r3, [pc, #44]	; (800721c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071f0:	691b      	ldr	r3, [r3, #16]
 80071f2:	4a0a      	ldr	r2, [pc, #40]	; (800721c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071f4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80071f8:	6113      	str	r3, [r2, #16]
 80071fa:	4b08      	ldr	r3, [pc, #32]	; (800721c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071fc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80071fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007202:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007206:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800720a:	4a04      	ldr	r2, [pc, #16]	; (800721c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800720c:	430b      	orrs	r3, r1
 800720e:	6713      	str	r3, [r2, #112]	; 0x70
 8007210:	e00e      	b.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007212:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007216:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800721a:	e009      	b.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800721c:	58024400 	.word	0x58024400
 8007220:	58024800 	.word	0x58024800
 8007224:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007228:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800722c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007230:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007238:	f002 0301 	and.w	r3, r2, #1
 800723c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007240:	2300      	movs	r3, #0
 8007242:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007246:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800724a:	460b      	mov	r3, r1
 800724c:	4313      	orrs	r3, r2
 800724e:	f000 8089 	beq.w	8007364 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007252:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007256:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007258:	2b28      	cmp	r3, #40	; 0x28
 800725a:	d86b      	bhi.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800725c:	a201      	add	r2, pc, #4	; (adr r2, 8007264 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800725e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007262:	bf00      	nop
 8007264:	0800733d 	.word	0x0800733d
 8007268:	08007335 	.word	0x08007335
 800726c:	08007335 	.word	0x08007335
 8007270:	08007335 	.word	0x08007335
 8007274:	08007335 	.word	0x08007335
 8007278:	08007335 	.word	0x08007335
 800727c:	08007335 	.word	0x08007335
 8007280:	08007335 	.word	0x08007335
 8007284:	08007309 	.word	0x08007309
 8007288:	08007335 	.word	0x08007335
 800728c:	08007335 	.word	0x08007335
 8007290:	08007335 	.word	0x08007335
 8007294:	08007335 	.word	0x08007335
 8007298:	08007335 	.word	0x08007335
 800729c:	08007335 	.word	0x08007335
 80072a0:	08007335 	.word	0x08007335
 80072a4:	0800731f 	.word	0x0800731f
 80072a8:	08007335 	.word	0x08007335
 80072ac:	08007335 	.word	0x08007335
 80072b0:	08007335 	.word	0x08007335
 80072b4:	08007335 	.word	0x08007335
 80072b8:	08007335 	.word	0x08007335
 80072bc:	08007335 	.word	0x08007335
 80072c0:	08007335 	.word	0x08007335
 80072c4:	0800733d 	.word	0x0800733d
 80072c8:	08007335 	.word	0x08007335
 80072cc:	08007335 	.word	0x08007335
 80072d0:	08007335 	.word	0x08007335
 80072d4:	08007335 	.word	0x08007335
 80072d8:	08007335 	.word	0x08007335
 80072dc:	08007335 	.word	0x08007335
 80072e0:	08007335 	.word	0x08007335
 80072e4:	0800733d 	.word	0x0800733d
 80072e8:	08007335 	.word	0x08007335
 80072ec:	08007335 	.word	0x08007335
 80072f0:	08007335 	.word	0x08007335
 80072f4:	08007335 	.word	0x08007335
 80072f8:	08007335 	.word	0x08007335
 80072fc:	08007335 	.word	0x08007335
 8007300:	08007335 	.word	0x08007335
 8007304:	0800733d 	.word	0x0800733d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007308:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800730c:	3308      	adds	r3, #8
 800730e:	2101      	movs	r1, #1
 8007310:	4618      	mov	r0, r3
 8007312:	f001 fe95 	bl	8009040 <RCCEx_PLL2_Config>
 8007316:	4603      	mov	r3, r0
 8007318:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800731c:	e00f      	b.n	800733e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800731e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007322:	3328      	adds	r3, #40	; 0x28
 8007324:	2101      	movs	r1, #1
 8007326:	4618      	mov	r0, r3
 8007328:	f001 ff3c 	bl	80091a4 <RCCEx_PLL3_Config>
 800732c:	4603      	mov	r3, r0
 800732e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007332:	e004      	b.n	800733e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007334:	2301      	movs	r3, #1
 8007336:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800733a:	e000      	b.n	800733e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800733c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800733e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007342:	2b00      	cmp	r3, #0
 8007344:	d10a      	bne.n	800735c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007346:	4bbf      	ldr	r3, [pc, #764]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800734a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800734e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007352:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007354:	4abb      	ldr	r2, [pc, #748]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007356:	430b      	orrs	r3, r1
 8007358:	6553      	str	r3, [r2, #84]	; 0x54
 800735a:	e003      	b.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800735c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007360:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007364:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800736c:	f002 0302 	and.w	r3, r2, #2
 8007370:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007374:	2300      	movs	r3, #0
 8007376:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800737a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800737e:	460b      	mov	r3, r1
 8007380:	4313      	orrs	r3, r2
 8007382:	d041      	beq.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007384:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007388:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800738a:	2b05      	cmp	r3, #5
 800738c:	d824      	bhi.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800738e:	a201      	add	r2, pc, #4	; (adr r2, 8007394 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007394:	080073e1 	.word	0x080073e1
 8007398:	080073ad 	.word	0x080073ad
 800739c:	080073c3 	.word	0x080073c3
 80073a0:	080073e1 	.word	0x080073e1
 80073a4:	080073e1 	.word	0x080073e1
 80073a8:	080073e1 	.word	0x080073e1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80073ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073b0:	3308      	adds	r3, #8
 80073b2:	2101      	movs	r1, #1
 80073b4:	4618      	mov	r0, r3
 80073b6:	f001 fe43 	bl	8009040 <RCCEx_PLL2_Config>
 80073ba:	4603      	mov	r3, r0
 80073bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80073c0:	e00f      	b.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80073c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073c6:	3328      	adds	r3, #40	; 0x28
 80073c8:	2101      	movs	r1, #1
 80073ca:	4618      	mov	r0, r3
 80073cc:	f001 feea 	bl	80091a4 <RCCEx_PLL3_Config>
 80073d0:	4603      	mov	r3, r0
 80073d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80073d6:	e004      	b.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073d8:	2301      	movs	r3, #1
 80073da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80073de:	e000      	b.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80073e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d10a      	bne.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80073ea:	4b96      	ldr	r3, [pc, #600]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80073ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073ee:	f023 0107 	bic.w	r1, r3, #7
 80073f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073f8:	4a92      	ldr	r2, [pc, #584]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80073fa:	430b      	orrs	r3, r1
 80073fc:	6553      	str	r3, [r2, #84]	; 0x54
 80073fe:	e003      	b.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007400:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007404:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007408:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800740c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007410:	f002 0304 	and.w	r3, r2, #4
 8007414:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007418:	2300      	movs	r3, #0
 800741a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800741e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8007422:	460b      	mov	r3, r1
 8007424:	4313      	orrs	r3, r2
 8007426:	d044      	beq.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007428:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800742c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007430:	2b05      	cmp	r3, #5
 8007432:	d825      	bhi.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007434:	a201      	add	r2, pc, #4	; (adr r2, 800743c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800743a:	bf00      	nop
 800743c:	08007489 	.word	0x08007489
 8007440:	08007455 	.word	0x08007455
 8007444:	0800746b 	.word	0x0800746b
 8007448:	08007489 	.word	0x08007489
 800744c:	08007489 	.word	0x08007489
 8007450:	08007489 	.word	0x08007489
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007454:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007458:	3308      	adds	r3, #8
 800745a:	2101      	movs	r1, #1
 800745c:	4618      	mov	r0, r3
 800745e:	f001 fdef 	bl	8009040 <RCCEx_PLL2_Config>
 8007462:	4603      	mov	r3, r0
 8007464:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007468:	e00f      	b.n	800748a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800746a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800746e:	3328      	adds	r3, #40	; 0x28
 8007470:	2101      	movs	r1, #1
 8007472:	4618      	mov	r0, r3
 8007474:	f001 fe96 	bl	80091a4 <RCCEx_PLL3_Config>
 8007478:	4603      	mov	r3, r0
 800747a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800747e:	e004      	b.n	800748a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007480:	2301      	movs	r3, #1
 8007482:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007486:	e000      	b.n	800748a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007488:	bf00      	nop
    }

    if (ret == HAL_OK)
 800748a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800748e:	2b00      	cmp	r3, #0
 8007490:	d10b      	bne.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007492:	4b6c      	ldr	r3, [pc, #432]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007496:	f023 0107 	bic.w	r1, r3, #7
 800749a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800749e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80074a2:	4a68      	ldr	r2, [pc, #416]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80074a4:	430b      	orrs	r3, r1
 80074a6:	6593      	str	r3, [r2, #88]	; 0x58
 80074a8:	e003      	b.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80074ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80074b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ba:	f002 0320 	and.w	r3, r2, #32
 80074be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80074c2:	2300      	movs	r3, #0
 80074c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80074c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80074cc:	460b      	mov	r3, r1
 80074ce:	4313      	orrs	r3, r2
 80074d0:	d055      	beq.n	800757e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80074d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80074de:	d033      	beq.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80074e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80074e4:	d82c      	bhi.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80074e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074ea:	d02f      	beq.n	800754c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80074ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074f0:	d826      	bhi.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80074f2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80074f6:	d02b      	beq.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80074f8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80074fc:	d820      	bhi.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80074fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007502:	d012      	beq.n	800752a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007504:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007508:	d81a      	bhi.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800750a:	2b00      	cmp	r3, #0
 800750c:	d022      	beq.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800750e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007512:	d115      	bne.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007514:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007518:	3308      	adds	r3, #8
 800751a:	2100      	movs	r1, #0
 800751c:	4618      	mov	r0, r3
 800751e:	f001 fd8f 	bl	8009040 <RCCEx_PLL2_Config>
 8007522:	4603      	mov	r3, r0
 8007524:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007528:	e015      	b.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800752a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800752e:	3328      	adds	r3, #40	; 0x28
 8007530:	2102      	movs	r1, #2
 8007532:	4618      	mov	r0, r3
 8007534:	f001 fe36 	bl	80091a4 <RCCEx_PLL3_Config>
 8007538:	4603      	mov	r3, r0
 800753a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800753e:	e00a      	b.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007540:	2301      	movs	r3, #1
 8007542:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007546:	e006      	b.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007548:	bf00      	nop
 800754a:	e004      	b.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800754c:	bf00      	nop
 800754e:	e002      	b.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007550:	bf00      	nop
 8007552:	e000      	b.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007554:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007556:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800755a:	2b00      	cmp	r3, #0
 800755c:	d10b      	bne.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800755e:	4b39      	ldr	r3, [pc, #228]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007562:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007566:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800756a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800756e:	4a35      	ldr	r2, [pc, #212]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007570:	430b      	orrs	r3, r1
 8007572:	6553      	str	r3, [r2, #84]	; 0x54
 8007574:	e003      	b.n	800757e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007576:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800757a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800757e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007586:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800758a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800758e:	2300      	movs	r3, #0
 8007590:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007594:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8007598:	460b      	mov	r3, r1
 800759a:	4313      	orrs	r3, r2
 800759c:	d058      	beq.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800759e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80075a6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80075aa:	d033      	beq.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80075ac:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80075b0:	d82c      	bhi.n	800760c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80075b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075b6:	d02f      	beq.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80075b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075bc:	d826      	bhi.n	800760c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80075be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80075c2:	d02b      	beq.n	800761c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80075c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80075c8:	d820      	bhi.n	800760c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80075ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075ce:	d012      	beq.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80075d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075d4:	d81a      	bhi.n	800760c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d022      	beq.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80075da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075de:	d115      	bne.n	800760c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80075e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075e4:	3308      	adds	r3, #8
 80075e6:	2100      	movs	r1, #0
 80075e8:	4618      	mov	r0, r3
 80075ea:	f001 fd29 	bl	8009040 <RCCEx_PLL2_Config>
 80075ee:	4603      	mov	r3, r0
 80075f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80075f4:	e015      	b.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80075f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075fa:	3328      	adds	r3, #40	; 0x28
 80075fc:	2102      	movs	r1, #2
 80075fe:	4618      	mov	r0, r3
 8007600:	f001 fdd0 	bl	80091a4 <RCCEx_PLL3_Config>
 8007604:	4603      	mov	r3, r0
 8007606:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800760a:	e00a      	b.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800760c:	2301      	movs	r3, #1
 800760e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007612:	e006      	b.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007614:	bf00      	nop
 8007616:	e004      	b.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007618:	bf00      	nop
 800761a:	e002      	b.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800761c:	bf00      	nop
 800761e:	e000      	b.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007620:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007622:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007626:	2b00      	cmp	r3, #0
 8007628:	d10e      	bne.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800762a:	4b06      	ldr	r3, [pc, #24]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800762c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800762e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8007632:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007636:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800763a:	4a02      	ldr	r2, [pc, #8]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800763c:	430b      	orrs	r3, r1
 800763e:	6593      	str	r3, [r2, #88]	; 0x58
 8007640:	e006      	b.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007642:	bf00      	nop
 8007644:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007648:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800764c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007650:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007658:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800765c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007660:	2300      	movs	r3, #0
 8007662:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007666:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800766a:	460b      	mov	r3, r1
 800766c:	4313      	orrs	r3, r2
 800766e:	d055      	beq.n	800771c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007670:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007674:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007678:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800767c:	d033      	beq.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800767e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007682:	d82c      	bhi.n	80076de <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007684:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007688:	d02f      	beq.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800768a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800768e:	d826      	bhi.n	80076de <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007690:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007694:	d02b      	beq.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007696:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800769a:	d820      	bhi.n	80076de <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800769c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80076a0:	d012      	beq.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80076a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80076a6:	d81a      	bhi.n	80076de <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d022      	beq.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80076ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076b0:	d115      	bne.n	80076de <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80076b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076b6:	3308      	adds	r3, #8
 80076b8:	2100      	movs	r1, #0
 80076ba:	4618      	mov	r0, r3
 80076bc:	f001 fcc0 	bl	8009040 <RCCEx_PLL2_Config>
 80076c0:	4603      	mov	r3, r0
 80076c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80076c6:	e015      	b.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80076c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076cc:	3328      	adds	r3, #40	; 0x28
 80076ce:	2102      	movs	r1, #2
 80076d0:	4618      	mov	r0, r3
 80076d2:	f001 fd67 	bl	80091a4 <RCCEx_PLL3_Config>
 80076d6:	4603      	mov	r3, r0
 80076d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80076dc:	e00a      	b.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076de:	2301      	movs	r3, #1
 80076e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80076e4:	e006      	b.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80076e6:	bf00      	nop
 80076e8:	e004      	b.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80076ea:	bf00      	nop
 80076ec:	e002      	b.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80076ee:	bf00      	nop
 80076f0:	e000      	b.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80076f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d10b      	bne.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80076fc:	4ba1      	ldr	r3, [pc, #644]	; (8007984 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80076fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007700:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8007704:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007708:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800770c:	4a9d      	ldr	r2, [pc, #628]	; (8007984 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800770e:	430b      	orrs	r3, r1
 8007710:	6593      	str	r3, [r2, #88]	; 0x58
 8007712:	e003      	b.n	800771c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007714:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007718:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800771c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007724:	f002 0308 	and.w	r3, r2, #8
 8007728:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800772c:	2300      	movs	r3, #0
 800772e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007732:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8007736:	460b      	mov	r3, r1
 8007738:	4313      	orrs	r3, r2
 800773a:	d01e      	beq.n	800777a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800773c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007740:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007744:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007748:	d10c      	bne.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800774a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800774e:	3328      	adds	r3, #40	; 0x28
 8007750:	2102      	movs	r1, #2
 8007752:	4618      	mov	r0, r3
 8007754:	f001 fd26 	bl	80091a4 <RCCEx_PLL3_Config>
 8007758:	4603      	mov	r3, r0
 800775a:	2b00      	cmp	r3, #0
 800775c:	d002      	beq.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800775e:	2301      	movs	r3, #1
 8007760:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007764:	4b87      	ldr	r3, [pc, #540]	; (8007984 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007768:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800776c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007770:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007774:	4a83      	ldr	r2, [pc, #524]	; (8007984 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007776:	430b      	orrs	r3, r1
 8007778:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800777a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800777e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007782:	f002 0310 	and.w	r3, r2, #16
 8007786:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800778a:	2300      	movs	r3, #0
 800778c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007790:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8007794:	460b      	mov	r3, r1
 8007796:	4313      	orrs	r3, r2
 8007798:	d01e      	beq.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800779a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800779e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80077a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077a6:	d10c      	bne.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80077a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077ac:	3328      	adds	r3, #40	; 0x28
 80077ae:	2102      	movs	r1, #2
 80077b0:	4618      	mov	r0, r3
 80077b2:	f001 fcf7 	bl	80091a4 <RCCEx_PLL3_Config>
 80077b6:	4603      	mov	r3, r0
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d002      	beq.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80077bc:	2301      	movs	r3, #1
 80077be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80077c2:	4b70      	ldr	r3, [pc, #448]	; (8007984 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80077c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80077ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80077d2:	4a6c      	ldr	r2, [pc, #432]	; (8007984 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80077d4:	430b      	orrs	r3, r1
 80077d6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80077d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80077e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80077e8:	2300      	movs	r3, #0
 80077ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80077ee:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80077f2:	460b      	mov	r3, r1
 80077f4:	4313      	orrs	r3, r2
 80077f6:	d03e      	beq.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80077f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007800:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007804:	d022      	beq.n	800784c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007806:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800780a:	d81b      	bhi.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800780c:	2b00      	cmp	r3, #0
 800780e:	d003      	beq.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007810:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007814:	d00b      	beq.n	800782e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007816:	e015      	b.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007818:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800781c:	3308      	adds	r3, #8
 800781e:	2100      	movs	r1, #0
 8007820:	4618      	mov	r0, r3
 8007822:	f001 fc0d 	bl	8009040 <RCCEx_PLL2_Config>
 8007826:	4603      	mov	r3, r0
 8007828:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800782c:	e00f      	b.n	800784e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800782e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007832:	3328      	adds	r3, #40	; 0x28
 8007834:	2102      	movs	r1, #2
 8007836:	4618      	mov	r0, r3
 8007838:	f001 fcb4 	bl	80091a4 <RCCEx_PLL3_Config>
 800783c:	4603      	mov	r3, r0
 800783e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007842:	e004      	b.n	800784e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007844:	2301      	movs	r3, #1
 8007846:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800784a:	e000      	b.n	800784e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800784c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800784e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007852:	2b00      	cmp	r3, #0
 8007854:	d10b      	bne.n	800786e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007856:	4b4b      	ldr	r3, [pc, #300]	; (8007984 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800785a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800785e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007862:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007866:	4a47      	ldr	r2, [pc, #284]	; (8007984 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007868:	430b      	orrs	r3, r1
 800786a:	6593      	str	r3, [r2, #88]	; 0x58
 800786c:	e003      	b.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800786e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007872:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007876:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800787a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800787e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8007882:	67bb      	str	r3, [r7, #120]	; 0x78
 8007884:	2300      	movs	r3, #0
 8007886:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007888:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800788c:	460b      	mov	r3, r1
 800788e:	4313      	orrs	r3, r2
 8007890:	d03b      	beq.n	800790a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007892:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800789a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800789e:	d01f      	beq.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80078a0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80078a4:	d818      	bhi.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80078a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078aa:	d003      	beq.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80078ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80078b0:	d007      	beq.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80078b2:	e011      	b.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078b4:	4b33      	ldr	r3, [pc, #204]	; (8007984 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80078b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b8:	4a32      	ldr	r2, [pc, #200]	; (8007984 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80078ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80078c0:	e00f      	b.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80078c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078c6:	3328      	adds	r3, #40	; 0x28
 80078c8:	2101      	movs	r1, #1
 80078ca:	4618      	mov	r0, r3
 80078cc:	f001 fc6a 	bl	80091a4 <RCCEx_PLL3_Config>
 80078d0:	4603      	mov	r3, r0
 80078d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80078d6:	e004      	b.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078d8:	2301      	movs	r3, #1
 80078da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80078de:	e000      	b.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80078e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d10b      	bne.n	8007902 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80078ea:	4b26      	ldr	r3, [pc, #152]	; (8007984 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80078ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078ee:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80078f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078fa:	4a22      	ldr	r2, [pc, #136]	; (8007984 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80078fc:	430b      	orrs	r3, r1
 80078fe:	6553      	str	r3, [r2, #84]	; 0x54
 8007900:	e003      	b.n	800790a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007902:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007906:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800790a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800790e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007912:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8007916:	673b      	str	r3, [r7, #112]	; 0x70
 8007918:	2300      	movs	r3, #0
 800791a:	677b      	str	r3, [r7, #116]	; 0x74
 800791c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8007920:	460b      	mov	r3, r1
 8007922:	4313      	orrs	r3, r2
 8007924:	d034      	beq.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007926:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800792a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800792c:	2b00      	cmp	r3, #0
 800792e:	d003      	beq.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007934:	d007      	beq.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007936:	e011      	b.n	800795c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007938:	4b12      	ldr	r3, [pc, #72]	; (8007984 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800793a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800793c:	4a11      	ldr	r2, [pc, #68]	; (8007984 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800793e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007942:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007944:	e00e      	b.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007946:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800794a:	3308      	adds	r3, #8
 800794c:	2102      	movs	r1, #2
 800794e:	4618      	mov	r0, r3
 8007950:	f001 fb76 	bl	8009040 <RCCEx_PLL2_Config>
 8007954:	4603      	mov	r3, r0
 8007956:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800795a:	e003      	b.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800795c:	2301      	movs	r3, #1
 800795e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007962:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007964:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007968:	2b00      	cmp	r3, #0
 800796a:	d10d      	bne.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800796c:	4b05      	ldr	r3, [pc, #20]	; (8007984 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800796e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007970:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007974:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007978:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800797a:	4a02      	ldr	r2, [pc, #8]	; (8007984 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800797c:	430b      	orrs	r3, r1
 800797e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007980:	e006      	b.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007982:	bf00      	nop
 8007984:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007988:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800798c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007990:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007998:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800799c:	66bb      	str	r3, [r7, #104]	; 0x68
 800799e:	2300      	movs	r3, #0
 80079a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80079a2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80079a6:	460b      	mov	r3, r1
 80079a8:	4313      	orrs	r3, r2
 80079aa:	d00c      	beq.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80079ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079b0:	3328      	adds	r3, #40	; 0x28
 80079b2:	2102      	movs	r1, #2
 80079b4:	4618      	mov	r0, r3
 80079b6:	f001 fbf5 	bl	80091a4 <RCCEx_PLL3_Config>
 80079ba:	4603      	mov	r3, r0
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d002      	beq.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80079c0:	2301      	movs	r3, #1
 80079c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80079c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ce:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80079d2:	663b      	str	r3, [r7, #96]	; 0x60
 80079d4:	2300      	movs	r3, #0
 80079d6:	667b      	str	r3, [r7, #100]	; 0x64
 80079d8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80079dc:	460b      	mov	r3, r1
 80079de:	4313      	orrs	r3, r2
 80079e0:	d038      	beq.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80079e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079ee:	d018      	beq.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80079f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079f4:	d811      	bhi.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80079f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079fa:	d014      	beq.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80079fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a00:	d80b      	bhi.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d011      	beq.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007a06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a0a:	d106      	bne.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a0c:	4bc3      	ldr	r3, [pc, #780]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a10:	4ac2      	ldr	r2, [pc, #776]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007a18:	e008      	b.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007a20:	e004      	b.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007a22:	bf00      	nop
 8007a24:	e002      	b.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007a26:	bf00      	nop
 8007a28:	e000      	b.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007a2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d10b      	bne.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007a34:	4bb9      	ldr	r3, [pc, #740]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a38:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a44:	4ab5      	ldr	r2, [pc, #724]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a46:	430b      	orrs	r3, r1
 8007a48:	6553      	str	r3, [r2, #84]	; 0x54
 8007a4a:	e003      	b.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a50:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007a54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a5c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8007a60:	65bb      	str	r3, [r7, #88]	; 0x58
 8007a62:	2300      	movs	r3, #0
 8007a64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a66:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8007a6a:	460b      	mov	r3, r1
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	d009      	beq.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007a70:	4baa      	ldr	r3, [pc, #680]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a74:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a7e:	4aa7      	ldr	r2, [pc, #668]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a80:	430b      	orrs	r3, r1
 8007a82:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a8c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8007a90:	653b      	str	r3, [r7, #80]	; 0x50
 8007a92:	2300      	movs	r3, #0
 8007a94:	657b      	str	r3, [r7, #84]	; 0x54
 8007a96:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8007a9a:	460b      	mov	r3, r1
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	d00a      	beq.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007aa0:	4b9e      	ldr	r3, [pc, #632]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007aa2:	691b      	ldr	r3, [r3, #16]
 8007aa4:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8007aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007aac:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007ab0:	4a9a      	ldr	r2, [pc, #616]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ab2:	430b      	orrs	r3, r1
 8007ab4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007abe:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8007ac2:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ac8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8007acc:	460b      	mov	r3, r1
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	d009      	beq.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007ad2:	4b92      	ldr	r3, [pc, #584]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ad4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ad6:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8007ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ade:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ae0:	4a8e      	ldr	r2, [pc, #568]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ae2:	430b      	orrs	r3, r1
 8007ae4:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aee:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8007af2:	643b      	str	r3, [r7, #64]	; 0x40
 8007af4:	2300      	movs	r3, #0
 8007af6:	647b      	str	r3, [r7, #68]	; 0x44
 8007af8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8007afc:	460b      	mov	r3, r1
 8007afe:	4313      	orrs	r3, r2
 8007b00:	d00e      	beq.n	8007b20 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007b02:	4b86      	ldr	r3, [pc, #536]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b04:	691b      	ldr	r3, [r3, #16]
 8007b06:	4a85      	ldr	r2, [pc, #532]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b08:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007b0c:	6113      	str	r3, [r2, #16]
 8007b0e:	4b83      	ldr	r3, [pc, #524]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b10:	6919      	ldr	r1, [r3, #16]
 8007b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b16:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007b1a:	4a80      	ldr	r2, [pc, #512]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b1c:	430b      	orrs	r3, r1
 8007b1e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b28:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8007b2c:	63bb      	str	r3, [r7, #56]	; 0x38
 8007b2e:	2300      	movs	r3, #0
 8007b30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b32:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8007b36:	460b      	mov	r3, r1
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	d009      	beq.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007b3c:	4b77      	ldr	r3, [pc, #476]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b40:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b4a:	4a74      	ldr	r2, [pc, #464]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b4c:	430b      	orrs	r3, r1
 8007b4e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007b50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b58:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8007b5c:	633b      	str	r3, [r7, #48]	; 0x30
 8007b5e:	2300      	movs	r3, #0
 8007b60:	637b      	str	r3, [r7, #52]	; 0x34
 8007b62:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8007b66:	460b      	mov	r3, r1
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	d00a      	beq.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007b6c:	4b6b      	ldr	r3, [pc, #428]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b70:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8007b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b7c:	4a67      	ldr	r2, [pc, #412]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b7e:	430b      	orrs	r3, r1
 8007b80:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b8a:	2100      	movs	r1, #0
 8007b8c:	62b9      	str	r1, [r7, #40]	; 0x28
 8007b8e:	f003 0301 	and.w	r3, r3, #1
 8007b92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b94:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007b98:	460b      	mov	r3, r1
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	d011      	beq.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ba2:	3308      	adds	r3, #8
 8007ba4:	2100      	movs	r1, #0
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f001 fa4a 	bl	8009040 <RCCEx_PLL2_Config>
 8007bac:	4603      	mov	r3, r0
 8007bae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007bb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d003      	beq.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007bbe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bca:	2100      	movs	r1, #0
 8007bcc:	6239      	str	r1, [r7, #32]
 8007bce:	f003 0302 	and.w	r3, r3, #2
 8007bd2:	627b      	str	r3, [r7, #36]	; 0x24
 8007bd4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007bd8:	460b      	mov	r3, r1
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	d011      	beq.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007be2:	3308      	adds	r3, #8
 8007be4:	2101      	movs	r1, #1
 8007be6:	4618      	mov	r0, r3
 8007be8:	f001 fa2a 	bl	8009040 <RCCEx_PLL2_Config>
 8007bec:	4603      	mov	r3, r0
 8007bee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007bf2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d003      	beq.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bfa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007bfe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c0a:	2100      	movs	r1, #0
 8007c0c:	61b9      	str	r1, [r7, #24]
 8007c0e:	f003 0304 	and.w	r3, r3, #4
 8007c12:	61fb      	str	r3, [r7, #28]
 8007c14:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007c18:	460b      	mov	r3, r1
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	d011      	beq.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c22:	3308      	adds	r3, #8
 8007c24:	2102      	movs	r1, #2
 8007c26:	4618      	mov	r0, r3
 8007c28:	f001 fa0a 	bl	8009040 <RCCEx_PLL2_Config>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007c32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d003      	beq.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c3e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c4a:	2100      	movs	r1, #0
 8007c4c:	6139      	str	r1, [r7, #16]
 8007c4e:	f003 0308 	and.w	r3, r3, #8
 8007c52:	617b      	str	r3, [r7, #20]
 8007c54:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007c58:	460b      	mov	r3, r1
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	d011      	beq.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c62:	3328      	adds	r3, #40	; 0x28
 8007c64:	2100      	movs	r1, #0
 8007c66:	4618      	mov	r0, r3
 8007c68:	f001 fa9c 	bl	80091a4 <RCCEx_PLL3_Config>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8007c72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d003      	beq.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c7e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c8a:	2100      	movs	r1, #0
 8007c8c:	60b9      	str	r1, [r7, #8]
 8007c8e:	f003 0310 	and.w	r3, r3, #16
 8007c92:	60fb      	str	r3, [r7, #12]
 8007c94:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007c98:	460b      	mov	r3, r1
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	d011      	beq.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ca2:	3328      	adds	r3, #40	; 0x28
 8007ca4:	2101      	movs	r1, #1
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f001 fa7c 	bl	80091a4 <RCCEx_PLL3_Config>
 8007cac:	4603      	mov	r3, r0
 8007cae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007cb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d003      	beq.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007cbe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cca:	2100      	movs	r1, #0
 8007ccc:	6039      	str	r1, [r7, #0]
 8007cce:	f003 0320 	and.w	r3, r3, #32
 8007cd2:	607b      	str	r3, [r7, #4]
 8007cd4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007cd8:	460b      	mov	r3, r1
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	d011      	beq.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ce2:	3328      	adds	r3, #40	; 0x28
 8007ce4:	2102      	movs	r1, #2
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f001 fa5c 	bl	80091a4 <RCCEx_PLL3_Config>
 8007cec:	4603      	mov	r3, r0
 8007cee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007cf2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d003      	beq.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cfa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007cfe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8007d02:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d101      	bne.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	e000      	b.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8007d0e:	2301      	movs	r3, #1
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8007d16:	46bd      	mov	sp, r7
 8007d18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d1c:	58024400 	.word	0x58024400

08007d20 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b090      	sub	sp, #64	; 0x40
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007d2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d2e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8007d32:	430b      	orrs	r3, r1
 8007d34:	f040 8094 	bne.w	8007e60 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007d38:	4b9e      	ldr	r3, [pc, #632]	; (8007fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d3c:	f003 0307 	and.w	r3, r3, #7
 8007d40:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d44:	2b04      	cmp	r3, #4
 8007d46:	f200 8087 	bhi.w	8007e58 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007d4a:	a201      	add	r2, pc, #4	; (adr r2, 8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d50:	08007d65 	.word	0x08007d65
 8007d54:	08007d8d 	.word	0x08007d8d
 8007d58:	08007db5 	.word	0x08007db5
 8007d5c:	08007e51 	.word	0x08007e51
 8007d60:	08007ddd 	.word	0x08007ddd
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007d64:	4b93      	ldr	r3, [pc, #588]	; (8007fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d70:	d108      	bne.n	8007d84 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d76:	4618      	mov	r0, r3
 8007d78:	f001 f810 	bl	8008d9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d80:	f000 bd45 	b.w	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d84:	2300      	movs	r3, #0
 8007d86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d88:	f000 bd41 	b.w	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007d8c:	4b89      	ldr	r3, [pc, #548]	; (8007fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d98:	d108      	bne.n	8007dac <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d9a:	f107 0318 	add.w	r3, r7, #24
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f000 fd54 	bl	800884c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007da4:	69bb      	ldr	r3, [r7, #24]
 8007da6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007da8:	f000 bd31 	b.w	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007dac:	2300      	movs	r3, #0
 8007dae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007db0:	f000 bd2d 	b.w	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007db4:	4b7f      	ldr	r3, [pc, #508]	; (8007fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007dbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007dc0:	d108      	bne.n	8007dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007dc2:	f107 030c 	add.w	r3, r7, #12
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f000 fe94 	bl	8008af4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007dd0:	f000 bd1d 	b.w	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007dd8:	f000 bd19 	b.w	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007ddc:	4b75      	ldr	r3, [pc, #468]	; (8007fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007dde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007de0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007de4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007de6:	4b73      	ldr	r3, [pc, #460]	; (8007fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f003 0304 	and.w	r3, r3, #4
 8007dee:	2b04      	cmp	r3, #4
 8007df0:	d10c      	bne.n	8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d109      	bne.n	8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007df8:	4b6e      	ldr	r3, [pc, #440]	; (8007fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	08db      	lsrs	r3, r3, #3
 8007dfe:	f003 0303 	and.w	r3, r3, #3
 8007e02:	4a6d      	ldr	r2, [pc, #436]	; (8007fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007e04:	fa22 f303 	lsr.w	r3, r2, r3
 8007e08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e0a:	e01f      	b.n	8007e4c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007e0c:	4b69      	ldr	r3, [pc, #420]	; (8007fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e18:	d106      	bne.n	8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8007e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e20:	d102      	bne.n	8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007e22:	4b66      	ldr	r3, [pc, #408]	; (8007fbc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007e24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e26:	e011      	b.n	8007e4c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007e28:	4b62      	ldr	r3, [pc, #392]	; (8007fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e34:	d106      	bne.n	8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8007e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e3c:	d102      	bne.n	8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007e3e:	4b60      	ldr	r3, [pc, #384]	; (8007fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007e40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e42:	e003      	b.n	8007e4c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007e44:	2300      	movs	r3, #0
 8007e46:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007e48:	f000 bce1 	b.w	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007e4c:	f000 bcdf 	b.w	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007e50:	4b5c      	ldr	r3, [pc, #368]	; (8007fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007e52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e54:	f000 bcdb 	b.w	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e5c:	f000 bcd7 	b.w	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007e60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e64:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8007e68:	430b      	orrs	r3, r1
 8007e6a:	f040 80ad 	bne.w	8007fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8007e6e:	4b51      	ldr	r3, [pc, #324]	; (8007fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007e70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e72:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007e76:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e7e:	d056      	beq.n	8007f2e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8007e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e86:	f200 8090 	bhi.w	8007faa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e8c:	2bc0      	cmp	r3, #192	; 0xc0
 8007e8e:	f000 8088 	beq.w	8007fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8007e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e94:	2bc0      	cmp	r3, #192	; 0xc0
 8007e96:	f200 8088 	bhi.w	8007faa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e9c:	2b80      	cmp	r3, #128	; 0x80
 8007e9e:	d032      	beq.n	8007f06 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea2:	2b80      	cmp	r3, #128	; 0x80
 8007ea4:	f200 8081 	bhi.w	8007faa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d003      	beq.n	8007eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8007eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb0:	2b40      	cmp	r3, #64	; 0x40
 8007eb2:	d014      	beq.n	8007ede <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8007eb4:	e079      	b.n	8007faa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007eb6:	4b3f      	ldr	r3, [pc, #252]	; (8007fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ebe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ec2:	d108      	bne.n	8007ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ec4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f000 ff67 	bl	8008d9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ed2:	f000 bc9c 	b.w	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007eda:	f000 bc98 	b.w	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007ede:	4b35      	ldr	r3, [pc, #212]	; (8007fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ee6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007eea:	d108      	bne.n	8007efe <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007eec:	f107 0318 	add.w	r3, r7, #24
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	f000 fcab 	bl	800884c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007ef6:	69bb      	ldr	r3, [r7, #24]
 8007ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007efa:	f000 bc88 	b.w	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007efe:	2300      	movs	r3, #0
 8007f00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f02:	f000 bc84 	b.w	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007f06:	4b2b      	ldr	r3, [pc, #172]	; (8007fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f12:	d108      	bne.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f14:	f107 030c 	add.w	r3, r7, #12
 8007f18:	4618      	mov	r0, r3
 8007f1a:	f000 fdeb 	bl	8008af4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f22:	f000 bc74 	b.w	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f26:	2300      	movs	r3, #0
 8007f28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f2a:	f000 bc70 	b.w	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007f2e:	4b21      	ldr	r3, [pc, #132]	; (8007fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f32:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007f36:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007f38:	4b1e      	ldr	r3, [pc, #120]	; (8007fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f003 0304 	and.w	r3, r3, #4
 8007f40:	2b04      	cmp	r3, #4
 8007f42:	d10c      	bne.n	8007f5e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8007f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d109      	bne.n	8007f5e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007f4a:	4b1a      	ldr	r3, [pc, #104]	; (8007fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	08db      	lsrs	r3, r3, #3
 8007f50:	f003 0303 	and.w	r3, r3, #3
 8007f54:	4a18      	ldr	r2, [pc, #96]	; (8007fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007f56:	fa22 f303 	lsr.w	r3, r2, r3
 8007f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f5c:	e01f      	b.n	8007f9e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007f5e:	4b15      	ldr	r3, [pc, #84]	; (8007fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f6a:	d106      	bne.n	8007f7a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8007f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f72:	d102      	bne.n	8007f7a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007f74:	4b11      	ldr	r3, [pc, #68]	; (8007fbc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007f76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f78:	e011      	b.n	8007f9e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007f7a:	4b0e      	ldr	r3, [pc, #56]	; (8007fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f86:	d106      	bne.n	8007f96 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8007f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f8e:	d102      	bne.n	8007f96 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007f90:	4b0b      	ldr	r3, [pc, #44]	; (8007fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007f92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f94:	e003      	b.n	8007f9e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007f96:	2300      	movs	r3, #0
 8007f98:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007f9a:	f000 bc38 	b.w	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007f9e:	f000 bc36 	b.w	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007fa2:	4b08      	ldr	r3, [pc, #32]	; (8007fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fa6:	f000 bc32 	b.w	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007faa:	2300      	movs	r3, #0
 8007fac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fae:	f000 bc2e 	b.w	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007fb2:	bf00      	nop
 8007fb4:	58024400 	.word	0x58024400
 8007fb8:	03d09000 	.word	0x03d09000
 8007fbc:	003d0900 	.word	0x003d0900
 8007fc0:	017d7840 	.word	0x017d7840
 8007fc4:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007fc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fcc:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8007fd0:	430b      	orrs	r3, r1
 8007fd2:	f040 809c 	bne.w	800810e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8007fd6:	4b9e      	ldr	r3, [pc, #632]	; (8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fda:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8007fde:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007fe6:	d054      	beq.n	8008092 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8007fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007fee:	f200 808b 	bhi.w	8008108 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007ff8:	f000 8083 	beq.w	8008102 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8007ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ffe:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008002:	f200 8081 	bhi.w	8008108 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008008:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800800c:	d02f      	beq.n	800806e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800800e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008010:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008014:	d878      	bhi.n	8008108 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008018:	2b00      	cmp	r3, #0
 800801a:	d004      	beq.n	8008026 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800801c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800801e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008022:	d012      	beq.n	800804a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8008024:	e070      	b.n	8008108 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008026:	4b8a      	ldr	r3, [pc, #552]	; (8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800802e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008032:	d107      	bne.n	8008044 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008034:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008038:	4618      	mov	r0, r3
 800803a:	f000 feaf 	bl	8008d9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800803e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008040:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008042:	e3e4      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008044:	2300      	movs	r3, #0
 8008046:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008048:	e3e1      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800804a:	4b81      	ldr	r3, [pc, #516]	; (8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008052:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008056:	d107      	bne.n	8008068 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008058:	f107 0318 	add.w	r3, r7, #24
 800805c:	4618      	mov	r0, r3
 800805e:	f000 fbf5 	bl	800884c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008062:	69bb      	ldr	r3, [r7, #24]
 8008064:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008066:	e3d2      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008068:	2300      	movs	r3, #0
 800806a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800806c:	e3cf      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800806e:	4b78      	ldr	r3, [pc, #480]	; (8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008076:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800807a:	d107      	bne.n	800808c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800807c:	f107 030c 	add.w	r3, r7, #12
 8008080:	4618      	mov	r0, r3
 8008082:	f000 fd37 	bl	8008af4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800808a:	e3c0      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800808c:	2300      	movs	r3, #0
 800808e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008090:	e3bd      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008092:	4b6f      	ldr	r3, [pc, #444]	; (8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008096:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800809a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800809c:	4b6c      	ldr	r3, [pc, #432]	; (8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f003 0304 	and.w	r3, r3, #4
 80080a4:	2b04      	cmp	r3, #4
 80080a6:	d10c      	bne.n	80080c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80080a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d109      	bne.n	80080c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80080ae:	4b68      	ldr	r3, [pc, #416]	; (8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	08db      	lsrs	r3, r3, #3
 80080b4:	f003 0303 	and.w	r3, r3, #3
 80080b8:	4a66      	ldr	r2, [pc, #408]	; (8008254 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80080ba:	fa22 f303 	lsr.w	r3, r2, r3
 80080be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080c0:	e01e      	b.n	8008100 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80080c2:	4b63      	ldr	r3, [pc, #396]	; (8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080ce:	d106      	bne.n	80080de <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80080d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80080d6:	d102      	bne.n	80080de <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80080d8:	4b5f      	ldr	r3, [pc, #380]	; (8008258 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80080da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080dc:	e010      	b.n	8008100 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80080de:	4b5c      	ldr	r3, [pc, #368]	; (8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80080ea:	d106      	bne.n	80080fa <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80080ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080f2:	d102      	bne.n	80080fa <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80080f4:	4b59      	ldr	r3, [pc, #356]	; (800825c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80080f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080f8:	e002      	b.n	8008100 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80080fa:	2300      	movs	r3, #0
 80080fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80080fe:	e386      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008100:	e385      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008102:	4b57      	ldr	r3, [pc, #348]	; (8008260 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008104:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008106:	e382      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008108:	2300      	movs	r3, #0
 800810a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800810c:	e37f      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800810e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008112:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8008116:	430b      	orrs	r3, r1
 8008118:	f040 80a7 	bne.w	800826a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800811c:	4b4c      	ldr	r3, [pc, #304]	; (8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800811e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008120:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008124:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008128:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800812c:	d055      	beq.n	80081da <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800812e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008130:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008134:	f200 8096 	bhi.w	8008264 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800813a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800813e:	f000 8084 	beq.w	800824a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8008142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008144:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008148:	f200 808c 	bhi.w	8008264 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800814c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800814e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008152:	d030      	beq.n	80081b6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8008154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008156:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800815a:	f200 8083 	bhi.w	8008264 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800815e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008160:	2b00      	cmp	r3, #0
 8008162:	d004      	beq.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8008164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008166:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800816a:	d012      	beq.n	8008192 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800816c:	e07a      	b.n	8008264 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800816e:	4b38      	ldr	r3, [pc, #224]	; (8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008176:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800817a:	d107      	bne.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800817c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008180:	4618      	mov	r0, r3
 8008182:	f000 fe0b 	bl	8008d9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008188:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800818a:	e340      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800818c:	2300      	movs	r3, #0
 800818e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008190:	e33d      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008192:	4b2f      	ldr	r3, [pc, #188]	; (8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800819a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800819e:	d107      	bne.n	80081b0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081a0:	f107 0318 	add.w	r3, r7, #24
 80081a4:	4618      	mov	r0, r3
 80081a6:	f000 fb51 	bl	800884c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80081aa:	69bb      	ldr	r3, [r7, #24]
 80081ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081ae:	e32e      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80081b0:	2300      	movs	r3, #0
 80081b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081b4:	e32b      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80081b6:	4b26      	ldr	r3, [pc, #152]	; (8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80081be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081c2:	d107      	bne.n	80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80081c4:	f107 030c 	add.w	r3, r7, #12
 80081c8:	4618      	mov	r0, r3
 80081ca:	f000 fc93 	bl	8008af4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081d2:	e31c      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80081d4:	2300      	movs	r3, #0
 80081d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081d8:	e319      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80081da:	4b1d      	ldr	r3, [pc, #116]	; (8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80081dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80081e2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80081e4:	4b1a      	ldr	r3, [pc, #104]	; (8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f003 0304 	and.w	r3, r3, #4
 80081ec:	2b04      	cmp	r3, #4
 80081ee:	d10c      	bne.n	800820a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80081f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d109      	bne.n	800820a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80081f6:	4b16      	ldr	r3, [pc, #88]	; (8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	08db      	lsrs	r3, r3, #3
 80081fc:	f003 0303 	and.w	r3, r3, #3
 8008200:	4a14      	ldr	r2, [pc, #80]	; (8008254 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008202:	fa22 f303 	lsr.w	r3, r2, r3
 8008206:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008208:	e01e      	b.n	8008248 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800820a:	4b11      	ldr	r3, [pc, #68]	; (8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008212:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008216:	d106      	bne.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8008218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800821a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800821e:	d102      	bne.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008220:	4b0d      	ldr	r3, [pc, #52]	; (8008258 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008222:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008224:	e010      	b.n	8008248 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008226:	4b0a      	ldr	r3, [pc, #40]	; (8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800822e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008232:	d106      	bne.n	8008242 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8008234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008236:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800823a:	d102      	bne.n	8008242 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800823c:	4b07      	ldr	r3, [pc, #28]	; (800825c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800823e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008240:	e002      	b.n	8008248 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008242:	2300      	movs	r3, #0
 8008244:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008246:	e2e2      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008248:	e2e1      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800824a:	4b05      	ldr	r3, [pc, #20]	; (8008260 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800824c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800824e:	e2de      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008250:	58024400 	.word	0x58024400
 8008254:	03d09000 	.word	0x03d09000
 8008258:	003d0900 	.word	0x003d0900
 800825c:	017d7840 	.word	0x017d7840
 8008260:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8008264:	2300      	movs	r3, #0
 8008266:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008268:	e2d1      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800826a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800826e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8008272:	430b      	orrs	r3, r1
 8008274:	f040 809c 	bne.w	80083b0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008278:	4b93      	ldr	r3, [pc, #588]	; (80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800827a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800827c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008280:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008284:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008288:	d054      	beq.n	8008334 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800828a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800828c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008290:	f200 808b 	bhi.w	80083aa <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008296:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800829a:	f000 8083 	beq.w	80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800829e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082a0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80082a4:	f200 8081 	bhi.w	80083aa <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80082a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082ae:	d02f      	beq.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80082b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082b6:	d878      	bhi.n	80083aa <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80082b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d004      	beq.n	80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80082be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082c4:	d012      	beq.n	80082ec <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80082c6:	e070      	b.n	80083aa <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80082c8:	4b7f      	ldr	r3, [pc, #508]	; (80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80082d4:	d107      	bne.n	80082e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80082d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80082da:	4618      	mov	r0, r3
 80082dc:	f000 fd5e 	bl	8008d9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80082e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082e4:	e293      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80082e6:	2300      	movs	r3, #0
 80082e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082ea:	e290      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80082ec:	4b76      	ldr	r3, [pc, #472]	; (80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80082f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80082f8:	d107      	bne.n	800830a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80082fa:	f107 0318 	add.w	r3, r7, #24
 80082fe:	4618      	mov	r0, r3
 8008300:	f000 faa4 	bl	800884c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008304:	69bb      	ldr	r3, [r7, #24]
 8008306:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008308:	e281      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800830a:	2300      	movs	r3, #0
 800830c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800830e:	e27e      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008310:	4b6d      	ldr	r3, [pc, #436]	; (80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008318:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800831c:	d107      	bne.n	800832e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800831e:	f107 030c 	add.w	r3, r7, #12
 8008322:	4618      	mov	r0, r3
 8008324:	f000 fbe6 	bl	8008af4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800832c:	e26f      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800832e:	2300      	movs	r3, #0
 8008330:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008332:	e26c      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008334:	4b64      	ldr	r3, [pc, #400]	; (80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008338:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800833c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800833e:	4b62      	ldr	r3, [pc, #392]	; (80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f003 0304 	and.w	r3, r3, #4
 8008346:	2b04      	cmp	r3, #4
 8008348:	d10c      	bne.n	8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800834a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800834c:	2b00      	cmp	r3, #0
 800834e:	d109      	bne.n	8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008350:	4b5d      	ldr	r3, [pc, #372]	; (80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	08db      	lsrs	r3, r3, #3
 8008356:	f003 0303 	and.w	r3, r3, #3
 800835a:	4a5c      	ldr	r2, [pc, #368]	; (80084cc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800835c:	fa22 f303 	lsr.w	r3, r2, r3
 8008360:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008362:	e01e      	b.n	80083a2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008364:	4b58      	ldr	r3, [pc, #352]	; (80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800836c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008370:	d106      	bne.n	8008380 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8008372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008374:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008378:	d102      	bne.n	8008380 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800837a:	4b55      	ldr	r3, [pc, #340]	; (80084d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800837c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800837e:	e010      	b.n	80083a2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008380:	4b51      	ldr	r3, [pc, #324]	; (80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008388:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800838c:	d106      	bne.n	800839c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800838e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008390:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008394:	d102      	bne.n	800839c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008396:	4b4f      	ldr	r3, [pc, #316]	; (80084d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008398:	63fb      	str	r3, [r7, #60]	; 0x3c
 800839a:	e002      	b.n	80083a2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800839c:	2300      	movs	r3, #0
 800839e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80083a0:	e235      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80083a2:	e234      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80083a4:	4b4c      	ldr	r3, [pc, #304]	; (80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80083a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083a8:	e231      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80083aa:	2300      	movs	r3, #0
 80083ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083ae:	e22e      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80083b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083b4:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80083b8:	430b      	orrs	r3, r1
 80083ba:	f040 808f 	bne.w	80084dc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80083be:	4b42      	ldr	r3, [pc, #264]	; (80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80083c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083c2:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80083c6:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 80083c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80083ce:	d06b      	beq.n	80084a8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80083d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80083d6:	d874      	bhi.n	80084c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80083d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083da:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80083de:	d056      	beq.n	800848e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80083e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083e2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80083e6:	d86c      	bhi.n	80084c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80083e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80083ee:	d03b      	beq.n	8008468 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80083f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083f2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80083f6:	d864      	bhi.n	80084c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80083f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80083fe:	d021      	beq.n	8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8008400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008402:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008406:	d85c      	bhi.n	80084c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800840a:	2b00      	cmp	r3, #0
 800840c:	d004      	beq.n	8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800840e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008410:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008414:	d004      	beq.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8008416:	e054      	b.n	80084c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008418:	f7fe fa4c 	bl	80068b4 <HAL_RCC_GetPCLK1Freq>
 800841c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800841e:	e1f6      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008420:	4b29      	ldr	r3, [pc, #164]	; (80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008428:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800842c:	d107      	bne.n	800843e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800842e:	f107 0318 	add.w	r3, r7, #24
 8008432:	4618      	mov	r0, r3
 8008434:	f000 fa0a 	bl	800884c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008438:	69fb      	ldr	r3, [r7, #28]
 800843a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800843c:	e1e7      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800843e:	2300      	movs	r3, #0
 8008440:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008442:	e1e4      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008444:	4b20      	ldr	r3, [pc, #128]	; (80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800844c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008450:	d107      	bne.n	8008462 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008452:	f107 030c 	add.w	r3, r7, #12
 8008456:	4618      	mov	r0, r3
 8008458:	f000 fb4c 	bl	8008af4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008460:	e1d5      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008462:	2300      	movs	r3, #0
 8008464:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008466:	e1d2      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008468:	4b17      	ldr	r3, [pc, #92]	; (80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f003 0304 	and.w	r3, r3, #4
 8008470:	2b04      	cmp	r3, #4
 8008472:	d109      	bne.n	8008488 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008474:	4b14      	ldr	r3, [pc, #80]	; (80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	08db      	lsrs	r3, r3, #3
 800847a:	f003 0303 	and.w	r3, r3, #3
 800847e:	4a13      	ldr	r2, [pc, #76]	; (80084cc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008480:	fa22 f303 	lsr.w	r3, r2, r3
 8008484:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008486:	e1c2      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008488:	2300      	movs	r3, #0
 800848a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800848c:	e1bf      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800848e:	4b0e      	ldr	r3, [pc, #56]	; (80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008496:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800849a:	d102      	bne.n	80084a2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800849c:	4b0c      	ldr	r3, [pc, #48]	; (80084d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800849e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084a0:	e1b5      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80084a2:	2300      	movs	r3, #0
 80084a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084a6:	e1b2      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80084a8:	4b07      	ldr	r3, [pc, #28]	; (80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80084b4:	d102      	bne.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80084b6:	4b07      	ldr	r3, [pc, #28]	; (80084d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80084b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084ba:	e1a8      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80084bc:	2300      	movs	r3, #0
 80084be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084c0:	e1a5      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80084c2:	2300      	movs	r3, #0
 80084c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084c6:	e1a2      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80084c8:	58024400 	.word	0x58024400
 80084cc:	03d09000 	.word	0x03d09000
 80084d0:	003d0900 	.word	0x003d0900
 80084d4:	017d7840 	.word	0x017d7840
 80084d8:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80084dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084e0:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 80084e4:	430b      	orrs	r3, r1
 80084e6:	d173      	bne.n	80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80084e8:	4b9c      	ldr	r3, [pc, #624]	; (800875c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80084ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80084f0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80084f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80084f8:	d02f      	beq.n	800855a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80084fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008500:	d863      	bhi.n	80085ca <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8008502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008504:	2b00      	cmp	r3, #0
 8008506:	d004      	beq.n	8008512 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8008508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800850a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800850e:	d012      	beq.n	8008536 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8008510:	e05b      	b.n	80085ca <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008512:	4b92      	ldr	r3, [pc, #584]	; (800875c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800851a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800851e:	d107      	bne.n	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008520:	f107 0318 	add.w	r3, r7, #24
 8008524:	4618      	mov	r0, r3
 8008526:	f000 f991 	bl	800884c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800852a:	69bb      	ldr	r3, [r7, #24]
 800852c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800852e:	e16e      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008530:	2300      	movs	r3, #0
 8008532:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008534:	e16b      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008536:	4b89      	ldr	r3, [pc, #548]	; (800875c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800853e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008542:	d107      	bne.n	8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008544:	f107 030c 	add.w	r3, r7, #12
 8008548:	4618      	mov	r0, r3
 800854a:	f000 fad3 	bl	8008af4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008552:	e15c      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008554:	2300      	movs	r3, #0
 8008556:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008558:	e159      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800855a:	4b80      	ldr	r3, [pc, #512]	; (800875c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800855c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800855e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008562:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008564:	4b7d      	ldr	r3, [pc, #500]	; (800875c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f003 0304 	and.w	r3, r3, #4
 800856c:	2b04      	cmp	r3, #4
 800856e:	d10c      	bne.n	800858a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8008570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008572:	2b00      	cmp	r3, #0
 8008574:	d109      	bne.n	800858a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008576:	4b79      	ldr	r3, [pc, #484]	; (800875c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	08db      	lsrs	r3, r3, #3
 800857c:	f003 0303 	and.w	r3, r3, #3
 8008580:	4a77      	ldr	r2, [pc, #476]	; (8008760 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008582:	fa22 f303 	lsr.w	r3, r2, r3
 8008586:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008588:	e01e      	b.n	80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800858a:	4b74      	ldr	r3, [pc, #464]	; (800875c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008592:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008596:	d106      	bne.n	80085a6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8008598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800859a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800859e:	d102      	bne.n	80085a6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80085a0:	4b70      	ldr	r3, [pc, #448]	; (8008764 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80085a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085a4:	e010      	b.n	80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80085a6:	4b6d      	ldr	r3, [pc, #436]	; (800875c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80085b2:	d106      	bne.n	80085c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80085b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085ba:	d102      	bne.n	80085c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80085bc:	4b6a      	ldr	r3, [pc, #424]	; (8008768 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80085be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085c0:	e002      	b.n	80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80085c2:	2300      	movs	r3, #0
 80085c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80085c6:	e122      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80085c8:	e121      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80085ca:	2300      	movs	r3, #0
 80085cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085ce:	e11e      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80085d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085d4:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80085d8:	430b      	orrs	r3, r1
 80085da:	d133      	bne.n	8008644 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80085dc:	4b5f      	ldr	r3, [pc, #380]	; (800875c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80085de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80085e4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80085e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d004      	beq.n	80085f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80085ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085f2:	d012      	beq.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 80085f4:	e023      	b.n	800863e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80085f6:	4b59      	ldr	r3, [pc, #356]	; (800875c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008602:	d107      	bne.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008604:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008608:	4618      	mov	r0, r3
 800860a:	f000 fbc7 	bl	8008d9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800860e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008610:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008612:	e0fc      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008614:	2300      	movs	r3, #0
 8008616:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008618:	e0f9      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800861a:	4b50      	ldr	r3, [pc, #320]	; (800875c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008622:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008626:	d107      	bne.n	8008638 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008628:	f107 0318 	add.w	r3, r7, #24
 800862c:	4618      	mov	r0, r3
 800862e:	f000 f90d 	bl	800884c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008632:	6a3b      	ldr	r3, [r7, #32]
 8008634:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008636:	e0ea      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008638:	2300      	movs	r3, #0
 800863a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800863c:	e0e7      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800863e:	2300      	movs	r3, #0
 8008640:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008642:	e0e4      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008644:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008648:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800864c:	430b      	orrs	r3, r1
 800864e:	f040 808d 	bne.w	800876c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008652:	4b42      	ldr	r3, [pc, #264]	; (800875c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008656:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800865a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800865c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800865e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008662:	d06b      	beq.n	800873c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8008664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008666:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800866a:	d874      	bhi.n	8008756 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800866c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800866e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008672:	d056      	beq.n	8008722 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8008674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008676:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800867a:	d86c      	bhi.n	8008756 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800867c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800867e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008682:	d03b      	beq.n	80086fc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8008684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008686:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800868a:	d864      	bhi.n	8008756 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800868c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800868e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008692:	d021      	beq.n	80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8008694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008696:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800869a:	d85c      	bhi.n	8008756 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800869c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d004      	beq.n	80086ac <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80086a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80086a8:	d004      	beq.n	80086b4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80086aa:	e054      	b.n	8008756 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80086ac:	f000 f8b8 	bl	8008820 <HAL_RCCEx_GetD3PCLK1Freq>
 80086b0:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80086b2:	e0ac      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80086b4:	4b29      	ldr	r3, [pc, #164]	; (800875c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80086bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80086c0:	d107      	bne.n	80086d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086c2:	f107 0318 	add.w	r3, r7, #24
 80086c6:	4618      	mov	r0, r3
 80086c8:	f000 f8c0 	bl	800884c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80086cc:	69fb      	ldr	r3, [r7, #28]
 80086ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086d0:	e09d      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80086d2:	2300      	movs	r3, #0
 80086d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086d6:	e09a      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80086d8:	4b20      	ldr	r3, [pc, #128]	; (800875c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80086e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086e4:	d107      	bne.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80086e6:	f107 030c 	add.w	r3, r7, #12
 80086ea:	4618      	mov	r0, r3
 80086ec:	f000 fa02 	bl	8008af4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086f4:	e08b      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80086f6:	2300      	movs	r3, #0
 80086f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086fa:	e088      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80086fc:	4b17      	ldr	r3, [pc, #92]	; (800875c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f003 0304 	and.w	r3, r3, #4
 8008704:	2b04      	cmp	r3, #4
 8008706:	d109      	bne.n	800871c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008708:	4b14      	ldr	r3, [pc, #80]	; (800875c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	08db      	lsrs	r3, r3, #3
 800870e:	f003 0303 	and.w	r3, r3, #3
 8008712:	4a13      	ldr	r2, [pc, #76]	; (8008760 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008714:	fa22 f303 	lsr.w	r3, r2, r3
 8008718:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800871a:	e078      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800871c:	2300      	movs	r3, #0
 800871e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008720:	e075      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008722:	4b0e      	ldr	r3, [pc, #56]	; (800875c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800872a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800872e:	d102      	bne.n	8008736 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8008730:	4b0c      	ldr	r3, [pc, #48]	; (8008764 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008732:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008734:	e06b      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008736:	2300      	movs	r3, #0
 8008738:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800873a:	e068      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800873c:	4b07      	ldr	r3, [pc, #28]	; (800875c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008744:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008748:	d102      	bne.n	8008750 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800874a:	4b07      	ldr	r3, [pc, #28]	; (8008768 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800874c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800874e:	e05e      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008750:	2300      	movs	r3, #0
 8008752:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008754:	e05b      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008756:	2300      	movs	r3, #0
 8008758:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800875a:	e058      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800875c:	58024400 	.word	0x58024400
 8008760:	03d09000 	.word	0x03d09000
 8008764:	003d0900 	.word	0x003d0900
 8008768:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800876c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008770:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8008774:	430b      	orrs	r3, r1
 8008776:	d148      	bne.n	800880a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008778:	4b27      	ldr	r3, [pc, #156]	; (8008818 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800877a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800877c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008780:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008784:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008788:	d02a      	beq.n	80087e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800878a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800878c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008790:	d838      	bhi.n	8008804 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8008792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008794:	2b00      	cmp	r3, #0
 8008796:	d004      	beq.n	80087a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8008798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800879a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800879e:	d00d      	beq.n	80087bc <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80087a0:	e030      	b.n	8008804 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80087a2:	4b1d      	ldr	r3, [pc, #116]	; (8008818 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80087ae:	d102      	bne.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80087b0:	4b1a      	ldr	r3, [pc, #104]	; (800881c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80087b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087b4:	e02b      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087b6:	2300      	movs	r3, #0
 80087b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087ba:	e028      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80087bc:	4b16      	ldr	r3, [pc, #88]	; (8008818 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80087c8:	d107      	bne.n	80087da <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80087ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80087ce:	4618      	mov	r0, r3
 80087d0:	f000 fae4 	bl	8008d9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80087d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087d8:	e019      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087da:	2300      	movs	r3, #0
 80087dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087de:	e016      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80087e0:	4b0d      	ldr	r3, [pc, #52]	; (8008818 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80087e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80087ec:	d107      	bne.n	80087fe <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087ee:	f107 0318 	add.w	r3, r7, #24
 80087f2:	4618      	mov	r0, r3
 80087f4:	f000 f82a 	bl	800884c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80087f8:	69fb      	ldr	r3, [r7, #28]
 80087fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087fc:	e007      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087fe:	2300      	movs	r3, #0
 8008800:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008802:	e004      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008804:	2300      	movs	r3, #0
 8008806:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008808:	e001      	b.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800880a:	2300      	movs	r3, #0
 800880c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800880e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008810:	4618      	mov	r0, r3
 8008812:	3740      	adds	r7, #64	; 0x40
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}
 8008818:	58024400 	.word	0x58024400
 800881c:	017d7840 	.word	0x017d7840

08008820 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008824:	f7fe f816 	bl	8006854 <HAL_RCC_GetHCLKFreq>
 8008828:	4602      	mov	r2, r0
 800882a:	4b06      	ldr	r3, [pc, #24]	; (8008844 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800882c:	6a1b      	ldr	r3, [r3, #32]
 800882e:	091b      	lsrs	r3, r3, #4
 8008830:	f003 0307 	and.w	r3, r3, #7
 8008834:	4904      	ldr	r1, [pc, #16]	; (8008848 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008836:	5ccb      	ldrb	r3, [r1, r3]
 8008838:	f003 031f 	and.w	r3, r3, #31
 800883c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008840:	4618      	mov	r0, r3
 8008842:	bd80      	pop	{r7, pc}
 8008844:	58024400 	.word	0x58024400
 8008848:	0800bf3c 	.word	0x0800bf3c

0800884c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800884c:	b480      	push	{r7}
 800884e:	b089      	sub	sp, #36	; 0x24
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008854:	4ba1      	ldr	r3, [pc, #644]	; (8008adc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008858:	f003 0303 	and.w	r3, r3, #3
 800885c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800885e:	4b9f      	ldr	r3, [pc, #636]	; (8008adc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008862:	0b1b      	lsrs	r3, r3, #12
 8008864:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008868:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800886a:	4b9c      	ldr	r3, [pc, #624]	; (8008adc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800886c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800886e:	091b      	lsrs	r3, r3, #4
 8008870:	f003 0301 	and.w	r3, r3, #1
 8008874:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008876:	4b99      	ldr	r3, [pc, #612]	; (8008adc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800887a:	08db      	lsrs	r3, r3, #3
 800887c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008880:	693a      	ldr	r2, [r7, #16]
 8008882:	fb02 f303 	mul.w	r3, r2, r3
 8008886:	ee07 3a90 	vmov	s15, r3
 800888a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800888e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	2b00      	cmp	r3, #0
 8008896:	f000 8111 	beq.w	8008abc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800889a:	69bb      	ldr	r3, [r7, #24]
 800889c:	2b02      	cmp	r3, #2
 800889e:	f000 8083 	beq.w	80089a8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80088a2:	69bb      	ldr	r3, [r7, #24]
 80088a4:	2b02      	cmp	r3, #2
 80088a6:	f200 80a1 	bhi.w	80089ec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80088aa:	69bb      	ldr	r3, [r7, #24]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d003      	beq.n	80088b8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80088b0:	69bb      	ldr	r3, [r7, #24]
 80088b2:	2b01      	cmp	r3, #1
 80088b4:	d056      	beq.n	8008964 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80088b6:	e099      	b.n	80089ec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80088b8:	4b88      	ldr	r3, [pc, #544]	; (8008adc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f003 0320 	and.w	r3, r3, #32
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d02d      	beq.n	8008920 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80088c4:	4b85      	ldr	r3, [pc, #532]	; (8008adc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	08db      	lsrs	r3, r3, #3
 80088ca:	f003 0303 	and.w	r3, r3, #3
 80088ce:	4a84      	ldr	r2, [pc, #528]	; (8008ae0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80088d0:	fa22 f303 	lsr.w	r3, r2, r3
 80088d4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	ee07 3a90 	vmov	s15, r3
 80088dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	ee07 3a90 	vmov	s15, r3
 80088e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088ee:	4b7b      	ldr	r3, [pc, #492]	; (8008adc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088f6:	ee07 3a90 	vmov	s15, r3
 80088fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008902:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008906:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800890a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800890e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008912:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800891a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800891e:	e087      	b.n	8008a30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	ee07 3a90 	vmov	s15, r3
 8008926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800892a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800892e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008932:	4b6a      	ldr	r3, [pc, #424]	; (8008adc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800893a:	ee07 3a90 	vmov	s15, r3
 800893e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008942:	ed97 6a03 	vldr	s12, [r7, #12]
 8008946:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800894a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800894e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008952:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800895a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800895e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008962:	e065      	b.n	8008a30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	ee07 3a90 	vmov	s15, r3
 800896a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800896e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008aec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008976:	4b59      	ldr	r3, [pc, #356]	; (8008adc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800897a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800897e:	ee07 3a90 	vmov	s15, r3
 8008982:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008986:	ed97 6a03 	vldr	s12, [r7, #12]
 800898a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800898e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008992:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008996:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800899a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800899e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80089a6:	e043      	b.n	8008a30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	ee07 3a90 	vmov	s15, r3
 80089ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089b2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008af0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80089b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089ba:	4b48      	ldr	r3, [pc, #288]	; (8008adc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089c2:	ee07 3a90 	vmov	s15, r3
 80089c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80089ce:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80089d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80089ea:	e021      	b.n	8008a30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	ee07 3a90 	vmov	s15, r3
 80089f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089f6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008aec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80089fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089fe:	4b37      	ldr	r3, [pc, #220]	; (8008adc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a06:	ee07 3a90 	vmov	s15, r3
 8008a0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a12:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a2e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008a30:	4b2a      	ldr	r3, [pc, #168]	; (8008adc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a34:	0a5b      	lsrs	r3, r3, #9
 8008a36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a3a:	ee07 3a90 	vmov	s15, r3
 8008a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a46:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a56:	ee17 2a90 	vmov	r2, s15
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008a5e:	4b1f      	ldr	r3, [pc, #124]	; (8008adc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a62:	0c1b      	lsrs	r3, r3, #16
 8008a64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a68:	ee07 3a90 	vmov	s15, r3
 8008a6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a74:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a78:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a84:	ee17 2a90 	vmov	r2, s15
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008a8c:	4b13      	ldr	r3, [pc, #76]	; (8008adc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a90:	0e1b      	lsrs	r3, r3, #24
 8008a92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a96:	ee07 3a90 	vmov	s15, r3
 8008a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008aa2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008aa6:	edd7 6a07 	vldr	s13, [r7, #28]
 8008aaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008aae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ab2:	ee17 2a90 	vmov	r2, s15
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008aba:	e008      	b.n	8008ace <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2200      	movs	r2, #0
 8008acc:	609a      	str	r2, [r3, #8]
}
 8008ace:	bf00      	nop
 8008ad0:	3724      	adds	r7, #36	; 0x24
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad8:	4770      	bx	lr
 8008ada:	bf00      	nop
 8008adc:	58024400 	.word	0x58024400
 8008ae0:	03d09000 	.word	0x03d09000
 8008ae4:	46000000 	.word	0x46000000
 8008ae8:	4c742400 	.word	0x4c742400
 8008aec:	4a742400 	.word	0x4a742400
 8008af0:	4bbebc20 	.word	0x4bbebc20

08008af4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b089      	sub	sp, #36	; 0x24
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008afc:	4ba1      	ldr	r3, [pc, #644]	; (8008d84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b00:	f003 0303 	and.w	r3, r3, #3
 8008b04:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008b06:	4b9f      	ldr	r3, [pc, #636]	; (8008d84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b0a:	0d1b      	lsrs	r3, r3, #20
 8008b0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008b10:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008b12:	4b9c      	ldr	r3, [pc, #624]	; (8008d84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b16:	0a1b      	lsrs	r3, r3, #8
 8008b18:	f003 0301 	and.w	r3, r3, #1
 8008b1c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008b1e:	4b99      	ldr	r3, [pc, #612]	; (8008d84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b22:	08db      	lsrs	r3, r3, #3
 8008b24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008b28:	693a      	ldr	r2, [r7, #16]
 8008b2a:	fb02 f303 	mul.w	r3, r2, r3
 8008b2e:	ee07 3a90 	vmov	s15, r3
 8008b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b36:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	f000 8111 	beq.w	8008d64 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008b42:	69bb      	ldr	r3, [r7, #24]
 8008b44:	2b02      	cmp	r3, #2
 8008b46:	f000 8083 	beq.w	8008c50 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008b4a:	69bb      	ldr	r3, [r7, #24]
 8008b4c:	2b02      	cmp	r3, #2
 8008b4e:	f200 80a1 	bhi.w	8008c94 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008b52:	69bb      	ldr	r3, [r7, #24]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d003      	beq.n	8008b60 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008b58:	69bb      	ldr	r3, [r7, #24]
 8008b5a:	2b01      	cmp	r3, #1
 8008b5c:	d056      	beq.n	8008c0c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008b5e:	e099      	b.n	8008c94 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b60:	4b88      	ldr	r3, [pc, #544]	; (8008d84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f003 0320 	and.w	r3, r3, #32
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d02d      	beq.n	8008bc8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008b6c:	4b85      	ldr	r3, [pc, #532]	; (8008d84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	08db      	lsrs	r3, r3, #3
 8008b72:	f003 0303 	and.w	r3, r3, #3
 8008b76:	4a84      	ldr	r2, [pc, #528]	; (8008d88 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008b78:	fa22 f303 	lsr.w	r3, r2, r3
 8008b7c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	ee07 3a90 	vmov	s15, r3
 8008b84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	ee07 3a90 	vmov	s15, r3
 8008b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b96:	4b7b      	ldr	r3, [pc, #492]	; (8008d84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b9e:	ee07 3a90 	vmov	s15, r3
 8008ba2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ba6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008baa:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008d8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008bae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008bba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bc2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008bc6:	e087      	b.n	8008cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008bc8:	697b      	ldr	r3, [r7, #20]
 8008bca:	ee07 3a90 	vmov	s15, r3
 8008bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bd2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008d90 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008bd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bda:	4b6a      	ldr	r3, [pc, #424]	; (8008d84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008be2:	ee07 3a90 	vmov	s15, r3
 8008be6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bea:	ed97 6a03 	vldr	s12, [r7, #12]
 8008bee:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008d8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008bf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008bfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c0a:	e065      	b.n	8008cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	ee07 3a90 	vmov	s15, r3
 8008c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c16:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008d94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008c1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c1e:	4b59      	ldr	r3, [pc, #356]	; (8008d84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c26:	ee07 3a90 	vmov	s15, r3
 8008c2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c32:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008d8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008c36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c4e:	e043      	b.n	8008cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	ee07 3a90 	vmov	s15, r3
 8008c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c5a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008d98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008c5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c62:	4b48      	ldr	r3, [pc, #288]	; (8008d84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c6a:	ee07 3a90 	vmov	s15, r3
 8008c6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c72:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c76:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008d8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008c7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c92:	e021      	b.n	8008cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008c94:	697b      	ldr	r3, [r7, #20]
 8008c96:	ee07 3a90 	vmov	s15, r3
 8008c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c9e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008d94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008ca2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ca6:	4b37      	ldr	r3, [pc, #220]	; (8008d84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008caa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cae:	ee07 3a90 	vmov	s15, r3
 8008cb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cba:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008d8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008cbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008cca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008cd6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008cd8:	4b2a      	ldr	r3, [pc, #168]	; (8008d84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cdc:	0a5b      	lsrs	r3, r3, #9
 8008cde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ce2:	ee07 3a90 	vmov	s15, r3
 8008ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008cee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008cf2:	edd7 6a07 	vldr	s13, [r7, #28]
 8008cf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008cfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008cfe:	ee17 2a90 	vmov	r2, s15
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008d06:	4b1f      	ldr	r3, [pc, #124]	; (8008d84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d0a:	0c1b      	lsrs	r3, r3, #16
 8008d0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d10:	ee07 3a90 	vmov	s15, r3
 8008d14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d20:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d2c:	ee17 2a90 	vmov	r2, s15
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008d34:	4b13      	ldr	r3, [pc, #76]	; (8008d84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d38:	0e1b      	lsrs	r3, r3, #24
 8008d3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d3e:	ee07 3a90 	vmov	s15, r3
 8008d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d5a:	ee17 2a90 	vmov	r2, s15
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008d62:	e008      	b.n	8008d76 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2200      	movs	r2, #0
 8008d68:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2200      	movs	r2, #0
 8008d74:	609a      	str	r2, [r3, #8]
}
 8008d76:	bf00      	nop
 8008d78:	3724      	adds	r7, #36	; 0x24
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d80:	4770      	bx	lr
 8008d82:	bf00      	nop
 8008d84:	58024400 	.word	0x58024400
 8008d88:	03d09000 	.word	0x03d09000
 8008d8c:	46000000 	.word	0x46000000
 8008d90:	4c742400 	.word	0x4c742400
 8008d94:	4a742400 	.word	0x4a742400
 8008d98:	4bbebc20 	.word	0x4bbebc20

08008d9c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b089      	sub	sp, #36	; 0x24
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008da4:	4ba0      	ldr	r3, [pc, #640]	; (8009028 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008da8:	f003 0303 	and.w	r3, r3, #3
 8008dac:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008dae:	4b9e      	ldr	r3, [pc, #632]	; (8009028 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008db2:	091b      	lsrs	r3, r3, #4
 8008db4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008db8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008dba:	4b9b      	ldr	r3, [pc, #620]	; (8009028 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dbe:	f003 0301 	and.w	r3, r3, #1
 8008dc2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008dc4:	4b98      	ldr	r3, [pc, #608]	; (8009028 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dc8:	08db      	lsrs	r3, r3, #3
 8008dca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008dce:	693a      	ldr	r2, [r7, #16]
 8008dd0:	fb02 f303 	mul.w	r3, r2, r3
 8008dd4:	ee07 3a90 	vmov	s15, r3
 8008dd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ddc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008de0:	697b      	ldr	r3, [r7, #20]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	f000 8111 	beq.w	800900a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008de8:	69bb      	ldr	r3, [r7, #24]
 8008dea:	2b02      	cmp	r3, #2
 8008dec:	f000 8083 	beq.w	8008ef6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008df0:	69bb      	ldr	r3, [r7, #24]
 8008df2:	2b02      	cmp	r3, #2
 8008df4:	f200 80a1 	bhi.w	8008f3a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008df8:	69bb      	ldr	r3, [r7, #24]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d003      	beq.n	8008e06 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008dfe:	69bb      	ldr	r3, [r7, #24]
 8008e00:	2b01      	cmp	r3, #1
 8008e02:	d056      	beq.n	8008eb2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008e04:	e099      	b.n	8008f3a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e06:	4b88      	ldr	r3, [pc, #544]	; (8009028 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f003 0320 	and.w	r3, r3, #32
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d02d      	beq.n	8008e6e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008e12:	4b85      	ldr	r3, [pc, #532]	; (8009028 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	08db      	lsrs	r3, r3, #3
 8008e18:	f003 0303 	and.w	r3, r3, #3
 8008e1c:	4a83      	ldr	r2, [pc, #524]	; (800902c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008e1e:	fa22 f303 	lsr.w	r3, r2, r3
 8008e22:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	ee07 3a90 	vmov	s15, r3
 8008e2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e2e:	697b      	ldr	r3, [r7, #20]
 8008e30:	ee07 3a90 	vmov	s15, r3
 8008e34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e3c:	4b7a      	ldr	r3, [pc, #488]	; (8009028 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e44:	ee07 3a90 	vmov	s15, r3
 8008e48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e4c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e50:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009030 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008e54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e68:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008e6c:	e087      	b.n	8008f7e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008e6e:	697b      	ldr	r3, [r7, #20]
 8008e70:	ee07 3a90 	vmov	s15, r3
 8008e74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e78:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009034 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008e7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e80:	4b69      	ldr	r3, [pc, #420]	; (8009028 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e88:	ee07 3a90 	vmov	s15, r3
 8008e8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e90:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e94:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009030 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008e98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ea0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ea4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ea8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008eac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008eb0:	e065      	b.n	8008f7e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008eb2:	697b      	ldr	r3, [r7, #20]
 8008eb4:	ee07 3a90 	vmov	s15, r3
 8008eb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ebc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009038 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008ec0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ec4:	4b58      	ldr	r3, [pc, #352]	; (8009028 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ec8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ecc:	ee07 3a90 	vmov	s15, r3
 8008ed0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ed4:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ed8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009030 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008edc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ee0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ee4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ee8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008eec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ef0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ef4:	e043      	b.n	8008f7e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	ee07 3a90 	vmov	s15, r3
 8008efc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f00:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800903c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008f04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f08:	4b47      	ldr	r3, [pc, #284]	; (8009028 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f10:	ee07 3a90 	vmov	s15, r3
 8008f14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f18:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f1c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009030 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008f20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f34:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f38:	e021      	b.n	8008f7e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008f3a:	697b      	ldr	r3, [r7, #20]
 8008f3c:	ee07 3a90 	vmov	s15, r3
 8008f40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f44:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009034 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008f48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f4c:	4b36      	ldr	r3, [pc, #216]	; (8009028 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f54:	ee07 3a90 	vmov	s15, r3
 8008f58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f5c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f60:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009030 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008f64:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f78:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f7c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8008f7e:	4b2a      	ldr	r3, [pc, #168]	; (8009028 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f82:	0a5b      	lsrs	r3, r3, #9
 8008f84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f88:	ee07 3a90 	vmov	s15, r3
 8008f8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f94:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f98:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008fa0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008fa4:	ee17 2a90 	vmov	r2, s15
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008fac:	4b1e      	ldr	r3, [pc, #120]	; (8009028 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fb0:	0c1b      	lsrs	r3, r3, #16
 8008fb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fb6:	ee07 3a90 	vmov	s15, r3
 8008fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008fc2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008fc6:	edd7 6a07 	vldr	s13, [r7, #28]
 8008fca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008fce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008fd2:	ee17 2a90 	vmov	r2, s15
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8008fda:	4b13      	ldr	r3, [pc, #76]	; (8009028 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fde:	0e1b      	lsrs	r3, r3, #24
 8008fe0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fe4:	ee07 3a90 	vmov	s15, r3
 8008fe8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ff0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ff4:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ff8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ffc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009000:	ee17 2a90 	vmov	r2, s15
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009008:	e008      	b.n	800901c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2200      	movs	r2, #0
 800900e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2200      	movs	r2, #0
 8009014:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2200      	movs	r2, #0
 800901a:	609a      	str	r2, [r3, #8]
}
 800901c:	bf00      	nop
 800901e:	3724      	adds	r7, #36	; 0x24
 8009020:	46bd      	mov	sp, r7
 8009022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009026:	4770      	bx	lr
 8009028:	58024400 	.word	0x58024400
 800902c:	03d09000 	.word	0x03d09000
 8009030:	46000000 	.word	0x46000000
 8009034:	4c742400 	.word	0x4c742400
 8009038:	4a742400 	.word	0x4a742400
 800903c:	4bbebc20 	.word	0x4bbebc20

08009040 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b084      	sub	sp, #16
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
 8009048:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800904a:	2300      	movs	r3, #0
 800904c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800904e:	4b53      	ldr	r3, [pc, #332]	; (800919c <RCCEx_PLL2_Config+0x15c>)
 8009050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009052:	f003 0303 	and.w	r3, r3, #3
 8009056:	2b03      	cmp	r3, #3
 8009058:	d101      	bne.n	800905e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800905a:	2301      	movs	r3, #1
 800905c:	e099      	b.n	8009192 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800905e:	4b4f      	ldr	r3, [pc, #316]	; (800919c <RCCEx_PLL2_Config+0x15c>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	4a4e      	ldr	r2, [pc, #312]	; (800919c <RCCEx_PLL2_Config+0x15c>)
 8009064:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009068:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800906a:	f7f9 fd05 	bl	8002a78 <HAL_GetTick>
 800906e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009070:	e008      	b.n	8009084 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009072:	f7f9 fd01 	bl	8002a78 <HAL_GetTick>
 8009076:	4602      	mov	r2, r0
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	1ad3      	subs	r3, r2, r3
 800907c:	2b02      	cmp	r3, #2
 800907e:	d901      	bls.n	8009084 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009080:	2303      	movs	r3, #3
 8009082:	e086      	b.n	8009192 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009084:	4b45      	ldr	r3, [pc, #276]	; (800919c <RCCEx_PLL2_Config+0x15c>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800908c:	2b00      	cmp	r3, #0
 800908e:	d1f0      	bne.n	8009072 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009090:	4b42      	ldr	r3, [pc, #264]	; (800919c <RCCEx_PLL2_Config+0x15c>)
 8009092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009094:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	031b      	lsls	r3, r3, #12
 800909e:	493f      	ldr	r1, [pc, #252]	; (800919c <RCCEx_PLL2_Config+0x15c>)
 80090a0:	4313      	orrs	r3, r2
 80090a2:	628b      	str	r3, [r1, #40]	; 0x28
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	685b      	ldr	r3, [r3, #4]
 80090a8:	3b01      	subs	r3, #1
 80090aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	689b      	ldr	r3, [r3, #8]
 80090b2:	3b01      	subs	r3, #1
 80090b4:	025b      	lsls	r3, r3, #9
 80090b6:	b29b      	uxth	r3, r3
 80090b8:	431a      	orrs	r2, r3
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	68db      	ldr	r3, [r3, #12]
 80090be:	3b01      	subs	r3, #1
 80090c0:	041b      	lsls	r3, r3, #16
 80090c2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80090c6:	431a      	orrs	r2, r3
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	691b      	ldr	r3, [r3, #16]
 80090cc:	3b01      	subs	r3, #1
 80090ce:	061b      	lsls	r3, r3, #24
 80090d0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80090d4:	4931      	ldr	r1, [pc, #196]	; (800919c <RCCEx_PLL2_Config+0x15c>)
 80090d6:	4313      	orrs	r3, r2
 80090d8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80090da:	4b30      	ldr	r3, [pc, #192]	; (800919c <RCCEx_PLL2_Config+0x15c>)
 80090dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	695b      	ldr	r3, [r3, #20]
 80090e6:	492d      	ldr	r1, [pc, #180]	; (800919c <RCCEx_PLL2_Config+0x15c>)
 80090e8:	4313      	orrs	r3, r2
 80090ea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80090ec:	4b2b      	ldr	r3, [pc, #172]	; (800919c <RCCEx_PLL2_Config+0x15c>)
 80090ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090f0:	f023 0220 	bic.w	r2, r3, #32
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	699b      	ldr	r3, [r3, #24]
 80090f8:	4928      	ldr	r1, [pc, #160]	; (800919c <RCCEx_PLL2_Config+0x15c>)
 80090fa:	4313      	orrs	r3, r2
 80090fc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80090fe:	4b27      	ldr	r3, [pc, #156]	; (800919c <RCCEx_PLL2_Config+0x15c>)
 8009100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009102:	4a26      	ldr	r2, [pc, #152]	; (800919c <RCCEx_PLL2_Config+0x15c>)
 8009104:	f023 0310 	bic.w	r3, r3, #16
 8009108:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800910a:	4b24      	ldr	r3, [pc, #144]	; (800919c <RCCEx_PLL2_Config+0x15c>)
 800910c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800910e:	4b24      	ldr	r3, [pc, #144]	; (80091a0 <RCCEx_PLL2_Config+0x160>)
 8009110:	4013      	ands	r3, r2
 8009112:	687a      	ldr	r2, [r7, #4]
 8009114:	69d2      	ldr	r2, [r2, #28]
 8009116:	00d2      	lsls	r2, r2, #3
 8009118:	4920      	ldr	r1, [pc, #128]	; (800919c <RCCEx_PLL2_Config+0x15c>)
 800911a:	4313      	orrs	r3, r2
 800911c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800911e:	4b1f      	ldr	r3, [pc, #124]	; (800919c <RCCEx_PLL2_Config+0x15c>)
 8009120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009122:	4a1e      	ldr	r2, [pc, #120]	; (800919c <RCCEx_PLL2_Config+0x15c>)
 8009124:	f043 0310 	orr.w	r3, r3, #16
 8009128:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d106      	bne.n	800913e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009130:	4b1a      	ldr	r3, [pc, #104]	; (800919c <RCCEx_PLL2_Config+0x15c>)
 8009132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009134:	4a19      	ldr	r2, [pc, #100]	; (800919c <RCCEx_PLL2_Config+0x15c>)
 8009136:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800913a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800913c:	e00f      	b.n	800915e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	2b01      	cmp	r3, #1
 8009142:	d106      	bne.n	8009152 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009144:	4b15      	ldr	r3, [pc, #84]	; (800919c <RCCEx_PLL2_Config+0x15c>)
 8009146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009148:	4a14      	ldr	r2, [pc, #80]	; (800919c <RCCEx_PLL2_Config+0x15c>)
 800914a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800914e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009150:	e005      	b.n	800915e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009152:	4b12      	ldr	r3, [pc, #72]	; (800919c <RCCEx_PLL2_Config+0x15c>)
 8009154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009156:	4a11      	ldr	r2, [pc, #68]	; (800919c <RCCEx_PLL2_Config+0x15c>)
 8009158:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800915c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800915e:	4b0f      	ldr	r3, [pc, #60]	; (800919c <RCCEx_PLL2_Config+0x15c>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	4a0e      	ldr	r2, [pc, #56]	; (800919c <RCCEx_PLL2_Config+0x15c>)
 8009164:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009168:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800916a:	f7f9 fc85 	bl	8002a78 <HAL_GetTick>
 800916e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009170:	e008      	b.n	8009184 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009172:	f7f9 fc81 	bl	8002a78 <HAL_GetTick>
 8009176:	4602      	mov	r2, r0
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	1ad3      	subs	r3, r2, r3
 800917c:	2b02      	cmp	r3, #2
 800917e:	d901      	bls.n	8009184 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009180:	2303      	movs	r3, #3
 8009182:	e006      	b.n	8009192 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009184:	4b05      	ldr	r3, [pc, #20]	; (800919c <RCCEx_PLL2_Config+0x15c>)
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800918c:	2b00      	cmp	r3, #0
 800918e:	d0f0      	beq.n	8009172 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009190:	7bfb      	ldrb	r3, [r7, #15]
}
 8009192:	4618      	mov	r0, r3
 8009194:	3710      	adds	r7, #16
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}
 800919a:	bf00      	nop
 800919c:	58024400 	.word	0x58024400
 80091a0:	ffff0007 	.word	0xffff0007

080091a4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b084      	sub	sp, #16
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
 80091ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80091ae:	2300      	movs	r3, #0
 80091b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80091b2:	4b53      	ldr	r3, [pc, #332]	; (8009300 <RCCEx_PLL3_Config+0x15c>)
 80091b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091b6:	f003 0303 	and.w	r3, r3, #3
 80091ba:	2b03      	cmp	r3, #3
 80091bc:	d101      	bne.n	80091c2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80091be:	2301      	movs	r3, #1
 80091c0:	e099      	b.n	80092f6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80091c2:	4b4f      	ldr	r3, [pc, #316]	; (8009300 <RCCEx_PLL3_Config+0x15c>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	4a4e      	ldr	r2, [pc, #312]	; (8009300 <RCCEx_PLL3_Config+0x15c>)
 80091c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80091cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80091ce:	f7f9 fc53 	bl	8002a78 <HAL_GetTick>
 80091d2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80091d4:	e008      	b.n	80091e8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80091d6:	f7f9 fc4f 	bl	8002a78 <HAL_GetTick>
 80091da:	4602      	mov	r2, r0
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	1ad3      	subs	r3, r2, r3
 80091e0:	2b02      	cmp	r3, #2
 80091e2:	d901      	bls.n	80091e8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80091e4:	2303      	movs	r3, #3
 80091e6:	e086      	b.n	80092f6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80091e8:	4b45      	ldr	r3, [pc, #276]	; (8009300 <RCCEx_PLL3_Config+0x15c>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d1f0      	bne.n	80091d6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80091f4:	4b42      	ldr	r3, [pc, #264]	; (8009300 <RCCEx_PLL3_Config+0x15c>)
 80091f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091f8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	051b      	lsls	r3, r3, #20
 8009202:	493f      	ldr	r1, [pc, #252]	; (8009300 <RCCEx_PLL3_Config+0x15c>)
 8009204:	4313      	orrs	r3, r2
 8009206:	628b      	str	r3, [r1, #40]	; 0x28
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	685b      	ldr	r3, [r3, #4]
 800920c:	3b01      	subs	r3, #1
 800920e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	689b      	ldr	r3, [r3, #8]
 8009216:	3b01      	subs	r3, #1
 8009218:	025b      	lsls	r3, r3, #9
 800921a:	b29b      	uxth	r3, r3
 800921c:	431a      	orrs	r2, r3
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	68db      	ldr	r3, [r3, #12]
 8009222:	3b01      	subs	r3, #1
 8009224:	041b      	lsls	r3, r3, #16
 8009226:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800922a:	431a      	orrs	r2, r3
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	691b      	ldr	r3, [r3, #16]
 8009230:	3b01      	subs	r3, #1
 8009232:	061b      	lsls	r3, r3, #24
 8009234:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009238:	4931      	ldr	r1, [pc, #196]	; (8009300 <RCCEx_PLL3_Config+0x15c>)
 800923a:	4313      	orrs	r3, r2
 800923c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800923e:	4b30      	ldr	r3, [pc, #192]	; (8009300 <RCCEx_PLL3_Config+0x15c>)
 8009240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009242:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	695b      	ldr	r3, [r3, #20]
 800924a:	492d      	ldr	r1, [pc, #180]	; (8009300 <RCCEx_PLL3_Config+0x15c>)
 800924c:	4313      	orrs	r3, r2
 800924e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009250:	4b2b      	ldr	r3, [pc, #172]	; (8009300 <RCCEx_PLL3_Config+0x15c>)
 8009252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009254:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	699b      	ldr	r3, [r3, #24]
 800925c:	4928      	ldr	r1, [pc, #160]	; (8009300 <RCCEx_PLL3_Config+0x15c>)
 800925e:	4313      	orrs	r3, r2
 8009260:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009262:	4b27      	ldr	r3, [pc, #156]	; (8009300 <RCCEx_PLL3_Config+0x15c>)
 8009264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009266:	4a26      	ldr	r2, [pc, #152]	; (8009300 <RCCEx_PLL3_Config+0x15c>)
 8009268:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800926c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800926e:	4b24      	ldr	r3, [pc, #144]	; (8009300 <RCCEx_PLL3_Config+0x15c>)
 8009270:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009272:	4b24      	ldr	r3, [pc, #144]	; (8009304 <RCCEx_PLL3_Config+0x160>)
 8009274:	4013      	ands	r3, r2
 8009276:	687a      	ldr	r2, [r7, #4]
 8009278:	69d2      	ldr	r2, [r2, #28]
 800927a:	00d2      	lsls	r2, r2, #3
 800927c:	4920      	ldr	r1, [pc, #128]	; (8009300 <RCCEx_PLL3_Config+0x15c>)
 800927e:	4313      	orrs	r3, r2
 8009280:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009282:	4b1f      	ldr	r3, [pc, #124]	; (8009300 <RCCEx_PLL3_Config+0x15c>)
 8009284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009286:	4a1e      	ldr	r2, [pc, #120]	; (8009300 <RCCEx_PLL3_Config+0x15c>)
 8009288:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800928c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d106      	bne.n	80092a2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009294:	4b1a      	ldr	r3, [pc, #104]	; (8009300 <RCCEx_PLL3_Config+0x15c>)
 8009296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009298:	4a19      	ldr	r2, [pc, #100]	; (8009300 <RCCEx_PLL3_Config+0x15c>)
 800929a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800929e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80092a0:	e00f      	b.n	80092c2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	2b01      	cmp	r3, #1
 80092a6:	d106      	bne.n	80092b6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80092a8:	4b15      	ldr	r3, [pc, #84]	; (8009300 <RCCEx_PLL3_Config+0x15c>)
 80092aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ac:	4a14      	ldr	r2, [pc, #80]	; (8009300 <RCCEx_PLL3_Config+0x15c>)
 80092ae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80092b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80092b4:	e005      	b.n	80092c2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80092b6:	4b12      	ldr	r3, [pc, #72]	; (8009300 <RCCEx_PLL3_Config+0x15c>)
 80092b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ba:	4a11      	ldr	r2, [pc, #68]	; (8009300 <RCCEx_PLL3_Config+0x15c>)
 80092bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80092c0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80092c2:	4b0f      	ldr	r3, [pc, #60]	; (8009300 <RCCEx_PLL3_Config+0x15c>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	4a0e      	ldr	r2, [pc, #56]	; (8009300 <RCCEx_PLL3_Config+0x15c>)
 80092c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80092ce:	f7f9 fbd3 	bl	8002a78 <HAL_GetTick>
 80092d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80092d4:	e008      	b.n	80092e8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80092d6:	f7f9 fbcf 	bl	8002a78 <HAL_GetTick>
 80092da:	4602      	mov	r2, r0
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	1ad3      	subs	r3, r2, r3
 80092e0:	2b02      	cmp	r3, #2
 80092e2:	d901      	bls.n	80092e8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80092e4:	2303      	movs	r3, #3
 80092e6:	e006      	b.n	80092f6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80092e8:	4b05      	ldr	r3, [pc, #20]	; (8009300 <RCCEx_PLL3_Config+0x15c>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d0f0      	beq.n	80092d6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80092f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	3710      	adds	r7, #16
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}
 80092fe:	bf00      	nop
 8009300:	58024400 	.word	0x58024400
 8009304:	ffff0007 	.word	0xffff0007

08009308 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b084      	sub	sp, #16
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009310:	2301      	movs	r3, #1
 8009312:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d071      	beq.n	80093fe <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009320:	b2db      	uxtb	r3, r3
 8009322:	2b00      	cmp	r3, #0
 8009324:	d106      	bne.n	8009334 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2200      	movs	r2, #0
 800932a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f7f8 fed2 	bl	80020d8 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2202      	movs	r2, #2
 8009338:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	68db      	ldr	r3, [r3, #12]
 8009342:	f003 0310 	and.w	r3, r3, #16
 8009346:	2b10      	cmp	r3, #16
 8009348:	d050      	beq.n	80093ec <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	22ca      	movs	r2, #202	; 0xca
 8009350:	625a      	str	r2, [r3, #36]	; 0x24
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	2253      	movs	r2, #83	; 0x53
 8009358:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f000 f87a 	bl	8009454 <RTC_EnterInitMode>
 8009360:	4603      	mov	r3, r0
 8009362:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8009364:	7bfb      	ldrb	r3, [r7, #15]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d124      	bne.n	80093b4 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	6899      	ldr	r1, [r3, #8]
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681a      	ldr	r2, [r3, #0]
 8009374:	4b24      	ldr	r3, [pc, #144]	; (8009408 <HAL_RTC_Init+0x100>)
 8009376:	400b      	ands	r3, r1
 8009378:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	6899      	ldr	r1, [r3, #8]
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	685a      	ldr	r2, [r3, #4]
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	691b      	ldr	r3, [r3, #16]
 8009388:	431a      	orrs	r2, r3
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	699b      	ldr	r3, [r3, #24]
 800938e:	431a      	orrs	r2, r3
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	430a      	orrs	r2, r1
 8009396:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	689b      	ldr	r3, [r3, #8]
 800939c:	0419      	lsls	r1, r3, #16
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	68da      	ldr	r2, [r3, #12]
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	430a      	orrs	r2, r1
 80093a8:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f000 f886 	bl	80094bc <RTC_ExitInitMode>
 80093b0:	4603      	mov	r3, r0
 80093b2:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 80093b4:	7bfb      	ldrb	r3, [r7, #15]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d113      	bne.n	80093e2 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f022 0203 	bic.w	r2, r2, #3
 80093c8:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	69da      	ldr	r2, [r3, #28]
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	695b      	ldr	r3, [r3, #20]
 80093d8:	431a      	orrs	r2, r3
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	430a      	orrs	r2, r1
 80093e0:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	22ff      	movs	r2, #255	; 0xff
 80093e8:	625a      	str	r2, [r3, #36]	; 0x24
 80093ea:	e001      	b.n	80093f0 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80093ec:	2300      	movs	r3, #0
 80093ee:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80093f0:	7bfb      	ldrb	r3, [r7, #15]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d103      	bne.n	80093fe <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2201      	movs	r2, #1
 80093fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 80093fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009400:	4618      	mov	r0, r3
 8009402:	3710      	adds	r7, #16
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}
 8009408:	ff8fffbf 	.word	0xff8fffbf

0800940c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b084      	sub	sp, #16
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	4a0d      	ldr	r2, [pc, #52]	; (8009450 <HAL_RTC_WaitForSynchro+0x44>)
 800941a:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800941c:	f7f9 fb2c 	bl	8002a78 <HAL_GetTick>
 8009420:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009422:	e009      	b.n	8009438 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009424:	f7f9 fb28 	bl	8002a78 <HAL_GetTick>
 8009428:	4602      	mov	r2, r0
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	1ad3      	subs	r3, r2, r3
 800942e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009432:	d901      	bls.n	8009438 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8009434:	2303      	movs	r3, #3
 8009436:	e007      	b.n	8009448 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	68db      	ldr	r3, [r3, #12]
 800943e:	f003 0320 	and.w	r3, r3, #32
 8009442:	2b00      	cmp	r3, #0
 8009444:	d0ee      	beq.n	8009424 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 8009446:	2300      	movs	r3, #0
}
 8009448:	4618      	mov	r0, r3
 800944a:	3710      	adds	r7, #16
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}
 8009450:	0003ff5f 	.word	0x0003ff5f

08009454 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b084      	sub	sp, #16
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800945c:	2300      	movs	r3, #0
 800945e:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	68db      	ldr	r3, [r3, #12]
 8009466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800946a:	2b00      	cmp	r3, #0
 800946c:	d120      	bne.n	80094b0 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f04f 32ff 	mov.w	r2, #4294967295
 8009476:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009478:	f7f9 fafe 	bl	8002a78 <HAL_GetTick>
 800947c:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800947e:	e00d      	b.n	800949c <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009480:	f7f9 fafa 	bl	8002a78 <HAL_GetTick>
 8009484:	4602      	mov	r2, r0
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	1ad3      	subs	r3, r2, r3
 800948a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800948e:	d905      	bls.n	800949c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8009490:	2303      	movs	r3, #3
 8009492:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2203      	movs	r2, #3
 8009498:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	68db      	ldr	r3, [r3, #12]
 80094a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d102      	bne.n	80094b0 <RTC_EnterInitMode+0x5c>
 80094aa:	7bfb      	ldrb	r3, [r7, #15]
 80094ac:	2b03      	cmp	r3, #3
 80094ae:	d1e7      	bne.n	8009480 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80094b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3710      	adds	r7, #16
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}
	...

080094bc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b084      	sub	sp, #16
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80094c4:	2300      	movs	r3, #0
 80094c6:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 80094c8:	4b1a      	ldr	r3, [pc, #104]	; (8009534 <RTC_ExitInitMode+0x78>)
 80094ca:	68db      	ldr	r3, [r3, #12]
 80094cc:	4a19      	ldr	r2, [pc, #100]	; (8009534 <RTC_ExitInitMode+0x78>)
 80094ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094d2:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80094d4:	4b17      	ldr	r3, [pc, #92]	; (8009534 <RTC_ExitInitMode+0x78>)
 80094d6:	689b      	ldr	r3, [r3, #8]
 80094d8:	f003 0320 	and.w	r3, r3, #32
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d10c      	bne.n	80094fa <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f7ff ff93 	bl	800940c <HAL_RTC_WaitForSynchro>
 80094e6:	4603      	mov	r3, r0
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d01e      	beq.n	800952a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2203      	movs	r2, #3
 80094f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80094f4:	2303      	movs	r3, #3
 80094f6:	73fb      	strb	r3, [r7, #15]
 80094f8:	e017      	b.n	800952a <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80094fa:	4b0e      	ldr	r3, [pc, #56]	; (8009534 <RTC_ExitInitMode+0x78>)
 80094fc:	689b      	ldr	r3, [r3, #8]
 80094fe:	4a0d      	ldr	r2, [pc, #52]	; (8009534 <RTC_ExitInitMode+0x78>)
 8009500:	f023 0320 	bic.w	r3, r3, #32
 8009504:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f7ff ff80 	bl	800940c <HAL_RTC_WaitForSynchro>
 800950c:	4603      	mov	r3, r0
 800950e:	2b00      	cmp	r3, #0
 8009510:	d005      	beq.n	800951e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2203      	movs	r2, #3
 8009516:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800951a:	2303      	movs	r3, #3
 800951c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800951e:	4b05      	ldr	r3, [pc, #20]	; (8009534 <RTC_ExitInitMode+0x78>)
 8009520:	689b      	ldr	r3, [r3, #8]
 8009522:	4a04      	ldr	r2, [pc, #16]	; (8009534 <RTC_ExitInitMode+0x78>)
 8009524:	f043 0320 	orr.w	r3, r3, #32
 8009528:	6093      	str	r3, [r2, #8]
  }

  return status;
 800952a:	7bfb      	ldrb	r3, [r7, #15]
}
 800952c:	4618      	mov	r0, r3
 800952e:	3710      	adds	r7, #16
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}
 8009534:	58004000 	.word	0x58004000

08009538 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b08a      	sub	sp, #40	; 0x28
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d101      	bne.n	800954a <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8009546:	2301      	movs	r3, #1
 8009548:	e28e      	b.n	8009a68 <HAL_SAI_Init+0x530>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800954a:	f7f9 fac5 	bl	8002ad8 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009554:	2b01      	cmp	r3, #1
 8009556:	d113      	bne.n	8009580 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	4a96      	ldr	r2, [pc, #600]	; (80097b8 <HAL_SAI_Init+0x280>)
 800955e:	4293      	cmp	r3, r2
 8009560:	d004      	beq.n	800956c <HAL_SAI_Init+0x34>
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	4a95      	ldr	r2, [pc, #596]	; (80097bc <HAL_SAI_Init+0x284>)
 8009568:	4293      	cmp	r3, r2
 800956a:	d107      	bne.n	800957c <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8009570:	2b01      	cmp	r3, #1
 8009572:	d103      	bne.n	800957c <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8009578:	2b00      	cmp	r3, #0
 800957a:	d001      	beq.n	8009580 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 800957c:	2301      	movs	r3, #1
 800957e:	e273      	b.n	8009a68 <HAL_SAI_Init+0x530>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	4a8c      	ldr	r2, [pc, #560]	; (80097b8 <HAL_SAI_Init+0x280>)
 8009586:	4293      	cmp	r3, r2
 8009588:	d004      	beq.n	8009594 <HAL_SAI_Init+0x5c>
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	4a8c      	ldr	r2, [pc, #560]	; (80097c0 <HAL_SAI_Init+0x288>)
 8009590:	4293      	cmp	r3, r2
 8009592:	d102      	bne.n	800959a <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 8009594:	4b8b      	ldr	r3, [pc, #556]	; (80097c4 <HAL_SAI_Init+0x28c>)
 8009596:	61bb      	str	r3, [r7, #24]
 8009598:	e028      	b.n	80095ec <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	4a8a      	ldr	r2, [pc, #552]	; (80097c8 <HAL_SAI_Init+0x290>)
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d004      	beq.n	80095ae <HAL_SAI_Init+0x76>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	4a88      	ldr	r2, [pc, #544]	; (80097cc <HAL_SAI_Init+0x294>)
 80095aa:	4293      	cmp	r3, r2
 80095ac:	d102      	bne.n	80095b4 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 80095ae:	4b88      	ldr	r3, [pc, #544]	; (80097d0 <HAL_SAI_Init+0x298>)
 80095b0:	61bb      	str	r3, [r7, #24]
 80095b2:	e01b      	b.n	80095ec <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	4a86      	ldr	r2, [pc, #536]	; (80097d4 <HAL_SAI_Init+0x29c>)
 80095ba:	4293      	cmp	r3, r2
 80095bc:	d004      	beq.n	80095c8 <HAL_SAI_Init+0x90>
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	4a85      	ldr	r2, [pc, #532]	; (80097d8 <HAL_SAI_Init+0x2a0>)
 80095c4:	4293      	cmp	r3, r2
 80095c6:	d102      	bne.n	80095ce <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 80095c8:	4b84      	ldr	r3, [pc, #528]	; (80097dc <HAL_SAI_Init+0x2a4>)
 80095ca:	61bb      	str	r3, [r7, #24]
 80095cc:	e00e      	b.n	80095ec <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	4a7a      	ldr	r2, [pc, #488]	; (80097bc <HAL_SAI_Init+0x284>)
 80095d4:	4293      	cmp	r3, r2
 80095d6:	d004      	beq.n	80095e2 <HAL_SAI_Init+0xaa>
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	4a80      	ldr	r2, [pc, #512]	; (80097e0 <HAL_SAI_Init+0x2a8>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	d102      	bne.n	80095e8 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 80095e2:	4b80      	ldr	r3, [pc, #512]	; (80097e4 <HAL_SAI_Init+0x2ac>)
 80095e4:	61bb      	str	r3, [r7, #24]
 80095e6:	e001      	b.n	80095ec <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 80095e8:	2301      	movs	r3, #1
 80095ea:	e23d      	b.n	8009a68 <HAL_SAI_Init+0x530>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80095f2:	b2db      	uxtb	r3, r3
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d106      	bne.n	8009606 <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2200      	movs	r2, #0
 80095fc:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f7f9 f833 	bl	800266c <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f000 fa40 	bl	8009a8c <SAI_Disable>
 800960c:	4603      	mov	r3, r0
 800960e:	2b00      	cmp	r3, #0
 8009610:	d001      	beq.n	8009616 <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 8009612:	2301      	movs	r3, #1
 8009614:	e228      	b.n	8009a68 <HAL_SAI_Init+0x530>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2202      	movs	r2, #2
 800961a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	68db      	ldr	r3, [r3, #12]
 8009622:	2b02      	cmp	r3, #2
 8009624:	d00c      	beq.n	8009640 <HAL_SAI_Init+0x108>
 8009626:	2b02      	cmp	r3, #2
 8009628:	d80d      	bhi.n	8009646 <HAL_SAI_Init+0x10e>
 800962a:	2b00      	cmp	r3, #0
 800962c:	d002      	beq.n	8009634 <HAL_SAI_Init+0xfc>
 800962e:	2b01      	cmp	r3, #1
 8009630:	d003      	beq.n	800963a <HAL_SAI_Init+0x102>
 8009632:	e008      	b.n	8009646 <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8009634:	2300      	movs	r3, #0
 8009636:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009638:	e008      	b.n	800964c <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800963a:	2310      	movs	r3, #16
 800963c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800963e:	e005      	b.n	800964c <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8009640:	2320      	movs	r3, #32
 8009642:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009644:	e002      	b.n	800964c <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 8009646:	2300      	movs	r3, #0
 8009648:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800964a:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	689b      	ldr	r3, [r3, #8]
 8009650:	2b05      	cmp	r3, #5
 8009652:	d832      	bhi.n	80096ba <HAL_SAI_Init+0x182>
 8009654:	a201      	add	r2, pc, #4	; (adr r2, 800965c <HAL_SAI_Init+0x124>)
 8009656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800965a:	bf00      	nop
 800965c:	08009675 	.word	0x08009675
 8009660:	0800967b 	.word	0x0800967b
 8009664:	08009683 	.word	0x08009683
 8009668:	0800968b 	.word	0x0800968b
 800966c:	0800969b 	.word	0x0800969b
 8009670:	080096ab 	.word	0x080096ab
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8009674:	2300      	movs	r3, #0
 8009676:	61fb      	str	r3, [r7, #28]
      break;
 8009678:	e022      	b.n	80096c0 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800967a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800967e:	61fb      	str	r3, [r7, #28]
      break;
 8009680:	e01e      	b.n	80096c0 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009682:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009686:	61fb      	str	r3, [r7, #28]
      break;
 8009688:	e01a      	b.n	80096c0 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800968a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800968e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8009690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009692:	f043 0301 	orr.w	r3, r3, #1
 8009696:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009698:	e012      	b.n	80096c0 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800969a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800969e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 80096a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096a2:	f043 0302 	orr.w	r3, r3, #2
 80096a6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80096a8:	e00a      	b.n	80096c0 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80096aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80096ae:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 80096b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096b2:	f043 0303 	orr.w	r3, r3, #3
 80096b6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80096b8:	e002      	b.n	80096c0 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 80096ba:	2300      	movs	r3, #0
 80096bc:	61fb      	str	r3, [r7, #28]
      break;
 80096be:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 80096c0:	69bb      	ldr	r3, [r7, #24]
 80096c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096c4:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6a1b      	ldr	r3, [r3, #32]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	f000 80c5 	beq.w	800985a <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 80096d0:	2300      	movs	r3, #0
 80096d2:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	4a37      	ldr	r2, [pc, #220]	; (80097b8 <HAL_SAI_Init+0x280>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	d004      	beq.n	80096e8 <HAL_SAI_Init+0x1b0>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	4a37      	ldr	r2, [pc, #220]	; (80097c0 <HAL_SAI_Init+0x288>)
 80096e4:	4293      	cmp	r3, r2
 80096e6:	d106      	bne.n	80096f6 <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80096e8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80096ec:	f04f 0100 	mov.w	r1, #0
 80096f0:	f7fe fb16 	bl	8007d20 <HAL_RCCEx_GetPeriphCLKFreq>
 80096f4:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	4a33      	ldr	r2, [pc, #204]	; (80097c8 <HAL_SAI_Init+0x290>)
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d004      	beq.n	800970a <HAL_SAI_Init+0x1d2>
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	4a31      	ldr	r2, [pc, #196]	; (80097cc <HAL_SAI_Init+0x294>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d106      	bne.n	8009718 <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800970a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800970e:	f04f 0100 	mov.w	r1, #0
 8009712:	f7fe fb05 	bl	8007d20 <HAL_RCCEx_GetPeriphCLKFreq>
 8009716:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	4a2d      	ldr	r2, [pc, #180]	; (80097d4 <HAL_SAI_Init+0x29c>)
 800971e:	4293      	cmp	r3, r2
 8009720:	d004      	beq.n	800972c <HAL_SAI_Init+0x1f4>
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	4a2c      	ldr	r2, [pc, #176]	; (80097d8 <HAL_SAI_Init+0x2a0>)
 8009728:	4293      	cmp	r3, r2
 800972a:	d106      	bne.n	800973a <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 800972c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009730:	f04f 0100 	mov.w	r1, #0
 8009734:	f7fe faf4 	bl	8007d20 <HAL_RCCEx_GetPeriphCLKFreq>
 8009738:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	4a1f      	ldr	r2, [pc, #124]	; (80097bc <HAL_SAI_Init+0x284>)
 8009740:	4293      	cmp	r3, r2
 8009742:	d106      	bne.n	8009752 <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8009744:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8009748:	f04f 0100 	mov.w	r1, #0
 800974c:	f7fe fae8 	bl	8007d20 <HAL_RCCEx_GetPeriphCLKFreq>
 8009750:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	4a22      	ldr	r2, [pc, #136]	; (80097e0 <HAL_SAI_Init+0x2a8>)
 8009758:	4293      	cmp	r3, r2
 800975a:	d106      	bne.n	800976a <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800975c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009760:	f04f 0100 	mov.w	r1, #0
 8009764:	f7fe fadc 	bl	8007d20 <HAL_RCCEx_GetPeriphCLKFreq>
 8009768:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	699b      	ldr	r3, [r3, #24]
 800976e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009772:	d139      	bne.n	80097e8 <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009778:	2b04      	cmp	r3, #4
 800977a:	d102      	bne.n	8009782 <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800977c:	2340      	movs	r3, #64	; 0x40
 800977e:	60fb      	str	r3, [r7, #12]
 8009780:	e00a      	b.n	8009798 <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009786:	2b08      	cmp	r3, #8
 8009788:	d103      	bne.n	8009792 <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800978a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800978e:	60fb      	str	r3, [r7, #12]
 8009790:	e002      	b.n	8009798 <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009796:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8009798:	697a      	ldr	r2, [r7, #20]
 800979a:	4613      	mov	r3, r2
 800979c:	009b      	lsls	r3, r3, #2
 800979e:	4413      	add	r3, r2
 80097a0:	005b      	lsls	r3, r3, #1
 80097a2:	4619      	mov	r1, r3
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6a1b      	ldr	r3, [r3, #32]
 80097a8:	68fa      	ldr	r2, [r7, #12]
 80097aa:	fb02 f303 	mul.w	r3, r2, r3
 80097ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80097b2:	613b      	str	r3, [r7, #16]
 80097b4:	e030      	b.n	8009818 <HAL_SAI_Init+0x2e0>
 80097b6:	bf00      	nop
 80097b8:	40015804 	.word	0x40015804
 80097bc:	58005404 	.word	0x58005404
 80097c0:	40015824 	.word	0x40015824
 80097c4:	40015800 	.word	0x40015800
 80097c8:	40015c04 	.word	0x40015c04
 80097cc:	40015c24 	.word	0x40015c24
 80097d0:	40015c00 	.word	0x40015c00
 80097d4:	40016004 	.word	0x40016004
 80097d8:	40016024 	.word	0x40016024
 80097dc:	40016000 	.word	0x40016000
 80097e0:	58005424 	.word	0x58005424
 80097e4:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80097f0:	d101      	bne.n	80097f6 <HAL_SAI_Init+0x2be>
 80097f2:	2302      	movs	r3, #2
 80097f4:	e000      	b.n	80097f8 <HAL_SAI_Init+0x2c0>
 80097f6:	2301      	movs	r3, #1
 80097f8:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 80097fa:	697a      	ldr	r2, [r7, #20]
 80097fc:	4613      	mov	r3, r2
 80097fe:	009b      	lsls	r3, r3, #2
 8009800:	4413      	add	r3, r2
 8009802:	005b      	lsls	r3, r3, #1
 8009804:	4619      	mov	r1, r3
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6a1b      	ldr	r3, [r3, #32]
 800980a:	68ba      	ldr	r2, [r7, #8]
 800980c:	fb02 f303 	mul.w	r3, r2, r3
 8009810:	021b      	lsls	r3, r3, #8
 8009812:	fbb1 f3f3 	udiv	r3, r1, r3
 8009816:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8009818:	693b      	ldr	r3, [r7, #16]
 800981a:	4a95      	ldr	r2, [pc, #596]	; (8009a70 <HAL_SAI_Init+0x538>)
 800981c:	fba2 2303 	umull	r2, r3, r2, r3
 8009820:	08da      	lsrs	r2, r3, #3
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8009826:	6939      	ldr	r1, [r7, #16]
 8009828:	4b91      	ldr	r3, [pc, #580]	; (8009a70 <HAL_SAI_Init+0x538>)
 800982a:	fba3 2301 	umull	r2, r3, r3, r1
 800982e:	08da      	lsrs	r2, r3, #3
 8009830:	4613      	mov	r3, r2
 8009832:	009b      	lsls	r3, r3, #2
 8009834:	4413      	add	r3, r2
 8009836:	005b      	lsls	r3, r3, #1
 8009838:	1aca      	subs	r2, r1, r3
 800983a:	2a08      	cmp	r2, #8
 800983c:	d904      	bls.n	8009848 <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009842:	1c5a      	adds	r2, r3, #1
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800984c:	2b04      	cmp	r3, #4
 800984e:	d104      	bne.n	800985a <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009854:	085a      	lsrs	r2, r3, #1
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	685b      	ldr	r3, [r3, #4]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d003      	beq.n	800986a <HAL_SAI_Init+0x332>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	685b      	ldr	r3, [r3, #4]
 8009866:	2b02      	cmp	r3, #2
 8009868:	d109      	bne.n	800987e <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800986e:	2b01      	cmp	r3, #1
 8009870:	d101      	bne.n	8009876 <HAL_SAI_Init+0x33e>
 8009872:	2300      	movs	r3, #0
 8009874:	e001      	b.n	800987a <HAL_SAI_Init+0x342>
 8009876:	f44f 7300 	mov.w	r3, #512	; 0x200
 800987a:	623b      	str	r3, [r7, #32]
 800987c:	e008      	b.n	8009890 <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009882:	2b01      	cmp	r3, #1
 8009884:	d102      	bne.n	800988c <HAL_SAI_Init+0x354>
 8009886:	f44f 7300 	mov.w	r3, #512	; 0x200
 800988a:	e000      	b.n	800988e <HAL_SAI_Init+0x356>
 800988c:	2300      	movs	r3, #0
 800988e:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8009890:	f7f9 f922 	bl	8002ad8 <HAL_GetREVID>
 8009894:	4603      	mov	r3, r0
 8009896:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800989a:	d331      	bcc.n	8009900 <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	6819      	ldr	r1, [r3, #0]
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681a      	ldr	r2, [r3, #0]
 80098a6:	4b73      	ldr	r3, [pc, #460]	; (8009a74 <HAL_SAI_Init+0x53c>)
 80098a8:	400b      	ands	r3, r1
 80098aa:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	6819      	ldr	r1, [r3, #0]
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	685a      	ldr	r2, [r3, #4]
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098ba:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80098c0:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098c6:	431a      	orrs	r2, r3
 80098c8:	6a3b      	ldr	r3, [r7, #32]
 80098ca:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 80098cc:	69fb      	ldr	r3, [r7, #28]
 80098ce:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 80098d4:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	695b      	ldr	r3, [r3, #20]
 80098da:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80098e0:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098e6:	051b      	lsls	r3, r3, #20
 80098e8:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80098ee:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	691b      	ldr	r3, [r3, #16]
 80098f4:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	430a      	orrs	r2, r1
 80098fc:	601a      	str	r2, [r3, #0]
 80098fe:	e02d      	b.n	800995c <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	6819      	ldr	r1, [r3, #0]
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681a      	ldr	r2, [r3, #0]
 800990a:	4b5b      	ldr	r3, [pc, #364]	; (8009a78 <HAL_SAI_Init+0x540>)
 800990c:	400b      	ands	r3, r1
 800990e:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	6819      	ldr	r1, [r3, #0]
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	685a      	ldr	r2, [r3, #4]
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800991e:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009924:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800992a:	431a      	orrs	r2, r3
 800992c:	6a3b      	ldr	r3, [r7, #32]
 800992e:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8009930:	69fb      	ldr	r3, [r7, #28]
 8009932:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8009938:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	695b      	ldr	r3, [r3, #20]
 800993e:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009944:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800994a:	051b      	lsls	r3, r3, #20
 800994c:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009952:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	430a      	orrs	r2, r1
 800995a:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	6859      	ldr	r1, [r3, #4]
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681a      	ldr	r2, [r3, #0]
 8009966:	4b45      	ldr	r3, [pc, #276]	; (8009a7c <HAL_SAI_Init+0x544>)
 8009968:	400b      	ands	r3, r1
 800996a:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	6859      	ldr	r1, [r3, #4]
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	69da      	ldr	r2, [r3, #28]
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800997a:	431a      	orrs	r2, r3
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009980:	431a      	orrs	r2, r3
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	430a      	orrs	r2, r1
 8009988:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	6899      	ldr	r1, [r3, #8]
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681a      	ldr	r2, [r3, #0]
 8009994:	4b3a      	ldr	r3, [pc, #232]	; (8009a80 <HAL_SAI_Init+0x548>)
 8009996:	400b      	ands	r3, r1
 8009998:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	6899      	ldr	r1, [r3, #8]
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099a4:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80099aa:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 80099b0:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 80099b6:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099bc:	3b01      	subs	r3, #1
 80099be:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80099c0:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	430a      	orrs	r2, r1
 80099c8:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	68d9      	ldr	r1, [r3, #12]
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681a      	ldr	r2, [r3, #0]
 80099d4:	f24f 0320 	movw	r3, #61472	; 0xf020
 80099d8:	400b      	ands	r3, r1
 80099da:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	68d9      	ldr	r1, [r3, #12]
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80099ea:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80099f0:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80099f2:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099f8:	3b01      	subs	r3, #1
 80099fa:	021b      	lsls	r3, r3, #8
 80099fc:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	430a      	orrs	r2, r1
 8009a04:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	4a1e      	ldr	r2, [pc, #120]	; (8009a84 <HAL_SAI_Init+0x54c>)
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	d004      	beq.n	8009a1a <HAL_SAI_Init+0x4e2>
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	4a1c      	ldr	r2, [pc, #112]	; (8009a88 <HAL_SAI_Init+0x550>)
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d119      	bne.n	8009a4e <HAL_SAI_Init+0x516>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8009a1a:	69bb      	ldr	r3, [r7, #24]
 8009a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a1e:	f023 0201 	bic.w	r2, r3, #1
 8009a22:	69bb      	ldr	r3, [r7, #24]
 8009a24:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009a2c:	2b01      	cmp	r3, #1
 8009a2e:	d10e      	bne.n	8009a4e <HAL_SAI_Init+0x516>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a38:	3b01      	subs	r3, #1
 8009a3a:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8009a3c:	431a      	orrs	r2, r3
 8009a3e:	69bb      	ldr	r3, [r7, #24]
 8009a40:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8009a42:	69bb      	ldr	r3, [r7, #24]
 8009a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a46:	f043 0201 	orr.w	r2, r3, #1
 8009a4a:	69bb      	ldr	r3, [r7, #24]
 8009a4c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2200      	movs	r2, #0
 8009a52:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2201      	movs	r2, #1
 8009a5a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2200      	movs	r2, #0
 8009a62:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8009a66:	2300      	movs	r3, #0
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	3728      	adds	r7, #40	; 0x28
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}
 8009a70:	cccccccd 	.word	0xcccccccd
 8009a74:	f005c010 	.word	0xf005c010
 8009a78:	f805c010 	.word	0xf805c010
 8009a7c:	ffff1ff0 	.word	0xffff1ff0
 8009a80:	fff88000 	.word	0xfff88000
 8009a84:	40015804 	.word	0x40015804
 8009a88:	58005404 	.word	0x58005404

08009a8c <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	b085      	sub	sp, #20
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8009a94:	4b18      	ldr	r3, [pc, #96]	; (8009af8 <SAI_Disable+0x6c>)
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	4a18      	ldr	r2, [pc, #96]	; (8009afc <SAI_Disable+0x70>)
 8009a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8009a9e:	0b1b      	lsrs	r3, r3, #12
 8009aa0:	009b      	lsls	r3, r3, #2
 8009aa2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	681a      	ldr	r2, [r3, #0]
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009ab6:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d10a      	bne.n	8009ad4 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009ac4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 8009ace:	2303      	movs	r3, #3
 8009ad0:	72fb      	strb	r3, [r7, #11]
      break;
 8009ad2:	e009      	b.n	8009ae8 <SAI_Disable+0x5c>
    }
    count--;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	3b01      	subs	r3, #1
 8009ad8:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d1e7      	bne.n	8009ab8 <SAI_Disable+0x2c>

  return status;
 8009ae8:	7afb      	ldrb	r3, [r7, #11]
}
 8009aea:	4618      	mov	r0, r3
 8009aec:	3714      	adds	r7, #20
 8009aee:	46bd      	mov	sp, r7
 8009af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af4:	4770      	bx	lr
 8009af6:	bf00      	nop
 8009af8:	24000000 	.word	0x24000000
 8009afc:	95cbec1b 	.word	0x95cbec1b

08009b00 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b082      	sub	sp, #8
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
 8009b08:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d101      	bne.n	8009b14 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009b10:	2301      	movs	r3, #1
 8009b12:	e02b      	b.n	8009b6c <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009b1a:	b2db      	uxtb	r3, r3
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d106      	bne.n	8009b2e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2200      	movs	r2, #0
 8009b24:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f7f8 fd95 	bl	8002658 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2202      	movs	r2, #2
 8009b32:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681a      	ldr	r2, [r3, #0]
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	3304      	adds	r3, #4
 8009b3e:	4619      	mov	r1, r3
 8009b40:	4610      	mov	r0, r2
 8009b42:	f001 fdb3 	bl	800b6ac <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6818      	ldr	r0, [r3, #0]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	685b      	ldr	r3, [r3, #4]
 8009b4e:	461a      	mov	r2, r3
 8009b50:	6839      	ldr	r1, [r7, #0]
 8009b52:	f001 fe07 	bl	800b764 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8009b56:	4b07      	ldr	r3, [pc, #28]	; (8009b74 <HAL_SDRAM_Init+0x74>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	4a06      	ldr	r2, [pc, #24]	; (8009b74 <HAL_SDRAM_Init+0x74>)
 8009b5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009b60:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2201      	movs	r2, #1
 8009b66:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009b6a:	2300      	movs	r3, #0
}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	3708      	adds	r7, #8
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd80      	pop	{r7, pc}
 8009b74:	52004000 	.word	0x52004000

08009b78 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b084      	sub	sp, #16
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d101      	bne.n	8009b8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009b86:	2301      	movs	r3, #1
 8009b88:	e10f      	b.n	8009daa <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	4a87      	ldr	r2, [pc, #540]	; (8009db4 <HAL_SPI_Init+0x23c>)
 8009b96:	4293      	cmp	r3, r2
 8009b98:	d00f      	beq.n	8009bba <HAL_SPI_Init+0x42>
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	4a86      	ldr	r2, [pc, #536]	; (8009db8 <HAL_SPI_Init+0x240>)
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	d00a      	beq.n	8009bba <HAL_SPI_Init+0x42>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	4a84      	ldr	r2, [pc, #528]	; (8009dbc <HAL_SPI_Init+0x244>)
 8009baa:	4293      	cmp	r3, r2
 8009bac:	d005      	beq.n	8009bba <HAL_SPI_Init+0x42>
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	68db      	ldr	r3, [r3, #12]
 8009bb2:	2b0f      	cmp	r3, #15
 8009bb4:	d901      	bls.n	8009bba <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	e0f7      	b.n	8009daa <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f000 f900 	bl	8009dc0 <SPI_GetPacketSize>
 8009bc0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	4a7b      	ldr	r2, [pc, #492]	; (8009db4 <HAL_SPI_Init+0x23c>)
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d00c      	beq.n	8009be6 <HAL_SPI_Init+0x6e>
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	4a79      	ldr	r2, [pc, #484]	; (8009db8 <HAL_SPI_Init+0x240>)
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	d007      	beq.n	8009be6 <HAL_SPI_Init+0x6e>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	4a78      	ldr	r2, [pc, #480]	; (8009dbc <HAL_SPI_Init+0x244>)
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	d002      	beq.n	8009be6 <HAL_SPI_Init+0x6e>
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	2b08      	cmp	r3, #8
 8009be4:	d811      	bhi.n	8009c0a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009bea:	4a72      	ldr	r2, [pc, #456]	; (8009db4 <HAL_SPI_Init+0x23c>)
 8009bec:	4293      	cmp	r3, r2
 8009bee:	d009      	beq.n	8009c04 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	4a70      	ldr	r2, [pc, #448]	; (8009db8 <HAL_SPI_Init+0x240>)
 8009bf6:	4293      	cmp	r3, r2
 8009bf8:	d004      	beq.n	8009c04 <HAL_SPI_Init+0x8c>
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	4a6f      	ldr	r2, [pc, #444]	; (8009dbc <HAL_SPI_Init+0x244>)
 8009c00:	4293      	cmp	r3, r2
 8009c02:	d104      	bne.n	8009c0e <HAL_SPI_Init+0x96>
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	2b10      	cmp	r3, #16
 8009c08:	d901      	bls.n	8009c0e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	e0cd      	b.n	8009daa <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009c14:	b2db      	uxtb	r3, r3
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d106      	bne.n	8009c28 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f7f8 fa8a 	bl	800213c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2202      	movs	r2, #2
 8009c2c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	681a      	ldr	r2, [r3, #0]
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	f022 0201 	bic.w	r2, r2, #1
 8009c3e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	689b      	ldr	r3, [r3, #8]
 8009c46:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8009c4a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	699b      	ldr	r3, [r3, #24]
 8009c50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009c54:	d119      	bne.n	8009c8a <HAL_SPI_Init+0x112>
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	685b      	ldr	r3, [r3, #4]
 8009c5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009c5e:	d103      	bne.n	8009c68 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d008      	beq.n	8009c7a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d10c      	bne.n	8009c8a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009c74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c78:	d107      	bne.n	8009c8a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	681a      	ldr	r2, [r3, #0]
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009c88:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	685b      	ldr	r3, [r3, #4]
 8009c8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d00f      	beq.n	8009cb6 <HAL_SPI_Init+0x13e>
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	68db      	ldr	r3, [r3, #12]
 8009c9a:	2b06      	cmp	r3, #6
 8009c9c:	d90b      	bls.n	8009cb6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	430a      	orrs	r2, r1
 8009cb2:	601a      	str	r2, [r3, #0]
 8009cb4:	e007      	b.n	8009cc6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	681a      	ldr	r2, [r3, #0]
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009cc4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	69da      	ldr	r2, [r3, #28]
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cce:	431a      	orrs	r2, r3
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	431a      	orrs	r2, r3
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cd8:	ea42 0103 	orr.w	r1, r2, r3
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	68da      	ldr	r2, [r3, #12]
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	430a      	orrs	r2, r1
 8009ce6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cf0:	431a      	orrs	r2, r3
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cf6:	431a      	orrs	r2, r3
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	699b      	ldr	r3, [r3, #24]
 8009cfc:	431a      	orrs	r2, r3
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	691b      	ldr	r3, [r3, #16]
 8009d02:	431a      	orrs	r2, r3
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	695b      	ldr	r3, [r3, #20]
 8009d08:	431a      	orrs	r2, r3
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6a1b      	ldr	r3, [r3, #32]
 8009d0e:	431a      	orrs	r2, r3
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	685b      	ldr	r3, [r3, #4]
 8009d14:	431a      	orrs	r2, r3
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d1a:	431a      	orrs	r2, r3
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	689b      	ldr	r3, [r3, #8]
 8009d20:	431a      	orrs	r2, r3
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d26:	ea42 0103 	orr.w	r1, r2, r3
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	430a      	orrs	r2, r1
 8009d34:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	685b      	ldr	r3, [r3, #4]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d113      	bne.n	8009d66 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	689b      	ldr	r3, [r3, #8]
 8009d44:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009d50:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	689b      	ldr	r3, [r3, #8]
 8009d58:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009d64:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f022 0201 	bic.w	r2, r2, #1
 8009d74:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	685b      	ldr	r3, [r3, #4]
 8009d7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d00a      	beq.n	8009d98 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	68db      	ldr	r3, [r3, #12]
 8009d88:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	430a      	orrs	r2, r1
 8009d96:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2201      	movs	r2, #1
 8009da4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8009da8:	2300      	movs	r3, #0
}
 8009daa:	4618      	mov	r0, r3
 8009dac:	3710      	adds	r7, #16
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}
 8009db2:	bf00      	nop
 8009db4:	40013000 	.word	0x40013000
 8009db8:	40003800 	.word	0x40003800
 8009dbc:	40003c00 	.word	0x40003c00

08009dc0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b085      	sub	sp, #20
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009dcc:	095b      	lsrs	r3, r3, #5
 8009dce:	3301      	adds	r3, #1
 8009dd0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	68db      	ldr	r3, [r3, #12]
 8009dd6:	3301      	adds	r3, #1
 8009dd8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	3307      	adds	r3, #7
 8009dde:	08db      	lsrs	r3, r3, #3
 8009de0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	68fa      	ldr	r2, [r7, #12]
 8009de6:	fb02 f303 	mul.w	r3, r2, r3
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3714      	adds	r7, #20
 8009dee:	46bd      	mov	sp, r7
 8009df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df4:	4770      	bx	lr

08009df6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009df6:	b580      	push	{r7, lr}
 8009df8:	b082      	sub	sp, #8
 8009dfa:	af00      	add	r7, sp, #0
 8009dfc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d101      	bne.n	8009e08 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009e04:	2301      	movs	r3, #1
 8009e06:	e049      	b.n	8009e9c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e0e:	b2db      	uxtb	r3, r3
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d106      	bne.n	8009e22 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2200      	movs	r2, #0
 8009e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009e1c:	6878      	ldr	r0, [r7, #4]
 8009e1e:	f7f8 fa57 	bl	80022d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2202      	movs	r2, #2
 8009e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681a      	ldr	r2, [r3, #0]
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	3304      	adds	r3, #4
 8009e32:	4619      	mov	r1, r3
 8009e34:	4610      	mov	r0, r2
 8009e36:	f000 f99d 	bl	800a174 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2201      	movs	r2, #1
 8009e3e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2201      	movs	r2, #1
 8009e46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2201      	movs	r2, #1
 8009e4e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2201      	movs	r2, #1
 8009e56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2201      	movs	r2, #1
 8009e5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2201      	movs	r2, #1
 8009e66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2201      	movs	r2, #1
 8009e6e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2201      	movs	r2, #1
 8009e76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2201      	movs	r2, #1
 8009e7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	2201      	movs	r2, #1
 8009e86:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2201      	movs	r2, #1
 8009e8e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2201      	movs	r2, #1
 8009e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009e9a:	2300      	movs	r3, #0
}
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	3708      	adds	r7, #8
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bd80      	pop	{r7, pc}

08009ea4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	b085      	sub	sp, #20
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009eb2:	b2db      	uxtb	r3, r3
 8009eb4:	2b01      	cmp	r3, #1
 8009eb6:	d001      	beq.n	8009ebc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009eb8:	2301      	movs	r3, #1
 8009eba:	e04c      	b.n	8009f56 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2202      	movs	r2, #2
 8009ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	4a26      	ldr	r2, [pc, #152]	; (8009f64 <HAL_TIM_Base_Start+0xc0>)
 8009eca:	4293      	cmp	r3, r2
 8009ecc:	d022      	beq.n	8009f14 <HAL_TIM_Base_Start+0x70>
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ed6:	d01d      	beq.n	8009f14 <HAL_TIM_Base_Start+0x70>
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	4a22      	ldr	r2, [pc, #136]	; (8009f68 <HAL_TIM_Base_Start+0xc4>)
 8009ede:	4293      	cmp	r3, r2
 8009ee0:	d018      	beq.n	8009f14 <HAL_TIM_Base_Start+0x70>
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	4a21      	ldr	r2, [pc, #132]	; (8009f6c <HAL_TIM_Base_Start+0xc8>)
 8009ee8:	4293      	cmp	r3, r2
 8009eea:	d013      	beq.n	8009f14 <HAL_TIM_Base_Start+0x70>
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	4a1f      	ldr	r2, [pc, #124]	; (8009f70 <HAL_TIM_Base_Start+0xcc>)
 8009ef2:	4293      	cmp	r3, r2
 8009ef4:	d00e      	beq.n	8009f14 <HAL_TIM_Base_Start+0x70>
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	4a1e      	ldr	r2, [pc, #120]	; (8009f74 <HAL_TIM_Base_Start+0xd0>)
 8009efc:	4293      	cmp	r3, r2
 8009efe:	d009      	beq.n	8009f14 <HAL_TIM_Base_Start+0x70>
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	4a1c      	ldr	r2, [pc, #112]	; (8009f78 <HAL_TIM_Base_Start+0xd4>)
 8009f06:	4293      	cmp	r3, r2
 8009f08:	d004      	beq.n	8009f14 <HAL_TIM_Base_Start+0x70>
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	4a1b      	ldr	r2, [pc, #108]	; (8009f7c <HAL_TIM_Base_Start+0xd8>)
 8009f10:	4293      	cmp	r3, r2
 8009f12:	d115      	bne.n	8009f40 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	689a      	ldr	r2, [r3, #8]
 8009f1a:	4b19      	ldr	r3, [pc, #100]	; (8009f80 <HAL_TIM_Base_Start+0xdc>)
 8009f1c:	4013      	ands	r3, r2
 8009f1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	2b06      	cmp	r3, #6
 8009f24:	d015      	beq.n	8009f52 <HAL_TIM_Base_Start+0xae>
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f2c:	d011      	beq.n	8009f52 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	681a      	ldr	r2, [r3, #0]
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f042 0201 	orr.w	r2, r2, #1
 8009f3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f3e:	e008      	b.n	8009f52 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	681a      	ldr	r2, [r3, #0]
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f042 0201 	orr.w	r2, r2, #1
 8009f4e:	601a      	str	r2, [r3, #0]
 8009f50:	e000      	b.n	8009f54 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f52:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009f54:	2300      	movs	r3, #0
}
 8009f56:	4618      	mov	r0, r3
 8009f58:	3714      	adds	r7, #20
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f60:	4770      	bx	lr
 8009f62:	bf00      	nop
 8009f64:	40010000 	.word	0x40010000
 8009f68:	40000400 	.word	0x40000400
 8009f6c:	40000800 	.word	0x40000800
 8009f70:	40000c00 	.word	0x40000c00
 8009f74:	40010400 	.word	0x40010400
 8009f78:	40001800 	.word	0x40001800
 8009f7c:	40014000 	.word	0x40014000
 8009f80:	00010007 	.word	0x00010007

08009f84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b084      	sub	sp, #16
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
 8009f8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009f8e:	2300      	movs	r3, #0
 8009f90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f98:	2b01      	cmp	r3, #1
 8009f9a:	d101      	bne.n	8009fa0 <HAL_TIM_ConfigClockSource+0x1c>
 8009f9c:	2302      	movs	r3, #2
 8009f9e:	e0dc      	b.n	800a15a <HAL_TIM_ConfigClockSource+0x1d6>
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2201      	movs	r2, #1
 8009fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2202      	movs	r2, #2
 8009fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	689b      	ldr	r3, [r3, #8]
 8009fb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009fb8:	68ba      	ldr	r2, [r7, #8]
 8009fba:	4b6a      	ldr	r3, [pc, #424]	; (800a164 <HAL_TIM_ConfigClockSource+0x1e0>)
 8009fbc:	4013      	ands	r3, r2
 8009fbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009fc6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	68ba      	ldr	r2, [r7, #8]
 8009fce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	4a64      	ldr	r2, [pc, #400]	; (800a168 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009fd6:	4293      	cmp	r3, r2
 8009fd8:	f000 80a9 	beq.w	800a12e <HAL_TIM_ConfigClockSource+0x1aa>
 8009fdc:	4a62      	ldr	r2, [pc, #392]	; (800a168 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009fde:	4293      	cmp	r3, r2
 8009fe0:	f200 80ae 	bhi.w	800a140 <HAL_TIM_ConfigClockSource+0x1bc>
 8009fe4:	4a61      	ldr	r2, [pc, #388]	; (800a16c <HAL_TIM_ConfigClockSource+0x1e8>)
 8009fe6:	4293      	cmp	r3, r2
 8009fe8:	f000 80a1 	beq.w	800a12e <HAL_TIM_ConfigClockSource+0x1aa>
 8009fec:	4a5f      	ldr	r2, [pc, #380]	; (800a16c <HAL_TIM_ConfigClockSource+0x1e8>)
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	f200 80a6 	bhi.w	800a140 <HAL_TIM_ConfigClockSource+0x1bc>
 8009ff4:	4a5e      	ldr	r2, [pc, #376]	; (800a170 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	f000 8099 	beq.w	800a12e <HAL_TIM_ConfigClockSource+0x1aa>
 8009ffc:	4a5c      	ldr	r2, [pc, #368]	; (800a170 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009ffe:	4293      	cmp	r3, r2
 800a000:	f200 809e 	bhi.w	800a140 <HAL_TIM_ConfigClockSource+0x1bc>
 800a004:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a008:	f000 8091 	beq.w	800a12e <HAL_TIM_ConfigClockSource+0x1aa>
 800a00c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a010:	f200 8096 	bhi.w	800a140 <HAL_TIM_ConfigClockSource+0x1bc>
 800a014:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a018:	f000 8089 	beq.w	800a12e <HAL_TIM_ConfigClockSource+0x1aa>
 800a01c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a020:	f200 808e 	bhi.w	800a140 <HAL_TIM_ConfigClockSource+0x1bc>
 800a024:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a028:	d03e      	beq.n	800a0a8 <HAL_TIM_ConfigClockSource+0x124>
 800a02a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a02e:	f200 8087 	bhi.w	800a140 <HAL_TIM_ConfigClockSource+0x1bc>
 800a032:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a036:	f000 8086 	beq.w	800a146 <HAL_TIM_ConfigClockSource+0x1c2>
 800a03a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a03e:	d87f      	bhi.n	800a140 <HAL_TIM_ConfigClockSource+0x1bc>
 800a040:	2b70      	cmp	r3, #112	; 0x70
 800a042:	d01a      	beq.n	800a07a <HAL_TIM_ConfigClockSource+0xf6>
 800a044:	2b70      	cmp	r3, #112	; 0x70
 800a046:	d87b      	bhi.n	800a140 <HAL_TIM_ConfigClockSource+0x1bc>
 800a048:	2b60      	cmp	r3, #96	; 0x60
 800a04a:	d050      	beq.n	800a0ee <HAL_TIM_ConfigClockSource+0x16a>
 800a04c:	2b60      	cmp	r3, #96	; 0x60
 800a04e:	d877      	bhi.n	800a140 <HAL_TIM_ConfigClockSource+0x1bc>
 800a050:	2b50      	cmp	r3, #80	; 0x50
 800a052:	d03c      	beq.n	800a0ce <HAL_TIM_ConfigClockSource+0x14a>
 800a054:	2b50      	cmp	r3, #80	; 0x50
 800a056:	d873      	bhi.n	800a140 <HAL_TIM_ConfigClockSource+0x1bc>
 800a058:	2b40      	cmp	r3, #64	; 0x40
 800a05a:	d058      	beq.n	800a10e <HAL_TIM_ConfigClockSource+0x18a>
 800a05c:	2b40      	cmp	r3, #64	; 0x40
 800a05e:	d86f      	bhi.n	800a140 <HAL_TIM_ConfigClockSource+0x1bc>
 800a060:	2b30      	cmp	r3, #48	; 0x30
 800a062:	d064      	beq.n	800a12e <HAL_TIM_ConfigClockSource+0x1aa>
 800a064:	2b30      	cmp	r3, #48	; 0x30
 800a066:	d86b      	bhi.n	800a140 <HAL_TIM_ConfigClockSource+0x1bc>
 800a068:	2b20      	cmp	r3, #32
 800a06a:	d060      	beq.n	800a12e <HAL_TIM_ConfigClockSource+0x1aa>
 800a06c:	2b20      	cmp	r3, #32
 800a06e:	d867      	bhi.n	800a140 <HAL_TIM_ConfigClockSource+0x1bc>
 800a070:	2b00      	cmp	r3, #0
 800a072:	d05c      	beq.n	800a12e <HAL_TIM_ConfigClockSource+0x1aa>
 800a074:	2b10      	cmp	r3, #16
 800a076:	d05a      	beq.n	800a12e <HAL_TIM_ConfigClockSource+0x1aa>
 800a078:	e062      	b.n	800a140 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6818      	ldr	r0, [r3, #0]
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	6899      	ldr	r1, [r3, #8]
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	685a      	ldr	r2, [r3, #4]
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	68db      	ldr	r3, [r3, #12]
 800a08a:	f000 f98b 	bl	800a3a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	689b      	ldr	r3, [r3, #8]
 800a094:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a09c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	68ba      	ldr	r2, [r7, #8]
 800a0a4:	609a      	str	r2, [r3, #8]
      break;
 800a0a6:	e04f      	b.n	800a148 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	6818      	ldr	r0, [r3, #0]
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	6899      	ldr	r1, [r3, #8]
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	685a      	ldr	r2, [r3, #4]
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	68db      	ldr	r3, [r3, #12]
 800a0b8:	f000 f974 	bl	800a3a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	689a      	ldr	r2, [r3, #8]
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a0ca:	609a      	str	r2, [r3, #8]
      break;
 800a0cc:	e03c      	b.n	800a148 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6818      	ldr	r0, [r3, #0]
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	6859      	ldr	r1, [r3, #4]
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	68db      	ldr	r3, [r3, #12]
 800a0da:	461a      	mov	r2, r3
 800a0dc:	f000 f8e4 	bl	800a2a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	2150      	movs	r1, #80	; 0x50
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f000 f93e 	bl	800a368 <TIM_ITRx_SetConfig>
      break;
 800a0ec:	e02c      	b.n	800a148 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6818      	ldr	r0, [r3, #0]
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	6859      	ldr	r1, [r3, #4]
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	68db      	ldr	r3, [r3, #12]
 800a0fa:	461a      	mov	r2, r3
 800a0fc:	f000 f903 	bl	800a306 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	2160      	movs	r1, #96	; 0x60
 800a106:	4618      	mov	r0, r3
 800a108:	f000 f92e 	bl	800a368 <TIM_ITRx_SetConfig>
      break;
 800a10c:	e01c      	b.n	800a148 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6818      	ldr	r0, [r3, #0]
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	6859      	ldr	r1, [r3, #4]
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	68db      	ldr	r3, [r3, #12]
 800a11a:	461a      	mov	r2, r3
 800a11c:	f000 f8c4 	bl	800a2a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	2140      	movs	r1, #64	; 0x40
 800a126:	4618      	mov	r0, r3
 800a128:	f000 f91e 	bl	800a368 <TIM_ITRx_SetConfig>
      break;
 800a12c:	e00c      	b.n	800a148 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681a      	ldr	r2, [r3, #0]
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	4619      	mov	r1, r3
 800a138:	4610      	mov	r0, r2
 800a13a:	f000 f915 	bl	800a368 <TIM_ITRx_SetConfig>
      break;
 800a13e:	e003      	b.n	800a148 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800a140:	2301      	movs	r3, #1
 800a142:	73fb      	strb	r3, [r7, #15]
      break;
 800a144:	e000      	b.n	800a148 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800a146:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2201      	movs	r2, #1
 800a14c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2200      	movs	r2, #0
 800a154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a158:	7bfb      	ldrb	r3, [r7, #15]
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	3710      	adds	r7, #16
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}
 800a162:	bf00      	nop
 800a164:	ffceff88 	.word	0xffceff88
 800a168:	00100040 	.word	0x00100040
 800a16c:	00100030 	.word	0x00100030
 800a170:	00100020 	.word	0x00100020

0800a174 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a174:	b480      	push	{r7}
 800a176:	b085      	sub	sp, #20
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
 800a17c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	4a40      	ldr	r2, [pc, #256]	; (800a288 <TIM_Base_SetConfig+0x114>)
 800a188:	4293      	cmp	r3, r2
 800a18a:	d013      	beq.n	800a1b4 <TIM_Base_SetConfig+0x40>
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a192:	d00f      	beq.n	800a1b4 <TIM_Base_SetConfig+0x40>
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	4a3d      	ldr	r2, [pc, #244]	; (800a28c <TIM_Base_SetConfig+0x118>)
 800a198:	4293      	cmp	r3, r2
 800a19a:	d00b      	beq.n	800a1b4 <TIM_Base_SetConfig+0x40>
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	4a3c      	ldr	r2, [pc, #240]	; (800a290 <TIM_Base_SetConfig+0x11c>)
 800a1a0:	4293      	cmp	r3, r2
 800a1a2:	d007      	beq.n	800a1b4 <TIM_Base_SetConfig+0x40>
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	4a3b      	ldr	r2, [pc, #236]	; (800a294 <TIM_Base_SetConfig+0x120>)
 800a1a8:	4293      	cmp	r3, r2
 800a1aa:	d003      	beq.n	800a1b4 <TIM_Base_SetConfig+0x40>
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	4a3a      	ldr	r2, [pc, #232]	; (800a298 <TIM_Base_SetConfig+0x124>)
 800a1b0:	4293      	cmp	r3, r2
 800a1b2:	d108      	bne.n	800a1c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	685b      	ldr	r3, [r3, #4]
 800a1c0:	68fa      	ldr	r2, [r7, #12]
 800a1c2:	4313      	orrs	r3, r2
 800a1c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	4a2f      	ldr	r2, [pc, #188]	; (800a288 <TIM_Base_SetConfig+0x114>)
 800a1ca:	4293      	cmp	r3, r2
 800a1cc:	d01f      	beq.n	800a20e <TIM_Base_SetConfig+0x9a>
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1d4:	d01b      	beq.n	800a20e <TIM_Base_SetConfig+0x9a>
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	4a2c      	ldr	r2, [pc, #176]	; (800a28c <TIM_Base_SetConfig+0x118>)
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	d017      	beq.n	800a20e <TIM_Base_SetConfig+0x9a>
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	4a2b      	ldr	r2, [pc, #172]	; (800a290 <TIM_Base_SetConfig+0x11c>)
 800a1e2:	4293      	cmp	r3, r2
 800a1e4:	d013      	beq.n	800a20e <TIM_Base_SetConfig+0x9a>
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	4a2a      	ldr	r2, [pc, #168]	; (800a294 <TIM_Base_SetConfig+0x120>)
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	d00f      	beq.n	800a20e <TIM_Base_SetConfig+0x9a>
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	4a29      	ldr	r2, [pc, #164]	; (800a298 <TIM_Base_SetConfig+0x124>)
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	d00b      	beq.n	800a20e <TIM_Base_SetConfig+0x9a>
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	4a28      	ldr	r2, [pc, #160]	; (800a29c <TIM_Base_SetConfig+0x128>)
 800a1fa:	4293      	cmp	r3, r2
 800a1fc:	d007      	beq.n	800a20e <TIM_Base_SetConfig+0x9a>
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	4a27      	ldr	r2, [pc, #156]	; (800a2a0 <TIM_Base_SetConfig+0x12c>)
 800a202:	4293      	cmp	r3, r2
 800a204:	d003      	beq.n	800a20e <TIM_Base_SetConfig+0x9a>
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	4a26      	ldr	r2, [pc, #152]	; (800a2a4 <TIM_Base_SetConfig+0x130>)
 800a20a:	4293      	cmp	r3, r2
 800a20c:	d108      	bne.n	800a220 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a214:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	68db      	ldr	r3, [r3, #12]
 800a21a:	68fa      	ldr	r2, [r7, #12]
 800a21c:	4313      	orrs	r3, r2
 800a21e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	695b      	ldr	r3, [r3, #20]
 800a22a:	4313      	orrs	r3, r2
 800a22c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	68fa      	ldr	r2, [r7, #12]
 800a232:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	689a      	ldr	r2, [r3, #8]
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	681a      	ldr	r2, [r3, #0]
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	4a10      	ldr	r2, [pc, #64]	; (800a288 <TIM_Base_SetConfig+0x114>)
 800a248:	4293      	cmp	r3, r2
 800a24a:	d00f      	beq.n	800a26c <TIM_Base_SetConfig+0xf8>
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	4a12      	ldr	r2, [pc, #72]	; (800a298 <TIM_Base_SetConfig+0x124>)
 800a250:	4293      	cmp	r3, r2
 800a252:	d00b      	beq.n	800a26c <TIM_Base_SetConfig+0xf8>
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	4a11      	ldr	r2, [pc, #68]	; (800a29c <TIM_Base_SetConfig+0x128>)
 800a258:	4293      	cmp	r3, r2
 800a25a:	d007      	beq.n	800a26c <TIM_Base_SetConfig+0xf8>
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	4a10      	ldr	r2, [pc, #64]	; (800a2a0 <TIM_Base_SetConfig+0x12c>)
 800a260:	4293      	cmp	r3, r2
 800a262:	d003      	beq.n	800a26c <TIM_Base_SetConfig+0xf8>
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	4a0f      	ldr	r2, [pc, #60]	; (800a2a4 <TIM_Base_SetConfig+0x130>)
 800a268:	4293      	cmp	r3, r2
 800a26a:	d103      	bne.n	800a274 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	691a      	ldr	r2, [r3, #16]
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2201      	movs	r2, #1
 800a278:	615a      	str	r2, [r3, #20]
}
 800a27a:	bf00      	nop
 800a27c:	3714      	adds	r7, #20
 800a27e:	46bd      	mov	sp, r7
 800a280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a284:	4770      	bx	lr
 800a286:	bf00      	nop
 800a288:	40010000 	.word	0x40010000
 800a28c:	40000400 	.word	0x40000400
 800a290:	40000800 	.word	0x40000800
 800a294:	40000c00 	.word	0x40000c00
 800a298:	40010400 	.word	0x40010400
 800a29c:	40014000 	.word	0x40014000
 800a2a0:	40014400 	.word	0x40014400
 800a2a4:	40014800 	.word	0x40014800

0800a2a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	b087      	sub	sp, #28
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	60f8      	str	r0, [r7, #12]
 800a2b0:	60b9      	str	r1, [r7, #8]
 800a2b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	6a1b      	ldr	r3, [r3, #32]
 800a2b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	6a1b      	ldr	r3, [r3, #32]
 800a2be:	f023 0201 	bic.w	r2, r3, #1
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	699b      	ldr	r3, [r3, #24]
 800a2ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a2cc:	693b      	ldr	r3, [r7, #16]
 800a2ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a2d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	011b      	lsls	r3, r3, #4
 800a2d8:	693a      	ldr	r2, [r7, #16]
 800a2da:	4313      	orrs	r3, r2
 800a2dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a2de:	697b      	ldr	r3, [r7, #20]
 800a2e0:	f023 030a 	bic.w	r3, r3, #10
 800a2e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a2e6:	697a      	ldr	r2, [r7, #20]
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	4313      	orrs	r3, r2
 800a2ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	693a      	ldr	r2, [r7, #16]
 800a2f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	697a      	ldr	r2, [r7, #20]
 800a2f8:	621a      	str	r2, [r3, #32]
}
 800a2fa:	bf00      	nop
 800a2fc:	371c      	adds	r7, #28
 800a2fe:	46bd      	mov	sp, r7
 800a300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a304:	4770      	bx	lr

0800a306 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a306:	b480      	push	{r7}
 800a308:	b087      	sub	sp, #28
 800a30a:	af00      	add	r7, sp, #0
 800a30c:	60f8      	str	r0, [r7, #12]
 800a30e:	60b9      	str	r1, [r7, #8]
 800a310:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	6a1b      	ldr	r3, [r3, #32]
 800a316:	f023 0210 	bic.w	r2, r3, #16
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	699b      	ldr	r3, [r3, #24]
 800a322:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	6a1b      	ldr	r3, [r3, #32]
 800a328:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a32a:	697b      	ldr	r3, [r7, #20]
 800a32c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a330:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	031b      	lsls	r3, r3, #12
 800a336:	697a      	ldr	r2, [r7, #20]
 800a338:	4313      	orrs	r3, r2
 800a33a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a33c:	693b      	ldr	r3, [r7, #16]
 800a33e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a342:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	011b      	lsls	r3, r3, #4
 800a348:	693a      	ldr	r2, [r7, #16]
 800a34a:	4313      	orrs	r3, r2
 800a34c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	697a      	ldr	r2, [r7, #20]
 800a352:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	693a      	ldr	r2, [r7, #16]
 800a358:	621a      	str	r2, [r3, #32]
}
 800a35a:	bf00      	nop
 800a35c:	371c      	adds	r7, #28
 800a35e:	46bd      	mov	sp, r7
 800a360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a364:	4770      	bx	lr
	...

0800a368 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a368:	b480      	push	{r7}
 800a36a:	b085      	sub	sp, #20
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
 800a370:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	689b      	ldr	r3, [r3, #8]
 800a376:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a378:	68fa      	ldr	r2, [r7, #12]
 800a37a:	4b09      	ldr	r3, [pc, #36]	; (800a3a0 <TIM_ITRx_SetConfig+0x38>)
 800a37c:	4013      	ands	r3, r2
 800a37e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a380:	683a      	ldr	r2, [r7, #0]
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	4313      	orrs	r3, r2
 800a386:	f043 0307 	orr.w	r3, r3, #7
 800a38a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	68fa      	ldr	r2, [r7, #12]
 800a390:	609a      	str	r2, [r3, #8]
}
 800a392:	bf00      	nop
 800a394:	3714      	adds	r7, #20
 800a396:	46bd      	mov	sp, r7
 800a398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39c:	4770      	bx	lr
 800a39e:	bf00      	nop
 800a3a0:	ffcfff8f 	.word	0xffcfff8f

0800a3a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a3a4:	b480      	push	{r7}
 800a3a6:	b087      	sub	sp, #28
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	60f8      	str	r0, [r7, #12]
 800a3ac:	60b9      	str	r1, [r7, #8]
 800a3ae:	607a      	str	r2, [r7, #4]
 800a3b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	689b      	ldr	r3, [r3, #8]
 800a3b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a3b8:	697b      	ldr	r3, [r7, #20]
 800a3ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a3be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	021a      	lsls	r2, r3, #8
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	431a      	orrs	r2, r3
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	4313      	orrs	r3, r2
 800a3cc:	697a      	ldr	r2, [r7, #20]
 800a3ce:	4313      	orrs	r3, r2
 800a3d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	697a      	ldr	r2, [r7, #20]
 800a3d6:	609a      	str	r2, [r3, #8]
}
 800a3d8:	bf00      	nop
 800a3da:	371c      	adds	r7, #28
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e2:	4770      	bx	lr

0800a3e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b085      	sub	sp, #20
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
 800a3ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a3f4:	2b01      	cmp	r3, #1
 800a3f6:	d101      	bne.n	800a3fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a3f8:	2302      	movs	r3, #2
 800a3fa:	e06d      	b.n	800a4d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2201      	movs	r2, #1
 800a400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2202      	movs	r2, #2
 800a408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	685b      	ldr	r3, [r3, #4]
 800a412:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	689b      	ldr	r3, [r3, #8]
 800a41a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	4a30      	ldr	r2, [pc, #192]	; (800a4e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a422:	4293      	cmp	r3, r2
 800a424:	d004      	beq.n	800a430 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	4a2f      	ldr	r2, [pc, #188]	; (800a4e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a42c:	4293      	cmp	r3, r2
 800a42e:	d108      	bne.n	800a442 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a436:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	685b      	ldr	r3, [r3, #4]
 800a43c:	68fa      	ldr	r2, [r7, #12]
 800a43e:	4313      	orrs	r3, r2
 800a440:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a448:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	68fa      	ldr	r2, [r7, #12]
 800a450:	4313      	orrs	r3, r2
 800a452:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	68fa      	ldr	r2, [r7, #12]
 800a45a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	4a20      	ldr	r2, [pc, #128]	; (800a4e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a462:	4293      	cmp	r3, r2
 800a464:	d022      	beq.n	800a4ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a46e:	d01d      	beq.n	800a4ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	4a1d      	ldr	r2, [pc, #116]	; (800a4ec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a476:	4293      	cmp	r3, r2
 800a478:	d018      	beq.n	800a4ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	4a1c      	ldr	r2, [pc, #112]	; (800a4f0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a480:	4293      	cmp	r3, r2
 800a482:	d013      	beq.n	800a4ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	4a1a      	ldr	r2, [pc, #104]	; (800a4f4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a48a:	4293      	cmp	r3, r2
 800a48c:	d00e      	beq.n	800a4ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	4a15      	ldr	r2, [pc, #84]	; (800a4e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a494:	4293      	cmp	r3, r2
 800a496:	d009      	beq.n	800a4ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	4a16      	ldr	r2, [pc, #88]	; (800a4f8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a49e:	4293      	cmp	r3, r2
 800a4a0:	d004      	beq.n	800a4ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	4a15      	ldr	r2, [pc, #84]	; (800a4fc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a4a8:	4293      	cmp	r3, r2
 800a4aa:	d10c      	bne.n	800a4c6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a4b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	689b      	ldr	r3, [r3, #8]
 800a4b8:	68ba      	ldr	r2, [r7, #8]
 800a4ba:	4313      	orrs	r3, r2
 800a4bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	68ba      	ldr	r2, [r7, #8]
 800a4c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	2201      	movs	r2, #1
 800a4ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a4d6:	2300      	movs	r3, #0
}
 800a4d8:	4618      	mov	r0, r3
 800a4da:	3714      	adds	r7, #20
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e2:	4770      	bx	lr
 800a4e4:	40010000 	.word	0x40010000
 800a4e8:	40010400 	.word	0x40010400
 800a4ec:	40000400 	.word	0x40000400
 800a4f0:	40000800 	.word	0x40000800
 800a4f4:	40000c00 	.word	0x40000c00
 800a4f8:	40001800 	.word	0x40001800
 800a4fc:	40014000 	.word	0x40014000

0800a500 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b082      	sub	sp, #8
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d101      	bne.n	800a512 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a50e:	2301      	movs	r3, #1
 800a510:	e042      	b.n	800a598 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d106      	bne.n	800a52a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2200      	movs	r2, #0
 800a520:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a524:	6878      	ldr	r0, [r7, #4]
 800a526:	f7f7 fef5 	bl	8002314 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2224      	movs	r2, #36	; 0x24
 800a52e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	681a      	ldr	r2, [r3, #0]
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f022 0201 	bic.w	r2, r2, #1
 800a540:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a542:	6878      	ldr	r0, [r7, #4]
 800a544:	f000 f82c 	bl	800a5a0 <UART_SetConfig>
 800a548:	4603      	mov	r3, r0
 800a54a:	2b01      	cmp	r3, #1
 800a54c:	d101      	bne.n	800a552 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a54e:	2301      	movs	r3, #1
 800a550:	e022      	b.n	800a598 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a556:	2b00      	cmp	r3, #0
 800a558:	d002      	beq.n	800a560 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a55a:	6878      	ldr	r0, [r7, #4]
 800a55c:	f000 fd88 	bl	800b070 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	685a      	ldr	r2, [r3, #4]
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a56e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	689a      	ldr	r2, [r3, #8]
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a57e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	681a      	ldr	r2, [r3, #0]
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	f042 0201 	orr.w	r2, r2, #1
 800a58e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a590:	6878      	ldr	r0, [r7, #4]
 800a592:	f000 fe0f 	bl	800b1b4 <UART_CheckIdleState>
 800a596:	4603      	mov	r3, r0
}
 800a598:	4618      	mov	r0, r3
 800a59a:	3708      	adds	r7, #8
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bd80      	pop	{r7, pc}

0800a5a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a5a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a5a4:	b092      	sub	sp, #72	; 0x48
 800a5a6:	af00      	add	r7, sp, #0
 800a5a8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a5b0:	697b      	ldr	r3, [r7, #20]
 800a5b2:	689a      	ldr	r2, [r3, #8]
 800a5b4:	697b      	ldr	r3, [r7, #20]
 800a5b6:	691b      	ldr	r3, [r3, #16]
 800a5b8:	431a      	orrs	r2, r3
 800a5ba:	697b      	ldr	r3, [r7, #20]
 800a5bc:	695b      	ldr	r3, [r3, #20]
 800a5be:	431a      	orrs	r2, r3
 800a5c0:	697b      	ldr	r3, [r7, #20]
 800a5c2:	69db      	ldr	r3, [r3, #28]
 800a5c4:	4313      	orrs	r3, r2
 800a5c6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a5c8:	697b      	ldr	r3, [r7, #20]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	681a      	ldr	r2, [r3, #0]
 800a5ce:	4bbe      	ldr	r3, [pc, #760]	; (800a8c8 <UART_SetConfig+0x328>)
 800a5d0:	4013      	ands	r3, r2
 800a5d2:	697a      	ldr	r2, [r7, #20]
 800a5d4:	6812      	ldr	r2, [r2, #0]
 800a5d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a5d8:	430b      	orrs	r3, r1
 800a5da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a5dc:	697b      	ldr	r3, [r7, #20]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	685b      	ldr	r3, [r3, #4]
 800a5e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a5e6:	697b      	ldr	r3, [r7, #20]
 800a5e8:	68da      	ldr	r2, [r3, #12]
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	430a      	orrs	r2, r1
 800a5f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a5f2:	697b      	ldr	r3, [r7, #20]
 800a5f4:	699b      	ldr	r3, [r3, #24]
 800a5f6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a5f8:	697b      	ldr	r3, [r7, #20]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	4ab3      	ldr	r2, [pc, #716]	; (800a8cc <UART_SetConfig+0x32c>)
 800a5fe:	4293      	cmp	r3, r2
 800a600:	d004      	beq.n	800a60c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a602:	697b      	ldr	r3, [r7, #20]
 800a604:	6a1b      	ldr	r3, [r3, #32]
 800a606:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a608:	4313      	orrs	r3, r2
 800a60a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a60c:	697b      	ldr	r3, [r7, #20]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	689a      	ldr	r2, [r3, #8]
 800a612:	4baf      	ldr	r3, [pc, #700]	; (800a8d0 <UART_SetConfig+0x330>)
 800a614:	4013      	ands	r3, r2
 800a616:	697a      	ldr	r2, [r7, #20]
 800a618:	6812      	ldr	r2, [r2, #0]
 800a61a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a61c:	430b      	orrs	r3, r1
 800a61e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a620:	697b      	ldr	r3, [r7, #20]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a626:	f023 010f 	bic.w	r1, r3, #15
 800a62a:	697b      	ldr	r3, [r7, #20]
 800a62c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a62e:	697b      	ldr	r3, [r7, #20]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	430a      	orrs	r2, r1
 800a634:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a636:	697b      	ldr	r3, [r7, #20]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	4aa6      	ldr	r2, [pc, #664]	; (800a8d4 <UART_SetConfig+0x334>)
 800a63c:	4293      	cmp	r3, r2
 800a63e:	d177      	bne.n	800a730 <UART_SetConfig+0x190>
 800a640:	4ba5      	ldr	r3, [pc, #660]	; (800a8d8 <UART_SetConfig+0x338>)
 800a642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a644:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a648:	2b28      	cmp	r3, #40	; 0x28
 800a64a:	d86d      	bhi.n	800a728 <UART_SetConfig+0x188>
 800a64c:	a201      	add	r2, pc, #4	; (adr r2, 800a654 <UART_SetConfig+0xb4>)
 800a64e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a652:	bf00      	nop
 800a654:	0800a6f9 	.word	0x0800a6f9
 800a658:	0800a729 	.word	0x0800a729
 800a65c:	0800a729 	.word	0x0800a729
 800a660:	0800a729 	.word	0x0800a729
 800a664:	0800a729 	.word	0x0800a729
 800a668:	0800a729 	.word	0x0800a729
 800a66c:	0800a729 	.word	0x0800a729
 800a670:	0800a729 	.word	0x0800a729
 800a674:	0800a701 	.word	0x0800a701
 800a678:	0800a729 	.word	0x0800a729
 800a67c:	0800a729 	.word	0x0800a729
 800a680:	0800a729 	.word	0x0800a729
 800a684:	0800a729 	.word	0x0800a729
 800a688:	0800a729 	.word	0x0800a729
 800a68c:	0800a729 	.word	0x0800a729
 800a690:	0800a729 	.word	0x0800a729
 800a694:	0800a709 	.word	0x0800a709
 800a698:	0800a729 	.word	0x0800a729
 800a69c:	0800a729 	.word	0x0800a729
 800a6a0:	0800a729 	.word	0x0800a729
 800a6a4:	0800a729 	.word	0x0800a729
 800a6a8:	0800a729 	.word	0x0800a729
 800a6ac:	0800a729 	.word	0x0800a729
 800a6b0:	0800a729 	.word	0x0800a729
 800a6b4:	0800a711 	.word	0x0800a711
 800a6b8:	0800a729 	.word	0x0800a729
 800a6bc:	0800a729 	.word	0x0800a729
 800a6c0:	0800a729 	.word	0x0800a729
 800a6c4:	0800a729 	.word	0x0800a729
 800a6c8:	0800a729 	.word	0x0800a729
 800a6cc:	0800a729 	.word	0x0800a729
 800a6d0:	0800a729 	.word	0x0800a729
 800a6d4:	0800a719 	.word	0x0800a719
 800a6d8:	0800a729 	.word	0x0800a729
 800a6dc:	0800a729 	.word	0x0800a729
 800a6e0:	0800a729 	.word	0x0800a729
 800a6e4:	0800a729 	.word	0x0800a729
 800a6e8:	0800a729 	.word	0x0800a729
 800a6ec:	0800a729 	.word	0x0800a729
 800a6f0:	0800a729 	.word	0x0800a729
 800a6f4:	0800a721 	.word	0x0800a721
 800a6f8:	2301      	movs	r3, #1
 800a6fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6fe:	e222      	b.n	800ab46 <UART_SetConfig+0x5a6>
 800a700:	2304      	movs	r3, #4
 800a702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a706:	e21e      	b.n	800ab46 <UART_SetConfig+0x5a6>
 800a708:	2308      	movs	r3, #8
 800a70a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a70e:	e21a      	b.n	800ab46 <UART_SetConfig+0x5a6>
 800a710:	2310      	movs	r3, #16
 800a712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a716:	e216      	b.n	800ab46 <UART_SetConfig+0x5a6>
 800a718:	2320      	movs	r3, #32
 800a71a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a71e:	e212      	b.n	800ab46 <UART_SetConfig+0x5a6>
 800a720:	2340      	movs	r3, #64	; 0x40
 800a722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a726:	e20e      	b.n	800ab46 <UART_SetConfig+0x5a6>
 800a728:	2380      	movs	r3, #128	; 0x80
 800a72a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a72e:	e20a      	b.n	800ab46 <UART_SetConfig+0x5a6>
 800a730:	697b      	ldr	r3, [r7, #20]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	4a69      	ldr	r2, [pc, #420]	; (800a8dc <UART_SetConfig+0x33c>)
 800a736:	4293      	cmp	r3, r2
 800a738:	d130      	bne.n	800a79c <UART_SetConfig+0x1fc>
 800a73a:	4b67      	ldr	r3, [pc, #412]	; (800a8d8 <UART_SetConfig+0x338>)
 800a73c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a73e:	f003 0307 	and.w	r3, r3, #7
 800a742:	2b05      	cmp	r3, #5
 800a744:	d826      	bhi.n	800a794 <UART_SetConfig+0x1f4>
 800a746:	a201      	add	r2, pc, #4	; (adr r2, 800a74c <UART_SetConfig+0x1ac>)
 800a748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a74c:	0800a765 	.word	0x0800a765
 800a750:	0800a76d 	.word	0x0800a76d
 800a754:	0800a775 	.word	0x0800a775
 800a758:	0800a77d 	.word	0x0800a77d
 800a75c:	0800a785 	.word	0x0800a785
 800a760:	0800a78d 	.word	0x0800a78d
 800a764:	2300      	movs	r3, #0
 800a766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a76a:	e1ec      	b.n	800ab46 <UART_SetConfig+0x5a6>
 800a76c:	2304      	movs	r3, #4
 800a76e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a772:	e1e8      	b.n	800ab46 <UART_SetConfig+0x5a6>
 800a774:	2308      	movs	r3, #8
 800a776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a77a:	e1e4      	b.n	800ab46 <UART_SetConfig+0x5a6>
 800a77c:	2310      	movs	r3, #16
 800a77e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a782:	e1e0      	b.n	800ab46 <UART_SetConfig+0x5a6>
 800a784:	2320      	movs	r3, #32
 800a786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a78a:	e1dc      	b.n	800ab46 <UART_SetConfig+0x5a6>
 800a78c:	2340      	movs	r3, #64	; 0x40
 800a78e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a792:	e1d8      	b.n	800ab46 <UART_SetConfig+0x5a6>
 800a794:	2380      	movs	r3, #128	; 0x80
 800a796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a79a:	e1d4      	b.n	800ab46 <UART_SetConfig+0x5a6>
 800a79c:	697b      	ldr	r3, [r7, #20]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	4a4f      	ldr	r2, [pc, #316]	; (800a8e0 <UART_SetConfig+0x340>)
 800a7a2:	4293      	cmp	r3, r2
 800a7a4:	d130      	bne.n	800a808 <UART_SetConfig+0x268>
 800a7a6:	4b4c      	ldr	r3, [pc, #304]	; (800a8d8 <UART_SetConfig+0x338>)
 800a7a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7aa:	f003 0307 	and.w	r3, r3, #7
 800a7ae:	2b05      	cmp	r3, #5
 800a7b0:	d826      	bhi.n	800a800 <UART_SetConfig+0x260>
 800a7b2:	a201      	add	r2, pc, #4	; (adr r2, 800a7b8 <UART_SetConfig+0x218>)
 800a7b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7b8:	0800a7d1 	.word	0x0800a7d1
 800a7bc:	0800a7d9 	.word	0x0800a7d9
 800a7c0:	0800a7e1 	.word	0x0800a7e1
 800a7c4:	0800a7e9 	.word	0x0800a7e9
 800a7c8:	0800a7f1 	.word	0x0800a7f1
 800a7cc:	0800a7f9 	.word	0x0800a7f9
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7d6:	e1b6      	b.n	800ab46 <UART_SetConfig+0x5a6>
 800a7d8:	2304      	movs	r3, #4
 800a7da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7de:	e1b2      	b.n	800ab46 <UART_SetConfig+0x5a6>
 800a7e0:	2308      	movs	r3, #8
 800a7e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7e6:	e1ae      	b.n	800ab46 <UART_SetConfig+0x5a6>
 800a7e8:	2310      	movs	r3, #16
 800a7ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7ee:	e1aa      	b.n	800ab46 <UART_SetConfig+0x5a6>
 800a7f0:	2320      	movs	r3, #32
 800a7f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7f6:	e1a6      	b.n	800ab46 <UART_SetConfig+0x5a6>
 800a7f8:	2340      	movs	r3, #64	; 0x40
 800a7fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7fe:	e1a2      	b.n	800ab46 <UART_SetConfig+0x5a6>
 800a800:	2380      	movs	r3, #128	; 0x80
 800a802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a806:	e19e      	b.n	800ab46 <UART_SetConfig+0x5a6>
 800a808:	697b      	ldr	r3, [r7, #20]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	4a35      	ldr	r2, [pc, #212]	; (800a8e4 <UART_SetConfig+0x344>)
 800a80e:	4293      	cmp	r3, r2
 800a810:	d130      	bne.n	800a874 <UART_SetConfig+0x2d4>
 800a812:	4b31      	ldr	r3, [pc, #196]	; (800a8d8 <UART_SetConfig+0x338>)
 800a814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a816:	f003 0307 	and.w	r3, r3, #7
 800a81a:	2b05      	cmp	r3, #5
 800a81c:	d826      	bhi.n	800a86c <UART_SetConfig+0x2cc>
 800a81e:	a201      	add	r2, pc, #4	; (adr r2, 800a824 <UART_SetConfig+0x284>)
 800a820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a824:	0800a83d 	.word	0x0800a83d
 800a828:	0800a845 	.word	0x0800a845
 800a82c:	0800a84d 	.word	0x0800a84d
 800a830:	0800a855 	.word	0x0800a855
 800a834:	0800a85d 	.word	0x0800a85d
 800a838:	0800a865 	.word	0x0800a865
 800a83c:	2300      	movs	r3, #0
 800a83e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a842:	e180      	b.n	800ab46 <UART_SetConfig+0x5a6>
 800a844:	2304      	movs	r3, #4
 800a846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a84a:	e17c      	b.n	800ab46 <UART_SetConfig+0x5a6>
 800a84c:	2308      	movs	r3, #8
 800a84e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a852:	e178      	b.n	800ab46 <UART_SetConfig+0x5a6>
 800a854:	2310      	movs	r3, #16
 800a856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a85a:	e174      	b.n	800ab46 <UART_SetConfig+0x5a6>
 800a85c:	2320      	movs	r3, #32
 800a85e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a862:	e170      	b.n	800ab46 <UART_SetConfig+0x5a6>
 800a864:	2340      	movs	r3, #64	; 0x40
 800a866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a86a:	e16c      	b.n	800ab46 <UART_SetConfig+0x5a6>
 800a86c:	2380      	movs	r3, #128	; 0x80
 800a86e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a872:	e168      	b.n	800ab46 <UART_SetConfig+0x5a6>
 800a874:	697b      	ldr	r3, [r7, #20]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	4a1b      	ldr	r2, [pc, #108]	; (800a8e8 <UART_SetConfig+0x348>)
 800a87a:	4293      	cmp	r3, r2
 800a87c:	d142      	bne.n	800a904 <UART_SetConfig+0x364>
 800a87e:	4b16      	ldr	r3, [pc, #88]	; (800a8d8 <UART_SetConfig+0x338>)
 800a880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a882:	f003 0307 	and.w	r3, r3, #7
 800a886:	2b05      	cmp	r3, #5
 800a888:	d838      	bhi.n	800a8fc <UART_SetConfig+0x35c>
 800a88a:	a201      	add	r2, pc, #4	; (adr r2, 800a890 <UART_SetConfig+0x2f0>)
 800a88c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a890:	0800a8a9 	.word	0x0800a8a9
 800a894:	0800a8b1 	.word	0x0800a8b1
 800a898:	0800a8b9 	.word	0x0800a8b9
 800a89c:	0800a8c1 	.word	0x0800a8c1
 800a8a0:	0800a8ed 	.word	0x0800a8ed
 800a8a4:	0800a8f5 	.word	0x0800a8f5
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8ae:	e14a      	b.n	800ab46 <UART_SetConfig+0x5a6>
 800a8b0:	2304      	movs	r3, #4
 800a8b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8b6:	e146      	b.n	800ab46 <UART_SetConfig+0x5a6>
 800a8b8:	2308      	movs	r3, #8
 800a8ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8be:	e142      	b.n	800ab46 <UART_SetConfig+0x5a6>
 800a8c0:	2310      	movs	r3, #16
 800a8c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8c6:	e13e      	b.n	800ab46 <UART_SetConfig+0x5a6>
 800a8c8:	cfff69f3 	.word	0xcfff69f3
 800a8cc:	58000c00 	.word	0x58000c00
 800a8d0:	11fff4ff 	.word	0x11fff4ff
 800a8d4:	40011000 	.word	0x40011000
 800a8d8:	58024400 	.word	0x58024400
 800a8dc:	40004400 	.word	0x40004400
 800a8e0:	40004800 	.word	0x40004800
 800a8e4:	40004c00 	.word	0x40004c00
 800a8e8:	40005000 	.word	0x40005000
 800a8ec:	2320      	movs	r3, #32
 800a8ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8f2:	e128      	b.n	800ab46 <UART_SetConfig+0x5a6>
 800a8f4:	2340      	movs	r3, #64	; 0x40
 800a8f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8fa:	e124      	b.n	800ab46 <UART_SetConfig+0x5a6>
 800a8fc:	2380      	movs	r3, #128	; 0x80
 800a8fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a902:	e120      	b.n	800ab46 <UART_SetConfig+0x5a6>
 800a904:	697b      	ldr	r3, [r7, #20]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	4acb      	ldr	r2, [pc, #812]	; (800ac38 <UART_SetConfig+0x698>)
 800a90a:	4293      	cmp	r3, r2
 800a90c:	d176      	bne.n	800a9fc <UART_SetConfig+0x45c>
 800a90e:	4bcb      	ldr	r3, [pc, #812]	; (800ac3c <UART_SetConfig+0x69c>)
 800a910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a912:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a916:	2b28      	cmp	r3, #40	; 0x28
 800a918:	d86c      	bhi.n	800a9f4 <UART_SetConfig+0x454>
 800a91a:	a201      	add	r2, pc, #4	; (adr r2, 800a920 <UART_SetConfig+0x380>)
 800a91c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a920:	0800a9c5 	.word	0x0800a9c5
 800a924:	0800a9f5 	.word	0x0800a9f5
 800a928:	0800a9f5 	.word	0x0800a9f5
 800a92c:	0800a9f5 	.word	0x0800a9f5
 800a930:	0800a9f5 	.word	0x0800a9f5
 800a934:	0800a9f5 	.word	0x0800a9f5
 800a938:	0800a9f5 	.word	0x0800a9f5
 800a93c:	0800a9f5 	.word	0x0800a9f5
 800a940:	0800a9cd 	.word	0x0800a9cd
 800a944:	0800a9f5 	.word	0x0800a9f5
 800a948:	0800a9f5 	.word	0x0800a9f5
 800a94c:	0800a9f5 	.word	0x0800a9f5
 800a950:	0800a9f5 	.word	0x0800a9f5
 800a954:	0800a9f5 	.word	0x0800a9f5
 800a958:	0800a9f5 	.word	0x0800a9f5
 800a95c:	0800a9f5 	.word	0x0800a9f5
 800a960:	0800a9d5 	.word	0x0800a9d5
 800a964:	0800a9f5 	.word	0x0800a9f5
 800a968:	0800a9f5 	.word	0x0800a9f5
 800a96c:	0800a9f5 	.word	0x0800a9f5
 800a970:	0800a9f5 	.word	0x0800a9f5
 800a974:	0800a9f5 	.word	0x0800a9f5
 800a978:	0800a9f5 	.word	0x0800a9f5
 800a97c:	0800a9f5 	.word	0x0800a9f5
 800a980:	0800a9dd 	.word	0x0800a9dd
 800a984:	0800a9f5 	.word	0x0800a9f5
 800a988:	0800a9f5 	.word	0x0800a9f5
 800a98c:	0800a9f5 	.word	0x0800a9f5
 800a990:	0800a9f5 	.word	0x0800a9f5
 800a994:	0800a9f5 	.word	0x0800a9f5
 800a998:	0800a9f5 	.word	0x0800a9f5
 800a99c:	0800a9f5 	.word	0x0800a9f5
 800a9a0:	0800a9e5 	.word	0x0800a9e5
 800a9a4:	0800a9f5 	.word	0x0800a9f5
 800a9a8:	0800a9f5 	.word	0x0800a9f5
 800a9ac:	0800a9f5 	.word	0x0800a9f5
 800a9b0:	0800a9f5 	.word	0x0800a9f5
 800a9b4:	0800a9f5 	.word	0x0800a9f5
 800a9b8:	0800a9f5 	.word	0x0800a9f5
 800a9bc:	0800a9f5 	.word	0x0800a9f5
 800a9c0:	0800a9ed 	.word	0x0800a9ed
 800a9c4:	2301      	movs	r3, #1
 800a9c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9ca:	e0bc      	b.n	800ab46 <UART_SetConfig+0x5a6>
 800a9cc:	2304      	movs	r3, #4
 800a9ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9d2:	e0b8      	b.n	800ab46 <UART_SetConfig+0x5a6>
 800a9d4:	2308      	movs	r3, #8
 800a9d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9da:	e0b4      	b.n	800ab46 <UART_SetConfig+0x5a6>
 800a9dc:	2310      	movs	r3, #16
 800a9de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9e2:	e0b0      	b.n	800ab46 <UART_SetConfig+0x5a6>
 800a9e4:	2320      	movs	r3, #32
 800a9e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9ea:	e0ac      	b.n	800ab46 <UART_SetConfig+0x5a6>
 800a9ec:	2340      	movs	r3, #64	; 0x40
 800a9ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9f2:	e0a8      	b.n	800ab46 <UART_SetConfig+0x5a6>
 800a9f4:	2380      	movs	r3, #128	; 0x80
 800a9f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9fa:	e0a4      	b.n	800ab46 <UART_SetConfig+0x5a6>
 800a9fc:	697b      	ldr	r3, [r7, #20]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	4a8f      	ldr	r2, [pc, #572]	; (800ac40 <UART_SetConfig+0x6a0>)
 800aa02:	4293      	cmp	r3, r2
 800aa04:	d130      	bne.n	800aa68 <UART_SetConfig+0x4c8>
 800aa06:	4b8d      	ldr	r3, [pc, #564]	; (800ac3c <UART_SetConfig+0x69c>)
 800aa08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa0a:	f003 0307 	and.w	r3, r3, #7
 800aa0e:	2b05      	cmp	r3, #5
 800aa10:	d826      	bhi.n	800aa60 <UART_SetConfig+0x4c0>
 800aa12:	a201      	add	r2, pc, #4	; (adr r2, 800aa18 <UART_SetConfig+0x478>)
 800aa14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa18:	0800aa31 	.word	0x0800aa31
 800aa1c:	0800aa39 	.word	0x0800aa39
 800aa20:	0800aa41 	.word	0x0800aa41
 800aa24:	0800aa49 	.word	0x0800aa49
 800aa28:	0800aa51 	.word	0x0800aa51
 800aa2c:	0800aa59 	.word	0x0800aa59
 800aa30:	2300      	movs	r3, #0
 800aa32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa36:	e086      	b.n	800ab46 <UART_SetConfig+0x5a6>
 800aa38:	2304      	movs	r3, #4
 800aa3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa3e:	e082      	b.n	800ab46 <UART_SetConfig+0x5a6>
 800aa40:	2308      	movs	r3, #8
 800aa42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa46:	e07e      	b.n	800ab46 <UART_SetConfig+0x5a6>
 800aa48:	2310      	movs	r3, #16
 800aa4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa4e:	e07a      	b.n	800ab46 <UART_SetConfig+0x5a6>
 800aa50:	2320      	movs	r3, #32
 800aa52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa56:	e076      	b.n	800ab46 <UART_SetConfig+0x5a6>
 800aa58:	2340      	movs	r3, #64	; 0x40
 800aa5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa5e:	e072      	b.n	800ab46 <UART_SetConfig+0x5a6>
 800aa60:	2380      	movs	r3, #128	; 0x80
 800aa62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa66:	e06e      	b.n	800ab46 <UART_SetConfig+0x5a6>
 800aa68:	697b      	ldr	r3, [r7, #20]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	4a75      	ldr	r2, [pc, #468]	; (800ac44 <UART_SetConfig+0x6a4>)
 800aa6e:	4293      	cmp	r3, r2
 800aa70:	d130      	bne.n	800aad4 <UART_SetConfig+0x534>
 800aa72:	4b72      	ldr	r3, [pc, #456]	; (800ac3c <UART_SetConfig+0x69c>)
 800aa74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa76:	f003 0307 	and.w	r3, r3, #7
 800aa7a:	2b05      	cmp	r3, #5
 800aa7c:	d826      	bhi.n	800aacc <UART_SetConfig+0x52c>
 800aa7e:	a201      	add	r2, pc, #4	; (adr r2, 800aa84 <UART_SetConfig+0x4e4>)
 800aa80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa84:	0800aa9d 	.word	0x0800aa9d
 800aa88:	0800aaa5 	.word	0x0800aaa5
 800aa8c:	0800aaad 	.word	0x0800aaad
 800aa90:	0800aab5 	.word	0x0800aab5
 800aa94:	0800aabd 	.word	0x0800aabd
 800aa98:	0800aac5 	.word	0x0800aac5
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aaa2:	e050      	b.n	800ab46 <UART_SetConfig+0x5a6>
 800aaa4:	2304      	movs	r3, #4
 800aaa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aaaa:	e04c      	b.n	800ab46 <UART_SetConfig+0x5a6>
 800aaac:	2308      	movs	r3, #8
 800aaae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aab2:	e048      	b.n	800ab46 <UART_SetConfig+0x5a6>
 800aab4:	2310      	movs	r3, #16
 800aab6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aaba:	e044      	b.n	800ab46 <UART_SetConfig+0x5a6>
 800aabc:	2320      	movs	r3, #32
 800aabe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aac2:	e040      	b.n	800ab46 <UART_SetConfig+0x5a6>
 800aac4:	2340      	movs	r3, #64	; 0x40
 800aac6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aaca:	e03c      	b.n	800ab46 <UART_SetConfig+0x5a6>
 800aacc:	2380      	movs	r3, #128	; 0x80
 800aace:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aad2:	e038      	b.n	800ab46 <UART_SetConfig+0x5a6>
 800aad4:	697b      	ldr	r3, [r7, #20]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	4a5b      	ldr	r2, [pc, #364]	; (800ac48 <UART_SetConfig+0x6a8>)
 800aada:	4293      	cmp	r3, r2
 800aadc:	d130      	bne.n	800ab40 <UART_SetConfig+0x5a0>
 800aade:	4b57      	ldr	r3, [pc, #348]	; (800ac3c <UART_SetConfig+0x69c>)
 800aae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aae2:	f003 0307 	and.w	r3, r3, #7
 800aae6:	2b05      	cmp	r3, #5
 800aae8:	d826      	bhi.n	800ab38 <UART_SetConfig+0x598>
 800aaea:	a201      	add	r2, pc, #4	; (adr r2, 800aaf0 <UART_SetConfig+0x550>)
 800aaec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaf0:	0800ab09 	.word	0x0800ab09
 800aaf4:	0800ab11 	.word	0x0800ab11
 800aaf8:	0800ab19 	.word	0x0800ab19
 800aafc:	0800ab21 	.word	0x0800ab21
 800ab00:	0800ab29 	.word	0x0800ab29
 800ab04:	0800ab31 	.word	0x0800ab31
 800ab08:	2302      	movs	r3, #2
 800ab0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab0e:	e01a      	b.n	800ab46 <UART_SetConfig+0x5a6>
 800ab10:	2304      	movs	r3, #4
 800ab12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab16:	e016      	b.n	800ab46 <UART_SetConfig+0x5a6>
 800ab18:	2308      	movs	r3, #8
 800ab1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab1e:	e012      	b.n	800ab46 <UART_SetConfig+0x5a6>
 800ab20:	2310      	movs	r3, #16
 800ab22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab26:	e00e      	b.n	800ab46 <UART_SetConfig+0x5a6>
 800ab28:	2320      	movs	r3, #32
 800ab2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab2e:	e00a      	b.n	800ab46 <UART_SetConfig+0x5a6>
 800ab30:	2340      	movs	r3, #64	; 0x40
 800ab32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab36:	e006      	b.n	800ab46 <UART_SetConfig+0x5a6>
 800ab38:	2380      	movs	r3, #128	; 0x80
 800ab3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab3e:	e002      	b.n	800ab46 <UART_SetConfig+0x5a6>
 800ab40:	2380      	movs	r3, #128	; 0x80
 800ab42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ab46:	697b      	ldr	r3, [r7, #20]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	4a3f      	ldr	r2, [pc, #252]	; (800ac48 <UART_SetConfig+0x6a8>)
 800ab4c:	4293      	cmp	r3, r2
 800ab4e:	f040 80f8 	bne.w	800ad42 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ab52:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ab56:	2b20      	cmp	r3, #32
 800ab58:	dc46      	bgt.n	800abe8 <UART_SetConfig+0x648>
 800ab5a:	2b02      	cmp	r3, #2
 800ab5c:	f2c0 8082 	blt.w	800ac64 <UART_SetConfig+0x6c4>
 800ab60:	3b02      	subs	r3, #2
 800ab62:	2b1e      	cmp	r3, #30
 800ab64:	d87e      	bhi.n	800ac64 <UART_SetConfig+0x6c4>
 800ab66:	a201      	add	r2, pc, #4	; (adr r2, 800ab6c <UART_SetConfig+0x5cc>)
 800ab68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab6c:	0800abef 	.word	0x0800abef
 800ab70:	0800ac65 	.word	0x0800ac65
 800ab74:	0800abf7 	.word	0x0800abf7
 800ab78:	0800ac65 	.word	0x0800ac65
 800ab7c:	0800ac65 	.word	0x0800ac65
 800ab80:	0800ac65 	.word	0x0800ac65
 800ab84:	0800ac07 	.word	0x0800ac07
 800ab88:	0800ac65 	.word	0x0800ac65
 800ab8c:	0800ac65 	.word	0x0800ac65
 800ab90:	0800ac65 	.word	0x0800ac65
 800ab94:	0800ac65 	.word	0x0800ac65
 800ab98:	0800ac65 	.word	0x0800ac65
 800ab9c:	0800ac65 	.word	0x0800ac65
 800aba0:	0800ac65 	.word	0x0800ac65
 800aba4:	0800ac17 	.word	0x0800ac17
 800aba8:	0800ac65 	.word	0x0800ac65
 800abac:	0800ac65 	.word	0x0800ac65
 800abb0:	0800ac65 	.word	0x0800ac65
 800abb4:	0800ac65 	.word	0x0800ac65
 800abb8:	0800ac65 	.word	0x0800ac65
 800abbc:	0800ac65 	.word	0x0800ac65
 800abc0:	0800ac65 	.word	0x0800ac65
 800abc4:	0800ac65 	.word	0x0800ac65
 800abc8:	0800ac65 	.word	0x0800ac65
 800abcc:	0800ac65 	.word	0x0800ac65
 800abd0:	0800ac65 	.word	0x0800ac65
 800abd4:	0800ac65 	.word	0x0800ac65
 800abd8:	0800ac65 	.word	0x0800ac65
 800abdc:	0800ac65 	.word	0x0800ac65
 800abe0:	0800ac65 	.word	0x0800ac65
 800abe4:	0800ac57 	.word	0x0800ac57
 800abe8:	2b40      	cmp	r3, #64	; 0x40
 800abea:	d037      	beq.n	800ac5c <UART_SetConfig+0x6bc>
 800abec:	e03a      	b.n	800ac64 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800abee:	f7fd fe17 	bl	8008820 <HAL_RCCEx_GetD3PCLK1Freq>
 800abf2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800abf4:	e03c      	b.n	800ac70 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800abf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800abfa:	4618      	mov	r0, r3
 800abfc:	f7fd fe26 	bl	800884c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ac00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac04:	e034      	b.n	800ac70 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac06:	f107 0318 	add.w	r3, r7, #24
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f7fd ff72 	bl	8008af4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ac10:	69fb      	ldr	r3, [r7, #28]
 800ac12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac14:	e02c      	b.n	800ac70 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac16:	4b09      	ldr	r3, [pc, #36]	; (800ac3c <UART_SetConfig+0x69c>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	f003 0320 	and.w	r3, r3, #32
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d016      	beq.n	800ac50 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ac22:	4b06      	ldr	r3, [pc, #24]	; (800ac3c <UART_SetConfig+0x69c>)
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	08db      	lsrs	r3, r3, #3
 800ac28:	f003 0303 	and.w	r3, r3, #3
 800ac2c:	4a07      	ldr	r2, [pc, #28]	; (800ac4c <UART_SetConfig+0x6ac>)
 800ac2e:	fa22 f303 	lsr.w	r3, r2, r3
 800ac32:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ac34:	e01c      	b.n	800ac70 <UART_SetConfig+0x6d0>
 800ac36:	bf00      	nop
 800ac38:	40011400 	.word	0x40011400
 800ac3c:	58024400 	.word	0x58024400
 800ac40:	40007800 	.word	0x40007800
 800ac44:	40007c00 	.word	0x40007c00
 800ac48:	58000c00 	.word	0x58000c00
 800ac4c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800ac50:	4b9d      	ldr	r3, [pc, #628]	; (800aec8 <UART_SetConfig+0x928>)
 800ac52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac54:	e00c      	b.n	800ac70 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ac56:	4b9d      	ldr	r3, [pc, #628]	; (800aecc <UART_SetConfig+0x92c>)
 800ac58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac5a:	e009      	b.n	800ac70 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ac5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ac60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac62:	e005      	b.n	800ac70 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800ac64:	2300      	movs	r3, #0
 800ac66:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ac68:	2301      	movs	r3, #1
 800ac6a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ac6e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ac70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	f000 81de 	beq.w	800b034 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ac78:	697b      	ldr	r3, [r7, #20]
 800ac7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac7c:	4a94      	ldr	r2, [pc, #592]	; (800aed0 <UART_SetConfig+0x930>)
 800ac7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac82:	461a      	mov	r2, r3
 800ac84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac86:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac8a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ac8c:	697b      	ldr	r3, [r7, #20]
 800ac8e:	685a      	ldr	r2, [r3, #4]
 800ac90:	4613      	mov	r3, r2
 800ac92:	005b      	lsls	r3, r3, #1
 800ac94:	4413      	add	r3, r2
 800ac96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac98:	429a      	cmp	r2, r3
 800ac9a:	d305      	bcc.n	800aca8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ac9c:	697b      	ldr	r3, [r7, #20]
 800ac9e:	685b      	ldr	r3, [r3, #4]
 800aca0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aca2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aca4:	429a      	cmp	r2, r3
 800aca6:	d903      	bls.n	800acb0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800aca8:	2301      	movs	r3, #1
 800acaa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800acae:	e1c1      	b.n	800b034 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800acb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acb2:	2200      	movs	r2, #0
 800acb4:	60bb      	str	r3, [r7, #8]
 800acb6:	60fa      	str	r2, [r7, #12]
 800acb8:	697b      	ldr	r3, [r7, #20]
 800acba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acbc:	4a84      	ldr	r2, [pc, #528]	; (800aed0 <UART_SetConfig+0x930>)
 800acbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800acc2:	b29b      	uxth	r3, r3
 800acc4:	2200      	movs	r2, #0
 800acc6:	603b      	str	r3, [r7, #0]
 800acc8:	607a      	str	r2, [r7, #4]
 800acca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800acce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800acd2:	f7f5 fb01 	bl	80002d8 <__aeabi_uldivmod>
 800acd6:	4602      	mov	r2, r0
 800acd8:	460b      	mov	r3, r1
 800acda:	4610      	mov	r0, r2
 800acdc:	4619      	mov	r1, r3
 800acde:	f04f 0200 	mov.w	r2, #0
 800ace2:	f04f 0300 	mov.w	r3, #0
 800ace6:	020b      	lsls	r3, r1, #8
 800ace8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800acec:	0202      	lsls	r2, r0, #8
 800acee:	6979      	ldr	r1, [r7, #20]
 800acf0:	6849      	ldr	r1, [r1, #4]
 800acf2:	0849      	lsrs	r1, r1, #1
 800acf4:	2000      	movs	r0, #0
 800acf6:	460c      	mov	r4, r1
 800acf8:	4605      	mov	r5, r0
 800acfa:	eb12 0804 	adds.w	r8, r2, r4
 800acfe:	eb43 0905 	adc.w	r9, r3, r5
 800ad02:	697b      	ldr	r3, [r7, #20]
 800ad04:	685b      	ldr	r3, [r3, #4]
 800ad06:	2200      	movs	r2, #0
 800ad08:	469a      	mov	sl, r3
 800ad0a:	4693      	mov	fp, r2
 800ad0c:	4652      	mov	r2, sl
 800ad0e:	465b      	mov	r3, fp
 800ad10:	4640      	mov	r0, r8
 800ad12:	4649      	mov	r1, r9
 800ad14:	f7f5 fae0 	bl	80002d8 <__aeabi_uldivmod>
 800ad18:	4602      	mov	r2, r0
 800ad1a:	460b      	mov	r3, r1
 800ad1c:	4613      	mov	r3, r2
 800ad1e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ad20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ad26:	d308      	bcc.n	800ad3a <UART_SetConfig+0x79a>
 800ad28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad2e:	d204      	bcs.n	800ad3a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800ad30:	697b      	ldr	r3, [r7, #20]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad36:	60da      	str	r2, [r3, #12]
 800ad38:	e17c      	b.n	800b034 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800ad3a:	2301      	movs	r3, #1
 800ad3c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ad40:	e178      	b.n	800b034 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ad42:	697b      	ldr	r3, [r7, #20]
 800ad44:	69db      	ldr	r3, [r3, #28]
 800ad46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad4a:	f040 80c5 	bne.w	800aed8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800ad4e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ad52:	2b20      	cmp	r3, #32
 800ad54:	dc48      	bgt.n	800ade8 <UART_SetConfig+0x848>
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	db7b      	blt.n	800ae52 <UART_SetConfig+0x8b2>
 800ad5a:	2b20      	cmp	r3, #32
 800ad5c:	d879      	bhi.n	800ae52 <UART_SetConfig+0x8b2>
 800ad5e:	a201      	add	r2, pc, #4	; (adr r2, 800ad64 <UART_SetConfig+0x7c4>)
 800ad60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad64:	0800adef 	.word	0x0800adef
 800ad68:	0800adf7 	.word	0x0800adf7
 800ad6c:	0800ae53 	.word	0x0800ae53
 800ad70:	0800ae53 	.word	0x0800ae53
 800ad74:	0800adff 	.word	0x0800adff
 800ad78:	0800ae53 	.word	0x0800ae53
 800ad7c:	0800ae53 	.word	0x0800ae53
 800ad80:	0800ae53 	.word	0x0800ae53
 800ad84:	0800ae0f 	.word	0x0800ae0f
 800ad88:	0800ae53 	.word	0x0800ae53
 800ad8c:	0800ae53 	.word	0x0800ae53
 800ad90:	0800ae53 	.word	0x0800ae53
 800ad94:	0800ae53 	.word	0x0800ae53
 800ad98:	0800ae53 	.word	0x0800ae53
 800ad9c:	0800ae53 	.word	0x0800ae53
 800ada0:	0800ae53 	.word	0x0800ae53
 800ada4:	0800ae1f 	.word	0x0800ae1f
 800ada8:	0800ae53 	.word	0x0800ae53
 800adac:	0800ae53 	.word	0x0800ae53
 800adb0:	0800ae53 	.word	0x0800ae53
 800adb4:	0800ae53 	.word	0x0800ae53
 800adb8:	0800ae53 	.word	0x0800ae53
 800adbc:	0800ae53 	.word	0x0800ae53
 800adc0:	0800ae53 	.word	0x0800ae53
 800adc4:	0800ae53 	.word	0x0800ae53
 800adc8:	0800ae53 	.word	0x0800ae53
 800adcc:	0800ae53 	.word	0x0800ae53
 800add0:	0800ae53 	.word	0x0800ae53
 800add4:	0800ae53 	.word	0x0800ae53
 800add8:	0800ae53 	.word	0x0800ae53
 800addc:	0800ae53 	.word	0x0800ae53
 800ade0:	0800ae53 	.word	0x0800ae53
 800ade4:	0800ae45 	.word	0x0800ae45
 800ade8:	2b40      	cmp	r3, #64	; 0x40
 800adea:	d02e      	beq.n	800ae4a <UART_SetConfig+0x8aa>
 800adec:	e031      	b.n	800ae52 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800adee:	f7fb fd61 	bl	80068b4 <HAL_RCC_GetPCLK1Freq>
 800adf2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800adf4:	e033      	b.n	800ae5e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800adf6:	f7fb fd73 	bl	80068e0 <HAL_RCC_GetPCLK2Freq>
 800adfa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800adfc:	e02f      	b.n	800ae5e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800adfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ae02:	4618      	mov	r0, r3
 800ae04:	f7fd fd22 	bl	800884c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ae08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae0c:	e027      	b.n	800ae5e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae0e:	f107 0318 	add.w	r3, r7, #24
 800ae12:	4618      	mov	r0, r3
 800ae14:	f7fd fe6e 	bl	8008af4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ae18:	69fb      	ldr	r3, [r7, #28]
 800ae1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae1c:	e01f      	b.n	800ae5e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae1e:	4b2d      	ldr	r3, [pc, #180]	; (800aed4 <UART_SetConfig+0x934>)
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	f003 0320 	and.w	r3, r3, #32
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d009      	beq.n	800ae3e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ae2a:	4b2a      	ldr	r3, [pc, #168]	; (800aed4 <UART_SetConfig+0x934>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	08db      	lsrs	r3, r3, #3
 800ae30:	f003 0303 	and.w	r3, r3, #3
 800ae34:	4a24      	ldr	r2, [pc, #144]	; (800aec8 <UART_SetConfig+0x928>)
 800ae36:	fa22 f303 	lsr.w	r3, r2, r3
 800ae3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ae3c:	e00f      	b.n	800ae5e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ae3e:	4b22      	ldr	r3, [pc, #136]	; (800aec8 <UART_SetConfig+0x928>)
 800ae40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae42:	e00c      	b.n	800ae5e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ae44:	4b21      	ldr	r3, [pc, #132]	; (800aecc <UART_SetConfig+0x92c>)
 800ae46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae48:	e009      	b.n	800ae5e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ae4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ae4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae50:	e005      	b.n	800ae5e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ae52:	2300      	movs	r3, #0
 800ae54:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ae56:	2301      	movs	r3, #1
 800ae58:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ae5c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ae5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	f000 80e7 	beq.w	800b034 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae66:	697b      	ldr	r3, [r7, #20]
 800ae68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae6a:	4a19      	ldr	r2, [pc, #100]	; (800aed0 <UART_SetConfig+0x930>)
 800ae6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae70:	461a      	mov	r2, r3
 800ae72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae74:	fbb3 f3f2 	udiv	r3, r3, r2
 800ae78:	005a      	lsls	r2, r3, #1
 800ae7a:	697b      	ldr	r3, [r7, #20]
 800ae7c:	685b      	ldr	r3, [r3, #4]
 800ae7e:	085b      	lsrs	r3, r3, #1
 800ae80:	441a      	add	r2, r3
 800ae82:	697b      	ldr	r3, [r7, #20]
 800ae84:	685b      	ldr	r3, [r3, #4]
 800ae86:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae8a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ae8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae8e:	2b0f      	cmp	r3, #15
 800ae90:	d916      	bls.n	800aec0 <UART_SetConfig+0x920>
 800ae92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae98:	d212      	bcs.n	800aec0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ae9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae9c:	b29b      	uxth	r3, r3
 800ae9e:	f023 030f 	bic.w	r3, r3, #15
 800aea2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aea6:	085b      	lsrs	r3, r3, #1
 800aea8:	b29b      	uxth	r3, r3
 800aeaa:	f003 0307 	and.w	r3, r3, #7
 800aeae:	b29a      	uxth	r2, r3
 800aeb0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800aeb2:	4313      	orrs	r3, r2
 800aeb4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800aeb6:	697b      	ldr	r3, [r7, #20]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800aebc:	60da      	str	r2, [r3, #12]
 800aebe:	e0b9      	b.n	800b034 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800aec0:	2301      	movs	r3, #1
 800aec2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800aec6:	e0b5      	b.n	800b034 <UART_SetConfig+0xa94>
 800aec8:	03d09000 	.word	0x03d09000
 800aecc:	003d0900 	.word	0x003d0900
 800aed0:	0800bf4c 	.word	0x0800bf4c
 800aed4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800aed8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800aedc:	2b20      	cmp	r3, #32
 800aede:	dc49      	bgt.n	800af74 <UART_SetConfig+0x9d4>
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	db7c      	blt.n	800afde <UART_SetConfig+0xa3e>
 800aee4:	2b20      	cmp	r3, #32
 800aee6:	d87a      	bhi.n	800afde <UART_SetConfig+0xa3e>
 800aee8:	a201      	add	r2, pc, #4	; (adr r2, 800aef0 <UART_SetConfig+0x950>)
 800aeea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeee:	bf00      	nop
 800aef0:	0800af7b 	.word	0x0800af7b
 800aef4:	0800af83 	.word	0x0800af83
 800aef8:	0800afdf 	.word	0x0800afdf
 800aefc:	0800afdf 	.word	0x0800afdf
 800af00:	0800af8b 	.word	0x0800af8b
 800af04:	0800afdf 	.word	0x0800afdf
 800af08:	0800afdf 	.word	0x0800afdf
 800af0c:	0800afdf 	.word	0x0800afdf
 800af10:	0800af9b 	.word	0x0800af9b
 800af14:	0800afdf 	.word	0x0800afdf
 800af18:	0800afdf 	.word	0x0800afdf
 800af1c:	0800afdf 	.word	0x0800afdf
 800af20:	0800afdf 	.word	0x0800afdf
 800af24:	0800afdf 	.word	0x0800afdf
 800af28:	0800afdf 	.word	0x0800afdf
 800af2c:	0800afdf 	.word	0x0800afdf
 800af30:	0800afab 	.word	0x0800afab
 800af34:	0800afdf 	.word	0x0800afdf
 800af38:	0800afdf 	.word	0x0800afdf
 800af3c:	0800afdf 	.word	0x0800afdf
 800af40:	0800afdf 	.word	0x0800afdf
 800af44:	0800afdf 	.word	0x0800afdf
 800af48:	0800afdf 	.word	0x0800afdf
 800af4c:	0800afdf 	.word	0x0800afdf
 800af50:	0800afdf 	.word	0x0800afdf
 800af54:	0800afdf 	.word	0x0800afdf
 800af58:	0800afdf 	.word	0x0800afdf
 800af5c:	0800afdf 	.word	0x0800afdf
 800af60:	0800afdf 	.word	0x0800afdf
 800af64:	0800afdf 	.word	0x0800afdf
 800af68:	0800afdf 	.word	0x0800afdf
 800af6c:	0800afdf 	.word	0x0800afdf
 800af70:	0800afd1 	.word	0x0800afd1
 800af74:	2b40      	cmp	r3, #64	; 0x40
 800af76:	d02e      	beq.n	800afd6 <UART_SetConfig+0xa36>
 800af78:	e031      	b.n	800afde <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800af7a:	f7fb fc9b 	bl	80068b4 <HAL_RCC_GetPCLK1Freq>
 800af7e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800af80:	e033      	b.n	800afea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800af82:	f7fb fcad 	bl	80068e0 <HAL_RCC_GetPCLK2Freq>
 800af86:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800af88:	e02f      	b.n	800afea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800af8e:	4618      	mov	r0, r3
 800af90:	f7fd fc5c 	bl	800884c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800af94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af98:	e027      	b.n	800afea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af9a:	f107 0318 	add.w	r3, r7, #24
 800af9e:	4618      	mov	r0, r3
 800afa0:	f7fd fda8 	bl	8008af4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800afa4:	69fb      	ldr	r3, [r7, #28]
 800afa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afa8:	e01f      	b.n	800afea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800afaa:	4b2d      	ldr	r3, [pc, #180]	; (800b060 <UART_SetConfig+0xac0>)
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	f003 0320 	and.w	r3, r3, #32
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d009      	beq.n	800afca <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800afb6:	4b2a      	ldr	r3, [pc, #168]	; (800b060 <UART_SetConfig+0xac0>)
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	08db      	lsrs	r3, r3, #3
 800afbc:	f003 0303 	and.w	r3, r3, #3
 800afc0:	4a28      	ldr	r2, [pc, #160]	; (800b064 <UART_SetConfig+0xac4>)
 800afc2:	fa22 f303 	lsr.w	r3, r2, r3
 800afc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800afc8:	e00f      	b.n	800afea <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800afca:	4b26      	ldr	r3, [pc, #152]	; (800b064 <UART_SetConfig+0xac4>)
 800afcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afce:	e00c      	b.n	800afea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800afd0:	4b25      	ldr	r3, [pc, #148]	; (800b068 <UART_SetConfig+0xac8>)
 800afd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afd4:	e009      	b.n	800afea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800afd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800afda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afdc:	e005      	b.n	800afea <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800afde:	2300      	movs	r3, #0
 800afe0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800afe2:	2301      	movs	r3, #1
 800afe4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800afe8:	bf00      	nop
    }

    if (pclk != 0U)
 800afea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afec:	2b00      	cmp	r3, #0
 800afee:	d021      	beq.n	800b034 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aff0:	697b      	ldr	r3, [r7, #20]
 800aff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aff4:	4a1d      	ldr	r2, [pc, #116]	; (800b06c <UART_SetConfig+0xacc>)
 800aff6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800affa:	461a      	mov	r2, r3
 800affc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800affe:	fbb3 f2f2 	udiv	r2, r3, r2
 800b002:	697b      	ldr	r3, [r7, #20]
 800b004:	685b      	ldr	r3, [r3, #4]
 800b006:	085b      	lsrs	r3, r3, #1
 800b008:	441a      	add	r2, r3
 800b00a:	697b      	ldr	r3, [r7, #20]
 800b00c:	685b      	ldr	r3, [r3, #4]
 800b00e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b012:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b016:	2b0f      	cmp	r3, #15
 800b018:	d909      	bls.n	800b02e <UART_SetConfig+0xa8e>
 800b01a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b01c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b020:	d205      	bcs.n	800b02e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b024:	b29a      	uxth	r2, r3
 800b026:	697b      	ldr	r3, [r7, #20]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	60da      	str	r2, [r3, #12]
 800b02c:	e002      	b.n	800b034 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b02e:	2301      	movs	r3, #1
 800b030:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b034:	697b      	ldr	r3, [r7, #20]
 800b036:	2201      	movs	r2, #1
 800b038:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b03c:	697b      	ldr	r3, [r7, #20]
 800b03e:	2201      	movs	r2, #1
 800b040:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b044:	697b      	ldr	r3, [r7, #20]
 800b046:	2200      	movs	r2, #0
 800b048:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800b04a:	697b      	ldr	r3, [r7, #20]
 800b04c:	2200      	movs	r2, #0
 800b04e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800b050:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800b054:	4618      	mov	r0, r3
 800b056:	3748      	adds	r7, #72	; 0x48
 800b058:	46bd      	mov	sp, r7
 800b05a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b05e:	bf00      	nop
 800b060:	58024400 	.word	0x58024400
 800b064:	03d09000 	.word	0x03d09000
 800b068:	003d0900 	.word	0x003d0900
 800b06c:	0800bf4c 	.word	0x0800bf4c

0800b070 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b070:	b480      	push	{r7}
 800b072:	b083      	sub	sp, #12
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b07c:	f003 0301 	and.w	r3, r3, #1
 800b080:	2b00      	cmp	r3, #0
 800b082:	d00a      	beq.n	800b09a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	685b      	ldr	r3, [r3, #4]
 800b08a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	430a      	orrs	r2, r1
 800b098:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b09e:	f003 0302 	and.w	r3, r3, #2
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d00a      	beq.n	800b0bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	685b      	ldr	r3, [r3, #4]
 800b0ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	430a      	orrs	r2, r1
 800b0ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0c0:	f003 0304 	and.w	r3, r3, #4
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d00a      	beq.n	800b0de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	685b      	ldr	r3, [r3, #4]
 800b0ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	430a      	orrs	r2, r1
 800b0dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0e2:	f003 0308 	and.w	r3, r3, #8
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d00a      	beq.n	800b100 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	685b      	ldr	r3, [r3, #4]
 800b0f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	430a      	orrs	r2, r1
 800b0fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b104:	f003 0310 	and.w	r3, r3, #16
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d00a      	beq.n	800b122 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	689b      	ldr	r3, [r3, #8]
 800b112:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	430a      	orrs	r2, r1
 800b120:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b126:	f003 0320 	and.w	r3, r3, #32
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d00a      	beq.n	800b144 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	689b      	ldr	r3, [r3, #8]
 800b134:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	430a      	orrs	r2, r1
 800b142:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d01a      	beq.n	800b186 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	685b      	ldr	r3, [r3, #4]
 800b156:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	430a      	orrs	r2, r1
 800b164:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b16a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b16e:	d10a      	bne.n	800b186 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	685b      	ldr	r3, [r3, #4]
 800b176:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	430a      	orrs	r2, r1
 800b184:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b18a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d00a      	beq.n	800b1a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	685b      	ldr	r3, [r3, #4]
 800b198:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	430a      	orrs	r2, r1
 800b1a6:	605a      	str	r2, [r3, #4]
  }
}
 800b1a8:	bf00      	nop
 800b1aa:	370c      	adds	r7, #12
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b2:	4770      	bx	lr

0800b1b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b098      	sub	sp, #96	; 0x60
 800b1b8:	af02      	add	r7, sp, #8
 800b1ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2200      	movs	r2, #0
 800b1c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b1c4:	f7f7 fc58 	bl	8002a78 <HAL_GetTick>
 800b1c8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	f003 0308 	and.w	r3, r3, #8
 800b1d4:	2b08      	cmp	r3, #8
 800b1d6:	d12f      	bne.n	800b238 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b1d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b1dc:	9300      	str	r3, [sp, #0]
 800b1de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b1e6:	6878      	ldr	r0, [r7, #4]
 800b1e8:	f000 f88e 	bl	800b308 <UART_WaitOnFlagUntilTimeout>
 800b1ec:	4603      	mov	r3, r0
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d022      	beq.n	800b238 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1fa:	e853 3f00 	ldrex	r3, [r3]
 800b1fe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b202:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b206:	653b      	str	r3, [r7, #80]	; 0x50
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	461a      	mov	r2, r3
 800b20e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b210:	647b      	str	r3, [r7, #68]	; 0x44
 800b212:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b214:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b216:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b218:	e841 2300 	strex	r3, r2, [r1]
 800b21c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b21e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b220:	2b00      	cmp	r3, #0
 800b222:	d1e6      	bne.n	800b1f2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2220      	movs	r2, #32
 800b228:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2200      	movs	r2, #0
 800b230:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b234:	2303      	movs	r3, #3
 800b236:	e063      	b.n	800b300 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	f003 0304 	and.w	r3, r3, #4
 800b242:	2b04      	cmp	r3, #4
 800b244:	d149      	bne.n	800b2da <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b246:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b24a:	9300      	str	r3, [sp, #0]
 800b24c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b24e:	2200      	movs	r2, #0
 800b250:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f000 f857 	bl	800b308 <UART_WaitOnFlagUntilTimeout>
 800b25a:	4603      	mov	r3, r0
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d03c      	beq.n	800b2da <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b268:	e853 3f00 	ldrex	r3, [r3]
 800b26c:	623b      	str	r3, [r7, #32]
   return(result);
 800b26e:	6a3b      	ldr	r3, [r7, #32]
 800b270:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b274:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	461a      	mov	r2, r3
 800b27c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b27e:	633b      	str	r3, [r7, #48]	; 0x30
 800b280:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b282:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b284:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b286:	e841 2300 	strex	r3, r2, [r1]
 800b28a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b28c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d1e6      	bne.n	800b260 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	3308      	adds	r3, #8
 800b298:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b29a:	693b      	ldr	r3, [r7, #16]
 800b29c:	e853 3f00 	ldrex	r3, [r3]
 800b2a0:	60fb      	str	r3, [r7, #12]
   return(result);
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	f023 0301 	bic.w	r3, r3, #1
 800b2a8:	64bb      	str	r3, [r7, #72]	; 0x48
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	3308      	adds	r3, #8
 800b2b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b2b2:	61fa      	str	r2, [r7, #28]
 800b2b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2b6:	69b9      	ldr	r1, [r7, #24]
 800b2b8:	69fa      	ldr	r2, [r7, #28]
 800b2ba:	e841 2300 	strex	r3, r2, [r1]
 800b2be:	617b      	str	r3, [r7, #20]
   return(result);
 800b2c0:	697b      	ldr	r3, [r7, #20]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d1e5      	bne.n	800b292 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2220      	movs	r2, #32
 800b2ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b2d6:	2303      	movs	r3, #3
 800b2d8:	e012      	b.n	800b300 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	2220      	movs	r2, #32
 800b2de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2220      	movs	r2, #32
 800b2e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b2fe:	2300      	movs	r3, #0
}
 800b300:	4618      	mov	r0, r3
 800b302:	3758      	adds	r7, #88	; 0x58
 800b304:	46bd      	mov	sp, r7
 800b306:	bd80      	pop	{r7, pc}

0800b308 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b084      	sub	sp, #16
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	60f8      	str	r0, [r7, #12]
 800b310:	60b9      	str	r1, [r7, #8]
 800b312:	603b      	str	r3, [r7, #0]
 800b314:	4613      	mov	r3, r2
 800b316:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b318:	e049      	b.n	800b3ae <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b31a:	69bb      	ldr	r3, [r7, #24]
 800b31c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b320:	d045      	beq.n	800b3ae <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b322:	f7f7 fba9 	bl	8002a78 <HAL_GetTick>
 800b326:	4602      	mov	r2, r0
 800b328:	683b      	ldr	r3, [r7, #0]
 800b32a:	1ad3      	subs	r3, r2, r3
 800b32c:	69ba      	ldr	r2, [r7, #24]
 800b32e:	429a      	cmp	r2, r3
 800b330:	d302      	bcc.n	800b338 <UART_WaitOnFlagUntilTimeout+0x30>
 800b332:	69bb      	ldr	r3, [r7, #24]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d101      	bne.n	800b33c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b338:	2303      	movs	r3, #3
 800b33a:	e048      	b.n	800b3ce <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	f003 0304 	and.w	r3, r3, #4
 800b346:	2b00      	cmp	r3, #0
 800b348:	d031      	beq.n	800b3ae <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	69db      	ldr	r3, [r3, #28]
 800b350:	f003 0308 	and.w	r3, r3, #8
 800b354:	2b08      	cmp	r3, #8
 800b356:	d110      	bne.n	800b37a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	2208      	movs	r2, #8
 800b35e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800b360:	68f8      	ldr	r0, [r7, #12]
 800b362:	f000 f839 	bl	800b3d8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	2208      	movs	r2, #8
 800b36a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	2200      	movs	r2, #0
 800b372:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800b376:	2301      	movs	r3, #1
 800b378:	e029      	b.n	800b3ce <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	69db      	ldr	r3, [r3, #28]
 800b380:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b384:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b388:	d111      	bne.n	800b3ae <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b392:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b394:	68f8      	ldr	r0, [r7, #12]
 800b396:	f000 f81f 	bl	800b3d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	2220      	movs	r2, #32
 800b39e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800b3aa:	2303      	movs	r3, #3
 800b3ac:	e00f      	b.n	800b3ce <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	69da      	ldr	r2, [r3, #28]
 800b3b4:	68bb      	ldr	r3, [r7, #8]
 800b3b6:	4013      	ands	r3, r2
 800b3b8:	68ba      	ldr	r2, [r7, #8]
 800b3ba:	429a      	cmp	r2, r3
 800b3bc:	bf0c      	ite	eq
 800b3be:	2301      	moveq	r3, #1
 800b3c0:	2300      	movne	r3, #0
 800b3c2:	b2db      	uxtb	r3, r3
 800b3c4:	461a      	mov	r2, r3
 800b3c6:	79fb      	ldrb	r3, [r7, #7]
 800b3c8:	429a      	cmp	r2, r3
 800b3ca:	d0a6      	beq.n	800b31a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b3cc:	2300      	movs	r3, #0
}
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	3710      	adds	r7, #16
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	bd80      	pop	{r7, pc}
	...

0800b3d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b3d8:	b480      	push	{r7}
 800b3da:	b095      	sub	sp, #84	; 0x54
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3e8:	e853 3f00 	ldrex	r3, [r3]
 800b3ec:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b3ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b3f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	461a      	mov	r2, r3
 800b3fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3fe:	643b      	str	r3, [r7, #64]	; 0x40
 800b400:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b402:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b404:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b406:	e841 2300 	strex	r3, r2, [r1]
 800b40a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b40c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d1e6      	bne.n	800b3e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	3308      	adds	r3, #8
 800b418:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b41a:	6a3b      	ldr	r3, [r7, #32]
 800b41c:	e853 3f00 	ldrex	r3, [r3]
 800b420:	61fb      	str	r3, [r7, #28]
   return(result);
 800b422:	69fa      	ldr	r2, [r7, #28]
 800b424:	4b1e      	ldr	r3, [pc, #120]	; (800b4a0 <UART_EndRxTransfer+0xc8>)
 800b426:	4013      	ands	r3, r2
 800b428:	64bb      	str	r3, [r7, #72]	; 0x48
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	3308      	adds	r3, #8
 800b430:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b432:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b434:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b436:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b438:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b43a:	e841 2300 	strex	r3, r2, [r1]
 800b43e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b442:	2b00      	cmp	r3, #0
 800b444:	d1e5      	bne.n	800b412 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b44a:	2b01      	cmp	r3, #1
 800b44c:	d118      	bne.n	800b480 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	e853 3f00 	ldrex	r3, [r3]
 800b45a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b45c:	68bb      	ldr	r3, [r7, #8]
 800b45e:	f023 0310 	bic.w	r3, r3, #16
 800b462:	647b      	str	r3, [r7, #68]	; 0x44
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	461a      	mov	r2, r3
 800b46a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b46c:	61bb      	str	r3, [r7, #24]
 800b46e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b470:	6979      	ldr	r1, [r7, #20]
 800b472:	69ba      	ldr	r2, [r7, #24]
 800b474:	e841 2300 	strex	r3, r2, [r1]
 800b478:	613b      	str	r3, [r7, #16]
   return(result);
 800b47a:	693b      	ldr	r3, [r7, #16]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d1e6      	bne.n	800b44e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	2220      	movs	r2, #32
 800b484:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2200      	movs	r2, #0
 800b48c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	2200      	movs	r2, #0
 800b492:	675a      	str	r2, [r3, #116]	; 0x74
}
 800b494:	bf00      	nop
 800b496:	3754      	adds	r7, #84	; 0x54
 800b498:	46bd      	mov	sp, r7
 800b49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49e:	4770      	bx	lr
 800b4a0:	effffffe 	.word	0xeffffffe

0800b4a4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b4a4:	b480      	push	{r7}
 800b4a6:	b085      	sub	sp, #20
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b4b2:	2b01      	cmp	r3, #1
 800b4b4:	d101      	bne.n	800b4ba <HAL_UARTEx_DisableFifoMode+0x16>
 800b4b6:	2302      	movs	r3, #2
 800b4b8:	e027      	b.n	800b50a <HAL_UARTEx_DisableFifoMode+0x66>
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	2201      	movs	r2, #1
 800b4be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	2224      	movs	r2, #36	; 0x24
 800b4c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	681a      	ldr	r2, [r3, #0]
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	f022 0201 	bic.w	r2, r2, #1
 800b4e0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b4e8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	68fa      	ldr	r2, [r7, #12]
 800b4f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2220      	movs	r2, #32
 800b4fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2200      	movs	r2, #0
 800b504:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b508:	2300      	movs	r3, #0
}
 800b50a:	4618      	mov	r0, r3
 800b50c:	3714      	adds	r7, #20
 800b50e:	46bd      	mov	sp, r7
 800b510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b514:	4770      	bx	lr

0800b516 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b516:	b580      	push	{r7, lr}
 800b518:	b084      	sub	sp, #16
 800b51a:	af00      	add	r7, sp, #0
 800b51c:	6078      	str	r0, [r7, #4]
 800b51e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b526:	2b01      	cmp	r3, #1
 800b528:	d101      	bne.n	800b52e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b52a:	2302      	movs	r3, #2
 800b52c:	e02d      	b.n	800b58a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	2201      	movs	r2, #1
 800b532:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	2224      	movs	r2, #36	; 0x24
 800b53a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	681a      	ldr	r2, [r3, #0]
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	f022 0201 	bic.w	r2, r2, #1
 800b554:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	689b      	ldr	r3, [r3, #8]
 800b55c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	683a      	ldr	r2, [r7, #0]
 800b566:	430a      	orrs	r2, r1
 800b568:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	f000 f850 	bl	800b610 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	68fa      	ldr	r2, [r7, #12]
 800b576:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2220      	movs	r2, #32
 800b57c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2200      	movs	r2, #0
 800b584:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b588:	2300      	movs	r3, #0
}
 800b58a:	4618      	mov	r0, r3
 800b58c:	3710      	adds	r7, #16
 800b58e:	46bd      	mov	sp, r7
 800b590:	bd80      	pop	{r7, pc}

0800b592 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b592:	b580      	push	{r7, lr}
 800b594:	b084      	sub	sp, #16
 800b596:	af00      	add	r7, sp, #0
 800b598:	6078      	str	r0, [r7, #4]
 800b59a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b5a2:	2b01      	cmp	r3, #1
 800b5a4:	d101      	bne.n	800b5aa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b5a6:	2302      	movs	r3, #2
 800b5a8:	e02d      	b.n	800b606 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	2201      	movs	r2, #1
 800b5ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	2224      	movs	r2, #36	; 0x24
 800b5b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	681a      	ldr	r2, [r3, #0]
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	f022 0201 	bic.w	r2, r2, #1
 800b5d0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	689b      	ldr	r3, [r3, #8]
 800b5d8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	683a      	ldr	r2, [r7, #0]
 800b5e2:	430a      	orrs	r2, r1
 800b5e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b5e6:	6878      	ldr	r0, [r7, #4]
 800b5e8:	f000 f812 	bl	800b610 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	68fa      	ldr	r2, [r7, #12]
 800b5f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2220      	movs	r2, #32
 800b5f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	2200      	movs	r2, #0
 800b600:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b604:	2300      	movs	r3, #0
}
 800b606:	4618      	mov	r0, r3
 800b608:	3710      	adds	r7, #16
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd80      	pop	{r7, pc}
	...

0800b610 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b610:	b480      	push	{r7}
 800b612:	b085      	sub	sp, #20
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d108      	bne.n	800b632 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2201      	movs	r2, #1
 800b624:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2201      	movs	r2, #1
 800b62c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b630:	e031      	b.n	800b696 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b632:	2310      	movs	r3, #16
 800b634:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b636:	2310      	movs	r3, #16
 800b638:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	689b      	ldr	r3, [r3, #8]
 800b640:	0e5b      	lsrs	r3, r3, #25
 800b642:	b2db      	uxtb	r3, r3
 800b644:	f003 0307 	and.w	r3, r3, #7
 800b648:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	689b      	ldr	r3, [r3, #8]
 800b650:	0f5b      	lsrs	r3, r3, #29
 800b652:	b2db      	uxtb	r3, r3
 800b654:	f003 0307 	and.w	r3, r3, #7
 800b658:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b65a:	7bbb      	ldrb	r3, [r7, #14]
 800b65c:	7b3a      	ldrb	r2, [r7, #12]
 800b65e:	4911      	ldr	r1, [pc, #68]	; (800b6a4 <UARTEx_SetNbDataToProcess+0x94>)
 800b660:	5c8a      	ldrb	r2, [r1, r2]
 800b662:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b666:	7b3a      	ldrb	r2, [r7, #12]
 800b668:	490f      	ldr	r1, [pc, #60]	; (800b6a8 <UARTEx_SetNbDataToProcess+0x98>)
 800b66a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b66c:	fb93 f3f2 	sdiv	r3, r3, r2
 800b670:	b29a      	uxth	r2, r3
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b678:	7bfb      	ldrb	r3, [r7, #15]
 800b67a:	7b7a      	ldrb	r2, [r7, #13]
 800b67c:	4909      	ldr	r1, [pc, #36]	; (800b6a4 <UARTEx_SetNbDataToProcess+0x94>)
 800b67e:	5c8a      	ldrb	r2, [r1, r2]
 800b680:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b684:	7b7a      	ldrb	r2, [r7, #13]
 800b686:	4908      	ldr	r1, [pc, #32]	; (800b6a8 <UARTEx_SetNbDataToProcess+0x98>)
 800b688:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b68a:	fb93 f3f2 	sdiv	r3, r3, r2
 800b68e:	b29a      	uxth	r2, r3
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b696:	bf00      	nop
 800b698:	3714      	adds	r7, #20
 800b69a:	46bd      	mov	sp, r7
 800b69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a0:	4770      	bx	lr
 800b6a2:	bf00      	nop
 800b6a4:	0800bf64 	.word	0x0800bf64
 800b6a8:	0800bf6c 	.word	0x0800bf6c

0800b6ac <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b6ac:	b480      	push	{r7}
 800b6ae:	b083      	sub	sp, #12
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
 800b6b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800b6b6:	683b      	ldr	r3, [r7, #0]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d121      	bne.n	800b702 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681a      	ldr	r2, [r3, #0]
 800b6c2:	4b27      	ldr	r3, [pc, #156]	; (800b760 <FMC_SDRAM_Init+0xb4>)
 800b6c4:	4013      	ands	r3, r2
 800b6c6:	683a      	ldr	r2, [r7, #0]
 800b6c8:	6851      	ldr	r1, [r2, #4]
 800b6ca:	683a      	ldr	r2, [r7, #0]
 800b6cc:	6892      	ldr	r2, [r2, #8]
 800b6ce:	4311      	orrs	r1, r2
 800b6d0:	683a      	ldr	r2, [r7, #0]
 800b6d2:	68d2      	ldr	r2, [r2, #12]
 800b6d4:	4311      	orrs	r1, r2
 800b6d6:	683a      	ldr	r2, [r7, #0]
 800b6d8:	6912      	ldr	r2, [r2, #16]
 800b6da:	4311      	orrs	r1, r2
 800b6dc:	683a      	ldr	r2, [r7, #0]
 800b6de:	6952      	ldr	r2, [r2, #20]
 800b6e0:	4311      	orrs	r1, r2
 800b6e2:	683a      	ldr	r2, [r7, #0]
 800b6e4:	6992      	ldr	r2, [r2, #24]
 800b6e6:	4311      	orrs	r1, r2
 800b6e8:	683a      	ldr	r2, [r7, #0]
 800b6ea:	69d2      	ldr	r2, [r2, #28]
 800b6ec:	4311      	orrs	r1, r2
 800b6ee:	683a      	ldr	r2, [r7, #0]
 800b6f0:	6a12      	ldr	r2, [r2, #32]
 800b6f2:	4311      	orrs	r1, r2
 800b6f4:	683a      	ldr	r2, [r7, #0]
 800b6f6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b6f8:	430a      	orrs	r2, r1
 800b6fa:	431a      	orrs	r2, r3
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	601a      	str	r2, [r3, #0]
 800b700:	e026      	b.n	800b750 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	69d9      	ldr	r1, [r3, #28]
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	6a1b      	ldr	r3, [r3, #32]
 800b712:	4319      	orrs	r1, r3
 800b714:	683b      	ldr	r3, [r7, #0]
 800b716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b718:	430b      	orrs	r3, r1
 800b71a:	431a      	orrs	r2, r3
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	685a      	ldr	r2, [r3, #4]
 800b724:	4b0e      	ldr	r3, [pc, #56]	; (800b760 <FMC_SDRAM_Init+0xb4>)
 800b726:	4013      	ands	r3, r2
 800b728:	683a      	ldr	r2, [r7, #0]
 800b72a:	6851      	ldr	r1, [r2, #4]
 800b72c:	683a      	ldr	r2, [r7, #0]
 800b72e:	6892      	ldr	r2, [r2, #8]
 800b730:	4311      	orrs	r1, r2
 800b732:	683a      	ldr	r2, [r7, #0]
 800b734:	68d2      	ldr	r2, [r2, #12]
 800b736:	4311      	orrs	r1, r2
 800b738:	683a      	ldr	r2, [r7, #0]
 800b73a:	6912      	ldr	r2, [r2, #16]
 800b73c:	4311      	orrs	r1, r2
 800b73e:	683a      	ldr	r2, [r7, #0]
 800b740:	6952      	ldr	r2, [r2, #20]
 800b742:	4311      	orrs	r1, r2
 800b744:	683a      	ldr	r2, [r7, #0]
 800b746:	6992      	ldr	r2, [r2, #24]
 800b748:	430a      	orrs	r2, r1
 800b74a:	431a      	orrs	r2, r3
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800b750:	2300      	movs	r3, #0
}
 800b752:	4618      	mov	r0, r3
 800b754:	370c      	adds	r7, #12
 800b756:	46bd      	mov	sp, r7
 800b758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75c:	4770      	bx	lr
 800b75e:	bf00      	nop
 800b760:	ffff8000 	.word	0xffff8000

0800b764 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b764:	b480      	push	{r7}
 800b766:	b085      	sub	sp, #20
 800b768:	af00      	add	r7, sp, #0
 800b76a:	60f8      	str	r0, [r7, #12]
 800b76c:	60b9      	str	r1, [r7, #8]
 800b76e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d128      	bne.n	800b7c8 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	689b      	ldr	r3, [r3, #8]
 800b77a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800b77e:	68bb      	ldr	r3, [r7, #8]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	1e59      	subs	r1, r3, #1
 800b784:	68bb      	ldr	r3, [r7, #8]
 800b786:	685b      	ldr	r3, [r3, #4]
 800b788:	3b01      	subs	r3, #1
 800b78a:	011b      	lsls	r3, r3, #4
 800b78c:	4319      	orrs	r1, r3
 800b78e:	68bb      	ldr	r3, [r7, #8]
 800b790:	689b      	ldr	r3, [r3, #8]
 800b792:	3b01      	subs	r3, #1
 800b794:	021b      	lsls	r3, r3, #8
 800b796:	4319      	orrs	r1, r3
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	68db      	ldr	r3, [r3, #12]
 800b79c:	3b01      	subs	r3, #1
 800b79e:	031b      	lsls	r3, r3, #12
 800b7a0:	4319      	orrs	r1, r3
 800b7a2:	68bb      	ldr	r3, [r7, #8]
 800b7a4:	691b      	ldr	r3, [r3, #16]
 800b7a6:	3b01      	subs	r3, #1
 800b7a8:	041b      	lsls	r3, r3, #16
 800b7aa:	4319      	orrs	r1, r3
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	695b      	ldr	r3, [r3, #20]
 800b7b0:	3b01      	subs	r3, #1
 800b7b2:	051b      	lsls	r3, r3, #20
 800b7b4:	4319      	orrs	r1, r3
 800b7b6:	68bb      	ldr	r3, [r7, #8]
 800b7b8:	699b      	ldr	r3, [r3, #24]
 800b7ba:	3b01      	subs	r3, #1
 800b7bc:	061b      	lsls	r3, r3, #24
 800b7be:	430b      	orrs	r3, r1
 800b7c0:	431a      	orrs	r2, r3
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	609a      	str	r2, [r3, #8]
 800b7c6:	e02d      	b.n	800b824 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	689a      	ldr	r2, [r3, #8]
 800b7cc:	4b19      	ldr	r3, [pc, #100]	; (800b834 <FMC_SDRAM_Timing_Init+0xd0>)
 800b7ce:	4013      	ands	r3, r2
 800b7d0:	68ba      	ldr	r2, [r7, #8]
 800b7d2:	68d2      	ldr	r2, [r2, #12]
 800b7d4:	3a01      	subs	r2, #1
 800b7d6:	0311      	lsls	r1, r2, #12
 800b7d8:	68ba      	ldr	r2, [r7, #8]
 800b7da:	6952      	ldr	r2, [r2, #20]
 800b7dc:	3a01      	subs	r2, #1
 800b7de:	0512      	lsls	r2, r2, #20
 800b7e0:	430a      	orrs	r2, r1
 800b7e2:	431a      	orrs	r2, r3
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	68db      	ldr	r3, [r3, #12]
 800b7ec:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800b7f0:	68bb      	ldr	r3, [r7, #8]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	1e59      	subs	r1, r3, #1
 800b7f6:	68bb      	ldr	r3, [r7, #8]
 800b7f8:	685b      	ldr	r3, [r3, #4]
 800b7fa:	3b01      	subs	r3, #1
 800b7fc:	011b      	lsls	r3, r3, #4
 800b7fe:	4319      	orrs	r1, r3
 800b800:	68bb      	ldr	r3, [r7, #8]
 800b802:	689b      	ldr	r3, [r3, #8]
 800b804:	3b01      	subs	r3, #1
 800b806:	021b      	lsls	r3, r3, #8
 800b808:	4319      	orrs	r1, r3
 800b80a:	68bb      	ldr	r3, [r7, #8]
 800b80c:	691b      	ldr	r3, [r3, #16]
 800b80e:	3b01      	subs	r3, #1
 800b810:	041b      	lsls	r3, r3, #16
 800b812:	4319      	orrs	r1, r3
 800b814:	68bb      	ldr	r3, [r7, #8]
 800b816:	699b      	ldr	r3, [r3, #24]
 800b818:	3b01      	subs	r3, #1
 800b81a:	061b      	lsls	r3, r3, #24
 800b81c:	430b      	orrs	r3, r1
 800b81e:	431a      	orrs	r2, r3
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800b824:	2300      	movs	r3, #0
}
 800b826:	4618      	mov	r0, r3
 800b828:	3714      	adds	r7, #20
 800b82a:	46bd      	mov	sp, r7
 800b82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b830:	4770      	bx	lr
 800b832:	bf00      	nop
 800b834:	ff0f0fff 	.word	0xff0f0fff

0800b838 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b838:	b084      	sub	sp, #16
 800b83a:	b580      	push	{r7, lr}
 800b83c:	b084      	sub	sp, #16
 800b83e:	af00      	add	r7, sp, #0
 800b840:	6078      	str	r0, [r7, #4]
 800b842:	f107 001c 	add.w	r0, r7, #28
 800b846:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b84a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b84c:	2b01      	cmp	r3, #1
 800b84e:	d120      	bne.n	800b892 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b854:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	68da      	ldr	r2, [r3, #12]
 800b860:	4b2a      	ldr	r3, [pc, #168]	; (800b90c <USB_CoreInit+0xd4>)
 800b862:	4013      	ands	r3, r2
 800b864:	687a      	ldr	r2, [r7, #4]
 800b866:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	68db      	ldr	r3, [r3, #12]
 800b86c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b874:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b876:	2b01      	cmp	r3, #1
 800b878:	d105      	bne.n	800b886 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	68db      	ldr	r3, [r3, #12]
 800b87e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b886:	6878      	ldr	r0, [r7, #4]
 800b888:	f000 faac 	bl	800bde4 <USB_CoreReset>
 800b88c:	4603      	mov	r3, r0
 800b88e:	73fb      	strb	r3, [r7, #15]
 800b890:	e01a      	b.n	800b8c8 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	68db      	ldr	r3, [r3, #12]
 800b896:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b89e:	6878      	ldr	r0, [r7, #4]
 800b8a0:	f000 faa0 	bl	800bde4 <USB_CoreReset>
 800b8a4:	4603      	mov	r3, r0
 800b8a6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b8a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d106      	bne.n	800b8bc <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8b2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	639a      	str	r2, [r3, #56]	; 0x38
 800b8ba:	e005      	b.n	800b8c8 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b8c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ca:	2b01      	cmp	r3, #1
 800b8cc:	d116      	bne.n	800b8fc <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b8d2:	b29a      	uxth	r2, r3
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b8dc:	4b0c      	ldr	r3, [pc, #48]	; (800b910 <USB_CoreInit+0xd8>)
 800b8de:	4313      	orrs	r3, r2
 800b8e0:	687a      	ldr	r2, [r7, #4]
 800b8e2:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	689b      	ldr	r3, [r3, #8]
 800b8e8:	f043 0206 	orr.w	r2, r3, #6
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	689b      	ldr	r3, [r3, #8]
 800b8f4:	f043 0220 	orr.w	r2, r3, #32
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b8fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8fe:	4618      	mov	r0, r3
 800b900:	3710      	adds	r7, #16
 800b902:	46bd      	mov	sp, r7
 800b904:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b908:	b004      	add	sp, #16
 800b90a:	4770      	bx	lr
 800b90c:	ffbdffbf 	.word	0xffbdffbf
 800b910:	03ee0000 	.word	0x03ee0000

0800b914 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b914:	b480      	push	{r7}
 800b916:	b083      	sub	sp, #12
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	689b      	ldr	r3, [r3, #8]
 800b920:	f023 0201 	bic.w	r2, r3, #1
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b928:	2300      	movs	r3, #0
}
 800b92a:	4618      	mov	r0, r3
 800b92c:	370c      	adds	r7, #12
 800b92e:	46bd      	mov	sp, r7
 800b930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b934:	4770      	bx	lr

0800b936 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b936:	b580      	push	{r7, lr}
 800b938:	b084      	sub	sp, #16
 800b93a:	af00      	add	r7, sp, #0
 800b93c:	6078      	str	r0, [r7, #4]
 800b93e:	460b      	mov	r3, r1
 800b940:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b942:	2300      	movs	r3, #0
 800b944:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	68db      	ldr	r3, [r3, #12]
 800b94a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b952:	78fb      	ldrb	r3, [r7, #3]
 800b954:	2b01      	cmp	r3, #1
 800b956:	d115      	bne.n	800b984 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	68db      	ldr	r3, [r3, #12]
 800b95c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b964:	2001      	movs	r0, #1
 800b966:	f7f7 f893 	bl	8002a90 <HAL_Delay>
      ms++;
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	3301      	adds	r3, #1
 800b96e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b970:	6878      	ldr	r0, [r7, #4]
 800b972:	f000 fa29 	bl	800bdc8 <USB_GetMode>
 800b976:	4603      	mov	r3, r0
 800b978:	2b01      	cmp	r3, #1
 800b97a:	d01e      	beq.n	800b9ba <USB_SetCurrentMode+0x84>
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	2b31      	cmp	r3, #49	; 0x31
 800b980:	d9f0      	bls.n	800b964 <USB_SetCurrentMode+0x2e>
 800b982:	e01a      	b.n	800b9ba <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b984:	78fb      	ldrb	r3, [r7, #3]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d115      	bne.n	800b9b6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	68db      	ldr	r3, [r3, #12]
 800b98e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b996:	2001      	movs	r0, #1
 800b998:	f7f7 f87a 	bl	8002a90 <HAL_Delay>
      ms++;
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	3301      	adds	r3, #1
 800b9a0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b9a2:	6878      	ldr	r0, [r7, #4]
 800b9a4:	f000 fa10 	bl	800bdc8 <USB_GetMode>
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d005      	beq.n	800b9ba <USB_SetCurrentMode+0x84>
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	2b31      	cmp	r3, #49	; 0x31
 800b9b2:	d9f0      	bls.n	800b996 <USB_SetCurrentMode+0x60>
 800b9b4:	e001      	b.n	800b9ba <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b9b6:	2301      	movs	r3, #1
 800b9b8:	e005      	b.n	800b9c6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	2b32      	cmp	r3, #50	; 0x32
 800b9be:	d101      	bne.n	800b9c4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b9c0:	2301      	movs	r3, #1
 800b9c2:	e000      	b.n	800b9c6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b9c4:	2300      	movs	r3, #0
}
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	3710      	adds	r7, #16
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	bd80      	pop	{r7, pc}
	...

0800b9d0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b9d0:	b084      	sub	sp, #16
 800b9d2:	b580      	push	{r7, lr}
 800b9d4:	b086      	sub	sp, #24
 800b9d6:	af00      	add	r7, sp, #0
 800b9d8:	6078      	str	r0, [r7, #4]
 800b9da:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b9de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	613b      	str	r3, [r7, #16]
 800b9ee:	e009      	b.n	800ba04 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b9f0:	687a      	ldr	r2, [r7, #4]
 800b9f2:	693b      	ldr	r3, [r7, #16]
 800b9f4:	3340      	adds	r3, #64	; 0x40
 800b9f6:	009b      	lsls	r3, r3, #2
 800b9f8:	4413      	add	r3, r2
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b9fe:	693b      	ldr	r3, [r7, #16]
 800ba00:	3301      	adds	r3, #1
 800ba02:	613b      	str	r3, [r7, #16]
 800ba04:	693b      	ldr	r3, [r7, #16]
 800ba06:	2b0e      	cmp	r3, #14
 800ba08:	d9f2      	bls.n	800b9f0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ba0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d11c      	bne.n	800ba4a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba16:	685b      	ldr	r3, [r3, #4]
 800ba18:	68fa      	ldr	r2, [r7, #12]
 800ba1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ba1e:	f043 0302 	orr.w	r3, r3, #2
 800ba22:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba28:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	601a      	str	r2, [r3, #0]
 800ba48:	e005      	b.n	800ba56 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba4e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ba5c:	461a      	mov	r2, r3
 800ba5e:	2300      	movs	r3, #0
 800ba60:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba68:	4619      	mov	r1, r3
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba70:	461a      	mov	r2, r3
 800ba72:	680b      	ldr	r3, [r1, #0]
 800ba74:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ba76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba78:	2b01      	cmp	r3, #1
 800ba7a:	d10c      	bne.n	800ba96 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ba7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d104      	bne.n	800ba8c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ba82:	2100      	movs	r1, #0
 800ba84:	6878      	ldr	r0, [r7, #4]
 800ba86:	f000 f965 	bl	800bd54 <USB_SetDevSpeed>
 800ba8a:	e008      	b.n	800ba9e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ba8c:	2101      	movs	r1, #1
 800ba8e:	6878      	ldr	r0, [r7, #4]
 800ba90:	f000 f960 	bl	800bd54 <USB_SetDevSpeed>
 800ba94:	e003      	b.n	800ba9e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ba96:	2103      	movs	r1, #3
 800ba98:	6878      	ldr	r0, [r7, #4]
 800ba9a:	f000 f95b 	bl	800bd54 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ba9e:	2110      	movs	r1, #16
 800baa0:	6878      	ldr	r0, [r7, #4]
 800baa2:	f000 f8f3 	bl	800bc8c <USB_FlushTxFifo>
 800baa6:	4603      	mov	r3, r0
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d001      	beq.n	800bab0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800baac:	2301      	movs	r3, #1
 800baae:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800bab0:	6878      	ldr	r0, [r7, #4]
 800bab2:	f000 f91f 	bl	800bcf4 <USB_FlushRxFifo>
 800bab6:	4603      	mov	r3, r0
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d001      	beq.n	800bac0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800babc:	2301      	movs	r3, #1
 800babe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bac6:	461a      	mov	r2, r3
 800bac8:	2300      	movs	r3, #0
 800baca:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bad2:	461a      	mov	r2, r3
 800bad4:	2300      	movs	r3, #0
 800bad6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bade:	461a      	mov	r2, r3
 800bae0:	2300      	movs	r3, #0
 800bae2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bae4:	2300      	movs	r3, #0
 800bae6:	613b      	str	r3, [r7, #16]
 800bae8:	e043      	b.n	800bb72 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800baea:	693b      	ldr	r3, [r7, #16]
 800baec:	015a      	lsls	r2, r3, #5
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	4413      	add	r3, r2
 800baf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bafc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bb00:	d118      	bne.n	800bb34 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800bb02:	693b      	ldr	r3, [r7, #16]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d10a      	bne.n	800bb1e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800bb08:	693b      	ldr	r3, [r7, #16]
 800bb0a:	015a      	lsls	r2, r3, #5
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	4413      	add	r3, r2
 800bb10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb14:	461a      	mov	r2, r3
 800bb16:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bb1a:	6013      	str	r3, [r2, #0]
 800bb1c:	e013      	b.n	800bb46 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800bb1e:	693b      	ldr	r3, [r7, #16]
 800bb20:	015a      	lsls	r2, r3, #5
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	4413      	add	r3, r2
 800bb26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb2a:	461a      	mov	r2, r3
 800bb2c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bb30:	6013      	str	r3, [r2, #0]
 800bb32:	e008      	b.n	800bb46 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800bb34:	693b      	ldr	r3, [r7, #16]
 800bb36:	015a      	lsls	r2, r3, #5
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	4413      	add	r3, r2
 800bb3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb40:	461a      	mov	r2, r3
 800bb42:	2300      	movs	r3, #0
 800bb44:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800bb46:	693b      	ldr	r3, [r7, #16]
 800bb48:	015a      	lsls	r2, r3, #5
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	4413      	add	r3, r2
 800bb4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb52:	461a      	mov	r2, r3
 800bb54:	2300      	movs	r3, #0
 800bb56:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800bb58:	693b      	ldr	r3, [r7, #16]
 800bb5a:	015a      	lsls	r2, r3, #5
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	4413      	add	r3, r2
 800bb60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb64:	461a      	mov	r2, r3
 800bb66:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bb6a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bb6c:	693b      	ldr	r3, [r7, #16]
 800bb6e:	3301      	adds	r3, #1
 800bb70:	613b      	str	r3, [r7, #16]
 800bb72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb74:	693a      	ldr	r2, [r7, #16]
 800bb76:	429a      	cmp	r2, r3
 800bb78:	d3b7      	bcc.n	800baea <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	613b      	str	r3, [r7, #16]
 800bb7e:	e043      	b.n	800bc08 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bb80:	693b      	ldr	r3, [r7, #16]
 800bb82:	015a      	lsls	r2, r3, #5
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	4413      	add	r3, r2
 800bb88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bb92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bb96:	d118      	bne.n	800bbca <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800bb98:	693b      	ldr	r3, [r7, #16]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d10a      	bne.n	800bbb4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800bb9e:	693b      	ldr	r3, [r7, #16]
 800bba0:	015a      	lsls	r2, r3, #5
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	4413      	add	r3, r2
 800bba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbaa:	461a      	mov	r2, r3
 800bbac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bbb0:	6013      	str	r3, [r2, #0]
 800bbb2:	e013      	b.n	800bbdc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800bbb4:	693b      	ldr	r3, [r7, #16]
 800bbb6:	015a      	lsls	r2, r3, #5
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	4413      	add	r3, r2
 800bbbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbc0:	461a      	mov	r2, r3
 800bbc2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bbc6:	6013      	str	r3, [r2, #0]
 800bbc8:	e008      	b.n	800bbdc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800bbca:	693b      	ldr	r3, [r7, #16]
 800bbcc:	015a      	lsls	r2, r3, #5
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	4413      	add	r3, r2
 800bbd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbd6:	461a      	mov	r2, r3
 800bbd8:	2300      	movs	r3, #0
 800bbda:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800bbdc:	693b      	ldr	r3, [r7, #16]
 800bbde:	015a      	lsls	r2, r3, #5
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	4413      	add	r3, r2
 800bbe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbe8:	461a      	mov	r2, r3
 800bbea:	2300      	movs	r3, #0
 800bbec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800bbee:	693b      	ldr	r3, [r7, #16]
 800bbf0:	015a      	lsls	r2, r3, #5
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	4413      	add	r3, r2
 800bbf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbfa:	461a      	mov	r2, r3
 800bbfc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bc00:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bc02:	693b      	ldr	r3, [r7, #16]
 800bc04:	3301      	adds	r3, #1
 800bc06:	613b      	str	r3, [r7, #16]
 800bc08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc0a:	693a      	ldr	r2, [r7, #16]
 800bc0c:	429a      	cmp	r2, r3
 800bc0e:	d3b7      	bcc.n	800bb80 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc16:	691b      	ldr	r3, [r3, #16]
 800bc18:	68fa      	ldr	r2, [r7, #12]
 800bc1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bc1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bc22:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	2200      	movs	r2, #0
 800bc28:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800bc30:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800bc32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d105      	bne.n	800bc44 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	699b      	ldr	r3, [r3, #24]
 800bc3c:	f043 0210 	orr.w	r2, r3, #16
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	699a      	ldr	r2, [r3, #24]
 800bc48:	4b0e      	ldr	r3, [pc, #56]	; (800bc84 <USB_DevInit+0x2b4>)
 800bc4a:	4313      	orrs	r3, r2
 800bc4c:	687a      	ldr	r2, [r7, #4]
 800bc4e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800bc50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d005      	beq.n	800bc62 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	699b      	ldr	r3, [r3, #24]
 800bc5a:	f043 0208 	orr.w	r2, r3, #8
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800bc62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc64:	2b01      	cmp	r3, #1
 800bc66:	d105      	bne.n	800bc74 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	699a      	ldr	r2, [r3, #24]
 800bc6c:	4b06      	ldr	r3, [pc, #24]	; (800bc88 <USB_DevInit+0x2b8>)
 800bc6e:	4313      	orrs	r3, r2
 800bc70:	687a      	ldr	r2, [r7, #4]
 800bc72:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800bc74:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc76:	4618      	mov	r0, r3
 800bc78:	3718      	adds	r7, #24
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bc80:	b004      	add	sp, #16
 800bc82:	4770      	bx	lr
 800bc84:	803c3800 	.word	0x803c3800
 800bc88:	40000004 	.word	0x40000004

0800bc8c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bc8c:	b480      	push	{r7}
 800bc8e:	b085      	sub	sp, #20
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
 800bc94:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bc96:	2300      	movs	r3, #0
 800bc98:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	3301      	adds	r3, #1
 800bc9e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	4a13      	ldr	r2, [pc, #76]	; (800bcf0 <USB_FlushTxFifo+0x64>)
 800bca4:	4293      	cmp	r3, r2
 800bca6:	d901      	bls.n	800bcac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800bca8:	2303      	movs	r3, #3
 800bcaa:	e01b      	b.n	800bce4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	691b      	ldr	r3, [r3, #16]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	daf2      	bge.n	800bc9a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	019b      	lsls	r3, r3, #6
 800bcbc:	f043 0220 	orr.w	r2, r3, #32
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	3301      	adds	r3, #1
 800bcc8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	4a08      	ldr	r2, [pc, #32]	; (800bcf0 <USB_FlushTxFifo+0x64>)
 800bcce:	4293      	cmp	r3, r2
 800bcd0:	d901      	bls.n	800bcd6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800bcd2:	2303      	movs	r3, #3
 800bcd4:	e006      	b.n	800bce4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	691b      	ldr	r3, [r3, #16]
 800bcda:	f003 0320 	and.w	r3, r3, #32
 800bcde:	2b20      	cmp	r3, #32
 800bce0:	d0f0      	beq.n	800bcc4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800bce2:	2300      	movs	r3, #0
}
 800bce4:	4618      	mov	r0, r3
 800bce6:	3714      	adds	r7, #20
 800bce8:	46bd      	mov	sp, r7
 800bcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcee:	4770      	bx	lr
 800bcf0:	00030d40 	.word	0x00030d40

0800bcf4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bcf4:	b480      	push	{r7}
 800bcf6:	b085      	sub	sp, #20
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	3301      	adds	r3, #1
 800bd04:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	4a11      	ldr	r2, [pc, #68]	; (800bd50 <USB_FlushRxFifo+0x5c>)
 800bd0a:	4293      	cmp	r3, r2
 800bd0c:	d901      	bls.n	800bd12 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800bd0e:	2303      	movs	r3, #3
 800bd10:	e018      	b.n	800bd44 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	691b      	ldr	r3, [r3, #16]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	daf2      	bge.n	800bd00 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	2210      	movs	r2, #16
 800bd22:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	3301      	adds	r3, #1
 800bd28:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	4a08      	ldr	r2, [pc, #32]	; (800bd50 <USB_FlushRxFifo+0x5c>)
 800bd2e:	4293      	cmp	r3, r2
 800bd30:	d901      	bls.n	800bd36 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800bd32:	2303      	movs	r3, #3
 800bd34:	e006      	b.n	800bd44 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	691b      	ldr	r3, [r3, #16]
 800bd3a:	f003 0310 	and.w	r3, r3, #16
 800bd3e:	2b10      	cmp	r3, #16
 800bd40:	d0f0      	beq.n	800bd24 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800bd42:	2300      	movs	r3, #0
}
 800bd44:	4618      	mov	r0, r3
 800bd46:	3714      	adds	r7, #20
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4e:	4770      	bx	lr
 800bd50:	00030d40 	.word	0x00030d40

0800bd54 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800bd54:	b480      	push	{r7}
 800bd56:	b085      	sub	sp, #20
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
 800bd5c:	460b      	mov	r3, r1
 800bd5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd6a:	681a      	ldr	r2, [r3, #0]
 800bd6c:	78fb      	ldrb	r3, [r7, #3]
 800bd6e:	68f9      	ldr	r1, [r7, #12]
 800bd70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bd74:	4313      	orrs	r3, r2
 800bd76:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800bd78:	2300      	movs	r3, #0
}
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	3714      	adds	r7, #20
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd84:	4770      	bx	lr

0800bd86 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800bd86:	b480      	push	{r7}
 800bd88:	b085      	sub	sp, #20
 800bd8a:	af00      	add	r7, sp, #0
 800bd8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	68fa      	ldr	r2, [r7, #12]
 800bd9c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bda0:	f023 0303 	bic.w	r3, r3, #3
 800bda4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bdac:	685b      	ldr	r3, [r3, #4]
 800bdae:	68fa      	ldr	r2, [r7, #12]
 800bdb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bdb4:	f043 0302 	orr.w	r3, r3, #2
 800bdb8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bdba:	2300      	movs	r3, #0
}
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	3714      	adds	r7, #20
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc6:	4770      	bx	lr

0800bdc8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800bdc8:	b480      	push	{r7}
 800bdca:	b083      	sub	sp, #12
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	695b      	ldr	r3, [r3, #20]
 800bdd4:	f003 0301 	and.w	r3, r3, #1
}
 800bdd8:	4618      	mov	r0, r3
 800bdda:	370c      	adds	r7, #12
 800bddc:	46bd      	mov	sp, r7
 800bdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde2:	4770      	bx	lr

0800bde4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bde4:	b480      	push	{r7}
 800bde6:	b085      	sub	sp, #20
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bdec:	2300      	movs	r3, #0
 800bdee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	3301      	adds	r3, #1
 800bdf4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	4a13      	ldr	r2, [pc, #76]	; (800be48 <USB_CoreReset+0x64>)
 800bdfa:	4293      	cmp	r3, r2
 800bdfc:	d901      	bls.n	800be02 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800bdfe:	2303      	movs	r3, #3
 800be00:	e01b      	b.n	800be3a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	691b      	ldr	r3, [r3, #16]
 800be06:	2b00      	cmp	r3, #0
 800be08:	daf2      	bge.n	800bdf0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800be0a:	2300      	movs	r3, #0
 800be0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	691b      	ldr	r3, [r3, #16]
 800be12:	f043 0201 	orr.w	r2, r3, #1
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	3301      	adds	r3, #1
 800be1e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	4a09      	ldr	r2, [pc, #36]	; (800be48 <USB_CoreReset+0x64>)
 800be24:	4293      	cmp	r3, r2
 800be26:	d901      	bls.n	800be2c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800be28:	2303      	movs	r3, #3
 800be2a:	e006      	b.n	800be3a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	691b      	ldr	r3, [r3, #16]
 800be30:	f003 0301 	and.w	r3, r3, #1
 800be34:	2b01      	cmp	r3, #1
 800be36:	d0f0      	beq.n	800be1a <USB_CoreReset+0x36>

  return HAL_OK;
 800be38:	2300      	movs	r3, #0
}
 800be3a:	4618      	mov	r0, r3
 800be3c:	3714      	adds	r7, #20
 800be3e:	46bd      	mov	sp, r7
 800be40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be44:	4770      	bx	lr
 800be46:	bf00      	nop
 800be48:	00030d40 	.word	0x00030d40

0800be4c <__libc_init_array>:
 800be4c:	b570      	push	{r4, r5, r6, lr}
 800be4e:	4d0d      	ldr	r5, [pc, #52]	; (800be84 <__libc_init_array+0x38>)
 800be50:	4c0d      	ldr	r4, [pc, #52]	; (800be88 <__libc_init_array+0x3c>)
 800be52:	1b64      	subs	r4, r4, r5
 800be54:	10a4      	asrs	r4, r4, #2
 800be56:	2600      	movs	r6, #0
 800be58:	42a6      	cmp	r6, r4
 800be5a:	d109      	bne.n	800be70 <__libc_init_array+0x24>
 800be5c:	4d0b      	ldr	r5, [pc, #44]	; (800be8c <__libc_init_array+0x40>)
 800be5e:	4c0c      	ldr	r4, [pc, #48]	; (800be90 <__libc_init_array+0x44>)
 800be60:	f000 f82e 	bl	800bec0 <_init>
 800be64:	1b64      	subs	r4, r4, r5
 800be66:	10a4      	asrs	r4, r4, #2
 800be68:	2600      	movs	r6, #0
 800be6a:	42a6      	cmp	r6, r4
 800be6c:	d105      	bne.n	800be7a <__libc_init_array+0x2e>
 800be6e:	bd70      	pop	{r4, r5, r6, pc}
 800be70:	f855 3b04 	ldr.w	r3, [r5], #4
 800be74:	4798      	blx	r3
 800be76:	3601      	adds	r6, #1
 800be78:	e7ee      	b.n	800be58 <__libc_init_array+0xc>
 800be7a:	f855 3b04 	ldr.w	r3, [r5], #4
 800be7e:	4798      	blx	r3
 800be80:	3601      	adds	r6, #1
 800be82:	e7f2      	b.n	800be6a <__libc_init_array+0x1e>
 800be84:	0800bf7c 	.word	0x0800bf7c
 800be88:	0800bf7c 	.word	0x0800bf7c
 800be8c:	0800bf7c 	.word	0x0800bf7c
 800be90:	0800bf80 	.word	0x0800bf80

0800be94 <memcpy>:
 800be94:	440a      	add	r2, r1
 800be96:	4291      	cmp	r1, r2
 800be98:	f100 33ff 	add.w	r3, r0, #4294967295
 800be9c:	d100      	bne.n	800bea0 <memcpy+0xc>
 800be9e:	4770      	bx	lr
 800bea0:	b510      	push	{r4, lr}
 800bea2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bea6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800beaa:	4291      	cmp	r1, r2
 800beac:	d1f9      	bne.n	800bea2 <memcpy+0xe>
 800beae:	bd10      	pop	{r4, pc}

0800beb0 <memset>:
 800beb0:	4402      	add	r2, r0
 800beb2:	4603      	mov	r3, r0
 800beb4:	4293      	cmp	r3, r2
 800beb6:	d100      	bne.n	800beba <memset+0xa>
 800beb8:	4770      	bx	lr
 800beba:	f803 1b01 	strb.w	r1, [r3], #1
 800bebe:	e7f9      	b.n	800beb4 <memset+0x4>

0800bec0 <_init>:
 800bec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bec2:	bf00      	nop
 800bec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bec6:	bc08      	pop	{r3}
 800bec8:	469e      	mov	lr, r3
 800beca:	4770      	bx	lr

0800becc <_fini>:
 800becc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bece:	bf00      	nop
 800bed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bed2:	bc08      	pop	{r3}
 800bed4:	469e      	mov	lr, r3
 800bed6:	4770      	bx	lr
