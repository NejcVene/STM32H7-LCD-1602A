
LCD_Display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e0cc  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  0800e364  0800e364  0001e364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e4c4  0800e4c4  0001e4c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e4cc  0800e4cc  0001e4cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800e4d0  0800e4d0  0001e4d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000038  24000000  0800e4d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000038  0800e50c  00020038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000098  0800e56c  00020098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c44  240000f8  0800e5cc  000200f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000d3c  0800e5cc  00020d3c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000323aa  00000000  00000000  00020126  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000464d  00000000  00000000  000524d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000024f8  00000000  00000000  00056b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002368  00000000  00000000  00059018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00041a08  00000000  00000000  0005b380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002fe11  00000000  00000000  0009cd88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001a4a8a  00000000  00000000  000ccb99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00271623  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a47c  00000000  00000000  00271674  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000f8 	.word	0x240000f8
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800e34c 	.word	0x0800e34c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000fc 	.word	0x240000fc
 80002d4:	0800e34c 	.word	0x0800e34c

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_uldivmod>:
 80002e8:	b953      	cbnz	r3, 8000300 <__aeabi_uldivmod+0x18>
 80002ea:	b94a      	cbnz	r2, 8000300 <__aeabi_uldivmod+0x18>
 80002ec:	2900      	cmp	r1, #0
 80002ee:	bf08      	it	eq
 80002f0:	2800      	cmpeq	r0, #0
 80002f2:	bf1c      	itt	ne
 80002f4:	f04f 31ff 	movne.w	r1, #4294967295
 80002f8:	f04f 30ff 	movne.w	r0, #4294967295
 80002fc:	f000 b974 	b.w	80005e8 <__aeabi_idiv0>
 8000300:	f1ad 0c08 	sub.w	ip, sp, #8
 8000304:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000308:	f000 f806 	bl	8000318 <__udivmoddi4>
 800030c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000314:	b004      	add	sp, #16
 8000316:	4770      	bx	lr

08000318 <__udivmoddi4>:
 8000318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800031c:	9d08      	ldr	r5, [sp, #32]
 800031e:	4604      	mov	r4, r0
 8000320:	468e      	mov	lr, r1
 8000322:	2b00      	cmp	r3, #0
 8000324:	d14d      	bne.n	80003c2 <__udivmoddi4+0xaa>
 8000326:	428a      	cmp	r2, r1
 8000328:	4694      	mov	ip, r2
 800032a:	d969      	bls.n	8000400 <__udivmoddi4+0xe8>
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	b152      	cbz	r2, 8000348 <__udivmoddi4+0x30>
 8000332:	fa01 f302 	lsl.w	r3, r1, r2
 8000336:	f1c2 0120 	rsb	r1, r2, #32
 800033a:	fa20 f101 	lsr.w	r1, r0, r1
 800033e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000342:	ea41 0e03 	orr.w	lr, r1, r3
 8000346:	4094      	lsls	r4, r2
 8000348:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800034c:	0c21      	lsrs	r1, r4, #16
 800034e:	fbbe f6f8 	udiv	r6, lr, r8
 8000352:	fa1f f78c 	uxth.w	r7, ip
 8000356:	fb08 e316 	mls	r3, r8, r6, lr
 800035a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800035e:	fb06 f107 	mul.w	r1, r6, r7
 8000362:	4299      	cmp	r1, r3
 8000364:	d90a      	bls.n	800037c <__udivmoddi4+0x64>
 8000366:	eb1c 0303 	adds.w	r3, ip, r3
 800036a:	f106 30ff 	add.w	r0, r6, #4294967295
 800036e:	f080 811f 	bcs.w	80005b0 <__udivmoddi4+0x298>
 8000372:	4299      	cmp	r1, r3
 8000374:	f240 811c 	bls.w	80005b0 <__udivmoddi4+0x298>
 8000378:	3e02      	subs	r6, #2
 800037a:	4463      	add	r3, ip
 800037c:	1a5b      	subs	r3, r3, r1
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb3 f0f8 	udiv	r0, r3, r8
 8000384:	fb08 3310 	mls	r3, r8, r0, r3
 8000388:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800038c:	fb00 f707 	mul.w	r7, r0, r7
 8000390:	42a7      	cmp	r7, r4
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x92>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 33ff 	add.w	r3, r0, #4294967295
 800039c:	f080 810a 	bcs.w	80005b4 <__udivmoddi4+0x29c>
 80003a0:	42a7      	cmp	r7, r4
 80003a2:	f240 8107 	bls.w	80005b4 <__udivmoddi4+0x29c>
 80003a6:	4464      	add	r4, ip
 80003a8:	3802      	subs	r0, #2
 80003aa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ae:	1be4      	subs	r4, r4, r7
 80003b0:	2600      	movs	r6, #0
 80003b2:	b11d      	cbz	r5, 80003bc <__udivmoddi4+0xa4>
 80003b4:	40d4      	lsrs	r4, r2
 80003b6:	2300      	movs	r3, #0
 80003b8:	e9c5 4300 	strd	r4, r3, [r5]
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d909      	bls.n	80003da <__udivmoddi4+0xc2>
 80003c6:	2d00      	cmp	r5, #0
 80003c8:	f000 80ef 	beq.w	80005aa <__udivmoddi4+0x292>
 80003cc:	2600      	movs	r6, #0
 80003ce:	e9c5 0100 	strd	r0, r1, [r5]
 80003d2:	4630      	mov	r0, r6
 80003d4:	4631      	mov	r1, r6
 80003d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003da:	fab3 f683 	clz	r6, r3
 80003de:	2e00      	cmp	r6, #0
 80003e0:	d14a      	bne.n	8000478 <__udivmoddi4+0x160>
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xd4>
 80003e6:	4282      	cmp	r2, r0
 80003e8:	f200 80f9 	bhi.w	80005de <__udivmoddi4+0x2c6>
 80003ec:	1a84      	subs	r4, r0, r2
 80003ee:	eb61 0303 	sbc.w	r3, r1, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	469e      	mov	lr, r3
 80003f6:	2d00      	cmp	r5, #0
 80003f8:	d0e0      	beq.n	80003bc <__udivmoddi4+0xa4>
 80003fa:	e9c5 4e00 	strd	r4, lr, [r5]
 80003fe:	e7dd      	b.n	80003bc <__udivmoddi4+0xa4>
 8000400:	b902      	cbnz	r2, 8000404 <__udivmoddi4+0xec>
 8000402:	deff      	udf	#255	; 0xff
 8000404:	fab2 f282 	clz	r2, r2
 8000408:	2a00      	cmp	r2, #0
 800040a:	f040 8092 	bne.w	8000532 <__udivmoddi4+0x21a>
 800040e:	eba1 010c 	sub.w	r1, r1, ip
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2601      	movs	r6, #1
 800041c:	0c20      	lsrs	r0, r4, #16
 800041e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000422:	fb07 1113 	mls	r1, r7, r3, r1
 8000426:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800042a:	fb0e f003 	mul.w	r0, lr, r3
 800042e:	4288      	cmp	r0, r1
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x12c>
 8000432:	eb1c 0101 	adds.w	r1, ip, r1
 8000436:	f103 38ff 	add.w	r8, r3, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x12a>
 800043c:	4288      	cmp	r0, r1
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2c0>
 8000442:	4643      	mov	r3, r8
 8000444:	1a09      	subs	r1, r1, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb1 f0f7 	udiv	r0, r1, r7
 800044c:	fb07 1110 	mls	r1, r7, r0, r1
 8000450:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x156>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 31ff 	add.w	r1, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x154>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2ca>
 800046c:	4608      	mov	r0, r1
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000476:	e79c      	b.n	80003b2 <__udivmoddi4+0x9a>
 8000478:	f1c6 0720 	rsb	r7, r6, #32
 800047c:	40b3      	lsls	r3, r6
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa20 f407 	lsr.w	r4, r0, r7
 800048a:	fa01 f306 	lsl.w	r3, r1, r6
 800048e:	431c      	orrs	r4, r3
 8000490:	40f9      	lsrs	r1, r7
 8000492:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000496:	fa00 f306 	lsl.w	r3, r0, r6
 800049a:	fbb1 f8f9 	udiv	r8, r1, r9
 800049e:	0c20      	lsrs	r0, r4, #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fb09 1118 	mls	r1, r9, r8, r1
 80004a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004ac:	fb08 f00e 	mul.w	r0, r8, lr
 80004b0:	4288      	cmp	r0, r1
 80004b2:	fa02 f206 	lsl.w	r2, r2, r6
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b8>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2bc>
 80004c4:	4288      	cmp	r0, r1
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2bc>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4461      	add	r1, ip
 80004d0:	1a09      	subs	r1, r1, r0
 80004d2:	b2a4      	uxth	r4, r4
 80004d4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d8:	fb09 1110 	mls	r1, r9, r0, r1
 80004dc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004e4:	458e      	cmp	lr, r1
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1e2>
 80004e8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ec:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2b4>
 80004f2:	458e      	cmp	lr, r1
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2b4>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4461      	add	r1, ip
 80004fa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004fe:	fba0 9402 	umull	r9, r4, r0, r2
 8000502:	eba1 010e 	sub.w	r1, r1, lr
 8000506:	42a1      	cmp	r1, r4
 8000508:	46c8      	mov	r8, r9
 800050a:	46a6      	mov	lr, r4
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x2a4>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x2a0>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x212>
 8000512:	ebb3 0208 	subs.w	r2, r3, r8
 8000516:	eb61 010e 	sbc.w	r1, r1, lr
 800051a:	fa01 f707 	lsl.w	r7, r1, r7
 800051e:	fa22 f306 	lsr.w	r3, r2, r6
 8000522:	40f1      	lsrs	r1, r6
 8000524:	431f      	orrs	r7, r3
 8000526:	e9c5 7100 	strd	r7, r1, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	40d8      	lsrs	r0, r3
 8000538:	fa0c fc02 	lsl.w	ip, ip, r2
 800053c:	fa21 f303 	lsr.w	r3, r1, r3
 8000540:	4091      	lsls	r1, r2
 8000542:	4301      	orrs	r1, r0
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000550:	fb07 3610 	mls	r6, r7, r0, r3
 8000554:	0c0b      	lsrs	r3, r1, #16
 8000556:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800055a:	fb00 f60e 	mul.w	r6, r0, lr
 800055e:	429e      	cmp	r6, r3
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x260>
 8000566:	eb1c 0303 	adds.w	r3, ip, r3
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b8>
 8000570:	429e      	cmp	r6, r3
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b8>
 8000574:	3802      	subs	r0, #2
 8000576:	4463      	add	r3, ip
 8000578:	1b9b      	subs	r3, r3, r6
 800057a:	b289      	uxth	r1, r1
 800057c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000580:	fb07 3316 	mls	r3, r7, r6, r3
 8000584:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000588:	fb06 f30e 	mul.w	r3, r6, lr
 800058c:	428b      	cmp	r3, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x28a>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f106 38ff 	add.w	r8, r6, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2b0>
 800059a:	428b      	cmp	r3, r1
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2b0>
 800059e:	3e02      	subs	r6, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	1ac9      	subs	r1, r1, r3
 80005a4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0x104>
 80005aa:	462e      	mov	r6, r5
 80005ac:	4628      	mov	r0, r5
 80005ae:	e705      	b.n	80003bc <__udivmoddi4+0xa4>
 80005b0:	4606      	mov	r6, r0
 80005b2:	e6e3      	b.n	800037c <__udivmoddi4+0x64>
 80005b4:	4618      	mov	r0, r3
 80005b6:	e6f8      	b.n	80003aa <__udivmoddi4+0x92>
 80005b8:	454b      	cmp	r3, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f8>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005c4:	3801      	subs	r0, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f8>
 80005c8:	4646      	mov	r6, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x28a>
 80005cc:	4620      	mov	r0, r4
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1e2>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x260>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b8>
 80005d8:	3b02      	subs	r3, #2
 80005da:	4461      	add	r1, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x12c>
 80005de:	4630      	mov	r0, r6
 80005e0:	e709      	b.n	80003f6 <__udivmoddi4+0xde>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x156>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <__LCD_Delay>:
/*
 * @brief Function to delay in microseconds
 * @param delay: value in microseconds to delay
 * @retval None
 */
void __LCD_Delay(uint16_t delay) {
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	80fb      	strh	r3, [r7, #6]

	__HAL_TIM_SET_COUNTER(&timer, 0);
 80005f6:	4b09      	ldr	r3, [pc, #36]	; (800061c <__LCD_Delay+0x30>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	2200      	movs	r2, #0
 80005fc:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < delay);
 80005fe:	bf00      	nop
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <__LCD_Delay+0x30>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000606:	88fb      	ldrh	r3, [r7, #6]
 8000608:	429a      	cmp	r2, r3
 800060a:	d3f9      	bcc.n	8000600 <__LCD_Delay+0x14>

}
 800060c:	bf00      	nop
 800060e:	bf00      	nop
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	240006ec 	.word	0x240006ec

08000620 <__LCD_Write4Bits>:
/*
 * @brief Function to write individual bits to the pins
 * @param value: value to write
 * @retval None
 */
void __LCD_Write4Bits(uint8_t value) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(DATA4_PORT, DATA4_PIN, (value >> 3) & 0x01);
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	08db      	lsrs	r3, r3, #3
 800062e:	b2db      	uxtb	r3, r3
 8000630:	f003 0301 	and.w	r3, r3, #1
 8000634:	b2db      	uxtb	r3, r3
 8000636:	461a      	mov	r2, r3
 8000638:	f44f 7180 	mov.w	r1, #256	; 0x100
 800063c:	481a      	ldr	r0, [pc, #104]	; (80006a8 <__LCD_Write4Bits+0x88>)
 800063e:	f005 fc1f 	bl	8005e80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DATA3_PORT, DATA3_PIN, (value >> 2) & 0x01);
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	089b      	lsrs	r3, r3, #2
 8000646:	b2db      	uxtb	r3, r3
 8000648:	f003 0301 	and.w	r3, r3, #1
 800064c:	b2db      	uxtb	r3, r3
 800064e:	461a      	mov	r2, r3
 8000650:	2102      	movs	r1, #2
 8000652:	4816      	ldr	r0, [pc, #88]	; (80006ac <__LCD_Write4Bits+0x8c>)
 8000654:	f005 fc14 	bl	8005e80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DATA2_PORT, DATA2_PIN, (value >> 1) & 0x01);
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	085b      	lsrs	r3, r3, #1
 800065c:	b2db      	uxtb	r3, r3
 800065e:	f003 0301 	and.w	r3, r3, #1
 8000662:	b2db      	uxtb	r3, r3
 8000664:	461a      	mov	r2, r3
 8000666:	2140      	movs	r1, #64	; 0x40
 8000668:	480f      	ldr	r0, [pc, #60]	; (80006a8 <__LCD_Write4Bits+0x88>)
 800066a:	f005 fc09 	bl	8005e80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DATA1_PORT, DATA1_PIN, value & 0x01);
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	f003 0301 	and.w	r3, r3, #1
 8000674:	b2db      	uxtb	r3, r3
 8000676:	461a      	mov	r2, r3
 8000678:	2108      	movs	r1, #8
 800067a:	480d      	ldr	r0, [pc, #52]	; (80006b0 <__LCD_Write4Bits+0x90>)
 800067c:	f005 fc00 	bl	8005e80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(E_PORT, E_PIN, 1);
 8000680:	2201      	movs	r2, #1
 8000682:	2140      	movs	r1, #64	; 0x40
 8000684:	480b      	ldr	r0, [pc, #44]	; (80006b4 <__LCD_Write4Bits+0x94>)
 8000686:	f005 fbfb 	bl	8005e80 <HAL_GPIO_WritePin>
	__LCD_Delay(120);
 800068a:	2078      	movs	r0, #120	; 0x78
 800068c:	f7ff ffae 	bl	80005ec <__LCD_Delay>
	HAL_GPIO_WritePin(E_PORT, E_PIN, 0);
 8000690:	2200      	movs	r2, #0
 8000692:	2140      	movs	r1, #64	; 0x40
 8000694:	4807      	ldr	r0, [pc, #28]	; (80006b4 <__LCD_Write4Bits+0x94>)
 8000696:	f005 fbf3 	bl	8005e80 <HAL_GPIO_WritePin>
	__LCD_Delay(120);
 800069a:	2078      	movs	r0, #120	; 0x78
 800069c:	f7ff ffa6 	bl	80005ec <__LCD_Delay>

}
 80006a0:	bf00      	nop
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	58020000 	.word	0x58020000
 80006ac:	58022800 	.word	0x58022800
 80006b0:	58021800 	.word	0x58021800
 80006b4:	58020400 	.word	0x58020400

080006b8 <__LCD_Send>:
 * @brief Function to send data to the LCD and enable RS pin
 * @param value: value to send
 * @param state: state to set RS (register select) pin [0, 1]
 * @retval None
 */
void __LCD_Send(uint8_t value, int state) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	6039      	str	r1, [r7, #0]
 80006c2:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(RS_PORT, RS_PIN, state);
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	461a      	mov	r2, r3
 80006ca:	2180      	movs	r1, #128	; 0x80
 80006cc:	4808      	ldr	r0, [pc, #32]	; (80006f0 <__LCD_Send+0x38>)
 80006ce:	f005 fbd7 	bl	8005e80 <HAL_GPIO_WritePin>
	__LCD_Write4Bits(value >> 4);
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	091b      	lsrs	r3, r3, #4
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	4618      	mov	r0, r3
 80006da:	f7ff ffa1 	bl	8000620 <__LCD_Write4Bits>
	__LCD_Write4Bits(value);
 80006de:	79fb      	ldrb	r3, [r7, #7]
 80006e0:	4618      	mov	r0, r3
 80006e2:	f7ff ff9d 	bl	8000620 <__LCD_Write4Bits>

}
 80006e6:	bf00      	nop
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	58020400 	.word	0x58020400

080006f4 <__LCD_Cmd>:
/*
 * @brief Function to send command to the LCD
 * @param value: command to send
 * @retval None
 */
void __LCD_Cmd(uint8_t value) {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	71fb      	strb	r3, [r7, #7]

	__LCD_Send(value, 0);
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f7ff ffd8 	bl	80006b8 <__LCD_Send>

}
 8000708:	bf00      	nop
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <__LCD_Data>:
/*
 * @brief Function to send data to the LCD
 * @param value: value to send
 * @retval None
 */
void __LCD_Data(uint8_t value) {
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	71fb      	strb	r3, [r7, #7]

	__LCD_Send(value, 1);
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	2101      	movs	r1, #1
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff ffca 	bl	80006b8 <__LCD_Send>

}
 8000724:	bf00      	nop
 8000726:	3708      	adds	r7, #8
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}

0800072c <LCD_Write>:
/*
 * @brief Function to write to the LCD
 * @param value: value to write to the LCD
 * @retval None
 */
void LCD_Write(char *value) {
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]

	while (*value) {
 8000734:	e00a      	b.n	800074c <LCD_Write+0x20>
		__LCD_Data(*value++);
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	1c5a      	adds	r2, r3, #1
 800073a:	607a      	str	r2, [r7, #4]
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	4618      	mov	r0, r3
 8000740:	f7ff ffe6 	bl	8000710 <__LCD_Data>
		__LCD_Delay(5000);
 8000744:	f241 3088 	movw	r0, #5000	; 0x1388
 8000748:	f7ff ff50 	bl	80005ec <__LCD_Delay>
	while (*value) {
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d1f0      	bne.n	8000736 <LCD_Write+0xa>
		// HAL_Delay(1000);
	}

}
 8000754:	bf00      	nop
 8000756:	bf00      	nop
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}

0800075e <LCD_Pos_Cursor>:
 * @brief Function to set the cursor position
 * @param row: row to set the cursor [0, 1]
 * @param col: column to set the cursor [0, 15]
 * @retval None
 */
void LCD_Pos_Cursor(uint8_t row, uint8_t col) {
 800075e:	b580      	push	{r7, lr}
 8000760:	b082      	sub	sp, #8
 8000762:	af00      	add	r7, sp, #0
 8000764:	4603      	mov	r3, r0
 8000766:	460a      	mov	r2, r1
 8000768:	71fb      	strb	r3, [r7, #7]
 800076a:	4613      	mov	r3, r2
 800076c:	71bb      	strb	r3, [r7, #6]

	switch (row) {
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d002      	beq.n	800077a <LCD_Pos_Cursor+0x1c>
 8000774:	2b01      	cmp	r3, #1
 8000776:	d005      	beq.n	8000784 <LCD_Pos_Cursor+0x26>
 8000778:	e009      	b.n	800078e <LCD_Pos_Cursor+0x30>
		case 0:
			col |= 0x80;
 800077a:	79bb      	ldrb	r3, [r7, #6]
 800077c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000780:	71bb      	strb	r3, [r7, #6]
	        break;
 8000782:	e009      	b.n	8000798 <LCD_Pos_Cursor+0x3a>
	    case 1:
	        col |= 0xC0;
 8000784:	79bb      	ldrb	r3, [r7, #6]
 8000786:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800078a:	71bb      	strb	r3, [r7, #6]
	        break;
 800078c:	e004      	b.n	8000798 <LCD_Pos_Cursor+0x3a>
	    default:
	    	row = 0;
 800078e:	2300      	movs	r3, #0
 8000790:	71fb      	strb	r3, [r7, #7]
	    	col = 0;
 8000792:	2300      	movs	r3, #0
 8000794:	71bb      	strb	r3, [r7, #6]
	    	break;
 8000796:	bf00      	nop
	}
	__LCD_Cmd(col);
 8000798:	79bb      	ldrb	r3, [r7, #6]
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff ffaa 	bl	80006f4 <__LCD_Cmd>

}
 80007a0:	bf00      	nop
 80007a2:	3708      	adds	r7, #8
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <LCD_Clear>:
/*
 * @brief Function to clear the display
 * @param None
 * @retval None
 */
void LCD_Clear(void) {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0

	__LCD_Cmd(CLEAR);
 80007ac:	2001      	movs	r0, #1
 80007ae:	f7ff ffa1 	bl	80006f4 <__LCD_Cmd>

}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <LCD_Scroll_Display_Right>:
/*
 * @brief Function to scroll the display right
 * @param None
 * @retval None
 */
void LCD_Scroll_Display_Right(void) {
 80007b6:	b580      	push	{r7, lr}
 80007b8:	af00      	add	r7, sp, #0

	__LCD_Cmd(SCROLL_DISPLAY_RIGHT);
 80007ba:	201c      	movs	r0, #28
 80007bc:	f7ff ff9a 	bl	80006f4 <__LCD_Cmd>

}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <LCD_Scroll_Display_Left>:
/*
 * @brief Function to scroll the display left
 * @param None
 * @retval None
 */
void LCD_Scroll_Display_Left(void) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0

	__LCD_Cmd(SCROLL_DISPLAY_LEFT);
 80007c8:	2018      	movs	r0, #24
 80007ca:	f7ff ff93 	bl	80006f4 <__LCD_Cmd>

}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <LCD_Init>:
 * @brief Function to initialize the LCD
 * @param cursor: true/false to enable cursor
 * @param blinking: true/false to enable blinking
 * @retval None
 */
void LCD_Init(bool cursor, bool blinking) {
 80007d2:	b580      	push	{r7, lr}
 80007d4:	b082      	sub	sp, #8
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	4603      	mov	r3, r0
 80007da:	460a      	mov	r2, r1
 80007dc:	71fb      	strb	r3, [r7, #7]
 80007de:	4613      	mov	r3, r2
 80007e0:	71bb      	strb	r3, [r7, #6]

	// Init
	__LCD_Delay(50000);
 80007e2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80007e6:	f7ff ff01 	bl	80005ec <__LCD_Delay>
	__LCD_Cmd(0x30);
 80007ea:	2030      	movs	r0, #48	; 0x30
 80007ec:	f7ff ff82 	bl	80006f4 <__LCD_Cmd>
	__LCD_Delay(4500);
 80007f0:	f241 1094 	movw	r0, #4500	; 0x1194
 80007f4:	f7ff fefa 	bl	80005ec <__LCD_Delay>
	__LCD_Cmd(0x30);
 80007f8:	2030      	movs	r0, #48	; 0x30
 80007fa:	f7ff ff7b 	bl	80006f4 <__LCD_Cmd>
	__LCD_Delay(150);
 80007fe:	2096      	movs	r0, #150	; 0x96
 8000800:	f7ff fef4 	bl	80005ec <__LCD_Delay>
	__LCD_Cmd(0x30);
 8000804:	2030      	movs	r0, #48	; 0x30
 8000806:	f7ff ff75 	bl	80006f4 <__LCD_Cmd>

	// Go to 4 bit mode
	__LCD_Delay(10);
 800080a:	200a      	movs	r0, #10
 800080c:	f7ff feee 	bl	80005ec <__LCD_Delay>
	__LCD_Cmd(0x20);
 8000810:	2020      	movs	r0, #32
 8000812:	f7ff ff6f 	bl	80006f4 <__LCD_Cmd>
	__LCD_Delay(50);
 8000816:	2032      	movs	r0, #50	; 0x32
 8000818:	f7ff fee8 	bl	80005ec <__LCD_Delay>

	// Set display lines and font
	__LCD_Cmd(0x28);
 800081c:	2028      	movs	r0, #40	; 0x28
 800081e:	f7ff ff69 	bl	80006f4 <__LCD_Cmd>
	__LCD_Delay(50);
 8000822:	2032      	movs	r0, #50	; 0x32
 8000824:	f7ff fee2 	bl	80005ec <__LCD_Delay>

	// Display on/off
	__LCD_Cmd(0x08);
 8000828:	2008      	movs	r0, #8
 800082a:	f7ff ff63 	bl	80006f4 <__LCD_Cmd>
	__LCD_Delay(50);
 800082e:	2032      	movs	r0, #50	; 0x32
 8000830:	f7ff fedc 	bl	80005ec <__LCD_Delay>

	// Display clear
	__LCD_Cmd(0x01);
 8000834:	2001      	movs	r0, #1
 8000836:	f7ff ff5d 	bl	80006f4 <__LCD_Cmd>
	__LCD_Delay(1500);
 800083a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800083e:	f7ff fed5 	bl	80005ec <__LCD_Delay>

	// Entry mode set
	__LCD_Cmd(0x06);
 8000842:	2006      	movs	r0, #6
 8000844:	f7ff ff56 	bl	80006f4 <__LCD_Cmd>
	__LCD_Delay(50);
 8000848:	2032      	movs	r0, #50	; 0x32
 800084a:	f7ff fecf 	bl	80005ec <__LCD_Delay>

	// Display on/off
	if (cursor && blinking) {
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d006      	beq.n	8000862 <LCD_Init+0x90>
 8000854:	79bb      	ldrb	r3, [r7, #6]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d003      	beq.n	8000862 <LCD_Init+0x90>
		__LCD_Cmd(CURSOR_BLINK);
 800085a:	200f      	movs	r0, #15
 800085c:	f7ff ff4a 	bl	80006f4 <__LCD_Cmd>
 8000860:	e010      	b.n	8000884 <LCD_Init+0xb2>
	} else if (cursor) {
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d003      	beq.n	8000870 <LCD_Init+0x9e>
		__LCD_Cmd(CURSOR);
 8000868:	200e      	movs	r0, #14
 800086a:	f7ff ff43 	bl	80006f4 <__LCD_Cmd>
 800086e:	e009      	b.n	8000884 <LCD_Init+0xb2>
	} else if (blinking) {
 8000870:	79bb      	ldrb	r3, [r7, #6]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d003      	beq.n	800087e <LCD_Init+0xac>
		__LCD_Cmd(BLINK);
 8000876:	200d      	movs	r0, #13
 8000878:	f7ff ff3c 	bl	80006f4 <__LCD_Cmd>
 800087c:	e002      	b.n	8000884 <LCD_Init+0xb2>
	} else {
		__LCD_Cmd(NO_BLINK_NO_CURSOR);
 800087e:	200c      	movs	r0, #12
 8000880:	f7ff ff38 	bl	80006f4 <__LCD_Cmd>
	}

	__LCD_Delay(50000);
 8000884:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000888:	f7ff feb0 	bl	80005ec <__LCD_Delay>
	LCD_Pos_Cursor(0, 0);
 800088c:	2100      	movs	r1, #0
 800088e:	2000      	movs	r0, #0
 8000890:	f7ff ff65 	bl	800075e <LCD_Pos_Cursor>

}
 8000894:	bf00      	nop
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}

0800089c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008a2:	f002 f9c7 	bl	8002c34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008a6:	f000 f891 	bl	80009cc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80008aa:	f000 f911 	bl	8000ad0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008ae:	f000 fe99 	bl	80015e4 <MX_GPIO_Init>
  MX_ADC1_Init();
 80008b2:	f000 f93d 	bl	8000b30 <MX_ADC1_Init>
  MX_ADC2_Init();
 80008b6:	f000 f9b1 	bl	8000c1c <MX_ADC2_Init>
  MX_ADC3_Init();
 80008ba:	f000 fa13 	bl	8000ce4 <MX_ADC3_Init>
  MX_ETH_Init();
 80008be:	f000 fa73 	bl	8000da8 <MX_ETH_Init>
  MX_FDCAN1_Init();
 80008c2:	f000 fabd 	bl	8000e40 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 80008c6:	f000 fb1f 	bl	8000f08 <MX_FDCAN2_Init>
  MX_FMC_Init();
 80008ca:	f000 fe3d 	bl	8001548 <MX_FMC_Init>
  MX_LTDC_Init();
 80008ce:	f000 fb7f 	bl	8000fd0 <MX_LTDC_Init>
  MX_RTC_Init();
 80008d2:	f000 fc2f 	bl	8001134 <MX_RTC_Init>
  MX_SAI2_Init();
 80008d6:	f000 fc55 	bl	8001184 <MX_SAI2_Init>
  MX_SPI2_Init();
 80008da:	f000 fd11 	bl	8001300 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 80008de:	f000 fdb5 	bl	800144c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80008e2:	f000 fdff 	bl	80014e4 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 80008e6:	f000 fd5f 	bl	80013a8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  STATE state = SETUP;
 80008ea:	2300      	movs	r3, #0
 80008ec:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  switch (state) {
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	2b06      	cmp	r3, #6
 80008f2:	d857      	bhi.n	80009a4 <main+0x108>
 80008f4:	a201      	add	r2, pc, #4	; (adr r2, 80008fc <main+0x60>)
 80008f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008fa:	bf00      	nop
 80008fc:	08000919 	.word	0x08000919
 8000900:	08000927 	.word	0x08000927
 8000904:	08000937 	.word	0x08000937
 8000908:	08000949 	.word	0x08000949
 800090c:	08000999 	.word	0x08000999
 8000910:	0800099f 	.word	0x0800099f
 8000914:	080009ab 	.word	0x080009ab
	  	  case SETUP:
	  		  LCD_Init(true, true);
 8000918:	2101      	movs	r1, #1
 800091a:	2001      	movs	r0, #1
 800091c:	f7ff ff59 	bl	80007d2 <LCD_Init>
	  		  state = SHOW_MENU;
 8000920:	2301      	movs	r3, #1
 8000922:	71fb      	strb	r3, [r7, #7]
	  		  break;
 8000924:	e048      	b.n	80009b8 <main+0x11c>
	  	  case SHOW_MENU:
	  		  if (printWelcomeText()) {
 8000926:	f001 f871 	bl	8001a0c <printWelcomeText>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d03e      	beq.n	80009ae <main+0x112>
	  			  state = GET_OPTION;
 8000930:	2302      	movs	r3, #2
 8000932:	71fb      	strb	r3, [r7, #7]
	  		  }
	  		  break;
 8000934:	e03b      	b.n	80009ae <main+0x112>
	  	  case GET_OPTION:
	  		  if (receiveValue(1)) {
 8000936:	2001      	movs	r0, #1
 8000938:	f001 f896 	bl	8001a68 <receiveValue>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d037      	beq.n	80009b2 <main+0x116>
	  			  state = SELECT_PROGRAM;
 8000942:	2303      	movs	r3, #3
 8000944:	71fb      	strb	r3, [r7, #7]
	  		  }
	  		  break;
 8000946:	e034      	b.n	80009b2 <main+0x116>
	  	  case SELECT_PROGRAM:
	  		  if (haveReceived) {
 8000948:	4b1e      	ldr	r3, [pc, #120]	; (80009c4 <main+0x128>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d032      	beq.n	80009b6 <main+0x11a>
	  			switch (rxBuffer[0]) {
 8000950:	4b1d      	ldr	r3, [pc, #116]	; (80009c8 <main+0x12c>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	2b33      	cmp	r3, #51	; 0x33
 8000956:	d012      	beq.n	800097e <main+0xe2>
 8000958:	2b33      	cmp	r3, #51	; 0x33
 800095a:	dc13      	bgt.n	8000984 <main+0xe8>
 800095c:	2b31      	cmp	r3, #49	; 0x31
 800095e:	d002      	beq.n	8000966 <main+0xca>
 8000960:	2b32      	cmp	r3, #50	; 0x32
 8000962:	d003      	beq.n	800096c <main+0xd0>
	  				  	break;
	  				case '3':
	  				  	state = CLOCK_F;
	  				  	break;
	  				default:
	  				  	break;
 8000964:	e00e      	b.n	8000984 <main+0xe8>
	  					state = TEXT_TO_LCD;
 8000966:	2304      	movs	r3, #4
 8000968:	71fb      	strb	r3, [r7, #7]
	  				  	break;
 800096a:	e00e      	b.n	800098a <main+0xee>
	  					if (receiveValue(4)) {
 800096c:	2004      	movs	r0, #4
 800096e:	f001 f87b 	bl	8001a68 <receiveValue>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d007      	beq.n	8000988 <main+0xec>
	  						state = MOVE_TEXT;
 8000978:	2305      	movs	r3, #5
 800097a:	71fb      	strb	r3, [r7, #7]
	  				  	break;
 800097c:	e004      	b.n	8000988 <main+0xec>
	  				  	state = CLOCK_F;
 800097e:	2306      	movs	r3, #6
 8000980:	71fb      	strb	r3, [r7, #7]
	  				  	break;
 8000982:	e002      	b.n	800098a <main+0xee>
	  				  	break;
 8000984:	bf00      	nop
 8000986:	e000      	b.n	800098a <main+0xee>
	  				  	break;
 8000988:	bf00      	nop
	  			}
	  			if (state != SELECT_PROGRAM) {
 800098a:	79fb      	ldrb	r3, [r7, #7]
 800098c:	2b03      	cmp	r3, #3
 800098e:	d012      	beq.n	80009b6 <main+0x11a>
	  				haveReceived = false;
 8000990:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <main+0x128>)
 8000992:	2200      	movs	r2, #0
 8000994:	701a      	strb	r2, [r3, #0]
	  			}
	  		  }
	  		  break;
 8000996:	e00e      	b.n	80009b6 <main+0x11a>
	  	  case TEXT_TO_LCD:
	  		  typeToLCD();
 8000998:	f001 f880 	bl	8001a9c <typeToLCD>
	  		  break;
 800099c:	e00c      	b.n	80009b8 <main+0x11c>
	  	  case MOVE_TEXT:
	  		  moveTextLCD();
 800099e:	f001 f88f 	bl	8001ac0 <moveTextLCD>
	  		  break;
 80009a2:	e009      	b.n	80009b8 <main+0x11c>
	  	  case CLOCK_F:
	  		  break;
	  	  default:
	  		  return -1;
 80009a4:	f04f 33ff 	mov.w	r3, #4294967295
 80009a8:	e007      	b.n	80009ba <main+0x11e>
	  		  break;
 80009aa:	bf00      	nop
 80009ac:	e79f      	b.n	80008ee <main+0x52>
	  		  break;
 80009ae:	bf00      	nop
 80009b0:	e79d      	b.n	80008ee <main+0x52>
	  		  break;
 80009b2:	bf00      	nop
 80009b4:	e79b      	b.n	80008ee <main+0x52>
	  		  break;
 80009b6:	bf00      	nop
	  switch (state) {
 80009b8:	e799      	b.n	80008ee <main+0x52>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	24000d0c 	.word	0x24000d0c
 80009c8:	24000d10 	.word	0x24000d10

080009cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b09c      	sub	sp, #112	; 0x70
 80009d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d6:	224c      	movs	r2, #76	; 0x4c
 80009d8:	2100      	movs	r1, #0
 80009da:	4618      	mov	r0, r3
 80009dc:	f00d fcae 	bl	800e33c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e0:	1d3b      	adds	r3, r7, #4
 80009e2:	2220      	movs	r2, #32
 80009e4:	2100      	movs	r1, #0
 80009e6:	4618      	mov	r0, r3
 80009e8:	f00d fca8 	bl	800e33c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80009ec:	2002      	movs	r0, #2
 80009ee:	f005 fe51 	bl	8006694 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80009f2:	2300      	movs	r3, #0
 80009f4:	603b      	str	r3, [r7, #0]
 80009f6:	4b34      	ldr	r3, [pc, #208]	; (8000ac8 <SystemClock_Config+0xfc>)
 80009f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009fa:	4a33      	ldr	r2, [pc, #204]	; (8000ac8 <SystemClock_Config+0xfc>)
 80009fc:	f023 0301 	bic.w	r3, r3, #1
 8000a00:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000a02:	4b31      	ldr	r3, [pc, #196]	; (8000ac8 <SystemClock_Config+0xfc>)
 8000a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a06:	f003 0301 	and.w	r3, r3, #1
 8000a0a:	603b      	str	r3, [r7, #0]
 8000a0c:	4b2f      	ldr	r3, [pc, #188]	; (8000acc <SystemClock_Config+0x100>)
 8000a0e:	699b      	ldr	r3, [r3, #24]
 8000a10:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a14:	4a2d      	ldr	r2, [pc, #180]	; (8000acc <SystemClock_Config+0x100>)
 8000a16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a1a:	6193      	str	r3, [r2, #24]
 8000a1c:	4b2b      	ldr	r3, [pc, #172]	; (8000acc <SystemClock_Config+0x100>)
 8000a1e:	699b      	ldr	r3, [r3, #24]
 8000a20:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a24:	603b      	str	r3, [r7, #0]
 8000a26:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a28:	bf00      	nop
 8000a2a:	4b28      	ldr	r3, [pc, #160]	; (8000acc <SystemClock_Config+0x100>)
 8000a2c:	699b      	ldr	r3, [r3, #24]
 8000a2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a36:	d1f8      	bne.n	8000a2a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000a38:	230b      	movs	r3, #11
 8000a3a:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a3c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a40:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000a42:	2301      	movs	r3, #1
 8000a44:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a46:	2340      	movs	r3, #64	; 0x40
 8000a48:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a52:	2302      	movs	r3, #2
 8000a54:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 22;
 8000a56:	2316      	movs	r3, #22
 8000a58:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 169;
 8000a5a:	23a9      	movs	r3, #169	; 0xa9
 8000a5c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a62:	2304      	movs	r3, #4
 8000a64:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a66:	2302      	movs	r3, #2
 8000a68:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a72:	2300      	movs	r3, #0
 8000a74:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f005 fe54 	bl	8006728 <HAL_RCC_OscConfig>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000a86:	f001 f869 	bl	8001b5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a8a:	233f      	movs	r3, #63	; 0x3f
 8000a8c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a92:	2300      	movs	r3, #0
 8000a94:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a96:	2300      	movs	r3, #0
 8000a98:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000aaa:	1d3b      	adds	r3, r7, #4
 8000aac:	2101      	movs	r1, #1
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f006 fa94 	bl	8006fdc <HAL_RCC_ClockConfig>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000aba:	f001 f84f 	bl	8001b5c <Error_Handler>
  }
}
 8000abe:	bf00      	nop
 8000ac0:	3770      	adds	r7, #112	; 0x70
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	58000400 	.word	0x58000400
 8000acc:	58024800 	.word	0x58024800

08000ad0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b0b0      	sub	sp, #192	; 0xc0
 8000ad4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ad6:	463b      	mov	r3, r7
 8000ad8:	22c0      	movs	r2, #192	; 0xc0
 8000ada:	2100      	movs	r1, #0
 8000adc:	4618      	mov	r0, r3
 8000ade:	f00d fc2d 	bl	800e33c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000ae2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000ae6:	f04f 0300 	mov.w	r3, #0
 8000aea:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000aee:	2302      	movs	r3, #2
 8000af0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000af2:	230c      	movs	r3, #12
 8000af4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 8000af6:	2305      	movs	r3, #5
 8000af8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000afa:	2302      	movs	r3, #2
 8000afc:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000afe:	2302      	movs	r3, #2
 8000b00:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000b02:	23c0      	movs	r3, #192	; 0xc0
 8000b04:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000b06:	2320      	movs	r3, #32
 8000b08:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b14:	463b      	mov	r3, r7
 8000b16:	4618      	mov	r0, r3
 8000b18:	f006 fdec 	bl	80076f4 <HAL_RCCEx_PeriphCLKConfig>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000b22:	f001 f81b 	bl	8001b5c <Error_Handler>
  }
}
 8000b26:	bf00      	nop
 8000b28:	37c0      	adds	r7, #192	; 0xc0
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
	...

08000b30 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08a      	sub	sp, #40	; 0x28
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000b36:	f107 031c 	add.w	r3, r7, #28
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	605a      	str	r2, [r3, #4]
 8000b40:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b42:	463b      	mov	r3, r7
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]
 8000b50:	615a      	str	r2, [r3, #20]
 8000b52:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b54:	4b2f      	ldr	r3, [pc, #188]	; (8000c14 <MX_ADC1_Init+0xe4>)
 8000b56:	4a30      	ldr	r2, [pc, #192]	; (8000c18 <MX_ADC1_Init+0xe8>)
 8000b58:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b5a:	4b2e      	ldr	r3, [pc, #184]	; (8000c14 <MX_ADC1_Init+0xe4>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000b60:	4b2c      	ldr	r3, [pc, #176]	; (8000c14 <MX_ADC1_Init+0xe4>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b66:	4b2b      	ldr	r3, [pc, #172]	; (8000c14 <MX_ADC1_Init+0xe4>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b6c:	4b29      	ldr	r3, [pc, #164]	; (8000c14 <MX_ADC1_Init+0xe4>)
 8000b6e:	2204      	movs	r2, #4
 8000b70:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000b72:	4b28      	ldr	r3, [pc, #160]	; (8000c14 <MX_ADC1_Init+0xe4>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b78:	4b26      	ldr	r3, [pc, #152]	; (8000c14 <MX_ADC1_Init+0xe4>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000b7e:	4b25      	ldr	r3, [pc, #148]	; (8000c14 <MX_ADC1_Init+0xe4>)
 8000b80:	2201      	movs	r2, #1
 8000b82:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b84:	4b23      	ldr	r3, [pc, #140]	; (8000c14 <MX_ADC1_Init+0xe4>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b8a:	4b22      	ldr	r3, [pc, #136]	; (8000c14 <MX_ADC1_Init+0xe4>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b90:	4b20      	ldr	r3, [pc, #128]	; (8000c14 <MX_ADC1_Init+0xe4>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000b96:	4b1f      	ldr	r3, [pc, #124]	; (8000c14 <MX_ADC1_Init+0xe4>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b9c:	4b1d      	ldr	r3, [pc, #116]	; (8000c14 <MX_ADC1_Init+0xe4>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ba2:	4b1c      	ldr	r3, [pc, #112]	; (8000c14 <MX_ADC1_Init+0xe4>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000ba8:	4b1a      	ldr	r3, [pc, #104]	; (8000c14 <MX_ADC1_Init+0xe4>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bb0:	4818      	ldr	r0, [pc, #96]	; (8000c14 <MX_ADC1_Init+0xe4>)
 8000bb2:	f002 fab7 	bl	8003124 <HAL_ADC_Init>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000bbc:	f000 ffce 	bl	8001b5c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000bc4:	f107 031c 	add.w	r3, r7, #28
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4812      	ldr	r0, [pc, #72]	; (8000c14 <MX_ADC1_Init+0xe4>)
 8000bcc:	f003 f8ce 	bl	8003d6c <HAL_ADCEx_MultiModeConfigChannel>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000bd6:	f000 ffc1 	bl	8001b5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bde:	2306      	movs	r3, #6
 8000be0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000be2:	2300      	movs	r3, #0
 8000be4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000be6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000bea:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000bec:	2304      	movs	r3, #4
 8000bee:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bf8:	463b      	mov	r3, r7
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4805      	ldr	r0, [pc, #20]	; (8000c14 <MX_ADC1_Init+0xe4>)
 8000bfe:	f002 fc33 	bl	8003468 <HAL_ADC_ConfigChannel>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000c08:	f000 ffa8 	bl	8001b5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c0c:	bf00      	nop
 8000c0e:	3728      	adds	r7, #40	; 0x28
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	2400014c 	.word	0x2400014c
 8000c18:	40022000 	.word	0x40022000

08000c1c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b088      	sub	sp, #32
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c22:	1d3b      	adds	r3, r7, #4
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]
 8000c30:	615a      	str	r2, [r3, #20]
 8000c32:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000c34:	4b29      	ldr	r3, [pc, #164]	; (8000cdc <MX_ADC2_Init+0xc0>)
 8000c36:	4a2a      	ldr	r2, [pc, #168]	; (8000ce0 <MX_ADC2_Init+0xc4>)
 8000c38:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c3a:	4b28      	ldr	r3, [pc, #160]	; (8000cdc <MX_ADC2_Init+0xc0>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000c40:	4b26      	ldr	r3, [pc, #152]	; (8000cdc <MX_ADC2_Init+0xc0>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c46:	4b25      	ldr	r3, [pc, #148]	; (8000cdc <MX_ADC2_Init+0xc0>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c4c:	4b23      	ldr	r3, [pc, #140]	; (8000cdc <MX_ADC2_Init+0xc0>)
 8000c4e:	2204      	movs	r2, #4
 8000c50:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000c52:	4b22      	ldr	r3, [pc, #136]	; (8000cdc <MX_ADC2_Init+0xc0>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000c58:	4b20      	ldr	r3, [pc, #128]	; (8000cdc <MX_ADC2_Init+0xc0>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000c5e:	4b1f      	ldr	r3, [pc, #124]	; (8000cdc <MX_ADC2_Init+0xc0>)
 8000c60:	2201      	movs	r2, #1
 8000c62:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000c64:	4b1d      	ldr	r3, [pc, #116]	; (8000cdc <MX_ADC2_Init+0xc0>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c6a:	4b1c      	ldr	r3, [pc, #112]	; (8000cdc <MX_ADC2_Init+0xc0>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c70:	4b1a      	ldr	r3, [pc, #104]	; (8000cdc <MX_ADC2_Init+0xc0>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000c76:	4b19      	ldr	r3, [pc, #100]	; (8000cdc <MX_ADC2_Init+0xc0>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c7c:	4b17      	ldr	r3, [pc, #92]	; (8000cdc <MX_ADC2_Init+0xc0>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000c82:	4b16      	ldr	r3, [pc, #88]	; (8000cdc <MX_ADC2_Init+0xc0>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000c88:	4b14      	ldr	r3, [pc, #80]	; (8000cdc <MX_ADC2_Init+0xc0>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000c90:	4812      	ldr	r0, [pc, #72]	; (8000cdc <MX_ADC2_Init+0xc0>)
 8000c92:	f002 fa47 	bl	8003124 <HAL_ADC_Init>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8000c9c:	f000 ff5e 	bl	8001b5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ca4:	2306      	movs	r3, #6
 8000ca6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000cac:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000cb0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000cb2:	2304      	movs	r3, #4
 8000cb4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000cbe:	1d3b      	adds	r3, r7, #4
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4806      	ldr	r0, [pc, #24]	; (8000cdc <MX_ADC2_Init+0xc0>)
 8000cc4:	f002 fbd0 	bl	8003468 <HAL_ADC_ConfigChannel>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000cce:	f000 ff45 	bl	8001b5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000cd2:	bf00      	nop
 8000cd4:	3720      	adds	r7, #32
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	240001b0 	.word	0x240001b0
 8000ce0:	40022100 	.word	0x40022100

08000ce4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b088      	sub	sp, #32
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cea:	1d3b      	adds	r3, r7, #4
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]
 8000cf8:	615a      	str	r2, [r3, #20]
 8000cfa:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000cfc:	4b27      	ldr	r3, [pc, #156]	; (8000d9c <MX_ADC3_Init+0xb8>)
 8000cfe:	4a28      	ldr	r2, [pc, #160]	; (8000da0 <MX_ADC3_Init+0xbc>)
 8000d00:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000d02:	4b26      	ldr	r3, [pc, #152]	; (8000d9c <MX_ADC3_Init+0xb8>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d08:	4b24      	ldr	r3, [pc, #144]	; (8000d9c <MX_ADC3_Init+0xb8>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d0e:	4b23      	ldr	r3, [pc, #140]	; (8000d9c <MX_ADC3_Init+0xb8>)
 8000d10:	2204      	movs	r2, #4
 8000d12:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000d14:	4b21      	ldr	r3, [pc, #132]	; (8000d9c <MX_ADC3_Init+0xb8>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000d1a:	4b20      	ldr	r3, [pc, #128]	; (8000d9c <MX_ADC3_Init+0xb8>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000d20:	4b1e      	ldr	r3, [pc, #120]	; (8000d9c <MX_ADC3_Init+0xb8>)
 8000d22:	2201      	movs	r2, #1
 8000d24:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000d26:	4b1d      	ldr	r3, [pc, #116]	; (8000d9c <MX_ADC3_Init+0xb8>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d2c:	4b1b      	ldr	r3, [pc, #108]	; (8000d9c <MX_ADC3_Init+0xb8>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d32:	4b1a      	ldr	r3, [pc, #104]	; (8000d9c <MX_ADC3_Init+0xb8>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000d38:	4b18      	ldr	r3, [pc, #96]	; (8000d9c <MX_ADC3_Init+0xb8>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d3e:	4b17      	ldr	r3, [pc, #92]	; (8000d9c <MX_ADC3_Init+0xb8>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000d44:	4b15      	ldr	r3, [pc, #84]	; (8000d9c <MX_ADC3_Init+0xb8>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000d4a:	4b14      	ldr	r3, [pc, #80]	; (8000d9c <MX_ADC3_Init+0xb8>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000d52:	4812      	ldr	r0, [pc, #72]	; (8000d9c <MX_ADC3_Init+0xb8>)
 8000d54:	f002 f9e6 	bl	8003124 <HAL_ADC_Init>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_ADC3_Init+0x7e>
  {
    Error_Handler();
 8000d5e:	f000 fefd 	bl	8001b5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000d62:	4b10      	ldr	r3, [pc, #64]	; (8000da4 <MX_ADC3_Init+0xc0>)
 8000d64:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d66:	2306      	movs	r3, #6
 8000d68:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d6e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000d72:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d74:	2304      	movs	r3, #4
 8000d76:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000d80:	1d3b      	adds	r3, r7, #4
 8000d82:	4619      	mov	r1, r3
 8000d84:	4805      	ldr	r0, [pc, #20]	; (8000d9c <MX_ADC3_Init+0xb8>)
 8000d86:	f002 fb6f 	bl	8003468 <HAL_ADC_ConfigChannel>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8000d90:	f000 fee4 	bl	8001b5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000d94:	bf00      	nop
 8000d96:	3720      	adds	r7, #32
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	24000214 	.word	0x24000214
 8000da0:	58026000 	.word	0x58026000
 8000da4:	1d500080 	.word	0x1d500080

08000da8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000dac:	4b1e      	ldr	r3, [pc, #120]	; (8000e28 <MX_ETH_Init+0x80>)
 8000dae:	4a1f      	ldr	r2, [pc, #124]	; (8000e2c <MX_ETH_Init+0x84>)
 8000db0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000db2:	4b1f      	ldr	r3, [pc, #124]	; (8000e30 <MX_ETH_Init+0x88>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000db8:	4b1d      	ldr	r3, [pc, #116]	; (8000e30 <MX_ETH_Init+0x88>)
 8000dba:	2280      	movs	r2, #128	; 0x80
 8000dbc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000dbe:	4b1c      	ldr	r3, [pc, #112]	; (8000e30 <MX_ETH_Init+0x88>)
 8000dc0:	22e1      	movs	r2, #225	; 0xe1
 8000dc2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000dc4:	4b1a      	ldr	r3, [pc, #104]	; (8000e30 <MX_ETH_Init+0x88>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000dca:	4b19      	ldr	r3, [pc, #100]	; (8000e30 <MX_ETH_Init+0x88>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000dd0:	4b17      	ldr	r3, [pc, #92]	; (8000e30 <MX_ETH_Init+0x88>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000dd6:	4b14      	ldr	r3, [pc, #80]	; (8000e28 <MX_ETH_Init+0x80>)
 8000dd8:	4a15      	ldr	r2, [pc, #84]	; (8000e30 <MX_ETH_Init+0x88>)
 8000dda:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_MII_MODE;
 8000ddc:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <MX_ETH_Init+0x80>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000de2:	4b11      	ldr	r3, [pc, #68]	; (8000e28 <MX_ETH_Init+0x80>)
 8000de4:	4a13      	ldr	r2, [pc, #76]	; (8000e34 <MX_ETH_Init+0x8c>)
 8000de6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000de8:	4b0f      	ldr	r3, [pc, #60]	; (8000e28 <MX_ETH_Init+0x80>)
 8000dea:	4a13      	ldr	r2, [pc, #76]	; (8000e38 <MX_ETH_Init+0x90>)
 8000dec:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000dee:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <MX_ETH_Init+0x80>)
 8000df0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000df4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000df6:	480c      	ldr	r0, [pc, #48]	; (8000e28 <MX_ETH_Init+0x80>)
 8000df8:	f003 ff0a 	bl	8004c10 <HAL_ETH_Init>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000e02:	f000 feab 	bl	8001b5c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000e06:	2238      	movs	r2, #56	; 0x38
 8000e08:	2100      	movs	r1, #0
 8000e0a:	480c      	ldr	r0, [pc, #48]	; (8000e3c <MX_ETH_Init+0x94>)
 8000e0c:	f00d fa96 	bl	800e33c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000e10:	4b0a      	ldr	r3, [pc, #40]	; (8000e3c <MX_ETH_Init+0x94>)
 8000e12:	2221      	movs	r2, #33	; 0x21
 8000e14:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000e16:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <MX_ETH_Init+0x94>)
 8000e18:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000e1c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000e1e:	4b07      	ldr	r3, [pc, #28]	; (8000e3c <MX_ETH_Init+0x94>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000e24:	bf00      	nop
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	24000278 	.word	0x24000278
 8000e2c:	40028000 	.word	0x40028000
 8000e30:	24000d20 	.word	0x24000d20
 8000e34:	24000098 	.word	0x24000098
 8000e38:	24000038 	.word	0x24000038
 8000e3c:	24000114 	.word	0x24000114

08000e40 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000e44:	4b2e      	ldr	r3, [pc, #184]	; (8000f00 <MX_FDCAN1_Init+0xc0>)
 8000e46:	4a2f      	ldr	r2, [pc, #188]	; (8000f04 <MX_FDCAN1_Init+0xc4>)
 8000e48:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000e4a:	4b2d      	ldr	r3, [pc, #180]	; (8000f00 <MX_FDCAN1_Init+0xc0>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000e50:	4b2b      	ldr	r3, [pc, #172]	; (8000f00 <MX_FDCAN1_Init+0xc0>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000e56:	4b2a      	ldr	r3, [pc, #168]	; (8000f00 <MX_FDCAN1_Init+0xc0>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000e5c:	4b28      	ldr	r3, [pc, #160]	; (8000f00 <MX_FDCAN1_Init+0xc0>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000e62:	4b27      	ldr	r3, [pc, #156]	; (8000f00 <MX_FDCAN1_Init+0xc0>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000e68:	4b25      	ldr	r3, [pc, #148]	; (8000f00 <MX_FDCAN1_Init+0xc0>)
 8000e6a:	2210      	movs	r2, #16
 8000e6c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000e6e:	4b24      	ldr	r3, [pc, #144]	; (8000f00 <MX_FDCAN1_Init+0xc0>)
 8000e70:	2201      	movs	r2, #1
 8000e72:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000e74:	4b22      	ldr	r3, [pc, #136]	; (8000f00 <MX_FDCAN1_Init+0xc0>)
 8000e76:	2202      	movs	r2, #2
 8000e78:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000e7a:	4b21      	ldr	r3, [pc, #132]	; (8000f00 <MX_FDCAN1_Init+0xc0>)
 8000e7c:	2202      	movs	r2, #2
 8000e7e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000e80:	4b1f      	ldr	r3, [pc, #124]	; (8000f00 <MX_FDCAN1_Init+0xc0>)
 8000e82:	2201      	movs	r2, #1
 8000e84:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000e86:	4b1e      	ldr	r3, [pc, #120]	; (8000f00 <MX_FDCAN1_Init+0xc0>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000e8c:	4b1c      	ldr	r3, [pc, #112]	; (8000f00 <MX_FDCAN1_Init+0xc0>)
 8000e8e:	2201      	movs	r2, #1
 8000e90:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000e92:	4b1b      	ldr	r3, [pc, #108]	; (8000f00 <MX_FDCAN1_Init+0xc0>)
 8000e94:	2201      	movs	r2, #1
 8000e96:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000e98:	4b19      	ldr	r3, [pc, #100]	; (8000f00 <MX_FDCAN1_Init+0xc0>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000e9e:	4b18      	ldr	r3, [pc, #96]	; (8000f00 <MX_FDCAN1_Init+0xc0>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000ea4:	4b16      	ldr	r3, [pc, #88]	; (8000f00 <MX_FDCAN1_Init+0xc0>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000eaa:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <MX_FDCAN1_Init+0xc0>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000eb0:	4b13      	ldr	r3, [pc, #76]	; (8000f00 <MX_FDCAN1_Init+0xc0>)
 8000eb2:	2204      	movs	r2, #4
 8000eb4:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000eb6:	4b12      	ldr	r3, [pc, #72]	; (8000f00 <MX_FDCAN1_Init+0xc0>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000ebc:	4b10      	ldr	r3, [pc, #64]	; (8000f00 <MX_FDCAN1_Init+0xc0>)
 8000ebe:	2204      	movs	r2, #4
 8000ec0:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000ec2:	4b0f      	ldr	r3, [pc, #60]	; (8000f00 <MX_FDCAN1_Init+0xc0>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000ec8:	4b0d      	ldr	r3, [pc, #52]	; (8000f00 <MX_FDCAN1_Init+0xc0>)
 8000eca:	2204      	movs	r2, #4
 8000ecc:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000ece:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <MX_FDCAN1_Init+0xc0>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000ed4:	4b0a      	ldr	r3, [pc, #40]	; (8000f00 <MX_FDCAN1_Init+0xc0>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000eda:	4b09      	ldr	r3, [pc, #36]	; (8000f00 <MX_FDCAN1_Init+0xc0>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000ee0:	4b07      	ldr	r3, [pc, #28]	; (8000f00 <MX_FDCAN1_Init+0xc0>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000ee6:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <MX_FDCAN1_Init+0xc0>)
 8000ee8:	2204      	movs	r2, #4
 8000eea:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000eec:	4804      	ldr	r0, [pc, #16]	; (8000f00 <MX_FDCAN1_Init+0xc0>)
 8000eee:	f004 fab3 	bl	8005458 <HAL_FDCAN_Init>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000ef8:	f000 fe30 	bl	8001b5c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000efc:	bf00      	nop
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	24000328 	.word	0x24000328
 8000f04:	4000a000 	.word	0x4000a000

08000f08 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000f0c:	4b2e      	ldr	r3, [pc, #184]	; (8000fc8 <MX_FDCAN2_Init+0xc0>)
 8000f0e:	4a2f      	ldr	r2, [pc, #188]	; (8000fcc <MX_FDCAN2_Init+0xc4>)
 8000f10:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000f12:	4b2d      	ldr	r3, [pc, #180]	; (8000fc8 <MX_FDCAN2_Init+0xc0>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000f18:	4b2b      	ldr	r3, [pc, #172]	; (8000fc8 <MX_FDCAN2_Init+0xc0>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000f1e:	4b2a      	ldr	r3, [pc, #168]	; (8000fc8 <MX_FDCAN2_Init+0xc0>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000f24:	4b28      	ldr	r3, [pc, #160]	; (8000fc8 <MX_FDCAN2_Init+0xc0>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000f2a:	4b27      	ldr	r3, [pc, #156]	; (8000fc8 <MX_FDCAN2_Init+0xc0>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8000f30:	4b25      	ldr	r3, [pc, #148]	; (8000fc8 <MX_FDCAN2_Init+0xc0>)
 8000f32:	2210      	movs	r2, #16
 8000f34:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000f36:	4b24      	ldr	r3, [pc, #144]	; (8000fc8 <MX_FDCAN2_Init+0xc0>)
 8000f38:	2201      	movs	r2, #1
 8000f3a:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000f3c:	4b22      	ldr	r3, [pc, #136]	; (8000fc8 <MX_FDCAN2_Init+0xc0>)
 8000f3e:	2202      	movs	r2, #2
 8000f40:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000f42:	4b21      	ldr	r3, [pc, #132]	; (8000fc8 <MX_FDCAN2_Init+0xc0>)
 8000f44:	2202      	movs	r2, #2
 8000f46:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000f48:	4b1f      	ldr	r3, [pc, #124]	; (8000fc8 <MX_FDCAN2_Init+0xc0>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000f4e:	4b1e      	ldr	r3, [pc, #120]	; (8000fc8 <MX_FDCAN2_Init+0xc0>)
 8000f50:	2201      	movs	r2, #1
 8000f52:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000f54:	4b1c      	ldr	r3, [pc, #112]	; (8000fc8 <MX_FDCAN2_Init+0xc0>)
 8000f56:	2201      	movs	r2, #1
 8000f58:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000f5a:	4b1b      	ldr	r3, [pc, #108]	; (8000fc8 <MX_FDCAN2_Init+0xc0>)
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000f60:	4b19      	ldr	r3, [pc, #100]	; (8000fc8 <MX_FDCAN2_Init+0xc0>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000f66:	4b18      	ldr	r3, [pc, #96]	; (8000fc8 <MX_FDCAN2_Init+0xc0>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000f6c:	4b16      	ldr	r3, [pc, #88]	; (8000fc8 <MX_FDCAN2_Init+0xc0>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000f72:	4b15      	ldr	r3, [pc, #84]	; (8000fc8 <MX_FDCAN2_Init+0xc0>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000f78:	4b13      	ldr	r3, [pc, #76]	; (8000fc8 <MX_FDCAN2_Init+0xc0>)
 8000f7a:	2204      	movs	r2, #4
 8000f7c:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000f7e:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <MX_FDCAN2_Init+0xc0>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000f84:	4b10      	ldr	r3, [pc, #64]	; (8000fc8 <MX_FDCAN2_Init+0xc0>)
 8000f86:	2204      	movs	r2, #4
 8000f88:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000f8a:	4b0f      	ldr	r3, [pc, #60]	; (8000fc8 <MX_FDCAN2_Init+0xc0>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000f90:	4b0d      	ldr	r3, [pc, #52]	; (8000fc8 <MX_FDCAN2_Init+0xc0>)
 8000f92:	2204      	movs	r2, #4
 8000f94:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000f96:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <MX_FDCAN2_Init+0xc0>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000f9c:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <MX_FDCAN2_Init+0xc0>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000fa2:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <MX_FDCAN2_Init+0xc0>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000fa8:	4b07      	ldr	r3, [pc, #28]	; (8000fc8 <MX_FDCAN2_Init+0xc0>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000fae:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <MX_FDCAN2_Init+0xc0>)
 8000fb0:	2204      	movs	r2, #4
 8000fb2:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000fb4:	4804      	ldr	r0, [pc, #16]	; (8000fc8 <MX_FDCAN2_Init+0xc0>)
 8000fb6:	f004 fa4f 	bl	8005458 <HAL_FDCAN_Init>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000fc0:	f000 fdcc 	bl	8001b5c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000fc4:	bf00      	nop
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	240003c8 	.word	0x240003c8
 8000fcc:	4000a400 	.word	0x4000a400

08000fd0 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b09a      	sub	sp, #104	; 0x68
 8000fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000fd6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000fda:	2234      	movs	r2, #52	; 0x34
 8000fdc:	2100      	movs	r1, #0
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f00d f9ac 	bl	800e33c <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000fe4:	463b      	mov	r3, r7
 8000fe6:	2234      	movs	r2, #52	; 0x34
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f00d f9a6 	bl	800e33c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000ff0:	4b4e      	ldr	r3, [pc, #312]	; (800112c <MX_LTDC_Init+0x15c>)
 8000ff2:	4a4f      	ldr	r2, [pc, #316]	; (8001130 <MX_LTDC_Init+0x160>)
 8000ff4:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000ff6:	4b4d      	ldr	r3, [pc, #308]	; (800112c <MX_LTDC_Init+0x15c>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000ffc:	4b4b      	ldr	r3, [pc, #300]	; (800112c <MX_LTDC_Init+0x15c>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001002:	4b4a      	ldr	r3, [pc, #296]	; (800112c <MX_LTDC_Init+0x15c>)
 8001004:	2200      	movs	r2, #0
 8001006:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001008:	4b48      	ldr	r3, [pc, #288]	; (800112c <MX_LTDC_Init+0x15c>)
 800100a:	2200      	movs	r2, #0
 800100c:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 800100e:	4b47      	ldr	r3, [pc, #284]	; (800112c <MX_LTDC_Init+0x15c>)
 8001010:	2207      	movs	r2, #7
 8001012:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8001014:	4b45      	ldr	r3, [pc, #276]	; (800112c <MX_LTDC_Init+0x15c>)
 8001016:	2203      	movs	r2, #3
 8001018:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 800101a:	4b44      	ldr	r3, [pc, #272]	; (800112c <MX_LTDC_Init+0x15c>)
 800101c:	220e      	movs	r2, #14
 800101e:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8001020:	4b42      	ldr	r3, [pc, #264]	; (800112c <MX_LTDC_Init+0x15c>)
 8001022:	2205      	movs	r2, #5
 8001024:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8001026:	4b41      	ldr	r3, [pc, #260]	; (800112c <MX_LTDC_Init+0x15c>)
 8001028:	f240 228e 	movw	r2, #654	; 0x28e
 800102c:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 800102e:	4b3f      	ldr	r3, [pc, #252]	; (800112c <MX_LTDC_Init+0x15c>)
 8001030:	f240 12e5 	movw	r2, #485	; 0x1e5
 8001034:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 8001036:	4b3d      	ldr	r3, [pc, #244]	; (800112c <MX_LTDC_Init+0x15c>)
 8001038:	f44f 7225 	mov.w	r2, #660	; 0x294
 800103c:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 800103e:	4b3b      	ldr	r3, [pc, #236]	; (800112c <MX_LTDC_Init+0x15c>)
 8001040:	f240 12e7 	movw	r2, #487	; 0x1e7
 8001044:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001046:	4b39      	ldr	r3, [pc, #228]	; (800112c <MX_LTDC_Init+0x15c>)
 8001048:	2200      	movs	r2, #0
 800104a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800104e:	4b37      	ldr	r3, [pc, #220]	; (800112c <MX_LTDC_Init+0x15c>)
 8001050:	2200      	movs	r2, #0
 8001052:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001056:	4b35      	ldr	r3, [pc, #212]	; (800112c <MX_LTDC_Init+0x15c>)
 8001058:	2200      	movs	r2, #0
 800105a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800105e:	4833      	ldr	r0, [pc, #204]	; (800112c <MX_LTDC_Init+0x15c>)
 8001060:	f004 ff28 	bl	8005eb4 <HAL_LTDC_Init>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 800106a:	f000 fd77 	bl	8001b5c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 800107a:	2300      	movs	r3, #0
 800107c:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800107e:	2300      	movs	r3, #0
 8001080:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8001082:	2300      	movs	r3, #0
 8001084:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8001086:	2300      	movs	r3, #0
 8001088:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800108a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800108e:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001090:	2305      	movs	r3, #5
 8001092:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8001098:	2300      	movs	r3, #0
 800109a:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 800109c:	2300      	movs	r3, #0
 800109e:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80010b2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80010b6:	2200      	movs	r2, #0
 80010b8:	4619      	mov	r1, r3
 80010ba:	481c      	ldr	r0, [pc, #112]	; (800112c <MX_LTDC_Init+0x15c>)
 80010bc:	f004 ffca 	bl	8006054 <HAL_LTDC_ConfigLayer>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 80010c6:	f000 fd49 	bl	8001b5c <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80010da:	2300      	movs	r3, #0
 80010dc:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 80010de:	2300      	movs	r3, #0
 80010e0:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80010e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010ea:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80010ec:	2305      	movs	r3, #5
 80010ee:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 80010f8:	2300      	movs	r3, #0
 80010fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80010fc:	2300      	movs	r3, #0
 80010fe:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8001102:	2300      	movs	r3, #0
 8001104:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800110e:	463b      	mov	r3, r7
 8001110:	2201      	movs	r2, #1
 8001112:	4619      	mov	r1, r3
 8001114:	4805      	ldr	r0, [pc, #20]	; (800112c <MX_LTDC_Init+0x15c>)
 8001116:	f004 ff9d 	bl	8006054 <HAL_LTDC_ConfigLayer>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8001120:	f000 fd1c 	bl	8001b5c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001124:	bf00      	nop
 8001126:	3768      	adds	r7, #104	; 0x68
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	24000468 	.word	0x24000468
 8001130:	50001000 	.word	0x50001000

08001134 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001138:	4b10      	ldr	r3, [pc, #64]	; (800117c <MX_RTC_Init+0x48>)
 800113a:	4a11      	ldr	r2, [pc, #68]	; (8001180 <MX_RTC_Init+0x4c>)
 800113c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800113e:	4b0f      	ldr	r3, [pc, #60]	; (800117c <MX_RTC_Init+0x48>)
 8001140:	2200      	movs	r2, #0
 8001142:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001144:	4b0d      	ldr	r3, [pc, #52]	; (800117c <MX_RTC_Init+0x48>)
 8001146:	227f      	movs	r2, #127	; 0x7f
 8001148:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800114a:	4b0c      	ldr	r3, [pc, #48]	; (800117c <MX_RTC_Init+0x48>)
 800114c:	22ff      	movs	r2, #255	; 0xff
 800114e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001150:	4b0a      	ldr	r3, [pc, #40]	; (800117c <MX_RTC_Init+0x48>)
 8001152:	2200      	movs	r2, #0
 8001154:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001156:	4b09      	ldr	r3, [pc, #36]	; (800117c <MX_RTC_Init+0x48>)
 8001158:	2200      	movs	r2, #0
 800115a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800115c:	4b07      	ldr	r3, [pc, #28]	; (800117c <MX_RTC_Init+0x48>)
 800115e:	2200      	movs	r2, #0
 8001160:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001162:	4b06      	ldr	r3, [pc, #24]	; (800117c <MX_RTC_Init+0x48>)
 8001164:	2200      	movs	r2, #0
 8001166:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001168:	4804      	ldr	r0, [pc, #16]	; (800117c <MX_RTC_Init+0x48>)
 800116a:	f008 ffc1 	bl	800a0f0 <HAL_RTC_Init>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8001174:	f000 fcf2 	bl	8001b5c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001178:	bf00      	nop
 800117a:	bd80      	pop	{r7, pc}
 800117c:	24000510 	.word	0x24000510
 8001180:	58004000 	.word	0x58004000

08001184 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001188:	4b58      	ldr	r3, [pc, #352]	; (80012ec <MX_SAI2_Init+0x168>)
 800118a:	4a59      	ldr	r2, [pc, #356]	; (80012f0 <MX_SAI2_Init+0x16c>)
 800118c:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 800118e:	4b57      	ldr	r3, [pc, #348]	; (80012ec <MX_SAI2_Init+0x168>)
 8001190:	2200      	movs	r2, #0
 8001192:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001194:	4b55      	ldr	r3, [pc, #340]	; (80012ec <MX_SAI2_Init+0x168>)
 8001196:	2200      	movs	r2, #0
 8001198:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 800119a:	4b54      	ldr	r3, [pc, #336]	; (80012ec <MX_SAI2_Init+0x168>)
 800119c:	2240      	movs	r2, #64	; 0x40
 800119e:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80011a0:	4b52      	ldr	r3, [pc, #328]	; (80012ec <MX_SAI2_Init+0x168>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80011a6:	4b51      	ldr	r3, [pc, #324]	; (80012ec <MX_SAI2_Init+0x168>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80011ac:	4b4f      	ldr	r3, [pc, #316]	; (80012ec <MX_SAI2_Init+0x168>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80011b2:	4b4e      	ldr	r3, [pc, #312]	; (80012ec <MX_SAI2_Init+0x168>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80011b8:	4b4c      	ldr	r3, [pc, #304]	; (80012ec <MX_SAI2_Init+0x168>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80011be:	4b4b      	ldr	r3, [pc, #300]	; (80012ec <MX_SAI2_Init+0x168>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80011c4:	4b49      	ldr	r3, [pc, #292]	; (80012ec <MX_SAI2_Init+0x168>)
 80011c6:	4a4b      	ldr	r2, [pc, #300]	; (80012f4 <MX_SAI2_Init+0x170>)
 80011c8:	621a      	str	r2, [r3, #32]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80011ca:	4b48      	ldr	r3, [pc, #288]	; (80012ec <MX_SAI2_Init+0x168>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80011d0:	4b46      	ldr	r3, [pc, #280]	; (80012ec <MX_SAI2_Init+0x168>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80011d6:	4b45      	ldr	r3, [pc, #276]	; (80012ec <MX_SAI2_Init+0x168>)
 80011d8:	2200      	movs	r2, #0
 80011da:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80011dc:	4b43      	ldr	r3, [pc, #268]	; (80012ec <MX_SAI2_Init+0x168>)
 80011de:	2200      	movs	r2, #0
 80011e0:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.PdmInit.Activation = DISABLE;
 80011e2:	4b42      	ldr	r3, [pc, #264]	; (80012ec <MX_SAI2_Init+0x168>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.PdmInit.MicPairsNbr = 1;
 80011ea:	4b40      	ldr	r3, [pc, #256]	; (80012ec <MX_SAI2_Init+0x168>)
 80011ec:	2201      	movs	r2, #1
 80011ee:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 80011f0:	4b3e      	ldr	r3, [pc, #248]	; (80012ec <MX_SAI2_Init+0x168>)
 80011f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011f6:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.FrameLength = 8;
 80011f8:	4b3c      	ldr	r3, [pc, #240]	; (80012ec <MX_SAI2_Init+0x168>)
 80011fa:	2208      	movs	r2, #8
 80011fc:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 80011fe:	4b3b      	ldr	r3, [pc, #236]	; (80012ec <MX_SAI2_Init+0x168>)
 8001200:	2201      	movs	r2, #1
 8001202:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001204:	4b39      	ldr	r3, [pc, #228]	; (80012ec <MX_SAI2_Init+0x168>)
 8001206:	2200      	movs	r2, #0
 8001208:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800120a:	4b38      	ldr	r3, [pc, #224]	; (80012ec <MX_SAI2_Init+0x168>)
 800120c:	2200      	movs	r2, #0
 800120e:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001210:	4b36      	ldr	r3, [pc, #216]	; (80012ec <MX_SAI2_Init+0x168>)
 8001212:	2200      	movs	r2, #0
 8001214:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001216:	4b35      	ldr	r3, [pc, #212]	; (80012ec <MX_SAI2_Init+0x168>)
 8001218:	2200      	movs	r2, #0
 800121a:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800121c:	4b33      	ldr	r3, [pc, #204]	; (80012ec <MX_SAI2_Init+0x168>)
 800121e:	2200      	movs	r2, #0
 8001220:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8001222:	4b32      	ldr	r3, [pc, #200]	; (80012ec <MX_SAI2_Init+0x168>)
 8001224:	2201      	movs	r2, #1
 8001226:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001228:	4b30      	ldr	r3, [pc, #192]	; (80012ec <MX_SAI2_Init+0x168>)
 800122a:	2200      	movs	r2, #0
 800122c:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 800122e:	482f      	ldr	r0, [pc, #188]	; (80012ec <MX_SAI2_Init+0x168>)
 8001230:	f009 f876 	bl	800a320 <HAL_SAI_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_SAI2_Init+0xba>
  {
    Error_Handler();
 800123a:	f000 fc8f 	bl	8001b5c <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 800123e:	4b2e      	ldr	r3, [pc, #184]	; (80012f8 <MX_SAI2_Init+0x174>)
 8001240:	4a2e      	ldr	r2, [pc, #184]	; (80012fc <MX_SAI2_Init+0x178>)
 8001242:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001244:	4b2c      	ldr	r3, [pc, #176]	; (80012f8 <MX_SAI2_Init+0x174>)
 8001246:	2200      	movs	r2, #0
 8001248:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 800124a:	4b2b      	ldr	r3, [pc, #172]	; (80012f8 <MX_SAI2_Init+0x174>)
 800124c:	2203      	movs	r2, #3
 800124e:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8001250:	4b29      	ldr	r3, [pc, #164]	; (80012f8 <MX_SAI2_Init+0x174>)
 8001252:	2240      	movs	r2, #64	; 0x40
 8001254:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001256:	4b28      	ldr	r3, [pc, #160]	; (80012f8 <MX_SAI2_Init+0x174>)
 8001258:	2200      	movs	r2, #0
 800125a:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800125c:	4b26      	ldr	r3, [pc, #152]	; (80012f8 <MX_SAI2_Init+0x174>)
 800125e:	2200      	movs	r2, #0
 8001260:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001262:	4b25      	ldr	r3, [pc, #148]	; (80012f8 <MX_SAI2_Init+0x174>)
 8001264:	2201      	movs	r2, #1
 8001266:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001268:	4b23      	ldr	r3, [pc, #140]	; (80012f8 <MX_SAI2_Init+0x174>)
 800126a:	2200      	movs	r2, #0
 800126c:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800126e:	4b22      	ldr	r3, [pc, #136]	; (80012f8 <MX_SAI2_Init+0x174>)
 8001270:	2200      	movs	r2, #0
 8001272:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001274:	4b20      	ldr	r3, [pc, #128]	; (80012f8 <MX_SAI2_Init+0x174>)
 8001276:	2200      	movs	r2, #0
 8001278:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 800127a:	4b1f      	ldr	r3, [pc, #124]	; (80012f8 <MX_SAI2_Init+0x174>)
 800127c:	2200      	movs	r2, #0
 800127e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001280:	4b1d      	ldr	r3, [pc, #116]	; (80012f8 <MX_SAI2_Init+0x174>)
 8001282:	2200      	movs	r2, #0
 8001284:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001286:	4b1c      	ldr	r3, [pc, #112]	; (80012f8 <MX_SAI2_Init+0x174>)
 8001288:	2200      	movs	r2, #0
 800128a:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.PdmInit.Activation = DISABLE;
 800128c:	4b1a      	ldr	r3, [pc, #104]	; (80012f8 <MX_SAI2_Init+0x174>)
 800128e:	2200      	movs	r2, #0
 8001290:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.PdmInit.MicPairsNbr = 1;
 8001294:	4b18      	ldr	r3, [pc, #96]	; (80012f8 <MX_SAI2_Init+0x174>)
 8001296:	2201      	movs	r2, #1
 8001298:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 800129a:	4b17      	ldr	r3, [pc, #92]	; (80012f8 <MX_SAI2_Init+0x174>)
 800129c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012a0:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.FrameLength = 8;
 80012a2:	4b15      	ldr	r3, [pc, #84]	; (80012f8 <MX_SAI2_Init+0x174>)
 80012a4:	2208      	movs	r2, #8
 80012a6:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 80012a8:	4b13      	ldr	r3, [pc, #76]	; (80012f8 <MX_SAI2_Init+0x174>)
 80012aa:	2201      	movs	r2, #1
 80012ac:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80012ae:	4b12      	ldr	r3, [pc, #72]	; (80012f8 <MX_SAI2_Init+0x174>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80012b4:	4b10      	ldr	r3, [pc, #64]	; (80012f8 <MX_SAI2_Init+0x174>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80012ba:	4b0f      	ldr	r3, [pc, #60]	; (80012f8 <MX_SAI2_Init+0x174>)
 80012bc:	2200      	movs	r2, #0
 80012be:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 80012c0:	4b0d      	ldr	r3, [pc, #52]	; (80012f8 <MX_SAI2_Init+0x174>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80012c6:	4b0c      	ldr	r3, [pc, #48]	; (80012f8 <MX_SAI2_Init+0x174>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 80012cc:	4b0a      	ldr	r3, [pc, #40]	; (80012f8 <MX_SAI2_Init+0x174>)
 80012ce:	2201      	movs	r2, #1
 80012d0:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 80012d2:	4b09      	ldr	r3, [pc, #36]	; (80012f8 <MX_SAI2_Init+0x174>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 80012d8:	4807      	ldr	r0, [pc, #28]	; (80012f8 <MX_SAI2_Init+0x174>)
 80012da:	f009 f821 	bl	800a320 <HAL_SAI_Init>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_SAI2_Init+0x164>
  {
    Error_Handler();
 80012e4:	f000 fc3a 	bl	8001b5c <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 80012e8:	bf00      	nop
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	24000534 	.word	0x24000534
 80012f0:	40015c04 	.word	0x40015c04
 80012f4:	0002ee00 	.word	0x0002ee00
 80012f8:	240005cc 	.word	0x240005cc
 80012fc:	40015c24 	.word	0x40015c24

08001300 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001304:	4b26      	ldr	r3, [pc, #152]	; (80013a0 <MX_SPI2_Init+0xa0>)
 8001306:	4a27      	ldr	r2, [pc, #156]	; (80013a4 <MX_SPI2_Init+0xa4>)
 8001308:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800130a:	4b25      	ldr	r3, [pc, #148]	; (80013a0 <MX_SPI2_Init+0xa0>)
 800130c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001310:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001312:	4b23      	ldr	r3, [pc, #140]	; (80013a0 <MX_SPI2_Init+0xa0>)
 8001314:	2200      	movs	r2, #0
 8001316:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001318:	4b21      	ldr	r3, [pc, #132]	; (80013a0 <MX_SPI2_Init+0xa0>)
 800131a:	2203      	movs	r2, #3
 800131c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800131e:	4b20      	ldr	r3, [pc, #128]	; (80013a0 <MX_SPI2_Init+0xa0>)
 8001320:	2200      	movs	r2, #0
 8001322:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001324:	4b1e      	ldr	r3, [pc, #120]	; (80013a0 <MX_SPI2_Init+0xa0>)
 8001326:	2200      	movs	r2, #0
 8001328:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 800132a:	4b1d      	ldr	r3, [pc, #116]	; (80013a0 <MX_SPI2_Init+0xa0>)
 800132c:	2200      	movs	r2, #0
 800132e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001330:	4b1b      	ldr	r3, [pc, #108]	; (80013a0 <MX_SPI2_Init+0xa0>)
 8001332:	2200      	movs	r2, #0
 8001334:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001336:	4b1a      	ldr	r3, [pc, #104]	; (80013a0 <MX_SPI2_Init+0xa0>)
 8001338:	2200      	movs	r2, #0
 800133a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800133c:	4b18      	ldr	r3, [pc, #96]	; (80013a0 <MX_SPI2_Init+0xa0>)
 800133e:	2200      	movs	r2, #0
 8001340:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001342:	4b17      	ldr	r3, [pc, #92]	; (80013a0 <MX_SPI2_Init+0xa0>)
 8001344:	2200      	movs	r2, #0
 8001346:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001348:	4b15      	ldr	r3, [pc, #84]	; (80013a0 <MX_SPI2_Init+0xa0>)
 800134a:	2200      	movs	r2, #0
 800134c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800134e:	4b14      	ldr	r3, [pc, #80]	; (80013a0 <MX_SPI2_Init+0xa0>)
 8001350:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001354:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001356:	4b12      	ldr	r3, [pc, #72]	; (80013a0 <MX_SPI2_Init+0xa0>)
 8001358:	2200      	movs	r2, #0
 800135a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800135c:	4b10      	ldr	r3, [pc, #64]	; (80013a0 <MX_SPI2_Init+0xa0>)
 800135e:	2200      	movs	r2, #0
 8001360:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001362:	4b0f      	ldr	r3, [pc, #60]	; (80013a0 <MX_SPI2_Init+0xa0>)
 8001364:	2200      	movs	r2, #0
 8001366:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001368:	4b0d      	ldr	r3, [pc, #52]	; (80013a0 <MX_SPI2_Init+0xa0>)
 800136a:	2200      	movs	r2, #0
 800136c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800136e:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <MX_SPI2_Init+0xa0>)
 8001370:	2200      	movs	r2, #0
 8001372:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001374:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <MX_SPI2_Init+0xa0>)
 8001376:	2200      	movs	r2, #0
 8001378:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800137a:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <MX_SPI2_Init+0xa0>)
 800137c:	2200      	movs	r2, #0
 800137e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001380:	4b07      	ldr	r3, [pc, #28]	; (80013a0 <MX_SPI2_Init+0xa0>)
 8001382:	2200      	movs	r2, #0
 8001384:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001386:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <MX_SPI2_Init+0xa0>)
 8001388:	2200      	movs	r2, #0
 800138a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800138c:	4804      	ldr	r0, [pc, #16]	; (80013a0 <MX_SPI2_Init+0xa0>)
 800138e:	f009 fae7 	bl	800a960 <HAL_SPI_Init>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_SPI2_Init+0x9c>
  {
    Error_Handler();
 8001398:	f000 fbe0 	bl	8001b5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800139c:	bf00      	nop
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	24000664 	.word	0x24000664
 80013a4:	40003800 	.word	0x40003800

080013a8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b088      	sub	sp, #32
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ae:	f107 0310 	add.w	r3, r7, #16
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]
 80013b8:	609a      	str	r2, [r3, #8]
 80013ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013bc:	1d3b      	adds	r3, r7, #4
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013c6:	4b1f      	ldr	r3, [pc, #124]	; (8001444 <MX_TIM3_Init+0x9c>)
 80013c8:	4a1f      	ldr	r2, [pc, #124]	; (8001448 <MX_TIM3_Init+0xa0>)
 80013ca:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 80013cc:	4b1d      	ldr	r3, [pc, #116]	; (8001444 <MX_TIM3_Init+0x9c>)
 80013ce:	223f      	movs	r2, #63	; 0x3f
 80013d0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d2:	4b1c      	ldr	r3, [pc, #112]	; (8001444 <MX_TIM3_Init+0x9c>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80013d8:	4b1a      	ldr	r3, [pc, #104]	; (8001444 <MX_TIM3_Init+0x9c>)
 80013da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013de:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e0:	4b18      	ldr	r3, [pc, #96]	; (8001444 <MX_TIM3_Init+0x9c>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e6:	4b17      	ldr	r3, [pc, #92]	; (8001444 <MX_TIM3_Init+0x9c>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013ec:	4815      	ldr	r0, [pc, #84]	; (8001444 <MX_TIM3_Init+0x9c>)
 80013ee:	f009 fbf6 	bl	800abde <HAL_TIM_Base_Init>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80013f8:	f000 fbb0 	bl	8001b5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001400:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001402:	f107 0310 	add.w	r3, r7, #16
 8001406:	4619      	mov	r1, r3
 8001408:	480e      	ldr	r0, [pc, #56]	; (8001444 <MX_TIM3_Init+0x9c>)
 800140a:	f009 fcaf 	bl	800ad6c <HAL_TIM_ConfigClockSource>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001414:	f000 fba2 	bl	8001b5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001418:	2300      	movs	r3, #0
 800141a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800141c:	2300      	movs	r3, #0
 800141e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001420:	1d3b      	adds	r3, r7, #4
 8001422:	4619      	mov	r1, r3
 8001424:	4807      	ldr	r0, [pc, #28]	; (8001444 <MX_TIM3_Init+0x9c>)
 8001426:	f009 fed1 	bl	800b1cc <HAL_TIMEx_MasterConfigSynchronization>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001430:	f000 fb94 	bl	8001b5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Base_Start(&htim3);
 8001434:	4803      	ldr	r0, [pc, #12]	; (8001444 <MX_TIM3_Init+0x9c>)
 8001436:	f009 fc29 	bl	800ac8c <HAL_TIM_Base_Start>

  /* USER CODE END TIM3_Init 2 */

}
 800143a:	bf00      	nop
 800143c:	3720      	adds	r7, #32
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	240006ec 	.word	0x240006ec
 8001448:	40000400 	.word	0x40000400

0800144c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001450:	4b22      	ldr	r3, [pc, #136]	; (80014dc <MX_USART3_UART_Init+0x90>)
 8001452:	4a23      	ldr	r2, [pc, #140]	; (80014e0 <MX_USART3_UART_Init+0x94>)
 8001454:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001456:	4b21      	ldr	r3, [pc, #132]	; (80014dc <MX_USART3_UART_Init+0x90>)
 8001458:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800145c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800145e:	4b1f      	ldr	r3, [pc, #124]	; (80014dc <MX_USART3_UART_Init+0x90>)
 8001460:	2200      	movs	r2, #0
 8001462:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001464:	4b1d      	ldr	r3, [pc, #116]	; (80014dc <MX_USART3_UART_Init+0x90>)
 8001466:	2200      	movs	r2, #0
 8001468:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800146a:	4b1c      	ldr	r3, [pc, #112]	; (80014dc <MX_USART3_UART_Init+0x90>)
 800146c:	2200      	movs	r2, #0
 800146e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001470:	4b1a      	ldr	r3, [pc, #104]	; (80014dc <MX_USART3_UART_Init+0x90>)
 8001472:	220c      	movs	r2, #12
 8001474:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001476:	4b19      	ldr	r3, [pc, #100]	; (80014dc <MX_USART3_UART_Init+0x90>)
 8001478:	2200      	movs	r2, #0
 800147a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800147c:	4b17      	ldr	r3, [pc, #92]	; (80014dc <MX_USART3_UART_Init+0x90>)
 800147e:	2200      	movs	r2, #0
 8001480:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001482:	4b16      	ldr	r3, [pc, #88]	; (80014dc <MX_USART3_UART_Init+0x90>)
 8001484:	2200      	movs	r2, #0
 8001486:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001488:	4b14      	ldr	r3, [pc, #80]	; (80014dc <MX_USART3_UART_Init+0x90>)
 800148a:	2200      	movs	r2, #0
 800148c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800148e:	4b13      	ldr	r3, [pc, #76]	; (80014dc <MX_USART3_UART_Init+0x90>)
 8001490:	2200      	movs	r2, #0
 8001492:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001494:	4811      	ldr	r0, [pc, #68]	; (80014dc <MX_USART3_UART_Init+0x90>)
 8001496:	f009 ff27 	bl	800b2e8 <HAL_UART_Init>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80014a0:	f000 fb5c 	bl	8001b5c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014a4:	2100      	movs	r1, #0
 80014a6:	480d      	ldr	r0, [pc, #52]	; (80014dc <MX_USART3_UART_Init+0x90>)
 80014a8:	f00c fa7b 	bl	800d9a2 <HAL_UARTEx_SetTxFifoThreshold>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80014b2:	f000 fb53 	bl	8001b5c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014b6:	2100      	movs	r1, #0
 80014b8:	4808      	ldr	r0, [pc, #32]	; (80014dc <MX_USART3_UART_Init+0x90>)
 80014ba:	f00c fab0 	bl	800da1e <HAL_UARTEx_SetRxFifoThreshold>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80014c4:	f000 fb4a 	bl	8001b5c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80014c8:	4804      	ldr	r0, [pc, #16]	; (80014dc <MX_USART3_UART_Init+0x90>)
 80014ca:	f00c fa31 	bl	800d930 <HAL_UARTEx_DisableFifoMode>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80014d4:	f000 fb42 	bl	8001b5c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80014d8:	bf00      	nop
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	24000738 	.word	0x24000738
 80014e0:	40004800 	.word	0x40004800

080014e4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80014e8:	4b15      	ldr	r3, [pc, #84]	; (8001540 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80014ea:	4a16      	ldr	r2, [pc, #88]	; (8001544 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80014ec:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80014ee:	4b14      	ldr	r3, [pc, #80]	; (8001540 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80014f0:	2209      	movs	r2, #9
 80014f2:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80014f4:	4b12      	ldr	r3, [pc, #72]	; (8001540 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80014f6:	2202      	movs	r2, #2
 80014f8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80014fa:	4b11      	ldr	r3, [pc, #68]	; (8001540 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001500:	4b0f      	ldr	r3, [pc, #60]	; (8001540 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001502:	2202      	movs	r2, #2
 8001504:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001506:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001508:	2200      	movs	r2, #0
 800150a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800150c:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800150e:	2200      	movs	r2, #0
 8001510:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001512:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001514:	2200      	movs	r2, #0
 8001516:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001518:	4b09      	ldr	r3, [pc, #36]	; (8001540 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800151a:	2201      	movs	r2, #1
 800151c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800151e:	4b08      	ldr	r3, [pc, #32]	; (8001540 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001520:	2201      	movs	r2, #1
 8001522:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001524:	4b06      	ldr	r3, [pc, #24]	; (8001540 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001526:	2200      	movs	r2, #0
 8001528:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800152a:	4805      	ldr	r0, [pc, #20]	; (8001540 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800152c:	f004 ff6a 	bl	8006404 <HAL_PCD_Init>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001536:	f000 fb11 	bl	8001b5c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	240007cc 	.word	0x240007cc
 8001544:	40080000 	.word	0x40080000

08001548 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b088      	sub	sp, #32
 800154c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800154e:	1d3b      	adds	r3, r7, #4
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	60da      	str	r2, [r3, #12]
 800155a:	611a      	str	r2, [r3, #16]
 800155c:	615a      	str	r2, [r3, #20]
 800155e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001560:	4b1e      	ldr	r3, [pc, #120]	; (80015dc <MX_FMC_Init+0x94>)
 8001562:	4a1f      	ldr	r2, [pc, #124]	; (80015e0 <MX_FMC_Init+0x98>)
 8001564:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8001566:	4b1d      	ldr	r3, [pc, #116]	; (80015dc <MX_FMC_Init+0x94>)
 8001568:	2201      	movs	r2, #1
 800156a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800156c:	4b1b      	ldr	r3, [pc, #108]	; (80015dc <MX_FMC_Init+0x94>)
 800156e:	2200      	movs	r2, #0
 8001570:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001572:	4b1a      	ldr	r3, [pc, #104]	; (80015dc <MX_FMC_Init+0x94>)
 8001574:	2204      	movs	r2, #4
 8001576:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001578:	4b18      	ldr	r3, [pc, #96]	; (80015dc <MX_FMC_Init+0x94>)
 800157a:	2210      	movs	r2, #16
 800157c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800157e:	4b17      	ldr	r3, [pc, #92]	; (80015dc <MX_FMC_Init+0x94>)
 8001580:	2240      	movs	r2, #64	; 0x40
 8001582:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8001584:	4b15      	ldr	r3, [pc, #84]	; (80015dc <MX_FMC_Init+0x94>)
 8001586:	2280      	movs	r2, #128	; 0x80
 8001588:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800158a:	4b14      	ldr	r3, [pc, #80]	; (80015dc <MX_FMC_Init+0x94>)
 800158c:	2200      	movs	r2, #0
 800158e:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8001590:	4b12      	ldr	r3, [pc, #72]	; (80015dc <MX_FMC_Init+0x94>)
 8001592:	2200      	movs	r2, #0
 8001594:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001596:	4b11      	ldr	r3, [pc, #68]	; (80015dc <MX_FMC_Init+0x94>)
 8001598:	2200      	movs	r2, #0
 800159a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800159c:	4b0f      	ldr	r3, [pc, #60]	; (80015dc <MX_FMC_Init+0x94>)
 800159e:	2200      	movs	r2, #0
 80015a0:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 80015a2:	2310      	movs	r3, #16
 80015a4:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 80015a6:	2310      	movs	r3, #16
 80015a8:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 80015aa:	2310      	movs	r3, #16
 80015ac:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 80015ae:	2310      	movs	r3, #16
 80015b0:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 80015b2:	2310      	movs	r3, #16
 80015b4:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 80015b6:	2310      	movs	r3, #16
 80015b8:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 80015ba:	2310      	movs	r3, #16
 80015bc:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80015be:	1d3b      	adds	r3, r7, #4
 80015c0:	4619      	mov	r1, r3
 80015c2:	4806      	ldr	r0, [pc, #24]	; (80015dc <MX_FMC_Init+0x94>)
 80015c4:	f009 f990 	bl	800a8e8 <HAL_SDRAM_Init>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 80015ce:	f000 fac5 	bl	8001b5c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80015d2:	bf00      	nop
 80015d4:	3720      	adds	r7, #32
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	24000cd8 	.word	0x24000cd8
 80015e0:	52004140 	.word	0x52004140

080015e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b090      	sub	sp, #64	; 0x40
 80015e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	605a      	str	r2, [r3, #4]
 80015f4:	609a      	str	r2, [r3, #8]
 80015f6:	60da      	str	r2, [r3, #12]
 80015f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80015fa:	4bc0      	ldr	r3, [pc, #768]	; (80018fc <MX_GPIO_Init+0x318>)
 80015fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001600:	4abe      	ldr	r2, [pc, #760]	; (80018fc <MX_GPIO_Init+0x318>)
 8001602:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001606:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800160a:	4bbc      	ldr	r3, [pc, #752]	; (80018fc <MX_GPIO_Init+0x318>)
 800160c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001614:	62bb      	str	r3, [r7, #40]	; 0x28
 8001616:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001618:	4bb8      	ldr	r3, [pc, #736]	; (80018fc <MX_GPIO_Init+0x318>)
 800161a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800161e:	4ab7      	ldr	r2, [pc, #732]	; (80018fc <MX_GPIO_Init+0x318>)
 8001620:	f043 0302 	orr.w	r3, r3, #2
 8001624:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001628:	4bb4      	ldr	r3, [pc, #720]	; (80018fc <MX_GPIO_Init+0x318>)
 800162a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	627b      	str	r3, [r7, #36]	; 0x24
 8001634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001636:	4bb1      	ldr	r3, [pc, #708]	; (80018fc <MX_GPIO_Init+0x318>)
 8001638:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800163c:	4aaf      	ldr	r2, [pc, #700]	; (80018fc <MX_GPIO_Init+0x318>)
 800163e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001642:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001646:	4bad      	ldr	r3, [pc, #692]	; (80018fc <MX_GPIO_Init+0x318>)
 8001648:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800164c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001650:	623b      	str	r3, [r7, #32]
 8001652:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001654:	4ba9      	ldr	r3, [pc, #676]	; (80018fc <MX_GPIO_Init+0x318>)
 8001656:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800165a:	4aa8      	ldr	r2, [pc, #672]	; (80018fc <MX_GPIO_Init+0x318>)
 800165c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001660:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001664:	4ba5      	ldr	r3, [pc, #660]	; (80018fc <MX_GPIO_Init+0x318>)
 8001666:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800166a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800166e:	61fb      	str	r3, [r7, #28]
 8001670:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001672:	4ba2      	ldr	r3, [pc, #648]	; (80018fc <MX_GPIO_Init+0x318>)
 8001674:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001678:	4aa0      	ldr	r2, [pc, #640]	; (80018fc <MX_GPIO_Init+0x318>)
 800167a:	f043 0304 	orr.w	r3, r3, #4
 800167e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001682:	4b9e      	ldr	r3, [pc, #632]	; (80018fc <MX_GPIO_Init+0x318>)
 8001684:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001688:	f003 0304 	and.w	r3, r3, #4
 800168c:	61bb      	str	r3, [r7, #24]
 800168e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001690:	4b9a      	ldr	r3, [pc, #616]	; (80018fc <MX_GPIO_Init+0x318>)
 8001692:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001696:	4a99      	ldr	r2, [pc, #612]	; (80018fc <MX_GPIO_Init+0x318>)
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016a0:	4b96      	ldr	r3, [pc, #600]	; (80018fc <MX_GPIO_Init+0x318>)
 80016a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	617b      	str	r3, [r7, #20]
 80016ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016ae:	4b93      	ldr	r3, [pc, #588]	; (80018fc <MX_GPIO_Init+0x318>)
 80016b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016b4:	4a91      	ldr	r2, [pc, #580]	; (80018fc <MX_GPIO_Init+0x318>)
 80016b6:	f043 0310 	orr.w	r3, r3, #16
 80016ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016be:	4b8f      	ldr	r3, [pc, #572]	; (80018fc <MX_GPIO_Init+0x318>)
 80016c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016c4:	f003 0310 	and.w	r3, r3, #16
 80016c8:	613b      	str	r3, [r7, #16]
 80016ca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80016cc:	4b8b      	ldr	r3, [pc, #556]	; (80018fc <MX_GPIO_Init+0x318>)
 80016ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016d2:	4a8a      	ldr	r2, [pc, #552]	; (80018fc <MX_GPIO_Init+0x318>)
 80016d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016dc:	4b87      	ldr	r3, [pc, #540]	; (80018fc <MX_GPIO_Init+0x318>)
 80016de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016ea:	4b84      	ldr	r3, [pc, #528]	; (80018fc <MX_GPIO_Init+0x318>)
 80016ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016f0:	4a82      	ldr	r2, [pc, #520]	; (80018fc <MX_GPIO_Init+0x318>)
 80016f2:	f043 0308 	orr.w	r3, r3, #8
 80016f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016fa:	4b80      	ldr	r3, [pc, #512]	; (80018fc <MX_GPIO_Init+0x318>)
 80016fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001700:	f003 0308 	and.w	r3, r3, #8
 8001704:	60bb      	str	r3, [r7, #8]
 8001706:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001708:	4b7c      	ldr	r3, [pc, #496]	; (80018fc <MX_GPIO_Init+0x318>)
 800170a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800170e:	4a7b      	ldr	r2, [pc, #492]	; (80018fc <MX_GPIO_Init+0x318>)
 8001710:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001714:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001718:	4b78      	ldr	r3, [pc, #480]	; (80018fc <MX_GPIO_Init+0x318>)
 800171a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800171e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001722:	607b      	str	r3, [r7, #4]
 8001724:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001726:	4b75      	ldr	r3, [pc, #468]	; (80018fc <MX_GPIO_Init+0x318>)
 8001728:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800172c:	4a73      	ldr	r2, [pc, #460]	; (80018fc <MX_GPIO_Init+0x318>)
 800172e:	f043 0320 	orr.w	r3, r3, #32
 8001732:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001736:	4b71      	ldr	r3, [pc, #452]	; (80018fc <MX_GPIO_Init+0x318>)
 8001738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800173c:	f003 0320 	and.w	r3, r3, #32
 8001740:	603b      	str	r3, [r7, #0]
 8001742:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7|MII_TX_ER_nINT_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8001744:	2200      	movs	r2, #0
 8001746:	f241 01c4 	movw	r1, #4292	; 0x10c4
 800174a:	486d      	ldr	r0, [pc, #436]	; (8001900 <MX_GPIO_Init+0x31c>)
 800174c:	f004 fb98 	bl	8005e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_6, GPIO_PIN_RESET);
 8001750:	2200      	movs	r2, #0
 8001752:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8001756:	486b      	ldr	r0, [pc, #428]	; (8001904 <MX_GPIO_Init+0x320>)
 8001758:	f004 fb92 	bl	8005e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800175c:	2200      	movs	r2, #0
 800175e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001762:	4869      	ldr	r0, [pc, #420]	; (8001908 <MX_GPIO_Init+0x324>)
 8001764:	f004 fb8c 	bl	8005e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, GPIO_PIN_RESET);
 8001768:	2200      	movs	r2, #0
 800176a:	2108      	movs	r1, #8
 800176c:	4867      	ldr	r0, [pc, #412]	; (800190c <MX_GPIO_Init+0x328>)
 800176e:	f004 fb87 	bl	8005e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_1, GPIO_PIN_RESET);
 8001772:	2200      	movs	r2, #0
 8001774:	2102      	movs	r1, #2
 8001776:	4866      	ldr	r0, [pc, #408]	; (8001910 <MX_GPIO_Init+0x32c>)
 8001778:	f004 fb82 	bl	8005e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 800177c:	2200      	movs	r2, #0
 800177e:	2104      	movs	r1, #4
 8001780:	4864      	ldr	r0, [pc, #400]	; (8001914 <MX_GPIO_Init+0x330>)
 8001782:	f004 fb7d 	bl	8005e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB6 PB7 MII_TX_ER_nINT_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|MII_TX_ER_nINT_Pin|LCD_RST_Pin;
 8001786:	f241 03c4 	movw	r3, #4292	; 0x10c4
 800178a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800178c:	2301      	movs	r3, #1
 800178e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001794:	2300      	movs	r3, #0
 8001796:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001798:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800179c:	4619      	mov	r1, r3
 800179e:	4858      	ldr	r0, [pc, #352]	; (8001900 <MX_GPIO_Init+0x31c>)
 80017a0:	f004 f9be 	bl	8005b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80017a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80017a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017aa:	2302      	movs	r3, #2
 80017ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ae:	2300      	movs	r3, #0
 80017b0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b2:	2300      	movs	r3, #0
 80017b4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80017b6:	2303      	movs	r3, #3
 80017b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80017ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017be:	4619      	mov	r1, r3
 80017c0:	4855      	ldr	r0, [pc, #340]	; (8001918 <MX_GPIO_Init+0x334>)
 80017c2:	f004 f9ad 	bl	8005b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISPD7_Pin */
  GPIO_InitStruct.Pin = LCD_DISPD7_Pin;
 80017c6:	2380      	movs	r3, #128	; 0x80
 80017c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ca:	2300      	movs	r3, #0
 80017cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ce:	2300      	movs	r3, #0
 80017d0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_DISPD7_GPIO_Port, &GPIO_InitStruct);
 80017d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017d6:	4619      	mov	r1, r3
 80017d8:	4850      	ldr	r0, [pc, #320]	; (800191c <MX_GPIO_Init+0x338>)
 80017da:	f004 f9a1 	bl	8005b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE5 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 80017de:	2330      	movs	r3, #48	; 0x30
 80017e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e2:	2302      	movs	r3, #2
 80017e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ea:	2300      	movs	r3, #0
 80017ec:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 80017ee:	230a      	movs	r3, #10
 80017f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017f6:	4619      	mov	r1, r3
 80017f8:	4849      	ldr	r0, [pc, #292]	; (8001920 <MX_GPIO_Init+0x33c>)
 80017fa:	f004 f991 	bl	8005b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS2_ID_Pin OTG_FS2_PSO_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS2_ID_Pin|OTG_FS2_PSO_Pin;
 80017fe:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8001802:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001804:	2300      	movs	r3, #0
 8001806:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	2300      	movs	r3, #0
 800180a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001810:	4619      	mov	r1, r3
 8001812:	483c      	ldr	r0, [pc, #240]	; (8001904 <MX_GPIO_Init+0x320>)
 8001814:	f004 f984 	bl	8005b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001818:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800181c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800181e:	2300      	movs	r3, #0
 8001820:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001826:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800182a:	4619      	mov	r1, r3
 800182c:	483d      	ldr	r0, [pc, #244]	; (8001924 <MX_GPIO_Init+0x340>)
 800182e:	f004 f977 	bl	8005b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_6;
 8001832:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001836:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001838:	2301      	movs	r3, #1
 800183a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183c:	2300      	movs	r3, #0
 800183e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001840:	2300      	movs	r3, #0
 8001842:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001844:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001848:	4619      	mov	r1, r3
 800184a:	482e      	ldr	r0, [pc, #184]	; (8001904 <MX_GPIO_Init+0x320>)
 800184c:	f004 f968 	bl	8005b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : audio_Int_Pin */
  GPIO_InitStruct.Pin = audio_Int_Pin;
 8001850:	2380      	movs	r3, #128	; 0x80
 8001852:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001854:	2302      	movs	r3, #2
 8001856:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001858:	2300      	movs	r3, #0
 800185a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185c:	2300      	movs	r3, #0
 800185e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001860:	2306      	movs	r3, #6
 8001862:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(audio_Int_GPIO_Port, &GPIO_InitStruct);
 8001864:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001868:	4619      	mov	r1, r3
 800186a:	4828      	ldr	r0, [pc, #160]	; (800190c <MX_GPIO_Init+0x328>)
 800186c:	f004 f958 	bl	8005b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001870:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001874:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001876:	2301      	movs	r3, #1
 8001878:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187a:	2300      	movs	r3, #0
 800187c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187e:	2300      	movs	r3, #0
 8001880:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001882:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001886:	4619      	mov	r1, r3
 8001888:	481f      	ldr	r0, [pc, #124]	; (8001908 <MX_GPIO_Init+0x324>)
 800188a:	f004 f949 	bl	8005b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800188e:	2308      	movs	r3, #8
 8001890:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001892:	2301      	movs	r3, #1
 8001894:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001896:	2300      	movs	r3, #0
 8001898:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189a:	2300      	movs	r3, #0
 800189c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800189e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018a2:	4619      	mov	r1, r3
 80018a4:	4819      	ldr	r0, [pc, #100]	; (800190c <MX_GPIO_Init+0x328>)
 80018a6:	f004 f93b 	bl	8005b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80018aa:	2304      	movs	r3, #4
 80018ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018ae:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b4:	2300      	movs	r3, #0
 80018b6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80018b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018bc:	4619      	mov	r1, r3
 80018be:	4813      	ldr	r0, [pc, #76]	; (800190c <MX_GPIO_Init+0x328>)
 80018c0:	f004 f92e 	bl	8005b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 80018c4:	2301      	movs	r3, #1
 80018c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018c8:	2300      	movs	r3, #0
 80018ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018cc:	2300      	movs	r3, #0
 80018ce:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 80018d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018d4:	4619      	mov	r1, r3
 80018d6:	480e      	ldr	r0, [pc, #56]	; (8001910 <MX_GPIO_Init+0x32c>)
 80018d8:	f004 f922 	bl	8005b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PK1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80018dc:	2302      	movs	r3, #2
 80018de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e0:	2301      	movs	r3, #1
 80018e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e8:	2300      	movs	r3, #0
 80018ea:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80018ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018f0:	4619      	mov	r1, r3
 80018f2:	4807      	ldr	r0, [pc, #28]	; (8001910 <MX_GPIO_Init+0x32c>)
 80018f4:	f004 f914 	bl	8005b20 <HAL_GPIO_Init>
 80018f8:	e016      	b.n	8001928 <MX_GPIO_Init+0x344>
 80018fa:	bf00      	nop
 80018fc:	58024400 	.word	0x58024400
 8001900:	58020400 	.word	0x58020400
 8001904:	58020000 	.word	0x58020000
 8001908:	58022000 	.word	0x58022000
 800190c:	58021800 	.word	0x58021800
 8001910:	58022800 	.word	0x58022800
 8001914:	58022400 	.word	0x58022400
 8001918:	58021c00 	.word	0x58021c00
 800191c:	58020c00 	.word	0x58020c00
 8001920:	58021000 	.word	0x58021000
 8001924:	58020800 	.word	0x58020800

  /*Configure GPIO pins : PF6 PF7 PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8001928:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800192c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192e:	2302      	movs	r3, #2
 8001930:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001932:	2300      	movs	r3, #0
 8001934:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001936:	2300      	movs	r3, #0
 8001938:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800193a:	2309      	movs	r3, #9
 800193c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800193e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001942:	4619      	mov	r1, r3
 8001944:	4822      	ldr	r0, [pc, #136]	; (80019d0 <MX_GPIO_Init+0x3ec>)
 8001946:	f004 f8eb 	bl	8005b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800194a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800194e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001950:	2302      	movs	r3, #2
 8001952:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001954:	2300      	movs	r3, #0
 8001956:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001958:	2300      	movs	r3, #0
 800195a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800195c:	230a      	movs	r3, #10
 800195e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001960:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001964:	4619      	mov	r1, r3
 8001966:	481a      	ldr	r0, [pc, #104]	; (80019d0 <MX_GPIO_Init+0x3ec>)
 8001968:	f004 f8da 	bl	8005b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS2_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS2_OverCurrent_Pin;
 800196c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001970:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001972:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001976:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS2_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800197c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001980:	4619      	mov	r1, r3
 8001982:	4814      	ldr	r0, [pc, #80]	; (80019d4 <MX_GPIO_Init+0x3f0>)
 8001984:	f004 f8cc 	bl	8005b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001988:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800198c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198e:	2302      	movs	r3, #2
 8001990:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001992:	2300      	movs	r3, #0
 8001994:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001996:	2300      	movs	r3, #0
 8001998:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800199a:	2309      	movs	r3, #9
 800199c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800199e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019a2:	4619      	mov	r1, r3
 80019a4:	480c      	ldr	r0, [pc, #48]	; (80019d8 <MX_GPIO_Init+0x3f4>)
 80019a6:	f004 f8bb 	bl	8005b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 80019aa:	2304      	movs	r3, #4
 80019ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ae:	2301      	movs	r3, #1
 80019b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b6:	2300      	movs	r3, #0
 80019b8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 80019ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019be:	4619      	mov	r1, r3
 80019c0:	4806      	ldr	r0, [pc, #24]	; (80019dc <MX_GPIO_Init+0x3f8>)
 80019c2:	f004 f8ad 	bl	8005b20 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019c6:	bf00      	nop
 80019c8:	3740      	adds	r7, #64	; 0x40
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	58021400 	.word	0x58021400
 80019d4:	58021c00 	.word	0x58021c00
 80019d8:	58020c00 	.word	0x58020c00
 80019dc:	58022400 	.word	0x58022400

080019e0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]

	if (huart == &huart3) {
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	4a06      	ldr	r2, [pc, #24]	; (8001a04 <HAL_UART_RxCpltCallback+0x24>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d102      	bne.n	80019f6 <HAL_UART_RxCpltCallback+0x16>
		haveReceived = true;
 80019f0:	4b05      	ldr	r3, [pc, #20]	; (8001a08 <HAL_UART_RxCpltCallback+0x28>)
 80019f2:	2201      	movs	r2, #1
 80019f4:	701a      	strb	r2, [r3, #0]
	}

}
 80019f6:	bf00      	nop
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	24000738 	.word	0x24000738
 8001a08:	24000d0c 	.word	0x24000d0c

08001a0c <printWelcomeText>:

bool printWelcomeText(void) {
 8001a0c:	b590      	push	{r4, r7, lr}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0

	for (int i = 0; i<WELCOME_STRINGS; i++) {
 8001a12:	2300      	movs	r3, #0
 8001a14:	607b      	str	r3, [r7, #4]
 8001a16:	e01a      	b.n	8001a4e <printWelcomeText+0x42>
		if (HAL_UART_Transmit(&huart3, (const uint8_t *) welcomeStrings[i], strlen(welcomeStrings[i]), 6000) != HAL_OK) {
 8001a18:	4a11      	ldr	r2, [pc, #68]	; (8001a60 <printWelcomeText+0x54>)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8001a20:	4a0f      	ldr	r2, [pc, #60]	; (8001a60 <printWelcomeText+0x54>)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7fe fc55 	bl	80002d8 <strlen>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	b29a      	uxth	r2, r3
 8001a32:	f241 7370 	movw	r3, #6000	; 0x1770
 8001a36:	4621      	mov	r1, r4
 8001a38:	480a      	ldr	r0, [pc, #40]	; (8001a64 <printWelcomeText+0x58>)
 8001a3a:	f009 fca5 	bl	800b388 <HAL_UART_Transmit>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <printWelcomeText+0x3c>
			return false;
 8001a44:	2300      	movs	r3, #0
 8001a46:	e006      	b.n	8001a56 <printWelcomeText+0x4a>
	for (int i = 0; i<WELCOME_STRINGS; i++) {
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	607b      	str	r3, [r7, #4]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2b09      	cmp	r3, #9
 8001a52:	dde1      	ble.n	8001a18 <printWelcomeText+0xc>
		}
	}
	return true;
 8001a54:	2301      	movs	r3, #1

}
 8001a56:	4618      	mov	r0, r3
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd90      	pop	{r4, r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	24000000 	.word	0x24000000
 8001a64:	24000738 	.word	0x24000738

08001a68 <receiveValue>:

bool receiveValue(int bytesToReceive) {
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]

	if (HAL_UART_Receive_IT(&huart3, rxBuffer, bytesToReceive) != HAL_OK) {
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	461a      	mov	r2, r3
 8001a76:	4907      	ldr	r1, [pc, #28]	; (8001a94 <receiveValue+0x2c>)
 8001a78:	4807      	ldr	r0, [pc, #28]	; (8001a98 <receiveValue+0x30>)
 8001a7a:	f009 fd13 	bl	800b4a4 <HAL_UART_Receive_IT>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <receiveValue+0x20>
		return false;
 8001a84:	2300      	movs	r3, #0
 8001a86:	e000      	b.n	8001a8a <receiveValue+0x22>
	}
	return true;
 8001a88:	2301      	movs	r3, #1

}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	24000d10 	.word	0x24000d10
 8001a98:	24000738 	.word	0x24000738

08001a9c <typeToLCD>:

void typeToLCD(void) {
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0

	HAL_UART_Receive_IT(&huart3, rxBuffer, RX_BUFFER_SIZE);
 8001aa0:	2210      	movs	r2, #16
 8001aa2:	4905      	ldr	r1, [pc, #20]	; (8001ab8 <typeToLCD+0x1c>)
 8001aa4:	4805      	ldr	r0, [pc, #20]	; (8001abc <typeToLCD+0x20>)
 8001aa6:	f009 fcfd 	bl	800b4a4 <HAL_UART_Receive_IT>
	LCD_Clear();
 8001aaa:	f7fe fe7d 	bl	80007a8 <LCD_Clear>
	LCD_Write(rxBuffer);
 8001aae:	4802      	ldr	r0, [pc, #8]	; (8001ab8 <typeToLCD+0x1c>)
 8001ab0:	f7fe fe3c 	bl	800072c <LCD_Write>

}
 8001ab4:	bf00      	nop
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	24000d10 	.word	0x24000d10
 8001abc:	24000738 	.word	0x24000738

08001ac0 <moveTextLCD>:

void moveTextLCD(void) {
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0

	if (!haveReceived) {
 8001ac6:	4b23      	ldr	r3, [pc, #140]	; (8001b54 <moveTextLCD+0x94>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	f083 0301 	eor.w	r3, r3, #1
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d13b      	bne.n	8001b4c <moveTextLCD+0x8c>
		return;
	}
	HAL_Delay(1000);
 8001ad4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ad8:	f001 f93e 	bl	8002d58 <HAL_Delay>
	LCD_Write(rxBuffer);
 8001adc:	481e      	ldr	r0, [pc, #120]	; (8001b58 <moveTextLCD+0x98>)
 8001ade:	f7fe fe25 	bl	800072c <LCD_Write>
	int i = 0, stringLength = strlen(rxBuffer);
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60fb      	str	r3, [r7, #12]
 8001ae6:	481c      	ldr	r0, [pc, #112]	; (8001b58 <moveTextLCD+0x98>)
 8001ae8:	f7fe fbf6 	bl	80002d8 <strlen>
 8001aec:	4603      	mov	r3, r0
 8001aee:	607b      	str	r3, [r7, #4]
	bool edge = false;
 8001af0:	2300      	movs	r3, #0
 8001af2:	72fb      	strb	r3, [r7, #11]
	while (1) {
		if (i < (16 - stringLength) && !edge) {
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f1c3 0310 	rsb	r3, r3, #16
 8001afa:	68fa      	ldr	r2, [r7, #12]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	da13      	bge.n	8001b28 <moveTextLCD+0x68>
 8001b00:	7afb      	ldrb	r3, [r7, #11]
 8001b02:	f083 0301 	eor.w	r3, r3, #1
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d00d      	beq.n	8001b28 <moveTextLCD+0x68>
			LCD_Scroll_Display_Right();
 8001b0c:	f7fe fe53 	bl	80007b6 <LCD_Scroll_Display_Right>
			i++;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	3301      	adds	r3, #1
 8001b14:	60fb      	str	r3, [r7, #12]
			if (i == (16 - stringLength)) {
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f1c3 0310 	rsb	r3, r3, #16
 8001b1c:	68fa      	ldr	r2, [r7, #12]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d10f      	bne.n	8001b42 <moveTextLCD+0x82>
				edge = true;
 8001b22:	2301      	movs	r3, #1
 8001b24:	72fb      	strb	r3, [r7, #11]
			if (i == (16 - stringLength)) {
 8001b26:	e00c      	b.n	8001b42 <moveTextLCD+0x82>
			}
		} else if (edge) {
 8001b28:	7afb      	ldrb	r3, [r7, #11]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d009      	beq.n	8001b42 <moveTextLCD+0x82>
			LCD_Scroll_Display_Left();
 8001b2e:	f7fe fe49 	bl	80007c4 <LCD_Scroll_Display_Left>
			i--;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	3b01      	subs	r3, #1
 8001b36:	60fb      	str	r3, [r7, #12]
			if (i == 0) {
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d101      	bne.n	8001b42 <moveTextLCD+0x82>
				edge = false;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	72fb      	strb	r3, [r7, #11]
			}
		}
		HAL_Delay(1000);
 8001b42:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b46:	f001 f907 	bl	8002d58 <HAL_Delay>
		if (i < (16 - stringLength) && !edge) {
 8001b4a:	e7d3      	b.n	8001af4 <moveTextLCD+0x34>
		return;
 8001b4c:	bf00      	nop
	}

}
 8001b4e:	3710      	adds	r7, #16
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	24000d0c 	.word	0x24000d0c
 8001b58:	24000d10 	.word	0x24000d10

08001b5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b60:	b672      	cpsid	i
}
 8001b62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b64:	e7fe      	b.n	8001b64 <Error_Handler+0x8>
	...

08001b68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b6e:	4b0a      	ldr	r3, [pc, #40]	; (8001b98 <HAL_MspInit+0x30>)
 8001b70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b74:	4a08      	ldr	r2, [pc, #32]	; (8001b98 <HAL_MspInit+0x30>)
 8001b76:	f043 0302 	orr.w	r3, r3, #2
 8001b7a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001b7e:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <HAL_MspInit+0x30>)
 8001b80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b84:	f003 0302 	and.w	r3, r3, #2
 8001b88:	607b      	str	r3, [r7, #4]
 8001b8a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b8c:	bf00      	nop
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr
 8001b98:	58024400 	.word	0x58024400

08001b9c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b090      	sub	sp, #64	; 0x40
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	605a      	str	r2, [r3, #4]
 8001bae:	609a      	str	r2, [r3, #8]
 8001bb0:	60da      	str	r2, [r3, #12]
 8001bb2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a72      	ldr	r2, [pc, #456]	; (8001d84 <HAL_ADC_MspInit+0x1e8>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d14e      	bne.n	8001c5c <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001bbe:	4b72      	ldr	r3, [pc, #456]	; (8001d88 <HAL_ADC_MspInit+0x1ec>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	4a70      	ldr	r2, [pc, #448]	; (8001d88 <HAL_ADC_MspInit+0x1ec>)
 8001bc6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001bc8:	4b6f      	ldr	r3, [pc, #444]	; (8001d88 <HAL_ADC_MspInit+0x1ec>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d10e      	bne.n	8001bee <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001bd0:	4b6e      	ldr	r3, [pc, #440]	; (8001d8c <HAL_ADC_MspInit+0x1f0>)
 8001bd2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001bd6:	4a6d      	ldr	r2, [pc, #436]	; (8001d8c <HAL_ADC_MspInit+0x1f0>)
 8001bd8:	f043 0320 	orr.w	r3, r3, #32
 8001bdc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001be0:	4b6a      	ldr	r3, [pc, #424]	; (8001d8c <HAL_ADC_MspInit+0x1f0>)
 8001be2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001be6:	f003 0320 	and.w	r3, r3, #32
 8001bea:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bee:	4b67      	ldr	r3, [pc, #412]	; (8001d8c <HAL_ADC_MspInit+0x1f0>)
 8001bf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bf4:	4a65      	ldr	r2, [pc, #404]	; (8001d8c <HAL_ADC_MspInit+0x1f0>)
 8001bf6:	f043 0304 	orr.w	r3, r3, #4
 8001bfa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bfe:	4b63      	ldr	r3, [pc, #396]	; (8001d8c <HAL_ADC_MspInit+0x1f0>)
 8001c00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c04:	f003 0304 	and.w	r3, r3, #4
 8001c08:	627b      	str	r3, [r7, #36]	; 0x24
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c0c:	4b5f      	ldr	r3, [pc, #380]	; (8001d8c <HAL_ADC_MspInit+0x1f0>)
 8001c0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c12:	4a5e      	ldr	r2, [pc, #376]	; (8001d8c <HAL_ADC_MspInit+0x1f0>)
 8001c14:	f043 0301 	orr.w	r3, r3, #1
 8001c18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c1c:	4b5b      	ldr	r3, [pc, #364]	; (8001d8c <HAL_ADC_MspInit+0x1f0>)
 8001c1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	623b      	str	r3, [r7, #32]
 8001c28:	6a3b      	ldr	r3, [r7, #32]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    PA0_C     ------> ADC1_INP0
    PA1_C     ------> ADC1_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c32:	2300      	movs	r3, #0
 8001c34:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4854      	ldr	r0, [pc, #336]	; (8001d90 <HAL_ADC_MspInit+0x1f4>)
 8001c3e:	f003 ff6f 	bl	8005b20 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8001c42:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8001c46:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8001c4a:	f001 f8c9 	bl	8002de0 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8001c4e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c52:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8001c56:	f001 f8c3 	bl	8002de0 <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001c5a:	e08f      	b.n	8001d7c <HAL_ADC_MspInit+0x1e0>
  else if(hadc->Instance==ADC2)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a4c      	ldr	r2, [pc, #304]	; (8001d94 <HAL_ADC_MspInit+0x1f8>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d133      	bne.n	8001cce <HAL_ADC_MspInit+0x132>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001c66:	4b48      	ldr	r3, [pc, #288]	; (8001d88 <HAL_ADC_MspInit+0x1ec>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	4a46      	ldr	r2, [pc, #280]	; (8001d88 <HAL_ADC_MspInit+0x1ec>)
 8001c6e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001c70:	4b45      	ldr	r3, [pc, #276]	; (8001d88 <HAL_ADC_MspInit+0x1ec>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d10e      	bne.n	8001c96 <HAL_ADC_MspInit+0xfa>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001c78:	4b44      	ldr	r3, [pc, #272]	; (8001d8c <HAL_ADC_MspInit+0x1f0>)
 8001c7a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c7e:	4a43      	ldr	r2, [pc, #268]	; (8001d8c <HAL_ADC_MspInit+0x1f0>)
 8001c80:	f043 0320 	orr.w	r3, r3, #32
 8001c84:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001c88:	4b40      	ldr	r3, [pc, #256]	; (8001d8c <HAL_ADC_MspInit+0x1f0>)
 8001c8a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c8e:	f003 0320 	and.w	r3, r3, #32
 8001c92:	61fb      	str	r3, [r7, #28]
 8001c94:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c96:	4b3d      	ldr	r3, [pc, #244]	; (8001d8c <HAL_ADC_MspInit+0x1f0>)
 8001c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c9c:	4a3b      	ldr	r2, [pc, #236]	; (8001d8c <HAL_ADC_MspInit+0x1f0>)
 8001c9e:	f043 0301 	orr.w	r3, r3, #1
 8001ca2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ca6:	4b39      	ldr	r3, [pc, #228]	; (8001d8c <HAL_ADC_MspInit+0x1f0>)
 8001ca8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cac:	f003 0301 	and.w	r3, r3, #1
 8001cb0:	61bb      	str	r3, [r7, #24]
 8001cb2:	69bb      	ldr	r3, [r7, #24]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8001cb4:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8001cb8:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8001cbc:	f001 f890 	bl	8002de0 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8001cc0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001cc4:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8001cc8:	f001 f88a 	bl	8002de0 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8001ccc:	e056      	b.n	8001d7c <HAL_ADC_MspInit+0x1e0>
  else if(hadc->Instance==ADC3)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a31      	ldr	r2, [pc, #196]	; (8001d98 <HAL_ADC_MspInit+0x1fc>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d151      	bne.n	8001d7c <HAL_ADC_MspInit+0x1e0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001cd8:	4b2c      	ldr	r3, [pc, #176]	; (8001d8c <HAL_ADC_MspInit+0x1f0>)
 8001cda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cde:	4a2b      	ldr	r2, [pc, #172]	; (8001d8c <HAL_ADC_MspInit+0x1f0>)
 8001ce0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ce4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ce8:	4b28      	ldr	r3, [pc, #160]	; (8001d8c <HAL_ADC_MspInit+0x1f0>)
 8001cea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cf2:	617b      	str	r3, [r7, #20]
 8001cf4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cf6:	4b25      	ldr	r3, [pc, #148]	; (8001d8c <HAL_ADC_MspInit+0x1f0>)
 8001cf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cfc:	4a23      	ldr	r2, [pc, #140]	; (8001d8c <HAL_ADC_MspInit+0x1f0>)
 8001cfe:	f043 0320 	orr.w	r3, r3, #32
 8001d02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d06:	4b21      	ldr	r3, [pc, #132]	; (8001d8c <HAL_ADC_MspInit+0x1f0>)
 8001d08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d0c:	f003 0320 	and.w	r3, r3, #32
 8001d10:	613b      	str	r3, [r7, #16]
 8001d12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d14:	4b1d      	ldr	r3, [pc, #116]	; (8001d8c <HAL_ADC_MspInit+0x1f0>)
 8001d16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d1a:	4a1c      	ldr	r2, [pc, #112]	; (8001d8c <HAL_ADC_MspInit+0x1f0>)
 8001d1c:	f043 0304 	orr.w	r3, r3, #4
 8001d20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d24:	4b19      	ldr	r3, [pc, #100]	; (8001d8c <HAL_ADC_MspInit+0x1f0>)
 8001d26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d2a:	f003 0304 	and.w	r3, r3, #4
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001d32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d44:	4619      	mov	r1, r3
 8001d46:	4815      	ldr	r0, [pc, #84]	; (8001d9c <HAL_ADC_MspInit+0x200>)
 8001d48:	f003 feea 	bl	8005b20 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d50:	2303      	movs	r3, #3
 8001d52:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d54:	2300      	movs	r3, #0
 8001d56:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	480c      	ldr	r0, [pc, #48]	; (8001d90 <HAL_ADC_MspInit+0x1f4>)
 8001d60:	f003 fede 	bl	8005b20 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001d64:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001d68:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001d6c:	f001 f838 	bl	8002de0 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001d70:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001d74:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001d78:	f001 f832 	bl	8002de0 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8001d7c:	bf00      	nop
 8001d7e:	3740      	adds	r7, #64	; 0x40
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	40022000 	.word	0x40022000
 8001d88:	24000d28 	.word	0x24000d28
 8001d8c:	58024400 	.word	0x58024400
 8001d90:	58020800 	.word	0x58020800
 8001d94:	40022100 	.word	0x40022100
 8001d98:	58026000 	.word	0x58026000
 8001d9c:	58021400 	.word	0x58021400

08001da0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b092      	sub	sp, #72	; 0x48
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	605a      	str	r2, [r3, #4]
 8001db2:	609a      	str	r2, [r3, #8]
 8001db4:	60da      	str	r2, [r3, #12]
 8001db6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a87      	ldr	r2, [pc, #540]	; (8001fdc <HAL_ETH_MspInit+0x23c>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	f040 8108 	bne.w	8001fd4 <HAL_ETH_MspInit+0x234>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001dc4:	4b86      	ldr	r3, [pc, #536]	; (8001fe0 <HAL_ETH_MspInit+0x240>)
 8001dc6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001dca:	4a85      	ldr	r2, [pc, #532]	; (8001fe0 <HAL_ETH_MspInit+0x240>)
 8001dcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dd0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001dd4:	4b82      	ldr	r3, [pc, #520]	; (8001fe0 <HAL_ETH_MspInit+0x240>)
 8001dd6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001dda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001dde:	633b      	str	r3, [r7, #48]	; 0x30
 8001de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001de2:	4b7f      	ldr	r3, [pc, #508]	; (8001fe0 <HAL_ETH_MspInit+0x240>)
 8001de4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001de8:	4a7d      	ldr	r2, [pc, #500]	; (8001fe0 <HAL_ETH_MspInit+0x240>)
 8001dea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dee:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001df2:	4b7b      	ldr	r3, [pc, #492]	; (8001fe0 <HAL_ETH_MspInit+0x240>)
 8001df4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001df8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001e00:	4b77      	ldr	r3, [pc, #476]	; (8001fe0 <HAL_ETH_MspInit+0x240>)
 8001e02:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001e06:	4a76      	ldr	r2, [pc, #472]	; (8001fe0 <HAL_ETH_MspInit+0x240>)
 8001e08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e0c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001e10:	4b73      	ldr	r3, [pc, #460]	; (8001fe0 <HAL_ETH_MspInit+0x240>)
 8001e12:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e1e:	4b70      	ldr	r3, [pc, #448]	; (8001fe0 <HAL_ETH_MspInit+0x240>)
 8001e20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e24:	4a6e      	ldr	r2, [pc, #440]	; (8001fe0 <HAL_ETH_MspInit+0x240>)
 8001e26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e2e:	4b6c      	ldr	r3, [pc, #432]	; (8001fe0 <HAL_ETH_MspInit+0x240>)
 8001e30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e38:	627b      	str	r3, [r7, #36]	; 0x24
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e3c:	4b68      	ldr	r3, [pc, #416]	; (8001fe0 <HAL_ETH_MspInit+0x240>)
 8001e3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e42:	4a67      	ldr	r2, [pc, #412]	; (8001fe0 <HAL_ETH_MspInit+0x240>)
 8001e44:	f043 0310 	orr.w	r3, r3, #16
 8001e48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e4c:	4b64      	ldr	r3, [pc, #400]	; (8001fe0 <HAL_ETH_MspInit+0x240>)
 8001e4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e52:	f003 0310 	and.w	r3, r3, #16
 8001e56:	623b      	str	r3, [r7, #32]
 8001e58:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001e5a:	4b61      	ldr	r3, [pc, #388]	; (8001fe0 <HAL_ETH_MspInit+0x240>)
 8001e5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e60:	4a5f      	ldr	r2, [pc, #380]	; (8001fe0 <HAL_ETH_MspInit+0x240>)
 8001e62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e6a:	4b5d      	ldr	r3, [pc, #372]	; (8001fe0 <HAL_ETH_MspInit+0x240>)
 8001e6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e74:	61fb      	str	r3, [r7, #28]
 8001e76:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e78:	4b59      	ldr	r3, [pc, #356]	; (8001fe0 <HAL_ETH_MspInit+0x240>)
 8001e7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e7e:	4a58      	ldr	r2, [pc, #352]	; (8001fe0 <HAL_ETH_MspInit+0x240>)
 8001e80:	f043 0304 	orr.w	r3, r3, #4
 8001e84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e88:	4b55      	ldr	r3, [pc, #340]	; (8001fe0 <HAL_ETH_MspInit+0x240>)
 8001e8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e8e:	f003 0304 	and.w	r3, r3, #4
 8001e92:	61bb      	str	r3, [r7, #24]
 8001e94:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e96:	4b52      	ldr	r3, [pc, #328]	; (8001fe0 <HAL_ETH_MspInit+0x240>)
 8001e98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e9c:	4a50      	ldr	r2, [pc, #320]	; (8001fe0 <HAL_ETH_MspInit+0x240>)
 8001e9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ea2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ea6:	4b4e      	ldr	r3, [pc, #312]	; (8001fe0 <HAL_ETH_MspInit+0x240>)
 8001ea8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eb0:	617b      	str	r3, [r7, #20]
 8001eb2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb4:	4b4a      	ldr	r3, [pc, #296]	; (8001fe0 <HAL_ETH_MspInit+0x240>)
 8001eb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eba:	4a49      	ldr	r2, [pc, #292]	; (8001fe0 <HAL_ETH_MspInit+0x240>)
 8001ebc:	f043 0301 	orr.w	r3, r3, #1
 8001ec0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ec4:	4b46      	ldr	r3, [pc, #280]	; (8001fe0 <HAL_ETH_MspInit+0x240>)
 8001ec6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	613b      	str	r3, [r7, #16]
 8001ed0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ed2:	4b43      	ldr	r3, [pc, #268]	; (8001fe0 <HAL_ETH_MspInit+0x240>)
 8001ed4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ed8:	4a41      	ldr	r2, [pc, #260]	; (8001fe0 <HAL_ETH_MspInit+0x240>)
 8001eda:	f043 0302 	orr.w	r3, r3, #2
 8001ede:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ee2:	4b3f      	ldr	r3, [pc, #252]	; (8001fe0 <HAL_ETH_MspInit+0x240>)
 8001ee4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ee8:	f003 0302 	and.w	r3, r3, #2
 8001eec:	60fb      	str	r3, [r7, #12]
 8001eee:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PB1     ------> ETH_RXD3
    PC5     ------> ETH_RXD1
    PB0     ------> ETH_RXD2
    */
    GPIO_InitStruct.Pin = MII_TX_EN_Pin|MII_TXD1_Pin|MII_TXD0_Pin;
 8001ef0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001ef4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efa:	2300      	movs	r3, #0
 8001efc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001efe:	2300      	movs	r3, #0
 8001f00:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f02:	230b      	movs	r3, #11
 8001f04:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f06:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	4835      	ldr	r0, [pc, #212]	; (8001fe4 <HAL_ETH_MspInit+0x244>)
 8001f0e:	f003 fe07 	bl	8005b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_TXD3_Pin;
 8001f12:	2304      	movs	r3, #4
 8001f14:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f16:	2302      	movs	r3, #2
 8001f18:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f22:	230b      	movs	r3, #11
 8001f24:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(MII_TXD3_GPIO_Port, &GPIO_InitStruct);
 8001f26:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	482e      	ldr	r0, [pc, #184]	; (8001fe8 <HAL_ETH_MspInit+0x248>)
 8001f2e:	f003 fdf7 	bl	8005b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RX_ER_Pin;
 8001f32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f36:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f38:	2302      	movs	r3, #2
 8001f3a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f40:	2300      	movs	r3, #0
 8001f42:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f44:	230b      	movs	r3, #11
 8001f46:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(MII_RX_ER_GPIO_Port, &GPIO_InitStruct);
 8001f48:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4827      	ldr	r0, [pc, #156]	; (8001fec <HAL_ETH_MspInit+0x24c>)
 8001f50:	f003 fde6 	bl	8005b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDC_Pin|MII_TXD2_Pin|MII_TX_CLK_Pin|MII_RXD0_Pin
 8001f54:	233e      	movs	r3, #62	; 0x3e
 8001f56:	637b      	str	r3, [r7, #52]	; 0x34
                          |MII_RXD1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f58:	2302      	movs	r3, #2
 8001f5a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f60:	2300      	movs	r3, #0
 8001f62:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f64:	230b      	movs	r3, #11
 8001f66:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f68:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4820      	ldr	r0, [pc, #128]	; (8001ff0 <HAL_ETH_MspInit+0x250>)
 8001f70:	f003 fdd6 	bl	8005b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_CRS_Pin|MII_COL_Pin;
 8001f74:	230c      	movs	r3, #12
 8001f76:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f78:	2302      	movs	r3, #2
 8001f7a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f80:	2300      	movs	r3, #0
 8001f82:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f84:	230b      	movs	r3, #11
 8001f86:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001f88:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	4819      	ldr	r0, [pc, #100]	; (8001ff4 <HAL_ETH_MspInit+0x254>)
 8001f90:	f003 fdc6 	bl	8005b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDIO_Pin|MII_RX_CLK_Pin|MII_RX_DV_Pin;
 8001f94:	2386      	movs	r3, #134	; 0x86
 8001f96:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f98:	2302      	movs	r3, #2
 8001f9a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001fa4:	230b      	movs	r3, #11
 8001fa6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fa8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001fac:	4619      	mov	r1, r3
 8001fae:	4812      	ldr	r0, [pc, #72]	; (8001ff8 <HAL_ETH_MspInit+0x258>)
 8001fb0:	f003 fdb6 	bl	8005b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RX_D3_Pin|MII_RX_D2_Pin;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb8:	2302      	movs	r3, #2
 8001fba:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001fc4:	230b      	movs	r3, #11
 8001fc6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fc8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001fcc:	4619      	mov	r1, r3
 8001fce:	480b      	ldr	r0, [pc, #44]	; (8001ffc <HAL_ETH_MspInit+0x25c>)
 8001fd0:	f003 fda6 	bl	8005b20 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001fd4:	bf00      	nop
 8001fd6:	3748      	adds	r7, #72	; 0x48
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	40028000 	.word	0x40028000
 8001fe0:	58024400 	.word	0x58024400
 8001fe4:	58021800 	.word	0x58021800
 8001fe8:	58021000 	.word	0x58021000
 8001fec:	58022000 	.word	0x58022000
 8001ff0:	58020800 	.word	0x58020800
 8001ff4:	58021c00 	.word	0x58021c00
 8001ff8:	58020000 	.word	0x58020000
 8001ffc:	58020400 	.word	0x58020400

08002000 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b0bc      	sub	sp, #240	; 0xf0
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002008:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	605a      	str	r2, [r3, #4]
 8002012:	609a      	str	r2, [r3, #8]
 8002014:	60da      	str	r2, [r3, #12]
 8002016:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002018:	f107 0318 	add.w	r3, r7, #24
 800201c:	22c0      	movs	r2, #192	; 0xc0
 800201e:	2100      	movs	r1, #0
 8002020:	4618      	mov	r0, r3
 8002022:	f00c f98b 	bl	800e33c <memset>
  if(hfdcan->Instance==FDCAN1)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a57      	ldr	r2, [pc, #348]	; (8002188 <HAL_FDCAN_MspInit+0x188>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d151      	bne.n	80020d4 <HAL_FDCAN_MspInit+0xd4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002030:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002034:	f04f 0300 	mov.w	r3, #0
 8002038:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 800203c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002040:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002044:	f107 0318 	add.w	r3, r7, #24
 8002048:	4618      	mov	r0, r3
 800204a:	f005 fb53 	bl	80076f4 <HAL_RCCEx_PeriphCLKConfig>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8002054:	f7ff fd82 	bl	8001b5c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002058:	4b4c      	ldr	r3, [pc, #304]	; (800218c <HAL_FDCAN_MspInit+0x18c>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	3301      	adds	r3, #1
 800205e:	4a4b      	ldr	r2, [pc, #300]	; (800218c <HAL_FDCAN_MspInit+0x18c>)
 8002060:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002062:	4b4a      	ldr	r3, [pc, #296]	; (800218c <HAL_FDCAN_MspInit+0x18c>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d10e      	bne.n	8002088 <HAL_FDCAN_MspInit+0x88>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800206a:	4b49      	ldr	r3, [pc, #292]	; (8002190 <HAL_FDCAN_MspInit+0x190>)
 800206c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002070:	4a47      	ldr	r2, [pc, #284]	; (8002190 <HAL_FDCAN_MspInit+0x190>)
 8002072:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002076:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800207a:	4b45      	ldr	r3, [pc, #276]	; (8002190 <HAL_FDCAN_MspInit+0x190>)
 800207c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002084:	617b      	str	r3, [r7, #20]
 8002086:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002088:	4b41      	ldr	r3, [pc, #260]	; (8002190 <HAL_FDCAN_MspInit+0x190>)
 800208a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800208e:	4a40      	ldr	r2, [pc, #256]	; (8002190 <HAL_FDCAN_MspInit+0x190>)
 8002090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002094:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002098:	4b3d      	ldr	r3, [pc, #244]	; (8002190 <HAL_FDCAN_MspInit+0x190>)
 800209a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800209e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020a2:	613b      	str	r3, [r7, #16]
 80020a4:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PH14     ------> FDCAN1_RX
    PH13     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = FDCAN1_RX_Pin|FDCAN1_TX_Pin;
 80020a6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80020aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ae:	2302      	movs	r3, #2
 80020b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b4:	2300      	movs	r3, #0
 80020b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ba:	2300      	movs	r3, #0
 80020bc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80020c0:	2309      	movs	r3, #9
 80020c2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80020c6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80020ca:	4619      	mov	r1, r3
 80020cc:	4831      	ldr	r0, [pc, #196]	; (8002194 <HAL_FDCAN_MspInit+0x194>)
 80020ce:	f003 fd27 	bl	8005b20 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 80020d2:	e055      	b.n	8002180 <HAL_FDCAN_MspInit+0x180>
  else if(hfdcan->Instance==FDCAN2)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a2f      	ldr	r2, [pc, #188]	; (8002198 <HAL_FDCAN_MspInit+0x198>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d150      	bne.n	8002180 <HAL_FDCAN_MspInit+0x180>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80020de:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80020e2:	f04f 0300 	mov.w	r3, #0
 80020e6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80020ea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80020ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020f2:	f107 0318 	add.w	r3, r7, #24
 80020f6:	4618      	mov	r0, r3
 80020f8:	f005 fafc 	bl	80076f4 <HAL_RCCEx_PeriphCLKConfig>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <HAL_FDCAN_MspInit+0x106>
      Error_Handler();
 8002102:	f7ff fd2b 	bl	8001b5c <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002106:	4b21      	ldr	r3, [pc, #132]	; (800218c <HAL_FDCAN_MspInit+0x18c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	3301      	adds	r3, #1
 800210c:	4a1f      	ldr	r2, [pc, #124]	; (800218c <HAL_FDCAN_MspInit+0x18c>)
 800210e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002110:	4b1e      	ldr	r3, [pc, #120]	; (800218c <HAL_FDCAN_MspInit+0x18c>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d10e      	bne.n	8002136 <HAL_FDCAN_MspInit+0x136>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002118:	4b1d      	ldr	r3, [pc, #116]	; (8002190 <HAL_FDCAN_MspInit+0x190>)
 800211a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800211e:	4a1c      	ldr	r2, [pc, #112]	; (8002190 <HAL_FDCAN_MspInit+0x190>)
 8002120:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002124:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002128:	4b19      	ldr	r3, [pc, #100]	; (8002190 <HAL_FDCAN_MspInit+0x190>)
 800212a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800212e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002132:	60fb      	str	r3, [r7, #12]
 8002134:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002136:	4b16      	ldr	r3, [pc, #88]	; (8002190 <HAL_FDCAN_MspInit+0x190>)
 8002138:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800213c:	4a14      	ldr	r2, [pc, #80]	; (8002190 <HAL_FDCAN_MspInit+0x190>)
 800213e:	f043 0302 	orr.w	r3, r3, #2
 8002142:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002146:	4b12      	ldr	r3, [pc, #72]	; (8002190 <HAL_FDCAN_MspInit+0x190>)
 8002148:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	60bb      	str	r3, [r7, #8]
 8002152:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FDCAN2_RX_Pin|FDCAN2_TX_Pin;
 8002154:	f242 0320 	movw	r3, #8224	; 0x2020
 8002158:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800215c:	2302      	movs	r3, #2
 800215e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002162:	2300      	movs	r3, #0
 8002164:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002168:	2300      	movs	r3, #0
 800216a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 800216e:	2309      	movs	r3, #9
 8002170:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002174:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002178:	4619      	mov	r1, r3
 800217a:	4808      	ldr	r0, [pc, #32]	; (800219c <HAL_FDCAN_MspInit+0x19c>)
 800217c:	f003 fcd0 	bl	8005b20 <HAL_GPIO_Init>
}
 8002180:	bf00      	nop
 8002182:	37f0      	adds	r7, #240	; 0xf0
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	4000a000 	.word	0x4000a000
 800218c:	24000d2c 	.word	0x24000d2c
 8002190:	58024400 	.word	0x58024400
 8002194:	58021c00 	.word	0x58021c00
 8002198:	4000a400 	.word	0x4000a400
 800219c:	58020400 	.word	0x58020400

080021a0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b0be      	sub	sp, #248	; 0xf8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	605a      	str	r2, [r3, #4]
 80021b2:	609a      	str	r2, [r3, #8]
 80021b4:	60da      	str	r2, [r3, #12]
 80021b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021b8:	f107 0320 	add.w	r3, r7, #32
 80021bc:	22c0      	movs	r2, #192	; 0xc0
 80021be:	2100      	movs	r1, #0
 80021c0:	4618      	mov	r0, r3
 80021c2:	f00c f8bb 	bl	800e33c <memset>
  if(hltdc->Instance==LTDC)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a66      	ldr	r2, [pc, #408]	; (8002364 <HAL_LTDC_MspInit+0x1c4>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	f040 80c4 	bne.w	800235a <HAL_LTDC_MspInit+0x1ba>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80021d2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80021d6:	f04f 0300 	mov.w	r3, #0
 80021da:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.PLL3.PLL3M = 32;
 80021de:	2320      	movs	r3, #32
 80021e0:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3N = 192;
 80021e2:	23c0      	movs	r3, #192	; 0xc0
 80021e4:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80021e6:	2302      	movs	r3, #2
 80021e8:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80021ea:	2302      	movs	r3, #2
 80021ec:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 80021ee:	2302      	movs	r3, #2
 80021f0:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80021f2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80021f6:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 80021f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021fc:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80021fe:	2300      	movs	r3, #0
 8002200:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002202:	f107 0320 	add.w	r3, r7, #32
 8002206:	4618      	mov	r0, r3
 8002208:	f005 fa74 	bl	80076f4 <HAL_RCCEx_PeriphCLKConfig>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <HAL_LTDC_MspInit+0x76>
    {
      Error_Handler();
 8002212:	f7ff fca3 	bl	8001b5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002216:	4b54      	ldr	r3, [pc, #336]	; (8002368 <HAL_LTDC_MspInit+0x1c8>)
 8002218:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800221c:	4a52      	ldr	r2, [pc, #328]	; (8002368 <HAL_LTDC_MspInit+0x1c8>)
 800221e:	f043 0308 	orr.w	r3, r3, #8
 8002222:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8002226:	4b50      	ldr	r3, [pc, #320]	; (8002368 <HAL_LTDC_MspInit+0x1c8>)
 8002228:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800222c:	f003 0308 	and.w	r3, r3, #8
 8002230:	61fb      	str	r3, [r7, #28]
 8002232:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002234:	4b4c      	ldr	r3, [pc, #304]	; (8002368 <HAL_LTDC_MspInit+0x1c8>)
 8002236:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800223a:	4a4b      	ldr	r2, [pc, #300]	; (8002368 <HAL_LTDC_MspInit+0x1c8>)
 800223c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002240:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002244:	4b48      	ldr	r3, [pc, #288]	; (8002368 <HAL_LTDC_MspInit+0x1c8>)
 8002246:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800224a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800224e:	61bb      	str	r3, [r7, #24]
 8002250:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002252:	4b45      	ldr	r3, [pc, #276]	; (8002368 <HAL_LTDC_MspInit+0x1c8>)
 8002254:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002258:	4a43      	ldr	r2, [pc, #268]	; (8002368 <HAL_LTDC_MspInit+0x1c8>)
 800225a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800225e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002262:	4b41      	ldr	r3, [pc, #260]	; (8002368 <HAL_LTDC_MspInit+0x1c8>)
 8002264:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800226c:	617b      	str	r3, [r7, #20]
 800226e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002270:	4b3d      	ldr	r3, [pc, #244]	; (8002368 <HAL_LTDC_MspInit+0x1c8>)
 8002272:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002276:	4a3c      	ldr	r2, [pc, #240]	; (8002368 <HAL_LTDC_MspInit+0x1c8>)
 8002278:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800227c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002280:	4b39      	ldr	r3, [pc, #228]	; (8002368 <HAL_LTDC_MspInit+0x1c8>)
 8002282:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002286:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800228a:	613b      	str	r3, [r7, #16]
 800228c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800228e:	4b36      	ldr	r3, [pc, #216]	; (8002368 <HAL_LTDC_MspInit+0x1c8>)
 8002290:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002294:	4a34      	ldr	r2, [pc, #208]	; (8002368 <HAL_LTDC_MspInit+0x1c8>)
 8002296:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800229a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800229e:	4b32      	ldr	r3, [pc, #200]	; (8002368 <HAL_LTDC_MspInit+0x1c8>)
 80022a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022a8:	60fb      	str	r3, [r7, #12]
 80022aa:	68fb      	ldr	r3, [r7, #12]
    PJ5     ------> LTDC_R6
    PH9     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    PJ4     ------> LTDC_R5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
 80022ac:	23fc      	movs	r3, #252	; 0xfc
 80022ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_7|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b2:	2302      	movs	r3, #2
 80022b4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b8:	2300      	movs	r3, #0
 80022ba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022be:	2300      	movs	r3, #0
 80022c0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80022c4:	230e      	movs	r3, #14
 80022c6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80022ca:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80022ce:	4619      	mov	r1, r3
 80022d0:	4826      	ldr	r0, [pc, #152]	; (800236c <HAL_LTDC_MspInit+0x1cc>)
 80022d2:	f003 fc25 	bl	8005b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
 80022d6:	f24d 2303 	movw	r3, #53763	; 0xd203
 80022da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022de:	2302      	movs	r3, #2
 80022e0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e4:	2300      	movs	r3, #0
 80022e6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ea:	2300      	movs	r3, #0
 80022ec:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80022f0:	230e      	movs	r3, #14
 80022f2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80022f6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80022fa:	4619      	mov	r1, r3
 80022fc:	481c      	ldr	r0, [pc, #112]	; (8002370 <HAL_LTDC_MspInit+0x1d0>)
 80022fe:	f003 fc0f 	bl	8005b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DISP_Pin|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
 8002302:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8002306:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230a:	2302      	movs	r3, #2
 800230c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002310:	2300      	movs	r3, #0
 8002312:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002316:	2300      	movs	r3, #0
 8002318:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800231c:	230e      	movs	r3, #14
 800231e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002322:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002326:	4619      	mov	r1, r3
 8002328:	4812      	ldr	r0, [pc, #72]	; (8002374 <HAL_LTDC_MspInit+0x1d4>)
 800232a:	f003 fbf9 	bl	8005b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800232e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002332:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002336:	2302      	movs	r3, #2
 8002338:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233c:	2300      	movs	r3, #0
 800233e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002342:	2300      	movs	r3, #0
 8002344:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002348:	230e      	movs	r3, #14
 800234a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800234e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002352:	4619      	mov	r1, r3
 8002354:	4808      	ldr	r0, [pc, #32]	; (8002378 <HAL_LTDC_MspInit+0x1d8>)
 8002356:	f003 fbe3 	bl	8005b20 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800235a:	bf00      	nop
 800235c:	37f8      	adds	r7, #248	; 0xf8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	50001000 	.word	0x50001000
 8002368:	58024400 	.word	0x58024400
 800236c:	58022800 	.word	0x58022800
 8002370:	58022000 	.word	0x58022000
 8002374:	58022400 	.word	0x58022400
 8002378:	58021c00 	.word	0x58021c00

0800237c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b0b2      	sub	sp, #200	; 0xc8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002384:	f107 0308 	add.w	r3, r7, #8
 8002388:	22c0      	movs	r2, #192	; 0xc0
 800238a:	2100      	movs	r1, #0
 800238c:	4618      	mov	r0, r3
 800238e:	f00b ffd5 	bl	800e33c <memset>
  if(hrtc->Instance==RTC)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a10      	ldr	r2, [pc, #64]	; (80023d8 <HAL_RTC_MspInit+0x5c>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d119      	bne.n	80023d0 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800239c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80023a0:	f04f 0300 	mov.w	r3, #0
 80023a4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80023a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023b0:	f107 0308 	add.w	r3, r7, #8
 80023b4:	4618      	mov	r0, r3
 80023b6:	f005 f99d 	bl	80076f4 <HAL_RCCEx_PeriphCLKConfig>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 80023c0:	f7ff fbcc 	bl	8001b5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80023c4:	4b05      	ldr	r3, [pc, #20]	; (80023dc <HAL_RTC_MspInit+0x60>)
 80023c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c8:	4a04      	ldr	r2, [pc, #16]	; (80023dc <HAL_RTC_MspInit+0x60>)
 80023ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023ce:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80023d0:	bf00      	nop
 80023d2:	37c8      	adds	r7, #200	; 0xc8
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	58004000 	.word	0x58004000
 80023dc:	58024400 	.word	0x58024400

080023e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b0bc      	sub	sp, #240	; 0xf0
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80023ec:	2200      	movs	r2, #0
 80023ee:	601a      	str	r2, [r3, #0]
 80023f0:	605a      	str	r2, [r3, #4]
 80023f2:	609a      	str	r2, [r3, #8]
 80023f4:	60da      	str	r2, [r3, #12]
 80023f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023f8:	f107 0318 	add.w	r3, r7, #24
 80023fc:	22c0      	movs	r2, #192	; 0xc0
 80023fe:	2100      	movs	r1, #0
 8002400:	4618      	mov	r0, r3
 8002402:	f00b ff9b 	bl	800e33c <memset>
  if(hspi->Instance==SPI2)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a55      	ldr	r2, [pc, #340]	; (8002560 <HAL_SPI_MspInit+0x180>)
 800240c:	4293      	cmp	r3, r2
 800240e:	f040 80a3 	bne.w	8002558 <HAL_SPI_MspInit+0x178>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002412:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002416:	f04f 0300 	mov.w	r3, #0
 800241a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800241e:	2300      	movs	r3, #0
 8002420:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002422:	f107 0318 	add.w	r3, r7, #24
 8002426:	4618      	mov	r0, r3
 8002428:	f005 f964 	bl	80076f4 <HAL_RCCEx_PeriphCLKConfig>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8002432:	f7ff fb93 	bl	8001b5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002436:	4b4b      	ldr	r3, [pc, #300]	; (8002564 <HAL_SPI_MspInit+0x184>)
 8002438:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800243c:	4a49      	ldr	r2, [pc, #292]	; (8002564 <HAL_SPI_MspInit+0x184>)
 800243e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002442:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002446:	4b47      	ldr	r3, [pc, #284]	; (8002564 <HAL_SPI_MspInit+0x184>)
 8002448:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800244c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002450:	617b      	str	r3, [r7, #20]
 8002452:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002454:	4b43      	ldr	r3, [pc, #268]	; (8002564 <HAL_SPI_MspInit+0x184>)
 8002456:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800245a:	4a42      	ldr	r2, [pc, #264]	; (8002564 <HAL_SPI_MspInit+0x184>)
 800245c:	f043 0302 	orr.w	r3, r3, #2
 8002460:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002464:	4b3f      	ldr	r3, [pc, #252]	; (8002564 <HAL_SPI_MspInit+0x184>)
 8002466:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	613b      	str	r3, [r7, #16]
 8002470:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002472:	4b3c      	ldr	r3, [pc, #240]	; (8002564 <HAL_SPI_MspInit+0x184>)
 8002474:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002478:	4a3a      	ldr	r2, [pc, #232]	; (8002564 <HAL_SPI_MspInit+0x184>)
 800247a:	f043 0308 	orr.w	r3, r3, #8
 800247e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002482:	4b38      	ldr	r3, [pc, #224]	; (8002564 <HAL_SPI_MspInit+0x184>)
 8002484:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002488:	f003 0308 	and.w	r3, r3, #8
 800248c:	60fb      	str	r3, [r7, #12]
 800248e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002490:	4b34      	ldr	r3, [pc, #208]	; (8002564 <HAL_SPI_MspInit+0x184>)
 8002492:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002496:	4a33      	ldr	r2, [pc, #204]	; (8002564 <HAL_SPI_MspInit+0x184>)
 8002498:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800249c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024a0:	4b30      	ldr	r3, [pc, #192]	; (8002564 <HAL_SPI_MspInit+0x184>)
 80024a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024aa:	60bb      	str	r3, [r7, #8]
 80024ac:	68bb      	ldr	r3, [r7, #8]
    PB4 (NJTRST)     ------> SPI2_NSS
    PD3     ------> SPI2_SCK
    PI2     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80024ae:	2310      	movs	r3, #16
 80024b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b4:	2302      	movs	r3, #2
 80024b6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ba:	2300      	movs	r3, #0
 80024bc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c0:	2300      	movs	r3, #0
 80024c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 80024c6:	2307      	movs	r3, #7
 80024c8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024cc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80024d0:	4619      	mov	r1, r3
 80024d2:	4825      	ldr	r0, [pc, #148]	; (8002568 <HAL_SPI_MspInit+0x188>)
 80024d4:	f003 fb24 	bl	8005b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80024d8:	2308      	movs	r3, #8
 80024da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024de:	2302      	movs	r3, #2
 80024e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e4:	2300      	movs	r3, #0
 80024e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ea:	2300      	movs	r3, #0
 80024ec:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80024f0:	2305      	movs	r3, #5
 80024f2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024f6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80024fa:	4619      	mov	r1, r3
 80024fc:	481b      	ldr	r0, [pc, #108]	; (800256c <HAL_SPI_MspInit+0x18c>)
 80024fe:	f003 fb0f 	bl	8005b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002502:	2304      	movs	r3, #4
 8002504:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002508:	2302      	movs	r3, #2
 800250a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250e:	2300      	movs	r3, #0
 8002510:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002514:	2300      	movs	r3, #0
 8002516:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800251a:	2305      	movs	r3, #5
 800251c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002520:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002524:	4619      	mov	r1, r3
 8002526:	4812      	ldr	r0, [pc, #72]	; (8002570 <HAL_SPI_MspInit+0x190>)
 8002528:	f003 fafa 	bl	8005b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800252c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002530:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002534:	2302      	movs	r3, #2
 8002536:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253a:	2300      	movs	r3, #0
 800253c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002540:	2300      	movs	r3, #0
 8002542:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002546:	2305      	movs	r3, #5
 8002548:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800254c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002550:	4619      	mov	r1, r3
 8002552:	4805      	ldr	r0, [pc, #20]	; (8002568 <HAL_SPI_MspInit+0x188>)
 8002554:	f003 fae4 	bl	8005b20 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002558:	bf00      	nop
 800255a:	37f0      	adds	r7, #240	; 0xf0
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	40003800 	.word	0x40003800
 8002564:	58024400 	.word	0x58024400
 8002568:	58020400 	.word	0x58020400
 800256c:	58020c00 	.word	0x58020c00
 8002570:	58022000 	.word	0x58022000

08002574 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a0b      	ldr	r2, [pc, #44]	; (80025b0 <HAL_TIM_Base_MspInit+0x3c>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d10e      	bne.n	80025a4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002586:	4b0b      	ldr	r3, [pc, #44]	; (80025b4 <HAL_TIM_Base_MspInit+0x40>)
 8002588:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800258c:	4a09      	ldr	r2, [pc, #36]	; (80025b4 <HAL_TIM_Base_MspInit+0x40>)
 800258e:	f043 0302 	orr.w	r3, r3, #2
 8002592:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002596:	4b07      	ldr	r3, [pc, #28]	; (80025b4 <HAL_TIM_Base_MspInit+0x40>)
 8002598:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	60fb      	str	r3, [r7, #12]
 80025a2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80025a4:	bf00      	nop
 80025a6:	3714      	adds	r7, #20
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr
 80025b0:	40000400 	.word	0x40000400
 80025b4:	58024400 	.word	0x58024400

080025b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b0ba      	sub	sp, #232	; 0xe8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	605a      	str	r2, [r3, #4]
 80025ca:	609a      	str	r2, [r3, #8]
 80025cc:	60da      	str	r2, [r3, #12]
 80025ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025d0:	f107 0310 	add.w	r3, r7, #16
 80025d4:	22c0      	movs	r2, #192	; 0xc0
 80025d6:	2100      	movs	r1, #0
 80025d8:	4618      	mov	r0, r3
 80025da:	f00b feaf 	bl	800e33c <memset>
  if(huart->Instance==USART3)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a2b      	ldr	r2, [pc, #172]	; (8002690 <HAL_UART_MspInit+0xd8>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d14e      	bne.n	8002686 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80025e8:	f04f 0202 	mov.w	r2, #2
 80025ec:	f04f 0300 	mov.w	r3, #0
 80025f0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80025f4:	2300      	movs	r3, #0
 80025f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025fa:	f107 0310 	add.w	r3, r7, #16
 80025fe:	4618      	mov	r0, r3
 8002600:	f005 f878 	bl	80076f4 <HAL_RCCEx_PeriphCLKConfig>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800260a:	f7ff faa7 	bl	8001b5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800260e:	4b21      	ldr	r3, [pc, #132]	; (8002694 <HAL_UART_MspInit+0xdc>)
 8002610:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002614:	4a1f      	ldr	r2, [pc, #124]	; (8002694 <HAL_UART_MspInit+0xdc>)
 8002616:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800261a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800261e:	4b1d      	ldr	r3, [pc, #116]	; (8002694 <HAL_UART_MspInit+0xdc>)
 8002620:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002624:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002628:	60fb      	str	r3, [r7, #12]
 800262a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800262c:	4b19      	ldr	r3, [pc, #100]	; (8002694 <HAL_UART_MspInit+0xdc>)
 800262e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002632:	4a18      	ldr	r2, [pc, #96]	; (8002694 <HAL_UART_MspInit+0xdc>)
 8002634:	f043 0302 	orr.w	r3, r3, #2
 8002638:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800263c:	4b15      	ldr	r3, [pc, #84]	; (8002694 <HAL_UART_MspInit+0xdc>)
 800263e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	60bb      	str	r3, [r7, #8]
 8002648:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800264a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800264e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002652:	2302      	movs	r3, #2
 8002654:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002658:	2300      	movs	r3, #0
 800265a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800265e:	2300      	movs	r3, #0
 8002660:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002664:	2307      	movs	r3, #7
 8002666:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800266a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800266e:	4619      	mov	r1, r3
 8002670:	4809      	ldr	r0, [pc, #36]	; (8002698 <HAL_UART_MspInit+0xe0>)
 8002672:	f003 fa55 	bl	8005b20 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002676:	2200      	movs	r2, #0
 8002678:	2100      	movs	r1, #0
 800267a:	2027      	movs	r0, #39	; 0x27
 800267c:	f001 fd2f 	bl	80040de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002680:	2027      	movs	r0, #39	; 0x27
 8002682:	f001 fd46 	bl	8004112 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002686:	bf00      	nop
 8002688:	37e8      	adds	r7, #232	; 0xe8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	40004800 	.word	0x40004800
 8002694:	58024400 	.word	0x58024400
 8002698:	58020400 	.word	0x58020400

0800269c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b0ba      	sub	sp, #232	; 0xe8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	605a      	str	r2, [r3, #4]
 80026ae:	609a      	str	r2, [r3, #8]
 80026b0:	60da      	str	r2, [r3, #12]
 80026b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026b4:	f107 0310 	add.w	r3, r7, #16
 80026b8:	22c0      	movs	r2, #192	; 0xc0
 80026ba:	2100      	movs	r1, #0
 80026bc:	4618      	mov	r0, r3
 80026be:	f00b fe3d 	bl	800e33c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a30      	ldr	r2, [pc, #192]	; (8002788 <HAL_PCD_MspInit+0xec>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d159      	bne.n	8002780 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80026cc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80026d0:	f04f 0300 	mov.w	r3, #0
 80026d4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80026d8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80026dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026e0:	f107 0310 	add.w	r3, r7, #16
 80026e4:	4618      	mov	r0, r3
 80026e6:	f005 f805 	bl	80076f4 <HAL_RCCEx_PeriphCLKConfig>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 80026f0:	f7ff fa34 	bl	8001b5c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80026f4:	f004 f808 	bl	8006708 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026f8:	4b24      	ldr	r3, [pc, #144]	; (800278c <HAL_PCD_MspInit+0xf0>)
 80026fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026fe:	4a23      	ldr	r2, [pc, #140]	; (800278c <HAL_PCD_MspInit+0xf0>)
 8002700:	f043 0301 	orr.w	r3, r3, #1
 8002704:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002708:	4b20      	ldr	r3, [pc, #128]	; (800278c <HAL_PCD_MspInit+0xf0>)
 800270a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	60fb      	str	r3, [r7, #12]
 8002714:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = VBUS_FS2_Pin;
 8002716:	f44f 7300 	mov.w	r3, #512	; 0x200
 800271a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800271e:	2300      	movs	r3, #0
 8002720:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002724:	2300      	movs	r3, #0
 8002726:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(VBUS_FS2_GPIO_Port, &GPIO_InitStruct);
 800272a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800272e:	4619      	mov	r1, r3
 8002730:	4817      	ldr	r0, [pc, #92]	; (8002790 <HAL_PCD_MspInit+0xf4>)
 8002732:	f003 f9f5 	bl	8005b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS2_P_Pin|USB_OTG_FS2_N_Pin;
 8002736:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800273a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800273e:	2302      	movs	r3, #2
 8002740:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002744:	2300      	movs	r3, #0
 8002746:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800274a:	2300      	movs	r3, #0
 800274c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002750:	230a      	movs	r3, #10
 8002752:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002756:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800275a:	4619      	mov	r1, r3
 800275c:	480c      	ldr	r0, [pc, #48]	; (8002790 <HAL_PCD_MspInit+0xf4>)
 800275e:	f003 f9df 	bl	8005b20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002762:	4b0a      	ldr	r3, [pc, #40]	; (800278c <HAL_PCD_MspInit+0xf0>)
 8002764:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002768:	4a08      	ldr	r2, [pc, #32]	; (800278c <HAL_PCD_MspInit+0xf0>)
 800276a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800276e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002772:	4b06      	ldr	r3, [pc, #24]	; (800278c <HAL_PCD_MspInit+0xf0>)
 8002774:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002778:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800277c:	60bb      	str	r3, [r7, #8]
 800277e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002780:	bf00      	nop
 8002782:	37e8      	adds	r7, #232	; 0xe8
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	40080000 	.word	0x40080000
 800278c:	58024400 	.word	0x58024400
 8002790:	58020000 	.word	0x58020000

08002794 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002794:	b580      	push	{r7, lr}
 8002796:	b0b8      	sub	sp, #224	; 0xe0
 8002798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800279a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800279e:	2200      	movs	r2, #0
 80027a0:	601a      	str	r2, [r3, #0]
 80027a2:	605a      	str	r2, [r3, #4]
 80027a4:	609a      	str	r2, [r3, #8]
 80027a6:	60da      	str	r2, [r3, #12]
 80027a8:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80027aa:	4b51      	ldr	r3, [pc, #324]	; (80028f0 <HAL_FMC_MspInit+0x15c>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	f040 8099 	bne.w	80028e6 <HAL_FMC_MspInit+0x152>
    return;
  }
  FMC_Initialized = 1;
 80027b4:	4b4e      	ldr	r3, [pc, #312]	; (80028f0 <HAL_FMC_MspInit+0x15c>)
 80027b6:	2201      	movs	r2, #1
 80027b8:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027ba:	f107 0308 	add.w	r3, r7, #8
 80027be:	22c0      	movs	r2, #192	; 0xc0
 80027c0:	2100      	movs	r1, #0
 80027c2:	4618      	mov	r0, r3
 80027c4:	f00b fdba 	bl	800e33c <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80027c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80027cc:	f04f 0300 	mov.w	r3, #0
 80027d0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 80027d4:	2300      	movs	r3, #0
 80027d6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027d8:	f107 0308 	add.w	r3, r7, #8
 80027dc:	4618      	mov	r0, r3
 80027de:	f004 ff89 	bl	80076f4 <HAL_RCCEx_PeriphCLKConfig>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 80027e8:	f7ff f9b8 	bl	8001b5c <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80027ec:	4b41      	ldr	r3, [pc, #260]	; (80028f4 <HAL_FMC_MspInit+0x160>)
 80027ee:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80027f2:	4a40      	ldr	r2, [pc, #256]	; (80028f4 <HAL_FMC_MspInit+0x160>)
 80027f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80027f8:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80027fc:	4b3d      	ldr	r3, [pc, #244]	; (80028f4 <HAL_FMC_MspInit+0x160>)
 80027fe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002802:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002806:	607b      	str	r3, [r7, #4]
 8002808:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 800280a:	f64f 7383 	movw	r3, #65411	; 0xff83
 800280e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002812:	2302      	movs	r3, #2
 8002814:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002818:	2300      	movs	r3, #0
 800281a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800281e:	2303      	movs	r3, #3
 8002820:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002824:	230c      	movs	r3, #12
 8002826:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800282a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800282e:	4619      	mov	r1, r3
 8002830:	4831      	ldr	r0, [pc, #196]	; (80028f8 <HAL_FMC_MspInit+0x164>)
 8002832:	f003 f975 	bl	8005b20 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8002836:	f248 1333 	movw	r3, #33075	; 0x8133
 800283a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800283e:	2302      	movs	r3, #2
 8002840:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002844:	2300      	movs	r3, #0
 8002846:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800284a:	2303      	movs	r3, #3
 800284c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002850:	230c      	movs	r3, #12
 8002852:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002856:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800285a:	4619      	mov	r1, r3
 800285c:	4827      	ldr	r0, [pc, #156]	; (80028fc <HAL_FMC_MspInit+0x168>)
 800285e:	f003 f95f 	bl	8005b20 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8002862:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002866:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800286a:	2302      	movs	r3, #2
 800286c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002870:	2300      	movs	r3, #0
 8002872:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002876:	2303      	movs	r3, #3
 8002878:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800287c:	230c      	movs	r3, #12
 800287e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002882:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002886:	4619      	mov	r1, r3
 8002888:	481d      	ldr	r0, [pc, #116]	; (8002900 <HAL_FMC_MspInit+0x16c>)
 800288a:	f003 f949 	bl	8005b20 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 800288e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002892:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002896:	2302      	movs	r3, #2
 8002898:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289c:	2300      	movs	r3, #0
 800289e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028a2:	2303      	movs	r3, #3
 80028a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80028a8:	230c      	movs	r3, #12
 80028aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80028ae:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80028b2:	4619      	mov	r1, r3
 80028b4:	4813      	ldr	r0, [pc, #76]	; (8002904 <HAL_FMC_MspInit+0x170>)
 80028b6:	f003 f933 	bl	8005b20 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80028ba:	23e0      	movs	r3, #224	; 0xe0
 80028bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c0:	2302      	movs	r3, #2
 80028c2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c6:	2300      	movs	r3, #0
 80028c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028cc:	2303      	movs	r3, #3
 80028ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80028d2:	230c      	movs	r3, #12
 80028d4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80028d8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80028dc:	4619      	mov	r1, r3
 80028de:	480a      	ldr	r0, [pc, #40]	; (8002908 <HAL_FMC_MspInit+0x174>)
 80028e0:	f003 f91e 	bl	8005b20 <HAL_GPIO_Init>
 80028e4:	e000      	b.n	80028e8 <HAL_FMC_MspInit+0x154>
    return;
 80028e6:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80028e8:	37e0      	adds	r7, #224	; 0xe0
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	24000d30 	.word	0x24000d30
 80028f4:	58024400 	.word	0x58024400
 80028f8:	58021000 	.word	0x58021000
 80028fc:	58021800 	.word	0x58021800
 8002900:	58020c00 	.word	0x58020c00
 8002904:	58021400 	.word	0x58021400
 8002908:	58021c00 	.word	0x58021c00

0800290c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002914:	f7ff ff3e 	bl	8002794 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002918:	bf00      	nop
 800291a:	3708      	adds	r7, #8
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b0ba      	sub	sp, #232	; 0xe8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002928:	f107 0310 	add.w	r3, r7, #16
 800292c:	22c0      	movs	r2, #192	; 0xc0
 800292e:	2100      	movs	r1, #0
 8002930:	4618      	mov	r0, r3
 8002932:	f00b fd03 	bl	800e33c <memset>
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a45      	ldr	r2, [pc, #276]	; (8002a50 <HAL_SAI_MspInit+0x130>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d13e      	bne.n	80029be <HAL_SAI_MspInit+0x9e>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8002940:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002944:	f04f 0300 	mov.w	r3, #0
 8002948:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 800294c:	2300      	movs	r3, #0
 800294e:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002950:	f107 0310 	add.w	r3, r7, #16
 8002954:	4618      	mov	r0, r3
 8002956:	f004 fecd 	bl	80076f4 <HAL_RCCEx_PeriphCLKConfig>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <HAL_SAI_MspInit+0x44>
    {
      Error_Handler();
 8002960:	f7ff f8fc 	bl	8001b5c <Error_Handler>
    }

    if (SAI2_client == 0)
 8002964:	4b3b      	ldr	r3, [pc, #236]	; (8002a54 <HAL_SAI_MspInit+0x134>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d10e      	bne.n	800298a <HAL_SAI_MspInit+0x6a>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800296c:	4b3a      	ldr	r3, [pc, #232]	; (8002a58 <HAL_SAI_MspInit+0x138>)
 800296e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002972:	4a39      	ldr	r2, [pc, #228]	; (8002a58 <HAL_SAI_MspInit+0x138>)
 8002974:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002978:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800297c:	4b36      	ldr	r3, [pc, #216]	; (8002a58 <HAL_SAI_MspInit+0x138>)
 800297e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002982:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002986:	60fb      	str	r3, [r7, #12]
 8002988:	68fb      	ldr	r3, [r7, #12]
    }
    SAI2_client ++;
 800298a:	4b32      	ldr	r3, [pc, #200]	; (8002a54 <HAL_SAI_MspInit+0x134>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	3301      	adds	r3, #1
 8002990:	4a30      	ldr	r2, [pc, #192]	; (8002a54 <HAL_SAI_MspInit+0x134>)
 8002992:	6013      	str	r3, [r2, #0]
    PI6     ------> SAI2_SD_A
    PI5     ------> SAI2_SCK_A
    PI4     ------> SAI2_MCLK_A
    PI7     ------> SAI2_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_7;
 8002994:	23f0      	movs	r3, #240	; 0xf0
 8002996:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800299a:	2302      	movs	r3, #2
 800299c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a0:	2300      	movs	r3, #0
 80029a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029a6:	2300      	movs	r3, #0
 80029a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80029ac:	230a      	movs	r3, #10
 80029ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80029b2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80029b6:	4619      	mov	r1, r3
 80029b8:	4828      	ldr	r0, [pc, #160]	; (8002a5c <HAL_SAI_MspInit+0x13c>)
 80029ba:	f003 f8b1 	bl	8005b20 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a27      	ldr	r2, [pc, #156]	; (8002a60 <HAL_SAI_MspInit+0x140>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d13f      	bne.n	8002a48 <HAL_SAI_MspInit+0x128>
    {
      /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 80029c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029cc:	f04f 0300 	mov.w	r3, #0
 80029d0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 80029d4:	2300      	movs	r3, #0
 80029d6:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029d8:	f107 0310 	add.w	r3, r7, #16
 80029dc:	4618      	mov	r0, r3
 80029de:	f004 fe89 	bl	80076f4 <HAL_RCCEx_PeriphCLKConfig>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <HAL_SAI_MspInit+0xcc>
    {
      Error_Handler();
 80029e8:	f7ff f8b8 	bl	8001b5c <Error_Handler>
    }

      if (SAI2_client == 0)
 80029ec:	4b19      	ldr	r3, [pc, #100]	; (8002a54 <HAL_SAI_MspInit+0x134>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d10e      	bne.n	8002a12 <HAL_SAI_MspInit+0xf2>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80029f4:	4b18      	ldr	r3, [pc, #96]	; (8002a58 <HAL_SAI_MspInit+0x138>)
 80029f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80029fa:	4a17      	ldr	r2, [pc, #92]	; (8002a58 <HAL_SAI_MspInit+0x138>)
 80029fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a00:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002a04:	4b14      	ldr	r3, [pc, #80]	; (8002a58 <HAL_SAI_MspInit+0x138>)
 8002a06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a0e:	60bb      	str	r3, [r7, #8]
 8002a10:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 8002a12:	4b10      	ldr	r3, [pc, #64]	; (8002a54 <HAL_SAI_MspInit+0x134>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	3301      	adds	r3, #1
 8002a18:	4a0e      	ldr	r2, [pc, #56]	; (8002a54 <HAL_SAI_MspInit+0x134>)
 8002a1a:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002a1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a20:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a24:	2302      	movs	r3, #2
 8002a26:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a30:	2300      	movs	r3, #0
 8002a32:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002a36:	230a      	movs	r3, #10
 8002a38:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002a3c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002a40:	4619      	mov	r1, r3
 8002a42:	4808      	ldr	r0, [pc, #32]	; (8002a64 <HAL_SAI_MspInit+0x144>)
 8002a44:	f003 f86c 	bl	8005b20 <HAL_GPIO_Init>

    }
}
 8002a48:	bf00      	nop
 8002a4a:	37e8      	adds	r7, #232	; 0xe8
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	40015c04 	.word	0x40015c04
 8002a54:	24000d34 	.word	0x24000d34
 8002a58:	58024400 	.word	0x58024400
 8002a5c:	58022000 	.word	0x58022000
 8002a60:	40015c24 	.word	0x40015c24
 8002a64:	58021800 	.word	0x58021800

08002a68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a6c:	e7fe      	b.n	8002a6c <NMI_Handler+0x4>

08002a6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a72:	e7fe      	b.n	8002a72 <HardFault_Handler+0x4>

08002a74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a78:	e7fe      	b.n	8002a78 <MemManage_Handler+0x4>

08002a7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a7e:	e7fe      	b.n	8002a7e <BusFault_Handler+0x4>

08002a80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a84:	e7fe      	b.n	8002a84 <UsageFault_Handler+0x4>

08002a86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a86:	b480      	push	{r7}
 8002a88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a8a:	bf00      	nop
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a98:	bf00      	nop
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr

08002aa2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002aa6:	bf00      	nop
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ab4:	f000 f930 	bl	8002d18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ab8:	bf00      	nop
 8002aba:	bd80      	pop	{r7, pc}

08002abc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002ac0:	4802      	ldr	r0, [pc, #8]	; (8002acc <USART3_IRQHandler+0x10>)
 8002ac2:	f008 fd3b 	bl	800b53c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002ac6:	bf00      	nop
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	24000738 	.word	0x24000738

08002ad0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002ad4:	4b37      	ldr	r3, [pc, #220]	; (8002bb4 <SystemInit+0xe4>)
 8002ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ada:	4a36      	ldr	r2, [pc, #216]	; (8002bb4 <SystemInit+0xe4>)
 8002adc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ae0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002ae4:	4b34      	ldr	r3, [pc, #208]	; (8002bb8 <SystemInit+0xe8>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 030f 	and.w	r3, r3, #15
 8002aec:	2b06      	cmp	r3, #6
 8002aee:	d807      	bhi.n	8002b00 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002af0:	4b31      	ldr	r3, [pc, #196]	; (8002bb8 <SystemInit+0xe8>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f023 030f 	bic.w	r3, r3, #15
 8002af8:	4a2f      	ldr	r2, [pc, #188]	; (8002bb8 <SystemInit+0xe8>)
 8002afa:	f043 0307 	orr.w	r3, r3, #7
 8002afe:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002b00:	4b2e      	ldr	r3, [pc, #184]	; (8002bbc <SystemInit+0xec>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a2d      	ldr	r2, [pc, #180]	; (8002bbc <SystemInit+0xec>)
 8002b06:	f043 0301 	orr.w	r3, r3, #1
 8002b0a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002b0c:	4b2b      	ldr	r3, [pc, #172]	; (8002bbc <SystemInit+0xec>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002b12:	4b2a      	ldr	r3, [pc, #168]	; (8002bbc <SystemInit+0xec>)
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	4929      	ldr	r1, [pc, #164]	; (8002bbc <SystemInit+0xec>)
 8002b18:	4b29      	ldr	r3, [pc, #164]	; (8002bc0 <SystemInit+0xf0>)
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002b1e:	4b26      	ldr	r3, [pc, #152]	; (8002bb8 <SystemInit+0xe8>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0308 	and.w	r3, r3, #8
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d007      	beq.n	8002b3a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002b2a:	4b23      	ldr	r3, [pc, #140]	; (8002bb8 <SystemInit+0xe8>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f023 030f 	bic.w	r3, r3, #15
 8002b32:	4a21      	ldr	r2, [pc, #132]	; (8002bb8 <SystemInit+0xe8>)
 8002b34:	f043 0307 	orr.w	r3, r3, #7
 8002b38:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002b3a:	4b20      	ldr	r3, [pc, #128]	; (8002bbc <SystemInit+0xec>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002b40:	4b1e      	ldr	r3, [pc, #120]	; (8002bbc <SystemInit+0xec>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002b46:	4b1d      	ldr	r3, [pc, #116]	; (8002bbc <SystemInit+0xec>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002b4c:	4b1b      	ldr	r3, [pc, #108]	; (8002bbc <SystemInit+0xec>)
 8002b4e:	4a1d      	ldr	r2, [pc, #116]	; (8002bc4 <SystemInit+0xf4>)
 8002b50:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002b52:	4b1a      	ldr	r3, [pc, #104]	; (8002bbc <SystemInit+0xec>)
 8002b54:	4a1c      	ldr	r2, [pc, #112]	; (8002bc8 <SystemInit+0xf8>)
 8002b56:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002b58:	4b18      	ldr	r3, [pc, #96]	; (8002bbc <SystemInit+0xec>)
 8002b5a:	4a1c      	ldr	r2, [pc, #112]	; (8002bcc <SystemInit+0xfc>)
 8002b5c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002b5e:	4b17      	ldr	r3, [pc, #92]	; (8002bbc <SystemInit+0xec>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002b64:	4b15      	ldr	r3, [pc, #84]	; (8002bbc <SystemInit+0xec>)
 8002b66:	4a19      	ldr	r2, [pc, #100]	; (8002bcc <SystemInit+0xfc>)
 8002b68:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002b6a:	4b14      	ldr	r3, [pc, #80]	; (8002bbc <SystemInit+0xec>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002b70:	4b12      	ldr	r3, [pc, #72]	; (8002bbc <SystemInit+0xec>)
 8002b72:	4a16      	ldr	r2, [pc, #88]	; (8002bcc <SystemInit+0xfc>)
 8002b74:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002b76:	4b11      	ldr	r3, [pc, #68]	; (8002bbc <SystemInit+0xec>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002b7c:	4b0f      	ldr	r3, [pc, #60]	; (8002bbc <SystemInit+0xec>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a0e      	ldr	r2, [pc, #56]	; (8002bbc <SystemInit+0xec>)
 8002b82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b86:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002b88:	4b0c      	ldr	r3, [pc, #48]	; (8002bbc <SystemInit+0xec>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002b8e:	4b10      	ldr	r3, [pc, #64]	; (8002bd0 <SystemInit+0x100>)
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	4b10      	ldr	r3, [pc, #64]	; (8002bd4 <SystemInit+0x104>)
 8002b94:	4013      	ands	r3, r2
 8002b96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b9a:	d202      	bcs.n	8002ba2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002b9c:	4b0e      	ldr	r3, [pc, #56]	; (8002bd8 <SystemInit+0x108>)
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002ba2:	4b0e      	ldr	r3, [pc, #56]	; (8002bdc <SystemInit+0x10c>)
 8002ba4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002ba8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002baa:	bf00      	nop
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr
 8002bb4:	e000ed00 	.word	0xe000ed00
 8002bb8:	52002000 	.word	0x52002000
 8002bbc:	58024400 	.word	0x58024400
 8002bc0:	eaf6ed7f 	.word	0xeaf6ed7f
 8002bc4:	02020200 	.word	0x02020200
 8002bc8:	01ff0000 	.word	0x01ff0000
 8002bcc:	01010280 	.word	0x01010280
 8002bd0:	5c001000 	.word	0x5c001000
 8002bd4:	ffff0000 	.word	0xffff0000
 8002bd8:	51008108 	.word	0x51008108
 8002bdc:	52004000 	.word	0x52004000

08002be0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002be0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c18 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002be4:	f7ff ff74 	bl	8002ad0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002be8:	480c      	ldr	r0, [pc, #48]	; (8002c1c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002bea:	490d      	ldr	r1, [pc, #52]	; (8002c20 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002bec:	4a0d      	ldr	r2, [pc, #52]	; (8002c24 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002bee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bf0:	e002      	b.n	8002bf8 <LoopCopyDataInit>

08002bf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bf6:	3304      	adds	r3, #4

08002bf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bfc:	d3f9      	bcc.n	8002bf2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bfe:	4a0a      	ldr	r2, [pc, #40]	; (8002c28 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c00:	4c0a      	ldr	r4, [pc, #40]	; (8002c2c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c04:	e001      	b.n	8002c0a <LoopFillZerobss>

08002c06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c08:	3204      	adds	r2, #4

08002c0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c0c:	d3fb      	bcc.n	8002c06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c0e:	f00b fb63 	bl	800e2d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c12:	f7fd fe43 	bl	800089c <main>
  bx  lr
 8002c16:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002c18:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002c1c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002c20:	24000038 	.word	0x24000038
  ldr r2, =_sidata
 8002c24:	0800e4d4 	.word	0x0800e4d4
  ldr r2, =_sbss
 8002c28:	240000f8 	.word	0x240000f8
  ldr r4, =_ebss
 8002c2c:	24000d3c 	.word	0x24000d3c

08002c30 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c30:	e7fe      	b.n	8002c30 <ADC3_IRQHandler>
	...

08002c34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c3a:	2003      	movs	r0, #3
 8002c3c:	f001 fa44 	bl	80040c8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002c40:	f004 fb82 	bl	8007348 <HAL_RCC_GetSysClockFreq>
 8002c44:	4602      	mov	r2, r0
 8002c46:	4b15      	ldr	r3, [pc, #84]	; (8002c9c <HAL_Init+0x68>)
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	0a1b      	lsrs	r3, r3, #8
 8002c4c:	f003 030f 	and.w	r3, r3, #15
 8002c50:	4913      	ldr	r1, [pc, #76]	; (8002ca0 <HAL_Init+0x6c>)
 8002c52:	5ccb      	ldrb	r3, [r1, r3]
 8002c54:	f003 031f 	and.w	r3, r3, #31
 8002c58:	fa22 f303 	lsr.w	r3, r2, r3
 8002c5c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002c5e:	4b0f      	ldr	r3, [pc, #60]	; (8002c9c <HAL_Init+0x68>)
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	f003 030f 	and.w	r3, r3, #15
 8002c66:	4a0e      	ldr	r2, [pc, #56]	; (8002ca0 <HAL_Init+0x6c>)
 8002c68:	5cd3      	ldrb	r3, [r2, r3]
 8002c6a:	f003 031f 	and.w	r3, r3, #31
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	fa22 f303 	lsr.w	r3, r2, r3
 8002c74:	4a0b      	ldr	r2, [pc, #44]	; (8002ca4 <HAL_Init+0x70>)
 8002c76:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002c78:	4a0b      	ldr	r2, [pc, #44]	; (8002ca8 <HAL_Init+0x74>)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c7e:	2000      	movs	r0, #0
 8002c80:	f000 f814 	bl	8002cac <HAL_InitTick>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e002      	b.n	8002c94 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002c8e:	f7fe ff6b 	bl	8001b68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c92:	2300      	movs	r3, #0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3708      	adds	r7, #8
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	58024400 	.word	0x58024400
 8002ca0:	0800e48c 	.word	0x0800e48c
 8002ca4:	2400002c 	.word	0x2400002c
 8002ca8:	24000028 	.word	0x24000028

08002cac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002cb4:	4b15      	ldr	r3, [pc, #84]	; (8002d0c <HAL_InitTick+0x60>)
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d101      	bne.n	8002cc0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e021      	b.n	8002d04 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002cc0:	4b13      	ldr	r3, [pc, #76]	; (8002d10 <HAL_InitTick+0x64>)
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	4b11      	ldr	r3, [pc, #68]	; (8002d0c <HAL_InitTick+0x60>)
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	4619      	mov	r1, r3
 8002cca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cce:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f001 fa29 	bl	800412e <HAL_SYSTICK_Config>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d001      	beq.n	8002ce6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e00e      	b.n	8002d04 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2b0f      	cmp	r3, #15
 8002cea:	d80a      	bhi.n	8002d02 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cec:	2200      	movs	r2, #0
 8002cee:	6879      	ldr	r1, [r7, #4]
 8002cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8002cf4:	f001 f9f3 	bl	80040de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002cf8:	4a06      	ldr	r2, [pc, #24]	; (8002d14 <HAL_InitTick+0x68>)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	e000      	b.n	8002d04 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3708      	adds	r7, #8
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	24000034 	.word	0x24000034
 8002d10:	24000028 	.word	0x24000028
 8002d14:	24000030 	.word	0x24000030

08002d18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002d1c:	4b06      	ldr	r3, [pc, #24]	; (8002d38 <HAL_IncTick+0x20>)
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	461a      	mov	r2, r3
 8002d22:	4b06      	ldr	r3, [pc, #24]	; (8002d3c <HAL_IncTick+0x24>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4413      	add	r3, r2
 8002d28:	4a04      	ldr	r2, [pc, #16]	; (8002d3c <HAL_IncTick+0x24>)
 8002d2a:	6013      	str	r3, [r2, #0]
}
 8002d2c:	bf00      	nop
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	24000034 	.word	0x24000034
 8002d3c:	24000d38 	.word	0x24000d38

08002d40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
  return uwTick;
 8002d44:	4b03      	ldr	r3, [pc, #12]	; (8002d54 <HAL_GetTick+0x14>)
 8002d46:	681b      	ldr	r3, [r3, #0]
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	24000d38 	.word	0x24000d38

08002d58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d60:	f7ff ffee 	bl	8002d40 <HAL_GetTick>
 8002d64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d70:	d005      	beq.n	8002d7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d72:	4b0a      	ldr	r3, [pc, #40]	; (8002d9c <HAL_Delay+0x44>)
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	461a      	mov	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d7e:	bf00      	nop
 8002d80:	f7ff ffde 	bl	8002d40 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d8f7      	bhi.n	8002d80 <HAL_Delay+0x28>
  {
  }
}
 8002d90:	bf00      	nop
 8002d92:	bf00      	nop
 8002d94:	3710      	adds	r7, #16
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	24000034 	.word	0x24000034

08002da0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002da4:	4b03      	ldr	r3, [pc, #12]	; (8002db4 <HAL_GetREVID+0x14>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	0c1b      	lsrs	r3, r3, #16
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr
 8002db4:	5c001000 	.word	0x5c001000

08002db8 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002dc0:	4b06      	ldr	r3, [pc, #24]	; (8002ddc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002dc8:	4904      	ldr	r1, [pc, #16]	; (8002ddc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	604b      	str	r3, [r1, #4]
}
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr
 8002ddc:	58000400 	.word	0x58000400

08002de0 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002dea:	4b07      	ldr	r3, [pc, #28]	; (8002e08 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002dec:	685a      	ldr	r2, [r3, #4]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	43db      	mvns	r3, r3
 8002df2:	401a      	ands	r2, r3
 8002df4:	4904      	ldr	r1, [pc, #16]	; (8002e08 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	604b      	str	r3, [r1, #4]
}
 8002dfc:	bf00      	nop
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr
 8002e08:	58000400 	.word	0x58000400

08002e0c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	431a      	orrs	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	609a      	str	r2, [r3, #8]
}
 8002e26:	bf00      	nop
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr

08002e32 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002e32:	b480      	push	{r7}
 8002e34:	b083      	sub	sp, #12
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
 8002e3a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	431a      	orrs	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	609a      	str	r2, [r3, #8]
}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b087      	sub	sp, #28
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	607a      	str	r2, [r7, #4]
 8002e80:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	3360      	adds	r3, #96	; 0x60
 8002e86:	461a      	mov	r2, r3
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	4413      	add	r3, r2
 8002e8e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	430b      	orrs	r3, r1
 8002ea2:	431a      	orrs	r2, r3
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002ea8:	bf00      	nop
 8002eaa:	371c      	adds	r7, #28
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b085      	sub	sp, #20
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	691b      	ldr	r3, [r3, #16]
 8002ec4:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	f003 031f 	and.w	r3, r3, #31
 8002ece:	6879      	ldr	r1, [r7, #4]
 8002ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed4:	431a      	orrs	r2, r3
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	611a      	str	r2, [r3, #16]
}
 8002eda:	bf00      	nop
 8002edc:	3714      	adds	r7, #20
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr

08002ee6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	b087      	sub	sp, #28
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	60f8      	str	r0, [r7, #12]
 8002eee:	60b9      	str	r1, [r7, #8]
 8002ef0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	3360      	adds	r3, #96	; 0x60
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	4413      	add	r3, r2
 8002efe:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	431a      	orrs	r2, r3
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	601a      	str	r2, [r3, #0]
  }
}
 8002f10:	bf00      	nop
 8002f12:	371c      	adds	r7, #28
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b087      	sub	sp, #28
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	3330      	adds	r3, #48	; 0x30
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	0a1b      	lsrs	r3, r3, #8
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	f003 030c 	and.w	r3, r3, #12
 8002f38:	4413      	add	r3, r2
 8002f3a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	f003 031f 	and.w	r3, r3, #31
 8002f46:	211f      	movs	r1, #31
 8002f48:	fa01 f303 	lsl.w	r3, r1, r3
 8002f4c:	43db      	mvns	r3, r3
 8002f4e:	401a      	ands	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	0e9b      	lsrs	r3, r3, #26
 8002f54:	f003 011f 	and.w	r1, r3, #31
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	f003 031f 	and.w	r3, r3, #31
 8002f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f62:	431a      	orrs	r2, r3
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002f68:	bf00      	nop
 8002f6a:	371c      	adds	r7, #28
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b087      	sub	sp, #28
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	3314      	adds	r3, #20
 8002f84:	461a      	mov	r2, r3
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	0e5b      	lsrs	r3, r3, #25
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	f003 0304 	and.w	r3, r3, #4
 8002f90:	4413      	add	r3, r2
 8002f92:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	0d1b      	lsrs	r3, r3, #20
 8002f9c:	f003 031f 	and.w	r3, r3, #31
 8002fa0:	2107      	movs	r1, #7
 8002fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa6:	43db      	mvns	r3, r3
 8002fa8:	401a      	ands	r2, r3
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	0d1b      	lsrs	r3, r3, #20
 8002fae:	f003 031f 	and.w	r3, r3, #31
 8002fb2:	6879      	ldr	r1, [r7, #4]
 8002fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb8:	431a      	orrs	r2, r3
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002fbe:	bf00      	nop
 8002fc0:	371c      	adds	r7, #28
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
	...

08002fcc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b085      	sub	sp, #20
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fe4:	43db      	mvns	r3, r3
 8002fe6:	401a      	ands	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f003 0318 	and.w	r3, r3, #24
 8002fee:	4908      	ldr	r1, [pc, #32]	; (8003010 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002ff0:	40d9      	lsrs	r1, r3
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	400b      	ands	r3, r1
 8002ff6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ffa:	431a      	orrs	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003002:	bf00      	nop
 8003004:	3714      	adds	r7, #20
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	000fffff 	.word	0x000fffff

08003014 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689a      	ldr	r2, [r3, #8]
 8003020:	4b04      	ldr	r3, [pc, #16]	; (8003034 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003022:	4013      	ands	r3, r2
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	6093      	str	r3, [r2, #8]
}
 8003028:	bf00      	nop
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr
 8003034:	5fffffc0 	.word	0x5fffffc0

08003038 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003048:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800304c:	d101      	bne.n	8003052 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800304e:	2301      	movs	r3, #1
 8003050:	e000      	b.n	8003054 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003052:	2300      	movs	r3, #0
}
 8003054:	4618      	mov	r0, r3
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689a      	ldr	r2, [r3, #8]
 800306c:	4b05      	ldr	r3, [pc, #20]	; (8003084 <LL_ADC_EnableInternalRegulator+0x24>)
 800306e:	4013      	ands	r3, r2
 8003070:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003078:	bf00      	nop
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr
 8003084:	6fffffc0 	.word	0x6fffffc0

08003088 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003098:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800309c:	d101      	bne.n	80030a2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800309e:	2301      	movs	r3, #1
 80030a0:	e000      	b.n	80030a4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80030a2:	2300      	movs	r3, #0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f003 0301 	and.w	r3, r3, #1
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d101      	bne.n	80030c8 <LL_ADC_IsEnabled+0x18>
 80030c4:	2301      	movs	r3, #1
 80030c6:	e000      	b.n	80030ca <LL_ADC_IsEnabled+0x1a>
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr

080030d6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80030d6:	b480      	push	{r7}
 80030d8:	b083      	sub	sp, #12
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f003 0304 	and.w	r3, r3, #4
 80030e6:	2b04      	cmp	r3, #4
 80030e8:	d101      	bne.n	80030ee <LL_ADC_REG_IsConversionOngoing+0x18>
 80030ea:	2301      	movs	r3, #1
 80030ec:	e000      	b.n	80030f0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f003 0308 	and.w	r3, r3, #8
 800310c:	2b08      	cmp	r3, #8
 800310e:	d101      	bne.n	8003114 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003110:	2301      	movs	r3, #1
 8003112:	e000      	b.n	8003116 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	370c      	adds	r7, #12
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
	...

08003124 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003124:	b590      	push	{r4, r7, lr}
 8003126:	b089      	sub	sp, #36	; 0x24
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800312c:	2300      	movs	r3, #0
 800312e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003130:	2300      	movs	r3, #0
 8003132:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d101      	bne.n	800313e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e18f      	b.n	800345e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003148:	2b00      	cmp	r3, #0
 800314a:	d109      	bne.n	8003160 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f7fe fd25 	bl	8001b9c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4618      	mov	r0, r3
 8003166:	f7ff ff67 	bl	8003038 <LL_ADC_IsDeepPowerDownEnabled>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d004      	beq.n	800317a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4618      	mov	r0, r3
 8003176:	f7ff ff4d 	bl	8003014 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4618      	mov	r0, r3
 8003180:	f7ff ff82 	bl	8003088 <LL_ADC_IsInternalRegulatorEnabled>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d114      	bne.n	80031b4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4618      	mov	r0, r3
 8003190:	f7ff ff66 	bl	8003060 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003194:	4b87      	ldr	r3, [pc, #540]	; (80033b4 <HAL_ADC_Init+0x290>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	099b      	lsrs	r3, r3, #6
 800319a:	4a87      	ldr	r2, [pc, #540]	; (80033b8 <HAL_ADC_Init+0x294>)
 800319c:	fba2 2303 	umull	r2, r3, r2, r3
 80031a0:	099b      	lsrs	r3, r3, #6
 80031a2:	3301      	adds	r3, #1
 80031a4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80031a6:	e002      	b.n	80031ae <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	3b01      	subs	r3, #1
 80031ac:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d1f9      	bne.n	80031a8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7ff ff65 	bl	8003088 <LL_ADC_IsInternalRegulatorEnabled>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d10d      	bne.n	80031e0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c8:	f043 0210 	orr.w	r2, r3, #16
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d4:	f043 0201 	orr.w	r2, r3, #1
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7ff ff76 	bl	80030d6 <LL_ADC_REG_IsConversionOngoing>
 80031ea:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f0:	f003 0310 	and.w	r3, r3, #16
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	f040 8129 	bne.w	800344c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f040 8125 	bne.w	800344c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003206:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800320a:	f043 0202 	orr.w	r2, r3, #2
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4618      	mov	r0, r3
 8003218:	f7ff ff4a 	bl	80030b0 <LL_ADC_IsEnabled>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d136      	bne.n	8003290 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a65      	ldr	r2, [pc, #404]	; (80033bc <HAL_ADC_Init+0x298>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d004      	beq.n	8003236 <HAL_ADC_Init+0x112>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a63      	ldr	r2, [pc, #396]	; (80033c0 <HAL_ADC_Init+0x29c>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d10e      	bne.n	8003254 <HAL_ADC_Init+0x130>
 8003236:	4861      	ldr	r0, [pc, #388]	; (80033bc <HAL_ADC_Init+0x298>)
 8003238:	f7ff ff3a 	bl	80030b0 <LL_ADC_IsEnabled>
 800323c:	4604      	mov	r4, r0
 800323e:	4860      	ldr	r0, [pc, #384]	; (80033c0 <HAL_ADC_Init+0x29c>)
 8003240:	f7ff ff36 	bl	80030b0 <LL_ADC_IsEnabled>
 8003244:	4603      	mov	r3, r0
 8003246:	4323      	orrs	r3, r4
 8003248:	2b00      	cmp	r3, #0
 800324a:	bf0c      	ite	eq
 800324c:	2301      	moveq	r3, #1
 800324e:	2300      	movne	r3, #0
 8003250:	b2db      	uxtb	r3, r3
 8003252:	e008      	b.n	8003266 <HAL_ADC_Init+0x142>
 8003254:	485b      	ldr	r0, [pc, #364]	; (80033c4 <HAL_ADC_Init+0x2a0>)
 8003256:	f7ff ff2b 	bl	80030b0 <LL_ADC_IsEnabled>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	bf0c      	ite	eq
 8003260:	2301      	moveq	r3, #1
 8003262:	2300      	movne	r3, #0
 8003264:	b2db      	uxtb	r3, r3
 8003266:	2b00      	cmp	r3, #0
 8003268:	d012      	beq.n	8003290 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a53      	ldr	r2, [pc, #332]	; (80033bc <HAL_ADC_Init+0x298>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d004      	beq.n	800327e <HAL_ADC_Init+0x15a>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a51      	ldr	r2, [pc, #324]	; (80033c0 <HAL_ADC_Init+0x29c>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d101      	bne.n	8003282 <HAL_ADC_Init+0x15e>
 800327e:	4a52      	ldr	r2, [pc, #328]	; (80033c8 <HAL_ADC_Init+0x2a4>)
 8003280:	e000      	b.n	8003284 <HAL_ADC_Init+0x160>
 8003282:	4a52      	ldr	r2, [pc, #328]	; (80033cc <HAL_ADC_Init+0x2a8>)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	4619      	mov	r1, r3
 800328a:	4610      	mov	r0, r2
 800328c:	f7ff fdbe 	bl	8002e0c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003290:	f7ff fd86 	bl	8002da0 <HAL_GetREVID>
 8003294:	4603      	mov	r3, r0
 8003296:	f241 0203 	movw	r2, #4099	; 0x1003
 800329a:	4293      	cmp	r3, r2
 800329c:	d914      	bls.n	80032c8 <HAL_ADC_Init+0x1a4>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	2b10      	cmp	r3, #16
 80032a4:	d110      	bne.n	80032c8 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	7d5b      	ldrb	r3, [r3, #21]
 80032aa:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80032b0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80032b6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	7f1b      	ldrb	r3, [r3, #28]
 80032bc:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80032be:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80032c0:	f043 030c 	orr.w	r3, r3, #12
 80032c4:	61bb      	str	r3, [r7, #24]
 80032c6:	e00d      	b.n	80032e4 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	7d5b      	ldrb	r3, [r3, #21]
 80032cc:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80032d2:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80032d8:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	7f1b      	ldrb	r3, [r3, #28]
 80032de:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80032e0:	4313      	orrs	r3, r2
 80032e2:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	7f1b      	ldrb	r3, [r3, #28]
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d106      	bne.n	80032fa <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a1b      	ldr	r3, [r3, #32]
 80032f0:	3b01      	subs	r3, #1
 80032f2:	045b      	lsls	r3, r3, #17
 80032f4:	69ba      	ldr	r2, [r7, #24]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d009      	beq.n	8003316 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003306:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	4313      	orrs	r3, r2
 8003314:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68da      	ldr	r2, [r3, #12]
 800331c:	4b2c      	ldr	r3, [pc, #176]	; (80033d0 <HAL_ADC_Init+0x2ac>)
 800331e:	4013      	ands	r3, r2
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	6812      	ldr	r2, [r2, #0]
 8003324:	69b9      	ldr	r1, [r7, #24]
 8003326:	430b      	orrs	r3, r1
 8003328:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4618      	mov	r0, r3
 8003330:	f7ff fed1 	bl	80030d6 <LL_ADC_REG_IsConversionOngoing>
 8003334:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4618      	mov	r0, r3
 800333c:	f7ff fede 	bl	80030fc <LL_ADC_INJ_IsConversionOngoing>
 8003340:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d15f      	bne.n	8003408 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d15c      	bne.n	8003408 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	7d1b      	ldrb	r3, [r3, #20]
 8003352:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8003358:	4313      	orrs	r3, r2
 800335a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	68da      	ldr	r2, [r3, #12]
 8003362:	4b1c      	ldr	r3, [pc, #112]	; (80033d4 <HAL_ADC_Init+0x2b0>)
 8003364:	4013      	ands	r3, r2
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	6812      	ldr	r2, [r2, #0]
 800336a:	69b9      	ldr	r1, [r7, #24]
 800336c:	430b      	orrs	r3, r1
 800336e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003376:	2b01      	cmp	r3, #1
 8003378:	d130      	bne.n	80033dc <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	691a      	ldr	r2, [r3, #16]
 8003386:	4b14      	ldr	r3, [pc, #80]	; (80033d8 <HAL_ADC_Init+0x2b4>)
 8003388:	4013      	ands	r3, r2
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800338e:	3a01      	subs	r2, #1
 8003390:	0411      	lsls	r1, r2, #16
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003396:	4311      	orrs	r1, r2
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800339c:	4311      	orrs	r1, r2
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80033a2:	430a      	orrs	r2, r1
 80033a4:	431a      	orrs	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f042 0201 	orr.w	r2, r2, #1
 80033ae:	611a      	str	r2, [r3, #16]
 80033b0:	e01c      	b.n	80033ec <HAL_ADC_Init+0x2c8>
 80033b2:	bf00      	nop
 80033b4:	24000028 	.word	0x24000028
 80033b8:	053e2d63 	.word	0x053e2d63
 80033bc:	40022000 	.word	0x40022000
 80033c0:	40022100 	.word	0x40022100
 80033c4:	58026000 	.word	0x58026000
 80033c8:	40022300 	.word	0x40022300
 80033cc:	58026300 	.word	0x58026300
 80033d0:	fff0c003 	.word	0xfff0c003
 80033d4:	ffffbffc 	.word	0xffffbffc
 80033d8:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	691a      	ldr	r2, [r3, #16]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f022 0201 	bic.w	r2, r2, #1
 80033ea:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	430a      	orrs	r2, r1
 8003400:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 fb80 	bl	8003b08 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d10c      	bne.n	800342a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003416:	f023 010f 	bic.w	r1, r3, #15
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	1e5a      	subs	r2, r3, #1
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	430a      	orrs	r2, r1
 8003426:	631a      	str	r2, [r3, #48]	; 0x30
 8003428:	e007      	b.n	800343a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f022 020f 	bic.w	r2, r2, #15
 8003438:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800343e:	f023 0303 	bic.w	r3, r3, #3
 8003442:	f043 0201 	orr.w	r2, r3, #1
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	655a      	str	r2, [r3, #84]	; 0x54
 800344a:	e007      	b.n	800345c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003450:	f043 0210 	orr.w	r2, r3, #16
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800345c:	7ffb      	ldrb	r3, [r7, #31]
}
 800345e:	4618      	mov	r0, r3
 8003460:	3724      	adds	r7, #36	; 0x24
 8003462:	46bd      	mov	sp, r7
 8003464:	bd90      	pop	{r4, r7, pc}
 8003466:	bf00      	nop

08003468 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003468:	b590      	push	{r4, r7, lr}
 800346a:	b0a1      	sub	sp, #132	; 0x84
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003472:	2300      	movs	r3, #0
 8003474:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003478:	2300      	movs	r3, #0
 800347a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	4a9d      	ldr	r2, [pc, #628]	; (80036f8 <HAL_ADC_ConfigChannel+0x290>)
 8003482:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800348a:	2b01      	cmp	r3, #1
 800348c:	d101      	bne.n	8003492 <HAL_ADC_ConfigChannel+0x2a>
 800348e:	2302      	movs	r3, #2
 8003490:	e321      	b.n	8003ad6 <HAL_ADC_ConfigChannel+0x66e>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2201      	movs	r2, #1
 8003496:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4618      	mov	r0, r3
 80034a0:	f7ff fe19 	bl	80030d6 <LL_ADC_REG_IsConversionOngoing>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	f040 8306 	bne.w	8003ab8 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d108      	bne.n	80034ca <HAL_ADC_ConfigChannel+0x62>
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	0e9b      	lsrs	r3, r3, #26
 80034be:	f003 031f 	and.w	r3, r3, #31
 80034c2:	2201      	movs	r2, #1
 80034c4:	fa02 f303 	lsl.w	r3, r2, r3
 80034c8:	e016      	b.n	80034f8 <HAL_ADC_ConfigChannel+0x90>
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034d2:	fa93 f3a3 	rbit	r3, r3
 80034d6:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80034d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034da:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80034dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d101      	bne.n	80034e6 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80034e2:	2320      	movs	r3, #32
 80034e4:	e003      	b.n	80034ee <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80034e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034e8:	fab3 f383 	clz	r3, r3
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	f003 031f 	and.w	r3, r3, #31
 80034f2:	2201      	movs	r2, #1
 80034f4:	fa02 f303 	lsl.w	r3, r2, r3
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	6812      	ldr	r2, [r2, #0]
 80034fc:	69d1      	ldr	r1, [r2, #28]
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	6812      	ldr	r2, [r2, #0]
 8003502:	430b      	orrs	r3, r1
 8003504:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6818      	ldr	r0, [r3, #0]
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	6859      	ldr	r1, [r3, #4]
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	461a      	mov	r2, r3
 8003514:	f7ff fd02 	bl	8002f1c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4618      	mov	r0, r3
 800351e:	f7ff fdda 	bl	80030d6 <LL_ADC_REG_IsConversionOngoing>
 8003522:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4618      	mov	r0, r3
 800352a:	f7ff fde7 	bl	80030fc <LL_ADC_INJ_IsConversionOngoing>
 800352e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003530:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003532:	2b00      	cmp	r3, #0
 8003534:	f040 80b3 	bne.w	800369e <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003538:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800353a:	2b00      	cmp	r3, #0
 800353c:	f040 80af 	bne.w	800369e <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6818      	ldr	r0, [r3, #0]
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	6819      	ldr	r1, [r3, #0]
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	461a      	mov	r2, r3
 800354e:	f7ff fd11 	bl	8002f74 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003552:	4b6a      	ldr	r3, [pc, #424]	; (80036fc <HAL_ADC_ConfigChannel+0x294>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800355a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800355e:	d10b      	bne.n	8003578 <HAL_ADC_ConfigChannel+0x110>
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	695a      	ldr	r2, [r3, #20]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	089b      	lsrs	r3, r3, #2
 800356c:	f003 0307 	and.w	r3, r3, #7
 8003570:	005b      	lsls	r3, r3, #1
 8003572:	fa02 f303 	lsl.w	r3, r2, r3
 8003576:	e01d      	b.n	80035b4 <HAL_ADC_ConfigChannel+0x14c>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	f003 0310 	and.w	r3, r3, #16
 8003582:	2b00      	cmp	r3, #0
 8003584:	d10b      	bne.n	800359e <HAL_ADC_ConfigChannel+0x136>
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	695a      	ldr	r2, [r3, #20]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	089b      	lsrs	r3, r3, #2
 8003592:	f003 0307 	and.w	r3, r3, #7
 8003596:	005b      	lsls	r3, r3, #1
 8003598:	fa02 f303 	lsl.w	r3, r2, r3
 800359c:	e00a      	b.n	80035b4 <HAL_ADC_ConfigChannel+0x14c>
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	695a      	ldr	r2, [r3, #20]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	089b      	lsrs	r3, r3, #2
 80035aa:	f003 0304 	and.w	r3, r3, #4
 80035ae:	005b      	lsls	r3, r3, #1
 80035b0:	fa02 f303 	lsl.w	r3, r2, r3
 80035b4:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	2b04      	cmp	r3, #4
 80035bc:	d027      	beq.n	800360e <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6818      	ldr	r0, [r3, #0]
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	6919      	ldr	r1, [r3, #16]
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035cc:	f7ff fc52 	bl	8002e74 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6818      	ldr	r0, [r3, #0]
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	6919      	ldr	r1, [r3, #16]
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	7e5b      	ldrb	r3, [r3, #25]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d102      	bne.n	80035e6 <HAL_ADC_ConfigChannel+0x17e>
 80035e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80035e4:	e000      	b.n	80035e8 <HAL_ADC_ConfigChannel+0x180>
 80035e6:	2300      	movs	r3, #0
 80035e8:	461a      	mov	r2, r3
 80035ea:	f7ff fc7c 	bl	8002ee6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6818      	ldr	r0, [r3, #0]
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	6919      	ldr	r1, [r3, #16]
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	7e1b      	ldrb	r3, [r3, #24]
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d102      	bne.n	8003604 <HAL_ADC_ConfigChannel+0x19c>
 80035fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003602:	e000      	b.n	8003606 <HAL_ADC_ConfigChannel+0x19e>
 8003604:	2300      	movs	r3, #0
 8003606:	461a      	mov	r2, r3
 8003608:	f7ff fc54 	bl	8002eb4 <LL_ADC_SetDataRightShift>
 800360c:	e047      	b.n	800369e <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003614:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	069b      	lsls	r3, r3, #26
 800361e:	429a      	cmp	r2, r3
 8003620:	d107      	bne.n	8003632 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003630:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003638:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	069b      	lsls	r3, r3, #26
 8003642:	429a      	cmp	r2, r3
 8003644:	d107      	bne.n	8003656 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003654:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800365c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	069b      	lsls	r3, r3, #26
 8003666:	429a      	cmp	r2, r3
 8003668:	d107      	bne.n	800367a <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003678:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003680:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	069b      	lsls	r3, r3, #26
 800368a:	429a      	cmp	r2, r3
 800368c:	d107      	bne.n	800369e <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800369c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7ff fd04 	bl	80030b0 <LL_ADC_IsEnabled>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	f040 820d 	bne.w	8003aca <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6818      	ldr	r0, [r3, #0]
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	6819      	ldr	r1, [r3, #0]
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	461a      	mov	r2, r3
 80036be:	f7ff fc85 	bl	8002fcc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	4a0c      	ldr	r2, [pc, #48]	; (80036f8 <HAL_ADC_ConfigChannel+0x290>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	f040 8133 	bne.w	8003934 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d110      	bne.n	8003700 <HAL_ADC_ConfigChannel+0x298>
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	0e9b      	lsrs	r3, r3, #26
 80036e4:	3301      	adds	r3, #1
 80036e6:	f003 031f 	and.w	r3, r3, #31
 80036ea:	2b09      	cmp	r3, #9
 80036ec:	bf94      	ite	ls
 80036ee:	2301      	movls	r3, #1
 80036f0:	2300      	movhi	r3, #0
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	e01e      	b.n	8003734 <HAL_ADC_ConfigChannel+0x2cc>
 80036f6:	bf00      	nop
 80036f8:	47ff0000 	.word	0x47ff0000
 80036fc:	5c001000 	.word	0x5c001000
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003706:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003708:	fa93 f3a3 	rbit	r3, r3
 800370c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800370e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003710:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003712:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003714:	2b00      	cmp	r3, #0
 8003716:	d101      	bne.n	800371c <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8003718:	2320      	movs	r3, #32
 800371a:	e003      	b.n	8003724 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 800371c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800371e:	fab3 f383 	clz	r3, r3
 8003722:	b2db      	uxtb	r3, r3
 8003724:	3301      	adds	r3, #1
 8003726:	f003 031f 	and.w	r3, r3, #31
 800372a:	2b09      	cmp	r3, #9
 800372c:	bf94      	ite	ls
 800372e:	2301      	movls	r3, #1
 8003730:	2300      	movhi	r3, #0
 8003732:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003734:	2b00      	cmp	r3, #0
 8003736:	d079      	beq.n	800382c <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003740:	2b00      	cmp	r3, #0
 8003742:	d107      	bne.n	8003754 <HAL_ADC_ConfigChannel+0x2ec>
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	0e9b      	lsrs	r3, r3, #26
 800374a:	3301      	adds	r3, #1
 800374c:	069b      	lsls	r3, r3, #26
 800374e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003752:	e015      	b.n	8003780 <HAL_ADC_ConfigChannel+0x318>
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800375c:	fa93 f3a3 	rbit	r3, r3
 8003760:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003762:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003764:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003766:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003768:	2b00      	cmp	r3, #0
 800376a:	d101      	bne.n	8003770 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 800376c:	2320      	movs	r3, #32
 800376e:	e003      	b.n	8003778 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003770:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003772:	fab3 f383 	clz	r3, r3
 8003776:	b2db      	uxtb	r3, r3
 8003778:	3301      	adds	r3, #1
 800377a:	069b      	lsls	r3, r3, #26
 800377c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003788:	2b00      	cmp	r3, #0
 800378a:	d109      	bne.n	80037a0 <HAL_ADC_ConfigChannel+0x338>
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	0e9b      	lsrs	r3, r3, #26
 8003792:	3301      	adds	r3, #1
 8003794:	f003 031f 	and.w	r3, r3, #31
 8003798:	2101      	movs	r1, #1
 800379a:	fa01 f303 	lsl.w	r3, r1, r3
 800379e:	e017      	b.n	80037d0 <HAL_ADC_ConfigChannel+0x368>
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037a8:	fa93 f3a3 	rbit	r3, r3
 80037ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80037ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037b0:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80037b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d101      	bne.n	80037bc <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80037b8:	2320      	movs	r3, #32
 80037ba:	e003      	b.n	80037c4 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 80037bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037be:	fab3 f383 	clz	r3, r3
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	3301      	adds	r3, #1
 80037c6:	f003 031f 	and.w	r3, r3, #31
 80037ca:	2101      	movs	r1, #1
 80037cc:	fa01 f303 	lsl.w	r3, r1, r3
 80037d0:	ea42 0103 	orr.w	r1, r2, r3
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d10a      	bne.n	80037f6 <HAL_ADC_ConfigChannel+0x38e>
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	0e9b      	lsrs	r3, r3, #26
 80037e6:	3301      	adds	r3, #1
 80037e8:	f003 021f 	and.w	r2, r3, #31
 80037ec:	4613      	mov	r3, r2
 80037ee:	005b      	lsls	r3, r3, #1
 80037f0:	4413      	add	r3, r2
 80037f2:	051b      	lsls	r3, r3, #20
 80037f4:	e018      	b.n	8003828 <HAL_ADC_ConfigChannel+0x3c0>
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037fe:	fa93 f3a3 	rbit	r3, r3
 8003802:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003806:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800380a:	2b00      	cmp	r3, #0
 800380c:	d101      	bne.n	8003812 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 800380e:	2320      	movs	r3, #32
 8003810:	e003      	b.n	800381a <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8003812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003814:	fab3 f383 	clz	r3, r3
 8003818:	b2db      	uxtb	r3, r3
 800381a:	3301      	adds	r3, #1
 800381c:	f003 021f 	and.w	r2, r3, #31
 8003820:	4613      	mov	r3, r2
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	4413      	add	r3, r2
 8003826:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003828:	430b      	orrs	r3, r1
 800382a:	e07e      	b.n	800392a <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003834:	2b00      	cmp	r3, #0
 8003836:	d107      	bne.n	8003848 <HAL_ADC_ConfigChannel+0x3e0>
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	0e9b      	lsrs	r3, r3, #26
 800383e:	3301      	adds	r3, #1
 8003840:	069b      	lsls	r3, r3, #26
 8003842:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003846:	e015      	b.n	8003874 <HAL_ADC_ConfigChannel+0x40c>
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800384e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003850:	fa93 f3a3 	rbit	r3, r3
 8003854:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003858:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800385a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800385c:	2b00      	cmp	r3, #0
 800385e:	d101      	bne.n	8003864 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003860:	2320      	movs	r3, #32
 8003862:	e003      	b.n	800386c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003866:	fab3 f383 	clz	r3, r3
 800386a:	b2db      	uxtb	r3, r3
 800386c:	3301      	adds	r3, #1
 800386e:	069b      	lsls	r3, r3, #26
 8003870:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800387c:	2b00      	cmp	r3, #0
 800387e:	d109      	bne.n	8003894 <HAL_ADC_ConfigChannel+0x42c>
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	0e9b      	lsrs	r3, r3, #26
 8003886:	3301      	adds	r3, #1
 8003888:	f003 031f 	and.w	r3, r3, #31
 800388c:	2101      	movs	r1, #1
 800388e:	fa01 f303 	lsl.w	r3, r1, r3
 8003892:	e017      	b.n	80038c4 <HAL_ADC_ConfigChannel+0x45c>
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	fa93 f3a3 	rbit	r3, r3
 80038a0:	61bb      	str	r3, [r7, #24]
  return result;
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80038a6:	6a3b      	ldr	r3, [r7, #32]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d101      	bne.n	80038b0 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 80038ac:	2320      	movs	r3, #32
 80038ae:	e003      	b.n	80038b8 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 80038b0:	6a3b      	ldr	r3, [r7, #32]
 80038b2:	fab3 f383 	clz	r3, r3
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	3301      	adds	r3, #1
 80038ba:	f003 031f 	and.w	r3, r3, #31
 80038be:	2101      	movs	r1, #1
 80038c0:	fa01 f303 	lsl.w	r3, r1, r3
 80038c4:	ea42 0103 	orr.w	r1, r2, r3
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d10d      	bne.n	80038f0 <HAL_ADC_ConfigChannel+0x488>
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	0e9b      	lsrs	r3, r3, #26
 80038da:	3301      	adds	r3, #1
 80038dc:	f003 021f 	and.w	r2, r3, #31
 80038e0:	4613      	mov	r3, r2
 80038e2:	005b      	lsls	r3, r3, #1
 80038e4:	4413      	add	r3, r2
 80038e6:	3b1e      	subs	r3, #30
 80038e8:	051b      	lsls	r3, r3, #20
 80038ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80038ee:	e01b      	b.n	8003928 <HAL_ADC_ConfigChannel+0x4c0>
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	fa93 f3a3 	rbit	r3, r3
 80038fc:	60fb      	str	r3, [r7, #12]
  return result;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d101      	bne.n	800390c <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8003908:	2320      	movs	r3, #32
 800390a:	e003      	b.n	8003914 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	fab3 f383 	clz	r3, r3
 8003912:	b2db      	uxtb	r3, r3
 8003914:	3301      	adds	r3, #1
 8003916:	f003 021f 	and.w	r2, r3, #31
 800391a:	4613      	mov	r3, r2
 800391c:	005b      	lsls	r3, r3, #1
 800391e:	4413      	add	r3, r2
 8003920:	3b1e      	subs	r3, #30
 8003922:	051b      	lsls	r3, r3, #20
 8003924:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003928:	430b      	orrs	r3, r1
 800392a:	683a      	ldr	r2, [r7, #0]
 800392c:	6892      	ldr	r2, [r2, #8]
 800392e:	4619      	mov	r1, r3
 8003930:	f7ff fb20 	bl	8002f74 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2b00      	cmp	r3, #0
 800393a:	f280 80c6 	bge.w	8003aca <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a67      	ldr	r2, [pc, #412]	; (8003ae0 <HAL_ADC_ConfigChannel+0x678>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d004      	beq.n	8003952 <HAL_ADC_ConfigChannel+0x4ea>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a65      	ldr	r2, [pc, #404]	; (8003ae4 <HAL_ADC_ConfigChannel+0x67c>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d101      	bne.n	8003956 <HAL_ADC_ConfigChannel+0x4ee>
 8003952:	4b65      	ldr	r3, [pc, #404]	; (8003ae8 <HAL_ADC_ConfigChannel+0x680>)
 8003954:	e000      	b.n	8003958 <HAL_ADC_ConfigChannel+0x4f0>
 8003956:	4b65      	ldr	r3, [pc, #404]	; (8003aec <HAL_ADC_ConfigChannel+0x684>)
 8003958:	4618      	mov	r0, r3
 800395a:	f7ff fa7d 	bl	8002e58 <LL_ADC_GetCommonPathInternalCh>
 800395e:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a5e      	ldr	r2, [pc, #376]	; (8003ae0 <HAL_ADC_ConfigChannel+0x678>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d004      	beq.n	8003974 <HAL_ADC_ConfigChannel+0x50c>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a5d      	ldr	r2, [pc, #372]	; (8003ae4 <HAL_ADC_ConfigChannel+0x67c>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d10e      	bne.n	8003992 <HAL_ADC_ConfigChannel+0x52a>
 8003974:	485a      	ldr	r0, [pc, #360]	; (8003ae0 <HAL_ADC_ConfigChannel+0x678>)
 8003976:	f7ff fb9b 	bl	80030b0 <LL_ADC_IsEnabled>
 800397a:	4604      	mov	r4, r0
 800397c:	4859      	ldr	r0, [pc, #356]	; (8003ae4 <HAL_ADC_ConfigChannel+0x67c>)
 800397e:	f7ff fb97 	bl	80030b0 <LL_ADC_IsEnabled>
 8003982:	4603      	mov	r3, r0
 8003984:	4323      	orrs	r3, r4
 8003986:	2b00      	cmp	r3, #0
 8003988:	bf0c      	ite	eq
 800398a:	2301      	moveq	r3, #1
 800398c:	2300      	movne	r3, #0
 800398e:	b2db      	uxtb	r3, r3
 8003990:	e008      	b.n	80039a4 <HAL_ADC_ConfigChannel+0x53c>
 8003992:	4857      	ldr	r0, [pc, #348]	; (8003af0 <HAL_ADC_ConfigChannel+0x688>)
 8003994:	f7ff fb8c 	bl	80030b0 <LL_ADC_IsEnabled>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	bf0c      	ite	eq
 800399e:	2301      	moveq	r3, #1
 80039a0:	2300      	movne	r3, #0
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d07d      	beq.n	8003aa4 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a51      	ldr	r2, [pc, #324]	; (8003af4 <HAL_ADC_ConfigChannel+0x68c>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d130      	bne.n	8003a14 <HAL_ADC_ConfigChannel+0x5ac>
 80039b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d12b      	bne.n	8003a14 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a4b      	ldr	r2, [pc, #300]	; (8003af0 <HAL_ADC_ConfigChannel+0x688>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	f040 8081 	bne.w	8003aca <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a44      	ldr	r2, [pc, #272]	; (8003ae0 <HAL_ADC_ConfigChannel+0x678>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d004      	beq.n	80039dc <HAL_ADC_ConfigChannel+0x574>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a43      	ldr	r2, [pc, #268]	; (8003ae4 <HAL_ADC_ConfigChannel+0x67c>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d101      	bne.n	80039e0 <HAL_ADC_ConfigChannel+0x578>
 80039dc:	4a42      	ldr	r2, [pc, #264]	; (8003ae8 <HAL_ADC_ConfigChannel+0x680>)
 80039de:	e000      	b.n	80039e2 <HAL_ADC_ConfigChannel+0x57a>
 80039e0:	4a42      	ldr	r2, [pc, #264]	; (8003aec <HAL_ADC_ConfigChannel+0x684>)
 80039e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80039e8:	4619      	mov	r1, r3
 80039ea:	4610      	mov	r0, r2
 80039ec:	f7ff fa21 	bl	8002e32 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80039f0:	4b41      	ldr	r3, [pc, #260]	; (8003af8 <HAL_ADC_ConfigChannel+0x690>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	099b      	lsrs	r3, r3, #6
 80039f6:	4a41      	ldr	r2, [pc, #260]	; (8003afc <HAL_ADC_ConfigChannel+0x694>)
 80039f8:	fba2 2303 	umull	r2, r3, r2, r3
 80039fc:	099b      	lsrs	r3, r3, #6
 80039fe:	3301      	adds	r3, #1
 8003a00:	005b      	lsls	r3, r3, #1
 8003a02:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003a04:	e002      	b.n	8003a0c <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1f9      	bne.n	8003a06 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a12:	e05a      	b.n	8003aca <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a39      	ldr	r2, [pc, #228]	; (8003b00 <HAL_ADC_ConfigChannel+0x698>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d11e      	bne.n	8003a5c <HAL_ADC_ConfigChannel+0x5f4>
 8003a1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d119      	bne.n	8003a5c <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a30      	ldr	r2, [pc, #192]	; (8003af0 <HAL_ADC_ConfigChannel+0x688>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d14b      	bne.n	8003aca <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a2a      	ldr	r2, [pc, #168]	; (8003ae0 <HAL_ADC_ConfigChannel+0x678>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d004      	beq.n	8003a46 <HAL_ADC_ConfigChannel+0x5de>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a28      	ldr	r2, [pc, #160]	; (8003ae4 <HAL_ADC_ConfigChannel+0x67c>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d101      	bne.n	8003a4a <HAL_ADC_ConfigChannel+0x5e2>
 8003a46:	4a28      	ldr	r2, [pc, #160]	; (8003ae8 <HAL_ADC_ConfigChannel+0x680>)
 8003a48:	e000      	b.n	8003a4c <HAL_ADC_ConfigChannel+0x5e4>
 8003a4a:	4a28      	ldr	r2, [pc, #160]	; (8003aec <HAL_ADC_ConfigChannel+0x684>)
 8003a4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a52:	4619      	mov	r1, r3
 8003a54:	4610      	mov	r0, r2
 8003a56:	f7ff f9ec 	bl	8002e32 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a5a:	e036      	b.n	8003aca <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a28      	ldr	r2, [pc, #160]	; (8003b04 <HAL_ADC_ConfigChannel+0x69c>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d131      	bne.n	8003aca <HAL_ADC_ConfigChannel+0x662>
 8003a66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d12c      	bne.n	8003aca <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a1e      	ldr	r2, [pc, #120]	; (8003af0 <HAL_ADC_ConfigChannel+0x688>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d127      	bne.n	8003aca <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a18      	ldr	r2, [pc, #96]	; (8003ae0 <HAL_ADC_ConfigChannel+0x678>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d004      	beq.n	8003a8e <HAL_ADC_ConfigChannel+0x626>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a16      	ldr	r2, [pc, #88]	; (8003ae4 <HAL_ADC_ConfigChannel+0x67c>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d101      	bne.n	8003a92 <HAL_ADC_ConfigChannel+0x62a>
 8003a8e:	4a16      	ldr	r2, [pc, #88]	; (8003ae8 <HAL_ADC_ConfigChannel+0x680>)
 8003a90:	e000      	b.n	8003a94 <HAL_ADC_ConfigChannel+0x62c>
 8003a92:	4a16      	ldr	r2, [pc, #88]	; (8003aec <HAL_ADC_ConfigChannel+0x684>)
 8003a94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a96:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	4610      	mov	r0, r2
 8003a9e:	f7ff f9c8 	bl	8002e32 <LL_ADC_SetCommonPathInternalCh>
 8003aa2:	e012      	b.n	8003aca <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aa8:	f043 0220 	orr.w	r2, r3, #32
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003ab6:	e008      	b.n	8003aca <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003abc:	f043 0220 	orr.w	r2, r3, #32
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003ad2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3784      	adds	r7, #132	; 0x84
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd90      	pop	{r4, r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	40022000 	.word	0x40022000
 8003ae4:	40022100 	.word	0x40022100
 8003ae8:	40022300 	.word	0x40022300
 8003aec:	58026300 	.word	0x58026300
 8003af0:	58026000 	.word	0x58026000
 8003af4:	cb840000 	.word	0xcb840000
 8003af8:	24000028 	.word	0x24000028
 8003afc:	053e2d63 	.word	0x053e2d63
 8003b00:	c7520000 	.word	0xc7520000
 8003b04:	cfb80000 	.word	0xcfb80000

08003b08 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a7a      	ldr	r2, [pc, #488]	; (8003d00 <ADC_ConfigureBoostMode+0x1f8>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d004      	beq.n	8003b24 <ADC_ConfigureBoostMode+0x1c>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a79      	ldr	r2, [pc, #484]	; (8003d04 <ADC_ConfigureBoostMode+0x1fc>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d109      	bne.n	8003b38 <ADC_ConfigureBoostMode+0x30>
 8003b24:	4b78      	ldr	r3, [pc, #480]	; (8003d08 <ADC_ConfigureBoostMode+0x200>)
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	bf14      	ite	ne
 8003b30:	2301      	movne	r3, #1
 8003b32:	2300      	moveq	r3, #0
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	e008      	b.n	8003b4a <ADC_ConfigureBoostMode+0x42>
 8003b38:	4b74      	ldr	r3, [pc, #464]	; (8003d0c <ADC_ConfigureBoostMode+0x204>)
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	bf14      	ite	ne
 8003b44:	2301      	movne	r3, #1
 8003b46:	2300      	moveq	r3, #0
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d01c      	beq.n	8003b88 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003b4e:	f003 fd75 	bl	800763c <HAL_RCC_GetHCLKFreq>
 8003b52:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003b5c:	d010      	beq.n	8003b80 <ADC_ConfigureBoostMode+0x78>
 8003b5e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003b62:	d873      	bhi.n	8003c4c <ADC_ConfigureBoostMode+0x144>
 8003b64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b68:	d002      	beq.n	8003b70 <ADC_ConfigureBoostMode+0x68>
 8003b6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b6e:	d16d      	bne.n	8003c4c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	0c1b      	lsrs	r3, r3, #16
 8003b76:	68fa      	ldr	r2, [r7, #12]
 8003b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b7c:	60fb      	str	r3, [r7, #12]
        break;
 8003b7e:	e068      	b.n	8003c52 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	089b      	lsrs	r3, r3, #2
 8003b84:	60fb      	str	r3, [r7, #12]
        break;
 8003b86:	e064      	b.n	8003c52 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003b88:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003b8c:	f04f 0100 	mov.w	r1, #0
 8003b90:	f004 ffba 	bl	8008b08 <HAL_RCCEx_GetPeriphCLKFreq>
 8003b94:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003b9e:	d051      	beq.n	8003c44 <ADC_ConfigureBoostMode+0x13c>
 8003ba0:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003ba4:	d854      	bhi.n	8003c50 <ADC_ConfigureBoostMode+0x148>
 8003ba6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003baa:	d047      	beq.n	8003c3c <ADC_ConfigureBoostMode+0x134>
 8003bac:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003bb0:	d84e      	bhi.n	8003c50 <ADC_ConfigureBoostMode+0x148>
 8003bb2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003bb6:	d03d      	beq.n	8003c34 <ADC_ConfigureBoostMode+0x12c>
 8003bb8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003bbc:	d848      	bhi.n	8003c50 <ADC_ConfigureBoostMode+0x148>
 8003bbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003bc2:	d033      	beq.n	8003c2c <ADC_ConfigureBoostMode+0x124>
 8003bc4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003bc8:	d842      	bhi.n	8003c50 <ADC_ConfigureBoostMode+0x148>
 8003bca:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003bce:	d029      	beq.n	8003c24 <ADC_ConfigureBoostMode+0x11c>
 8003bd0:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003bd4:	d83c      	bhi.n	8003c50 <ADC_ConfigureBoostMode+0x148>
 8003bd6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003bda:	d01a      	beq.n	8003c12 <ADC_ConfigureBoostMode+0x10a>
 8003bdc:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003be0:	d836      	bhi.n	8003c50 <ADC_ConfigureBoostMode+0x148>
 8003be2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003be6:	d014      	beq.n	8003c12 <ADC_ConfigureBoostMode+0x10a>
 8003be8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003bec:	d830      	bhi.n	8003c50 <ADC_ConfigureBoostMode+0x148>
 8003bee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bf2:	d00e      	beq.n	8003c12 <ADC_ConfigureBoostMode+0x10a>
 8003bf4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bf8:	d82a      	bhi.n	8003c50 <ADC_ConfigureBoostMode+0x148>
 8003bfa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003bfe:	d008      	beq.n	8003c12 <ADC_ConfigureBoostMode+0x10a>
 8003c00:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003c04:	d824      	bhi.n	8003c50 <ADC_ConfigureBoostMode+0x148>
 8003c06:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c0a:	d002      	beq.n	8003c12 <ADC_ConfigureBoostMode+0x10a>
 8003c0c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003c10:	d11e      	bne.n	8003c50 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	0c9b      	lsrs	r3, r3, #18
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	68fa      	ldr	r2, [r7, #12]
 8003c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c20:	60fb      	str	r3, [r7, #12]
        break;
 8003c22:	e016      	b.n	8003c52 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	091b      	lsrs	r3, r3, #4
 8003c28:	60fb      	str	r3, [r7, #12]
        break;
 8003c2a:	e012      	b.n	8003c52 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	095b      	lsrs	r3, r3, #5
 8003c30:	60fb      	str	r3, [r7, #12]
        break;
 8003c32:	e00e      	b.n	8003c52 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	099b      	lsrs	r3, r3, #6
 8003c38:	60fb      	str	r3, [r7, #12]
        break;
 8003c3a:	e00a      	b.n	8003c52 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	09db      	lsrs	r3, r3, #7
 8003c40:	60fb      	str	r3, [r7, #12]
        break;
 8003c42:	e006      	b.n	8003c52 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	0a1b      	lsrs	r3, r3, #8
 8003c48:	60fb      	str	r3, [r7, #12]
        break;
 8003c4a:	e002      	b.n	8003c52 <ADC_ConfigureBoostMode+0x14a>
        break;
 8003c4c:	bf00      	nop
 8003c4e:	e000      	b.n	8003c52 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003c50:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003c52:	f7ff f8a5 	bl	8002da0 <HAL_GetREVID>
 8003c56:	4603      	mov	r3, r0
 8003c58:	f241 0203 	movw	r2, #4099	; 0x1003
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d815      	bhi.n	8003c8c <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	4a2b      	ldr	r2, [pc, #172]	; (8003d10 <ADC_ConfigureBoostMode+0x208>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d908      	bls.n	8003c7a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	689a      	ldr	r2, [r3, #8]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c76:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003c78:	e03e      	b.n	8003cf8 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	689a      	ldr	r2, [r3, #8]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c88:	609a      	str	r2, [r3, #8]
}
 8003c8a:	e035      	b.n	8003cf8 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	085b      	lsrs	r3, r3, #1
 8003c90:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	4a1f      	ldr	r2, [pc, #124]	; (8003d14 <ADC_ConfigureBoostMode+0x20c>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d808      	bhi.n	8003cac <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	689a      	ldr	r2, [r3, #8]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003ca8:	609a      	str	r2, [r3, #8]
}
 8003caa:	e025      	b.n	8003cf8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	4a1a      	ldr	r2, [pc, #104]	; (8003d18 <ADC_ConfigureBoostMode+0x210>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d80a      	bhi.n	8003cca <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cc6:	609a      	str	r2, [r3, #8]
}
 8003cc8:	e016      	b.n	8003cf8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	4a13      	ldr	r2, [pc, #76]	; (8003d1c <ADC_ConfigureBoostMode+0x214>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d80a      	bhi.n	8003ce8 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ce4:	609a      	str	r2, [r3, #8]
}
 8003ce6:	e007      	b.n	8003cf8 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	689a      	ldr	r2, [r3, #8]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003cf6:	609a      	str	r2, [r3, #8]
}
 8003cf8:	bf00      	nop
 8003cfa:	3710      	adds	r7, #16
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	40022000 	.word	0x40022000
 8003d04:	40022100 	.word	0x40022100
 8003d08:	40022300 	.word	0x40022300
 8003d0c:	58026300 	.word	0x58026300
 8003d10:	01312d00 	.word	0x01312d00
 8003d14:	005f5e10 	.word	0x005f5e10
 8003d18:	00bebc20 	.word	0x00bebc20
 8003d1c:	017d7840 	.word	0x017d7840

08003d20 <LL_ADC_IsEnabled>:
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f003 0301 	and.w	r3, r3, #1
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d101      	bne.n	8003d38 <LL_ADC_IsEnabled+0x18>
 8003d34:	2301      	movs	r3, #1
 8003d36:	e000      	b.n	8003d3a <LL_ADC_IsEnabled+0x1a>
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	370c      	adds	r7, #12
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr

08003d46 <LL_ADC_REG_IsConversionOngoing>:
{
 8003d46:	b480      	push	{r7}
 8003d48:	b083      	sub	sp, #12
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f003 0304 	and.w	r3, r3, #4
 8003d56:	2b04      	cmp	r3, #4
 8003d58:	d101      	bne.n	8003d5e <LL_ADC_REG_IsConversionOngoing+0x18>
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e000      	b.n	8003d60 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003d5e:	2300      	movs	r3, #0
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003d6c:	b590      	push	{r4, r7, lr}
 8003d6e:	b09f      	sub	sp, #124	; 0x7c
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d76:	2300      	movs	r3, #0
 8003d78:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d101      	bne.n	8003d8a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003d86:	2302      	movs	r3, #2
 8003d88:	e0be      	b.n	8003f08 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003d92:	2300      	movs	r3, #0
 8003d94:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003d96:	2300      	movs	r3, #0
 8003d98:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a5c      	ldr	r2, [pc, #368]	; (8003f10 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d102      	bne.n	8003daa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003da4:	4b5b      	ldr	r3, [pc, #364]	; (8003f14 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003da6:	60bb      	str	r3, [r7, #8]
 8003da8:	e001      	b.n	8003dae <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003daa:	2300      	movs	r3, #0
 8003dac:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d10b      	bne.n	8003dcc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003db8:	f043 0220 	orr.w	r2, r3, #32
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e09d      	b.n	8003f08 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f7ff ffb9 	bl	8003d46 <LL_ADC_REG_IsConversionOngoing>
 8003dd4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f7ff ffb3 	bl	8003d46 <LL_ADC_REG_IsConversionOngoing>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d17f      	bne.n	8003ee6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003de6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d17c      	bne.n	8003ee6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a47      	ldr	r2, [pc, #284]	; (8003f10 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d004      	beq.n	8003e00 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a46      	ldr	r2, [pc, #280]	; (8003f14 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d101      	bne.n	8003e04 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003e00:	4b45      	ldr	r3, [pc, #276]	; (8003f18 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003e02:	e000      	b.n	8003e06 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003e04:	4b45      	ldr	r3, [pc, #276]	; (8003f1c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003e06:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d039      	beq.n	8003e84 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003e10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	431a      	orrs	r2, r3
 8003e1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e20:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a3a      	ldr	r2, [pc, #232]	; (8003f10 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d004      	beq.n	8003e36 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a38      	ldr	r2, [pc, #224]	; (8003f14 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d10e      	bne.n	8003e54 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003e36:	4836      	ldr	r0, [pc, #216]	; (8003f10 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003e38:	f7ff ff72 	bl	8003d20 <LL_ADC_IsEnabled>
 8003e3c:	4604      	mov	r4, r0
 8003e3e:	4835      	ldr	r0, [pc, #212]	; (8003f14 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003e40:	f7ff ff6e 	bl	8003d20 <LL_ADC_IsEnabled>
 8003e44:	4603      	mov	r3, r0
 8003e46:	4323      	orrs	r3, r4
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	bf0c      	ite	eq
 8003e4c:	2301      	moveq	r3, #1
 8003e4e:	2300      	movne	r3, #0
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	e008      	b.n	8003e66 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003e54:	4832      	ldr	r0, [pc, #200]	; (8003f20 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003e56:	f7ff ff63 	bl	8003d20 <LL_ADC_IsEnabled>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	bf0c      	ite	eq
 8003e60:	2301      	moveq	r3, #1
 8003e62:	2300      	movne	r3, #0
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d047      	beq.n	8003efa <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003e6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e6c:	689a      	ldr	r2, [r3, #8]
 8003e6e:	4b2d      	ldr	r3, [pc, #180]	; (8003f24 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003e70:	4013      	ands	r3, r2
 8003e72:	683a      	ldr	r2, [r7, #0]
 8003e74:	6811      	ldr	r1, [r2, #0]
 8003e76:	683a      	ldr	r2, [r7, #0]
 8003e78:	6892      	ldr	r2, [r2, #8]
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	431a      	orrs	r2, r3
 8003e7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e80:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e82:	e03a      	b.n	8003efa <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003e84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e8e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a1e      	ldr	r2, [pc, #120]	; (8003f10 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d004      	beq.n	8003ea4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a1d      	ldr	r2, [pc, #116]	; (8003f14 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d10e      	bne.n	8003ec2 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003ea4:	481a      	ldr	r0, [pc, #104]	; (8003f10 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003ea6:	f7ff ff3b 	bl	8003d20 <LL_ADC_IsEnabled>
 8003eaa:	4604      	mov	r4, r0
 8003eac:	4819      	ldr	r0, [pc, #100]	; (8003f14 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003eae:	f7ff ff37 	bl	8003d20 <LL_ADC_IsEnabled>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	4323      	orrs	r3, r4
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	bf0c      	ite	eq
 8003eba:	2301      	moveq	r3, #1
 8003ebc:	2300      	movne	r3, #0
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	e008      	b.n	8003ed4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003ec2:	4817      	ldr	r0, [pc, #92]	; (8003f20 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003ec4:	f7ff ff2c 	bl	8003d20 <LL_ADC_IsEnabled>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	bf0c      	ite	eq
 8003ece:	2301      	moveq	r3, #1
 8003ed0:	2300      	movne	r3, #0
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d010      	beq.n	8003efa <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003ed8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eda:	689a      	ldr	r2, [r3, #8]
 8003edc:	4b11      	ldr	r3, [pc, #68]	; (8003f24 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003ede:	4013      	ands	r3, r2
 8003ee0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003ee2:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003ee4:	e009      	b.n	8003efa <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eea:	f043 0220 	orr.w	r2, r3, #32
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003ef8:	e000      	b.n	8003efc <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003efa:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003f04:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	377c      	adds	r7, #124	; 0x7c
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd90      	pop	{r4, r7, pc}
 8003f10:	40022000 	.word	0x40022000
 8003f14:	40022100 	.word	0x40022100
 8003f18:	40022300 	.word	0x40022300
 8003f1c:	58026300 	.word	0x58026300
 8003f20:	58026000 	.word	0x58026000
 8003f24:	fffff0e0 	.word	0xfffff0e0

08003f28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b085      	sub	sp, #20
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f003 0307 	and.w	r3, r3, #7
 8003f36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f38:	4b0b      	ldr	r3, [pc, #44]	; (8003f68 <__NVIC_SetPriorityGrouping+0x40>)
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f3e:	68ba      	ldr	r2, [r7, #8]
 8003f40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f44:	4013      	ands	r3, r2
 8003f46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003f50:	4b06      	ldr	r3, [pc, #24]	; (8003f6c <__NVIC_SetPriorityGrouping+0x44>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f56:	4a04      	ldr	r2, [pc, #16]	; (8003f68 <__NVIC_SetPriorityGrouping+0x40>)
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	60d3      	str	r3, [r2, #12]
}
 8003f5c:	bf00      	nop
 8003f5e:	3714      	adds	r7, #20
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr
 8003f68:	e000ed00 	.word	0xe000ed00
 8003f6c:	05fa0000 	.word	0x05fa0000

08003f70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f70:	b480      	push	{r7}
 8003f72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f74:	4b04      	ldr	r3, [pc, #16]	; (8003f88 <__NVIC_GetPriorityGrouping+0x18>)
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	0a1b      	lsrs	r3, r3, #8
 8003f7a:	f003 0307 	and.w	r3, r3, #7
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr
 8003f88:	e000ed00 	.word	0xe000ed00

08003f8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	4603      	mov	r3, r0
 8003f94:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003f96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	db0b      	blt.n	8003fb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f9e:	88fb      	ldrh	r3, [r7, #6]
 8003fa0:	f003 021f 	and.w	r2, r3, #31
 8003fa4:	4907      	ldr	r1, [pc, #28]	; (8003fc4 <__NVIC_EnableIRQ+0x38>)
 8003fa6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003faa:	095b      	lsrs	r3, r3, #5
 8003fac:	2001      	movs	r0, #1
 8003fae:	fa00 f202 	lsl.w	r2, r0, r2
 8003fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003fb6:	bf00      	nop
 8003fb8:	370c      	adds	r7, #12
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop
 8003fc4:	e000e100 	.word	0xe000e100

08003fc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	4603      	mov	r3, r0
 8003fd0:	6039      	str	r1, [r7, #0]
 8003fd2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003fd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	db0a      	blt.n	8003ff2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	b2da      	uxtb	r2, r3
 8003fe0:	490c      	ldr	r1, [pc, #48]	; (8004014 <__NVIC_SetPriority+0x4c>)
 8003fe2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003fe6:	0112      	lsls	r2, r2, #4
 8003fe8:	b2d2      	uxtb	r2, r2
 8003fea:	440b      	add	r3, r1
 8003fec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ff0:	e00a      	b.n	8004008 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	b2da      	uxtb	r2, r3
 8003ff6:	4908      	ldr	r1, [pc, #32]	; (8004018 <__NVIC_SetPriority+0x50>)
 8003ff8:	88fb      	ldrh	r3, [r7, #6]
 8003ffa:	f003 030f 	and.w	r3, r3, #15
 8003ffe:	3b04      	subs	r3, #4
 8004000:	0112      	lsls	r2, r2, #4
 8004002:	b2d2      	uxtb	r2, r2
 8004004:	440b      	add	r3, r1
 8004006:	761a      	strb	r2, [r3, #24]
}
 8004008:	bf00      	nop
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr
 8004014:	e000e100 	.word	0xe000e100
 8004018:	e000ed00 	.word	0xe000ed00

0800401c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800401c:	b480      	push	{r7}
 800401e:	b089      	sub	sp, #36	; 0x24
 8004020:	af00      	add	r7, sp, #0
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	60b9      	str	r1, [r7, #8]
 8004026:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f003 0307 	and.w	r3, r3, #7
 800402e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	f1c3 0307 	rsb	r3, r3, #7
 8004036:	2b04      	cmp	r3, #4
 8004038:	bf28      	it	cs
 800403a:	2304      	movcs	r3, #4
 800403c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	3304      	adds	r3, #4
 8004042:	2b06      	cmp	r3, #6
 8004044:	d902      	bls.n	800404c <NVIC_EncodePriority+0x30>
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	3b03      	subs	r3, #3
 800404a:	e000      	b.n	800404e <NVIC_EncodePriority+0x32>
 800404c:	2300      	movs	r3, #0
 800404e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004050:	f04f 32ff 	mov.w	r2, #4294967295
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	fa02 f303 	lsl.w	r3, r2, r3
 800405a:	43da      	mvns	r2, r3
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	401a      	ands	r2, r3
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004064:	f04f 31ff 	mov.w	r1, #4294967295
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	fa01 f303 	lsl.w	r3, r1, r3
 800406e:	43d9      	mvns	r1, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004074:	4313      	orrs	r3, r2
         );
}
 8004076:	4618      	mov	r0, r3
 8004078:	3724      	adds	r7, #36	; 0x24
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
	...

08004084 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	3b01      	subs	r3, #1
 8004090:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004094:	d301      	bcc.n	800409a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004096:	2301      	movs	r3, #1
 8004098:	e00f      	b.n	80040ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800409a:	4a0a      	ldr	r2, [pc, #40]	; (80040c4 <SysTick_Config+0x40>)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	3b01      	subs	r3, #1
 80040a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80040a2:	210f      	movs	r1, #15
 80040a4:	f04f 30ff 	mov.w	r0, #4294967295
 80040a8:	f7ff ff8e 	bl	8003fc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040ac:	4b05      	ldr	r3, [pc, #20]	; (80040c4 <SysTick_Config+0x40>)
 80040ae:	2200      	movs	r2, #0
 80040b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040b2:	4b04      	ldr	r3, [pc, #16]	; (80040c4 <SysTick_Config+0x40>)
 80040b4:	2207      	movs	r2, #7
 80040b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3708      	adds	r7, #8
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	e000e010 	.word	0xe000e010

080040c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f7ff ff29 	bl	8003f28 <__NVIC_SetPriorityGrouping>
}
 80040d6:	bf00      	nop
 80040d8:	3708      	adds	r7, #8
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}

080040de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040de:	b580      	push	{r7, lr}
 80040e0:	b086      	sub	sp, #24
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	4603      	mov	r3, r0
 80040e6:	60b9      	str	r1, [r7, #8]
 80040e8:	607a      	str	r2, [r7, #4]
 80040ea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80040ec:	f7ff ff40 	bl	8003f70 <__NVIC_GetPriorityGrouping>
 80040f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	68b9      	ldr	r1, [r7, #8]
 80040f6:	6978      	ldr	r0, [r7, #20]
 80040f8:	f7ff ff90 	bl	800401c <NVIC_EncodePriority>
 80040fc:	4602      	mov	r2, r0
 80040fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004102:	4611      	mov	r1, r2
 8004104:	4618      	mov	r0, r3
 8004106:	f7ff ff5f 	bl	8003fc8 <__NVIC_SetPriority>
}
 800410a:	bf00      	nop
 800410c:	3718      	adds	r7, #24
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}

08004112 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004112:	b580      	push	{r7, lr}
 8004114:	b082      	sub	sp, #8
 8004116:	af00      	add	r7, sp, #0
 8004118:	4603      	mov	r3, r0
 800411a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800411c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004120:	4618      	mov	r0, r3
 8004122:	f7ff ff33 	bl	8003f8c <__NVIC_EnableIRQ>
}
 8004126:	bf00      	nop
 8004128:	3708      	adds	r7, #8
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}

0800412e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800412e:	b580      	push	{r7, lr}
 8004130:	b082      	sub	sp, #8
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f7ff ffa4 	bl	8004084 <SysTick_Config>
 800413c:	4603      	mov	r3, r0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3708      	adds	r7, #8
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
	...

08004148 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b086      	sub	sp, #24
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004150:	f7fe fdf6 	bl	8002d40 <HAL_GetTick>
 8004154:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d101      	bne.n	8004160 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e2dc      	b.n	800471a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004166:	b2db      	uxtb	r3, r3
 8004168:	2b02      	cmp	r3, #2
 800416a:	d008      	beq.n	800417e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2280      	movs	r2, #128	; 0x80
 8004170:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e2cd      	b.n	800471a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a76      	ldr	r2, [pc, #472]	; (800435c <HAL_DMA_Abort+0x214>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d04a      	beq.n	800421e <HAL_DMA_Abort+0xd6>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a74      	ldr	r2, [pc, #464]	; (8004360 <HAL_DMA_Abort+0x218>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d045      	beq.n	800421e <HAL_DMA_Abort+0xd6>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a73      	ldr	r2, [pc, #460]	; (8004364 <HAL_DMA_Abort+0x21c>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d040      	beq.n	800421e <HAL_DMA_Abort+0xd6>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a71      	ldr	r2, [pc, #452]	; (8004368 <HAL_DMA_Abort+0x220>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d03b      	beq.n	800421e <HAL_DMA_Abort+0xd6>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a70      	ldr	r2, [pc, #448]	; (800436c <HAL_DMA_Abort+0x224>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d036      	beq.n	800421e <HAL_DMA_Abort+0xd6>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a6e      	ldr	r2, [pc, #440]	; (8004370 <HAL_DMA_Abort+0x228>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d031      	beq.n	800421e <HAL_DMA_Abort+0xd6>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a6d      	ldr	r2, [pc, #436]	; (8004374 <HAL_DMA_Abort+0x22c>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d02c      	beq.n	800421e <HAL_DMA_Abort+0xd6>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a6b      	ldr	r2, [pc, #428]	; (8004378 <HAL_DMA_Abort+0x230>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d027      	beq.n	800421e <HAL_DMA_Abort+0xd6>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a6a      	ldr	r2, [pc, #424]	; (800437c <HAL_DMA_Abort+0x234>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d022      	beq.n	800421e <HAL_DMA_Abort+0xd6>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a68      	ldr	r2, [pc, #416]	; (8004380 <HAL_DMA_Abort+0x238>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d01d      	beq.n	800421e <HAL_DMA_Abort+0xd6>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a67      	ldr	r2, [pc, #412]	; (8004384 <HAL_DMA_Abort+0x23c>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d018      	beq.n	800421e <HAL_DMA_Abort+0xd6>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a65      	ldr	r2, [pc, #404]	; (8004388 <HAL_DMA_Abort+0x240>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d013      	beq.n	800421e <HAL_DMA_Abort+0xd6>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a64      	ldr	r2, [pc, #400]	; (800438c <HAL_DMA_Abort+0x244>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d00e      	beq.n	800421e <HAL_DMA_Abort+0xd6>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a62      	ldr	r2, [pc, #392]	; (8004390 <HAL_DMA_Abort+0x248>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d009      	beq.n	800421e <HAL_DMA_Abort+0xd6>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a61      	ldr	r2, [pc, #388]	; (8004394 <HAL_DMA_Abort+0x24c>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d004      	beq.n	800421e <HAL_DMA_Abort+0xd6>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a5f      	ldr	r2, [pc, #380]	; (8004398 <HAL_DMA_Abort+0x250>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d101      	bne.n	8004222 <HAL_DMA_Abort+0xda>
 800421e:	2301      	movs	r3, #1
 8004220:	e000      	b.n	8004224 <HAL_DMA_Abort+0xdc>
 8004222:	2300      	movs	r3, #0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d013      	beq.n	8004250 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f022 021e 	bic.w	r2, r2, #30
 8004236:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	695a      	ldr	r2, [r3, #20]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004246:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	617b      	str	r3, [r7, #20]
 800424e:	e00a      	b.n	8004266 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f022 020e 	bic.w	r2, r2, #14
 800425e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a3c      	ldr	r2, [pc, #240]	; (800435c <HAL_DMA_Abort+0x214>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d072      	beq.n	8004356 <HAL_DMA_Abort+0x20e>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a3a      	ldr	r2, [pc, #232]	; (8004360 <HAL_DMA_Abort+0x218>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d06d      	beq.n	8004356 <HAL_DMA_Abort+0x20e>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a39      	ldr	r2, [pc, #228]	; (8004364 <HAL_DMA_Abort+0x21c>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d068      	beq.n	8004356 <HAL_DMA_Abort+0x20e>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a37      	ldr	r2, [pc, #220]	; (8004368 <HAL_DMA_Abort+0x220>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d063      	beq.n	8004356 <HAL_DMA_Abort+0x20e>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a36      	ldr	r2, [pc, #216]	; (800436c <HAL_DMA_Abort+0x224>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d05e      	beq.n	8004356 <HAL_DMA_Abort+0x20e>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a34      	ldr	r2, [pc, #208]	; (8004370 <HAL_DMA_Abort+0x228>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d059      	beq.n	8004356 <HAL_DMA_Abort+0x20e>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a33      	ldr	r2, [pc, #204]	; (8004374 <HAL_DMA_Abort+0x22c>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d054      	beq.n	8004356 <HAL_DMA_Abort+0x20e>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a31      	ldr	r2, [pc, #196]	; (8004378 <HAL_DMA_Abort+0x230>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d04f      	beq.n	8004356 <HAL_DMA_Abort+0x20e>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a30      	ldr	r2, [pc, #192]	; (800437c <HAL_DMA_Abort+0x234>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d04a      	beq.n	8004356 <HAL_DMA_Abort+0x20e>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a2e      	ldr	r2, [pc, #184]	; (8004380 <HAL_DMA_Abort+0x238>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d045      	beq.n	8004356 <HAL_DMA_Abort+0x20e>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a2d      	ldr	r2, [pc, #180]	; (8004384 <HAL_DMA_Abort+0x23c>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d040      	beq.n	8004356 <HAL_DMA_Abort+0x20e>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a2b      	ldr	r2, [pc, #172]	; (8004388 <HAL_DMA_Abort+0x240>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d03b      	beq.n	8004356 <HAL_DMA_Abort+0x20e>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a2a      	ldr	r2, [pc, #168]	; (800438c <HAL_DMA_Abort+0x244>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d036      	beq.n	8004356 <HAL_DMA_Abort+0x20e>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a28      	ldr	r2, [pc, #160]	; (8004390 <HAL_DMA_Abort+0x248>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d031      	beq.n	8004356 <HAL_DMA_Abort+0x20e>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a27      	ldr	r2, [pc, #156]	; (8004394 <HAL_DMA_Abort+0x24c>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d02c      	beq.n	8004356 <HAL_DMA_Abort+0x20e>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a25      	ldr	r2, [pc, #148]	; (8004398 <HAL_DMA_Abort+0x250>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d027      	beq.n	8004356 <HAL_DMA_Abort+0x20e>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a24      	ldr	r2, [pc, #144]	; (800439c <HAL_DMA_Abort+0x254>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d022      	beq.n	8004356 <HAL_DMA_Abort+0x20e>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a22      	ldr	r2, [pc, #136]	; (80043a0 <HAL_DMA_Abort+0x258>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d01d      	beq.n	8004356 <HAL_DMA_Abort+0x20e>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a21      	ldr	r2, [pc, #132]	; (80043a4 <HAL_DMA_Abort+0x25c>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d018      	beq.n	8004356 <HAL_DMA_Abort+0x20e>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a1f      	ldr	r2, [pc, #124]	; (80043a8 <HAL_DMA_Abort+0x260>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d013      	beq.n	8004356 <HAL_DMA_Abort+0x20e>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a1e      	ldr	r2, [pc, #120]	; (80043ac <HAL_DMA_Abort+0x264>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d00e      	beq.n	8004356 <HAL_DMA_Abort+0x20e>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a1c      	ldr	r2, [pc, #112]	; (80043b0 <HAL_DMA_Abort+0x268>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d009      	beq.n	8004356 <HAL_DMA_Abort+0x20e>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a1b      	ldr	r2, [pc, #108]	; (80043b4 <HAL_DMA_Abort+0x26c>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d004      	beq.n	8004356 <HAL_DMA_Abort+0x20e>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a19      	ldr	r2, [pc, #100]	; (80043b8 <HAL_DMA_Abort+0x270>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d132      	bne.n	80043bc <HAL_DMA_Abort+0x274>
 8004356:	2301      	movs	r3, #1
 8004358:	e031      	b.n	80043be <HAL_DMA_Abort+0x276>
 800435a:	bf00      	nop
 800435c:	40020010 	.word	0x40020010
 8004360:	40020028 	.word	0x40020028
 8004364:	40020040 	.word	0x40020040
 8004368:	40020058 	.word	0x40020058
 800436c:	40020070 	.word	0x40020070
 8004370:	40020088 	.word	0x40020088
 8004374:	400200a0 	.word	0x400200a0
 8004378:	400200b8 	.word	0x400200b8
 800437c:	40020410 	.word	0x40020410
 8004380:	40020428 	.word	0x40020428
 8004384:	40020440 	.word	0x40020440
 8004388:	40020458 	.word	0x40020458
 800438c:	40020470 	.word	0x40020470
 8004390:	40020488 	.word	0x40020488
 8004394:	400204a0 	.word	0x400204a0
 8004398:	400204b8 	.word	0x400204b8
 800439c:	58025408 	.word	0x58025408
 80043a0:	5802541c 	.word	0x5802541c
 80043a4:	58025430 	.word	0x58025430
 80043a8:	58025444 	.word	0x58025444
 80043ac:	58025458 	.word	0x58025458
 80043b0:	5802546c 	.word	0x5802546c
 80043b4:	58025480 	.word	0x58025480
 80043b8:	58025494 	.word	0x58025494
 80043bc:	2300      	movs	r3, #0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d007      	beq.n	80043d2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a6d      	ldr	r2, [pc, #436]	; (800458c <HAL_DMA_Abort+0x444>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d04a      	beq.n	8004472 <HAL_DMA_Abort+0x32a>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a6b      	ldr	r2, [pc, #428]	; (8004590 <HAL_DMA_Abort+0x448>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d045      	beq.n	8004472 <HAL_DMA_Abort+0x32a>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a6a      	ldr	r2, [pc, #424]	; (8004594 <HAL_DMA_Abort+0x44c>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d040      	beq.n	8004472 <HAL_DMA_Abort+0x32a>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a68      	ldr	r2, [pc, #416]	; (8004598 <HAL_DMA_Abort+0x450>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d03b      	beq.n	8004472 <HAL_DMA_Abort+0x32a>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a67      	ldr	r2, [pc, #412]	; (800459c <HAL_DMA_Abort+0x454>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d036      	beq.n	8004472 <HAL_DMA_Abort+0x32a>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a65      	ldr	r2, [pc, #404]	; (80045a0 <HAL_DMA_Abort+0x458>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d031      	beq.n	8004472 <HAL_DMA_Abort+0x32a>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a64      	ldr	r2, [pc, #400]	; (80045a4 <HAL_DMA_Abort+0x45c>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d02c      	beq.n	8004472 <HAL_DMA_Abort+0x32a>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a62      	ldr	r2, [pc, #392]	; (80045a8 <HAL_DMA_Abort+0x460>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d027      	beq.n	8004472 <HAL_DMA_Abort+0x32a>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a61      	ldr	r2, [pc, #388]	; (80045ac <HAL_DMA_Abort+0x464>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d022      	beq.n	8004472 <HAL_DMA_Abort+0x32a>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a5f      	ldr	r2, [pc, #380]	; (80045b0 <HAL_DMA_Abort+0x468>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d01d      	beq.n	8004472 <HAL_DMA_Abort+0x32a>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a5e      	ldr	r2, [pc, #376]	; (80045b4 <HAL_DMA_Abort+0x46c>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d018      	beq.n	8004472 <HAL_DMA_Abort+0x32a>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a5c      	ldr	r2, [pc, #368]	; (80045b8 <HAL_DMA_Abort+0x470>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d013      	beq.n	8004472 <HAL_DMA_Abort+0x32a>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a5b      	ldr	r2, [pc, #364]	; (80045bc <HAL_DMA_Abort+0x474>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d00e      	beq.n	8004472 <HAL_DMA_Abort+0x32a>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a59      	ldr	r2, [pc, #356]	; (80045c0 <HAL_DMA_Abort+0x478>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d009      	beq.n	8004472 <HAL_DMA_Abort+0x32a>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a58      	ldr	r2, [pc, #352]	; (80045c4 <HAL_DMA_Abort+0x47c>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d004      	beq.n	8004472 <HAL_DMA_Abort+0x32a>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a56      	ldr	r2, [pc, #344]	; (80045c8 <HAL_DMA_Abort+0x480>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d108      	bne.n	8004484 <HAL_DMA_Abort+0x33c>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f022 0201 	bic.w	r2, r2, #1
 8004480:	601a      	str	r2, [r3, #0]
 8004482:	e007      	b.n	8004494 <HAL_DMA_Abort+0x34c>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f022 0201 	bic.w	r2, r2, #1
 8004492:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004494:	e013      	b.n	80044be <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004496:	f7fe fc53 	bl	8002d40 <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	2b05      	cmp	r3, #5
 80044a2:	d90c      	bls.n	80044be <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2220      	movs	r2, #32
 80044a8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2203      	movs	r2, #3
 80044ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e12d      	b.n	800471a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0301 	and.w	r3, r3, #1
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d1e5      	bne.n	8004496 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a2f      	ldr	r2, [pc, #188]	; (800458c <HAL_DMA_Abort+0x444>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d04a      	beq.n	800456a <HAL_DMA_Abort+0x422>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a2d      	ldr	r2, [pc, #180]	; (8004590 <HAL_DMA_Abort+0x448>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d045      	beq.n	800456a <HAL_DMA_Abort+0x422>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a2c      	ldr	r2, [pc, #176]	; (8004594 <HAL_DMA_Abort+0x44c>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d040      	beq.n	800456a <HAL_DMA_Abort+0x422>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a2a      	ldr	r2, [pc, #168]	; (8004598 <HAL_DMA_Abort+0x450>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d03b      	beq.n	800456a <HAL_DMA_Abort+0x422>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a29      	ldr	r2, [pc, #164]	; (800459c <HAL_DMA_Abort+0x454>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d036      	beq.n	800456a <HAL_DMA_Abort+0x422>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a27      	ldr	r2, [pc, #156]	; (80045a0 <HAL_DMA_Abort+0x458>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d031      	beq.n	800456a <HAL_DMA_Abort+0x422>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a26      	ldr	r2, [pc, #152]	; (80045a4 <HAL_DMA_Abort+0x45c>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d02c      	beq.n	800456a <HAL_DMA_Abort+0x422>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a24      	ldr	r2, [pc, #144]	; (80045a8 <HAL_DMA_Abort+0x460>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d027      	beq.n	800456a <HAL_DMA_Abort+0x422>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a23      	ldr	r2, [pc, #140]	; (80045ac <HAL_DMA_Abort+0x464>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d022      	beq.n	800456a <HAL_DMA_Abort+0x422>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a21      	ldr	r2, [pc, #132]	; (80045b0 <HAL_DMA_Abort+0x468>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d01d      	beq.n	800456a <HAL_DMA_Abort+0x422>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a20      	ldr	r2, [pc, #128]	; (80045b4 <HAL_DMA_Abort+0x46c>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d018      	beq.n	800456a <HAL_DMA_Abort+0x422>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a1e      	ldr	r2, [pc, #120]	; (80045b8 <HAL_DMA_Abort+0x470>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d013      	beq.n	800456a <HAL_DMA_Abort+0x422>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a1d      	ldr	r2, [pc, #116]	; (80045bc <HAL_DMA_Abort+0x474>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d00e      	beq.n	800456a <HAL_DMA_Abort+0x422>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a1b      	ldr	r2, [pc, #108]	; (80045c0 <HAL_DMA_Abort+0x478>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d009      	beq.n	800456a <HAL_DMA_Abort+0x422>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a1a      	ldr	r2, [pc, #104]	; (80045c4 <HAL_DMA_Abort+0x47c>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d004      	beq.n	800456a <HAL_DMA_Abort+0x422>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a18      	ldr	r2, [pc, #96]	; (80045c8 <HAL_DMA_Abort+0x480>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d101      	bne.n	800456e <HAL_DMA_Abort+0x426>
 800456a:	2301      	movs	r3, #1
 800456c:	e000      	b.n	8004570 <HAL_DMA_Abort+0x428>
 800456e:	2300      	movs	r3, #0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d02b      	beq.n	80045cc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004578:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800457e:	f003 031f 	and.w	r3, r3, #31
 8004582:	223f      	movs	r2, #63	; 0x3f
 8004584:	409a      	lsls	r2, r3
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	609a      	str	r2, [r3, #8]
 800458a:	e02a      	b.n	80045e2 <HAL_DMA_Abort+0x49a>
 800458c:	40020010 	.word	0x40020010
 8004590:	40020028 	.word	0x40020028
 8004594:	40020040 	.word	0x40020040
 8004598:	40020058 	.word	0x40020058
 800459c:	40020070 	.word	0x40020070
 80045a0:	40020088 	.word	0x40020088
 80045a4:	400200a0 	.word	0x400200a0
 80045a8:	400200b8 	.word	0x400200b8
 80045ac:	40020410 	.word	0x40020410
 80045b0:	40020428 	.word	0x40020428
 80045b4:	40020440 	.word	0x40020440
 80045b8:	40020458 	.word	0x40020458
 80045bc:	40020470 	.word	0x40020470
 80045c0:	40020488 	.word	0x40020488
 80045c4:	400204a0 	.word	0x400204a0
 80045c8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045d0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045d6:	f003 031f 	and.w	r3, r3, #31
 80045da:	2201      	movs	r2, #1
 80045dc:	409a      	lsls	r2, r3
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a4f      	ldr	r2, [pc, #316]	; (8004724 <HAL_DMA_Abort+0x5dc>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d072      	beq.n	80046d2 <HAL_DMA_Abort+0x58a>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a4d      	ldr	r2, [pc, #308]	; (8004728 <HAL_DMA_Abort+0x5e0>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d06d      	beq.n	80046d2 <HAL_DMA_Abort+0x58a>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a4c      	ldr	r2, [pc, #304]	; (800472c <HAL_DMA_Abort+0x5e4>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d068      	beq.n	80046d2 <HAL_DMA_Abort+0x58a>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a4a      	ldr	r2, [pc, #296]	; (8004730 <HAL_DMA_Abort+0x5e8>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d063      	beq.n	80046d2 <HAL_DMA_Abort+0x58a>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a49      	ldr	r2, [pc, #292]	; (8004734 <HAL_DMA_Abort+0x5ec>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d05e      	beq.n	80046d2 <HAL_DMA_Abort+0x58a>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a47      	ldr	r2, [pc, #284]	; (8004738 <HAL_DMA_Abort+0x5f0>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d059      	beq.n	80046d2 <HAL_DMA_Abort+0x58a>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a46      	ldr	r2, [pc, #280]	; (800473c <HAL_DMA_Abort+0x5f4>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d054      	beq.n	80046d2 <HAL_DMA_Abort+0x58a>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a44      	ldr	r2, [pc, #272]	; (8004740 <HAL_DMA_Abort+0x5f8>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d04f      	beq.n	80046d2 <HAL_DMA_Abort+0x58a>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a43      	ldr	r2, [pc, #268]	; (8004744 <HAL_DMA_Abort+0x5fc>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d04a      	beq.n	80046d2 <HAL_DMA_Abort+0x58a>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a41      	ldr	r2, [pc, #260]	; (8004748 <HAL_DMA_Abort+0x600>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d045      	beq.n	80046d2 <HAL_DMA_Abort+0x58a>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a40      	ldr	r2, [pc, #256]	; (800474c <HAL_DMA_Abort+0x604>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d040      	beq.n	80046d2 <HAL_DMA_Abort+0x58a>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a3e      	ldr	r2, [pc, #248]	; (8004750 <HAL_DMA_Abort+0x608>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d03b      	beq.n	80046d2 <HAL_DMA_Abort+0x58a>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a3d      	ldr	r2, [pc, #244]	; (8004754 <HAL_DMA_Abort+0x60c>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d036      	beq.n	80046d2 <HAL_DMA_Abort+0x58a>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a3b      	ldr	r2, [pc, #236]	; (8004758 <HAL_DMA_Abort+0x610>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d031      	beq.n	80046d2 <HAL_DMA_Abort+0x58a>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a3a      	ldr	r2, [pc, #232]	; (800475c <HAL_DMA_Abort+0x614>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d02c      	beq.n	80046d2 <HAL_DMA_Abort+0x58a>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a38      	ldr	r2, [pc, #224]	; (8004760 <HAL_DMA_Abort+0x618>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d027      	beq.n	80046d2 <HAL_DMA_Abort+0x58a>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a37      	ldr	r2, [pc, #220]	; (8004764 <HAL_DMA_Abort+0x61c>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d022      	beq.n	80046d2 <HAL_DMA_Abort+0x58a>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a35      	ldr	r2, [pc, #212]	; (8004768 <HAL_DMA_Abort+0x620>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d01d      	beq.n	80046d2 <HAL_DMA_Abort+0x58a>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a34      	ldr	r2, [pc, #208]	; (800476c <HAL_DMA_Abort+0x624>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d018      	beq.n	80046d2 <HAL_DMA_Abort+0x58a>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a32      	ldr	r2, [pc, #200]	; (8004770 <HAL_DMA_Abort+0x628>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d013      	beq.n	80046d2 <HAL_DMA_Abort+0x58a>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a31      	ldr	r2, [pc, #196]	; (8004774 <HAL_DMA_Abort+0x62c>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d00e      	beq.n	80046d2 <HAL_DMA_Abort+0x58a>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a2f      	ldr	r2, [pc, #188]	; (8004778 <HAL_DMA_Abort+0x630>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d009      	beq.n	80046d2 <HAL_DMA_Abort+0x58a>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a2e      	ldr	r2, [pc, #184]	; (800477c <HAL_DMA_Abort+0x634>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d004      	beq.n	80046d2 <HAL_DMA_Abort+0x58a>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a2c      	ldr	r2, [pc, #176]	; (8004780 <HAL_DMA_Abort+0x638>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d101      	bne.n	80046d6 <HAL_DMA_Abort+0x58e>
 80046d2:	2301      	movs	r3, #1
 80046d4:	e000      	b.n	80046d8 <HAL_DMA_Abort+0x590>
 80046d6:	2300      	movs	r3, #0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d015      	beq.n	8004708 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80046e4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00c      	beq.n	8004708 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046fc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004706:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	3718      	adds	r7, #24
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	40020010 	.word	0x40020010
 8004728:	40020028 	.word	0x40020028
 800472c:	40020040 	.word	0x40020040
 8004730:	40020058 	.word	0x40020058
 8004734:	40020070 	.word	0x40020070
 8004738:	40020088 	.word	0x40020088
 800473c:	400200a0 	.word	0x400200a0
 8004740:	400200b8 	.word	0x400200b8
 8004744:	40020410 	.word	0x40020410
 8004748:	40020428 	.word	0x40020428
 800474c:	40020440 	.word	0x40020440
 8004750:	40020458 	.word	0x40020458
 8004754:	40020470 	.word	0x40020470
 8004758:	40020488 	.word	0x40020488
 800475c:	400204a0 	.word	0x400204a0
 8004760:	400204b8 	.word	0x400204b8
 8004764:	58025408 	.word	0x58025408
 8004768:	5802541c 	.word	0x5802541c
 800476c:	58025430 	.word	0x58025430
 8004770:	58025444 	.word	0x58025444
 8004774:	58025458 	.word	0x58025458
 8004778:	5802546c 	.word	0x5802546c
 800477c:	58025480 	.word	0x58025480
 8004780:	58025494 	.word	0x58025494

08004784 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d101      	bne.n	8004796 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e237      	b.n	8004c06 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800479c:	b2db      	uxtb	r3, r3
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d004      	beq.n	80047ac <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2280      	movs	r2, #128	; 0x80
 80047a6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e22c      	b.n	8004c06 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a5c      	ldr	r2, [pc, #368]	; (8004924 <HAL_DMA_Abort_IT+0x1a0>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d04a      	beq.n	800484c <HAL_DMA_Abort_IT+0xc8>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a5b      	ldr	r2, [pc, #364]	; (8004928 <HAL_DMA_Abort_IT+0x1a4>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d045      	beq.n	800484c <HAL_DMA_Abort_IT+0xc8>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a59      	ldr	r2, [pc, #356]	; (800492c <HAL_DMA_Abort_IT+0x1a8>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d040      	beq.n	800484c <HAL_DMA_Abort_IT+0xc8>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a58      	ldr	r2, [pc, #352]	; (8004930 <HAL_DMA_Abort_IT+0x1ac>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d03b      	beq.n	800484c <HAL_DMA_Abort_IT+0xc8>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a56      	ldr	r2, [pc, #344]	; (8004934 <HAL_DMA_Abort_IT+0x1b0>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d036      	beq.n	800484c <HAL_DMA_Abort_IT+0xc8>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a55      	ldr	r2, [pc, #340]	; (8004938 <HAL_DMA_Abort_IT+0x1b4>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d031      	beq.n	800484c <HAL_DMA_Abort_IT+0xc8>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a53      	ldr	r2, [pc, #332]	; (800493c <HAL_DMA_Abort_IT+0x1b8>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d02c      	beq.n	800484c <HAL_DMA_Abort_IT+0xc8>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a52      	ldr	r2, [pc, #328]	; (8004940 <HAL_DMA_Abort_IT+0x1bc>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d027      	beq.n	800484c <HAL_DMA_Abort_IT+0xc8>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a50      	ldr	r2, [pc, #320]	; (8004944 <HAL_DMA_Abort_IT+0x1c0>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d022      	beq.n	800484c <HAL_DMA_Abort_IT+0xc8>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a4f      	ldr	r2, [pc, #316]	; (8004948 <HAL_DMA_Abort_IT+0x1c4>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d01d      	beq.n	800484c <HAL_DMA_Abort_IT+0xc8>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a4d      	ldr	r2, [pc, #308]	; (800494c <HAL_DMA_Abort_IT+0x1c8>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d018      	beq.n	800484c <HAL_DMA_Abort_IT+0xc8>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a4c      	ldr	r2, [pc, #304]	; (8004950 <HAL_DMA_Abort_IT+0x1cc>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d013      	beq.n	800484c <HAL_DMA_Abort_IT+0xc8>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a4a      	ldr	r2, [pc, #296]	; (8004954 <HAL_DMA_Abort_IT+0x1d0>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d00e      	beq.n	800484c <HAL_DMA_Abort_IT+0xc8>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a49      	ldr	r2, [pc, #292]	; (8004958 <HAL_DMA_Abort_IT+0x1d4>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d009      	beq.n	800484c <HAL_DMA_Abort_IT+0xc8>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a47      	ldr	r2, [pc, #284]	; (800495c <HAL_DMA_Abort_IT+0x1d8>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d004      	beq.n	800484c <HAL_DMA_Abort_IT+0xc8>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a46      	ldr	r2, [pc, #280]	; (8004960 <HAL_DMA_Abort_IT+0x1dc>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d101      	bne.n	8004850 <HAL_DMA_Abort_IT+0xcc>
 800484c:	2301      	movs	r3, #1
 800484e:	e000      	b.n	8004852 <HAL_DMA_Abort_IT+0xce>
 8004850:	2300      	movs	r3, #0
 8004852:	2b00      	cmp	r3, #0
 8004854:	f000 8086 	beq.w	8004964 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2204      	movs	r2, #4
 800485c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a2f      	ldr	r2, [pc, #188]	; (8004924 <HAL_DMA_Abort_IT+0x1a0>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d04a      	beq.n	8004900 <HAL_DMA_Abort_IT+0x17c>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a2e      	ldr	r2, [pc, #184]	; (8004928 <HAL_DMA_Abort_IT+0x1a4>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d045      	beq.n	8004900 <HAL_DMA_Abort_IT+0x17c>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a2c      	ldr	r2, [pc, #176]	; (800492c <HAL_DMA_Abort_IT+0x1a8>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d040      	beq.n	8004900 <HAL_DMA_Abort_IT+0x17c>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a2b      	ldr	r2, [pc, #172]	; (8004930 <HAL_DMA_Abort_IT+0x1ac>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d03b      	beq.n	8004900 <HAL_DMA_Abort_IT+0x17c>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a29      	ldr	r2, [pc, #164]	; (8004934 <HAL_DMA_Abort_IT+0x1b0>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d036      	beq.n	8004900 <HAL_DMA_Abort_IT+0x17c>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a28      	ldr	r2, [pc, #160]	; (8004938 <HAL_DMA_Abort_IT+0x1b4>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d031      	beq.n	8004900 <HAL_DMA_Abort_IT+0x17c>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a26      	ldr	r2, [pc, #152]	; (800493c <HAL_DMA_Abort_IT+0x1b8>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d02c      	beq.n	8004900 <HAL_DMA_Abort_IT+0x17c>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a25      	ldr	r2, [pc, #148]	; (8004940 <HAL_DMA_Abort_IT+0x1bc>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d027      	beq.n	8004900 <HAL_DMA_Abort_IT+0x17c>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a23      	ldr	r2, [pc, #140]	; (8004944 <HAL_DMA_Abort_IT+0x1c0>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d022      	beq.n	8004900 <HAL_DMA_Abort_IT+0x17c>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a22      	ldr	r2, [pc, #136]	; (8004948 <HAL_DMA_Abort_IT+0x1c4>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d01d      	beq.n	8004900 <HAL_DMA_Abort_IT+0x17c>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a20      	ldr	r2, [pc, #128]	; (800494c <HAL_DMA_Abort_IT+0x1c8>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d018      	beq.n	8004900 <HAL_DMA_Abort_IT+0x17c>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a1f      	ldr	r2, [pc, #124]	; (8004950 <HAL_DMA_Abort_IT+0x1cc>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d013      	beq.n	8004900 <HAL_DMA_Abort_IT+0x17c>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a1d      	ldr	r2, [pc, #116]	; (8004954 <HAL_DMA_Abort_IT+0x1d0>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d00e      	beq.n	8004900 <HAL_DMA_Abort_IT+0x17c>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a1c      	ldr	r2, [pc, #112]	; (8004958 <HAL_DMA_Abort_IT+0x1d4>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d009      	beq.n	8004900 <HAL_DMA_Abort_IT+0x17c>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a1a      	ldr	r2, [pc, #104]	; (800495c <HAL_DMA_Abort_IT+0x1d8>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d004      	beq.n	8004900 <HAL_DMA_Abort_IT+0x17c>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a19      	ldr	r2, [pc, #100]	; (8004960 <HAL_DMA_Abort_IT+0x1dc>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d108      	bne.n	8004912 <HAL_DMA_Abort_IT+0x18e>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f022 0201 	bic.w	r2, r2, #1
 800490e:	601a      	str	r2, [r3, #0]
 8004910:	e178      	b.n	8004c04 <HAL_DMA_Abort_IT+0x480>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f022 0201 	bic.w	r2, r2, #1
 8004920:	601a      	str	r2, [r3, #0]
 8004922:	e16f      	b.n	8004c04 <HAL_DMA_Abort_IT+0x480>
 8004924:	40020010 	.word	0x40020010
 8004928:	40020028 	.word	0x40020028
 800492c:	40020040 	.word	0x40020040
 8004930:	40020058 	.word	0x40020058
 8004934:	40020070 	.word	0x40020070
 8004938:	40020088 	.word	0x40020088
 800493c:	400200a0 	.word	0x400200a0
 8004940:	400200b8 	.word	0x400200b8
 8004944:	40020410 	.word	0x40020410
 8004948:	40020428 	.word	0x40020428
 800494c:	40020440 	.word	0x40020440
 8004950:	40020458 	.word	0x40020458
 8004954:	40020470 	.word	0x40020470
 8004958:	40020488 	.word	0x40020488
 800495c:	400204a0 	.word	0x400204a0
 8004960:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f022 020e 	bic.w	r2, r2, #14
 8004972:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a6c      	ldr	r2, [pc, #432]	; (8004b2c <HAL_DMA_Abort_IT+0x3a8>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d04a      	beq.n	8004a14 <HAL_DMA_Abort_IT+0x290>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a6b      	ldr	r2, [pc, #428]	; (8004b30 <HAL_DMA_Abort_IT+0x3ac>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d045      	beq.n	8004a14 <HAL_DMA_Abort_IT+0x290>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a69      	ldr	r2, [pc, #420]	; (8004b34 <HAL_DMA_Abort_IT+0x3b0>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d040      	beq.n	8004a14 <HAL_DMA_Abort_IT+0x290>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a68      	ldr	r2, [pc, #416]	; (8004b38 <HAL_DMA_Abort_IT+0x3b4>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d03b      	beq.n	8004a14 <HAL_DMA_Abort_IT+0x290>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a66      	ldr	r2, [pc, #408]	; (8004b3c <HAL_DMA_Abort_IT+0x3b8>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d036      	beq.n	8004a14 <HAL_DMA_Abort_IT+0x290>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a65      	ldr	r2, [pc, #404]	; (8004b40 <HAL_DMA_Abort_IT+0x3bc>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d031      	beq.n	8004a14 <HAL_DMA_Abort_IT+0x290>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a63      	ldr	r2, [pc, #396]	; (8004b44 <HAL_DMA_Abort_IT+0x3c0>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d02c      	beq.n	8004a14 <HAL_DMA_Abort_IT+0x290>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a62      	ldr	r2, [pc, #392]	; (8004b48 <HAL_DMA_Abort_IT+0x3c4>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d027      	beq.n	8004a14 <HAL_DMA_Abort_IT+0x290>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a60      	ldr	r2, [pc, #384]	; (8004b4c <HAL_DMA_Abort_IT+0x3c8>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d022      	beq.n	8004a14 <HAL_DMA_Abort_IT+0x290>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a5f      	ldr	r2, [pc, #380]	; (8004b50 <HAL_DMA_Abort_IT+0x3cc>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d01d      	beq.n	8004a14 <HAL_DMA_Abort_IT+0x290>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a5d      	ldr	r2, [pc, #372]	; (8004b54 <HAL_DMA_Abort_IT+0x3d0>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d018      	beq.n	8004a14 <HAL_DMA_Abort_IT+0x290>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a5c      	ldr	r2, [pc, #368]	; (8004b58 <HAL_DMA_Abort_IT+0x3d4>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d013      	beq.n	8004a14 <HAL_DMA_Abort_IT+0x290>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a5a      	ldr	r2, [pc, #360]	; (8004b5c <HAL_DMA_Abort_IT+0x3d8>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d00e      	beq.n	8004a14 <HAL_DMA_Abort_IT+0x290>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a59      	ldr	r2, [pc, #356]	; (8004b60 <HAL_DMA_Abort_IT+0x3dc>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d009      	beq.n	8004a14 <HAL_DMA_Abort_IT+0x290>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a57      	ldr	r2, [pc, #348]	; (8004b64 <HAL_DMA_Abort_IT+0x3e0>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d004      	beq.n	8004a14 <HAL_DMA_Abort_IT+0x290>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a56      	ldr	r2, [pc, #344]	; (8004b68 <HAL_DMA_Abort_IT+0x3e4>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d108      	bne.n	8004a26 <HAL_DMA_Abort_IT+0x2a2>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f022 0201 	bic.w	r2, r2, #1
 8004a22:	601a      	str	r2, [r3, #0]
 8004a24:	e007      	b.n	8004a36 <HAL_DMA_Abort_IT+0x2b2>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f022 0201 	bic.w	r2, r2, #1
 8004a34:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a3c      	ldr	r2, [pc, #240]	; (8004b2c <HAL_DMA_Abort_IT+0x3a8>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d072      	beq.n	8004b26 <HAL_DMA_Abort_IT+0x3a2>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a3a      	ldr	r2, [pc, #232]	; (8004b30 <HAL_DMA_Abort_IT+0x3ac>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d06d      	beq.n	8004b26 <HAL_DMA_Abort_IT+0x3a2>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a39      	ldr	r2, [pc, #228]	; (8004b34 <HAL_DMA_Abort_IT+0x3b0>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d068      	beq.n	8004b26 <HAL_DMA_Abort_IT+0x3a2>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a37      	ldr	r2, [pc, #220]	; (8004b38 <HAL_DMA_Abort_IT+0x3b4>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d063      	beq.n	8004b26 <HAL_DMA_Abort_IT+0x3a2>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a36      	ldr	r2, [pc, #216]	; (8004b3c <HAL_DMA_Abort_IT+0x3b8>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d05e      	beq.n	8004b26 <HAL_DMA_Abort_IT+0x3a2>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a34      	ldr	r2, [pc, #208]	; (8004b40 <HAL_DMA_Abort_IT+0x3bc>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d059      	beq.n	8004b26 <HAL_DMA_Abort_IT+0x3a2>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a33      	ldr	r2, [pc, #204]	; (8004b44 <HAL_DMA_Abort_IT+0x3c0>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d054      	beq.n	8004b26 <HAL_DMA_Abort_IT+0x3a2>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a31      	ldr	r2, [pc, #196]	; (8004b48 <HAL_DMA_Abort_IT+0x3c4>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d04f      	beq.n	8004b26 <HAL_DMA_Abort_IT+0x3a2>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a30      	ldr	r2, [pc, #192]	; (8004b4c <HAL_DMA_Abort_IT+0x3c8>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d04a      	beq.n	8004b26 <HAL_DMA_Abort_IT+0x3a2>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a2e      	ldr	r2, [pc, #184]	; (8004b50 <HAL_DMA_Abort_IT+0x3cc>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d045      	beq.n	8004b26 <HAL_DMA_Abort_IT+0x3a2>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a2d      	ldr	r2, [pc, #180]	; (8004b54 <HAL_DMA_Abort_IT+0x3d0>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d040      	beq.n	8004b26 <HAL_DMA_Abort_IT+0x3a2>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a2b      	ldr	r2, [pc, #172]	; (8004b58 <HAL_DMA_Abort_IT+0x3d4>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d03b      	beq.n	8004b26 <HAL_DMA_Abort_IT+0x3a2>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a2a      	ldr	r2, [pc, #168]	; (8004b5c <HAL_DMA_Abort_IT+0x3d8>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d036      	beq.n	8004b26 <HAL_DMA_Abort_IT+0x3a2>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a28      	ldr	r2, [pc, #160]	; (8004b60 <HAL_DMA_Abort_IT+0x3dc>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d031      	beq.n	8004b26 <HAL_DMA_Abort_IT+0x3a2>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a27      	ldr	r2, [pc, #156]	; (8004b64 <HAL_DMA_Abort_IT+0x3e0>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d02c      	beq.n	8004b26 <HAL_DMA_Abort_IT+0x3a2>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a25      	ldr	r2, [pc, #148]	; (8004b68 <HAL_DMA_Abort_IT+0x3e4>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d027      	beq.n	8004b26 <HAL_DMA_Abort_IT+0x3a2>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a24      	ldr	r2, [pc, #144]	; (8004b6c <HAL_DMA_Abort_IT+0x3e8>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d022      	beq.n	8004b26 <HAL_DMA_Abort_IT+0x3a2>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a22      	ldr	r2, [pc, #136]	; (8004b70 <HAL_DMA_Abort_IT+0x3ec>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d01d      	beq.n	8004b26 <HAL_DMA_Abort_IT+0x3a2>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a21      	ldr	r2, [pc, #132]	; (8004b74 <HAL_DMA_Abort_IT+0x3f0>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d018      	beq.n	8004b26 <HAL_DMA_Abort_IT+0x3a2>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a1f      	ldr	r2, [pc, #124]	; (8004b78 <HAL_DMA_Abort_IT+0x3f4>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d013      	beq.n	8004b26 <HAL_DMA_Abort_IT+0x3a2>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a1e      	ldr	r2, [pc, #120]	; (8004b7c <HAL_DMA_Abort_IT+0x3f8>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d00e      	beq.n	8004b26 <HAL_DMA_Abort_IT+0x3a2>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a1c      	ldr	r2, [pc, #112]	; (8004b80 <HAL_DMA_Abort_IT+0x3fc>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d009      	beq.n	8004b26 <HAL_DMA_Abort_IT+0x3a2>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a1b      	ldr	r2, [pc, #108]	; (8004b84 <HAL_DMA_Abort_IT+0x400>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d004      	beq.n	8004b26 <HAL_DMA_Abort_IT+0x3a2>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a19      	ldr	r2, [pc, #100]	; (8004b88 <HAL_DMA_Abort_IT+0x404>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d132      	bne.n	8004b8c <HAL_DMA_Abort_IT+0x408>
 8004b26:	2301      	movs	r3, #1
 8004b28:	e031      	b.n	8004b8e <HAL_DMA_Abort_IT+0x40a>
 8004b2a:	bf00      	nop
 8004b2c:	40020010 	.word	0x40020010
 8004b30:	40020028 	.word	0x40020028
 8004b34:	40020040 	.word	0x40020040
 8004b38:	40020058 	.word	0x40020058
 8004b3c:	40020070 	.word	0x40020070
 8004b40:	40020088 	.word	0x40020088
 8004b44:	400200a0 	.word	0x400200a0
 8004b48:	400200b8 	.word	0x400200b8
 8004b4c:	40020410 	.word	0x40020410
 8004b50:	40020428 	.word	0x40020428
 8004b54:	40020440 	.word	0x40020440
 8004b58:	40020458 	.word	0x40020458
 8004b5c:	40020470 	.word	0x40020470
 8004b60:	40020488 	.word	0x40020488
 8004b64:	400204a0 	.word	0x400204a0
 8004b68:	400204b8 	.word	0x400204b8
 8004b6c:	58025408 	.word	0x58025408
 8004b70:	5802541c 	.word	0x5802541c
 8004b74:	58025430 	.word	0x58025430
 8004b78:	58025444 	.word	0x58025444
 8004b7c:	58025458 	.word	0x58025458
 8004b80:	5802546c 	.word	0x5802546c
 8004b84:	58025480 	.word	0x58025480
 8004b88:	58025494 	.word	0x58025494
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d028      	beq.n	8004be4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ba0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ba6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bac:	f003 031f 	and.w	r3, r3, #31
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	409a      	lsls	r2, r3
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004bc0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d00c      	beq.n	8004be4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bd4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004bd8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004be2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2201      	movs	r2, #1
 8004be8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d003      	beq.n	8004c04 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004c04:	2300      	movs	r3, #0
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3710      	adds	r7, #16
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	bf00      	nop

08004c10 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d101      	bne.n	8004c22 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e0cf      	b.n	8004dc2 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d106      	bne.n	8004c3a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2223      	movs	r2, #35	; 0x23
 8004c30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f7fd f8b3 	bl	8001da0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c3a:	4b64      	ldr	r3, [pc, #400]	; (8004dcc <HAL_ETH_Init+0x1bc>)
 8004c3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004c40:	4a62      	ldr	r2, [pc, #392]	; (8004dcc <HAL_ETH_Init+0x1bc>)
 8004c42:	f043 0302 	orr.w	r3, r3, #2
 8004c46:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004c4a:	4b60      	ldr	r3, [pc, #384]	; (8004dcc <HAL_ETH_Init+0x1bc>)
 8004c4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004c50:	f003 0302 	and.w	r3, r3, #2
 8004c54:	60bb      	str	r3, [r7, #8]
 8004c56:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	7a1b      	ldrb	r3, [r3, #8]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d103      	bne.n	8004c68 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8004c60:	2000      	movs	r0, #0
 8004c62:	f7fe f8a9 	bl	8002db8 <HAL_SYSCFG_ETHInterfaceSelect>
 8004c66:	e003      	b.n	8004c70 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8004c68:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8004c6c:	f7fe f8a4 	bl	8002db8 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8004c70:	4b57      	ldr	r3, [pc, #348]	; (8004dd0 <HAL_ETH_Init+0x1c0>)
 8004c72:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	6812      	ldr	r2, [r2, #0]
 8004c82:	f043 0301 	orr.w	r3, r3, #1
 8004c86:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004c8a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c8c:	f7fe f858 	bl	8002d40 <HAL_GetTick>
 8004c90:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004c92:	e011      	b.n	8004cb8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004c94:	f7fe f854 	bl	8002d40 <HAL_GetTick>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004ca2:	d909      	bls.n	8004cb8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2204      	movs	r2, #4
 8004ca8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	22e0      	movs	r2, #224	; 0xe0
 8004cb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e084      	b.n	8004dc2 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0301 	and.w	r3, r3, #1
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d1e4      	bne.n	8004c94 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 f886 	bl	8004ddc <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004cd0:	f002 fcb4 	bl	800763c <HAL_RCC_GetHCLKFreq>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	4a3f      	ldr	r2, [pc, #252]	; (8004dd4 <HAL_ETH_Init+0x1c4>)
 8004cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8004cdc:	0c9a      	lsrs	r2, r3, #18
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	3a01      	subs	r2, #1
 8004ce4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 fa71 	bl	80051d0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cf6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004cfa:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	6812      	ldr	r2, [r2, #0]
 8004d02:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d06:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004d0a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	695b      	ldr	r3, [r3, #20]
 8004d12:	f003 0303 	and.w	r3, r3, #3
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d009      	beq.n	8004d2e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	22e0      	movs	r2, #224	; 0xe0
 8004d26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e049      	b.n	8004dc2 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d36:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8004d3a:	4b27      	ldr	r3, [pc, #156]	; (8004dd8 <HAL_ETH_Init+0x1c8>)
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	6952      	ldr	r2, [r2, #20]
 8004d42:	0051      	lsls	r1, r2, #1
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	6812      	ldr	r2, [r2, #0]
 8004d48:	430b      	orrs	r3, r1
 8004d4a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004d4e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f000 fad9 	bl	800530a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f000 fb1f 	bl	800539c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	3305      	adds	r3, #5
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	021a      	lsls	r2, r3, #8
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	3304      	adds	r3, #4
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	4619      	mov	r1, r3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	430a      	orrs	r2, r1
 8004d78:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	3303      	adds	r3, #3
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	061a      	lsls	r2, r3, #24
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	3302      	adds	r3, #2
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	041b      	lsls	r3, r3, #16
 8004d90:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	3301      	adds	r3, #1
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004d9c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004daa:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004dac:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2210      	movs	r2, #16
 8004dbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3710      	adds	r7, #16
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	58024400 	.word	0x58024400
 8004dd0:	58000400 	.word	0x58000400
 8004dd4:	431bde83 	.word	0x431bde83
 8004dd8:	ffff8001 	.word	0xffff8001

08004ddc <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004dec:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004df4:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004df6:	f002 fc21 	bl	800763c <HAL_RCC_GetHCLKFreq>
 8004dfa:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	4a1e      	ldr	r2, [pc, #120]	; (8004e78 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d908      	bls.n	8004e16 <HAL_ETH_SetMDIOClockRange+0x3a>
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	4a1d      	ldr	r2, [pc, #116]	; (8004e7c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d804      	bhi.n	8004e16 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e12:	60fb      	str	r3, [r7, #12]
 8004e14:	e027      	b.n	8004e66 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	4a18      	ldr	r2, [pc, #96]	; (8004e7c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d908      	bls.n	8004e30 <HAL_ETH_SetMDIOClockRange+0x54>
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	4a17      	ldr	r2, [pc, #92]	; (8004e80 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d204      	bcs.n	8004e30 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004e2c:	60fb      	str	r3, [r7, #12]
 8004e2e:	e01a      	b.n	8004e66 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	4a13      	ldr	r2, [pc, #76]	; (8004e80 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d303      	bcc.n	8004e40 <HAL_ETH_SetMDIOClockRange+0x64>
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	4a12      	ldr	r2, [pc, #72]	; (8004e84 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d911      	bls.n	8004e64 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	4a10      	ldr	r2, [pc, #64]	; (8004e84 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d908      	bls.n	8004e5a <HAL_ETH_SetMDIOClockRange+0x7e>
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	4a0f      	ldr	r2, [pc, #60]	; (8004e88 <HAL_ETH_SetMDIOClockRange+0xac>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d804      	bhi.n	8004e5a <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e56:	60fb      	str	r3, [r7, #12]
 8004e58:	e005      	b.n	8004e66 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e60:	60fb      	str	r3, [r7, #12]
 8004e62:	e000      	b.n	8004e66 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8004e64:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	68fa      	ldr	r2, [r7, #12]
 8004e6c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8004e70:	bf00      	nop
 8004e72:	3710      	adds	r7, #16
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	01312cff 	.word	0x01312cff
 8004e7c:	02160ebf 	.word	0x02160ebf
 8004e80:	03938700 	.word	0x03938700
 8004e84:	05f5e0ff 	.word	0x05f5e0ff
 8004e88:	08f0d17f 	.word	0x08f0d17f

08004e8c <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b085      	sub	sp, #20
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8004e9e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	791b      	ldrb	r3, [r3, #4]
 8004ea4:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8004ea6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	7b1b      	ldrb	r3, [r3, #12]
 8004eac:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004eae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	7b5b      	ldrb	r3, [r3, #13]
 8004eb4:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004eb6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	7b9b      	ldrb	r3, [r3, #14]
 8004ebc:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004ebe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	7bdb      	ldrb	r3, [r3, #15]
 8004ec4:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004ec6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004ec8:	683a      	ldr	r2, [r7, #0]
 8004eca:	7c12      	ldrb	r2, [r2, #16]
 8004ecc:	2a00      	cmp	r2, #0
 8004ece:	d102      	bne.n	8004ed6 <ETH_SetMACConfig+0x4a>
 8004ed0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004ed4:	e000      	b.n	8004ed8 <ETH_SetMACConfig+0x4c>
 8004ed6:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004ed8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004eda:	683a      	ldr	r2, [r7, #0]
 8004edc:	7c52      	ldrb	r2, [r2, #17]
 8004ede:	2a00      	cmp	r2, #0
 8004ee0:	d102      	bne.n	8004ee8 <ETH_SetMACConfig+0x5c>
 8004ee2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004ee6:	e000      	b.n	8004eea <ETH_SetMACConfig+0x5e>
 8004ee8:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004eea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	7c9b      	ldrb	r3, [r3, #18]
 8004ef0:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004ef2:	431a      	orrs	r2, r3
               macconf->Speed |
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8004ef8:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8004efe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	7f1b      	ldrb	r3, [r3, #28]
 8004f04:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8004f06:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	7f5b      	ldrb	r3, [r3, #29]
 8004f0c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004f0e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004f10:	683a      	ldr	r2, [r7, #0]
 8004f12:	7f92      	ldrb	r2, [r2, #30]
 8004f14:	2a00      	cmp	r2, #0
 8004f16:	d102      	bne.n	8004f1e <ETH_SetMACConfig+0x92>
 8004f18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f1c:	e000      	b.n	8004f20 <ETH_SetMACConfig+0x94>
 8004f1e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004f20:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	7fdb      	ldrb	r3, [r3, #31]
 8004f26:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004f28:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004f2a:	683a      	ldr	r2, [r7, #0]
 8004f2c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004f30:	2a00      	cmp	r2, #0
 8004f32:	d102      	bne.n	8004f3a <ETH_SetMACConfig+0xae>
 8004f34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f38:	e000      	b.n	8004f3c <ETH_SetMACConfig+0xb0>
 8004f3a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004f3c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004f42:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f4a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8004f4c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8004f52:	4313      	orrs	r3, r2
 8004f54:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	4b56      	ldr	r3, [pc, #344]	; (80050b8 <ETH_SetMACConfig+0x22c>)
 8004f5e:	4013      	ands	r3, r2
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	6812      	ldr	r2, [r2, #0]
 8004f64:	68f9      	ldr	r1, [r7, #12]
 8004f66:	430b      	orrs	r3, r1
 8004f68:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f6e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004f76:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004f78:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004f80:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8004f82:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004f8a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8004f8c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8004f8e:	683a      	ldr	r2, [r7, #0]
 8004f90:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8004f94:	2a00      	cmp	r2, #0
 8004f96:	d102      	bne.n	8004f9e <ETH_SetMACConfig+0x112>
 8004f98:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004f9c:	e000      	b.n	8004fa0 <ETH_SetMACConfig+0x114>
 8004f9e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8004fa0:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	685a      	ldr	r2, [r3, #4]
 8004fb0:	4b42      	ldr	r3, [pc, #264]	; (80050bc <ETH_SetMACConfig+0x230>)
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	6812      	ldr	r2, [r2, #0]
 8004fb8:	68f9      	ldr	r1, [r7, #12]
 8004fba:	430b      	orrs	r3, r1
 8004fbc:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004fc4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	68da      	ldr	r2, [r3, #12]
 8004fd4:	4b3a      	ldr	r3, [pc, #232]	; (80050c0 <ETH_SetMACConfig+0x234>)
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	6812      	ldr	r2, [r2, #0]
 8004fdc:	68f9      	ldr	r1, [r7, #12]
 8004fde:	430b      	orrs	r3, r1
 8004fe0:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004fe8:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004fee:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8004ff0:	683a      	ldr	r2, [r7, #0]
 8004ff2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8004ff6:	2a00      	cmp	r2, #0
 8004ff8:	d101      	bne.n	8004ffe <ETH_SetMACConfig+0x172>
 8004ffa:	2280      	movs	r2, #128	; 0x80
 8004ffc:	e000      	b.n	8005000 <ETH_SetMACConfig+0x174>
 8004ffe:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8005000:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005006:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005008:	4313      	orrs	r3, r2
 800500a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005012:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8005016:	4013      	ands	r3, r2
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	6812      	ldr	r2, [r2, #0]
 800501c:	68f9      	ldr	r1, [r7, #12]
 800501e:	430b      	orrs	r3, r1
 8005020:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005028:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8005030:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005032:	4313      	orrs	r3, r2
 8005034:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800503e:	f023 0103 	bic.w	r1, r3, #3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	430a      	orrs	r2, r1
 800504a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8005056:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	430a      	orrs	r2, r1
 8005064:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800506c:	683a      	ldr	r2, [r7, #0]
 800506e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8005072:	2a00      	cmp	r2, #0
 8005074:	d101      	bne.n	800507a <ETH_SetMACConfig+0x1ee>
 8005076:	2240      	movs	r2, #64	; 0x40
 8005078:	e000      	b.n	800507c <ETH_SetMACConfig+0x1f0>
 800507a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800507c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005084:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005086:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800508e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8005090:	4313      	orrs	r3, r2
 8005092:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800509c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	68fa      	ldr	r2, [r7, #12]
 80050a6:	430a      	orrs	r2, r1
 80050a8:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80050ac:	bf00      	nop
 80050ae:	3714      	adds	r7, #20
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr
 80050b8:	00048083 	.word	0x00048083
 80050bc:	c0f88000 	.word	0xc0f88000
 80050c0:	fffffef0 	.word	0xfffffef0

080050c4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b085      	sub	sp, #20
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	4b38      	ldr	r3, [pc, #224]	; (80051bc <ETH_SetDMAConfig+0xf8>)
 80050da:	4013      	ands	r3, r2
 80050dc:	683a      	ldr	r2, [r7, #0]
 80050de:	6811      	ldr	r1, [r2, #0]
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	6812      	ldr	r2, [r2, #0]
 80050e4:	430b      	orrs	r3, r1
 80050e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80050ea:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	791b      	ldrb	r3, [r3, #4]
 80050f0:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80050f6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	7b1b      	ldrb	r3, [r3, #12]
 80050fc:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80050fe:	4313      	orrs	r3, r2
 8005100:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800510a:	685a      	ldr	r2, [r3, #4]
 800510c:	4b2c      	ldr	r3, [pc, #176]	; (80051c0 <ETH_SetDMAConfig+0xfc>)
 800510e:	4013      	ands	r3, r2
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	6812      	ldr	r2, [r2, #0]
 8005114:	68f9      	ldr	r1, [r7, #12]
 8005116:	430b      	orrs	r3, r1
 8005118:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800511c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	7b5b      	ldrb	r3, [r3, #13]
 8005122:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005128:	4313      	orrs	r3, r2
 800512a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005134:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8005138:	4b22      	ldr	r3, [pc, #136]	; (80051c4 <ETH_SetDMAConfig+0x100>)
 800513a:	4013      	ands	r3, r2
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	6812      	ldr	r2, [r2, #0]
 8005140:	68f9      	ldr	r1, [r7, #12]
 8005142:	430b      	orrs	r3, r1
 8005144:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005148:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	7d1b      	ldrb	r3, [r3, #20]
 8005154:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8005156:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	7f5b      	ldrb	r3, [r3, #29]
 800515c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800515e:	4313      	orrs	r3, r2
 8005160:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800516a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800516e:	4b16      	ldr	r3, [pc, #88]	; (80051c8 <ETH_SetDMAConfig+0x104>)
 8005170:	4013      	ands	r3, r2
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	6812      	ldr	r2, [r2, #0]
 8005176:	68f9      	ldr	r1, [r7, #12]
 8005178:	430b      	orrs	r3, r1
 800517a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800517e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	7f1b      	ldrb	r3, [r3, #28]
 8005186:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800518c:	4313      	orrs	r3, r2
 800518e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005198:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800519c:	4b0b      	ldr	r3, [pc, #44]	; (80051cc <ETH_SetDMAConfig+0x108>)
 800519e:	4013      	ands	r3, r2
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	6812      	ldr	r2, [r2, #0]
 80051a4:	68f9      	ldr	r1, [r7, #12]
 80051a6:	430b      	orrs	r3, r1
 80051a8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80051ac:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80051b0:	bf00      	nop
 80051b2:	3714      	adds	r7, #20
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr
 80051bc:	ffff87fd 	.word	0xffff87fd
 80051c0:	ffff2ffe 	.word	0xffff2ffe
 80051c4:	fffec000 	.word	0xfffec000
 80051c8:	ffc0efef 	.word	0xffc0efef
 80051cc:	7fc0ffff 	.word	0x7fc0ffff

080051d0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b0a4      	sub	sp, #144	; 0x90
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80051d8:	2301      	movs	r3, #1
 80051da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80051de:	2300      	movs	r3, #0
 80051e0:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80051e2:	2300      	movs	r3, #0
 80051e4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80051e8:	2300      	movs	r3, #0
 80051ea:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80051ee:	2301      	movs	r3, #1
 80051f0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80051f4:	2301      	movs	r3, #1
 80051f6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80051fa:	2301      	movs	r3, #1
 80051fc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8005200:	2300      	movs	r3, #0
 8005202:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8005206:	2301      	movs	r3, #1
 8005208:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800520c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005210:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8005212:	2300      	movs	r3, #0
 8005214:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8005218:	2300      	movs	r3, #0
 800521a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800521c:	2300      	movs	r3, #0
 800521e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8005222:	2300      	movs	r3, #0
 8005224:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8005228:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 800522c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800522e:	2300      	movs	r3, #0
 8005230:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8005234:	2300      	movs	r3, #0
 8005236:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8005238:	2301      	movs	r3, #1
 800523a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800523e:	2300      	movs	r3, #0
 8005240:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8005244:	2300      	movs	r3, #0
 8005246:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800524a:	2300      	movs	r3, #0
 800524c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800524e:	2300      	movs	r3, #0
 8005250:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8005252:	2300      	movs	r3, #0
 8005254:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8005256:	2300      	movs	r3, #0
 8005258:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800525c:	2300      	movs	r3, #0
 800525e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8005262:	2301      	movs	r3, #1
 8005264:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8005268:	2320      	movs	r3, #32
 800526a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800526e:	2301      	movs	r3, #1
 8005270:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8005274:	2300      	movs	r3, #0
 8005276:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800527a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800527e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005280:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005284:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8005286:	2300      	movs	r3, #0
 8005288:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800528c:	2302      	movs	r3, #2
 800528e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005292:	2300      	movs	r3, #0
 8005294:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005298:	2300      	movs	r3, #0
 800529a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800529e:	2300      	movs	r3, #0
 80052a0:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80052a4:	2301      	movs	r3, #1
 80052a6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80052aa:	2300      	movs	r3, #0
 80052ac:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80052ae:	2301      	movs	r3, #1
 80052b0:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80052b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80052b8:	4619      	mov	r1, r3
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f7ff fde6 	bl	8004e8c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80052c0:	2301      	movs	r3, #1
 80052c2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80052c4:	2301      	movs	r3, #1
 80052c6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80052c8:	2300      	movs	r3, #0
 80052ca:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80052cc:	2300      	movs	r3, #0
 80052ce:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80052d2:	2300      	movs	r3, #0
 80052d4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80052d6:	2300      	movs	r3, #0
 80052d8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80052da:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80052de:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80052e0:	2300      	movs	r3, #0
 80052e2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80052e4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80052e8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80052ea:	2300      	movs	r3, #0
 80052ec:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80052f0:	f44f 7306 	mov.w	r3, #536	; 0x218
 80052f4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80052f6:	f107 0308 	add.w	r3, r7, #8
 80052fa:	4619      	mov	r1, r3
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f7ff fee1 	bl	80050c4 <ETH_SetDMAConfig>
}
 8005302:	bf00      	nop
 8005304:	3790      	adds	r7, #144	; 0x90
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}

0800530a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800530a:	b480      	push	{r7}
 800530c:	b085      	sub	sp, #20
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005312:	2300      	movs	r3, #0
 8005314:	60fb      	str	r3, [r7, #12]
 8005316:	e01d      	b.n	8005354 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	68d9      	ldr	r1, [r3, #12]
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	4613      	mov	r3, r2
 8005320:	005b      	lsls	r3, r3, #1
 8005322:	4413      	add	r3, r2
 8005324:	00db      	lsls	r3, r3, #3
 8005326:	440b      	add	r3, r1
 8005328:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	2200      	movs	r2, #0
 800532e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	2200      	movs	r2, #0
 8005334:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	2200      	movs	r2, #0
 800533a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	2200      	movs	r2, #0
 8005340:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005342:	68b9      	ldr	r1, [r7, #8]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	68fa      	ldr	r2, [r7, #12]
 8005348:	3206      	adds	r2, #6
 800534a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	3301      	adds	r3, #1
 8005352:	60fb      	str	r3, [r7, #12]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2b03      	cmp	r3, #3
 8005358:	d9de      	bls.n	8005318 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005368:	461a      	mov	r2, r3
 800536a:	2303      	movs	r3, #3
 800536c:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	68da      	ldr	r2, [r3, #12]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800537c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	68da      	ldr	r2, [r3, #12]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800538c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8005390:	bf00      	nop
 8005392:	3714      	adds	r7, #20
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800539c:	b480      	push	{r7}
 800539e:	b085      	sub	sp, #20
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80053a4:	2300      	movs	r3, #0
 80053a6:	60fb      	str	r3, [r7, #12]
 80053a8:	e023      	b.n	80053f2 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6919      	ldr	r1, [r3, #16]
 80053ae:	68fa      	ldr	r2, [r7, #12]
 80053b0:	4613      	mov	r3, r2
 80053b2:	005b      	lsls	r3, r3, #1
 80053b4:	4413      	add	r3, r2
 80053b6:	00db      	lsls	r3, r3, #3
 80053b8:	440b      	add	r3, r1
 80053ba:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	2200      	movs	r2, #0
 80053c0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	2200      	movs	r2, #0
 80053c6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	2200      	movs	r2, #0
 80053cc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	2200      	movs	r2, #0
 80053d2:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	2200      	movs	r2, #0
 80053d8:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	2200      	movs	r2, #0
 80053de:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80053e0:	68b9      	ldr	r1, [r7, #8]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	68fa      	ldr	r2, [r7, #12]
 80053e6:	3212      	adds	r2, #18
 80053e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	3301      	adds	r3, #1
 80053f0:	60fb      	str	r3, [r7, #12]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2b03      	cmp	r3, #3
 80053f6:	d9d8      	bls.n	80053aa <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800541e:	461a      	mov	r2, r3
 8005420:	2303      	movs	r3, #3
 8005422:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	691a      	ldr	r2, [r3, #16]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005432:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	691b      	ldr	r3, [r3, #16]
 800543a:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005446:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 800544a:	bf00      	nop
 800544c:	3714      	adds	r7, #20
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr
	...

08005458 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b098      	sub	sp, #96	; 0x60
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8005460:	4a84      	ldr	r2, [pc, #528]	; (8005674 <HAL_FDCAN_Init+0x21c>)
 8005462:	f107 030c 	add.w	r3, r7, #12
 8005466:	4611      	mov	r1, r2
 8005468:	224c      	movs	r2, #76	; 0x4c
 800546a:	4618      	mov	r0, r3
 800546c:	f008 ff58 	bl	800e320 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d101      	bne.n	800547a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e1c6      	b.n	8005808 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a7e      	ldr	r2, [pc, #504]	; (8005678 <HAL_FDCAN_Init+0x220>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d106      	bne.n	8005492 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800548c:	461a      	mov	r2, r3
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005498:	b2db      	uxtb	r3, r3
 800549a:	2b00      	cmp	r3, #0
 800549c:	d106      	bne.n	80054ac <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f7fc fdaa 	bl	8002000 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	699a      	ldr	r2, [r3, #24]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f022 0210 	bic.w	r2, r2, #16
 80054ba:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80054bc:	f7fd fc40 	bl	8002d40 <HAL_GetTick>
 80054c0:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80054c2:	e014      	b.n	80054ee <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80054c4:	f7fd fc3c 	bl	8002d40 <HAL_GetTick>
 80054c8:	4602      	mov	r2, r0
 80054ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	2b0a      	cmp	r3, #10
 80054d0:	d90d      	bls.n	80054ee <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80054d8:	f043 0201 	orr.w	r2, r3, #1
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2203      	movs	r2, #3
 80054e6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e18c      	b.n	8005808 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	699b      	ldr	r3, [r3, #24]
 80054f4:	f003 0308 	and.w	r3, r3, #8
 80054f8:	2b08      	cmp	r3, #8
 80054fa:	d0e3      	beq.n	80054c4 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	699a      	ldr	r2, [r3, #24]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f042 0201 	orr.w	r2, r2, #1
 800550a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800550c:	f7fd fc18 	bl	8002d40 <HAL_GetTick>
 8005510:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005512:	e014      	b.n	800553e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005514:	f7fd fc14 	bl	8002d40 <HAL_GetTick>
 8005518:	4602      	mov	r2, r0
 800551a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	2b0a      	cmp	r3, #10
 8005520:	d90d      	bls.n	800553e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005528:	f043 0201 	orr.w	r2, r3, #1
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2203      	movs	r2, #3
 8005536:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e164      	b.n	8005808 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	699b      	ldr	r3, [r3, #24]
 8005544:	f003 0301 	and.w	r3, r3, #1
 8005548:	2b00      	cmp	r3, #0
 800554a:	d0e3      	beq.n	8005514 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	699a      	ldr	r2, [r3, #24]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f042 0202 	orr.w	r2, r2, #2
 800555a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	7c1b      	ldrb	r3, [r3, #16]
 8005560:	2b01      	cmp	r3, #1
 8005562:	d108      	bne.n	8005576 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	699a      	ldr	r2, [r3, #24]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005572:	619a      	str	r2, [r3, #24]
 8005574:	e007      	b.n	8005586 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	699a      	ldr	r2, [r3, #24]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005584:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	7c5b      	ldrb	r3, [r3, #17]
 800558a:	2b01      	cmp	r3, #1
 800558c:	d108      	bne.n	80055a0 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	699a      	ldr	r2, [r3, #24]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800559c:	619a      	str	r2, [r3, #24]
 800559e:	e007      	b.n	80055b0 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	699a      	ldr	r2, [r3, #24]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80055ae:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	7c9b      	ldrb	r3, [r3, #18]
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d108      	bne.n	80055ca <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	699a      	ldr	r2, [r3, #24]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80055c6:	619a      	str	r2, [r3, #24]
 80055c8:	e007      	b.n	80055da <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	699a      	ldr	r2, [r3, #24]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80055d8:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	699b      	ldr	r3, [r3, #24]
 80055e0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	689a      	ldr	r2, [r3, #8]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	430a      	orrs	r2, r1
 80055ee:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	699a      	ldr	r2, [r3, #24]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80055fe:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	691a      	ldr	r2, [r3, #16]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f022 0210 	bic.w	r2, r2, #16
 800560e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	2b01      	cmp	r3, #1
 8005616:	d108      	bne.n	800562a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	699a      	ldr	r2, [r3, #24]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f042 0204 	orr.w	r2, r2, #4
 8005626:	619a      	str	r2, [r3, #24]
 8005628:	e030      	b.n	800568c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d02c      	beq.n	800568c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	2b02      	cmp	r3, #2
 8005638:	d020      	beq.n	800567c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	699a      	ldr	r2, [r3, #24]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005648:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	691a      	ldr	r2, [r3, #16]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f042 0210 	orr.w	r2, r2, #16
 8005658:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	2b03      	cmp	r3, #3
 8005660:	d114      	bne.n	800568c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	699a      	ldr	r2, [r3, #24]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f042 0220 	orr.w	r2, r2, #32
 8005670:	619a      	str	r2, [r3, #24]
 8005672:	e00b      	b.n	800568c <HAL_FDCAN_Init+0x234>
 8005674:	0800e440 	.word	0x0800e440
 8005678:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	699a      	ldr	r2, [r3, #24]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f042 0220 	orr.w	r2, r2, #32
 800568a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	699b      	ldr	r3, [r3, #24]
 8005690:	3b01      	subs	r3, #1
 8005692:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	69db      	ldr	r3, [r3, #28]
 8005698:	3b01      	subs	r3, #1
 800569a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800569c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a1b      	ldr	r3, [r3, #32]
 80056a2:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80056a4:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	695b      	ldr	r3, [r3, #20]
 80056ac:	3b01      	subs	r3, #1
 80056ae:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80056b4:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80056b6:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056c0:	d115      	bne.n	80056ee <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c6:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056cc:	3b01      	subs	r3, #1
 80056ce:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80056d0:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d6:	3b01      	subs	r3, #1
 80056d8:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80056da:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e2:	3b01      	subs	r3, #1
 80056e4:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80056ea:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80056ec:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d00a      	beq.n	800570c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	430a      	orrs	r2, r1
 8005708:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005714:	4413      	add	r3, r2
 8005716:	2b00      	cmp	r3, #0
 8005718:	d011      	beq.n	800573e <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8005722:	f023 0107 	bic.w	r1, r3, #7
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	3360      	adds	r3, #96	; 0x60
 800572e:	443b      	add	r3, r7
 8005730:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	430a      	orrs	r2, r1
 800573a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005742:	2b00      	cmp	r3, #0
 8005744:	d011      	beq.n	800576a <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800574e:	f023 0107 	bic.w	r1, r3, #7
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	3360      	adds	r3, #96	; 0x60
 800575a:	443b      	add	r3, r7
 800575c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	430a      	orrs	r2, r1
 8005766:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800576e:	2b00      	cmp	r3, #0
 8005770:	d012      	beq.n	8005798 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800577a:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	3360      	adds	r3, #96	; 0x60
 8005786:	443b      	add	r3, r7
 8005788:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800578c:	011a      	lsls	r2, r3, #4
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	430a      	orrs	r2, r1
 8005794:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800579c:	2b00      	cmp	r3, #0
 800579e:	d012      	beq.n	80057c6 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80057a8:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	3360      	adds	r3, #96	; 0x60
 80057b4:	443b      	add	r3, r7
 80057b6:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80057ba:	021a      	lsls	r2, r3, #8
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	430a      	orrs	r2, r1
 80057c2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a11      	ldr	r2, [pc, #68]	; (8005810 <HAL_FDCAN_Init+0x3b8>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d107      	bne.n	80057e0 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	689a      	ldr	r2, [r3, #8]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	f022 0203 	bic.w	r2, r2, #3
 80057de:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f000 f80b 	bl	8005814 <FDCAN_CalcultateRamBlockAddresses>
 80057fe:	4603      	mov	r3, r0
 8005800:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8005804:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8005808:	4618      	mov	r0, r3
 800580a:	3760      	adds	r7, #96	; 0x60
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}
 8005810:	4000a000 	.word	0x4000a000

08005814 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005814:	b480      	push	{r7}
 8005816:	b085      	sub	sp, #20
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005820:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800582a:	4ba7      	ldr	r3, [pc, #668]	; (8005ac8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800582c:	4013      	ands	r3, r2
 800582e:	68ba      	ldr	r2, [r7, #8]
 8005830:	0091      	lsls	r1, r2, #2
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	6812      	ldr	r2, [r2, #0]
 8005836:	430b      	orrs	r3, r1
 8005838:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005844:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800584c:	041a      	lsls	r2, r3, #16
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	430a      	orrs	r2, r1
 8005854:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800585c:	68ba      	ldr	r2, [r7, #8]
 800585e:	4413      	add	r3, r2
 8005860:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800586a:	4b97      	ldr	r3, [pc, #604]	; (8005ac8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800586c:	4013      	ands	r3, r2
 800586e:	68ba      	ldr	r2, [r7, #8]
 8005870:	0091      	lsls	r1, r2, #2
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	6812      	ldr	r2, [r2, #0]
 8005876:	430b      	orrs	r3, r1
 8005878:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005884:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800588c:	041a      	lsls	r2, r3, #16
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	430a      	orrs	r2, r1
 8005894:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800589c:	005b      	lsls	r3, r3, #1
 800589e:	68ba      	ldr	r2, [r7, #8]
 80058a0:	4413      	add	r3, r2
 80058a2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80058ac:	4b86      	ldr	r3, [pc, #536]	; (8005ac8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80058ae:	4013      	ands	r3, r2
 80058b0:	68ba      	ldr	r2, [r7, #8]
 80058b2:	0091      	lsls	r1, r2, #2
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	6812      	ldr	r2, [r2, #0]
 80058b8:	430b      	orrs	r3, r1
 80058ba:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80058c6:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ce:	041a      	lsls	r2, r3, #16
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	430a      	orrs	r2, r1
 80058d6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80058e2:	fb02 f303 	mul.w	r3, r2, r3
 80058e6:	68ba      	ldr	r2, [r7, #8]
 80058e8:	4413      	add	r3, r2
 80058ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80058f4:	4b74      	ldr	r3, [pc, #464]	; (8005ac8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80058f6:	4013      	ands	r3, r2
 80058f8:	68ba      	ldr	r2, [r7, #8]
 80058fa:	0091      	lsls	r1, r2, #2
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	6812      	ldr	r2, [r2, #0]
 8005900:	430b      	orrs	r3, r1
 8005902:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800590e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005916:	041a      	lsls	r2, r3, #16
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	430a      	orrs	r2, r1
 800591e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800592a:	fb02 f303 	mul.w	r3, r2, r3
 800592e:	68ba      	ldr	r2, [r7, #8]
 8005930:	4413      	add	r3, r2
 8005932:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800593c:	4b62      	ldr	r3, [pc, #392]	; (8005ac8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800593e:	4013      	ands	r3, r2
 8005940:	68ba      	ldr	r2, [r7, #8]
 8005942:	0091      	lsls	r1, r2, #2
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	6812      	ldr	r2, [r2, #0]
 8005948:	430b      	orrs	r3, r1
 800594a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005956:	fb02 f303 	mul.w	r3, r2, r3
 800595a:	68ba      	ldr	r2, [r7, #8]
 800595c:	4413      	add	r3, r2
 800595e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8005968:	4b57      	ldr	r3, [pc, #348]	; (8005ac8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800596a:	4013      	ands	r3, r2
 800596c:	68ba      	ldr	r2, [r7, #8]
 800596e:	0091      	lsls	r1, r2, #2
 8005970:	687a      	ldr	r2, [r7, #4]
 8005972:	6812      	ldr	r2, [r2, #0]
 8005974:	430b      	orrs	r3, r1
 8005976:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005982:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800598a:	041a      	lsls	r2, r3, #16
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	430a      	orrs	r2, r1
 8005992:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800599a:	005b      	lsls	r3, r3, #1
 800599c:	68ba      	ldr	r2, [r7, #8]
 800599e:	4413      	add	r3, r2
 80059a0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80059aa:	4b47      	ldr	r3, [pc, #284]	; (8005ac8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80059ac:	4013      	ands	r3, r2
 80059ae:	68ba      	ldr	r2, [r7, #8]
 80059b0:	0091      	lsls	r1, r2, #2
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	6812      	ldr	r2, [r2, #0]
 80059b6:	430b      	orrs	r3, r1
 80059b8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80059c4:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059cc:	041a      	lsls	r2, r3, #16
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	430a      	orrs	r2, r1
 80059d4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80059e0:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059e8:	061a      	lsls	r2, r3, #24
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	430a      	orrs	r2, r1
 80059f0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059f8:	4b34      	ldr	r3, [pc, #208]	; (8005acc <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80059fa:	4413      	add	r3, r2
 80059fc:	009a      	lsls	r2, r3, #2
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	441a      	add	r2, r3
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a1a:	00db      	lsls	r3, r3, #3
 8005a1c:	441a      	add	r2, r3
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2a:	6879      	ldr	r1, [r7, #4]
 8005a2c:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8005a2e:	fb01 f303 	mul.w	r3, r1, r3
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	441a      	add	r2, r3
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a42:	6879      	ldr	r1, [r7, #4]
 8005a44:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8005a46:	fb01 f303 	mul.w	r3, r1, r3
 8005a4a:	009b      	lsls	r3, r3, #2
 8005a4c:	441a      	add	r2, r3
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a5a:	6879      	ldr	r1, [r7, #4]
 8005a5c:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8005a5e:	fb01 f303 	mul.w	r3, r1, r3
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	441a      	add	r2, r3
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a76:	00db      	lsls	r3, r3, #3
 8005a78:	441a      	add	r2, r3
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a8a:	6879      	ldr	r1, [r7, #4]
 8005a8c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8005a8e:	fb01 f303 	mul.w	r3, r1, r3
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	441a      	add	r2, r3
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005aa6:	6879      	ldr	r1, [r7, #4]
 8005aa8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8005aaa:	fb01 f303 	mul.w	r3, r1, r3
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	441a      	add	r2, r3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005abe:	4a04      	ldr	r2, [pc, #16]	; (8005ad0 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d915      	bls.n	8005af0 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8005ac4:	e006      	b.n	8005ad4 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8005ac6:	bf00      	nop
 8005ac8:	ffff0003 	.word	0xffff0003
 8005acc:	10002b00 	.word	0x10002b00
 8005ad0:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ada:	f043 0220 	orr.w	r2, r3, #32
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2203      	movs	r2, #3
 8005ae8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	e010      	b.n	8005b12 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005af4:	60fb      	str	r3, [r7, #12]
 8005af6:	e005      	b.n	8005b04 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2200      	movs	r2, #0
 8005afc:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	3304      	adds	r3, #4
 8005b02:	60fb      	str	r3, [r7, #12]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b0a:	68fa      	ldr	r2, [r7, #12]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d3f3      	bcc.n	8005af8 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3714      	adds	r7, #20
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr
 8005b1e:	bf00      	nop

08005b20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b089      	sub	sp, #36	; 0x24
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005b2e:	4b89      	ldr	r3, [pc, #548]	; (8005d54 <HAL_GPIO_Init+0x234>)
 8005b30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005b32:	e194      	b.n	8005e5e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	2101      	movs	r1, #1
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b40:	4013      	ands	r3, r2
 8005b42:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	f000 8186 	beq.w	8005e58 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	f003 0303 	and.w	r3, r3, #3
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d005      	beq.n	8005b64 <HAL_GPIO_Init+0x44>
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	f003 0303 	and.w	r3, r3, #3
 8005b60:	2b02      	cmp	r3, #2
 8005b62:	d130      	bne.n	8005bc6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	005b      	lsls	r3, r3, #1
 8005b6e:	2203      	movs	r2, #3
 8005b70:	fa02 f303 	lsl.w	r3, r2, r3
 8005b74:	43db      	mvns	r3, r3
 8005b76:	69ba      	ldr	r2, [r7, #24]
 8005b78:	4013      	ands	r3, r2
 8005b7a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	68da      	ldr	r2, [r3, #12]
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	005b      	lsls	r3, r3, #1
 8005b84:	fa02 f303 	lsl.w	r3, r2, r3
 8005b88:	69ba      	ldr	r2, [r7, #24]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	69ba      	ldr	r2, [r7, #24]
 8005b92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba2:	43db      	mvns	r3, r3
 8005ba4:	69ba      	ldr	r2, [r7, #24]
 8005ba6:	4013      	ands	r3, r2
 8005ba8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	091b      	lsrs	r3, r3, #4
 8005bb0:	f003 0201 	and.w	r2, r3, #1
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bba:	69ba      	ldr	r2, [r7, #24]
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	69ba      	ldr	r2, [r7, #24]
 8005bc4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	f003 0303 	and.w	r3, r3, #3
 8005bce:	2b03      	cmp	r3, #3
 8005bd0:	d017      	beq.n	8005c02 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	005b      	lsls	r3, r3, #1
 8005bdc:	2203      	movs	r2, #3
 8005bde:	fa02 f303 	lsl.w	r3, r2, r3
 8005be2:	43db      	mvns	r3, r3
 8005be4:	69ba      	ldr	r2, [r7, #24]
 8005be6:	4013      	ands	r3, r2
 8005be8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	689a      	ldr	r2, [r3, #8]
 8005bee:	69fb      	ldr	r3, [r7, #28]
 8005bf0:	005b      	lsls	r3, r3, #1
 8005bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf6:	69ba      	ldr	r2, [r7, #24]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	69ba      	ldr	r2, [r7, #24]
 8005c00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	f003 0303 	and.w	r3, r3, #3
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	d123      	bne.n	8005c56 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005c0e:	69fb      	ldr	r3, [r7, #28]
 8005c10:	08da      	lsrs	r2, r3, #3
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	3208      	adds	r2, #8
 8005c16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005c1c:	69fb      	ldr	r3, [r7, #28]
 8005c1e:	f003 0307 	and.w	r3, r3, #7
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	220f      	movs	r2, #15
 8005c26:	fa02 f303 	lsl.w	r3, r2, r3
 8005c2a:	43db      	mvns	r3, r3
 8005c2c:	69ba      	ldr	r2, [r7, #24]
 8005c2e:	4013      	ands	r3, r2
 8005c30:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	691a      	ldr	r2, [r3, #16]
 8005c36:	69fb      	ldr	r3, [r7, #28]
 8005c38:	f003 0307 	and.w	r3, r3, #7
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c42:	69ba      	ldr	r2, [r7, #24]
 8005c44:	4313      	orrs	r3, r2
 8005c46:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	08da      	lsrs	r2, r3, #3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	3208      	adds	r2, #8
 8005c50:	69b9      	ldr	r1, [r7, #24]
 8005c52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	005b      	lsls	r3, r3, #1
 8005c60:	2203      	movs	r2, #3
 8005c62:	fa02 f303 	lsl.w	r3, r2, r3
 8005c66:	43db      	mvns	r3, r3
 8005c68:	69ba      	ldr	r2, [r7, #24]
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	f003 0203 	and.w	r2, r3, #3
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	005b      	lsls	r3, r3, #1
 8005c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c7e:	69ba      	ldr	r2, [r7, #24]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	69ba      	ldr	r2, [r7, #24]
 8005c88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	f000 80e0 	beq.w	8005e58 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c98:	4b2f      	ldr	r3, [pc, #188]	; (8005d58 <HAL_GPIO_Init+0x238>)
 8005c9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005c9e:	4a2e      	ldr	r2, [pc, #184]	; (8005d58 <HAL_GPIO_Init+0x238>)
 8005ca0:	f043 0302 	orr.w	r3, r3, #2
 8005ca4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005ca8:	4b2b      	ldr	r3, [pc, #172]	; (8005d58 <HAL_GPIO_Init+0x238>)
 8005caa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005cae:	f003 0302 	and.w	r3, r3, #2
 8005cb2:	60fb      	str	r3, [r7, #12]
 8005cb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005cb6:	4a29      	ldr	r2, [pc, #164]	; (8005d5c <HAL_GPIO_Init+0x23c>)
 8005cb8:	69fb      	ldr	r3, [r7, #28]
 8005cba:	089b      	lsrs	r3, r3, #2
 8005cbc:	3302      	adds	r3, #2
 8005cbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	f003 0303 	and.w	r3, r3, #3
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	220f      	movs	r2, #15
 8005cce:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd2:	43db      	mvns	r3, r3
 8005cd4:	69ba      	ldr	r2, [r7, #24]
 8005cd6:	4013      	ands	r3, r2
 8005cd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a20      	ldr	r2, [pc, #128]	; (8005d60 <HAL_GPIO_Init+0x240>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d052      	beq.n	8005d88 <HAL_GPIO_Init+0x268>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4a1f      	ldr	r2, [pc, #124]	; (8005d64 <HAL_GPIO_Init+0x244>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d031      	beq.n	8005d4e <HAL_GPIO_Init+0x22e>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a1e      	ldr	r2, [pc, #120]	; (8005d68 <HAL_GPIO_Init+0x248>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d02b      	beq.n	8005d4a <HAL_GPIO_Init+0x22a>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4a1d      	ldr	r2, [pc, #116]	; (8005d6c <HAL_GPIO_Init+0x24c>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d025      	beq.n	8005d46 <HAL_GPIO_Init+0x226>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a1c      	ldr	r2, [pc, #112]	; (8005d70 <HAL_GPIO_Init+0x250>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d01f      	beq.n	8005d42 <HAL_GPIO_Init+0x222>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	4a1b      	ldr	r2, [pc, #108]	; (8005d74 <HAL_GPIO_Init+0x254>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d019      	beq.n	8005d3e <HAL_GPIO_Init+0x21e>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4a1a      	ldr	r2, [pc, #104]	; (8005d78 <HAL_GPIO_Init+0x258>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d013      	beq.n	8005d3a <HAL_GPIO_Init+0x21a>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4a19      	ldr	r2, [pc, #100]	; (8005d7c <HAL_GPIO_Init+0x25c>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d00d      	beq.n	8005d36 <HAL_GPIO_Init+0x216>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4a18      	ldr	r2, [pc, #96]	; (8005d80 <HAL_GPIO_Init+0x260>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d007      	beq.n	8005d32 <HAL_GPIO_Init+0x212>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a17      	ldr	r2, [pc, #92]	; (8005d84 <HAL_GPIO_Init+0x264>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d101      	bne.n	8005d2e <HAL_GPIO_Init+0x20e>
 8005d2a:	2309      	movs	r3, #9
 8005d2c:	e02d      	b.n	8005d8a <HAL_GPIO_Init+0x26a>
 8005d2e:	230a      	movs	r3, #10
 8005d30:	e02b      	b.n	8005d8a <HAL_GPIO_Init+0x26a>
 8005d32:	2308      	movs	r3, #8
 8005d34:	e029      	b.n	8005d8a <HAL_GPIO_Init+0x26a>
 8005d36:	2307      	movs	r3, #7
 8005d38:	e027      	b.n	8005d8a <HAL_GPIO_Init+0x26a>
 8005d3a:	2306      	movs	r3, #6
 8005d3c:	e025      	b.n	8005d8a <HAL_GPIO_Init+0x26a>
 8005d3e:	2305      	movs	r3, #5
 8005d40:	e023      	b.n	8005d8a <HAL_GPIO_Init+0x26a>
 8005d42:	2304      	movs	r3, #4
 8005d44:	e021      	b.n	8005d8a <HAL_GPIO_Init+0x26a>
 8005d46:	2303      	movs	r3, #3
 8005d48:	e01f      	b.n	8005d8a <HAL_GPIO_Init+0x26a>
 8005d4a:	2302      	movs	r3, #2
 8005d4c:	e01d      	b.n	8005d8a <HAL_GPIO_Init+0x26a>
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e01b      	b.n	8005d8a <HAL_GPIO_Init+0x26a>
 8005d52:	bf00      	nop
 8005d54:	58000080 	.word	0x58000080
 8005d58:	58024400 	.word	0x58024400
 8005d5c:	58000400 	.word	0x58000400
 8005d60:	58020000 	.word	0x58020000
 8005d64:	58020400 	.word	0x58020400
 8005d68:	58020800 	.word	0x58020800
 8005d6c:	58020c00 	.word	0x58020c00
 8005d70:	58021000 	.word	0x58021000
 8005d74:	58021400 	.word	0x58021400
 8005d78:	58021800 	.word	0x58021800
 8005d7c:	58021c00 	.word	0x58021c00
 8005d80:	58022000 	.word	0x58022000
 8005d84:	58022400 	.word	0x58022400
 8005d88:	2300      	movs	r3, #0
 8005d8a:	69fa      	ldr	r2, [r7, #28]
 8005d8c:	f002 0203 	and.w	r2, r2, #3
 8005d90:	0092      	lsls	r2, r2, #2
 8005d92:	4093      	lsls	r3, r2
 8005d94:	69ba      	ldr	r2, [r7, #24]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005d9a:	4938      	ldr	r1, [pc, #224]	; (8005e7c <HAL_GPIO_Init+0x35c>)
 8005d9c:	69fb      	ldr	r3, [r7, #28]
 8005d9e:	089b      	lsrs	r3, r3, #2
 8005da0:	3302      	adds	r3, #2
 8005da2:	69ba      	ldr	r2, [r7, #24]
 8005da4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005da8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	43db      	mvns	r3, r3
 8005db4:	69ba      	ldr	r2, [r7, #24]
 8005db6:	4013      	ands	r3, r2
 8005db8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d003      	beq.n	8005dce <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005dc6:	69ba      	ldr	r2, [r7, #24]
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005dce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005dd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	43db      	mvns	r3, r3
 8005de2:	69ba      	ldr	r2, [r7, #24]
 8005de4:	4013      	ands	r3, r2
 8005de6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d003      	beq.n	8005dfc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005df4:	69ba      	ldr	r2, [r7, #24]
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005dfc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e00:	69bb      	ldr	r3, [r7, #24]
 8005e02:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	43db      	mvns	r3, r3
 8005e0e:	69ba      	ldr	r2, [r7, #24]
 8005e10:	4013      	ands	r3, r2
 8005e12:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d003      	beq.n	8005e28 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005e20:	69ba      	ldr	r2, [r7, #24]
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	69ba      	ldr	r2, [r7, #24]
 8005e2c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	43db      	mvns	r3, r3
 8005e38:	69ba      	ldr	r2, [r7, #24]
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d003      	beq.n	8005e52 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005e4a:	69ba      	ldr	r2, [r7, #24]
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	69ba      	ldr	r2, [r7, #24]
 8005e56:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	3301      	adds	r3, #1
 8005e5c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	69fb      	ldr	r3, [r7, #28]
 8005e64:	fa22 f303 	lsr.w	r3, r2, r3
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	f47f ae63 	bne.w	8005b34 <HAL_GPIO_Init+0x14>
  }
}
 8005e6e:	bf00      	nop
 8005e70:	bf00      	nop
 8005e72:	3724      	adds	r7, #36	; 0x24
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr
 8005e7c:	58000400 	.word	0x58000400

08005e80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b083      	sub	sp, #12
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	460b      	mov	r3, r1
 8005e8a:	807b      	strh	r3, [r7, #2]
 8005e8c:	4613      	mov	r3, r2
 8005e8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005e90:	787b      	ldrb	r3, [r7, #1]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d003      	beq.n	8005e9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005e96:	887a      	ldrh	r2, [r7, #2]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005e9c:	e003      	b.n	8005ea6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005e9e:	887b      	ldrh	r3, [r7, #2]
 8005ea0:	041a      	lsls	r2, r3, #16
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	619a      	str	r2, [r3, #24]
}
 8005ea6:	bf00      	nop
 8005ea8:	370c      	adds	r7, #12
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr
	...

08005eb4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d101      	bne.n	8005ec6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e0bf      	b.n	8006046 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d106      	bne.n	8005ee0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f7fc f960 	bl	80021a0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2202      	movs	r2, #2
 8005ee4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	699a      	ldr	r2, [r3, #24]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005ef6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	6999      	ldr	r1, [r3, #24]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	685a      	ldr	r2, [r3, #4]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005f0c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	691b      	ldr	r3, [r3, #16]
 8005f12:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	430a      	orrs	r2, r1
 8005f1a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	6899      	ldr	r1, [r3, #8]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	4b4a      	ldr	r3, [pc, #296]	; (8006050 <HAL_LTDC_Init+0x19c>)
 8005f28:	400b      	ands	r3, r1
 8005f2a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	695b      	ldr	r3, [r3, #20]
 8005f30:	041b      	lsls	r3, r3, #16
 8005f32:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	6899      	ldr	r1, [r3, #8]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	699a      	ldr	r2, [r3, #24]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	431a      	orrs	r2, r3
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	430a      	orrs	r2, r1
 8005f48:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	68d9      	ldr	r1, [r3, #12]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	4b3e      	ldr	r3, [pc, #248]	; (8006050 <HAL_LTDC_Init+0x19c>)
 8005f56:	400b      	ands	r3, r1
 8005f58:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	69db      	ldr	r3, [r3, #28]
 8005f5e:	041b      	lsls	r3, r3, #16
 8005f60:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	68d9      	ldr	r1, [r3, #12]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6a1a      	ldr	r2, [r3, #32]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	431a      	orrs	r2, r3
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	430a      	orrs	r2, r1
 8005f76:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	6919      	ldr	r1, [r3, #16]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	4b33      	ldr	r3, [pc, #204]	; (8006050 <HAL_LTDC_Init+0x19c>)
 8005f84:	400b      	ands	r3, r1
 8005f86:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8c:	041b      	lsls	r3, r3, #16
 8005f8e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	6919      	ldr	r1, [r3, #16]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	431a      	orrs	r2, r3
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	430a      	orrs	r2, r1
 8005fa4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	6959      	ldr	r1, [r3, #20]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	4b27      	ldr	r3, [pc, #156]	; (8006050 <HAL_LTDC_Init+0x19c>)
 8005fb2:	400b      	ands	r3, r1
 8005fb4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fba:	041b      	lsls	r3, r3, #16
 8005fbc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	6959      	ldr	r1, [r3, #20]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	431a      	orrs	r2, r3
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	430a      	orrs	r2, r1
 8005fd2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005fda:	021b      	lsls	r3, r3, #8
 8005fdc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005fe4:	041b      	lsls	r3, r3, #16
 8005fe6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005ff6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005ffe:	68ba      	ldr	r2, [r7, #8]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	4313      	orrs	r3, r2
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800600a:	431a      	orrs	r2, r3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	430a      	orrs	r2, r1
 8006012:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f042 0206 	orr.w	r2, r2, #6
 8006022:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	699a      	ldr	r2, [r3, #24]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f042 0201 	orr.w	r2, r2, #1
 8006032:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2201      	movs	r2, #1
 8006040:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006044:	2300      	movs	r3, #0
}
 8006046:	4618      	mov	r0, r3
 8006048:	3710      	adds	r7, #16
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
 800604e:	bf00      	nop
 8006050:	f000f800 	.word	0xf000f800

08006054 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006054:	b5b0      	push	{r4, r5, r7, lr}
 8006056:	b084      	sub	sp, #16
 8006058:	af00      	add	r7, sp, #0
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	60b9      	str	r1, [r7, #8]
 800605e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006066:	2b01      	cmp	r3, #1
 8006068:	d101      	bne.n	800606e <HAL_LTDC_ConfigLayer+0x1a>
 800606a:	2302      	movs	r3, #2
 800606c:	e02c      	b.n	80060c8 <HAL_LTDC_ConfigLayer+0x74>
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2201      	movs	r2, #1
 8006072:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2202      	movs	r2, #2
 800607a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800607e:	68fa      	ldr	r2, [r7, #12]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2134      	movs	r1, #52	; 0x34
 8006084:	fb01 f303 	mul.w	r3, r1, r3
 8006088:	4413      	add	r3, r2
 800608a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	4614      	mov	r4, r2
 8006092:	461d      	mov	r5, r3
 8006094:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006096:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006098:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800609a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800609c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800609e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060a0:	682b      	ldr	r3, [r5, #0]
 80060a2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	68b9      	ldr	r1, [r7, #8]
 80060a8:	68f8      	ldr	r0, [r7, #12]
 80060aa:	f000 f811 	bl	80060d0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	2201      	movs	r2, #1
 80060b4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2201      	movs	r2, #1
 80060ba:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2200      	movs	r2, #0
 80060c2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80060c6:	2300      	movs	r3, #0
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3710      	adds	r7, #16
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bdb0      	pop	{r4, r5, r7, pc}

080060d0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b089      	sub	sp, #36	; 0x24
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	60f8      	str	r0, [r7, #12]
 80060d8:	60b9      	str	r1, [r7, #8]
 80060da:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	685a      	ldr	r2, [r3, #4]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	0c1b      	lsrs	r3, r3, #16
 80060e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060ec:	4413      	add	r3, r2
 80060ee:	041b      	lsls	r3, r3, #16
 80060f0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	461a      	mov	r2, r3
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	01db      	lsls	r3, r3, #7
 80060fc:	4413      	add	r3, r2
 80060fe:	3384      	adds	r3, #132	; 0x84
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	68fa      	ldr	r2, [r7, #12]
 8006104:	6812      	ldr	r2, [r2, #0]
 8006106:	4611      	mov	r1, r2
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	01d2      	lsls	r2, r2, #7
 800610c:	440a      	add	r2, r1
 800610e:	3284      	adds	r2, #132	; 0x84
 8006110:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006114:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	0c1b      	lsrs	r3, r3, #16
 8006122:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006126:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006128:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4619      	mov	r1, r3
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	01db      	lsls	r3, r3, #7
 8006134:	440b      	add	r3, r1
 8006136:	3384      	adds	r3, #132	; 0x84
 8006138:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800613e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	68da      	ldr	r2, [r3, #12]
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	68db      	ldr	r3, [r3, #12]
 800614a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800614e:	4413      	add	r3, r2
 8006150:	041b      	lsls	r3, r3, #16
 8006152:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	461a      	mov	r2, r3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	01db      	lsls	r3, r3, #7
 800615e:	4413      	add	r3, r2
 8006160:	3384      	adds	r3, #132	; 0x84
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	68fa      	ldr	r2, [r7, #12]
 8006166:	6812      	ldr	r2, [r2, #0]
 8006168:	4611      	mov	r1, r2
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	01d2      	lsls	r2, r2, #7
 800616e:	440a      	add	r2, r1
 8006170:	3284      	adds	r2, #132	; 0x84
 8006172:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006176:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	689a      	ldr	r2, [r3, #8]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	68db      	ldr	r3, [r3, #12]
 8006182:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006186:	4413      	add	r3, r2
 8006188:	1c5a      	adds	r2, r3, #1
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4619      	mov	r1, r3
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	01db      	lsls	r3, r3, #7
 8006194:	440b      	add	r3, r1
 8006196:	3384      	adds	r3, #132	; 0x84
 8006198:	4619      	mov	r1, r3
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	4313      	orrs	r3, r2
 800619e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	461a      	mov	r2, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	01db      	lsls	r3, r3, #7
 80061aa:	4413      	add	r3, r2
 80061ac:	3384      	adds	r3, #132	; 0x84
 80061ae:	691b      	ldr	r3, [r3, #16]
 80061b0:	68fa      	ldr	r2, [r7, #12]
 80061b2:	6812      	ldr	r2, [r2, #0]
 80061b4:	4611      	mov	r1, r2
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	01d2      	lsls	r2, r2, #7
 80061ba:	440a      	add	r2, r1
 80061bc:	3284      	adds	r2, #132	; 0x84
 80061be:	f023 0307 	bic.w	r3, r3, #7
 80061c2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	461a      	mov	r2, r3
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	01db      	lsls	r3, r3, #7
 80061ce:	4413      	add	r3, r2
 80061d0:	3384      	adds	r3, #132	; 0x84
 80061d2:	461a      	mov	r2, r3
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	691b      	ldr	r3, [r3, #16]
 80061d8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80061e0:	021b      	lsls	r3, r3, #8
 80061e2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80061ea:	041b      	lsls	r3, r3, #16
 80061ec:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	699b      	ldr	r3, [r3, #24]
 80061f2:	061b      	lsls	r3, r3, #24
 80061f4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	461a      	mov	r2, r3
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	01db      	lsls	r3, r3, #7
 8006200:	4413      	add	r3, r2
 8006202:	3384      	adds	r3, #132	; 0x84
 8006204:	699b      	ldr	r3, [r3, #24]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	461a      	mov	r2, r3
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	01db      	lsls	r3, r3, #7
 8006210:	4413      	add	r3, r2
 8006212:	3384      	adds	r3, #132	; 0x84
 8006214:	461a      	mov	r2, r3
 8006216:	2300      	movs	r3, #0
 8006218:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006220:	461a      	mov	r2, r3
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	431a      	orrs	r2, r3
 8006226:	69bb      	ldr	r3, [r7, #24]
 8006228:	431a      	orrs	r2, r3
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4619      	mov	r1, r3
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	01db      	lsls	r3, r3, #7
 8006234:	440b      	add	r3, r1
 8006236:	3384      	adds	r3, #132	; 0x84
 8006238:	4619      	mov	r1, r3
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	4313      	orrs	r3, r2
 800623e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	461a      	mov	r2, r3
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	01db      	lsls	r3, r3, #7
 800624a:	4413      	add	r3, r2
 800624c:	3384      	adds	r3, #132	; 0x84
 800624e:	695b      	ldr	r3, [r3, #20]
 8006250:	68fa      	ldr	r2, [r7, #12]
 8006252:	6812      	ldr	r2, [r2, #0]
 8006254:	4611      	mov	r1, r2
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	01d2      	lsls	r2, r2, #7
 800625a:	440a      	add	r2, r1
 800625c:	3284      	adds	r2, #132	; 0x84
 800625e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006262:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	461a      	mov	r2, r3
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	01db      	lsls	r3, r3, #7
 800626e:	4413      	add	r3, r2
 8006270:	3384      	adds	r3, #132	; 0x84
 8006272:	461a      	mov	r2, r3
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	695b      	ldr	r3, [r3, #20]
 8006278:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	461a      	mov	r2, r3
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	01db      	lsls	r3, r3, #7
 8006284:	4413      	add	r3, r2
 8006286:	3384      	adds	r3, #132	; 0x84
 8006288:	69da      	ldr	r2, [r3, #28]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4619      	mov	r1, r3
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	01db      	lsls	r3, r3, #7
 8006294:	440b      	add	r3, r1
 8006296:	3384      	adds	r3, #132	; 0x84
 8006298:	4619      	mov	r1, r3
 800629a:	4b58      	ldr	r3, [pc, #352]	; (80063fc <LTDC_SetConfig+0x32c>)
 800629c:	4013      	ands	r3, r2
 800629e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	69da      	ldr	r2, [r3, #28]
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	6a1b      	ldr	r3, [r3, #32]
 80062a8:	68f9      	ldr	r1, [r7, #12]
 80062aa:	6809      	ldr	r1, [r1, #0]
 80062ac:	4608      	mov	r0, r1
 80062ae:	6879      	ldr	r1, [r7, #4]
 80062b0:	01c9      	lsls	r1, r1, #7
 80062b2:	4401      	add	r1, r0
 80062b4:	3184      	adds	r1, #132	; 0x84
 80062b6:	4313      	orrs	r3, r2
 80062b8:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	461a      	mov	r2, r3
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	01db      	lsls	r3, r3, #7
 80062c4:	4413      	add	r3, r2
 80062c6:	3384      	adds	r3, #132	; 0x84
 80062c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	461a      	mov	r2, r3
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	01db      	lsls	r3, r3, #7
 80062d4:	4413      	add	r3, r2
 80062d6:	3384      	adds	r3, #132	; 0x84
 80062d8:	461a      	mov	r2, r3
 80062da:	2300      	movs	r3, #0
 80062dc:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	461a      	mov	r2, r3
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	01db      	lsls	r3, r3, #7
 80062e8:	4413      	add	r3, r2
 80062ea:	3384      	adds	r3, #132	; 0x84
 80062ec:	461a      	mov	r2, r3
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f2:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	691b      	ldr	r3, [r3, #16]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d102      	bne.n	8006302 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80062fc:	2304      	movs	r3, #4
 80062fe:	61fb      	str	r3, [r7, #28]
 8006300:	e01b      	b.n	800633a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	2b01      	cmp	r3, #1
 8006308:	d102      	bne.n	8006310 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800630a:	2303      	movs	r3, #3
 800630c:	61fb      	str	r3, [r7, #28]
 800630e:	e014      	b.n	800633a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	691b      	ldr	r3, [r3, #16]
 8006314:	2b04      	cmp	r3, #4
 8006316:	d00b      	beq.n	8006330 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800631c:	2b02      	cmp	r3, #2
 800631e:	d007      	beq.n	8006330 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006324:	2b03      	cmp	r3, #3
 8006326:	d003      	beq.n	8006330 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800632c:	2b07      	cmp	r3, #7
 800632e:	d102      	bne.n	8006336 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006330:	2302      	movs	r3, #2
 8006332:	61fb      	str	r3, [r7, #28]
 8006334:	e001      	b.n	800633a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8006336:	2301      	movs	r3, #1
 8006338:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	461a      	mov	r2, r3
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	01db      	lsls	r3, r3, #7
 8006344:	4413      	add	r3, r2
 8006346:	3384      	adds	r3, #132	; 0x84
 8006348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800634a:	68fa      	ldr	r2, [r7, #12]
 800634c:	6812      	ldr	r2, [r2, #0]
 800634e:	4611      	mov	r1, r2
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	01d2      	lsls	r2, r2, #7
 8006354:	440a      	add	r2, r1
 8006356:	3284      	adds	r2, #132	; 0x84
 8006358:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800635c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006362:	69fa      	ldr	r2, [r7, #28]
 8006364:	fb02 f303 	mul.w	r3, r2, r3
 8006368:	041a      	lsls	r2, r3, #16
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	6859      	ldr	r1, [r3, #4]
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	1acb      	subs	r3, r1, r3
 8006374:	69f9      	ldr	r1, [r7, #28]
 8006376:	fb01 f303 	mul.w	r3, r1, r3
 800637a:	3307      	adds	r3, #7
 800637c:	68f9      	ldr	r1, [r7, #12]
 800637e:	6809      	ldr	r1, [r1, #0]
 8006380:	4608      	mov	r0, r1
 8006382:	6879      	ldr	r1, [r7, #4]
 8006384:	01c9      	lsls	r1, r1, #7
 8006386:	4401      	add	r1, r0
 8006388:	3184      	adds	r1, #132	; 0x84
 800638a:	4313      	orrs	r3, r2
 800638c:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	461a      	mov	r2, r3
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	01db      	lsls	r3, r3, #7
 8006398:	4413      	add	r3, r2
 800639a:	3384      	adds	r3, #132	; 0x84
 800639c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4619      	mov	r1, r3
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	01db      	lsls	r3, r3, #7
 80063a8:	440b      	add	r3, r1
 80063aa:	3384      	adds	r3, #132	; 0x84
 80063ac:	4619      	mov	r1, r3
 80063ae:	4b14      	ldr	r3, [pc, #80]	; (8006400 <LTDC_SetConfig+0x330>)
 80063b0:	4013      	ands	r3, r2
 80063b2:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	461a      	mov	r2, r3
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	01db      	lsls	r3, r3, #7
 80063be:	4413      	add	r3, r2
 80063c0:	3384      	adds	r3, #132	; 0x84
 80063c2:	461a      	mov	r2, r3
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	461a      	mov	r2, r3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	01db      	lsls	r3, r3, #7
 80063d4:	4413      	add	r3, r2
 80063d6:	3384      	adds	r3, #132	; 0x84
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	6812      	ldr	r2, [r2, #0]
 80063de:	4611      	mov	r1, r2
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	01d2      	lsls	r2, r2, #7
 80063e4:	440a      	add	r2, r1
 80063e6:	3284      	adds	r2, #132	; 0x84
 80063e8:	f043 0301 	orr.w	r3, r3, #1
 80063ec:	6013      	str	r3, [r2, #0]
}
 80063ee:	bf00      	nop
 80063f0:	3724      	adds	r7, #36	; 0x24
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr
 80063fa:	bf00      	nop
 80063fc:	fffff8f8 	.word	0xfffff8f8
 8006400:	fffff800 	.word	0xfffff800

08006404 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006406:	b08f      	sub	sp, #60	; 0x3c
 8006408:	af0a      	add	r7, sp, #40	; 0x28
 800640a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d101      	bne.n	8006416 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e116      	b.n	8006644 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8006422:	b2db      	uxtb	r3, r3
 8006424:	2b00      	cmp	r3, #0
 8006426:	d106      	bne.n	8006436 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f7fc f933 	bl	800269c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2203      	movs	r2, #3
 800643a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006446:	2b00      	cmp	r3, #0
 8006448:	d102      	bne.n	8006450 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4618      	mov	r0, r3
 8006456:	f007 fca3 	bl	800dda0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	603b      	str	r3, [r7, #0]
 8006460:	687e      	ldr	r6, [r7, #4]
 8006462:	466d      	mov	r5, sp
 8006464:	f106 0410 	add.w	r4, r6, #16
 8006468:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800646a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800646c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800646e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006470:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006474:	e885 0003 	stmia.w	r5, {r0, r1}
 8006478:	1d33      	adds	r3, r6, #4
 800647a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800647c:	6838      	ldr	r0, [r7, #0]
 800647e:	f007 fc21 	bl	800dcc4 <USB_CoreInit>
 8006482:	4603      	mov	r3, r0
 8006484:	2b00      	cmp	r3, #0
 8006486:	d005      	beq.n	8006494 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2202      	movs	r2, #2
 800648c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	e0d7      	b.n	8006644 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	2100      	movs	r1, #0
 800649a:	4618      	mov	r0, r3
 800649c:	f007 fc91 	bl	800ddc2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80064a0:	2300      	movs	r3, #0
 80064a2:	73fb      	strb	r3, [r7, #15]
 80064a4:	e04a      	b.n	800653c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80064a6:	7bfa      	ldrb	r2, [r7, #15]
 80064a8:	6879      	ldr	r1, [r7, #4]
 80064aa:	4613      	mov	r3, r2
 80064ac:	00db      	lsls	r3, r3, #3
 80064ae:	4413      	add	r3, r2
 80064b0:	009b      	lsls	r3, r3, #2
 80064b2:	440b      	add	r3, r1
 80064b4:	333d      	adds	r3, #61	; 0x3d
 80064b6:	2201      	movs	r2, #1
 80064b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80064ba:	7bfa      	ldrb	r2, [r7, #15]
 80064bc:	6879      	ldr	r1, [r7, #4]
 80064be:	4613      	mov	r3, r2
 80064c0:	00db      	lsls	r3, r3, #3
 80064c2:	4413      	add	r3, r2
 80064c4:	009b      	lsls	r3, r3, #2
 80064c6:	440b      	add	r3, r1
 80064c8:	333c      	adds	r3, #60	; 0x3c
 80064ca:	7bfa      	ldrb	r2, [r7, #15]
 80064cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80064ce:	7bfa      	ldrb	r2, [r7, #15]
 80064d0:	7bfb      	ldrb	r3, [r7, #15]
 80064d2:	b298      	uxth	r0, r3
 80064d4:	6879      	ldr	r1, [r7, #4]
 80064d6:	4613      	mov	r3, r2
 80064d8:	00db      	lsls	r3, r3, #3
 80064da:	4413      	add	r3, r2
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	440b      	add	r3, r1
 80064e0:	3356      	adds	r3, #86	; 0x56
 80064e2:	4602      	mov	r2, r0
 80064e4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80064e6:	7bfa      	ldrb	r2, [r7, #15]
 80064e8:	6879      	ldr	r1, [r7, #4]
 80064ea:	4613      	mov	r3, r2
 80064ec:	00db      	lsls	r3, r3, #3
 80064ee:	4413      	add	r3, r2
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	440b      	add	r3, r1
 80064f4:	3340      	adds	r3, #64	; 0x40
 80064f6:	2200      	movs	r2, #0
 80064f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80064fa:	7bfa      	ldrb	r2, [r7, #15]
 80064fc:	6879      	ldr	r1, [r7, #4]
 80064fe:	4613      	mov	r3, r2
 8006500:	00db      	lsls	r3, r3, #3
 8006502:	4413      	add	r3, r2
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	440b      	add	r3, r1
 8006508:	3344      	adds	r3, #68	; 0x44
 800650a:	2200      	movs	r2, #0
 800650c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800650e:	7bfa      	ldrb	r2, [r7, #15]
 8006510:	6879      	ldr	r1, [r7, #4]
 8006512:	4613      	mov	r3, r2
 8006514:	00db      	lsls	r3, r3, #3
 8006516:	4413      	add	r3, r2
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	440b      	add	r3, r1
 800651c:	3348      	adds	r3, #72	; 0x48
 800651e:	2200      	movs	r2, #0
 8006520:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006522:	7bfa      	ldrb	r2, [r7, #15]
 8006524:	6879      	ldr	r1, [r7, #4]
 8006526:	4613      	mov	r3, r2
 8006528:	00db      	lsls	r3, r3, #3
 800652a:	4413      	add	r3, r2
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	440b      	add	r3, r1
 8006530:	334c      	adds	r3, #76	; 0x4c
 8006532:	2200      	movs	r2, #0
 8006534:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006536:	7bfb      	ldrb	r3, [r7, #15]
 8006538:	3301      	adds	r3, #1
 800653a:	73fb      	strb	r3, [r7, #15]
 800653c:	7bfa      	ldrb	r2, [r7, #15]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	429a      	cmp	r2, r3
 8006544:	d3af      	bcc.n	80064a6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006546:	2300      	movs	r3, #0
 8006548:	73fb      	strb	r3, [r7, #15]
 800654a:	e044      	b.n	80065d6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800654c:	7bfa      	ldrb	r2, [r7, #15]
 800654e:	6879      	ldr	r1, [r7, #4]
 8006550:	4613      	mov	r3, r2
 8006552:	00db      	lsls	r3, r3, #3
 8006554:	4413      	add	r3, r2
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	440b      	add	r3, r1
 800655a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800655e:	2200      	movs	r2, #0
 8006560:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006562:	7bfa      	ldrb	r2, [r7, #15]
 8006564:	6879      	ldr	r1, [r7, #4]
 8006566:	4613      	mov	r3, r2
 8006568:	00db      	lsls	r3, r3, #3
 800656a:	4413      	add	r3, r2
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	440b      	add	r3, r1
 8006570:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8006574:	7bfa      	ldrb	r2, [r7, #15]
 8006576:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006578:	7bfa      	ldrb	r2, [r7, #15]
 800657a:	6879      	ldr	r1, [r7, #4]
 800657c:	4613      	mov	r3, r2
 800657e:	00db      	lsls	r3, r3, #3
 8006580:	4413      	add	r3, r2
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	440b      	add	r3, r1
 8006586:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800658a:	2200      	movs	r2, #0
 800658c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800658e:	7bfa      	ldrb	r2, [r7, #15]
 8006590:	6879      	ldr	r1, [r7, #4]
 8006592:	4613      	mov	r3, r2
 8006594:	00db      	lsls	r3, r3, #3
 8006596:	4413      	add	r3, r2
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	440b      	add	r3, r1
 800659c:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80065a0:	2200      	movs	r2, #0
 80065a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80065a4:	7bfa      	ldrb	r2, [r7, #15]
 80065a6:	6879      	ldr	r1, [r7, #4]
 80065a8:	4613      	mov	r3, r2
 80065aa:	00db      	lsls	r3, r3, #3
 80065ac:	4413      	add	r3, r2
 80065ae:	009b      	lsls	r3, r3, #2
 80065b0:	440b      	add	r3, r1
 80065b2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80065b6:	2200      	movs	r2, #0
 80065b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80065ba:	7bfa      	ldrb	r2, [r7, #15]
 80065bc:	6879      	ldr	r1, [r7, #4]
 80065be:	4613      	mov	r3, r2
 80065c0:	00db      	lsls	r3, r3, #3
 80065c2:	4413      	add	r3, r2
 80065c4:	009b      	lsls	r3, r3, #2
 80065c6:	440b      	add	r3, r1
 80065c8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80065cc:	2200      	movs	r2, #0
 80065ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80065d0:	7bfb      	ldrb	r3, [r7, #15]
 80065d2:	3301      	adds	r3, #1
 80065d4:	73fb      	strb	r3, [r7, #15]
 80065d6:	7bfa      	ldrb	r2, [r7, #15]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	429a      	cmp	r2, r3
 80065de:	d3b5      	bcc.n	800654c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	603b      	str	r3, [r7, #0]
 80065e6:	687e      	ldr	r6, [r7, #4]
 80065e8:	466d      	mov	r5, sp
 80065ea:	f106 0410 	add.w	r4, r6, #16
 80065ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80065f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80065f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80065f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80065f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80065fa:	e885 0003 	stmia.w	r5, {r0, r1}
 80065fe:	1d33      	adds	r3, r6, #4
 8006600:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006602:	6838      	ldr	r0, [r7, #0]
 8006604:	f007 fc2a 	bl	800de5c <USB_DevInit>
 8006608:	4603      	mov	r3, r0
 800660a:	2b00      	cmp	r3, #0
 800660c:	d005      	beq.n	800661a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2202      	movs	r2, #2
 8006612:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	e014      	b.n	8006644 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2200      	movs	r2, #0
 800661e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2201      	movs	r2, #1
 8006626:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662e:	2b01      	cmp	r3, #1
 8006630:	d102      	bne.n	8006638 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 f80a 	bl	800664c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4618      	mov	r0, r3
 800663e:	f007 fde8 	bl	800e212 <USB_DevDisconnect>

  return HAL_OK;
 8006642:	2300      	movs	r3, #0
}
 8006644:	4618      	mov	r0, r3
 8006646:	3714      	adds	r7, #20
 8006648:	46bd      	mov	sp, r7
 800664a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800664c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800664c:	b480      	push	{r7}
 800664e:	b085      	sub	sp, #20
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2201      	movs	r2, #1
 800665e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	699b      	ldr	r3, [r3, #24]
 800666e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800667a:	4b05      	ldr	r3, [pc, #20]	; (8006690 <HAL_PCDEx_ActivateLPM+0x44>)
 800667c:	4313      	orrs	r3, r2
 800667e:	68fa      	ldr	r2, [r7, #12]
 8006680:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006682:	2300      	movs	r3, #0
}
 8006684:	4618      	mov	r0, r3
 8006686:	3714      	adds	r7, #20
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr
 8006690:	10000003 	.word	0x10000003

08006694 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800669c:	4b19      	ldr	r3, [pc, #100]	; (8006704 <HAL_PWREx_ConfigSupply+0x70>)
 800669e:	68db      	ldr	r3, [r3, #12]
 80066a0:	f003 0304 	and.w	r3, r3, #4
 80066a4:	2b04      	cmp	r3, #4
 80066a6:	d00a      	beq.n	80066be <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80066a8:	4b16      	ldr	r3, [pc, #88]	; (8006704 <HAL_PWREx_ConfigSupply+0x70>)
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	f003 0307 	and.w	r3, r3, #7
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d001      	beq.n	80066ba <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	e01f      	b.n	80066fa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80066ba:	2300      	movs	r3, #0
 80066bc:	e01d      	b.n	80066fa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80066be:	4b11      	ldr	r3, [pc, #68]	; (8006704 <HAL_PWREx_ConfigSupply+0x70>)
 80066c0:	68db      	ldr	r3, [r3, #12]
 80066c2:	f023 0207 	bic.w	r2, r3, #7
 80066c6:	490f      	ldr	r1, [pc, #60]	; (8006704 <HAL_PWREx_ConfigSupply+0x70>)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80066ce:	f7fc fb37 	bl	8002d40 <HAL_GetTick>
 80066d2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80066d4:	e009      	b.n	80066ea <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80066d6:	f7fc fb33 	bl	8002d40 <HAL_GetTick>
 80066da:	4602      	mov	r2, r0
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	1ad3      	subs	r3, r2, r3
 80066e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066e4:	d901      	bls.n	80066ea <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	e007      	b.n	80066fa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80066ea:	4b06      	ldr	r3, [pc, #24]	; (8006704 <HAL_PWREx_ConfigSupply+0x70>)
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80066f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066f6:	d1ee      	bne.n	80066d6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80066f8:	2300      	movs	r3, #0
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3710      	adds	r7, #16
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
 8006702:	bf00      	nop
 8006704:	58024800 	.word	0x58024800

08006708 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006708:	b480      	push	{r7}
 800670a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800670c:	4b05      	ldr	r3, [pc, #20]	; (8006724 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	4a04      	ldr	r2, [pc, #16]	; (8006724 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006712:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006716:	60d3      	str	r3, [r2, #12]
}
 8006718:	bf00      	nop
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr
 8006722:	bf00      	nop
 8006724:	58024800 	.word	0x58024800

08006728 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b08c      	sub	sp, #48	; 0x30
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d102      	bne.n	800673c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	f000 bc48 	b.w	8006fcc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f003 0301 	and.w	r3, r3, #1
 8006744:	2b00      	cmp	r3, #0
 8006746:	f000 8088 	beq.w	800685a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800674a:	4b99      	ldr	r3, [pc, #612]	; (80069b0 <HAL_RCC_OscConfig+0x288>)
 800674c:	691b      	ldr	r3, [r3, #16]
 800674e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006752:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006754:	4b96      	ldr	r3, [pc, #600]	; (80069b0 <HAL_RCC_OscConfig+0x288>)
 8006756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006758:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800675a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800675c:	2b10      	cmp	r3, #16
 800675e:	d007      	beq.n	8006770 <HAL_RCC_OscConfig+0x48>
 8006760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006762:	2b18      	cmp	r3, #24
 8006764:	d111      	bne.n	800678a <HAL_RCC_OscConfig+0x62>
 8006766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006768:	f003 0303 	and.w	r3, r3, #3
 800676c:	2b02      	cmp	r3, #2
 800676e:	d10c      	bne.n	800678a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006770:	4b8f      	ldr	r3, [pc, #572]	; (80069b0 <HAL_RCC_OscConfig+0x288>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006778:	2b00      	cmp	r3, #0
 800677a:	d06d      	beq.n	8006858 <HAL_RCC_OscConfig+0x130>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d169      	bne.n	8006858 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	f000 bc21 	b.w	8006fcc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006792:	d106      	bne.n	80067a2 <HAL_RCC_OscConfig+0x7a>
 8006794:	4b86      	ldr	r3, [pc, #536]	; (80069b0 <HAL_RCC_OscConfig+0x288>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a85      	ldr	r2, [pc, #532]	; (80069b0 <HAL_RCC_OscConfig+0x288>)
 800679a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800679e:	6013      	str	r3, [r2, #0]
 80067a0:	e02e      	b.n	8006800 <HAL_RCC_OscConfig+0xd8>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d10c      	bne.n	80067c4 <HAL_RCC_OscConfig+0x9c>
 80067aa:	4b81      	ldr	r3, [pc, #516]	; (80069b0 <HAL_RCC_OscConfig+0x288>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a80      	ldr	r2, [pc, #512]	; (80069b0 <HAL_RCC_OscConfig+0x288>)
 80067b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067b4:	6013      	str	r3, [r2, #0]
 80067b6:	4b7e      	ldr	r3, [pc, #504]	; (80069b0 <HAL_RCC_OscConfig+0x288>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a7d      	ldr	r2, [pc, #500]	; (80069b0 <HAL_RCC_OscConfig+0x288>)
 80067bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80067c0:	6013      	str	r3, [r2, #0]
 80067c2:	e01d      	b.n	8006800 <HAL_RCC_OscConfig+0xd8>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80067cc:	d10c      	bne.n	80067e8 <HAL_RCC_OscConfig+0xc0>
 80067ce:	4b78      	ldr	r3, [pc, #480]	; (80069b0 <HAL_RCC_OscConfig+0x288>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a77      	ldr	r2, [pc, #476]	; (80069b0 <HAL_RCC_OscConfig+0x288>)
 80067d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80067d8:	6013      	str	r3, [r2, #0]
 80067da:	4b75      	ldr	r3, [pc, #468]	; (80069b0 <HAL_RCC_OscConfig+0x288>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a74      	ldr	r2, [pc, #464]	; (80069b0 <HAL_RCC_OscConfig+0x288>)
 80067e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067e4:	6013      	str	r3, [r2, #0]
 80067e6:	e00b      	b.n	8006800 <HAL_RCC_OscConfig+0xd8>
 80067e8:	4b71      	ldr	r3, [pc, #452]	; (80069b0 <HAL_RCC_OscConfig+0x288>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a70      	ldr	r2, [pc, #448]	; (80069b0 <HAL_RCC_OscConfig+0x288>)
 80067ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067f2:	6013      	str	r3, [r2, #0]
 80067f4:	4b6e      	ldr	r3, [pc, #440]	; (80069b0 <HAL_RCC_OscConfig+0x288>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a6d      	ldr	r2, [pc, #436]	; (80069b0 <HAL_RCC_OscConfig+0x288>)
 80067fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80067fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d013      	beq.n	8006830 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006808:	f7fc fa9a 	bl	8002d40 <HAL_GetTick>
 800680c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800680e:	e008      	b.n	8006822 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006810:	f7fc fa96 	bl	8002d40 <HAL_GetTick>
 8006814:	4602      	mov	r2, r0
 8006816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006818:	1ad3      	subs	r3, r2, r3
 800681a:	2b64      	cmp	r3, #100	; 0x64
 800681c:	d901      	bls.n	8006822 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800681e:	2303      	movs	r3, #3
 8006820:	e3d4      	b.n	8006fcc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006822:	4b63      	ldr	r3, [pc, #396]	; (80069b0 <HAL_RCC_OscConfig+0x288>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800682a:	2b00      	cmp	r3, #0
 800682c:	d0f0      	beq.n	8006810 <HAL_RCC_OscConfig+0xe8>
 800682e:	e014      	b.n	800685a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006830:	f7fc fa86 	bl	8002d40 <HAL_GetTick>
 8006834:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006836:	e008      	b.n	800684a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006838:	f7fc fa82 	bl	8002d40 <HAL_GetTick>
 800683c:	4602      	mov	r2, r0
 800683e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006840:	1ad3      	subs	r3, r2, r3
 8006842:	2b64      	cmp	r3, #100	; 0x64
 8006844:	d901      	bls.n	800684a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006846:	2303      	movs	r3, #3
 8006848:	e3c0      	b.n	8006fcc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800684a:	4b59      	ldr	r3, [pc, #356]	; (80069b0 <HAL_RCC_OscConfig+0x288>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006852:	2b00      	cmp	r3, #0
 8006854:	d1f0      	bne.n	8006838 <HAL_RCC_OscConfig+0x110>
 8006856:	e000      	b.n	800685a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006858:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f003 0302 	and.w	r3, r3, #2
 8006862:	2b00      	cmp	r3, #0
 8006864:	f000 80ca 	beq.w	80069fc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006868:	4b51      	ldr	r3, [pc, #324]	; (80069b0 <HAL_RCC_OscConfig+0x288>)
 800686a:	691b      	ldr	r3, [r3, #16]
 800686c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006870:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006872:	4b4f      	ldr	r3, [pc, #316]	; (80069b0 <HAL_RCC_OscConfig+0x288>)
 8006874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006876:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006878:	6a3b      	ldr	r3, [r7, #32]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d007      	beq.n	800688e <HAL_RCC_OscConfig+0x166>
 800687e:	6a3b      	ldr	r3, [r7, #32]
 8006880:	2b18      	cmp	r3, #24
 8006882:	d156      	bne.n	8006932 <HAL_RCC_OscConfig+0x20a>
 8006884:	69fb      	ldr	r3, [r7, #28]
 8006886:	f003 0303 	and.w	r3, r3, #3
 800688a:	2b00      	cmp	r3, #0
 800688c:	d151      	bne.n	8006932 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800688e:	4b48      	ldr	r3, [pc, #288]	; (80069b0 <HAL_RCC_OscConfig+0x288>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f003 0304 	and.w	r3, r3, #4
 8006896:	2b00      	cmp	r3, #0
 8006898:	d005      	beq.n	80068a6 <HAL_RCC_OscConfig+0x17e>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	68db      	ldr	r3, [r3, #12]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d101      	bne.n	80068a6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	e392      	b.n	8006fcc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80068a6:	4b42      	ldr	r3, [pc, #264]	; (80069b0 <HAL_RCC_OscConfig+0x288>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f023 0219 	bic.w	r2, r3, #25
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	68db      	ldr	r3, [r3, #12]
 80068b2:	493f      	ldr	r1, [pc, #252]	; (80069b0 <HAL_RCC_OscConfig+0x288>)
 80068b4:	4313      	orrs	r3, r2
 80068b6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068b8:	f7fc fa42 	bl	8002d40 <HAL_GetTick>
 80068bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80068be:	e008      	b.n	80068d2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068c0:	f7fc fa3e 	bl	8002d40 <HAL_GetTick>
 80068c4:	4602      	mov	r2, r0
 80068c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c8:	1ad3      	subs	r3, r2, r3
 80068ca:	2b02      	cmp	r3, #2
 80068cc:	d901      	bls.n	80068d2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80068ce:	2303      	movs	r3, #3
 80068d0:	e37c      	b.n	8006fcc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80068d2:	4b37      	ldr	r3, [pc, #220]	; (80069b0 <HAL_RCC_OscConfig+0x288>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f003 0304 	and.w	r3, r3, #4
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d0f0      	beq.n	80068c0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068de:	f7fc fa5f 	bl	8002da0 <HAL_GetREVID>
 80068e2:	4603      	mov	r3, r0
 80068e4:	f241 0203 	movw	r2, #4099	; 0x1003
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d817      	bhi.n	800691c <HAL_RCC_OscConfig+0x1f4>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	691b      	ldr	r3, [r3, #16]
 80068f0:	2b40      	cmp	r3, #64	; 0x40
 80068f2:	d108      	bne.n	8006906 <HAL_RCC_OscConfig+0x1de>
 80068f4:	4b2e      	ldr	r3, [pc, #184]	; (80069b0 <HAL_RCC_OscConfig+0x288>)
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80068fc:	4a2c      	ldr	r2, [pc, #176]	; (80069b0 <HAL_RCC_OscConfig+0x288>)
 80068fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006902:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006904:	e07a      	b.n	80069fc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006906:	4b2a      	ldr	r3, [pc, #168]	; (80069b0 <HAL_RCC_OscConfig+0x288>)
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	691b      	ldr	r3, [r3, #16]
 8006912:	031b      	lsls	r3, r3, #12
 8006914:	4926      	ldr	r1, [pc, #152]	; (80069b0 <HAL_RCC_OscConfig+0x288>)
 8006916:	4313      	orrs	r3, r2
 8006918:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800691a:	e06f      	b.n	80069fc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800691c:	4b24      	ldr	r3, [pc, #144]	; (80069b0 <HAL_RCC_OscConfig+0x288>)
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	691b      	ldr	r3, [r3, #16]
 8006928:	061b      	lsls	r3, r3, #24
 800692a:	4921      	ldr	r1, [pc, #132]	; (80069b0 <HAL_RCC_OscConfig+0x288>)
 800692c:	4313      	orrs	r3, r2
 800692e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006930:	e064      	b.n	80069fc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	68db      	ldr	r3, [r3, #12]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d047      	beq.n	80069ca <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800693a:	4b1d      	ldr	r3, [pc, #116]	; (80069b0 <HAL_RCC_OscConfig+0x288>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f023 0219 	bic.w	r2, r3, #25
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	68db      	ldr	r3, [r3, #12]
 8006946:	491a      	ldr	r1, [pc, #104]	; (80069b0 <HAL_RCC_OscConfig+0x288>)
 8006948:	4313      	orrs	r3, r2
 800694a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800694c:	f7fc f9f8 	bl	8002d40 <HAL_GetTick>
 8006950:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006952:	e008      	b.n	8006966 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006954:	f7fc f9f4 	bl	8002d40 <HAL_GetTick>
 8006958:	4602      	mov	r2, r0
 800695a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695c:	1ad3      	subs	r3, r2, r3
 800695e:	2b02      	cmp	r3, #2
 8006960:	d901      	bls.n	8006966 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006962:	2303      	movs	r3, #3
 8006964:	e332      	b.n	8006fcc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006966:	4b12      	ldr	r3, [pc, #72]	; (80069b0 <HAL_RCC_OscConfig+0x288>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f003 0304 	and.w	r3, r3, #4
 800696e:	2b00      	cmp	r3, #0
 8006970:	d0f0      	beq.n	8006954 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006972:	f7fc fa15 	bl	8002da0 <HAL_GetREVID>
 8006976:	4603      	mov	r3, r0
 8006978:	f241 0203 	movw	r2, #4099	; 0x1003
 800697c:	4293      	cmp	r3, r2
 800697e:	d819      	bhi.n	80069b4 <HAL_RCC_OscConfig+0x28c>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	691b      	ldr	r3, [r3, #16]
 8006984:	2b40      	cmp	r3, #64	; 0x40
 8006986:	d108      	bne.n	800699a <HAL_RCC_OscConfig+0x272>
 8006988:	4b09      	ldr	r3, [pc, #36]	; (80069b0 <HAL_RCC_OscConfig+0x288>)
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006990:	4a07      	ldr	r2, [pc, #28]	; (80069b0 <HAL_RCC_OscConfig+0x288>)
 8006992:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006996:	6053      	str	r3, [r2, #4]
 8006998:	e030      	b.n	80069fc <HAL_RCC_OscConfig+0x2d4>
 800699a:	4b05      	ldr	r3, [pc, #20]	; (80069b0 <HAL_RCC_OscConfig+0x288>)
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	691b      	ldr	r3, [r3, #16]
 80069a6:	031b      	lsls	r3, r3, #12
 80069a8:	4901      	ldr	r1, [pc, #4]	; (80069b0 <HAL_RCC_OscConfig+0x288>)
 80069aa:	4313      	orrs	r3, r2
 80069ac:	604b      	str	r3, [r1, #4]
 80069ae:	e025      	b.n	80069fc <HAL_RCC_OscConfig+0x2d4>
 80069b0:	58024400 	.word	0x58024400
 80069b4:	4b9a      	ldr	r3, [pc, #616]	; (8006c20 <HAL_RCC_OscConfig+0x4f8>)
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	691b      	ldr	r3, [r3, #16]
 80069c0:	061b      	lsls	r3, r3, #24
 80069c2:	4997      	ldr	r1, [pc, #604]	; (8006c20 <HAL_RCC_OscConfig+0x4f8>)
 80069c4:	4313      	orrs	r3, r2
 80069c6:	604b      	str	r3, [r1, #4]
 80069c8:	e018      	b.n	80069fc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80069ca:	4b95      	ldr	r3, [pc, #596]	; (8006c20 <HAL_RCC_OscConfig+0x4f8>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a94      	ldr	r2, [pc, #592]	; (8006c20 <HAL_RCC_OscConfig+0x4f8>)
 80069d0:	f023 0301 	bic.w	r3, r3, #1
 80069d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069d6:	f7fc f9b3 	bl	8002d40 <HAL_GetTick>
 80069da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80069dc:	e008      	b.n	80069f0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069de:	f7fc f9af 	bl	8002d40 <HAL_GetTick>
 80069e2:	4602      	mov	r2, r0
 80069e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e6:	1ad3      	subs	r3, r2, r3
 80069e8:	2b02      	cmp	r3, #2
 80069ea:	d901      	bls.n	80069f0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80069ec:	2303      	movs	r3, #3
 80069ee:	e2ed      	b.n	8006fcc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80069f0:	4b8b      	ldr	r3, [pc, #556]	; (8006c20 <HAL_RCC_OscConfig+0x4f8>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f003 0304 	and.w	r3, r3, #4
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d1f0      	bne.n	80069de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f003 0310 	and.w	r3, r3, #16
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	f000 80a9 	beq.w	8006b5c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a0a:	4b85      	ldr	r3, [pc, #532]	; (8006c20 <HAL_RCC_OscConfig+0x4f8>)
 8006a0c:	691b      	ldr	r3, [r3, #16]
 8006a0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a12:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006a14:	4b82      	ldr	r3, [pc, #520]	; (8006c20 <HAL_RCC_OscConfig+0x4f8>)
 8006a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a18:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	2b08      	cmp	r3, #8
 8006a1e:	d007      	beq.n	8006a30 <HAL_RCC_OscConfig+0x308>
 8006a20:	69bb      	ldr	r3, [r7, #24]
 8006a22:	2b18      	cmp	r3, #24
 8006a24:	d13a      	bne.n	8006a9c <HAL_RCC_OscConfig+0x374>
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	f003 0303 	and.w	r3, r3, #3
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d135      	bne.n	8006a9c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006a30:	4b7b      	ldr	r3, [pc, #492]	; (8006c20 <HAL_RCC_OscConfig+0x4f8>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d005      	beq.n	8006a48 <HAL_RCC_OscConfig+0x320>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	69db      	ldr	r3, [r3, #28]
 8006a40:	2b80      	cmp	r3, #128	; 0x80
 8006a42:	d001      	beq.n	8006a48 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006a44:	2301      	movs	r3, #1
 8006a46:	e2c1      	b.n	8006fcc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006a48:	f7fc f9aa 	bl	8002da0 <HAL_GetREVID>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	f241 0203 	movw	r2, #4099	; 0x1003
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d817      	bhi.n	8006a86 <HAL_RCC_OscConfig+0x35e>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6a1b      	ldr	r3, [r3, #32]
 8006a5a:	2b20      	cmp	r3, #32
 8006a5c:	d108      	bne.n	8006a70 <HAL_RCC_OscConfig+0x348>
 8006a5e:	4b70      	ldr	r3, [pc, #448]	; (8006c20 <HAL_RCC_OscConfig+0x4f8>)
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006a66:	4a6e      	ldr	r2, [pc, #440]	; (8006c20 <HAL_RCC_OscConfig+0x4f8>)
 8006a68:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a6c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006a6e:	e075      	b.n	8006b5c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006a70:	4b6b      	ldr	r3, [pc, #428]	; (8006c20 <HAL_RCC_OscConfig+0x4f8>)
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6a1b      	ldr	r3, [r3, #32]
 8006a7c:	069b      	lsls	r3, r3, #26
 8006a7e:	4968      	ldr	r1, [pc, #416]	; (8006c20 <HAL_RCC_OscConfig+0x4f8>)
 8006a80:	4313      	orrs	r3, r2
 8006a82:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006a84:	e06a      	b.n	8006b5c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006a86:	4b66      	ldr	r3, [pc, #408]	; (8006c20 <HAL_RCC_OscConfig+0x4f8>)
 8006a88:	68db      	ldr	r3, [r3, #12]
 8006a8a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6a1b      	ldr	r3, [r3, #32]
 8006a92:	061b      	lsls	r3, r3, #24
 8006a94:	4962      	ldr	r1, [pc, #392]	; (8006c20 <HAL_RCC_OscConfig+0x4f8>)
 8006a96:	4313      	orrs	r3, r2
 8006a98:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006a9a:	e05f      	b.n	8006b5c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	69db      	ldr	r3, [r3, #28]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d042      	beq.n	8006b2a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006aa4:	4b5e      	ldr	r3, [pc, #376]	; (8006c20 <HAL_RCC_OscConfig+0x4f8>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a5d      	ldr	r2, [pc, #372]	; (8006c20 <HAL_RCC_OscConfig+0x4f8>)
 8006aaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006aae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ab0:	f7fc f946 	bl	8002d40 <HAL_GetTick>
 8006ab4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006ab6:	e008      	b.n	8006aca <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006ab8:	f7fc f942 	bl	8002d40 <HAL_GetTick>
 8006abc:	4602      	mov	r2, r0
 8006abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac0:	1ad3      	subs	r3, r2, r3
 8006ac2:	2b02      	cmp	r3, #2
 8006ac4:	d901      	bls.n	8006aca <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006ac6:	2303      	movs	r3, #3
 8006ac8:	e280      	b.n	8006fcc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006aca:	4b55      	ldr	r3, [pc, #340]	; (8006c20 <HAL_RCC_OscConfig+0x4f8>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d0f0      	beq.n	8006ab8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006ad6:	f7fc f963 	bl	8002da0 <HAL_GetREVID>
 8006ada:	4603      	mov	r3, r0
 8006adc:	f241 0203 	movw	r2, #4099	; 0x1003
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d817      	bhi.n	8006b14 <HAL_RCC_OscConfig+0x3ec>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6a1b      	ldr	r3, [r3, #32]
 8006ae8:	2b20      	cmp	r3, #32
 8006aea:	d108      	bne.n	8006afe <HAL_RCC_OscConfig+0x3d6>
 8006aec:	4b4c      	ldr	r3, [pc, #304]	; (8006c20 <HAL_RCC_OscConfig+0x4f8>)
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006af4:	4a4a      	ldr	r2, [pc, #296]	; (8006c20 <HAL_RCC_OscConfig+0x4f8>)
 8006af6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006afa:	6053      	str	r3, [r2, #4]
 8006afc:	e02e      	b.n	8006b5c <HAL_RCC_OscConfig+0x434>
 8006afe:	4b48      	ldr	r3, [pc, #288]	; (8006c20 <HAL_RCC_OscConfig+0x4f8>)
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6a1b      	ldr	r3, [r3, #32]
 8006b0a:	069b      	lsls	r3, r3, #26
 8006b0c:	4944      	ldr	r1, [pc, #272]	; (8006c20 <HAL_RCC_OscConfig+0x4f8>)
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	604b      	str	r3, [r1, #4]
 8006b12:	e023      	b.n	8006b5c <HAL_RCC_OscConfig+0x434>
 8006b14:	4b42      	ldr	r3, [pc, #264]	; (8006c20 <HAL_RCC_OscConfig+0x4f8>)
 8006b16:	68db      	ldr	r3, [r3, #12]
 8006b18:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6a1b      	ldr	r3, [r3, #32]
 8006b20:	061b      	lsls	r3, r3, #24
 8006b22:	493f      	ldr	r1, [pc, #252]	; (8006c20 <HAL_RCC_OscConfig+0x4f8>)
 8006b24:	4313      	orrs	r3, r2
 8006b26:	60cb      	str	r3, [r1, #12]
 8006b28:	e018      	b.n	8006b5c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006b2a:	4b3d      	ldr	r3, [pc, #244]	; (8006c20 <HAL_RCC_OscConfig+0x4f8>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a3c      	ldr	r2, [pc, #240]	; (8006c20 <HAL_RCC_OscConfig+0x4f8>)
 8006b30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b36:	f7fc f903 	bl	8002d40 <HAL_GetTick>
 8006b3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006b3c:	e008      	b.n	8006b50 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006b3e:	f7fc f8ff 	bl	8002d40 <HAL_GetTick>
 8006b42:	4602      	mov	r2, r0
 8006b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b46:	1ad3      	subs	r3, r2, r3
 8006b48:	2b02      	cmp	r3, #2
 8006b4a:	d901      	bls.n	8006b50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006b4c:	2303      	movs	r3, #3
 8006b4e:	e23d      	b.n	8006fcc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006b50:	4b33      	ldr	r3, [pc, #204]	; (8006c20 <HAL_RCC_OscConfig+0x4f8>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d1f0      	bne.n	8006b3e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f003 0308 	and.w	r3, r3, #8
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d036      	beq.n	8006bd6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	695b      	ldr	r3, [r3, #20]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d019      	beq.n	8006ba4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b70:	4b2b      	ldr	r3, [pc, #172]	; (8006c20 <HAL_RCC_OscConfig+0x4f8>)
 8006b72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b74:	4a2a      	ldr	r2, [pc, #168]	; (8006c20 <HAL_RCC_OscConfig+0x4f8>)
 8006b76:	f043 0301 	orr.w	r3, r3, #1
 8006b7a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b7c:	f7fc f8e0 	bl	8002d40 <HAL_GetTick>
 8006b80:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006b82:	e008      	b.n	8006b96 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b84:	f7fc f8dc 	bl	8002d40 <HAL_GetTick>
 8006b88:	4602      	mov	r2, r0
 8006b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8c:	1ad3      	subs	r3, r2, r3
 8006b8e:	2b02      	cmp	r3, #2
 8006b90:	d901      	bls.n	8006b96 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006b92:	2303      	movs	r3, #3
 8006b94:	e21a      	b.n	8006fcc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006b96:	4b22      	ldr	r3, [pc, #136]	; (8006c20 <HAL_RCC_OscConfig+0x4f8>)
 8006b98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b9a:	f003 0302 	and.w	r3, r3, #2
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d0f0      	beq.n	8006b84 <HAL_RCC_OscConfig+0x45c>
 8006ba2:	e018      	b.n	8006bd6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ba4:	4b1e      	ldr	r3, [pc, #120]	; (8006c20 <HAL_RCC_OscConfig+0x4f8>)
 8006ba6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ba8:	4a1d      	ldr	r2, [pc, #116]	; (8006c20 <HAL_RCC_OscConfig+0x4f8>)
 8006baa:	f023 0301 	bic.w	r3, r3, #1
 8006bae:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bb0:	f7fc f8c6 	bl	8002d40 <HAL_GetTick>
 8006bb4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006bb6:	e008      	b.n	8006bca <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006bb8:	f7fc f8c2 	bl	8002d40 <HAL_GetTick>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc0:	1ad3      	subs	r3, r2, r3
 8006bc2:	2b02      	cmp	r3, #2
 8006bc4:	d901      	bls.n	8006bca <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006bc6:	2303      	movs	r3, #3
 8006bc8:	e200      	b.n	8006fcc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006bca:	4b15      	ldr	r3, [pc, #84]	; (8006c20 <HAL_RCC_OscConfig+0x4f8>)
 8006bcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bce:	f003 0302 	and.w	r3, r3, #2
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d1f0      	bne.n	8006bb8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f003 0320 	and.w	r3, r3, #32
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d039      	beq.n	8006c56 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	699b      	ldr	r3, [r3, #24]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d01c      	beq.n	8006c24 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006bea:	4b0d      	ldr	r3, [pc, #52]	; (8006c20 <HAL_RCC_OscConfig+0x4f8>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a0c      	ldr	r2, [pc, #48]	; (8006c20 <HAL_RCC_OscConfig+0x4f8>)
 8006bf0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006bf4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006bf6:	f7fc f8a3 	bl	8002d40 <HAL_GetTick>
 8006bfa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006bfc:	e008      	b.n	8006c10 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006bfe:	f7fc f89f 	bl	8002d40 <HAL_GetTick>
 8006c02:	4602      	mov	r2, r0
 8006c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c06:	1ad3      	subs	r3, r2, r3
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	d901      	bls.n	8006c10 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006c0c:	2303      	movs	r3, #3
 8006c0e:	e1dd      	b.n	8006fcc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006c10:	4b03      	ldr	r3, [pc, #12]	; (8006c20 <HAL_RCC_OscConfig+0x4f8>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d0f0      	beq.n	8006bfe <HAL_RCC_OscConfig+0x4d6>
 8006c1c:	e01b      	b.n	8006c56 <HAL_RCC_OscConfig+0x52e>
 8006c1e:	bf00      	nop
 8006c20:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006c24:	4b9b      	ldr	r3, [pc, #620]	; (8006e94 <HAL_RCC_OscConfig+0x76c>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a9a      	ldr	r2, [pc, #616]	; (8006e94 <HAL_RCC_OscConfig+0x76c>)
 8006c2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c2e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006c30:	f7fc f886 	bl	8002d40 <HAL_GetTick>
 8006c34:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006c36:	e008      	b.n	8006c4a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006c38:	f7fc f882 	bl	8002d40 <HAL_GetTick>
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c40:	1ad3      	subs	r3, r2, r3
 8006c42:	2b02      	cmp	r3, #2
 8006c44:	d901      	bls.n	8006c4a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006c46:	2303      	movs	r3, #3
 8006c48:	e1c0      	b.n	8006fcc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006c4a:	4b92      	ldr	r3, [pc, #584]	; (8006e94 <HAL_RCC_OscConfig+0x76c>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d1f0      	bne.n	8006c38 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f003 0304 	and.w	r3, r3, #4
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	f000 8081 	beq.w	8006d66 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006c64:	4b8c      	ldr	r3, [pc, #560]	; (8006e98 <HAL_RCC_OscConfig+0x770>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a8b      	ldr	r2, [pc, #556]	; (8006e98 <HAL_RCC_OscConfig+0x770>)
 8006c6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c6e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006c70:	f7fc f866 	bl	8002d40 <HAL_GetTick>
 8006c74:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006c76:	e008      	b.n	8006c8a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c78:	f7fc f862 	bl	8002d40 <HAL_GetTick>
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c80:	1ad3      	subs	r3, r2, r3
 8006c82:	2b64      	cmp	r3, #100	; 0x64
 8006c84:	d901      	bls.n	8006c8a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006c86:	2303      	movs	r3, #3
 8006c88:	e1a0      	b.n	8006fcc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006c8a:	4b83      	ldr	r3, [pc, #524]	; (8006e98 <HAL_RCC_OscConfig+0x770>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d0f0      	beq.n	8006c78 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d106      	bne.n	8006cac <HAL_RCC_OscConfig+0x584>
 8006c9e:	4b7d      	ldr	r3, [pc, #500]	; (8006e94 <HAL_RCC_OscConfig+0x76c>)
 8006ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ca2:	4a7c      	ldr	r2, [pc, #496]	; (8006e94 <HAL_RCC_OscConfig+0x76c>)
 8006ca4:	f043 0301 	orr.w	r3, r3, #1
 8006ca8:	6713      	str	r3, [r2, #112]	; 0x70
 8006caa:	e02d      	b.n	8006d08 <HAL_RCC_OscConfig+0x5e0>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d10c      	bne.n	8006cce <HAL_RCC_OscConfig+0x5a6>
 8006cb4:	4b77      	ldr	r3, [pc, #476]	; (8006e94 <HAL_RCC_OscConfig+0x76c>)
 8006cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cb8:	4a76      	ldr	r2, [pc, #472]	; (8006e94 <HAL_RCC_OscConfig+0x76c>)
 8006cba:	f023 0301 	bic.w	r3, r3, #1
 8006cbe:	6713      	str	r3, [r2, #112]	; 0x70
 8006cc0:	4b74      	ldr	r3, [pc, #464]	; (8006e94 <HAL_RCC_OscConfig+0x76c>)
 8006cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cc4:	4a73      	ldr	r2, [pc, #460]	; (8006e94 <HAL_RCC_OscConfig+0x76c>)
 8006cc6:	f023 0304 	bic.w	r3, r3, #4
 8006cca:	6713      	str	r3, [r2, #112]	; 0x70
 8006ccc:	e01c      	b.n	8006d08 <HAL_RCC_OscConfig+0x5e0>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	2b05      	cmp	r3, #5
 8006cd4:	d10c      	bne.n	8006cf0 <HAL_RCC_OscConfig+0x5c8>
 8006cd6:	4b6f      	ldr	r3, [pc, #444]	; (8006e94 <HAL_RCC_OscConfig+0x76c>)
 8006cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cda:	4a6e      	ldr	r2, [pc, #440]	; (8006e94 <HAL_RCC_OscConfig+0x76c>)
 8006cdc:	f043 0304 	orr.w	r3, r3, #4
 8006ce0:	6713      	str	r3, [r2, #112]	; 0x70
 8006ce2:	4b6c      	ldr	r3, [pc, #432]	; (8006e94 <HAL_RCC_OscConfig+0x76c>)
 8006ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ce6:	4a6b      	ldr	r2, [pc, #428]	; (8006e94 <HAL_RCC_OscConfig+0x76c>)
 8006ce8:	f043 0301 	orr.w	r3, r3, #1
 8006cec:	6713      	str	r3, [r2, #112]	; 0x70
 8006cee:	e00b      	b.n	8006d08 <HAL_RCC_OscConfig+0x5e0>
 8006cf0:	4b68      	ldr	r3, [pc, #416]	; (8006e94 <HAL_RCC_OscConfig+0x76c>)
 8006cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cf4:	4a67      	ldr	r2, [pc, #412]	; (8006e94 <HAL_RCC_OscConfig+0x76c>)
 8006cf6:	f023 0301 	bic.w	r3, r3, #1
 8006cfa:	6713      	str	r3, [r2, #112]	; 0x70
 8006cfc:	4b65      	ldr	r3, [pc, #404]	; (8006e94 <HAL_RCC_OscConfig+0x76c>)
 8006cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d00:	4a64      	ldr	r2, [pc, #400]	; (8006e94 <HAL_RCC_OscConfig+0x76c>)
 8006d02:	f023 0304 	bic.w	r3, r3, #4
 8006d06:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d015      	beq.n	8006d3c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d10:	f7fc f816 	bl	8002d40 <HAL_GetTick>
 8006d14:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006d16:	e00a      	b.n	8006d2e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d18:	f7fc f812 	bl	8002d40 <HAL_GetTick>
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d20:	1ad3      	subs	r3, r2, r3
 8006d22:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d901      	bls.n	8006d2e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006d2a:	2303      	movs	r3, #3
 8006d2c:	e14e      	b.n	8006fcc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006d2e:	4b59      	ldr	r3, [pc, #356]	; (8006e94 <HAL_RCC_OscConfig+0x76c>)
 8006d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d32:	f003 0302 	and.w	r3, r3, #2
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d0ee      	beq.n	8006d18 <HAL_RCC_OscConfig+0x5f0>
 8006d3a:	e014      	b.n	8006d66 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d3c:	f7fc f800 	bl	8002d40 <HAL_GetTick>
 8006d40:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006d42:	e00a      	b.n	8006d5a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d44:	f7fb fffc 	bl	8002d40 <HAL_GetTick>
 8006d48:	4602      	mov	r2, r0
 8006d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4c:	1ad3      	subs	r3, r2, r3
 8006d4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d901      	bls.n	8006d5a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006d56:	2303      	movs	r3, #3
 8006d58:	e138      	b.n	8006fcc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006d5a:	4b4e      	ldr	r3, [pc, #312]	; (8006e94 <HAL_RCC_OscConfig+0x76c>)
 8006d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d5e:	f003 0302 	and.w	r3, r3, #2
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d1ee      	bne.n	8006d44 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	f000 812d 	beq.w	8006fca <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006d70:	4b48      	ldr	r3, [pc, #288]	; (8006e94 <HAL_RCC_OscConfig+0x76c>)
 8006d72:	691b      	ldr	r3, [r3, #16]
 8006d74:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d78:	2b18      	cmp	r3, #24
 8006d7a:	f000 80bd 	beq.w	8006ef8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d82:	2b02      	cmp	r3, #2
 8006d84:	f040 809e 	bne.w	8006ec4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d88:	4b42      	ldr	r3, [pc, #264]	; (8006e94 <HAL_RCC_OscConfig+0x76c>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a41      	ldr	r2, [pc, #260]	; (8006e94 <HAL_RCC_OscConfig+0x76c>)
 8006d8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d94:	f7fb ffd4 	bl	8002d40 <HAL_GetTick>
 8006d98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006d9a:	e008      	b.n	8006dae <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d9c:	f7fb ffd0 	bl	8002d40 <HAL_GetTick>
 8006da0:	4602      	mov	r2, r0
 8006da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da4:	1ad3      	subs	r3, r2, r3
 8006da6:	2b02      	cmp	r3, #2
 8006da8:	d901      	bls.n	8006dae <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006daa:	2303      	movs	r3, #3
 8006dac:	e10e      	b.n	8006fcc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006dae:	4b39      	ldr	r3, [pc, #228]	; (8006e94 <HAL_RCC_OscConfig+0x76c>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d1f0      	bne.n	8006d9c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006dba:	4b36      	ldr	r3, [pc, #216]	; (8006e94 <HAL_RCC_OscConfig+0x76c>)
 8006dbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006dbe:	4b37      	ldr	r3, [pc, #220]	; (8006e9c <HAL_RCC_OscConfig+0x774>)
 8006dc0:	4013      	ands	r3, r2
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006dc6:	687a      	ldr	r2, [r7, #4]
 8006dc8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006dca:	0112      	lsls	r2, r2, #4
 8006dcc:	430a      	orrs	r2, r1
 8006dce:	4931      	ldr	r1, [pc, #196]	; (8006e94 <HAL_RCC_OscConfig+0x76c>)
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	628b      	str	r3, [r1, #40]	; 0x28
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dd8:	3b01      	subs	r3, #1
 8006dda:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006de2:	3b01      	subs	r3, #1
 8006de4:	025b      	lsls	r3, r3, #9
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	431a      	orrs	r2, r3
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dee:	3b01      	subs	r3, #1
 8006df0:	041b      	lsls	r3, r3, #16
 8006df2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006df6:	431a      	orrs	r2, r3
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dfc:	3b01      	subs	r3, #1
 8006dfe:	061b      	lsls	r3, r3, #24
 8006e00:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006e04:	4923      	ldr	r1, [pc, #140]	; (8006e94 <HAL_RCC_OscConfig+0x76c>)
 8006e06:	4313      	orrs	r3, r2
 8006e08:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006e0a:	4b22      	ldr	r3, [pc, #136]	; (8006e94 <HAL_RCC_OscConfig+0x76c>)
 8006e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e0e:	4a21      	ldr	r2, [pc, #132]	; (8006e94 <HAL_RCC_OscConfig+0x76c>)
 8006e10:	f023 0301 	bic.w	r3, r3, #1
 8006e14:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006e16:	4b1f      	ldr	r3, [pc, #124]	; (8006e94 <HAL_RCC_OscConfig+0x76c>)
 8006e18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e1a:	4b21      	ldr	r3, [pc, #132]	; (8006ea0 <HAL_RCC_OscConfig+0x778>)
 8006e1c:	4013      	ands	r3, r2
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006e22:	00d2      	lsls	r2, r2, #3
 8006e24:	491b      	ldr	r1, [pc, #108]	; (8006e94 <HAL_RCC_OscConfig+0x76c>)
 8006e26:	4313      	orrs	r3, r2
 8006e28:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006e2a:	4b1a      	ldr	r3, [pc, #104]	; (8006e94 <HAL_RCC_OscConfig+0x76c>)
 8006e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e2e:	f023 020c 	bic.w	r2, r3, #12
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e36:	4917      	ldr	r1, [pc, #92]	; (8006e94 <HAL_RCC_OscConfig+0x76c>)
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006e3c:	4b15      	ldr	r3, [pc, #84]	; (8006e94 <HAL_RCC_OscConfig+0x76c>)
 8006e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e40:	f023 0202 	bic.w	r2, r3, #2
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e48:	4912      	ldr	r1, [pc, #72]	; (8006e94 <HAL_RCC_OscConfig+0x76c>)
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006e4e:	4b11      	ldr	r3, [pc, #68]	; (8006e94 <HAL_RCC_OscConfig+0x76c>)
 8006e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e52:	4a10      	ldr	r2, [pc, #64]	; (8006e94 <HAL_RCC_OscConfig+0x76c>)
 8006e54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e58:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e5a:	4b0e      	ldr	r3, [pc, #56]	; (8006e94 <HAL_RCC_OscConfig+0x76c>)
 8006e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e5e:	4a0d      	ldr	r2, [pc, #52]	; (8006e94 <HAL_RCC_OscConfig+0x76c>)
 8006e60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e64:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006e66:	4b0b      	ldr	r3, [pc, #44]	; (8006e94 <HAL_RCC_OscConfig+0x76c>)
 8006e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e6a:	4a0a      	ldr	r2, [pc, #40]	; (8006e94 <HAL_RCC_OscConfig+0x76c>)
 8006e6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006e70:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006e72:	4b08      	ldr	r3, [pc, #32]	; (8006e94 <HAL_RCC_OscConfig+0x76c>)
 8006e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e76:	4a07      	ldr	r2, [pc, #28]	; (8006e94 <HAL_RCC_OscConfig+0x76c>)
 8006e78:	f043 0301 	orr.w	r3, r3, #1
 8006e7c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e7e:	4b05      	ldr	r3, [pc, #20]	; (8006e94 <HAL_RCC_OscConfig+0x76c>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a04      	ldr	r2, [pc, #16]	; (8006e94 <HAL_RCC_OscConfig+0x76c>)
 8006e84:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e8a:	f7fb ff59 	bl	8002d40 <HAL_GetTick>
 8006e8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006e90:	e011      	b.n	8006eb6 <HAL_RCC_OscConfig+0x78e>
 8006e92:	bf00      	nop
 8006e94:	58024400 	.word	0x58024400
 8006e98:	58024800 	.word	0x58024800
 8006e9c:	fffffc0c 	.word	0xfffffc0c
 8006ea0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ea4:	f7fb ff4c 	bl	8002d40 <HAL_GetTick>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eac:	1ad3      	subs	r3, r2, r3
 8006eae:	2b02      	cmp	r3, #2
 8006eb0:	d901      	bls.n	8006eb6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006eb2:	2303      	movs	r3, #3
 8006eb4:	e08a      	b.n	8006fcc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006eb6:	4b47      	ldr	r3, [pc, #284]	; (8006fd4 <HAL_RCC_OscConfig+0x8ac>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d0f0      	beq.n	8006ea4 <HAL_RCC_OscConfig+0x77c>
 8006ec2:	e082      	b.n	8006fca <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ec4:	4b43      	ldr	r3, [pc, #268]	; (8006fd4 <HAL_RCC_OscConfig+0x8ac>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a42      	ldr	r2, [pc, #264]	; (8006fd4 <HAL_RCC_OscConfig+0x8ac>)
 8006eca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ece:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ed0:	f7fb ff36 	bl	8002d40 <HAL_GetTick>
 8006ed4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006ed6:	e008      	b.n	8006eea <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ed8:	f7fb ff32 	bl	8002d40 <HAL_GetTick>
 8006edc:	4602      	mov	r2, r0
 8006ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee0:	1ad3      	subs	r3, r2, r3
 8006ee2:	2b02      	cmp	r3, #2
 8006ee4:	d901      	bls.n	8006eea <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006ee6:	2303      	movs	r3, #3
 8006ee8:	e070      	b.n	8006fcc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006eea:	4b3a      	ldr	r3, [pc, #232]	; (8006fd4 <HAL_RCC_OscConfig+0x8ac>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d1f0      	bne.n	8006ed8 <HAL_RCC_OscConfig+0x7b0>
 8006ef6:	e068      	b.n	8006fca <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006ef8:	4b36      	ldr	r3, [pc, #216]	; (8006fd4 <HAL_RCC_OscConfig+0x8ac>)
 8006efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006efc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006efe:	4b35      	ldr	r3, [pc, #212]	; (8006fd4 <HAL_RCC_OscConfig+0x8ac>)
 8006f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f02:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d031      	beq.n	8006f70 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	f003 0203 	and.w	r2, r3, #3
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d12a      	bne.n	8006f70 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	091b      	lsrs	r3, r3, #4
 8006f1e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d122      	bne.n	8006f70 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f34:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d11a      	bne.n	8006f70 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	0a5b      	lsrs	r3, r3, #9
 8006f3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f46:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d111      	bne.n	8006f70 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	0c1b      	lsrs	r3, r3, #16
 8006f50:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f58:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d108      	bne.n	8006f70 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	0e1b      	lsrs	r3, r3, #24
 8006f62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f6a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d001      	beq.n	8006f74 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006f70:	2301      	movs	r3, #1
 8006f72:	e02b      	b.n	8006fcc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006f74:	4b17      	ldr	r3, [pc, #92]	; (8006fd4 <HAL_RCC_OscConfig+0x8ac>)
 8006f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f78:	08db      	lsrs	r3, r3, #3
 8006f7a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f7e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f84:	693a      	ldr	r2, [r7, #16]
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d01f      	beq.n	8006fca <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006f8a:	4b12      	ldr	r3, [pc, #72]	; (8006fd4 <HAL_RCC_OscConfig+0x8ac>)
 8006f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f8e:	4a11      	ldr	r2, [pc, #68]	; (8006fd4 <HAL_RCC_OscConfig+0x8ac>)
 8006f90:	f023 0301 	bic.w	r3, r3, #1
 8006f94:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006f96:	f7fb fed3 	bl	8002d40 <HAL_GetTick>
 8006f9a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006f9c:	bf00      	nop
 8006f9e:	f7fb fecf 	bl	8002d40 <HAL_GetTick>
 8006fa2:	4602      	mov	r2, r0
 8006fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d0f9      	beq.n	8006f9e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006faa:	4b0a      	ldr	r3, [pc, #40]	; (8006fd4 <HAL_RCC_OscConfig+0x8ac>)
 8006fac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fae:	4b0a      	ldr	r3, [pc, #40]	; (8006fd8 <HAL_RCC_OscConfig+0x8b0>)
 8006fb0:	4013      	ands	r3, r2
 8006fb2:	687a      	ldr	r2, [r7, #4]
 8006fb4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006fb6:	00d2      	lsls	r2, r2, #3
 8006fb8:	4906      	ldr	r1, [pc, #24]	; (8006fd4 <HAL_RCC_OscConfig+0x8ac>)
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006fbe:	4b05      	ldr	r3, [pc, #20]	; (8006fd4 <HAL_RCC_OscConfig+0x8ac>)
 8006fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc2:	4a04      	ldr	r2, [pc, #16]	; (8006fd4 <HAL_RCC_OscConfig+0x8ac>)
 8006fc4:	f043 0301 	orr.w	r3, r3, #1
 8006fc8:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006fca:	2300      	movs	r3, #0
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3730      	adds	r7, #48	; 0x30
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}
 8006fd4:	58024400 	.word	0x58024400
 8006fd8:	ffff0007 	.word	0xffff0007

08006fdc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b086      	sub	sp, #24
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d101      	bne.n	8006ff0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
 8006fee:	e19c      	b.n	800732a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ff0:	4b8a      	ldr	r3, [pc, #552]	; (800721c <HAL_RCC_ClockConfig+0x240>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f003 030f 	and.w	r3, r3, #15
 8006ff8:	683a      	ldr	r2, [r7, #0]
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d910      	bls.n	8007020 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ffe:	4b87      	ldr	r3, [pc, #540]	; (800721c <HAL_RCC_ClockConfig+0x240>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f023 020f 	bic.w	r2, r3, #15
 8007006:	4985      	ldr	r1, [pc, #532]	; (800721c <HAL_RCC_ClockConfig+0x240>)
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	4313      	orrs	r3, r2
 800700c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800700e:	4b83      	ldr	r3, [pc, #524]	; (800721c <HAL_RCC_ClockConfig+0x240>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f003 030f 	and.w	r3, r3, #15
 8007016:	683a      	ldr	r2, [r7, #0]
 8007018:	429a      	cmp	r2, r3
 800701a:	d001      	beq.n	8007020 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800701c:	2301      	movs	r3, #1
 800701e:	e184      	b.n	800732a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f003 0304 	and.w	r3, r3, #4
 8007028:	2b00      	cmp	r3, #0
 800702a:	d010      	beq.n	800704e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	691a      	ldr	r2, [r3, #16]
 8007030:	4b7b      	ldr	r3, [pc, #492]	; (8007220 <HAL_RCC_ClockConfig+0x244>)
 8007032:	699b      	ldr	r3, [r3, #24]
 8007034:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007038:	429a      	cmp	r2, r3
 800703a:	d908      	bls.n	800704e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800703c:	4b78      	ldr	r3, [pc, #480]	; (8007220 <HAL_RCC_ClockConfig+0x244>)
 800703e:	699b      	ldr	r3, [r3, #24]
 8007040:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	691b      	ldr	r3, [r3, #16]
 8007048:	4975      	ldr	r1, [pc, #468]	; (8007220 <HAL_RCC_ClockConfig+0x244>)
 800704a:	4313      	orrs	r3, r2
 800704c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f003 0308 	and.w	r3, r3, #8
 8007056:	2b00      	cmp	r3, #0
 8007058:	d010      	beq.n	800707c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	695a      	ldr	r2, [r3, #20]
 800705e:	4b70      	ldr	r3, [pc, #448]	; (8007220 <HAL_RCC_ClockConfig+0x244>)
 8007060:	69db      	ldr	r3, [r3, #28]
 8007062:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007066:	429a      	cmp	r2, r3
 8007068:	d908      	bls.n	800707c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800706a:	4b6d      	ldr	r3, [pc, #436]	; (8007220 <HAL_RCC_ClockConfig+0x244>)
 800706c:	69db      	ldr	r3, [r3, #28]
 800706e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	695b      	ldr	r3, [r3, #20]
 8007076:	496a      	ldr	r1, [pc, #424]	; (8007220 <HAL_RCC_ClockConfig+0x244>)
 8007078:	4313      	orrs	r3, r2
 800707a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f003 0310 	and.w	r3, r3, #16
 8007084:	2b00      	cmp	r3, #0
 8007086:	d010      	beq.n	80070aa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	699a      	ldr	r2, [r3, #24]
 800708c:	4b64      	ldr	r3, [pc, #400]	; (8007220 <HAL_RCC_ClockConfig+0x244>)
 800708e:	69db      	ldr	r3, [r3, #28]
 8007090:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007094:	429a      	cmp	r2, r3
 8007096:	d908      	bls.n	80070aa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007098:	4b61      	ldr	r3, [pc, #388]	; (8007220 <HAL_RCC_ClockConfig+0x244>)
 800709a:	69db      	ldr	r3, [r3, #28]
 800709c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	699b      	ldr	r3, [r3, #24]
 80070a4:	495e      	ldr	r1, [pc, #376]	; (8007220 <HAL_RCC_ClockConfig+0x244>)
 80070a6:	4313      	orrs	r3, r2
 80070a8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f003 0320 	and.w	r3, r3, #32
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d010      	beq.n	80070d8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	69da      	ldr	r2, [r3, #28]
 80070ba:	4b59      	ldr	r3, [pc, #356]	; (8007220 <HAL_RCC_ClockConfig+0x244>)
 80070bc:	6a1b      	ldr	r3, [r3, #32]
 80070be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d908      	bls.n	80070d8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80070c6:	4b56      	ldr	r3, [pc, #344]	; (8007220 <HAL_RCC_ClockConfig+0x244>)
 80070c8:	6a1b      	ldr	r3, [r3, #32]
 80070ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	69db      	ldr	r3, [r3, #28]
 80070d2:	4953      	ldr	r1, [pc, #332]	; (8007220 <HAL_RCC_ClockConfig+0x244>)
 80070d4:	4313      	orrs	r3, r2
 80070d6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f003 0302 	and.w	r3, r3, #2
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d010      	beq.n	8007106 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	68da      	ldr	r2, [r3, #12]
 80070e8:	4b4d      	ldr	r3, [pc, #308]	; (8007220 <HAL_RCC_ClockConfig+0x244>)
 80070ea:	699b      	ldr	r3, [r3, #24]
 80070ec:	f003 030f 	and.w	r3, r3, #15
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d908      	bls.n	8007106 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070f4:	4b4a      	ldr	r3, [pc, #296]	; (8007220 <HAL_RCC_ClockConfig+0x244>)
 80070f6:	699b      	ldr	r3, [r3, #24]
 80070f8:	f023 020f 	bic.w	r2, r3, #15
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	68db      	ldr	r3, [r3, #12]
 8007100:	4947      	ldr	r1, [pc, #284]	; (8007220 <HAL_RCC_ClockConfig+0x244>)
 8007102:	4313      	orrs	r3, r2
 8007104:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f003 0301 	and.w	r3, r3, #1
 800710e:	2b00      	cmp	r3, #0
 8007110:	d055      	beq.n	80071be <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007112:	4b43      	ldr	r3, [pc, #268]	; (8007220 <HAL_RCC_ClockConfig+0x244>)
 8007114:	699b      	ldr	r3, [r3, #24]
 8007116:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	4940      	ldr	r1, [pc, #256]	; (8007220 <HAL_RCC_ClockConfig+0x244>)
 8007120:	4313      	orrs	r3, r2
 8007122:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	2b02      	cmp	r3, #2
 800712a:	d107      	bne.n	800713c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800712c:	4b3c      	ldr	r3, [pc, #240]	; (8007220 <HAL_RCC_ClockConfig+0x244>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007134:	2b00      	cmp	r3, #0
 8007136:	d121      	bne.n	800717c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007138:	2301      	movs	r3, #1
 800713a:	e0f6      	b.n	800732a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	2b03      	cmp	r3, #3
 8007142:	d107      	bne.n	8007154 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007144:	4b36      	ldr	r3, [pc, #216]	; (8007220 <HAL_RCC_ClockConfig+0x244>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800714c:	2b00      	cmp	r3, #0
 800714e:	d115      	bne.n	800717c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007150:	2301      	movs	r3, #1
 8007152:	e0ea      	b.n	800732a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	2b01      	cmp	r3, #1
 800715a:	d107      	bne.n	800716c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800715c:	4b30      	ldr	r3, [pc, #192]	; (8007220 <HAL_RCC_ClockConfig+0x244>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007164:	2b00      	cmp	r3, #0
 8007166:	d109      	bne.n	800717c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007168:	2301      	movs	r3, #1
 800716a:	e0de      	b.n	800732a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800716c:	4b2c      	ldr	r3, [pc, #176]	; (8007220 <HAL_RCC_ClockConfig+0x244>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f003 0304 	and.w	r3, r3, #4
 8007174:	2b00      	cmp	r3, #0
 8007176:	d101      	bne.n	800717c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007178:	2301      	movs	r3, #1
 800717a:	e0d6      	b.n	800732a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800717c:	4b28      	ldr	r3, [pc, #160]	; (8007220 <HAL_RCC_ClockConfig+0x244>)
 800717e:	691b      	ldr	r3, [r3, #16]
 8007180:	f023 0207 	bic.w	r2, r3, #7
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	4925      	ldr	r1, [pc, #148]	; (8007220 <HAL_RCC_ClockConfig+0x244>)
 800718a:	4313      	orrs	r3, r2
 800718c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800718e:	f7fb fdd7 	bl	8002d40 <HAL_GetTick>
 8007192:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007194:	e00a      	b.n	80071ac <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007196:	f7fb fdd3 	bl	8002d40 <HAL_GetTick>
 800719a:	4602      	mov	r2, r0
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	1ad3      	subs	r3, r2, r3
 80071a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d901      	bls.n	80071ac <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80071a8:	2303      	movs	r3, #3
 80071aa:	e0be      	b.n	800732a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071ac:	4b1c      	ldr	r3, [pc, #112]	; (8007220 <HAL_RCC_ClockConfig+0x244>)
 80071ae:	691b      	ldr	r3, [r3, #16]
 80071b0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	00db      	lsls	r3, r3, #3
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d1eb      	bne.n	8007196 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f003 0302 	and.w	r3, r3, #2
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d010      	beq.n	80071ec <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	68da      	ldr	r2, [r3, #12]
 80071ce:	4b14      	ldr	r3, [pc, #80]	; (8007220 <HAL_RCC_ClockConfig+0x244>)
 80071d0:	699b      	ldr	r3, [r3, #24]
 80071d2:	f003 030f 	and.w	r3, r3, #15
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d208      	bcs.n	80071ec <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80071da:	4b11      	ldr	r3, [pc, #68]	; (8007220 <HAL_RCC_ClockConfig+0x244>)
 80071dc:	699b      	ldr	r3, [r3, #24]
 80071de:	f023 020f 	bic.w	r2, r3, #15
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	68db      	ldr	r3, [r3, #12]
 80071e6:	490e      	ldr	r1, [pc, #56]	; (8007220 <HAL_RCC_ClockConfig+0x244>)
 80071e8:	4313      	orrs	r3, r2
 80071ea:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80071ec:	4b0b      	ldr	r3, [pc, #44]	; (800721c <HAL_RCC_ClockConfig+0x240>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f003 030f 	and.w	r3, r3, #15
 80071f4:	683a      	ldr	r2, [r7, #0]
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d214      	bcs.n	8007224 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071fa:	4b08      	ldr	r3, [pc, #32]	; (800721c <HAL_RCC_ClockConfig+0x240>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f023 020f 	bic.w	r2, r3, #15
 8007202:	4906      	ldr	r1, [pc, #24]	; (800721c <HAL_RCC_ClockConfig+0x240>)
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	4313      	orrs	r3, r2
 8007208:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800720a:	4b04      	ldr	r3, [pc, #16]	; (800721c <HAL_RCC_ClockConfig+0x240>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f003 030f 	and.w	r3, r3, #15
 8007212:	683a      	ldr	r2, [r7, #0]
 8007214:	429a      	cmp	r2, r3
 8007216:	d005      	beq.n	8007224 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007218:	2301      	movs	r3, #1
 800721a:	e086      	b.n	800732a <HAL_RCC_ClockConfig+0x34e>
 800721c:	52002000 	.word	0x52002000
 8007220:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f003 0304 	and.w	r3, r3, #4
 800722c:	2b00      	cmp	r3, #0
 800722e:	d010      	beq.n	8007252 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	691a      	ldr	r2, [r3, #16]
 8007234:	4b3f      	ldr	r3, [pc, #252]	; (8007334 <HAL_RCC_ClockConfig+0x358>)
 8007236:	699b      	ldr	r3, [r3, #24]
 8007238:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800723c:	429a      	cmp	r2, r3
 800723e:	d208      	bcs.n	8007252 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007240:	4b3c      	ldr	r3, [pc, #240]	; (8007334 <HAL_RCC_ClockConfig+0x358>)
 8007242:	699b      	ldr	r3, [r3, #24]
 8007244:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	691b      	ldr	r3, [r3, #16]
 800724c:	4939      	ldr	r1, [pc, #228]	; (8007334 <HAL_RCC_ClockConfig+0x358>)
 800724e:	4313      	orrs	r3, r2
 8007250:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f003 0308 	and.w	r3, r3, #8
 800725a:	2b00      	cmp	r3, #0
 800725c:	d010      	beq.n	8007280 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	695a      	ldr	r2, [r3, #20]
 8007262:	4b34      	ldr	r3, [pc, #208]	; (8007334 <HAL_RCC_ClockConfig+0x358>)
 8007264:	69db      	ldr	r3, [r3, #28]
 8007266:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800726a:	429a      	cmp	r2, r3
 800726c:	d208      	bcs.n	8007280 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800726e:	4b31      	ldr	r3, [pc, #196]	; (8007334 <HAL_RCC_ClockConfig+0x358>)
 8007270:	69db      	ldr	r3, [r3, #28]
 8007272:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	695b      	ldr	r3, [r3, #20]
 800727a:	492e      	ldr	r1, [pc, #184]	; (8007334 <HAL_RCC_ClockConfig+0x358>)
 800727c:	4313      	orrs	r3, r2
 800727e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f003 0310 	and.w	r3, r3, #16
 8007288:	2b00      	cmp	r3, #0
 800728a:	d010      	beq.n	80072ae <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	699a      	ldr	r2, [r3, #24]
 8007290:	4b28      	ldr	r3, [pc, #160]	; (8007334 <HAL_RCC_ClockConfig+0x358>)
 8007292:	69db      	ldr	r3, [r3, #28]
 8007294:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007298:	429a      	cmp	r2, r3
 800729a:	d208      	bcs.n	80072ae <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800729c:	4b25      	ldr	r3, [pc, #148]	; (8007334 <HAL_RCC_ClockConfig+0x358>)
 800729e:	69db      	ldr	r3, [r3, #28]
 80072a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	699b      	ldr	r3, [r3, #24]
 80072a8:	4922      	ldr	r1, [pc, #136]	; (8007334 <HAL_RCC_ClockConfig+0x358>)
 80072aa:	4313      	orrs	r3, r2
 80072ac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f003 0320 	and.w	r3, r3, #32
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d010      	beq.n	80072dc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	69da      	ldr	r2, [r3, #28]
 80072be:	4b1d      	ldr	r3, [pc, #116]	; (8007334 <HAL_RCC_ClockConfig+0x358>)
 80072c0:	6a1b      	ldr	r3, [r3, #32]
 80072c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d208      	bcs.n	80072dc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80072ca:	4b1a      	ldr	r3, [pc, #104]	; (8007334 <HAL_RCC_ClockConfig+0x358>)
 80072cc:	6a1b      	ldr	r3, [r3, #32]
 80072ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	69db      	ldr	r3, [r3, #28]
 80072d6:	4917      	ldr	r1, [pc, #92]	; (8007334 <HAL_RCC_ClockConfig+0x358>)
 80072d8:	4313      	orrs	r3, r2
 80072da:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80072dc:	f000 f834 	bl	8007348 <HAL_RCC_GetSysClockFreq>
 80072e0:	4602      	mov	r2, r0
 80072e2:	4b14      	ldr	r3, [pc, #80]	; (8007334 <HAL_RCC_ClockConfig+0x358>)
 80072e4:	699b      	ldr	r3, [r3, #24]
 80072e6:	0a1b      	lsrs	r3, r3, #8
 80072e8:	f003 030f 	and.w	r3, r3, #15
 80072ec:	4912      	ldr	r1, [pc, #72]	; (8007338 <HAL_RCC_ClockConfig+0x35c>)
 80072ee:	5ccb      	ldrb	r3, [r1, r3]
 80072f0:	f003 031f 	and.w	r3, r3, #31
 80072f4:	fa22 f303 	lsr.w	r3, r2, r3
 80072f8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80072fa:	4b0e      	ldr	r3, [pc, #56]	; (8007334 <HAL_RCC_ClockConfig+0x358>)
 80072fc:	699b      	ldr	r3, [r3, #24]
 80072fe:	f003 030f 	and.w	r3, r3, #15
 8007302:	4a0d      	ldr	r2, [pc, #52]	; (8007338 <HAL_RCC_ClockConfig+0x35c>)
 8007304:	5cd3      	ldrb	r3, [r2, r3]
 8007306:	f003 031f 	and.w	r3, r3, #31
 800730a:	693a      	ldr	r2, [r7, #16]
 800730c:	fa22 f303 	lsr.w	r3, r2, r3
 8007310:	4a0a      	ldr	r2, [pc, #40]	; (800733c <HAL_RCC_ClockConfig+0x360>)
 8007312:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007314:	4a0a      	ldr	r2, [pc, #40]	; (8007340 <HAL_RCC_ClockConfig+0x364>)
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800731a:	4b0a      	ldr	r3, [pc, #40]	; (8007344 <HAL_RCC_ClockConfig+0x368>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4618      	mov	r0, r3
 8007320:	f7fb fcc4 	bl	8002cac <HAL_InitTick>
 8007324:	4603      	mov	r3, r0
 8007326:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007328:	7bfb      	ldrb	r3, [r7, #15]
}
 800732a:	4618      	mov	r0, r3
 800732c:	3718      	adds	r7, #24
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}
 8007332:	bf00      	nop
 8007334:	58024400 	.word	0x58024400
 8007338:	0800e48c 	.word	0x0800e48c
 800733c:	2400002c 	.word	0x2400002c
 8007340:	24000028 	.word	0x24000028
 8007344:	24000030 	.word	0x24000030

08007348 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007348:	b480      	push	{r7}
 800734a:	b089      	sub	sp, #36	; 0x24
 800734c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800734e:	4bb3      	ldr	r3, [pc, #716]	; (800761c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007350:	691b      	ldr	r3, [r3, #16]
 8007352:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007356:	2b18      	cmp	r3, #24
 8007358:	f200 8155 	bhi.w	8007606 <HAL_RCC_GetSysClockFreq+0x2be>
 800735c:	a201      	add	r2, pc, #4	; (adr r2, 8007364 <HAL_RCC_GetSysClockFreq+0x1c>)
 800735e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007362:	bf00      	nop
 8007364:	080073c9 	.word	0x080073c9
 8007368:	08007607 	.word	0x08007607
 800736c:	08007607 	.word	0x08007607
 8007370:	08007607 	.word	0x08007607
 8007374:	08007607 	.word	0x08007607
 8007378:	08007607 	.word	0x08007607
 800737c:	08007607 	.word	0x08007607
 8007380:	08007607 	.word	0x08007607
 8007384:	080073ef 	.word	0x080073ef
 8007388:	08007607 	.word	0x08007607
 800738c:	08007607 	.word	0x08007607
 8007390:	08007607 	.word	0x08007607
 8007394:	08007607 	.word	0x08007607
 8007398:	08007607 	.word	0x08007607
 800739c:	08007607 	.word	0x08007607
 80073a0:	08007607 	.word	0x08007607
 80073a4:	080073f5 	.word	0x080073f5
 80073a8:	08007607 	.word	0x08007607
 80073ac:	08007607 	.word	0x08007607
 80073b0:	08007607 	.word	0x08007607
 80073b4:	08007607 	.word	0x08007607
 80073b8:	08007607 	.word	0x08007607
 80073bc:	08007607 	.word	0x08007607
 80073c0:	08007607 	.word	0x08007607
 80073c4:	080073fb 	.word	0x080073fb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073c8:	4b94      	ldr	r3, [pc, #592]	; (800761c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f003 0320 	and.w	r3, r3, #32
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d009      	beq.n	80073e8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80073d4:	4b91      	ldr	r3, [pc, #580]	; (800761c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	08db      	lsrs	r3, r3, #3
 80073da:	f003 0303 	and.w	r3, r3, #3
 80073de:	4a90      	ldr	r2, [pc, #576]	; (8007620 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80073e0:	fa22 f303 	lsr.w	r3, r2, r3
 80073e4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80073e6:	e111      	b.n	800760c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80073e8:	4b8d      	ldr	r3, [pc, #564]	; (8007620 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80073ea:	61bb      	str	r3, [r7, #24]
      break;
 80073ec:	e10e      	b.n	800760c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80073ee:	4b8d      	ldr	r3, [pc, #564]	; (8007624 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80073f0:	61bb      	str	r3, [r7, #24]
      break;
 80073f2:	e10b      	b.n	800760c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80073f4:	4b8c      	ldr	r3, [pc, #560]	; (8007628 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80073f6:	61bb      	str	r3, [r7, #24]
      break;
 80073f8:	e108      	b.n	800760c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80073fa:	4b88      	ldr	r3, [pc, #544]	; (800761c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073fe:	f003 0303 	and.w	r3, r3, #3
 8007402:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007404:	4b85      	ldr	r3, [pc, #532]	; (800761c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007408:	091b      	lsrs	r3, r3, #4
 800740a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800740e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007410:	4b82      	ldr	r3, [pc, #520]	; (800761c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007414:	f003 0301 	and.w	r3, r3, #1
 8007418:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800741a:	4b80      	ldr	r3, [pc, #512]	; (800761c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800741c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800741e:	08db      	lsrs	r3, r3, #3
 8007420:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007424:	68fa      	ldr	r2, [r7, #12]
 8007426:	fb02 f303 	mul.w	r3, r2, r3
 800742a:	ee07 3a90 	vmov	s15, r3
 800742e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007432:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	2b00      	cmp	r3, #0
 800743a:	f000 80e1 	beq.w	8007600 <HAL_RCC_GetSysClockFreq+0x2b8>
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	2b02      	cmp	r3, #2
 8007442:	f000 8083 	beq.w	800754c <HAL_RCC_GetSysClockFreq+0x204>
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	2b02      	cmp	r3, #2
 800744a:	f200 80a1 	bhi.w	8007590 <HAL_RCC_GetSysClockFreq+0x248>
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d003      	beq.n	800745c <HAL_RCC_GetSysClockFreq+0x114>
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	2b01      	cmp	r3, #1
 8007458:	d056      	beq.n	8007508 <HAL_RCC_GetSysClockFreq+0x1c0>
 800745a:	e099      	b.n	8007590 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800745c:	4b6f      	ldr	r3, [pc, #444]	; (800761c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f003 0320 	and.w	r3, r3, #32
 8007464:	2b00      	cmp	r3, #0
 8007466:	d02d      	beq.n	80074c4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007468:	4b6c      	ldr	r3, [pc, #432]	; (800761c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	08db      	lsrs	r3, r3, #3
 800746e:	f003 0303 	and.w	r3, r3, #3
 8007472:	4a6b      	ldr	r2, [pc, #428]	; (8007620 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007474:	fa22 f303 	lsr.w	r3, r2, r3
 8007478:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	ee07 3a90 	vmov	s15, r3
 8007480:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	ee07 3a90 	vmov	s15, r3
 800748a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800748e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007492:	4b62      	ldr	r3, [pc, #392]	; (800761c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800749a:	ee07 3a90 	vmov	s15, r3
 800749e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80074a6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800762c <HAL_RCC_GetSysClockFreq+0x2e4>
 80074aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074be:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80074c2:	e087      	b.n	80075d4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	ee07 3a90 	vmov	s15, r3
 80074ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074ce:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007630 <HAL_RCC_GetSysClockFreq+0x2e8>
 80074d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074d6:	4b51      	ldr	r3, [pc, #324]	; (800761c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074de:	ee07 3a90 	vmov	s15, r3
 80074e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80074ea:	eddf 5a50 	vldr	s11, [pc, #320]	; 800762c <HAL_RCC_GetSysClockFreq+0x2e4>
 80074ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007502:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007506:	e065      	b.n	80075d4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	ee07 3a90 	vmov	s15, r3
 800750e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007512:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007634 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007516:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800751a:	4b40      	ldr	r3, [pc, #256]	; (800761c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800751c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800751e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007522:	ee07 3a90 	vmov	s15, r3
 8007526:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800752a:	ed97 6a02 	vldr	s12, [r7, #8]
 800752e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800762c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007532:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007536:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800753a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800753e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007546:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800754a:	e043      	b.n	80075d4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	ee07 3a90 	vmov	s15, r3
 8007552:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007556:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007638 <HAL_RCC_GetSysClockFreq+0x2f0>
 800755a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800755e:	4b2f      	ldr	r3, [pc, #188]	; (800761c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007562:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007566:	ee07 3a90 	vmov	s15, r3
 800756a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800756e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007572:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800762c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007576:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800757a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800757e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007582:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007586:	ee67 7a27 	vmul.f32	s15, s14, s15
 800758a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800758e:	e021      	b.n	80075d4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	ee07 3a90 	vmov	s15, r3
 8007596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800759a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007634 <HAL_RCC_GetSysClockFreq+0x2ec>
 800759e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075a2:	4b1e      	ldr	r3, [pc, #120]	; (800761c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075aa:	ee07 3a90 	vmov	s15, r3
 80075ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80075b6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800762c <HAL_RCC_GetSysClockFreq+0x2e4>
 80075ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80075d2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80075d4:	4b11      	ldr	r3, [pc, #68]	; (800761c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075d8:	0a5b      	lsrs	r3, r3, #9
 80075da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075de:	3301      	adds	r3, #1
 80075e0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	ee07 3a90 	vmov	s15, r3
 80075e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80075ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80075f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075f8:	ee17 3a90 	vmov	r3, s15
 80075fc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80075fe:	e005      	b.n	800760c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007600:	2300      	movs	r3, #0
 8007602:	61bb      	str	r3, [r7, #24]
      break;
 8007604:	e002      	b.n	800760c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007606:	4b07      	ldr	r3, [pc, #28]	; (8007624 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007608:	61bb      	str	r3, [r7, #24]
      break;
 800760a:	bf00      	nop
  }

  return sysclockfreq;
 800760c:	69bb      	ldr	r3, [r7, #24]
}
 800760e:	4618      	mov	r0, r3
 8007610:	3724      	adds	r7, #36	; 0x24
 8007612:	46bd      	mov	sp, r7
 8007614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007618:	4770      	bx	lr
 800761a:	bf00      	nop
 800761c:	58024400 	.word	0x58024400
 8007620:	03d09000 	.word	0x03d09000
 8007624:	003d0900 	.word	0x003d0900
 8007628:	017d7840 	.word	0x017d7840
 800762c:	46000000 	.word	0x46000000
 8007630:	4c742400 	.word	0x4c742400
 8007634:	4a742400 	.word	0x4a742400
 8007638:	4bbebc20 	.word	0x4bbebc20

0800763c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b082      	sub	sp, #8
 8007640:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007642:	f7ff fe81 	bl	8007348 <HAL_RCC_GetSysClockFreq>
 8007646:	4602      	mov	r2, r0
 8007648:	4b10      	ldr	r3, [pc, #64]	; (800768c <HAL_RCC_GetHCLKFreq+0x50>)
 800764a:	699b      	ldr	r3, [r3, #24]
 800764c:	0a1b      	lsrs	r3, r3, #8
 800764e:	f003 030f 	and.w	r3, r3, #15
 8007652:	490f      	ldr	r1, [pc, #60]	; (8007690 <HAL_RCC_GetHCLKFreq+0x54>)
 8007654:	5ccb      	ldrb	r3, [r1, r3]
 8007656:	f003 031f 	and.w	r3, r3, #31
 800765a:	fa22 f303 	lsr.w	r3, r2, r3
 800765e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007660:	4b0a      	ldr	r3, [pc, #40]	; (800768c <HAL_RCC_GetHCLKFreq+0x50>)
 8007662:	699b      	ldr	r3, [r3, #24]
 8007664:	f003 030f 	and.w	r3, r3, #15
 8007668:	4a09      	ldr	r2, [pc, #36]	; (8007690 <HAL_RCC_GetHCLKFreq+0x54>)
 800766a:	5cd3      	ldrb	r3, [r2, r3]
 800766c:	f003 031f 	and.w	r3, r3, #31
 8007670:	687a      	ldr	r2, [r7, #4]
 8007672:	fa22 f303 	lsr.w	r3, r2, r3
 8007676:	4a07      	ldr	r2, [pc, #28]	; (8007694 <HAL_RCC_GetHCLKFreq+0x58>)
 8007678:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800767a:	4a07      	ldr	r2, [pc, #28]	; (8007698 <HAL_RCC_GetHCLKFreq+0x5c>)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007680:	4b04      	ldr	r3, [pc, #16]	; (8007694 <HAL_RCC_GetHCLKFreq+0x58>)
 8007682:	681b      	ldr	r3, [r3, #0]
}
 8007684:	4618      	mov	r0, r3
 8007686:	3708      	adds	r7, #8
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}
 800768c:	58024400 	.word	0x58024400
 8007690:	0800e48c 	.word	0x0800e48c
 8007694:	2400002c 	.word	0x2400002c
 8007698:	24000028 	.word	0x24000028

0800769c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80076a0:	f7ff ffcc 	bl	800763c <HAL_RCC_GetHCLKFreq>
 80076a4:	4602      	mov	r2, r0
 80076a6:	4b06      	ldr	r3, [pc, #24]	; (80076c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80076a8:	69db      	ldr	r3, [r3, #28]
 80076aa:	091b      	lsrs	r3, r3, #4
 80076ac:	f003 0307 	and.w	r3, r3, #7
 80076b0:	4904      	ldr	r1, [pc, #16]	; (80076c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80076b2:	5ccb      	ldrb	r3, [r1, r3]
 80076b4:	f003 031f 	and.w	r3, r3, #31
 80076b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80076bc:	4618      	mov	r0, r3
 80076be:	bd80      	pop	{r7, pc}
 80076c0:	58024400 	.word	0x58024400
 80076c4:	0800e48c 	.word	0x0800e48c

080076c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80076cc:	f7ff ffb6 	bl	800763c <HAL_RCC_GetHCLKFreq>
 80076d0:	4602      	mov	r2, r0
 80076d2:	4b06      	ldr	r3, [pc, #24]	; (80076ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80076d4:	69db      	ldr	r3, [r3, #28]
 80076d6:	0a1b      	lsrs	r3, r3, #8
 80076d8:	f003 0307 	and.w	r3, r3, #7
 80076dc:	4904      	ldr	r1, [pc, #16]	; (80076f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80076de:	5ccb      	ldrb	r3, [r1, r3]
 80076e0:	f003 031f 	and.w	r3, r3, #31
 80076e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	bd80      	pop	{r7, pc}
 80076ec:	58024400 	.word	0x58024400
 80076f0:	0800e48c 	.word	0x0800e48c

080076f4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80076f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80076f8:	b0ca      	sub	sp, #296	; 0x128
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007700:	2300      	movs	r3, #0
 8007702:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007706:	2300      	movs	r3, #0
 8007708:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800770c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007714:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8007718:	2500      	movs	r5, #0
 800771a:	ea54 0305 	orrs.w	r3, r4, r5
 800771e:	d049      	beq.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007720:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007724:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007726:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800772a:	d02f      	beq.n	800778c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800772c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007730:	d828      	bhi.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007732:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007736:	d01a      	beq.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007738:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800773c:	d822      	bhi.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800773e:	2b00      	cmp	r3, #0
 8007740:	d003      	beq.n	800774a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007742:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007746:	d007      	beq.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007748:	e01c      	b.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800774a:	4bb8      	ldr	r3, [pc, #736]	; (8007a2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800774c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800774e:	4ab7      	ldr	r2, [pc, #732]	; (8007a2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007750:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007754:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007756:	e01a      	b.n	800778e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007758:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800775c:	3308      	adds	r3, #8
 800775e:	2102      	movs	r1, #2
 8007760:	4618      	mov	r0, r3
 8007762:	f002 fb61 	bl	8009e28 <RCCEx_PLL2_Config>
 8007766:	4603      	mov	r3, r0
 8007768:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800776c:	e00f      	b.n	800778e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800776e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007772:	3328      	adds	r3, #40	; 0x28
 8007774:	2102      	movs	r1, #2
 8007776:	4618      	mov	r0, r3
 8007778:	f002 fc08 	bl	8009f8c <RCCEx_PLL3_Config>
 800777c:	4603      	mov	r3, r0
 800777e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007782:	e004      	b.n	800778e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007784:	2301      	movs	r3, #1
 8007786:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800778a:	e000      	b.n	800778e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800778c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800778e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007792:	2b00      	cmp	r3, #0
 8007794:	d10a      	bne.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007796:	4ba5      	ldr	r3, [pc, #660]	; (8007a2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007798:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800779a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800779e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077a4:	4aa1      	ldr	r2, [pc, #644]	; (8007a2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80077a6:	430b      	orrs	r3, r1
 80077a8:	6513      	str	r3, [r2, #80]	; 0x50
 80077aa:	e003      	b.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80077b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80077b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077bc:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80077c0:	f04f 0900 	mov.w	r9, #0
 80077c4:	ea58 0309 	orrs.w	r3, r8, r9
 80077c8:	d047      	beq.n	800785a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80077ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077d0:	2b04      	cmp	r3, #4
 80077d2:	d82a      	bhi.n	800782a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80077d4:	a201      	add	r2, pc, #4	; (adr r2, 80077dc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80077d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077da:	bf00      	nop
 80077dc:	080077f1 	.word	0x080077f1
 80077e0:	080077ff 	.word	0x080077ff
 80077e4:	08007815 	.word	0x08007815
 80077e8:	08007833 	.word	0x08007833
 80077ec:	08007833 	.word	0x08007833
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077f0:	4b8e      	ldr	r3, [pc, #568]	; (8007a2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80077f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f4:	4a8d      	ldr	r2, [pc, #564]	; (8007a2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80077f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80077fc:	e01a      	b.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80077fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007802:	3308      	adds	r3, #8
 8007804:	2100      	movs	r1, #0
 8007806:	4618      	mov	r0, r3
 8007808:	f002 fb0e 	bl	8009e28 <RCCEx_PLL2_Config>
 800780c:	4603      	mov	r3, r0
 800780e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007812:	e00f      	b.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007814:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007818:	3328      	adds	r3, #40	; 0x28
 800781a:	2100      	movs	r1, #0
 800781c:	4618      	mov	r0, r3
 800781e:	f002 fbb5 	bl	8009f8c <RCCEx_PLL3_Config>
 8007822:	4603      	mov	r3, r0
 8007824:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007828:	e004      	b.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800782a:	2301      	movs	r3, #1
 800782c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007830:	e000      	b.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007832:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007834:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007838:	2b00      	cmp	r3, #0
 800783a:	d10a      	bne.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800783c:	4b7b      	ldr	r3, [pc, #492]	; (8007a2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800783e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007840:	f023 0107 	bic.w	r1, r3, #7
 8007844:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800784a:	4a78      	ldr	r2, [pc, #480]	; (8007a2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800784c:	430b      	orrs	r3, r1
 800784e:	6513      	str	r3, [r2, #80]	; 0x50
 8007850:	e003      	b.n	800785a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007852:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007856:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800785a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800785e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007862:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8007866:	f04f 0b00 	mov.w	fp, #0
 800786a:	ea5a 030b 	orrs.w	r3, sl, fp
 800786e:	d04c      	beq.n	800790a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007870:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007876:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800787a:	d030      	beq.n	80078de <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800787c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007880:	d829      	bhi.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007882:	2bc0      	cmp	r3, #192	; 0xc0
 8007884:	d02d      	beq.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007886:	2bc0      	cmp	r3, #192	; 0xc0
 8007888:	d825      	bhi.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800788a:	2b80      	cmp	r3, #128	; 0x80
 800788c:	d018      	beq.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800788e:	2b80      	cmp	r3, #128	; 0x80
 8007890:	d821      	bhi.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007892:	2b00      	cmp	r3, #0
 8007894:	d002      	beq.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8007896:	2b40      	cmp	r3, #64	; 0x40
 8007898:	d007      	beq.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800789a:	e01c      	b.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800789c:	4b63      	ldr	r3, [pc, #396]	; (8007a2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800789e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a0:	4a62      	ldr	r2, [pc, #392]	; (8007a2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80078a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80078a8:	e01c      	b.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80078aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078ae:	3308      	adds	r3, #8
 80078b0:	2100      	movs	r1, #0
 80078b2:	4618      	mov	r0, r3
 80078b4:	f002 fab8 	bl	8009e28 <RCCEx_PLL2_Config>
 80078b8:	4603      	mov	r3, r0
 80078ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80078be:	e011      	b.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80078c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078c4:	3328      	adds	r3, #40	; 0x28
 80078c6:	2100      	movs	r1, #0
 80078c8:	4618      	mov	r0, r3
 80078ca:	f002 fb5f 	bl	8009f8c <RCCEx_PLL3_Config>
 80078ce:	4603      	mov	r3, r0
 80078d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80078d4:	e006      	b.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078d6:	2301      	movs	r3, #1
 80078d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80078dc:	e002      	b.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80078de:	bf00      	nop
 80078e0:	e000      	b.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80078e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d10a      	bne.n	8007902 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80078ec:	4b4f      	ldr	r3, [pc, #316]	; (8007a2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80078ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078f0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80078f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078fa:	4a4c      	ldr	r2, [pc, #304]	; (8007a2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80078fc:	430b      	orrs	r3, r1
 80078fe:	6513      	str	r3, [r2, #80]	; 0x50
 8007900:	e003      	b.n	800790a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007902:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007906:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800790a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800790e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007912:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8007916:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800791a:	2300      	movs	r3, #0
 800791c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007920:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8007924:	460b      	mov	r3, r1
 8007926:	4313      	orrs	r3, r2
 8007928:	d053      	beq.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800792a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800792e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007932:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007936:	d035      	beq.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007938:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800793c:	d82e      	bhi.n	800799c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800793e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007942:	d031      	beq.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007944:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007948:	d828      	bhi.n	800799c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800794a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800794e:	d01a      	beq.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007950:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007954:	d822      	bhi.n	800799c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007956:	2b00      	cmp	r3, #0
 8007958:	d003      	beq.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800795a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800795e:	d007      	beq.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007960:	e01c      	b.n	800799c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007962:	4b32      	ldr	r3, [pc, #200]	; (8007a2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007966:	4a31      	ldr	r2, [pc, #196]	; (8007a2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800796c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800796e:	e01c      	b.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007970:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007974:	3308      	adds	r3, #8
 8007976:	2100      	movs	r1, #0
 8007978:	4618      	mov	r0, r3
 800797a:	f002 fa55 	bl	8009e28 <RCCEx_PLL2_Config>
 800797e:	4603      	mov	r3, r0
 8007980:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007984:	e011      	b.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007986:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800798a:	3328      	adds	r3, #40	; 0x28
 800798c:	2100      	movs	r1, #0
 800798e:	4618      	mov	r0, r3
 8007990:	f002 fafc 	bl	8009f8c <RCCEx_PLL3_Config>
 8007994:	4603      	mov	r3, r0
 8007996:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800799a:	e006      	b.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800799c:	2301      	movs	r3, #1
 800799e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80079a2:	e002      	b.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80079a4:	bf00      	nop
 80079a6:	e000      	b.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80079a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d10b      	bne.n	80079ca <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80079b2:	4b1e      	ldr	r3, [pc, #120]	; (8007a2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80079b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079b6:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80079ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80079c2:	4a1a      	ldr	r2, [pc, #104]	; (8007a2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80079c4:	430b      	orrs	r3, r1
 80079c6:	6593      	str	r3, [r2, #88]	; 0x58
 80079c8:	e003      	b.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80079ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80079d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079da:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80079de:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80079e2:	2300      	movs	r3, #0
 80079e4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80079e8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80079ec:	460b      	mov	r3, r1
 80079ee:	4313      	orrs	r3, r2
 80079f0:	d056      	beq.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80079f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079f6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80079fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80079fe:	d038      	beq.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007a00:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007a04:	d831      	bhi.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007a06:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007a0a:	d034      	beq.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007a0c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007a10:	d82b      	bhi.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007a12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a16:	d01d      	beq.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007a18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a1c:	d825      	bhi.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d006      	beq.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007a22:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007a26:	d00a      	beq.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007a28:	e01f      	b.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007a2a:	bf00      	nop
 8007a2c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a30:	4ba2      	ldr	r3, [pc, #648]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a34:	4aa1      	ldr	r2, [pc, #644]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007a36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a3a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007a3c:	e01c      	b.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a42:	3308      	adds	r3, #8
 8007a44:	2100      	movs	r1, #0
 8007a46:	4618      	mov	r0, r3
 8007a48:	f002 f9ee 	bl	8009e28 <RCCEx_PLL2_Config>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007a52:	e011      	b.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007a54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a58:	3328      	adds	r3, #40	; 0x28
 8007a5a:	2100      	movs	r1, #0
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f002 fa95 	bl	8009f8c <RCCEx_PLL3_Config>
 8007a62:	4603      	mov	r3, r0
 8007a64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007a68:	e006      	b.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007a70:	e002      	b.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007a72:	bf00      	nop
 8007a74:	e000      	b.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007a76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a78:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d10b      	bne.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007a80:	4b8e      	ldr	r3, [pc, #568]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a84:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8007a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a8c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007a90:	4a8a      	ldr	r2, [pc, #552]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007a92:	430b      	orrs	r3, r1
 8007a94:	6593      	str	r3, [r2, #88]	; 0x58
 8007a96:	e003      	b.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a98:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a9c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8007aac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007ab6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8007aba:	460b      	mov	r3, r1
 8007abc:	4313      	orrs	r3, r2
 8007abe:	d03a      	beq.n	8007b36 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ac6:	2b30      	cmp	r3, #48	; 0x30
 8007ac8:	d01f      	beq.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007aca:	2b30      	cmp	r3, #48	; 0x30
 8007acc:	d819      	bhi.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007ace:	2b20      	cmp	r3, #32
 8007ad0:	d00c      	beq.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007ad2:	2b20      	cmp	r3, #32
 8007ad4:	d815      	bhi.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d019      	beq.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007ada:	2b10      	cmp	r3, #16
 8007adc:	d111      	bne.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ade:	4b77      	ldr	r3, [pc, #476]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae2:	4a76      	ldr	r2, [pc, #472]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ae8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007aea:	e011      	b.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007af0:	3308      	adds	r3, #8
 8007af2:	2102      	movs	r1, #2
 8007af4:	4618      	mov	r0, r3
 8007af6:	f002 f997 	bl	8009e28 <RCCEx_PLL2_Config>
 8007afa:	4603      	mov	r3, r0
 8007afc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007b00:	e006      	b.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007b02:	2301      	movs	r3, #1
 8007b04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007b08:	e002      	b.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007b0a:	bf00      	nop
 8007b0c:	e000      	b.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007b0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d10a      	bne.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007b18:	4b68      	ldr	r3, [pc, #416]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b1c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8007b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b26:	4a65      	ldr	r2, [pc, #404]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007b28:	430b      	orrs	r3, r1
 8007b2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007b2c:	e003      	b.n	8007b36 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b32:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b3e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8007b42:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007b46:	2300      	movs	r3, #0
 8007b48:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007b4c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8007b50:	460b      	mov	r3, r1
 8007b52:	4313      	orrs	r3, r2
 8007b54:	d051      	beq.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b60:	d035      	beq.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007b62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b66:	d82e      	bhi.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007b68:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007b6c:	d031      	beq.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007b6e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007b72:	d828      	bhi.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007b74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b78:	d01a      	beq.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007b7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b7e:	d822      	bhi.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d003      	beq.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007b84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b88:	d007      	beq.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007b8a:	e01c      	b.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b8c:	4b4b      	ldr	r3, [pc, #300]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b90:	4a4a      	ldr	r2, [pc, #296]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007b92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007b98:	e01c      	b.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b9e:	3308      	adds	r3, #8
 8007ba0:	2100      	movs	r1, #0
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f002 f940 	bl	8009e28 <RCCEx_PLL2_Config>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007bae:	e011      	b.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007bb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bb4:	3328      	adds	r3, #40	; 0x28
 8007bb6:	2100      	movs	r1, #0
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f002 f9e7 	bl	8009f8c <RCCEx_PLL3_Config>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007bc4:	e006      	b.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007bcc:	e002      	b.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007bce:	bf00      	nop
 8007bd0:	e000      	b.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007bd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bd4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d10a      	bne.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007bdc:	4b37      	ldr	r3, [pc, #220]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007bde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007be0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8007be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bea:	4a34      	ldr	r2, [pc, #208]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007bec:	430b      	orrs	r3, r1
 8007bee:	6513      	str	r3, [r2, #80]	; 0x50
 8007bf0:	e003      	b.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bf2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007bf6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c02:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8007c06:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007c10:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8007c14:	460b      	mov	r3, r1
 8007c16:	4313      	orrs	r3, r2
 8007c18:	d056      	beq.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007c24:	d033      	beq.n	8007c8e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007c26:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007c2a:	d82c      	bhi.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007c2c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007c30:	d02f      	beq.n	8007c92 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007c32:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007c36:	d826      	bhi.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007c38:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007c3c:	d02b      	beq.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007c3e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007c42:	d820      	bhi.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007c44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c48:	d012      	beq.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007c4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c4e:	d81a      	bhi.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d022      	beq.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c58:	d115      	bne.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c5e:	3308      	adds	r3, #8
 8007c60:	2101      	movs	r1, #1
 8007c62:	4618      	mov	r0, r3
 8007c64:	f002 f8e0 	bl	8009e28 <RCCEx_PLL2_Config>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007c6e:	e015      	b.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c74:	3328      	adds	r3, #40	; 0x28
 8007c76:	2101      	movs	r1, #1
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f002 f987 	bl	8009f8c <RCCEx_PLL3_Config>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007c84:	e00a      	b.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c86:	2301      	movs	r3, #1
 8007c88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007c8c:	e006      	b.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007c8e:	bf00      	nop
 8007c90:	e004      	b.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007c92:	bf00      	nop
 8007c94:	e002      	b.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007c96:	bf00      	nop
 8007c98:	e000      	b.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007c9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c9c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d10d      	bne.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007ca4:	4b05      	ldr	r3, [pc, #20]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ca6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ca8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8007cac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007cb2:	4a02      	ldr	r2, [pc, #8]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007cb4:	430b      	orrs	r3, r1
 8007cb6:	6513      	str	r3, [r2, #80]	; 0x50
 8007cb8:	e006      	b.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007cba:	bf00      	nop
 8007cbc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cc0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007cc4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007cc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd0:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8007cd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007cd8:	2300      	movs	r3, #0
 8007cda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007cde:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8007ce2:	460b      	mov	r3, r1
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	d055      	beq.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007cf0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007cf4:	d033      	beq.n	8007d5e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007cf6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007cfa:	d82c      	bhi.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d00:	d02f      	beq.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007d02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d06:	d826      	bhi.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007d08:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007d0c:	d02b      	beq.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007d0e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007d12:	d820      	bhi.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007d14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d18:	d012      	beq.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007d1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d1e:	d81a      	bhi.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d022      	beq.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007d24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d28:	d115      	bne.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d2e:	3308      	adds	r3, #8
 8007d30:	2101      	movs	r1, #1
 8007d32:	4618      	mov	r0, r3
 8007d34:	f002 f878 	bl	8009e28 <RCCEx_PLL2_Config>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007d3e:	e015      	b.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007d40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d44:	3328      	adds	r3, #40	; 0x28
 8007d46:	2101      	movs	r1, #1
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f002 f91f 	bl	8009f8c <RCCEx_PLL3_Config>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007d54:	e00a      	b.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007d56:	2301      	movs	r3, #1
 8007d58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007d5c:	e006      	b.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007d5e:	bf00      	nop
 8007d60:	e004      	b.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007d62:	bf00      	nop
 8007d64:	e002      	b.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007d66:	bf00      	nop
 8007d68:	e000      	b.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007d6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d10b      	bne.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007d74:	4ba3      	ldr	r3, [pc, #652]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d78:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007d7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d80:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007d84:	4a9f      	ldr	r2, [pc, #636]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d86:	430b      	orrs	r3, r1
 8007d88:	6593      	str	r3, [r2, #88]	; 0x58
 8007d8a:	e003      	b.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d90:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d9c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8007da0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007da4:	2300      	movs	r3, #0
 8007da6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007daa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007dae:	460b      	mov	r3, r1
 8007db0:	4313      	orrs	r3, r2
 8007db2:	d037      	beq.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007dbe:	d00e      	beq.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007dc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007dc4:	d816      	bhi.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d018      	beq.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007dca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007dce:	d111      	bne.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007dd0:	4b8c      	ldr	r3, [pc, #560]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dd4:	4a8b      	ldr	r2, [pc, #556]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007dd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007dda:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007ddc:	e00f      	b.n	8007dfe <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007de2:	3308      	adds	r3, #8
 8007de4:	2101      	movs	r1, #1
 8007de6:	4618      	mov	r0, r3
 8007de8:	f002 f81e 	bl	8009e28 <RCCEx_PLL2_Config>
 8007dec:	4603      	mov	r3, r0
 8007dee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007df2:	e004      	b.n	8007dfe <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007df4:	2301      	movs	r3, #1
 8007df6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007dfa:	e000      	b.n	8007dfe <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007dfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007dfe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d10a      	bne.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007e06:	4b7f      	ldr	r3, [pc, #508]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e0a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e14:	4a7b      	ldr	r2, [pc, #492]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e16:	430b      	orrs	r3, r1
 8007e18:	6513      	str	r3, [r2, #80]	; 0x50
 8007e1a:	e003      	b.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e1c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e20:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007e24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e2c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8007e30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007e34:	2300      	movs	r3, #0
 8007e36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007e3a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8007e3e:	460b      	mov	r3, r1
 8007e40:	4313      	orrs	r3, r2
 8007e42:	d039      	beq.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e4a:	2b03      	cmp	r3, #3
 8007e4c:	d81c      	bhi.n	8007e88 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007e4e:	a201      	add	r2, pc, #4	; (adr r2, 8007e54 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e54:	08007e91 	.word	0x08007e91
 8007e58:	08007e65 	.word	0x08007e65
 8007e5c:	08007e73 	.word	0x08007e73
 8007e60:	08007e91 	.word	0x08007e91
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e64:	4b67      	ldr	r3, [pc, #412]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e68:	4a66      	ldr	r2, [pc, #408]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007e70:	e00f      	b.n	8007e92 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e76:	3308      	adds	r3, #8
 8007e78:	2102      	movs	r1, #2
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f001 ffd4 	bl	8009e28 <RCCEx_PLL2_Config>
 8007e80:	4603      	mov	r3, r0
 8007e82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007e86:	e004      	b.n	8007e92 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007e8e:	e000      	b.n	8007e92 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007e90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d10a      	bne.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007e9a:	4b5a      	ldr	r3, [pc, #360]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e9e:	f023 0103 	bic.w	r1, r3, #3
 8007ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ea6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ea8:	4a56      	ldr	r2, [pc, #344]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007eaa:	430b      	orrs	r3, r1
 8007eac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007eae:	e003      	b.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007eb0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007eb4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8007ec4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007ec8:	2300      	movs	r3, #0
 8007eca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007ece:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8007ed2:	460b      	mov	r3, r1
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	f000 809f 	beq.w	8008018 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007eda:	4b4b      	ldr	r3, [pc, #300]	; (8008008 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4a4a      	ldr	r2, [pc, #296]	; (8008008 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007ee0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ee4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007ee6:	f7fa ff2b 	bl	8002d40 <HAL_GetTick>
 8007eea:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007eee:	e00b      	b.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ef0:	f7fa ff26 	bl	8002d40 <HAL_GetTick>
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007efa:	1ad3      	subs	r3, r2, r3
 8007efc:	2b64      	cmp	r3, #100	; 0x64
 8007efe:	d903      	bls.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007f00:	2303      	movs	r3, #3
 8007f02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007f06:	e005      	b.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007f08:	4b3f      	ldr	r3, [pc, #252]	; (8008008 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d0ed      	beq.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007f14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d179      	bne.n	8008010 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007f1c:	4b39      	ldr	r3, [pc, #228]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f1e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007f20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f24:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007f28:	4053      	eors	r3, r2
 8007f2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d015      	beq.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007f32:	4b34      	ldr	r3, [pc, #208]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f3a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007f3e:	4b31      	ldr	r3, [pc, #196]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f42:	4a30      	ldr	r2, [pc, #192]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f48:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007f4a:	4b2e      	ldr	r3, [pc, #184]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f4e:	4a2d      	ldr	r2, [pc, #180]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f54:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007f56:	4a2b      	ldr	r2, [pc, #172]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f58:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007f5c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f62:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007f66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f6a:	d118      	bne.n	8007f9e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f6c:	f7fa fee8 	bl	8002d40 <HAL_GetTick>
 8007f70:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007f74:	e00d      	b.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f76:	f7fa fee3 	bl	8002d40 <HAL_GetTick>
 8007f7a:	4602      	mov	r2, r0
 8007f7c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007f80:	1ad2      	subs	r2, r2, r3
 8007f82:	f241 3388 	movw	r3, #5000	; 0x1388
 8007f86:	429a      	cmp	r2, r3
 8007f88:	d903      	bls.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8007f8a:	2303      	movs	r3, #3
 8007f8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8007f90:	e005      	b.n	8007f9e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007f92:	4b1c      	ldr	r3, [pc, #112]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f96:	f003 0302 	and.w	r3, r3, #2
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d0eb      	beq.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8007f9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d129      	bne.n	8007ffa <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007faa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007fae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007fb6:	d10e      	bne.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007fb8:	4b12      	ldr	r3, [pc, #72]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007fba:	691b      	ldr	r3, [r3, #16]
 8007fbc:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8007fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fc4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007fc8:	091a      	lsrs	r2, r3, #4
 8007fca:	4b10      	ldr	r3, [pc, #64]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007fcc:	4013      	ands	r3, r2
 8007fce:	4a0d      	ldr	r2, [pc, #52]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007fd0:	430b      	orrs	r3, r1
 8007fd2:	6113      	str	r3, [r2, #16]
 8007fd4:	e005      	b.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007fd6:	4b0b      	ldr	r3, [pc, #44]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007fd8:	691b      	ldr	r3, [r3, #16]
 8007fda:	4a0a      	ldr	r2, [pc, #40]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007fdc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007fe0:	6113      	str	r3, [r2, #16]
 8007fe2:	4b08      	ldr	r3, [pc, #32]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007fe4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8007fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007fee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ff2:	4a04      	ldr	r2, [pc, #16]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ff4:	430b      	orrs	r3, r1
 8007ff6:	6713      	str	r3, [r2, #112]	; 0x70
 8007ff8:	e00e      	b.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007ffa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ffe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8008002:	e009      	b.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008004:	58024400 	.word	0x58024400
 8008008:	58024800 	.word	0x58024800
 800800c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008010:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008014:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008018:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800801c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008020:	f002 0301 	and.w	r3, r2, #1
 8008024:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008028:	2300      	movs	r3, #0
 800802a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800802e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008032:	460b      	mov	r3, r1
 8008034:	4313      	orrs	r3, r2
 8008036:	f000 8089 	beq.w	800814c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800803a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800803e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008040:	2b28      	cmp	r3, #40	; 0x28
 8008042:	d86b      	bhi.n	800811c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8008044:	a201      	add	r2, pc, #4	; (adr r2, 800804c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800804a:	bf00      	nop
 800804c:	08008125 	.word	0x08008125
 8008050:	0800811d 	.word	0x0800811d
 8008054:	0800811d 	.word	0x0800811d
 8008058:	0800811d 	.word	0x0800811d
 800805c:	0800811d 	.word	0x0800811d
 8008060:	0800811d 	.word	0x0800811d
 8008064:	0800811d 	.word	0x0800811d
 8008068:	0800811d 	.word	0x0800811d
 800806c:	080080f1 	.word	0x080080f1
 8008070:	0800811d 	.word	0x0800811d
 8008074:	0800811d 	.word	0x0800811d
 8008078:	0800811d 	.word	0x0800811d
 800807c:	0800811d 	.word	0x0800811d
 8008080:	0800811d 	.word	0x0800811d
 8008084:	0800811d 	.word	0x0800811d
 8008088:	0800811d 	.word	0x0800811d
 800808c:	08008107 	.word	0x08008107
 8008090:	0800811d 	.word	0x0800811d
 8008094:	0800811d 	.word	0x0800811d
 8008098:	0800811d 	.word	0x0800811d
 800809c:	0800811d 	.word	0x0800811d
 80080a0:	0800811d 	.word	0x0800811d
 80080a4:	0800811d 	.word	0x0800811d
 80080a8:	0800811d 	.word	0x0800811d
 80080ac:	08008125 	.word	0x08008125
 80080b0:	0800811d 	.word	0x0800811d
 80080b4:	0800811d 	.word	0x0800811d
 80080b8:	0800811d 	.word	0x0800811d
 80080bc:	0800811d 	.word	0x0800811d
 80080c0:	0800811d 	.word	0x0800811d
 80080c4:	0800811d 	.word	0x0800811d
 80080c8:	0800811d 	.word	0x0800811d
 80080cc:	08008125 	.word	0x08008125
 80080d0:	0800811d 	.word	0x0800811d
 80080d4:	0800811d 	.word	0x0800811d
 80080d8:	0800811d 	.word	0x0800811d
 80080dc:	0800811d 	.word	0x0800811d
 80080e0:	0800811d 	.word	0x0800811d
 80080e4:	0800811d 	.word	0x0800811d
 80080e8:	0800811d 	.word	0x0800811d
 80080ec:	08008125 	.word	0x08008125
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80080f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080f4:	3308      	adds	r3, #8
 80080f6:	2101      	movs	r1, #1
 80080f8:	4618      	mov	r0, r3
 80080fa:	f001 fe95 	bl	8009e28 <RCCEx_PLL2_Config>
 80080fe:	4603      	mov	r3, r0
 8008100:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008104:	e00f      	b.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008106:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800810a:	3328      	adds	r3, #40	; 0x28
 800810c:	2101      	movs	r1, #1
 800810e:	4618      	mov	r0, r3
 8008110:	f001 ff3c 	bl	8009f8c <RCCEx_PLL3_Config>
 8008114:	4603      	mov	r3, r0
 8008116:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800811a:	e004      	b.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800811c:	2301      	movs	r3, #1
 800811e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008122:	e000      	b.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8008124:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008126:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800812a:	2b00      	cmp	r3, #0
 800812c:	d10a      	bne.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800812e:	4bbf      	ldr	r3, [pc, #764]	; (800842c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008132:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8008136:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800813a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800813c:	4abb      	ldr	r2, [pc, #748]	; (800842c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800813e:	430b      	orrs	r3, r1
 8008140:	6553      	str	r3, [r2, #84]	; 0x54
 8008142:	e003      	b.n	800814c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008144:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008148:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800814c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008154:	f002 0302 	and.w	r3, r2, #2
 8008158:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800815c:	2300      	movs	r3, #0
 800815e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008162:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8008166:	460b      	mov	r3, r1
 8008168:	4313      	orrs	r3, r2
 800816a:	d041      	beq.n	80081f0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800816c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008170:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008172:	2b05      	cmp	r3, #5
 8008174:	d824      	bhi.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8008176:	a201      	add	r2, pc, #4	; (adr r2, 800817c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8008178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800817c:	080081c9 	.word	0x080081c9
 8008180:	08008195 	.word	0x08008195
 8008184:	080081ab 	.word	0x080081ab
 8008188:	080081c9 	.word	0x080081c9
 800818c:	080081c9 	.word	0x080081c9
 8008190:	080081c9 	.word	0x080081c9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008194:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008198:	3308      	adds	r3, #8
 800819a:	2101      	movs	r1, #1
 800819c:	4618      	mov	r0, r3
 800819e:	f001 fe43 	bl	8009e28 <RCCEx_PLL2_Config>
 80081a2:	4603      	mov	r3, r0
 80081a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80081a8:	e00f      	b.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80081aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081ae:	3328      	adds	r3, #40	; 0x28
 80081b0:	2101      	movs	r1, #1
 80081b2:	4618      	mov	r0, r3
 80081b4:	f001 feea 	bl	8009f8c <RCCEx_PLL3_Config>
 80081b8:	4603      	mov	r3, r0
 80081ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80081be:	e004      	b.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80081c0:	2301      	movs	r3, #1
 80081c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80081c6:	e000      	b.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80081c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d10a      	bne.n	80081e8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80081d2:	4b96      	ldr	r3, [pc, #600]	; (800842c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80081d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081d6:	f023 0107 	bic.w	r1, r3, #7
 80081da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80081e0:	4a92      	ldr	r2, [pc, #584]	; (800842c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80081e2:	430b      	orrs	r3, r1
 80081e4:	6553      	str	r3, [r2, #84]	; 0x54
 80081e6:	e003      	b.n	80081f0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80081ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80081f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f8:	f002 0304 	and.w	r3, r2, #4
 80081fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008200:	2300      	movs	r3, #0
 8008202:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008206:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800820a:	460b      	mov	r3, r1
 800820c:	4313      	orrs	r3, r2
 800820e:	d044      	beq.n	800829a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008210:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008214:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008218:	2b05      	cmp	r3, #5
 800821a:	d825      	bhi.n	8008268 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800821c:	a201      	add	r2, pc, #4	; (adr r2, 8008224 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800821e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008222:	bf00      	nop
 8008224:	08008271 	.word	0x08008271
 8008228:	0800823d 	.word	0x0800823d
 800822c:	08008253 	.word	0x08008253
 8008230:	08008271 	.word	0x08008271
 8008234:	08008271 	.word	0x08008271
 8008238:	08008271 	.word	0x08008271
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800823c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008240:	3308      	adds	r3, #8
 8008242:	2101      	movs	r1, #1
 8008244:	4618      	mov	r0, r3
 8008246:	f001 fdef 	bl	8009e28 <RCCEx_PLL2_Config>
 800824a:	4603      	mov	r3, r0
 800824c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008250:	e00f      	b.n	8008272 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008252:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008256:	3328      	adds	r3, #40	; 0x28
 8008258:	2101      	movs	r1, #1
 800825a:	4618      	mov	r0, r3
 800825c:	f001 fe96 	bl	8009f8c <RCCEx_PLL3_Config>
 8008260:	4603      	mov	r3, r0
 8008262:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008266:	e004      	b.n	8008272 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008268:	2301      	movs	r3, #1
 800826a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800826e:	e000      	b.n	8008272 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8008270:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008272:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008276:	2b00      	cmp	r3, #0
 8008278:	d10b      	bne.n	8008292 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800827a:	4b6c      	ldr	r3, [pc, #432]	; (800842c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800827c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800827e:	f023 0107 	bic.w	r1, r3, #7
 8008282:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008286:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800828a:	4a68      	ldr	r2, [pc, #416]	; (800842c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800828c:	430b      	orrs	r3, r1
 800828e:	6593      	str	r3, [r2, #88]	; 0x58
 8008290:	e003      	b.n	800829a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008292:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008296:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800829a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800829e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a2:	f002 0320 	and.w	r3, r2, #32
 80082a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80082aa:	2300      	movs	r3, #0
 80082ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80082b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80082b4:	460b      	mov	r3, r1
 80082b6:	4313      	orrs	r3, r2
 80082b8:	d055      	beq.n	8008366 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80082ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80082c6:	d033      	beq.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80082c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80082cc:	d82c      	bhi.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80082ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082d2:	d02f      	beq.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80082d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082d8:	d826      	bhi.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80082da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80082de:	d02b      	beq.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80082e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80082e4:	d820      	bhi.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80082e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082ea:	d012      	beq.n	8008312 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80082ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082f0:	d81a      	bhi.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d022      	beq.n	800833c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80082f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80082fa:	d115      	bne.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80082fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008300:	3308      	adds	r3, #8
 8008302:	2100      	movs	r1, #0
 8008304:	4618      	mov	r0, r3
 8008306:	f001 fd8f 	bl	8009e28 <RCCEx_PLL2_Config>
 800830a:	4603      	mov	r3, r0
 800830c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008310:	e015      	b.n	800833e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008312:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008316:	3328      	adds	r3, #40	; 0x28
 8008318:	2102      	movs	r1, #2
 800831a:	4618      	mov	r0, r3
 800831c:	f001 fe36 	bl	8009f8c <RCCEx_PLL3_Config>
 8008320:	4603      	mov	r3, r0
 8008322:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008326:	e00a      	b.n	800833e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008328:	2301      	movs	r3, #1
 800832a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800832e:	e006      	b.n	800833e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008330:	bf00      	nop
 8008332:	e004      	b.n	800833e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008334:	bf00      	nop
 8008336:	e002      	b.n	800833e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008338:	bf00      	nop
 800833a:	e000      	b.n	800833e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800833c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800833e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008342:	2b00      	cmp	r3, #0
 8008344:	d10b      	bne.n	800835e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008346:	4b39      	ldr	r3, [pc, #228]	; (800842c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800834a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800834e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008356:	4a35      	ldr	r2, [pc, #212]	; (800842c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008358:	430b      	orrs	r3, r1
 800835a:	6553      	str	r3, [r2, #84]	; 0x54
 800835c:	e003      	b.n	8008366 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800835e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008362:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008366:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800836a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800836e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8008372:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008376:	2300      	movs	r3, #0
 8008378:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800837c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8008380:	460b      	mov	r3, r1
 8008382:	4313      	orrs	r3, r2
 8008384:	d058      	beq.n	8008438 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008386:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800838a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800838e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008392:	d033      	beq.n	80083fc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8008394:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008398:	d82c      	bhi.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800839a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800839e:	d02f      	beq.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80083a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083a4:	d826      	bhi.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80083a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80083aa:	d02b      	beq.n	8008404 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80083ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80083b0:	d820      	bhi.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80083b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083b6:	d012      	beq.n	80083de <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80083b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083bc:	d81a      	bhi.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d022      	beq.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80083c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083c6:	d115      	bne.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80083c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083cc:	3308      	adds	r3, #8
 80083ce:	2100      	movs	r1, #0
 80083d0:	4618      	mov	r0, r3
 80083d2:	f001 fd29 	bl	8009e28 <RCCEx_PLL2_Config>
 80083d6:	4603      	mov	r3, r0
 80083d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80083dc:	e015      	b.n	800840a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80083de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083e2:	3328      	adds	r3, #40	; 0x28
 80083e4:	2102      	movs	r1, #2
 80083e6:	4618      	mov	r0, r3
 80083e8:	f001 fdd0 	bl	8009f8c <RCCEx_PLL3_Config>
 80083ec:	4603      	mov	r3, r0
 80083ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80083f2:	e00a      	b.n	800840a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80083f4:	2301      	movs	r3, #1
 80083f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80083fa:	e006      	b.n	800840a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80083fc:	bf00      	nop
 80083fe:	e004      	b.n	800840a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008400:	bf00      	nop
 8008402:	e002      	b.n	800840a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008404:	bf00      	nop
 8008406:	e000      	b.n	800840a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008408:	bf00      	nop
    }

    if (ret == HAL_OK)
 800840a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800840e:	2b00      	cmp	r3, #0
 8008410:	d10e      	bne.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008412:	4b06      	ldr	r3, [pc, #24]	; (800842c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008416:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800841a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800841e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008422:	4a02      	ldr	r2, [pc, #8]	; (800842c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008424:	430b      	orrs	r3, r1
 8008426:	6593      	str	r3, [r2, #88]	; 0x58
 8008428:	e006      	b.n	8008438 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800842a:	bf00      	nop
 800842c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008430:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008434:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008438:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800843c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008440:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8008444:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008448:	2300      	movs	r3, #0
 800844a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800844e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8008452:	460b      	mov	r3, r1
 8008454:	4313      	orrs	r3, r2
 8008456:	d055      	beq.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008458:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800845c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008460:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008464:	d033      	beq.n	80084ce <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8008466:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800846a:	d82c      	bhi.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800846c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008470:	d02f      	beq.n	80084d2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8008472:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008476:	d826      	bhi.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008478:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800847c:	d02b      	beq.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800847e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008482:	d820      	bhi.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008484:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008488:	d012      	beq.n	80084b0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800848a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800848e:	d81a      	bhi.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008490:	2b00      	cmp	r3, #0
 8008492:	d022      	beq.n	80084da <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8008494:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008498:	d115      	bne.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800849a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800849e:	3308      	adds	r3, #8
 80084a0:	2100      	movs	r1, #0
 80084a2:	4618      	mov	r0, r3
 80084a4:	f001 fcc0 	bl	8009e28 <RCCEx_PLL2_Config>
 80084a8:	4603      	mov	r3, r0
 80084aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80084ae:	e015      	b.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80084b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084b4:	3328      	adds	r3, #40	; 0x28
 80084b6:	2102      	movs	r1, #2
 80084b8:	4618      	mov	r0, r3
 80084ba:	f001 fd67 	bl	8009f8c <RCCEx_PLL3_Config>
 80084be:	4603      	mov	r3, r0
 80084c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80084c4:	e00a      	b.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80084c6:	2301      	movs	r3, #1
 80084c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80084cc:	e006      	b.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80084ce:	bf00      	nop
 80084d0:	e004      	b.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80084d2:	bf00      	nop
 80084d4:	e002      	b.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80084d6:	bf00      	nop
 80084d8:	e000      	b.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80084da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d10b      	bne.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80084e4:	4ba1      	ldr	r3, [pc, #644]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80084e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084e8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80084ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80084f4:	4a9d      	ldr	r2, [pc, #628]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80084f6:	430b      	orrs	r3, r1
 80084f8:	6593      	str	r3, [r2, #88]	; 0x58
 80084fa:	e003      	b.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008500:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008504:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800850c:	f002 0308 	and.w	r3, r2, #8
 8008510:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008514:	2300      	movs	r3, #0
 8008516:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800851a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800851e:	460b      	mov	r3, r1
 8008520:	4313      	orrs	r3, r2
 8008522:	d01e      	beq.n	8008562 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008524:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008528:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800852c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008530:	d10c      	bne.n	800854c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008532:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008536:	3328      	adds	r3, #40	; 0x28
 8008538:	2102      	movs	r1, #2
 800853a:	4618      	mov	r0, r3
 800853c:	f001 fd26 	bl	8009f8c <RCCEx_PLL3_Config>
 8008540:	4603      	mov	r3, r0
 8008542:	2b00      	cmp	r3, #0
 8008544:	d002      	beq.n	800854c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8008546:	2301      	movs	r3, #1
 8008548:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800854c:	4b87      	ldr	r3, [pc, #540]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800854e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008550:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008554:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008558:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800855c:	4a83      	ldr	r2, [pc, #524]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800855e:	430b      	orrs	r3, r1
 8008560:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008562:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800856a:	f002 0310 	and.w	r3, r2, #16
 800856e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008572:	2300      	movs	r3, #0
 8008574:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008578:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800857c:	460b      	mov	r3, r1
 800857e:	4313      	orrs	r3, r2
 8008580:	d01e      	beq.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008582:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008586:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800858a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800858e:	d10c      	bne.n	80085aa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008590:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008594:	3328      	adds	r3, #40	; 0x28
 8008596:	2102      	movs	r1, #2
 8008598:	4618      	mov	r0, r3
 800859a:	f001 fcf7 	bl	8009f8c <RCCEx_PLL3_Config>
 800859e:	4603      	mov	r3, r0
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d002      	beq.n	80085aa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80085a4:	2301      	movs	r3, #1
 80085a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80085aa:	4b70      	ldr	r3, [pc, #448]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80085ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085ae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80085b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80085ba:	4a6c      	ldr	r2, [pc, #432]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80085bc:	430b      	orrs	r3, r1
 80085be:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80085c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80085cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80085d0:	2300      	movs	r3, #0
 80085d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80085d6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80085da:	460b      	mov	r3, r1
 80085dc:	4313      	orrs	r3, r2
 80085de:	d03e      	beq.n	800865e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80085e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80085e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80085ec:	d022      	beq.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80085ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80085f2:	d81b      	bhi.n	800862c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d003      	beq.n	8008600 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80085f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085fc:	d00b      	beq.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80085fe:	e015      	b.n	800862c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008600:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008604:	3308      	adds	r3, #8
 8008606:	2100      	movs	r1, #0
 8008608:	4618      	mov	r0, r3
 800860a:	f001 fc0d 	bl	8009e28 <RCCEx_PLL2_Config>
 800860e:	4603      	mov	r3, r0
 8008610:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008614:	e00f      	b.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008616:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800861a:	3328      	adds	r3, #40	; 0x28
 800861c:	2102      	movs	r1, #2
 800861e:	4618      	mov	r0, r3
 8008620:	f001 fcb4 	bl	8009f8c <RCCEx_PLL3_Config>
 8008624:	4603      	mov	r3, r0
 8008626:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800862a:	e004      	b.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800862c:	2301      	movs	r3, #1
 800862e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008632:	e000      	b.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8008634:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008636:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800863a:	2b00      	cmp	r3, #0
 800863c:	d10b      	bne.n	8008656 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800863e:	4b4b      	ldr	r3, [pc, #300]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008642:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8008646:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800864a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800864e:	4a47      	ldr	r2, [pc, #284]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008650:	430b      	orrs	r3, r1
 8008652:	6593      	str	r3, [r2, #88]	; 0x58
 8008654:	e003      	b.n	800865e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008656:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800865a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800865e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008666:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800866a:	67bb      	str	r3, [r7, #120]	; 0x78
 800866c:	2300      	movs	r3, #0
 800866e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008670:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8008674:	460b      	mov	r3, r1
 8008676:	4313      	orrs	r3, r2
 8008678:	d03b      	beq.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800867a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800867e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008682:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008686:	d01f      	beq.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008688:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800868c:	d818      	bhi.n	80086c0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800868e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008692:	d003      	beq.n	800869c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8008694:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008698:	d007      	beq.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800869a:	e011      	b.n	80086c0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800869c:	4b33      	ldr	r3, [pc, #204]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800869e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086a0:	4a32      	ldr	r2, [pc, #200]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80086a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80086a8:	e00f      	b.n	80086ca <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80086aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086ae:	3328      	adds	r3, #40	; 0x28
 80086b0:	2101      	movs	r1, #1
 80086b2:	4618      	mov	r0, r3
 80086b4:	f001 fc6a 	bl	8009f8c <RCCEx_PLL3_Config>
 80086b8:	4603      	mov	r3, r0
 80086ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80086be:	e004      	b.n	80086ca <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80086c0:	2301      	movs	r3, #1
 80086c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80086c6:	e000      	b.n	80086ca <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80086c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80086ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d10b      	bne.n	80086ea <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80086d2:	4b26      	ldr	r3, [pc, #152]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80086d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086d6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80086da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086e2:	4a22      	ldr	r2, [pc, #136]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80086e4:	430b      	orrs	r3, r1
 80086e6:	6553      	str	r3, [r2, #84]	; 0x54
 80086e8:	e003      	b.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80086ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80086f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086fa:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80086fe:	673b      	str	r3, [r7, #112]	; 0x70
 8008700:	2300      	movs	r3, #0
 8008702:	677b      	str	r3, [r7, #116]	; 0x74
 8008704:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8008708:	460b      	mov	r3, r1
 800870a:	4313      	orrs	r3, r2
 800870c:	d034      	beq.n	8008778 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800870e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008714:	2b00      	cmp	r3, #0
 8008716:	d003      	beq.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008718:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800871c:	d007      	beq.n	800872e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800871e:	e011      	b.n	8008744 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008720:	4b12      	ldr	r3, [pc, #72]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008724:	4a11      	ldr	r2, [pc, #68]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008726:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800872a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800872c:	e00e      	b.n	800874c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800872e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008732:	3308      	adds	r3, #8
 8008734:	2102      	movs	r1, #2
 8008736:	4618      	mov	r0, r3
 8008738:	f001 fb76 	bl	8009e28 <RCCEx_PLL2_Config>
 800873c:	4603      	mov	r3, r0
 800873e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008742:	e003      	b.n	800874c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8008744:	2301      	movs	r3, #1
 8008746:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800874a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800874c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008750:	2b00      	cmp	r3, #0
 8008752:	d10d      	bne.n	8008770 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008754:	4b05      	ldr	r3, [pc, #20]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008756:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008758:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800875c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008762:	4a02      	ldr	r2, [pc, #8]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008764:	430b      	orrs	r3, r1
 8008766:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008768:	e006      	b.n	8008778 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800876a:	bf00      	nop
 800876c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008770:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008774:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008778:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800877c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008780:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8008784:	66bb      	str	r3, [r7, #104]	; 0x68
 8008786:	2300      	movs	r3, #0
 8008788:	66fb      	str	r3, [r7, #108]	; 0x6c
 800878a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800878e:	460b      	mov	r3, r1
 8008790:	4313      	orrs	r3, r2
 8008792:	d00c      	beq.n	80087ae <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008794:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008798:	3328      	adds	r3, #40	; 0x28
 800879a:	2102      	movs	r1, #2
 800879c:	4618      	mov	r0, r3
 800879e:	f001 fbf5 	bl	8009f8c <RCCEx_PLL3_Config>
 80087a2:	4603      	mov	r3, r0
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d002      	beq.n	80087ae <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80087a8:	2301      	movs	r3, #1
 80087aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80087ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80087ba:	663b      	str	r3, [r7, #96]	; 0x60
 80087bc:	2300      	movs	r3, #0
 80087be:	667b      	str	r3, [r7, #100]	; 0x64
 80087c0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80087c4:	460b      	mov	r3, r1
 80087c6:	4313      	orrs	r3, r2
 80087c8:	d038      	beq.n	800883c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80087ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80087d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80087d6:	d018      	beq.n	800880a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80087d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80087dc:	d811      	bhi.n	8008802 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80087de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087e2:	d014      	beq.n	800880e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80087e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087e8:	d80b      	bhi.n	8008802 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d011      	beq.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80087ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087f2:	d106      	bne.n	8008802 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087f4:	4bc3      	ldr	r3, [pc, #780]	; (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80087f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087f8:	4ac2      	ldr	r2, [pc, #776]	; (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80087fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008800:	e008      	b.n	8008814 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008802:	2301      	movs	r3, #1
 8008804:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008808:	e004      	b.n	8008814 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800880a:	bf00      	nop
 800880c:	e002      	b.n	8008814 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800880e:	bf00      	nop
 8008810:	e000      	b.n	8008814 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008812:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008814:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008818:	2b00      	cmp	r3, #0
 800881a:	d10b      	bne.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800881c:	4bb9      	ldr	r3, [pc, #740]	; (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800881e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008820:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008824:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008828:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800882c:	4ab5      	ldr	r2, [pc, #724]	; (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800882e:	430b      	orrs	r3, r1
 8008830:	6553      	str	r3, [r2, #84]	; 0x54
 8008832:	e003      	b.n	800883c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008834:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008838:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800883c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008844:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8008848:	65bb      	str	r3, [r7, #88]	; 0x58
 800884a:	2300      	movs	r3, #0
 800884c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800884e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8008852:	460b      	mov	r3, r1
 8008854:	4313      	orrs	r3, r2
 8008856:	d009      	beq.n	800886c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008858:	4baa      	ldr	r3, [pc, #680]	; (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800885a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800885c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008860:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008864:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008866:	4aa7      	ldr	r2, [pc, #668]	; (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008868:	430b      	orrs	r3, r1
 800886a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800886c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008874:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8008878:	653b      	str	r3, [r7, #80]	; 0x50
 800887a:	2300      	movs	r3, #0
 800887c:	657b      	str	r3, [r7, #84]	; 0x54
 800887e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8008882:	460b      	mov	r3, r1
 8008884:	4313      	orrs	r3, r2
 8008886:	d00a      	beq.n	800889e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008888:	4b9e      	ldr	r3, [pc, #632]	; (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800888a:	691b      	ldr	r3, [r3, #16]
 800888c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8008890:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008894:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008898:	4a9a      	ldr	r2, [pc, #616]	; (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800889a:	430b      	orrs	r3, r1
 800889c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800889e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a6:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80088aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80088ac:	2300      	movs	r3, #0
 80088ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80088b0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80088b4:	460b      	mov	r3, r1
 80088b6:	4313      	orrs	r3, r2
 80088b8:	d009      	beq.n	80088ce <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80088ba:	4b92      	ldr	r3, [pc, #584]	; (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80088bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088be:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80088c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088c8:	4a8e      	ldr	r2, [pc, #568]	; (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80088ca:	430b      	orrs	r3, r1
 80088cc:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80088ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d6:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80088da:	643b      	str	r3, [r7, #64]	; 0x40
 80088dc:	2300      	movs	r3, #0
 80088de:	647b      	str	r3, [r7, #68]	; 0x44
 80088e0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80088e4:	460b      	mov	r3, r1
 80088e6:	4313      	orrs	r3, r2
 80088e8:	d00e      	beq.n	8008908 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80088ea:	4b86      	ldr	r3, [pc, #536]	; (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80088ec:	691b      	ldr	r3, [r3, #16]
 80088ee:	4a85      	ldr	r2, [pc, #532]	; (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80088f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80088f4:	6113      	str	r3, [r2, #16]
 80088f6:	4b83      	ldr	r3, [pc, #524]	; (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80088f8:	6919      	ldr	r1, [r3, #16]
 80088fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088fe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008902:	4a80      	ldr	r2, [pc, #512]	; (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008904:	430b      	orrs	r3, r1
 8008906:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008908:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800890c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008910:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8008914:	63bb      	str	r3, [r7, #56]	; 0x38
 8008916:	2300      	movs	r3, #0
 8008918:	63fb      	str	r3, [r7, #60]	; 0x3c
 800891a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800891e:	460b      	mov	r3, r1
 8008920:	4313      	orrs	r3, r2
 8008922:	d009      	beq.n	8008938 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008924:	4b77      	ldr	r3, [pc, #476]	; (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008926:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008928:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800892c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008932:	4a74      	ldr	r2, [pc, #464]	; (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008934:	430b      	orrs	r3, r1
 8008936:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008938:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800893c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008940:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8008944:	633b      	str	r3, [r7, #48]	; 0x30
 8008946:	2300      	movs	r3, #0
 8008948:	637b      	str	r3, [r7, #52]	; 0x34
 800894a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800894e:	460b      	mov	r3, r1
 8008950:	4313      	orrs	r3, r2
 8008952:	d00a      	beq.n	800896a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008954:	4b6b      	ldr	r3, [pc, #428]	; (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008958:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800895c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008960:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008964:	4a67      	ldr	r2, [pc, #412]	; (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008966:	430b      	orrs	r3, r1
 8008968:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800896a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800896e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008972:	2100      	movs	r1, #0
 8008974:	62b9      	str	r1, [r7, #40]	; 0x28
 8008976:	f003 0301 	and.w	r3, r3, #1
 800897a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800897c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8008980:	460b      	mov	r3, r1
 8008982:	4313      	orrs	r3, r2
 8008984:	d011      	beq.n	80089aa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008986:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800898a:	3308      	adds	r3, #8
 800898c:	2100      	movs	r1, #0
 800898e:	4618      	mov	r0, r3
 8008990:	f001 fa4a 	bl	8009e28 <RCCEx_PLL2_Config>
 8008994:	4603      	mov	r3, r0
 8008996:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800899a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d003      	beq.n	80089aa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80089a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80089aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089b2:	2100      	movs	r1, #0
 80089b4:	6239      	str	r1, [r7, #32]
 80089b6:	f003 0302 	and.w	r3, r3, #2
 80089ba:	627b      	str	r3, [r7, #36]	; 0x24
 80089bc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80089c0:	460b      	mov	r3, r1
 80089c2:	4313      	orrs	r3, r2
 80089c4:	d011      	beq.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80089c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089ca:	3308      	adds	r3, #8
 80089cc:	2101      	movs	r1, #1
 80089ce:	4618      	mov	r0, r3
 80089d0:	f001 fa2a 	bl	8009e28 <RCCEx_PLL2_Config>
 80089d4:	4603      	mov	r3, r0
 80089d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80089da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d003      	beq.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80089e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80089ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f2:	2100      	movs	r1, #0
 80089f4:	61b9      	str	r1, [r7, #24]
 80089f6:	f003 0304 	and.w	r3, r3, #4
 80089fa:	61fb      	str	r3, [r7, #28]
 80089fc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008a00:	460b      	mov	r3, r1
 8008a02:	4313      	orrs	r3, r2
 8008a04:	d011      	beq.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a0a:	3308      	adds	r3, #8
 8008a0c:	2102      	movs	r1, #2
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f001 fa0a 	bl	8009e28 <RCCEx_PLL2_Config>
 8008a14:	4603      	mov	r3, r0
 8008a16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008a1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d003      	beq.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a26:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a32:	2100      	movs	r1, #0
 8008a34:	6139      	str	r1, [r7, #16]
 8008a36:	f003 0308 	and.w	r3, r3, #8
 8008a3a:	617b      	str	r3, [r7, #20]
 8008a3c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008a40:	460b      	mov	r3, r1
 8008a42:	4313      	orrs	r3, r2
 8008a44:	d011      	beq.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a4a:	3328      	adds	r3, #40	; 0x28
 8008a4c:	2100      	movs	r1, #0
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f001 fa9c 	bl	8009f8c <RCCEx_PLL3_Config>
 8008a54:	4603      	mov	r3, r0
 8008a56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8008a5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d003      	beq.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a66:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a72:	2100      	movs	r1, #0
 8008a74:	60b9      	str	r1, [r7, #8]
 8008a76:	f003 0310 	and.w	r3, r3, #16
 8008a7a:	60fb      	str	r3, [r7, #12]
 8008a7c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008a80:	460b      	mov	r3, r1
 8008a82:	4313      	orrs	r3, r2
 8008a84:	d011      	beq.n	8008aaa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a8a:	3328      	adds	r3, #40	; 0x28
 8008a8c:	2101      	movs	r1, #1
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f001 fa7c 	bl	8009f8c <RCCEx_PLL3_Config>
 8008a94:	4603      	mov	r3, r0
 8008a96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008a9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d003      	beq.n	8008aaa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008aa2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008aa6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab2:	2100      	movs	r1, #0
 8008ab4:	6039      	str	r1, [r7, #0]
 8008ab6:	f003 0320 	and.w	r3, r3, #32
 8008aba:	607b      	str	r3, [r7, #4]
 8008abc:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008ac0:	460b      	mov	r3, r1
 8008ac2:	4313      	orrs	r3, r2
 8008ac4:	d011      	beq.n	8008aea <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008aca:	3328      	adds	r3, #40	; 0x28
 8008acc:	2102      	movs	r1, #2
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f001 fa5c 	bl	8009f8c <RCCEx_PLL3_Config>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008ada:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d003      	beq.n	8008aea <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ae2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008ae6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8008aea:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d101      	bne.n	8008af6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8008af2:	2300      	movs	r3, #0
 8008af4:	e000      	b.n	8008af8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008af6:	2301      	movs	r3, #1
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8008afe:	46bd      	mov	sp, r7
 8008b00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008b04:	58024400 	.word	0x58024400

08008b08 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b090      	sub	sp, #64	; 0x40
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008b12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b16:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8008b1a:	430b      	orrs	r3, r1
 8008b1c:	f040 8094 	bne.w	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008b20:	4b9e      	ldr	r3, [pc, #632]	; (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008b22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b24:	f003 0307 	and.w	r3, r3, #7
 8008b28:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b2c:	2b04      	cmp	r3, #4
 8008b2e:	f200 8087 	bhi.w	8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008b32:	a201      	add	r2, pc, #4	; (adr r2, 8008b38 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b38:	08008b4d 	.word	0x08008b4d
 8008b3c:	08008b75 	.word	0x08008b75
 8008b40:	08008b9d 	.word	0x08008b9d
 8008b44:	08008c39 	.word	0x08008c39
 8008b48:	08008bc5 	.word	0x08008bc5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008b4c:	4b93      	ldr	r3, [pc, #588]	; (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b58:	d108      	bne.n	8008b6c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f001 f810 	bl	8009b84 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b66:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b68:	f000 bd45 	b.w	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b70:	f000 bd41 	b.w	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b74:	4b89      	ldr	r3, [pc, #548]	; (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b80:	d108      	bne.n	8008b94 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b82:	f107 0318 	add.w	r3, r7, #24
 8008b86:	4618      	mov	r0, r3
 8008b88:	f000 fd54 	bl	8009634 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008b8c:	69bb      	ldr	r3, [r7, #24]
 8008b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b90:	f000 bd31 	b.w	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b94:	2300      	movs	r3, #0
 8008b96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b98:	f000 bd2d 	b.w	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008b9c:	4b7f      	ldr	r3, [pc, #508]	; (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ba4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ba8:	d108      	bne.n	8008bbc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008baa:	f107 030c 	add.w	r3, r7, #12
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f000 fe94 	bl	80098dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bb8:	f000 bd1d 	b.w	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008bc0:	f000 bd19 	b.w	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008bc4:	4b75      	ldr	r3, [pc, #468]	; (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008bc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bc8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008bcc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008bce:	4b73      	ldr	r3, [pc, #460]	; (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f003 0304 	and.w	r3, r3, #4
 8008bd6:	2b04      	cmp	r3, #4
 8008bd8:	d10c      	bne.n	8008bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d109      	bne.n	8008bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008be0:	4b6e      	ldr	r3, [pc, #440]	; (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	08db      	lsrs	r3, r3, #3
 8008be6:	f003 0303 	and.w	r3, r3, #3
 8008bea:	4a6d      	ldr	r2, [pc, #436]	; (8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008bec:	fa22 f303 	lsr.w	r3, r2, r3
 8008bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008bf2:	e01f      	b.n	8008c34 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008bf4:	4b69      	ldr	r3, [pc, #420]	; (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c00:	d106      	bne.n	8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8008c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c08:	d102      	bne.n	8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008c0a:	4b66      	ldr	r3, [pc, #408]	; (8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c0e:	e011      	b.n	8008c34 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008c10:	4b62      	ldr	r3, [pc, #392]	; (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c1c:	d106      	bne.n	8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c24:	d102      	bne.n	8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008c26:	4b60      	ldr	r3, [pc, #384]	; (8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008c28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c2a:	e003      	b.n	8008c34 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008c30:	f000 bce1 	b.w	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008c34:	f000 bcdf 	b.w	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008c38:	4b5c      	ldr	r3, [pc, #368]	; (8008dac <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c3c:	f000 bcdb 	b.w	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008c40:	2300      	movs	r3, #0
 8008c42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c44:	f000 bcd7 	b.w	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008c48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c4c:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8008c50:	430b      	orrs	r3, r1
 8008c52:	f040 80ad 	bne.w	8008db0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8008c56:	4b51      	ldr	r3, [pc, #324]	; (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008c58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c5a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8008c5e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c66:	d056      	beq.n	8008d16 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8008c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c6e:	f200 8090 	bhi.w	8008d92 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c74:	2bc0      	cmp	r3, #192	; 0xc0
 8008c76:	f000 8088 	beq.w	8008d8a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8008c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c7c:	2bc0      	cmp	r3, #192	; 0xc0
 8008c7e:	f200 8088 	bhi.w	8008d92 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c84:	2b80      	cmp	r3, #128	; 0x80
 8008c86:	d032      	beq.n	8008cee <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8008c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c8a:	2b80      	cmp	r3, #128	; 0x80
 8008c8c:	f200 8081 	bhi.w	8008d92 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d003      	beq.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8008c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c98:	2b40      	cmp	r3, #64	; 0x40
 8008c9a:	d014      	beq.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8008c9c:	e079      	b.n	8008d92 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008c9e:	4b3f      	ldr	r3, [pc, #252]	; (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ca6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008caa:	d108      	bne.n	8008cbe <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008cac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f000 ff67 	bl	8009b84 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008cba:	f000 bc9c 	b.w	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008cc2:	f000 bc98 	b.w	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008cc6:	4b35      	ldr	r3, [pc, #212]	; (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008cce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008cd2:	d108      	bne.n	8008ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008cd4:	f107 0318 	add.w	r3, r7, #24
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f000 fcab 	bl	8009634 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008cde:	69bb      	ldr	r3, [r7, #24]
 8008ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ce2:	f000 bc88 	b.w	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008cea:	f000 bc84 	b.w	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008cee:	4b2b      	ldr	r3, [pc, #172]	; (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008cf6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008cfa:	d108      	bne.n	8008d0e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008cfc:	f107 030c 	add.w	r3, r7, #12
 8008d00:	4618      	mov	r0, r3
 8008d02:	f000 fdeb 	bl	80098dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d0a:	f000 bc74 	b.w	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d12:	f000 bc70 	b.w	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008d16:	4b21      	ldr	r3, [pc, #132]	; (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d1a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008d1e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008d20:	4b1e      	ldr	r3, [pc, #120]	; (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f003 0304 	and.w	r3, r3, #4
 8008d28:	2b04      	cmp	r3, #4
 8008d2a:	d10c      	bne.n	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8008d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d109      	bne.n	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d32:	4b1a      	ldr	r3, [pc, #104]	; (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	08db      	lsrs	r3, r3, #3
 8008d38:	f003 0303 	and.w	r3, r3, #3
 8008d3c:	4a18      	ldr	r2, [pc, #96]	; (8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8008d42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d44:	e01f      	b.n	8008d86 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008d46:	4b15      	ldr	r3, [pc, #84]	; (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d52:	d106      	bne.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8008d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d5a:	d102      	bne.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008d5c:	4b11      	ldr	r3, [pc, #68]	; (8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d60:	e011      	b.n	8008d86 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008d62:	4b0e      	ldr	r3, [pc, #56]	; (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d6e:	d106      	bne.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8008d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d76:	d102      	bne.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008d78:	4b0b      	ldr	r3, [pc, #44]	; (8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d7c:	e003      	b.n	8008d86 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008d82:	f000 bc38 	b.w	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008d86:	f000 bc36 	b.w	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008d8a:	4b08      	ldr	r3, [pc, #32]	; (8008dac <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d8e:	f000 bc32 	b.w	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008d92:	2300      	movs	r3, #0
 8008d94:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d96:	f000 bc2e 	b.w	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008d9a:	bf00      	nop
 8008d9c:	58024400 	.word	0x58024400
 8008da0:	03d09000 	.word	0x03d09000
 8008da4:	003d0900 	.word	0x003d0900
 8008da8:	017d7840 	.word	0x017d7840
 8008dac:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008db0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008db4:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8008db8:	430b      	orrs	r3, r1
 8008dba:	f040 809c 	bne.w	8008ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8008dbe:	4b9e      	ldr	r3, [pc, #632]	; (8009038 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dc2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8008dc6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008dce:	d054      	beq.n	8008e7a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8008dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008dd6:	f200 808b 	bhi.w	8008ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ddc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008de0:	f000 8083 	beq.w	8008eea <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8008de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008de6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008dea:	f200 8081 	bhi.w	8008ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008df4:	d02f      	beq.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8008df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008dfc:	d878      	bhi.n	8008ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d004      	beq.n	8008e0e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8008e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e0a:	d012      	beq.n	8008e32 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8008e0c:	e070      	b.n	8008ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008e0e:	4b8a      	ldr	r3, [pc, #552]	; (8009038 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e16:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e1a:	d107      	bne.n	8008e2c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e20:	4618      	mov	r0, r3
 8008e22:	f000 feaf 	bl	8009b84 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e28:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e2a:	e3e4      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e30:	e3e1      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e32:	4b81      	ldr	r3, [pc, #516]	; (8009038 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e3e:	d107      	bne.n	8008e50 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e40:	f107 0318 	add.w	r3, r7, #24
 8008e44:	4618      	mov	r0, r3
 8008e46:	f000 fbf5 	bl	8009634 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008e4a:	69bb      	ldr	r3, [r7, #24]
 8008e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e4e:	e3d2      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e50:	2300      	movs	r3, #0
 8008e52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e54:	e3cf      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008e56:	4b78      	ldr	r3, [pc, #480]	; (8009038 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e62:	d107      	bne.n	8008e74 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e64:	f107 030c 	add.w	r3, r7, #12
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f000 fd37 	bl	80098dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e72:	e3c0      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e74:	2300      	movs	r3, #0
 8008e76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e78:	e3bd      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008e7a:	4b6f      	ldr	r3, [pc, #444]	; (8009038 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e7e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008e82:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008e84:	4b6c      	ldr	r3, [pc, #432]	; (8009038 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f003 0304 	and.w	r3, r3, #4
 8008e8c:	2b04      	cmp	r3, #4
 8008e8e:	d10c      	bne.n	8008eaa <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8008e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d109      	bne.n	8008eaa <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008e96:	4b68      	ldr	r3, [pc, #416]	; (8009038 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	08db      	lsrs	r3, r3, #3
 8008e9c:	f003 0303 	and.w	r3, r3, #3
 8008ea0:	4a66      	ldr	r2, [pc, #408]	; (800903c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008ea2:	fa22 f303 	lsr.w	r3, r2, r3
 8008ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ea8:	e01e      	b.n	8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008eaa:	4b63      	ldr	r3, [pc, #396]	; (8009038 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008eb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008eb6:	d106      	bne.n	8008ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8008eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ebe:	d102      	bne.n	8008ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008ec0:	4b5f      	ldr	r3, [pc, #380]	; (8009040 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ec4:	e010      	b.n	8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008ec6:	4b5c      	ldr	r3, [pc, #368]	; (8009038 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ece:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ed2:	d106      	bne.n	8008ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8008ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ed6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008eda:	d102      	bne.n	8008ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008edc:	4b59      	ldr	r3, [pc, #356]	; (8009044 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008ede:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ee0:	e002      	b.n	8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008ee6:	e386      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008ee8:	e385      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008eea:	4b57      	ldr	r3, [pc, #348]	; (8009048 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008eec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008eee:	e382      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ef4:	e37f      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008ef6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008efa:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8008efe:	430b      	orrs	r3, r1
 8008f00:	f040 80a7 	bne.w	8009052 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008f04:	4b4c      	ldr	r3, [pc, #304]	; (8009038 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f08:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008f0c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f10:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008f14:	d055      	beq.n	8008fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8008f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008f1c:	f200 8096 	bhi.w	800904c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f22:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008f26:	f000 8084 	beq.w	8009032 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8008f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f2c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008f30:	f200 808c 	bhi.w	800904c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f3a:	d030      	beq.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8008f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f42:	f200 8083 	bhi.w	800904c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d004      	beq.n	8008f56 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8008f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f4e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008f52:	d012      	beq.n	8008f7a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8008f54:	e07a      	b.n	800904c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008f56:	4b38      	ldr	r3, [pc, #224]	; (8009038 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f62:	d107      	bne.n	8008f74 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008f64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f000 fe0b 	bl	8009b84 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f70:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f72:	e340      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f74:	2300      	movs	r3, #0
 8008f76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f78:	e33d      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008f7a:	4b2f      	ldr	r3, [pc, #188]	; (8009038 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008f86:	d107      	bne.n	8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f88:	f107 0318 	add.w	r3, r7, #24
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	f000 fb51 	bl	8009634 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008f92:	69bb      	ldr	r3, [r7, #24]
 8008f94:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f96:	e32e      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f9c:	e32b      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008f9e:	4b26      	ldr	r3, [pc, #152]	; (8009038 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008fa6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008faa:	d107      	bne.n	8008fbc <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008fac:	f107 030c 	add.w	r3, r7, #12
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f000 fc93 	bl	80098dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fba:	e31c      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008fc0:	e319      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008fc2:	4b1d      	ldr	r3, [pc, #116]	; (8009038 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fc6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008fca:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008fcc:	4b1a      	ldr	r3, [pc, #104]	; (8009038 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f003 0304 	and.w	r3, r3, #4
 8008fd4:	2b04      	cmp	r3, #4
 8008fd6:	d10c      	bne.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8008fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d109      	bne.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008fde:	4b16      	ldr	r3, [pc, #88]	; (8009038 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	08db      	lsrs	r3, r3, #3
 8008fe4:	f003 0303 	and.w	r3, r3, #3
 8008fe8:	4a14      	ldr	r2, [pc, #80]	; (800903c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008fea:	fa22 f303 	lsr.w	r3, r2, r3
 8008fee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ff0:	e01e      	b.n	8009030 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008ff2:	4b11      	ldr	r3, [pc, #68]	; (8009038 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ffa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ffe:	d106      	bne.n	800900e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8009000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009002:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009006:	d102      	bne.n	800900e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009008:	4b0d      	ldr	r3, [pc, #52]	; (8009040 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800900a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800900c:	e010      	b.n	8009030 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800900e:	4b0a      	ldr	r3, [pc, #40]	; (8009038 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009016:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800901a:	d106      	bne.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800901c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800901e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009022:	d102      	bne.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009024:	4b07      	ldr	r3, [pc, #28]	; (8009044 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8009026:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009028:	e002      	b.n	8009030 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800902a:	2300      	movs	r3, #0
 800902c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800902e:	e2e2      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009030:	e2e1      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009032:	4b05      	ldr	r3, [pc, #20]	; (8009048 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009034:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009036:	e2de      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009038:	58024400 	.word	0x58024400
 800903c:	03d09000 	.word	0x03d09000
 8009040:	003d0900 	.word	0x003d0900
 8009044:	017d7840 	.word	0x017d7840
 8009048:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800904c:	2300      	movs	r3, #0
 800904e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009050:	e2d1      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009052:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009056:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800905a:	430b      	orrs	r3, r1
 800905c:	f040 809c 	bne.w	8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8009060:	4b93      	ldr	r3, [pc, #588]	; (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009062:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009064:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8009068:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800906a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800906c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009070:	d054      	beq.n	800911c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8009072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009074:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009078:	f200 808b 	bhi.w	8009192 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800907c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800907e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009082:	f000 8083 	beq.w	800918c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8009086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009088:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800908c:	f200 8081 	bhi.w	8009192 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009092:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009096:	d02f      	beq.n	80090f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8009098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800909a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800909e:	d878      	bhi.n	8009192 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80090a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d004      	beq.n	80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80090a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090ac:	d012      	beq.n	80090d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80090ae:	e070      	b.n	8009192 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80090b0:	4b7f      	ldr	r3, [pc, #508]	; (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80090bc:	d107      	bne.n	80090ce <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80090be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80090c2:	4618      	mov	r0, r3
 80090c4:	f000 fd5e 	bl	8009b84 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80090c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80090cc:	e293      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80090ce:	2300      	movs	r3, #0
 80090d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80090d2:	e290      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80090d4:	4b76      	ldr	r3, [pc, #472]	; (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80090dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80090e0:	d107      	bne.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090e2:	f107 0318 	add.w	r3, r7, #24
 80090e6:	4618      	mov	r0, r3
 80090e8:	f000 faa4 	bl	8009634 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80090ec:	69bb      	ldr	r3, [r7, #24]
 80090ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80090f0:	e281      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80090f2:	2300      	movs	r3, #0
 80090f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80090f6:	e27e      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80090f8:	4b6d      	ldr	r3, [pc, #436]	; (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009100:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009104:	d107      	bne.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009106:	f107 030c 	add.w	r3, r7, #12
 800910a:	4618      	mov	r0, r3
 800910c:	f000 fbe6 	bl	80098dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009114:	e26f      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009116:	2300      	movs	r3, #0
 8009118:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800911a:	e26c      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800911c:	4b64      	ldr	r3, [pc, #400]	; (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800911e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009120:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009124:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009126:	4b62      	ldr	r3, [pc, #392]	; (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f003 0304 	and.w	r3, r3, #4
 800912e:	2b04      	cmp	r3, #4
 8009130:	d10c      	bne.n	800914c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8009132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009134:	2b00      	cmp	r3, #0
 8009136:	d109      	bne.n	800914c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009138:	4b5d      	ldr	r3, [pc, #372]	; (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	08db      	lsrs	r3, r3, #3
 800913e:	f003 0303 	and.w	r3, r3, #3
 8009142:	4a5c      	ldr	r2, [pc, #368]	; (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8009144:	fa22 f303 	lsr.w	r3, r2, r3
 8009148:	63fb      	str	r3, [r7, #60]	; 0x3c
 800914a:	e01e      	b.n	800918a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800914c:	4b58      	ldr	r3, [pc, #352]	; (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009154:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009158:	d106      	bne.n	8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800915a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800915c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009160:	d102      	bne.n	8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009162:	4b55      	ldr	r3, [pc, #340]	; (80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009164:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009166:	e010      	b.n	800918a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009168:	4b51      	ldr	r3, [pc, #324]	; (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009170:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009174:	d106      	bne.n	8009184 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8009176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009178:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800917c:	d102      	bne.n	8009184 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800917e:	4b4f      	ldr	r3, [pc, #316]	; (80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009180:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009182:	e002      	b.n	800918a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009184:	2300      	movs	r3, #0
 8009186:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009188:	e235      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800918a:	e234      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800918c:	4b4c      	ldr	r3, [pc, #304]	; (80092c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800918e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009190:	e231      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009192:	2300      	movs	r3, #0
 8009194:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009196:	e22e      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8009198:	e9d7 2300 	ldrd	r2, r3, [r7]
 800919c:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80091a0:	430b      	orrs	r3, r1
 80091a2:	f040 808f 	bne.w	80092c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80091a6:	4b42      	ldr	r3, [pc, #264]	; (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80091a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091aa:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80091ae:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 80091b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80091b6:	d06b      	beq.n	8009290 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80091b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80091be:	d874      	bhi.n	80092aa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80091c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091c2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80091c6:	d056      	beq.n	8009276 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80091c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80091ce:	d86c      	bhi.n	80092aa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80091d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091d2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80091d6:	d03b      	beq.n	8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80091d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091da:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80091de:	d864      	bhi.n	80092aa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80091e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80091e6:	d021      	beq.n	800922c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80091e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80091ee:	d85c      	bhi.n	80092aa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80091f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d004      	beq.n	8009200 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80091f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091fc:	d004      	beq.n	8009208 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80091fe:	e054      	b.n	80092aa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8009200:	f7fe fa4c 	bl	800769c <HAL_RCC_GetPCLK1Freq>
 8009204:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009206:	e1f6      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009208:	4b29      	ldr	r3, [pc, #164]	; (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009210:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009214:	d107      	bne.n	8009226 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009216:	f107 0318 	add.w	r3, r7, #24
 800921a:	4618      	mov	r0, r3
 800921c:	f000 fa0a 	bl	8009634 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009220:	69fb      	ldr	r3, [r7, #28]
 8009222:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009224:	e1e7      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009226:	2300      	movs	r3, #0
 8009228:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800922a:	e1e4      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800922c:	4b20      	ldr	r3, [pc, #128]	; (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009234:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009238:	d107      	bne.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800923a:	f107 030c 	add.w	r3, r7, #12
 800923e:	4618      	mov	r0, r3
 8009240:	f000 fb4c 	bl	80098dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009248:	e1d5      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800924a:	2300      	movs	r3, #0
 800924c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800924e:	e1d2      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009250:	4b17      	ldr	r3, [pc, #92]	; (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f003 0304 	and.w	r3, r3, #4
 8009258:	2b04      	cmp	r3, #4
 800925a:	d109      	bne.n	8009270 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800925c:	4b14      	ldr	r3, [pc, #80]	; (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	08db      	lsrs	r3, r3, #3
 8009262:	f003 0303 	and.w	r3, r3, #3
 8009266:	4a13      	ldr	r2, [pc, #76]	; (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8009268:	fa22 f303 	lsr.w	r3, r2, r3
 800926c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800926e:	e1c2      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009270:	2300      	movs	r3, #0
 8009272:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009274:	e1bf      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009276:	4b0e      	ldr	r3, [pc, #56]	; (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800927e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009282:	d102      	bne.n	800928a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8009284:	4b0c      	ldr	r3, [pc, #48]	; (80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009286:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009288:	e1b5      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800928a:	2300      	movs	r3, #0
 800928c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800928e:	e1b2      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009290:	4b07      	ldr	r3, [pc, #28]	; (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009298:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800929c:	d102      	bne.n	80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800929e:	4b07      	ldr	r3, [pc, #28]	; (80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80092a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092a2:	e1a8      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80092a4:	2300      	movs	r3, #0
 80092a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092a8:	e1a5      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80092aa:	2300      	movs	r3, #0
 80092ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092ae:	e1a2      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80092b0:	58024400 	.word	0x58024400
 80092b4:	03d09000 	.word	0x03d09000
 80092b8:	003d0900 	.word	0x003d0900
 80092bc:	017d7840 	.word	0x017d7840
 80092c0:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80092c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092c8:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 80092cc:	430b      	orrs	r3, r1
 80092ce:	d173      	bne.n	80093b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80092d0:	4b9c      	ldr	r3, [pc, #624]	; (8009544 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80092d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80092d8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80092da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80092e0:	d02f      	beq.n	8009342 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80092e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80092e8:	d863      	bhi.n	80093b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80092ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d004      	beq.n	80092fa <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80092f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80092f6:	d012      	beq.n	800931e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80092f8:	e05b      	b.n	80093b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80092fa:	4b92      	ldr	r3, [pc, #584]	; (8009544 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009302:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009306:	d107      	bne.n	8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009308:	f107 0318 	add.w	r3, r7, #24
 800930c:	4618      	mov	r0, r3
 800930e:	f000 f991 	bl	8009634 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009312:	69bb      	ldr	r3, [r7, #24]
 8009314:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009316:	e16e      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009318:	2300      	movs	r3, #0
 800931a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800931c:	e16b      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800931e:	4b89      	ldr	r3, [pc, #548]	; (8009544 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009326:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800932a:	d107      	bne.n	800933c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800932c:	f107 030c 	add.w	r3, r7, #12
 8009330:	4618      	mov	r0, r3
 8009332:	f000 fad3 	bl	80098dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800933a:	e15c      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800933c:	2300      	movs	r3, #0
 800933e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009340:	e159      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009342:	4b80      	ldr	r3, [pc, #512]	; (8009544 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009346:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800934a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800934c:	4b7d      	ldr	r3, [pc, #500]	; (8009544 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f003 0304 	and.w	r3, r3, #4
 8009354:	2b04      	cmp	r3, #4
 8009356:	d10c      	bne.n	8009372 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8009358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800935a:	2b00      	cmp	r3, #0
 800935c:	d109      	bne.n	8009372 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800935e:	4b79      	ldr	r3, [pc, #484]	; (8009544 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	08db      	lsrs	r3, r3, #3
 8009364:	f003 0303 	and.w	r3, r3, #3
 8009368:	4a77      	ldr	r2, [pc, #476]	; (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800936a:	fa22 f303 	lsr.w	r3, r2, r3
 800936e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009370:	e01e      	b.n	80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009372:	4b74      	ldr	r3, [pc, #464]	; (8009544 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800937a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800937e:	d106      	bne.n	800938e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8009380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009382:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009386:	d102      	bne.n	800938e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009388:	4b70      	ldr	r3, [pc, #448]	; (800954c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800938a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800938c:	e010      	b.n	80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800938e:	4b6d      	ldr	r3, [pc, #436]	; (8009544 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009396:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800939a:	d106      	bne.n	80093aa <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800939c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800939e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093a2:	d102      	bne.n	80093aa <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80093a4:	4b6a      	ldr	r3, [pc, #424]	; (8009550 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80093a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093a8:	e002      	b.n	80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80093aa:	2300      	movs	r3, #0
 80093ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80093ae:	e122      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80093b0:	e121      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80093b2:	2300      	movs	r3, #0
 80093b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093b6:	e11e      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80093b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093bc:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80093c0:	430b      	orrs	r3, r1
 80093c2:	d133      	bne.n	800942c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80093c4:	4b5f      	ldr	r3, [pc, #380]	; (8009544 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80093c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80093cc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80093ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d004      	beq.n	80093de <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80093d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093da:	d012      	beq.n	8009402 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 80093dc:	e023      	b.n	8009426 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80093de:	4b59      	ldr	r3, [pc, #356]	; (8009544 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80093ea:	d107      	bne.n	80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80093ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80093f0:	4618      	mov	r0, r3
 80093f2:	f000 fbc7 	bl	8009b84 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80093f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80093fa:	e0fc      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80093fc:	2300      	movs	r3, #0
 80093fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009400:	e0f9      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009402:	4b50      	ldr	r3, [pc, #320]	; (8009544 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800940a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800940e:	d107      	bne.n	8009420 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009410:	f107 0318 	add.w	r3, r7, #24
 8009414:	4618      	mov	r0, r3
 8009416:	f000 f90d 	bl	8009634 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800941a:	6a3b      	ldr	r3, [r7, #32]
 800941c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800941e:	e0ea      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009420:	2300      	movs	r3, #0
 8009422:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009424:	e0e7      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009426:	2300      	movs	r3, #0
 8009428:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800942a:	e0e4      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800942c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009430:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8009434:	430b      	orrs	r3, r1
 8009436:	f040 808d 	bne.w	8009554 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800943a:	4b42      	ldr	r3, [pc, #264]	; (8009544 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800943c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800943e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8009442:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009446:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800944a:	d06b      	beq.n	8009524 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800944c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800944e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009452:	d874      	bhi.n	800953e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009456:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800945a:	d056      	beq.n	800950a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800945c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800945e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009462:	d86c      	bhi.n	800953e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009466:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800946a:	d03b      	beq.n	80094e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800946c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800946e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009472:	d864      	bhi.n	800953e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009476:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800947a:	d021      	beq.n	80094c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800947c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800947e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009482:	d85c      	bhi.n	800953e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009486:	2b00      	cmp	r3, #0
 8009488:	d004      	beq.n	8009494 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800948a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800948c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009490:	d004      	beq.n	800949c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8009492:	e054      	b.n	800953e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009494:	f000 f8b8 	bl	8009608 <HAL_RCCEx_GetD3PCLK1Freq>
 8009498:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800949a:	e0ac      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800949c:	4b29      	ldr	r3, [pc, #164]	; (8009544 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80094a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80094a8:	d107      	bne.n	80094ba <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80094aa:	f107 0318 	add.w	r3, r7, #24
 80094ae:	4618      	mov	r0, r3
 80094b0:	f000 f8c0 	bl	8009634 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80094b4:	69fb      	ldr	r3, [r7, #28]
 80094b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094b8:	e09d      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80094ba:	2300      	movs	r3, #0
 80094bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80094be:	e09a      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80094c0:	4b20      	ldr	r3, [pc, #128]	; (8009544 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80094c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094cc:	d107      	bne.n	80094de <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80094ce:	f107 030c 	add.w	r3, r7, #12
 80094d2:	4618      	mov	r0, r3
 80094d4:	f000 fa02 	bl	80098dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80094d8:	693b      	ldr	r3, [r7, #16]
 80094da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094dc:	e08b      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80094de:	2300      	movs	r3, #0
 80094e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80094e2:	e088      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80094e4:	4b17      	ldr	r3, [pc, #92]	; (8009544 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f003 0304 	and.w	r3, r3, #4
 80094ec:	2b04      	cmp	r3, #4
 80094ee:	d109      	bne.n	8009504 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80094f0:	4b14      	ldr	r3, [pc, #80]	; (8009544 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	08db      	lsrs	r3, r3, #3
 80094f6:	f003 0303 	and.w	r3, r3, #3
 80094fa:	4a13      	ldr	r2, [pc, #76]	; (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80094fc:	fa22 f303 	lsr.w	r3, r2, r3
 8009500:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009502:	e078      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009504:	2300      	movs	r3, #0
 8009506:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009508:	e075      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800950a:	4b0e      	ldr	r3, [pc, #56]	; (8009544 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009512:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009516:	d102      	bne.n	800951e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8009518:	4b0c      	ldr	r3, [pc, #48]	; (800954c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800951a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800951c:	e06b      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800951e:	2300      	movs	r3, #0
 8009520:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009522:	e068      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009524:	4b07      	ldr	r3, [pc, #28]	; (8009544 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800952c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009530:	d102      	bne.n	8009538 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8009532:	4b07      	ldr	r3, [pc, #28]	; (8009550 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009534:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009536:	e05e      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009538:	2300      	movs	r3, #0
 800953a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800953c:	e05b      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800953e:	2300      	movs	r3, #0
 8009540:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009542:	e058      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009544:	58024400 	.word	0x58024400
 8009548:	03d09000 	.word	0x03d09000
 800954c:	003d0900 	.word	0x003d0900
 8009550:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009554:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009558:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800955c:	430b      	orrs	r3, r1
 800955e:	d148      	bne.n	80095f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009560:	4b27      	ldr	r3, [pc, #156]	; (8009600 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009562:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009564:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009568:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800956a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800956c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009570:	d02a      	beq.n	80095c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8009572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009574:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009578:	d838      	bhi.n	80095ec <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800957a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800957c:	2b00      	cmp	r3, #0
 800957e:	d004      	beq.n	800958a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8009580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009582:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009586:	d00d      	beq.n	80095a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8009588:	e030      	b.n	80095ec <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800958a:	4b1d      	ldr	r3, [pc, #116]	; (8009600 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009592:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009596:	d102      	bne.n	800959e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8009598:	4b1a      	ldr	r3, [pc, #104]	; (8009604 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800959a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800959c:	e02b      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800959e:	2300      	movs	r3, #0
 80095a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095a2:	e028      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80095a4:	4b16      	ldr	r3, [pc, #88]	; (8009600 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80095b0:	d107      	bne.n	80095c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80095b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80095b6:	4618      	mov	r0, r3
 80095b8:	f000 fae4 	bl	8009b84 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80095bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095c0:	e019      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80095c2:	2300      	movs	r3, #0
 80095c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095c6:	e016      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80095c8:	4b0d      	ldr	r3, [pc, #52]	; (8009600 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80095d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80095d4:	d107      	bne.n	80095e6 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095d6:	f107 0318 	add.w	r3, r7, #24
 80095da:	4618      	mov	r0, r3
 80095dc:	f000 f82a 	bl	8009634 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80095e0:	69fb      	ldr	r3, [r7, #28]
 80095e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095e4:	e007      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80095e6:	2300      	movs	r3, #0
 80095e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095ea:	e004      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80095ec:	2300      	movs	r3, #0
 80095ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095f0:	e001      	b.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 80095f2:	2300      	movs	r3, #0
 80095f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 80095f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	3740      	adds	r7, #64	; 0x40
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd80      	pop	{r7, pc}
 8009600:	58024400 	.word	0x58024400
 8009604:	017d7840 	.word	0x017d7840

08009608 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800960c:	f7fe f816 	bl	800763c <HAL_RCC_GetHCLKFreq>
 8009610:	4602      	mov	r2, r0
 8009612:	4b06      	ldr	r3, [pc, #24]	; (800962c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009614:	6a1b      	ldr	r3, [r3, #32]
 8009616:	091b      	lsrs	r3, r3, #4
 8009618:	f003 0307 	and.w	r3, r3, #7
 800961c:	4904      	ldr	r1, [pc, #16]	; (8009630 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800961e:	5ccb      	ldrb	r3, [r1, r3]
 8009620:	f003 031f 	and.w	r3, r3, #31
 8009624:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009628:	4618      	mov	r0, r3
 800962a:	bd80      	pop	{r7, pc}
 800962c:	58024400 	.word	0x58024400
 8009630:	0800e48c 	.word	0x0800e48c

08009634 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009634:	b480      	push	{r7}
 8009636:	b089      	sub	sp, #36	; 0x24
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800963c:	4ba1      	ldr	r3, [pc, #644]	; (80098c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800963e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009640:	f003 0303 	and.w	r3, r3, #3
 8009644:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009646:	4b9f      	ldr	r3, [pc, #636]	; (80098c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800964a:	0b1b      	lsrs	r3, r3, #12
 800964c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009650:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009652:	4b9c      	ldr	r3, [pc, #624]	; (80098c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009656:	091b      	lsrs	r3, r3, #4
 8009658:	f003 0301 	and.w	r3, r3, #1
 800965c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800965e:	4b99      	ldr	r3, [pc, #612]	; (80098c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009662:	08db      	lsrs	r3, r3, #3
 8009664:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009668:	693a      	ldr	r2, [r7, #16]
 800966a:	fb02 f303 	mul.w	r3, r2, r3
 800966e:	ee07 3a90 	vmov	s15, r3
 8009672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009676:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	2b00      	cmp	r3, #0
 800967e:	f000 8111 	beq.w	80098a4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009682:	69bb      	ldr	r3, [r7, #24]
 8009684:	2b02      	cmp	r3, #2
 8009686:	f000 8083 	beq.w	8009790 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800968a:	69bb      	ldr	r3, [r7, #24]
 800968c:	2b02      	cmp	r3, #2
 800968e:	f200 80a1 	bhi.w	80097d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009692:	69bb      	ldr	r3, [r7, #24]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d003      	beq.n	80096a0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009698:	69bb      	ldr	r3, [r7, #24]
 800969a:	2b01      	cmp	r3, #1
 800969c:	d056      	beq.n	800974c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800969e:	e099      	b.n	80097d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80096a0:	4b88      	ldr	r3, [pc, #544]	; (80098c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f003 0320 	and.w	r3, r3, #32
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d02d      	beq.n	8009708 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80096ac:	4b85      	ldr	r3, [pc, #532]	; (80098c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	08db      	lsrs	r3, r3, #3
 80096b2:	f003 0303 	and.w	r3, r3, #3
 80096b6:	4a84      	ldr	r2, [pc, #528]	; (80098c8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80096b8:	fa22 f303 	lsr.w	r3, r2, r3
 80096bc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	ee07 3a90 	vmov	s15, r3
 80096c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096c8:	697b      	ldr	r3, [r7, #20]
 80096ca:	ee07 3a90 	vmov	s15, r3
 80096ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096d6:	4b7b      	ldr	r3, [pc, #492]	; (80098c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80096d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096de:	ee07 3a90 	vmov	s15, r3
 80096e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80096ea:	eddf 5a78 	vldr	s11, [pc, #480]	; 80098cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80096ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009702:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009706:	e087      	b.n	8009818 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	ee07 3a90 	vmov	s15, r3
 800970e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009712:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80098d0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800971a:	4b6a      	ldr	r3, [pc, #424]	; (80098c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800971c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800971e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009722:	ee07 3a90 	vmov	s15, r3
 8009726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800972a:	ed97 6a03 	vldr	s12, [r7, #12]
 800972e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80098cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009732:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009736:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800973a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800973e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009746:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800974a:	e065      	b.n	8009818 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800974c:	697b      	ldr	r3, [r7, #20]
 800974e:	ee07 3a90 	vmov	s15, r3
 8009752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009756:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80098d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800975a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800975e:	4b59      	ldr	r3, [pc, #356]	; (80098c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009766:	ee07 3a90 	vmov	s15, r3
 800976a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800976e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009772:	eddf 5a56 	vldr	s11, [pc, #344]	; 80098cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009776:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800977a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800977e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009782:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800978a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800978e:	e043      	b.n	8009818 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009790:	697b      	ldr	r3, [r7, #20]
 8009792:	ee07 3a90 	vmov	s15, r3
 8009796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800979a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80098d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800979e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097a2:	4b48      	ldr	r3, [pc, #288]	; (80098c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097aa:	ee07 3a90 	vmov	s15, r3
 80097ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80097b6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80098cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80097ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80097c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80097d2:	e021      	b.n	8009818 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80097d4:	697b      	ldr	r3, [r7, #20]
 80097d6:	ee07 3a90 	vmov	s15, r3
 80097da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097de:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80098d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80097e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097e6:	4b37      	ldr	r3, [pc, #220]	; (80098c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097ee:	ee07 3a90 	vmov	s15, r3
 80097f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80097fa:	eddf 5a34 	vldr	s11, [pc, #208]	; 80098cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80097fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009802:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009806:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800980a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800980e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009812:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009816:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009818:	4b2a      	ldr	r3, [pc, #168]	; (80098c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800981a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800981c:	0a5b      	lsrs	r3, r3, #9
 800981e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009822:	ee07 3a90 	vmov	s15, r3
 8009826:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800982a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800982e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009832:	edd7 6a07 	vldr	s13, [r7, #28]
 8009836:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800983a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800983e:	ee17 2a90 	vmov	r2, s15
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009846:	4b1f      	ldr	r3, [pc, #124]	; (80098c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800984a:	0c1b      	lsrs	r3, r3, #16
 800984c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009850:	ee07 3a90 	vmov	s15, r3
 8009854:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009858:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800985c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009860:	edd7 6a07 	vldr	s13, [r7, #28]
 8009864:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009868:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800986c:	ee17 2a90 	vmov	r2, s15
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009874:	4b13      	ldr	r3, [pc, #76]	; (80098c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009878:	0e1b      	lsrs	r3, r3, #24
 800987a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800987e:	ee07 3a90 	vmov	s15, r3
 8009882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009886:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800988a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800988e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009892:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009896:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800989a:	ee17 2a90 	vmov	r2, s15
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80098a2:	e008      	b.n	80098b6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2200      	movs	r2, #0
 80098a8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2200      	movs	r2, #0
 80098ae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2200      	movs	r2, #0
 80098b4:	609a      	str	r2, [r3, #8]
}
 80098b6:	bf00      	nop
 80098b8:	3724      	adds	r7, #36	; 0x24
 80098ba:	46bd      	mov	sp, r7
 80098bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c0:	4770      	bx	lr
 80098c2:	bf00      	nop
 80098c4:	58024400 	.word	0x58024400
 80098c8:	03d09000 	.word	0x03d09000
 80098cc:	46000000 	.word	0x46000000
 80098d0:	4c742400 	.word	0x4c742400
 80098d4:	4a742400 	.word	0x4a742400
 80098d8:	4bbebc20 	.word	0x4bbebc20

080098dc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80098dc:	b480      	push	{r7}
 80098de:	b089      	sub	sp, #36	; 0x24
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80098e4:	4ba1      	ldr	r3, [pc, #644]	; (8009b6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098e8:	f003 0303 	and.w	r3, r3, #3
 80098ec:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80098ee:	4b9f      	ldr	r3, [pc, #636]	; (8009b6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098f2:	0d1b      	lsrs	r3, r3, #20
 80098f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80098f8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80098fa:	4b9c      	ldr	r3, [pc, #624]	; (8009b6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098fe:	0a1b      	lsrs	r3, r3, #8
 8009900:	f003 0301 	and.w	r3, r3, #1
 8009904:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009906:	4b99      	ldr	r3, [pc, #612]	; (8009b6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800990a:	08db      	lsrs	r3, r3, #3
 800990c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009910:	693a      	ldr	r2, [r7, #16]
 8009912:	fb02 f303 	mul.w	r3, r2, r3
 8009916:	ee07 3a90 	vmov	s15, r3
 800991a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800991e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	2b00      	cmp	r3, #0
 8009926:	f000 8111 	beq.w	8009b4c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800992a:	69bb      	ldr	r3, [r7, #24]
 800992c:	2b02      	cmp	r3, #2
 800992e:	f000 8083 	beq.w	8009a38 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009932:	69bb      	ldr	r3, [r7, #24]
 8009934:	2b02      	cmp	r3, #2
 8009936:	f200 80a1 	bhi.w	8009a7c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800993a:	69bb      	ldr	r3, [r7, #24]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d003      	beq.n	8009948 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009940:	69bb      	ldr	r3, [r7, #24]
 8009942:	2b01      	cmp	r3, #1
 8009944:	d056      	beq.n	80099f4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009946:	e099      	b.n	8009a7c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009948:	4b88      	ldr	r3, [pc, #544]	; (8009b6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f003 0320 	and.w	r3, r3, #32
 8009950:	2b00      	cmp	r3, #0
 8009952:	d02d      	beq.n	80099b0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009954:	4b85      	ldr	r3, [pc, #532]	; (8009b6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	08db      	lsrs	r3, r3, #3
 800995a:	f003 0303 	and.w	r3, r3, #3
 800995e:	4a84      	ldr	r2, [pc, #528]	; (8009b70 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009960:	fa22 f303 	lsr.w	r3, r2, r3
 8009964:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	ee07 3a90 	vmov	s15, r3
 800996c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009970:	697b      	ldr	r3, [r7, #20]
 8009972:	ee07 3a90 	vmov	s15, r3
 8009976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800997a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800997e:	4b7b      	ldr	r3, [pc, #492]	; (8009b6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009982:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009986:	ee07 3a90 	vmov	s15, r3
 800998a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800998e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009992:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009b74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009996:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800999a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800999e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099aa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80099ae:	e087      	b.n	8009ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80099b0:	697b      	ldr	r3, [r7, #20]
 80099b2:	ee07 3a90 	vmov	s15, r3
 80099b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099ba:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009b78 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80099be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099c2:	4b6a      	ldr	r3, [pc, #424]	; (8009b6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80099c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099ca:	ee07 3a90 	vmov	s15, r3
 80099ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80099d6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009b74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80099da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80099f2:	e065      	b.n	8009ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	ee07 3a90 	vmov	s15, r3
 80099fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099fe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009b7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009a02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a06:	4b59      	ldr	r3, [pc, #356]	; (8009b6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a0e:	ee07 3a90 	vmov	s15, r3
 8009a12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a16:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a1a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009b74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009a1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a36:	e043      	b.n	8009ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009a38:	697b      	ldr	r3, [r7, #20]
 8009a3a:	ee07 3a90 	vmov	s15, r3
 8009a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a42:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009b80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009a46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a4a:	4b48      	ldr	r3, [pc, #288]	; (8009b6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a52:	ee07 3a90 	vmov	s15, r3
 8009a56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a5e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009b74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009a62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a7a:	e021      	b.n	8009ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009a7c:	697b      	ldr	r3, [r7, #20]
 8009a7e:	ee07 3a90 	vmov	s15, r3
 8009a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a86:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009b7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009a8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a8e:	4b37      	ldr	r3, [pc, #220]	; (8009b6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a96:	ee07 3a90 	vmov	s15, r3
 8009a9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009aa2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009b74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009aa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009aaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009aae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ab2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009aba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009abe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009ac0:	4b2a      	ldr	r3, [pc, #168]	; (8009b6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ac4:	0a5b      	lsrs	r3, r3, #9
 8009ac6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009aca:	ee07 3a90 	vmov	s15, r3
 8009ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ad2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009ad6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ada:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ade:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ae2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ae6:	ee17 2a90 	vmov	r2, s15
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009aee:	4b1f      	ldr	r3, [pc, #124]	; (8009b6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009af2:	0c1b      	lsrs	r3, r3, #16
 8009af4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009af8:	ee07 3a90 	vmov	s15, r3
 8009afc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009b04:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009b08:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b14:	ee17 2a90 	vmov	r2, s15
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009b1c:	4b13      	ldr	r3, [pc, #76]	; (8009b6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b20:	0e1b      	lsrs	r3, r3, #24
 8009b22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b26:	ee07 3a90 	vmov	s15, r3
 8009b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009b32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009b36:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b42:	ee17 2a90 	vmov	r2, s15
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009b4a:	e008      	b.n	8009b5e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2200      	movs	r2, #0
 8009b56:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	609a      	str	r2, [r3, #8]
}
 8009b5e:	bf00      	nop
 8009b60:	3724      	adds	r7, #36	; 0x24
 8009b62:	46bd      	mov	sp, r7
 8009b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b68:	4770      	bx	lr
 8009b6a:	bf00      	nop
 8009b6c:	58024400 	.word	0x58024400
 8009b70:	03d09000 	.word	0x03d09000
 8009b74:	46000000 	.word	0x46000000
 8009b78:	4c742400 	.word	0x4c742400
 8009b7c:	4a742400 	.word	0x4a742400
 8009b80:	4bbebc20 	.word	0x4bbebc20

08009b84 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009b84:	b480      	push	{r7}
 8009b86:	b089      	sub	sp, #36	; 0x24
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009b8c:	4ba0      	ldr	r3, [pc, #640]	; (8009e10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b90:	f003 0303 	and.w	r3, r3, #3
 8009b94:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009b96:	4b9e      	ldr	r3, [pc, #632]	; (8009e10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b9a:	091b      	lsrs	r3, r3, #4
 8009b9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009ba0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009ba2:	4b9b      	ldr	r3, [pc, #620]	; (8009e10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ba6:	f003 0301 	and.w	r3, r3, #1
 8009baa:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009bac:	4b98      	ldr	r3, [pc, #608]	; (8009e10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bb0:	08db      	lsrs	r3, r3, #3
 8009bb2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009bb6:	693a      	ldr	r2, [r7, #16]
 8009bb8:	fb02 f303 	mul.w	r3, r2, r3
 8009bbc:	ee07 3a90 	vmov	s15, r3
 8009bc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bc4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009bc8:	697b      	ldr	r3, [r7, #20]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	f000 8111 	beq.w	8009df2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009bd0:	69bb      	ldr	r3, [r7, #24]
 8009bd2:	2b02      	cmp	r3, #2
 8009bd4:	f000 8083 	beq.w	8009cde <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009bd8:	69bb      	ldr	r3, [r7, #24]
 8009bda:	2b02      	cmp	r3, #2
 8009bdc:	f200 80a1 	bhi.w	8009d22 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009be0:	69bb      	ldr	r3, [r7, #24]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d003      	beq.n	8009bee <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009be6:	69bb      	ldr	r3, [r7, #24]
 8009be8:	2b01      	cmp	r3, #1
 8009bea:	d056      	beq.n	8009c9a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009bec:	e099      	b.n	8009d22 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009bee:	4b88      	ldr	r3, [pc, #544]	; (8009e10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f003 0320 	and.w	r3, r3, #32
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d02d      	beq.n	8009c56 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009bfa:	4b85      	ldr	r3, [pc, #532]	; (8009e10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	08db      	lsrs	r3, r3, #3
 8009c00:	f003 0303 	and.w	r3, r3, #3
 8009c04:	4a83      	ldr	r2, [pc, #524]	; (8009e14 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009c06:	fa22 f303 	lsr.w	r3, r2, r3
 8009c0a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	ee07 3a90 	vmov	s15, r3
 8009c12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	ee07 3a90 	vmov	s15, r3
 8009c1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c24:	4b7a      	ldr	r3, [pc, #488]	; (8009e10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c2c:	ee07 3a90 	vmov	s15, r3
 8009c30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c34:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c38:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009e18 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009c3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c50:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009c54:	e087      	b.n	8009d66 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009c56:	697b      	ldr	r3, [r7, #20]
 8009c58:	ee07 3a90 	vmov	s15, r3
 8009c5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c60:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009e1c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009c64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c68:	4b69      	ldr	r3, [pc, #420]	; (8009e10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c70:	ee07 3a90 	vmov	s15, r3
 8009c74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c78:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c7c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009e18 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009c80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c94:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c98:	e065      	b.n	8009d66 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009c9a:	697b      	ldr	r3, [r7, #20]
 8009c9c:	ee07 3a90 	vmov	s15, r3
 8009ca0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ca4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009e20 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009ca8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cac:	4b58      	ldr	r3, [pc, #352]	; (8009e10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cb4:	ee07 3a90 	vmov	s15, r3
 8009cb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cbc:	ed97 6a03 	vldr	s12, [r7, #12]
 8009cc0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009e18 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009cc4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cc8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ccc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009cd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cd8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009cdc:	e043      	b.n	8009d66 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	ee07 3a90 	vmov	s15, r3
 8009ce4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ce8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009e24 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009cec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cf0:	4b47      	ldr	r3, [pc, #284]	; (8009e10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cf8:	ee07 3a90 	vmov	s15, r3
 8009cfc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d00:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d04:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009e18 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009d08:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d10:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d1c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009d20:	e021      	b.n	8009d66 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009d22:	697b      	ldr	r3, [r7, #20]
 8009d24:	ee07 3a90 	vmov	s15, r3
 8009d28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d2c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009e1c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009d30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d34:	4b36      	ldr	r3, [pc, #216]	; (8009e10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d3c:	ee07 3a90 	vmov	s15, r3
 8009d40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d44:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d48:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009e18 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009d4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d50:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d60:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009d64:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8009d66:	4b2a      	ldr	r3, [pc, #168]	; (8009e10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d6a:	0a5b      	lsrs	r3, r3, #9
 8009d6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d70:	ee07 3a90 	vmov	s15, r3
 8009d74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d7c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d80:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d8c:	ee17 2a90 	vmov	r2, s15
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009d94:	4b1e      	ldr	r3, [pc, #120]	; (8009e10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d98:	0c1b      	lsrs	r3, r3, #16
 8009d9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d9e:	ee07 3a90 	vmov	s15, r3
 8009da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009da6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009daa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009dae:	edd7 6a07 	vldr	s13, [r7, #28]
 8009db2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009db6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009dba:	ee17 2a90 	vmov	r2, s15
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8009dc2:	4b13      	ldr	r3, [pc, #76]	; (8009e10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dc6:	0e1b      	lsrs	r3, r3, #24
 8009dc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009dcc:	ee07 3a90 	vmov	s15, r3
 8009dd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009dd8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ddc:	edd7 6a07 	vldr	s13, [r7, #28]
 8009de0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009de4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009de8:	ee17 2a90 	vmov	r2, s15
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009df0:	e008      	b.n	8009e04 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2200      	movs	r2, #0
 8009df6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2200      	movs	r2, #0
 8009e02:	609a      	str	r2, [r3, #8]
}
 8009e04:	bf00      	nop
 8009e06:	3724      	adds	r7, #36	; 0x24
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0e:	4770      	bx	lr
 8009e10:	58024400 	.word	0x58024400
 8009e14:	03d09000 	.word	0x03d09000
 8009e18:	46000000 	.word	0x46000000
 8009e1c:	4c742400 	.word	0x4c742400
 8009e20:	4a742400 	.word	0x4a742400
 8009e24:	4bbebc20 	.word	0x4bbebc20

08009e28 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b084      	sub	sp, #16
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
 8009e30:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009e32:	2300      	movs	r3, #0
 8009e34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009e36:	4b53      	ldr	r3, [pc, #332]	; (8009f84 <RCCEx_PLL2_Config+0x15c>)
 8009e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e3a:	f003 0303 	and.w	r3, r3, #3
 8009e3e:	2b03      	cmp	r3, #3
 8009e40:	d101      	bne.n	8009e46 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009e42:	2301      	movs	r3, #1
 8009e44:	e099      	b.n	8009f7a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009e46:	4b4f      	ldr	r3, [pc, #316]	; (8009f84 <RCCEx_PLL2_Config+0x15c>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	4a4e      	ldr	r2, [pc, #312]	; (8009f84 <RCCEx_PLL2_Config+0x15c>)
 8009e4c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009e50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e52:	f7f8 ff75 	bl	8002d40 <HAL_GetTick>
 8009e56:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009e58:	e008      	b.n	8009e6c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009e5a:	f7f8 ff71 	bl	8002d40 <HAL_GetTick>
 8009e5e:	4602      	mov	r2, r0
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	1ad3      	subs	r3, r2, r3
 8009e64:	2b02      	cmp	r3, #2
 8009e66:	d901      	bls.n	8009e6c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009e68:	2303      	movs	r3, #3
 8009e6a:	e086      	b.n	8009f7a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009e6c:	4b45      	ldr	r3, [pc, #276]	; (8009f84 <RCCEx_PLL2_Config+0x15c>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d1f0      	bne.n	8009e5a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009e78:	4b42      	ldr	r3, [pc, #264]	; (8009f84 <RCCEx_PLL2_Config+0x15c>)
 8009e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e7c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	031b      	lsls	r3, r3, #12
 8009e86:	493f      	ldr	r1, [pc, #252]	; (8009f84 <RCCEx_PLL2_Config+0x15c>)
 8009e88:	4313      	orrs	r3, r2
 8009e8a:	628b      	str	r3, [r1, #40]	; 0x28
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	685b      	ldr	r3, [r3, #4]
 8009e90:	3b01      	subs	r3, #1
 8009e92:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	689b      	ldr	r3, [r3, #8]
 8009e9a:	3b01      	subs	r3, #1
 8009e9c:	025b      	lsls	r3, r3, #9
 8009e9e:	b29b      	uxth	r3, r3
 8009ea0:	431a      	orrs	r2, r3
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	68db      	ldr	r3, [r3, #12]
 8009ea6:	3b01      	subs	r3, #1
 8009ea8:	041b      	lsls	r3, r3, #16
 8009eaa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009eae:	431a      	orrs	r2, r3
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	691b      	ldr	r3, [r3, #16]
 8009eb4:	3b01      	subs	r3, #1
 8009eb6:	061b      	lsls	r3, r3, #24
 8009eb8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009ebc:	4931      	ldr	r1, [pc, #196]	; (8009f84 <RCCEx_PLL2_Config+0x15c>)
 8009ebe:	4313      	orrs	r3, r2
 8009ec0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009ec2:	4b30      	ldr	r3, [pc, #192]	; (8009f84 <RCCEx_PLL2_Config+0x15c>)
 8009ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ec6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	695b      	ldr	r3, [r3, #20]
 8009ece:	492d      	ldr	r1, [pc, #180]	; (8009f84 <RCCEx_PLL2_Config+0x15c>)
 8009ed0:	4313      	orrs	r3, r2
 8009ed2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009ed4:	4b2b      	ldr	r3, [pc, #172]	; (8009f84 <RCCEx_PLL2_Config+0x15c>)
 8009ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ed8:	f023 0220 	bic.w	r2, r3, #32
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	699b      	ldr	r3, [r3, #24]
 8009ee0:	4928      	ldr	r1, [pc, #160]	; (8009f84 <RCCEx_PLL2_Config+0x15c>)
 8009ee2:	4313      	orrs	r3, r2
 8009ee4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009ee6:	4b27      	ldr	r3, [pc, #156]	; (8009f84 <RCCEx_PLL2_Config+0x15c>)
 8009ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eea:	4a26      	ldr	r2, [pc, #152]	; (8009f84 <RCCEx_PLL2_Config+0x15c>)
 8009eec:	f023 0310 	bic.w	r3, r3, #16
 8009ef0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009ef2:	4b24      	ldr	r3, [pc, #144]	; (8009f84 <RCCEx_PLL2_Config+0x15c>)
 8009ef4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009ef6:	4b24      	ldr	r3, [pc, #144]	; (8009f88 <RCCEx_PLL2_Config+0x160>)
 8009ef8:	4013      	ands	r3, r2
 8009efa:	687a      	ldr	r2, [r7, #4]
 8009efc:	69d2      	ldr	r2, [r2, #28]
 8009efe:	00d2      	lsls	r2, r2, #3
 8009f00:	4920      	ldr	r1, [pc, #128]	; (8009f84 <RCCEx_PLL2_Config+0x15c>)
 8009f02:	4313      	orrs	r3, r2
 8009f04:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009f06:	4b1f      	ldr	r3, [pc, #124]	; (8009f84 <RCCEx_PLL2_Config+0x15c>)
 8009f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f0a:	4a1e      	ldr	r2, [pc, #120]	; (8009f84 <RCCEx_PLL2_Config+0x15c>)
 8009f0c:	f043 0310 	orr.w	r3, r3, #16
 8009f10:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d106      	bne.n	8009f26 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009f18:	4b1a      	ldr	r3, [pc, #104]	; (8009f84 <RCCEx_PLL2_Config+0x15c>)
 8009f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f1c:	4a19      	ldr	r2, [pc, #100]	; (8009f84 <RCCEx_PLL2_Config+0x15c>)
 8009f1e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009f22:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009f24:	e00f      	b.n	8009f46 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	2b01      	cmp	r3, #1
 8009f2a:	d106      	bne.n	8009f3a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009f2c:	4b15      	ldr	r3, [pc, #84]	; (8009f84 <RCCEx_PLL2_Config+0x15c>)
 8009f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f30:	4a14      	ldr	r2, [pc, #80]	; (8009f84 <RCCEx_PLL2_Config+0x15c>)
 8009f32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009f36:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009f38:	e005      	b.n	8009f46 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009f3a:	4b12      	ldr	r3, [pc, #72]	; (8009f84 <RCCEx_PLL2_Config+0x15c>)
 8009f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f3e:	4a11      	ldr	r2, [pc, #68]	; (8009f84 <RCCEx_PLL2_Config+0x15c>)
 8009f40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009f44:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009f46:	4b0f      	ldr	r3, [pc, #60]	; (8009f84 <RCCEx_PLL2_Config+0x15c>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	4a0e      	ldr	r2, [pc, #56]	; (8009f84 <RCCEx_PLL2_Config+0x15c>)
 8009f4c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009f50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f52:	f7f8 fef5 	bl	8002d40 <HAL_GetTick>
 8009f56:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009f58:	e008      	b.n	8009f6c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009f5a:	f7f8 fef1 	bl	8002d40 <HAL_GetTick>
 8009f5e:	4602      	mov	r2, r0
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	1ad3      	subs	r3, r2, r3
 8009f64:	2b02      	cmp	r3, #2
 8009f66:	d901      	bls.n	8009f6c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009f68:	2303      	movs	r3, #3
 8009f6a:	e006      	b.n	8009f7a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009f6c:	4b05      	ldr	r3, [pc, #20]	; (8009f84 <RCCEx_PLL2_Config+0x15c>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d0f0      	beq.n	8009f5a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	3710      	adds	r7, #16
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}
 8009f82:	bf00      	nop
 8009f84:	58024400 	.word	0x58024400
 8009f88:	ffff0007 	.word	0xffff0007

08009f8c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b084      	sub	sp, #16
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
 8009f94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009f96:	2300      	movs	r3, #0
 8009f98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009f9a:	4b53      	ldr	r3, [pc, #332]	; (800a0e8 <RCCEx_PLL3_Config+0x15c>)
 8009f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f9e:	f003 0303 	and.w	r3, r3, #3
 8009fa2:	2b03      	cmp	r3, #3
 8009fa4:	d101      	bne.n	8009faa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	e099      	b.n	800a0de <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009faa:	4b4f      	ldr	r3, [pc, #316]	; (800a0e8 <RCCEx_PLL3_Config+0x15c>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	4a4e      	ldr	r2, [pc, #312]	; (800a0e8 <RCCEx_PLL3_Config+0x15c>)
 8009fb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009fb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009fb6:	f7f8 fec3 	bl	8002d40 <HAL_GetTick>
 8009fba:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009fbc:	e008      	b.n	8009fd0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009fbe:	f7f8 febf 	bl	8002d40 <HAL_GetTick>
 8009fc2:	4602      	mov	r2, r0
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	1ad3      	subs	r3, r2, r3
 8009fc8:	2b02      	cmp	r3, #2
 8009fca:	d901      	bls.n	8009fd0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009fcc:	2303      	movs	r3, #3
 8009fce:	e086      	b.n	800a0de <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009fd0:	4b45      	ldr	r3, [pc, #276]	; (800a0e8 <RCCEx_PLL3_Config+0x15c>)
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d1f0      	bne.n	8009fbe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009fdc:	4b42      	ldr	r3, [pc, #264]	; (800a0e8 <RCCEx_PLL3_Config+0x15c>)
 8009fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fe0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	051b      	lsls	r3, r3, #20
 8009fea:	493f      	ldr	r1, [pc, #252]	; (800a0e8 <RCCEx_PLL3_Config+0x15c>)
 8009fec:	4313      	orrs	r3, r2
 8009fee:	628b      	str	r3, [r1, #40]	; 0x28
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	685b      	ldr	r3, [r3, #4]
 8009ff4:	3b01      	subs	r3, #1
 8009ff6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	689b      	ldr	r3, [r3, #8]
 8009ffe:	3b01      	subs	r3, #1
 800a000:	025b      	lsls	r3, r3, #9
 800a002:	b29b      	uxth	r3, r3
 800a004:	431a      	orrs	r2, r3
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	68db      	ldr	r3, [r3, #12]
 800a00a:	3b01      	subs	r3, #1
 800a00c:	041b      	lsls	r3, r3, #16
 800a00e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a012:	431a      	orrs	r2, r3
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	691b      	ldr	r3, [r3, #16]
 800a018:	3b01      	subs	r3, #1
 800a01a:	061b      	lsls	r3, r3, #24
 800a01c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a020:	4931      	ldr	r1, [pc, #196]	; (800a0e8 <RCCEx_PLL3_Config+0x15c>)
 800a022:	4313      	orrs	r3, r2
 800a024:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a026:	4b30      	ldr	r3, [pc, #192]	; (800a0e8 <RCCEx_PLL3_Config+0x15c>)
 800a028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a02a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	695b      	ldr	r3, [r3, #20]
 800a032:	492d      	ldr	r1, [pc, #180]	; (800a0e8 <RCCEx_PLL3_Config+0x15c>)
 800a034:	4313      	orrs	r3, r2
 800a036:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a038:	4b2b      	ldr	r3, [pc, #172]	; (800a0e8 <RCCEx_PLL3_Config+0x15c>)
 800a03a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a03c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	699b      	ldr	r3, [r3, #24]
 800a044:	4928      	ldr	r1, [pc, #160]	; (800a0e8 <RCCEx_PLL3_Config+0x15c>)
 800a046:	4313      	orrs	r3, r2
 800a048:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a04a:	4b27      	ldr	r3, [pc, #156]	; (800a0e8 <RCCEx_PLL3_Config+0x15c>)
 800a04c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a04e:	4a26      	ldr	r2, [pc, #152]	; (800a0e8 <RCCEx_PLL3_Config+0x15c>)
 800a050:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a054:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a056:	4b24      	ldr	r3, [pc, #144]	; (800a0e8 <RCCEx_PLL3_Config+0x15c>)
 800a058:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a05a:	4b24      	ldr	r3, [pc, #144]	; (800a0ec <RCCEx_PLL3_Config+0x160>)
 800a05c:	4013      	ands	r3, r2
 800a05e:	687a      	ldr	r2, [r7, #4]
 800a060:	69d2      	ldr	r2, [r2, #28]
 800a062:	00d2      	lsls	r2, r2, #3
 800a064:	4920      	ldr	r1, [pc, #128]	; (800a0e8 <RCCEx_PLL3_Config+0x15c>)
 800a066:	4313      	orrs	r3, r2
 800a068:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a06a:	4b1f      	ldr	r3, [pc, #124]	; (800a0e8 <RCCEx_PLL3_Config+0x15c>)
 800a06c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a06e:	4a1e      	ldr	r2, [pc, #120]	; (800a0e8 <RCCEx_PLL3_Config+0x15c>)
 800a070:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a074:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d106      	bne.n	800a08a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a07c:	4b1a      	ldr	r3, [pc, #104]	; (800a0e8 <RCCEx_PLL3_Config+0x15c>)
 800a07e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a080:	4a19      	ldr	r2, [pc, #100]	; (800a0e8 <RCCEx_PLL3_Config+0x15c>)
 800a082:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a086:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a088:	e00f      	b.n	800a0aa <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	2b01      	cmp	r3, #1
 800a08e:	d106      	bne.n	800a09e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a090:	4b15      	ldr	r3, [pc, #84]	; (800a0e8 <RCCEx_PLL3_Config+0x15c>)
 800a092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a094:	4a14      	ldr	r2, [pc, #80]	; (800a0e8 <RCCEx_PLL3_Config+0x15c>)
 800a096:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a09a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a09c:	e005      	b.n	800a0aa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a09e:	4b12      	ldr	r3, [pc, #72]	; (800a0e8 <RCCEx_PLL3_Config+0x15c>)
 800a0a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0a2:	4a11      	ldr	r2, [pc, #68]	; (800a0e8 <RCCEx_PLL3_Config+0x15c>)
 800a0a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a0a8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a0aa:	4b0f      	ldr	r3, [pc, #60]	; (800a0e8 <RCCEx_PLL3_Config+0x15c>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	4a0e      	ldr	r2, [pc, #56]	; (800a0e8 <RCCEx_PLL3_Config+0x15c>)
 800a0b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a0b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a0b6:	f7f8 fe43 	bl	8002d40 <HAL_GetTick>
 800a0ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a0bc:	e008      	b.n	800a0d0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a0be:	f7f8 fe3f 	bl	8002d40 <HAL_GetTick>
 800a0c2:	4602      	mov	r2, r0
 800a0c4:	68bb      	ldr	r3, [r7, #8]
 800a0c6:	1ad3      	subs	r3, r2, r3
 800a0c8:	2b02      	cmp	r3, #2
 800a0ca:	d901      	bls.n	800a0d0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a0cc:	2303      	movs	r3, #3
 800a0ce:	e006      	b.n	800a0de <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a0d0:	4b05      	ldr	r3, [pc, #20]	; (800a0e8 <RCCEx_PLL3_Config+0x15c>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d0f0      	beq.n	800a0be <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a0dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	3710      	adds	r7, #16
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}
 800a0e6:	bf00      	nop
 800a0e8:	58024400 	.word	0x58024400
 800a0ec:	ffff0007 	.word	0xffff0007

0800a0f0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b084      	sub	sp, #16
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d071      	beq.n	800a1e6 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a108:	b2db      	uxtb	r3, r3
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d106      	bne.n	800a11c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2200      	movs	r2, #0
 800a112:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f7f8 f930 	bl	800237c <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2202      	movs	r2, #2
 800a120:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	68db      	ldr	r3, [r3, #12]
 800a12a:	f003 0310 	and.w	r3, r3, #16
 800a12e:	2b10      	cmp	r3, #16
 800a130:	d050      	beq.n	800a1d4 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	22ca      	movs	r2, #202	; 0xca
 800a138:	625a      	str	r2, [r3, #36]	; 0x24
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	2253      	movs	r2, #83	; 0x53
 800a140:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f000 f87a 	bl	800a23c <RTC_EnterInitMode>
 800a148:	4603      	mov	r3, r0
 800a14a:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800a14c:	7bfb      	ldrb	r3, [r7, #15]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d124      	bne.n	800a19c <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	6899      	ldr	r1, [r3, #8]
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681a      	ldr	r2, [r3, #0]
 800a15c:	4b24      	ldr	r3, [pc, #144]	; (800a1f0 <HAL_RTC_Init+0x100>)
 800a15e:	400b      	ands	r3, r1
 800a160:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	6899      	ldr	r1, [r3, #8]
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	685a      	ldr	r2, [r3, #4]
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	691b      	ldr	r3, [r3, #16]
 800a170:	431a      	orrs	r2, r3
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	699b      	ldr	r3, [r3, #24]
 800a176:	431a      	orrs	r2, r3
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	430a      	orrs	r2, r1
 800a17e:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	689b      	ldr	r3, [r3, #8]
 800a184:	0419      	lsls	r1, r3, #16
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	68da      	ldr	r2, [r3, #12]
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	430a      	orrs	r2, r1
 800a190:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800a192:	6878      	ldr	r0, [r7, #4]
 800a194:	f000 f886 	bl	800a2a4 <RTC_ExitInitMode>
 800a198:	4603      	mov	r3, r0
 800a19a:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800a19c:	7bfb      	ldrb	r3, [r7, #15]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d113      	bne.n	800a1ca <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	f022 0203 	bic.w	r2, r2, #3
 800a1b0:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	69da      	ldr	r2, [r3, #28]
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	695b      	ldr	r3, [r3, #20]
 800a1c0:	431a      	orrs	r2, r3
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	430a      	orrs	r2, r1
 800a1c8:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	22ff      	movs	r2, #255	; 0xff
 800a1d0:	625a      	str	r2, [r3, #36]	; 0x24
 800a1d2:	e001      	b.n	800a1d8 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800a1d8:	7bfb      	ldrb	r3, [r7, #15]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d103      	bne.n	800a1e6 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2201      	movs	r2, #1
 800a1e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800a1e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	3710      	adds	r7, #16
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}
 800a1f0:	ff8fffbf 	.word	0xff8fffbf

0800a1f4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b084      	sub	sp, #16
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	4a0d      	ldr	r2, [pc, #52]	; (800a238 <HAL_RTC_WaitForSynchro+0x44>)
 800a202:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800a204:	f7f8 fd9c 	bl	8002d40 <HAL_GetTick>
 800a208:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a20a:	e009      	b.n	800a220 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a20c:	f7f8 fd98 	bl	8002d40 <HAL_GetTick>
 800a210:	4602      	mov	r2, r0
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	1ad3      	subs	r3, r2, r3
 800a216:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a21a:	d901      	bls.n	800a220 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800a21c:	2303      	movs	r3, #3
 800a21e:	e007      	b.n	800a230 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	68db      	ldr	r3, [r3, #12]
 800a226:	f003 0320 	and.w	r3, r3, #32
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d0ee      	beq.n	800a20c <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800a22e:	2300      	movs	r3, #0
}
 800a230:	4618      	mov	r0, r3
 800a232:	3710      	adds	r7, #16
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}
 800a238:	0003ff5f 	.word	0x0003ff5f

0800a23c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b084      	sub	sp, #16
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a244:	2300      	movs	r3, #0
 800a246:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	68db      	ldr	r3, [r3, #12]
 800a24e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a252:	2b00      	cmp	r3, #0
 800a254:	d120      	bne.n	800a298 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f04f 32ff 	mov.w	r2, #4294967295
 800a25e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800a260:	f7f8 fd6e 	bl	8002d40 <HAL_GetTick>
 800a264:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a266:	e00d      	b.n	800a284 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800a268:	f7f8 fd6a 	bl	8002d40 <HAL_GetTick>
 800a26c:	4602      	mov	r2, r0
 800a26e:	68bb      	ldr	r3, [r7, #8]
 800a270:	1ad3      	subs	r3, r2, r3
 800a272:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a276:	d905      	bls.n	800a284 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800a278:	2303      	movs	r3, #3
 800a27a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2203      	movs	r2, #3
 800a280:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	68db      	ldr	r3, [r3, #12]
 800a28a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d102      	bne.n	800a298 <RTC_EnterInitMode+0x5c>
 800a292:	7bfb      	ldrb	r3, [r7, #15]
 800a294:	2b03      	cmp	r3, #3
 800a296:	d1e7      	bne.n	800a268 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800a298:	7bfb      	ldrb	r3, [r7, #15]
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	3710      	adds	r7, #16
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}
	...

0800a2a4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b084      	sub	sp, #16
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 800a2b0:	4b1a      	ldr	r3, [pc, #104]	; (800a31c <RTC_ExitInitMode+0x78>)
 800a2b2:	68db      	ldr	r3, [r3, #12]
 800a2b4:	4a19      	ldr	r2, [pc, #100]	; (800a31c <RTC_ExitInitMode+0x78>)
 800a2b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a2ba:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800a2bc:	4b17      	ldr	r3, [pc, #92]	; (800a31c <RTC_ExitInitMode+0x78>)
 800a2be:	689b      	ldr	r3, [r3, #8]
 800a2c0:	f003 0320 	and.w	r3, r3, #32
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d10c      	bne.n	800a2e2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f7ff ff93 	bl	800a1f4 <HAL_RTC_WaitForSynchro>
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d01e      	beq.n	800a312 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2203      	movs	r2, #3
 800a2d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800a2dc:	2303      	movs	r3, #3
 800a2de:	73fb      	strb	r3, [r7, #15]
 800a2e0:	e017      	b.n	800a312 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a2e2:	4b0e      	ldr	r3, [pc, #56]	; (800a31c <RTC_ExitInitMode+0x78>)
 800a2e4:	689b      	ldr	r3, [r3, #8]
 800a2e6:	4a0d      	ldr	r2, [pc, #52]	; (800a31c <RTC_ExitInitMode+0x78>)
 800a2e8:	f023 0320 	bic.w	r3, r3, #32
 800a2ec:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f7ff ff80 	bl	800a1f4 <HAL_RTC_WaitForSynchro>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d005      	beq.n	800a306 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2203      	movs	r2, #3
 800a2fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800a302:	2303      	movs	r3, #3
 800a304:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a306:	4b05      	ldr	r3, [pc, #20]	; (800a31c <RTC_ExitInitMode+0x78>)
 800a308:	689b      	ldr	r3, [r3, #8]
 800a30a:	4a04      	ldr	r2, [pc, #16]	; (800a31c <RTC_ExitInitMode+0x78>)
 800a30c:	f043 0320 	orr.w	r3, r3, #32
 800a310:	6093      	str	r3, [r2, #8]
  }

  return status;
 800a312:	7bfb      	ldrb	r3, [r7, #15]
}
 800a314:	4618      	mov	r0, r3
 800a316:	3710      	adds	r7, #16
 800a318:	46bd      	mov	sp, r7
 800a31a:	bd80      	pop	{r7, pc}
 800a31c:	58004000 	.word	0x58004000

0800a320 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b08a      	sub	sp, #40	; 0x28
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d101      	bne.n	800a332 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800a32e:	2301      	movs	r3, #1
 800a330:	e28e      	b.n	800a850 <HAL_SAI_Init+0x530>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800a332:	f7f8 fd35 	bl	8002da0 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a33c:	2b01      	cmp	r3, #1
 800a33e:	d113      	bne.n	800a368 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	4a96      	ldr	r2, [pc, #600]	; (800a5a0 <HAL_SAI_Init+0x280>)
 800a346:	4293      	cmp	r3, r2
 800a348:	d004      	beq.n	800a354 <HAL_SAI_Init+0x34>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	4a95      	ldr	r2, [pc, #596]	; (800a5a4 <HAL_SAI_Init+0x284>)
 800a350:	4293      	cmp	r3, r2
 800a352:	d107      	bne.n	800a364 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800a358:	2b01      	cmp	r3, #1
 800a35a:	d103      	bne.n	800a364 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800a360:	2b00      	cmp	r3, #0
 800a362:	d001      	beq.n	800a368 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 800a364:	2301      	movs	r3, #1
 800a366:	e273      	b.n	800a850 <HAL_SAI_Init+0x530>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	4a8c      	ldr	r2, [pc, #560]	; (800a5a0 <HAL_SAI_Init+0x280>)
 800a36e:	4293      	cmp	r3, r2
 800a370:	d004      	beq.n	800a37c <HAL_SAI_Init+0x5c>
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	4a8c      	ldr	r2, [pc, #560]	; (800a5a8 <HAL_SAI_Init+0x288>)
 800a378:	4293      	cmp	r3, r2
 800a37a:	d102      	bne.n	800a382 <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 800a37c:	4b8b      	ldr	r3, [pc, #556]	; (800a5ac <HAL_SAI_Init+0x28c>)
 800a37e:	61bb      	str	r3, [r7, #24]
 800a380:	e028      	b.n	800a3d4 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	4a8a      	ldr	r2, [pc, #552]	; (800a5b0 <HAL_SAI_Init+0x290>)
 800a388:	4293      	cmp	r3, r2
 800a38a:	d004      	beq.n	800a396 <HAL_SAI_Init+0x76>
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	4a88      	ldr	r2, [pc, #544]	; (800a5b4 <HAL_SAI_Init+0x294>)
 800a392:	4293      	cmp	r3, r2
 800a394:	d102      	bne.n	800a39c <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 800a396:	4b88      	ldr	r3, [pc, #544]	; (800a5b8 <HAL_SAI_Init+0x298>)
 800a398:	61bb      	str	r3, [r7, #24]
 800a39a:	e01b      	b.n	800a3d4 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	4a86      	ldr	r2, [pc, #536]	; (800a5bc <HAL_SAI_Init+0x29c>)
 800a3a2:	4293      	cmp	r3, r2
 800a3a4:	d004      	beq.n	800a3b0 <HAL_SAI_Init+0x90>
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	4a85      	ldr	r2, [pc, #532]	; (800a5c0 <HAL_SAI_Init+0x2a0>)
 800a3ac:	4293      	cmp	r3, r2
 800a3ae:	d102      	bne.n	800a3b6 <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 800a3b0:	4b84      	ldr	r3, [pc, #528]	; (800a5c4 <HAL_SAI_Init+0x2a4>)
 800a3b2:	61bb      	str	r3, [r7, #24]
 800a3b4:	e00e      	b.n	800a3d4 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	4a7a      	ldr	r2, [pc, #488]	; (800a5a4 <HAL_SAI_Init+0x284>)
 800a3bc:	4293      	cmp	r3, r2
 800a3be:	d004      	beq.n	800a3ca <HAL_SAI_Init+0xaa>
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	4a80      	ldr	r2, [pc, #512]	; (800a5c8 <HAL_SAI_Init+0x2a8>)
 800a3c6:	4293      	cmp	r3, r2
 800a3c8:	d102      	bne.n	800a3d0 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 800a3ca:	4b80      	ldr	r3, [pc, #512]	; (800a5cc <HAL_SAI_Init+0x2ac>)
 800a3cc:	61bb      	str	r3, [r7, #24]
 800a3ce:	e001      	b.n	800a3d4 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800a3d0:	2301      	movs	r3, #1
 800a3d2:	e23d      	b.n	800a850 <HAL_SAI_Init+0x530>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800a3da:	b2db      	uxtb	r3, r3
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d106      	bne.n	800a3ee <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f7f8 fa99 	bl	8002920 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	f000 fa40 	bl	800a874 <SAI_Disable>
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d001      	beq.n	800a3fe <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	e228      	b.n	800a850 <HAL_SAI_Init+0x530>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2202      	movs	r2, #2
 800a402:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	68db      	ldr	r3, [r3, #12]
 800a40a:	2b02      	cmp	r3, #2
 800a40c:	d00c      	beq.n	800a428 <HAL_SAI_Init+0x108>
 800a40e:	2b02      	cmp	r3, #2
 800a410:	d80d      	bhi.n	800a42e <HAL_SAI_Init+0x10e>
 800a412:	2b00      	cmp	r3, #0
 800a414:	d002      	beq.n	800a41c <HAL_SAI_Init+0xfc>
 800a416:	2b01      	cmp	r3, #1
 800a418:	d003      	beq.n	800a422 <HAL_SAI_Init+0x102>
 800a41a:	e008      	b.n	800a42e <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800a41c:	2300      	movs	r3, #0
 800a41e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a420:	e008      	b.n	800a434 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800a422:	2310      	movs	r3, #16
 800a424:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a426:	e005      	b.n	800a434 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800a428:	2320      	movs	r3, #32
 800a42a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a42c:	e002      	b.n	800a434 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 800a42e:	2300      	movs	r3, #0
 800a430:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a432:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	689b      	ldr	r3, [r3, #8]
 800a438:	2b05      	cmp	r3, #5
 800a43a:	d832      	bhi.n	800a4a2 <HAL_SAI_Init+0x182>
 800a43c:	a201      	add	r2, pc, #4	; (adr r2, 800a444 <HAL_SAI_Init+0x124>)
 800a43e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a442:	bf00      	nop
 800a444:	0800a45d 	.word	0x0800a45d
 800a448:	0800a463 	.word	0x0800a463
 800a44c:	0800a46b 	.word	0x0800a46b
 800a450:	0800a473 	.word	0x0800a473
 800a454:	0800a483 	.word	0x0800a483
 800a458:	0800a493 	.word	0x0800a493
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800a45c:	2300      	movs	r3, #0
 800a45e:	61fb      	str	r3, [r7, #28]
      break;
 800a460:	e022      	b.n	800a4a8 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800a462:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a466:	61fb      	str	r3, [r7, #28]
      break;
 800a468:	e01e      	b.n	800a4a8 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a46a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a46e:	61fb      	str	r3, [r7, #28]
      break;
 800a470:	e01a      	b.n	800a4a8 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a472:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a476:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800a478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a47a:	f043 0301 	orr.w	r3, r3, #1
 800a47e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a480:	e012      	b.n	800a4a8 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a482:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a486:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 800a488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a48a:	f043 0302 	orr.w	r3, r3, #2
 800a48e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a490:	e00a      	b.n	800a4a8 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a492:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a496:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800a498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a49a:	f043 0303 	orr.w	r3, r3, #3
 800a49e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a4a0:	e002      	b.n	800a4a8 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	61fb      	str	r3, [r7, #28]
      break;
 800a4a6:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 800a4a8:	69bb      	ldr	r3, [r7, #24]
 800a4aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4ac:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6a1b      	ldr	r3, [r3, #32]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	f000 80c5 	beq.w	800a642 <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	4a37      	ldr	r2, [pc, #220]	; (800a5a0 <HAL_SAI_Init+0x280>)
 800a4c2:	4293      	cmp	r3, r2
 800a4c4:	d004      	beq.n	800a4d0 <HAL_SAI_Init+0x1b0>
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	4a37      	ldr	r2, [pc, #220]	; (800a5a8 <HAL_SAI_Init+0x288>)
 800a4cc:	4293      	cmp	r3, r2
 800a4ce:	d106      	bne.n	800a4de <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800a4d0:	f44f 7080 	mov.w	r0, #256	; 0x100
 800a4d4:	f04f 0100 	mov.w	r1, #0
 800a4d8:	f7fe fb16 	bl	8008b08 <HAL_RCCEx_GetPeriphCLKFreq>
 800a4dc:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	4a33      	ldr	r2, [pc, #204]	; (800a5b0 <HAL_SAI_Init+0x290>)
 800a4e4:	4293      	cmp	r3, r2
 800a4e6:	d004      	beq.n	800a4f2 <HAL_SAI_Init+0x1d2>
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	4a31      	ldr	r2, [pc, #196]	; (800a5b4 <HAL_SAI_Init+0x294>)
 800a4ee:	4293      	cmp	r3, r2
 800a4f0:	d106      	bne.n	800a500 <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800a4f2:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a4f6:	f04f 0100 	mov.w	r1, #0
 800a4fa:	f7fe fb05 	bl	8008b08 <HAL_RCCEx_GetPeriphCLKFreq>
 800a4fe:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	4a2d      	ldr	r2, [pc, #180]	; (800a5bc <HAL_SAI_Init+0x29c>)
 800a506:	4293      	cmp	r3, r2
 800a508:	d004      	beq.n	800a514 <HAL_SAI_Init+0x1f4>
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	4a2c      	ldr	r2, [pc, #176]	; (800a5c0 <HAL_SAI_Init+0x2a0>)
 800a510:	4293      	cmp	r3, r2
 800a512:	d106      	bne.n	800a522 <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 800a514:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a518:	f04f 0100 	mov.w	r1, #0
 800a51c:	f7fe faf4 	bl	8008b08 <HAL_RCCEx_GetPeriphCLKFreq>
 800a520:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	4a1f      	ldr	r2, [pc, #124]	; (800a5a4 <HAL_SAI_Init+0x284>)
 800a528:	4293      	cmp	r3, r2
 800a52a:	d106      	bne.n	800a53a <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800a52c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800a530:	f04f 0100 	mov.w	r1, #0
 800a534:	f7fe fae8 	bl	8008b08 <HAL_RCCEx_GetPeriphCLKFreq>
 800a538:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	4a22      	ldr	r2, [pc, #136]	; (800a5c8 <HAL_SAI_Init+0x2a8>)
 800a540:	4293      	cmp	r3, r2
 800a542:	d106      	bne.n	800a552 <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800a544:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a548:	f04f 0100 	mov.w	r1, #0
 800a54c:	f7fe fadc 	bl	8008b08 <HAL_RCCEx_GetPeriphCLKFreq>
 800a550:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	699b      	ldr	r3, [r3, #24]
 800a556:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a55a:	d139      	bne.n	800a5d0 <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a560:	2b04      	cmp	r3, #4
 800a562:	d102      	bne.n	800a56a <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800a564:	2340      	movs	r3, #64	; 0x40
 800a566:	60fb      	str	r3, [r7, #12]
 800a568:	e00a      	b.n	800a580 <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a56e:	2b08      	cmp	r3, #8
 800a570:	d103      	bne.n	800a57a <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800a572:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a576:	60fb      	str	r3, [r7, #12]
 800a578:	e002      	b.n	800a580 <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a57e:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800a580:	697a      	ldr	r2, [r7, #20]
 800a582:	4613      	mov	r3, r2
 800a584:	009b      	lsls	r3, r3, #2
 800a586:	4413      	add	r3, r2
 800a588:	005b      	lsls	r3, r3, #1
 800a58a:	4619      	mov	r1, r3
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6a1b      	ldr	r3, [r3, #32]
 800a590:	68fa      	ldr	r2, [r7, #12]
 800a592:	fb02 f303 	mul.w	r3, r2, r3
 800a596:	fbb1 f3f3 	udiv	r3, r1, r3
 800a59a:	613b      	str	r3, [r7, #16]
 800a59c:	e030      	b.n	800a600 <HAL_SAI_Init+0x2e0>
 800a59e:	bf00      	nop
 800a5a0:	40015804 	.word	0x40015804
 800a5a4:	58005404 	.word	0x58005404
 800a5a8:	40015824 	.word	0x40015824
 800a5ac:	40015800 	.word	0x40015800
 800a5b0:	40015c04 	.word	0x40015c04
 800a5b4:	40015c24 	.word	0x40015c24
 800a5b8:	40015c00 	.word	0x40015c00
 800a5bc:	40016004 	.word	0x40016004
 800a5c0:	40016024 	.word	0x40016024
 800a5c4:	40016000 	.word	0x40016000
 800a5c8:	58005424 	.word	0x58005424
 800a5cc:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a5d8:	d101      	bne.n	800a5de <HAL_SAI_Init+0x2be>
 800a5da:	2302      	movs	r3, #2
 800a5dc:	e000      	b.n	800a5e0 <HAL_SAI_Init+0x2c0>
 800a5de:	2301      	movs	r3, #1
 800a5e0:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800a5e2:	697a      	ldr	r2, [r7, #20]
 800a5e4:	4613      	mov	r3, r2
 800a5e6:	009b      	lsls	r3, r3, #2
 800a5e8:	4413      	add	r3, r2
 800a5ea:	005b      	lsls	r3, r3, #1
 800a5ec:	4619      	mov	r1, r3
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6a1b      	ldr	r3, [r3, #32]
 800a5f2:	68ba      	ldr	r2, [r7, #8]
 800a5f4:	fb02 f303 	mul.w	r3, r2, r3
 800a5f8:	021b      	lsls	r3, r3, #8
 800a5fa:	fbb1 f3f3 	udiv	r3, r1, r3
 800a5fe:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800a600:	693b      	ldr	r3, [r7, #16]
 800a602:	4a95      	ldr	r2, [pc, #596]	; (800a858 <HAL_SAI_Init+0x538>)
 800a604:	fba2 2303 	umull	r2, r3, r2, r3
 800a608:	08da      	lsrs	r2, r3, #3
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800a60e:	6939      	ldr	r1, [r7, #16]
 800a610:	4b91      	ldr	r3, [pc, #580]	; (800a858 <HAL_SAI_Init+0x538>)
 800a612:	fba3 2301 	umull	r2, r3, r3, r1
 800a616:	08da      	lsrs	r2, r3, #3
 800a618:	4613      	mov	r3, r2
 800a61a:	009b      	lsls	r3, r3, #2
 800a61c:	4413      	add	r3, r2
 800a61e:	005b      	lsls	r3, r3, #1
 800a620:	1aca      	subs	r2, r1, r3
 800a622:	2a08      	cmp	r2, #8
 800a624:	d904      	bls.n	800a630 <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a62a:	1c5a      	adds	r2, r3, #1
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a634:	2b04      	cmp	r3, #4
 800a636:	d104      	bne.n	800a642 <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a63c:	085a      	lsrs	r2, r3, #1
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	685b      	ldr	r3, [r3, #4]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d003      	beq.n	800a652 <HAL_SAI_Init+0x332>
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	685b      	ldr	r3, [r3, #4]
 800a64e:	2b02      	cmp	r3, #2
 800a650:	d109      	bne.n	800a666 <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a656:	2b01      	cmp	r3, #1
 800a658:	d101      	bne.n	800a65e <HAL_SAI_Init+0x33e>
 800a65a:	2300      	movs	r3, #0
 800a65c:	e001      	b.n	800a662 <HAL_SAI_Init+0x342>
 800a65e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a662:	623b      	str	r3, [r7, #32]
 800a664:	e008      	b.n	800a678 <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a66a:	2b01      	cmp	r3, #1
 800a66c:	d102      	bne.n	800a674 <HAL_SAI_Init+0x354>
 800a66e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a672:	e000      	b.n	800a676 <HAL_SAI_Init+0x356>
 800a674:	2300      	movs	r3, #0
 800a676:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800a678:	f7f8 fb92 	bl	8002da0 <HAL_GetREVID>
 800a67c:	4603      	mov	r3, r0
 800a67e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a682:	d331      	bcc.n	800a6e8 <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	6819      	ldr	r1, [r3, #0]
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681a      	ldr	r2, [r3, #0]
 800a68e:	4b73      	ldr	r3, [pc, #460]	; (800a85c <HAL_SAI_Init+0x53c>)
 800a690:	400b      	ands	r3, r1
 800a692:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	6819      	ldr	r1, [r3, #0]
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	685a      	ldr	r2, [r3, #4]
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6a2:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a6a8:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6ae:	431a      	orrs	r2, r3
 800a6b0:	6a3b      	ldr	r3, [r7, #32]
 800a6b2:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800a6b4:	69fb      	ldr	r3, [r7, #28]
 800a6b6:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800a6bc:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	695b      	ldr	r3, [r3, #20]
 800a6c2:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a6c8:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ce:	051b      	lsls	r3, r3, #20
 800a6d0:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a6d6:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	691b      	ldr	r3, [r3, #16]
 800a6dc:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	430a      	orrs	r2, r1
 800a6e4:	601a      	str	r2, [r3, #0]
 800a6e6:	e02d      	b.n	800a744 <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	6819      	ldr	r1, [r3, #0]
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681a      	ldr	r2, [r3, #0]
 800a6f2:	4b5b      	ldr	r3, [pc, #364]	; (800a860 <HAL_SAI_Init+0x540>)
 800a6f4:	400b      	ands	r3, r1
 800a6f6:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	6819      	ldr	r1, [r3, #0]
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	685a      	ldr	r2, [r3, #4]
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a706:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a70c:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a712:	431a      	orrs	r2, r3
 800a714:	6a3b      	ldr	r3, [r7, #32]
 800a716:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800a718:	69fb      	ldr	r3, [r7, #28]
 800a71a:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800a720:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	695b      	ldr	r3, [r3, #20]
 800a726:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a72c:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a732:	051b      	lsls	r3, r3, #20
 800a734:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a73a:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	430a      	orrs	r2, r1
 800a742:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	6859      	ldr	r1, [r3, #4]
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681a      	ldr	r2, [r3, #0]
 800a74e:	4b45      	ldr	r3, [pc, #276]	; (800a864 <HAL_SAI_Init+0x544>)
 800a750:	400b      	ands	r3, r1
 800a752:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	6859      	ldr	r1, [r3, #4]
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	69da      	ldr	r2, [r3, #28]
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a762:	431a      	orrs	r2, r3
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a768:	431a      	orrs	r2, r3
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	430a      	orrs	r2, r1
 800a770:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	6899      	ldr	r1, [r3, #8]
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681a      	ldr	r2, [r3, #0]
 800a77c:	4b3a      	ldr	r3, [pc, #232]	; (800a868 <HAL_SAI_Init+0x548>)
 800a77e:	400b      	ands	r3, r1
 800a780:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	6899      	ldr	r1, [r3, #8]
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a78c:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a792:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 800a798:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 800a79e:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7a4:	3b01      	subs	r3, #1
 800a7a6:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800a7a8:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	430a      	orrs	r2, r1
 800a7b0:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	68d9      	ldr	r1, [r3, #12]
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681a      	ldr	r2, [r3, #0]
 800a7bc:	f24f 0320 	movw	r3, #61472	; 0xf020
 800a7c0:	400b      	ands	r3, r1
 800a7c2:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	68d9      	ldr	r1, [r3, #12]
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7d2:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a7d8:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a7da:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7e0:	3b01      	subs	r3, #1
 800a7e2:	021b      	lsls	r3, r3, #8
 800a7e4:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	430a      	orrs	r2, r1
 800a7ec:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	4a1e      	ldr	r2, [pc, #120]	; (800a86c <HAL_SAI_Init+0x54c>)
 800a7f4:	4293      	cmp	r3, r2
 800a7f6:	d004      	beq.n	800a802 <HAL_SAI_Init+0x4e2>
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	4a1c      	ldr	r2, [pc, #112]	; (800a870 <HAL_SAI_Init+0x550>)
 800a7fe:	4293      	cmp	r3, r2
 800a800:	d119      	bne.n	800a836 <HAL_SAI_Init+0x516>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800a802:	69bb      	ldr	r3, [r7, #24]
 800a804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a806:	f023 0201 	bic.w	r2, r3, #1
 800a80a:	69bb      	ldr	r3, [r7, #24]
 800a80c:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a814:	2b01      	cmp	r3, #1
 800a816:	d10e      	bne.n	800a836 <HAL_SAI_Init+0x516>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a820:	3b01      	subs	r3, #1
 800a822:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800a824:	431a      	orrs	r2, r3
 800a826:	69bb      	ldr	r3, [r7, #24]
 800a828:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800a82a:	69bb      	ldr	r3, [r7, #24]
 800a82c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a82e:	f043 0201 	orr.w	r2, r3, #1
 800a832:	69bb      	ldr	r3, [r7, #24]
 800a834:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	2200      	movs	r2, #0
 800a83a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	2201      	movs	r2, #1
 800a842:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2200      	movs	r2, #0
 800a84a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 800a84e:	2300      	movs	r3, #0
}
 800a850:	4618      	mov	r0, r3
 800a852:	3728      	adds	r7, #40	; 0x28
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}
 800a858:	cccccccd 	.word	0xcccccccd
 800a85c:	f005c010 	.word	0xf005c010
 800a860:	f805c010 	.word	0xf805c010
 800a864:	ffff1ff0 	.word	0xffff1ff0
 800a868:	fff88000 	.word	0xfff88000
 800a86c:	40015804 	.word	0x40015804
 800a870:	58005404 	.word	0x58005404

0800a874 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800a874:	b480      	push	{r7}
 800a876:	b085      	sub	sp, #20
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800a87c:	4b18      	ldr	r3, [pc, #96]	; (800a8e0 <SAI_Disable+0x6c>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	4a18      	ldr	r2, [pc, #96]	; (800a8e4 <SAI_Disable+0x70>)
 800a882:	fba2 2303 	umull	r2, r3, r2, r3
 800a886:	0b1b      	lsrs	r3, r3, #12
 800a888:	009b      	lsls	r3, r3, #2
 800a88a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800a88c:	2300      	movs	r3, #0
 800a88e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	681a      	ldr	r2, [r3, #0]
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a89e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d10a      	bne.n	800a8bc <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a8ac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 800a8b6:	2303      	movs	r3, #3
 800a8b8:	72fb      	strb	r3, [r7, #11]
      break;
 800a8ba:	e009      	b.n	800a8d0 <SAI_Disable+0x5c>
    }
    count--;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	3b01      	subs	r3, #1
 800a8c0:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d1e7      	bne.n	800a8a0 <SAI_Disable+0x2c>

  return status;
 800a8d0:	7afb      	ldrb	r3, [r7, #11]
}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	3714      	adds	r7, #20
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8dc:	4770      	bx	lr
 800a8de:	bf00      	nop
 800a8e0:	24000028 	.word	0x24000028
 800a8e4:	95cbec1b 	.word	0x95cbec1b

0800a8e8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b082      	sub	sp, #8
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
 800a8f0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d101      	bne.n	800a8fc <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800a8f8:	2301      	movs	r3, #1
 800a8fa:	e02b      	b.n	800a954 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a902:	b2db      	uxtb	r3, r3
 800a904:	2b00      	cmp	r3, #0
 800a906:	d106      	bne.n	800a916 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2200      	movs	r2, #0
 800a90c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f7f7 fffb 	bl	800290c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2202      	movs	r2, #2
 800a91a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681a      	ldr	r2, [r3, #0]
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	3304      	adds	r3, #4
 800a926:	4619      	mov	r1, r3
 800a928:	4610      	mov	r0, r2
 800a92a:	f003 f905 	bl	800db38 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6818      	ldr	r0, [r3, #0]
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	685b      	ldr	r3, [r3, #4]
 800a936:	461a      	mov	r2, r3
 800a938:	6839      	ldr	r1, [r7, #0]
 800a93a:	f003 f959 	bl	800dbf0 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800a93e:	4b07      	ldr	r3, [pc, #28]	; (800a95c <HAL_SDRAM_Init+0x74>)
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	4a06      	ldr	r2, [pc, #24]	; (800a95c <HAL_SDRAM_Init+0x74>)
 800a944:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a948:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2201      	movs	r2, #1
 800a94e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a952:	2300      	movs	r3, #0
}
 800a954:	4618      	mov	r0, r3
 800a956:	3708      	adds	r7, #8
 800a958:	46bd      	mov	sp, r7
 800a95a:	bd80      	pop	{r7, pc}
 800a95c:	52004000 	.word	0x52004000

0800a960 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b084      	sub	sp, #16
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d101      	bne.n	800a972 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a96e:	2301      	movs	r3, #1
 800a970:	e10f      	b.n	800ab92 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2200      	movs	r2, #0
 800a976:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	4a87      	ldr	r2, [pc, #540]	; (800ab9c <HAL_SPI_Init+0x23c>)
 800a97e:	4293      	cmp	r3, r2
 800a980:	d00f      	beq.n	800a9a2 <HAL_SPI_Init+0x42>
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	4a86      	ldr	r2, [pc, #536]	; (800aba0 <HAL_SPI_Init+0x240>)
 800a988:	4293      	cmp	r3, r2
 800a98a:	d00a      	beq.n	800a9a2 <HAL_SPI_Init+0x42>
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	4a84      	ldr	r2, [pc, #528]	; (800aba4 <HAL_SPI_Init+0x244>)
 800a992:	4293      	cmp	r3, r2
 800a994:	d005      	beq.n	800a9a2 <HAL_SPI_Init+0x42>
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	68db      	ldr	r3, [r3, #12]
 800a99a:	2b0f      	cmp	r3, #15
 800a99c:	d901      	bls.n	800a9a2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800a99e:	2301      	movs	r3, #1
 800a9a0:	e0f7      	b.n	800ab92 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f000 f900 	bl	800aba8 <SPI_GetPacketSize>
 800a9a8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	4a7b      	ldr	r2, [pc, #492]	; (800ab9c <HAL_SPI_Init+0x23c>)
 800a9b0:	4293      	cmp	r3, r2
 800a9b2:	d00c      	beq.n	800a9ce <HAL_SPI_Init+0x6e>
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	4a79      	ldr	r2, [pc, #484]	; (800aba0 <HAL_SPI_Init+0x240>)
 800a9ba:	4293      	cmp	r3, r2
 800a9bc:	d007      	beq.n	800a9ce <HAL_SPI_Init+0x6e>
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	4a78      	ldr	r2, [pc, #480]	; (800aba4 <HAL_SPI_Init+0x244>)
 800a9c4:	4293      	cmp	r3, r2
 800a9c6:	d002      	beq.n	800a9ce <HAL_SPI_Init+0x6e>
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	2b08      	cmp	r3, #8
 800a9cc:	d811      	bhi.n	800a9f2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a9d2:	4a72      	ldr	r2, [pc, #456]	; (800ab9c <HAL_SPI_Init+0x23c>)
 800a9d4:	4293      	cmp	r3, r2
 800a9d6:	d009      	beq.n	800a9ec <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	4a70      	ldr	r2, [pc, #448]	; (800aba0 <HAL_SPI_Init+0x240>)
 800a9de:	4293      	cmp	r3, r2
 800a9e0:	d004      	beq.n	800a9ec <HAL_SPI_Init+0x8c>
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	4a6f      	ldr	r2, [pc, #444]	; (800aba4 <HAL_SPI_Init+0x244>)
 800a9e8:	4293      	cmp	r3, r2
 800a9ea:	d104      	bne.n	800a9f6 <HAL_SPI_Init+0x96>
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	2b10      	cmp	r3, #16
 800a9f0:	d901      	bls.n	800a9f6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	e0cd      	b.n	800ab92 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a9fc:	b2db      	uxtb	r3, r3
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d106      	bne.n	800aa10 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	2200      	movs	r2, #0
 800aa06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800aa0a:	6878      	ldr	r0, [r7, #4]
 800aa0c:	f7f7 fce8 	bl	80023e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2202      	movs	r2, #2
 800aa14:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	681a      	ldr	r2, [r3, #0]
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	f022 0201 	bic.w	r2, r2, #1
 800aa26:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	689b      	ldr	r3, [r3, #8]
 800aa2e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800aa32:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	699b      	ldr	r3, [r3, #24]
 800aa38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aa3c:	d119      	bne.n	800aa72 <HAL_SPI_Init+0x112>
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	685b      	ldr	r3, [r3, #4]
 800aa42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aa46:	d103      	bne.n	800aa50 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d008      	beq.n	800aa62 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d10c      	bne.n	800aa72 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800aa5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aa60:	d107      	bne.n	800aa72 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	681a      	ldr	r2, [r3, #0]
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800aa70:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	685b      	ldr	r3, [r3, #4]
 800aa76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d00f      	beq.n	800aa9e <HAL_SPI_Init+0x13e>
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	68db      	ldr	r3, [r3, #12]
 800aa82:	2b06      	cmp	r3, #6
 800aa84:	d90b      	bls.n	800aa9e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	430a      	orrs	r2, r1
 800aa9a:	601a      	str	r2, [r3, #0]
 800aa9c:	e007      	b.n	800aaae <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	681a      	ldr	r2, [r3, #0]
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800aaac:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	69da      	ldr	r2, [r3, #28]
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aab6:	431a      	orrs	r2, r3
 800aab8:	68bb      	ldr	r3, [r7, #8]
 800aaba:	431a      	orrs	r2, r3
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aac0:	ea42 0103 	orr.w	r1, r2, r3
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	68da      	ldr	r2, [r3, #12]
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	430a      	orrs	r2, r1
 800aace:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aad8:	431a      	orrs	r2, r3
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aade:	431a      	orrs	r2, r3
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	699b      	ldr	r3, [r3, #24]
 800aae4:	431a      	orrs	r2, r3
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	691b      	ldr	r3, [r3, #16]
 800aaea:	431a      	orrs	r2, r3
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	695b      	ldr	r3, [r3, #20]
 800aaf0:	431a      	orrs	r2, r3
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	6a1b      	ldr	r3, [r3, #32]
 800aaf6:	431a      	orrs	r2, r3
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	685b      	ldr	r3, [r3, #4]
 800aafc:	431a      	orrs	r2, r3
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab02:	431a      	orrs	r2, r3
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	689b      	ldr	r3, [r3, #8]
 800ab08:	431a      	orrs	r2, r3
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab0e:	ea42 0103 	orr.w	r1, r2, r3
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	430a      	orrs	r2, r1
 800ab1c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	685b      	ldr	r3, [r3, #4]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d113      	bne.n	800ab4e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	689b      	ldr	r3, [r3, #8]
 800ab2c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ab38:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	689b      	ldr	r3, [r3, #8]
 800ab40:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ab4c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	f022 0201 	bic.w	r2, r2, #1
 800ab5c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	685b      	ldr	r3, [r3, #4]
 800ab62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d00a      	beq.n	800ab80 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	68db      	ldr	r3, [r3, #12]
 800ab70:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	430a      	orrs	r2, r1
 800ab7e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2200      	movs	r2, #0
 800ab84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2201      	movs	r2, #1
 800ab8c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800ab90:	2300      	movs	r3, #0
}
 800ab92:	4618      	mov	r0, r3
 800ab94:	3710      	adds	r7, #16
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}
 800ab9a:	bf00      	nop
 800ab9c:	40013000 	.word	0x40013000
 800aba0:	40003800 	.word	0x40003800
 800aba4:	40003c00 	.word	0x40003c00

0800aba8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800aba8:	b480      	push	{r7}
 800abaa:	b085      	sub	sp, #20
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abb4:	095b      	lsrs	r3, r3, #5
 800abb6:	3301      	adds	r3, #1
 800abb8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	68db      	ldr	r3, [r3, #12]
 800abbe:	3301      	adds	r3, #1
 800abc0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800abc2:	68bb      	ldr	r3, [r7, #8]
 800abc4:	3307      	adds	r3, #7
 800abc6:	08db      	lsrs	r3, r3, #3
 800abc8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800abca:	68bb      	ldr	r3, [r7, #8]
 800abcc:	68fa      	ldr	r2, [r7, #12]
 800abce:	fb02 f303 	mul.w	r3, r2, r3
}
 800abd2:	4618      	mov	r0, r3
 800abd4:	3714      	adds	r7, #20
 800abd6:	46bd      	mov	sp, r7
 800abd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abdc:	4770      	bx	lr

0800abde <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800abde:	b580      	push	{r7, lr}
 800abe0:	b082      	sub	sp, #8
 800abe2:	af00      	add	r7, sp, #0
 800abe4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d101      	bne.n	800abf0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800abec:	2301      	movs	r3, #1
 800abee:	e049      	b.n	800ac84 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800abf6:	b2db      	uxtb	r3, r3
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d106      	bne.n	800ac0a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	2200      	movs	r2, #0
 800ac00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ac04:	6878      	ldr	r0, [r7, #4]
 800ac06:	f7f7 fcb5 	bl	8002574 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	2202      	movs	r2, #2
 800ac0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681a      	ldr	r2, [r3, #0]
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	3304      	adds	r3, #4
 800ac1a:	4619      	mov	r1, r3
 800ac1c:	4610      	mov	r0, r2
 800ac1e:	f000 f99d 	bl	800af5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	2201      	movs	r2, #1
 800ac26:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	2201      	movs	r2, #1
 800ac2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2201      	movs	r2, #1
 800ac36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	2201      	movs	r2, #1
 800ac3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2201      	movs	r2, #1
 800ac46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	2201      	movs	r2, #1
 800ac4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	2201      	movs	r2, #1
 800ac56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2201      	movs	r2, #1
 800ac5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2201      	movs	r2, #1
 800ac66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2201      	movs	r2, #1
 800ac6e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2201      	movs	r2, #1
 800ac76:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2201      	movs	r2, #1
 800ac7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ac82:	2300      	movs	r3, #0
}
 800ac84:	4618      	mov	r0, r3
 800ac86:	3708      	adds	r7, #8
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bd80      	pop	{r7, pc}

0800ac8c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800ac8c:	b480      	push	{r7}
 800ac8e:	b085      	sub	sp, #20
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac9a:	b2db      	uxtb	r3, r3
 800ac9c:	2b01      	cmp	r3, #1
 800ac9e:	d001      	beq.n	800aca4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800aca0:	2301      	movs	r3, #1
 800aca2:	e04c      	b.n	800ad3e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2202      	movs	r2, #2
 800aca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	4a26      	ldr	r2, [pc, #152]	; (800ad4c <HAL_TIM_Base_Start+0xc0>)
 800acb2:	4293      	cmp	r3, r2
 800acb4:	d022      	beq.n	800acfc <HAL_TIM_Base_Start+0x70>
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acbe:	d01d      	beq.n	800acfc <HAL_TIM_Base_Start+0x70>
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	4a22      	ldr	r2, [pc, #136]	; (800ad50 <HAL_TIM_Base_Start+0xc4>)
 800acc6:	4293      	cmp	r3, r2
 800acc8:	d018      	beq.n	800acfc <HAL_TIM_Base_Start+0x70>
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	4a21      	ldr	r2, [pc, #132]	; (800ad54 <HAL_TIM_Base_Start+0xc8>)
 800acd0:	4293      	cmp	r3, r2
 800acd2:	d013      	beq.n	800acfc <HAL_TIM_Base_Start+0x70>
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	4a1f      	ldr	r2, [pc, #124]	; (800ad58 <HAL_TIM_Base_Start+0xcc>)
 800acda:	4293      	cmp	r3, r2
 800acdc:	d00e      	beq.n	800acfc <HAL_TIM_Base_Start+0x70>
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	4a1e      	ldr	r2, [pc, #120]	; (800ad5c <HAL_TIM_Base_Start+0xd0>)
 800ace4:	4293      	cmp	r3, r2
 800ace6:	d009      	beq.n	800acfc <HAL_TIM_Base_Start+0x70>
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	4a1c      	ldr	r2, [pc, #112]	; (800ad60 <HAL_TIM_Base_Start+0xd4>)
 800acee:	4293      	cmp	r3, r2
 800acf0:	d004      	beq.n	800acfc <HAL_TIM_Base_Start+0x70>
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	4a1b      	ldr	r2, [pc, #108]	; (800ad64 <HAL_TIM_Base_Start+0xd8>)
 800acf8:	4293      	cmp	r3, r2
 800acfa:	d115      	bne.n	800ad28 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	689a      	ldr	r2, [r3, #8]
 800ad02:	4b19      	ldr	r3, [pc, #100]	; (800ad68 <HAL_TIM_Base_Start+0xdc>)
 800ad04:	4013      	ands	r3, r2
 800ad06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	2b06      	cmp	r3, #6
 800ad0c:	d015      	beq.n	800ad3a <HAL_TIM_Base_Start+0xae>
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad14:	d011      	beq.n	800ad3a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	681a      	ldr	r2, [r3, #0]
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	f042 0201 	orr.w	r2, r2, #1
 800ad24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad26:	e008      	b.n	800ad3a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	681a      	ldr	r2, [r3, #0]
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	f042 0201 	orr.w	r2, r2, #1
 800ad36:	601a      	str	r2, [r3, #0]
 800ad38:	e000      	b.n	800ad3c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad3a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ad3c:	2300      	movs	r3, #0
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	3714      	adds	r7, #20
 800ad42:	46bd      	mov	sp, r7
 800ad44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad48:	4770      	bx	lr
 800ad4a:	bf00      	nop
 800ad4c:	40010000 	.word	0x40010000
 800ad50:	40000400 	.word	0x40000400
 800ad54:	40000800 	.word	0x40000800
 800ad58:	40000c00 	.word	0x40000c00
 800ad5c:	40010400 	.word	0x40010400
 800ad60:	40001800 	.word	0x40001800
 800ad64:	40014000 	.word	0x40014000
 800ad68:	00010007 	.word	0x00010007

0800ad6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b084      	sub	sp, #16
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
 800ad74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ad76:	2300      	movs	r3, #0
 800ad78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ad80:	2b01      	cmp	r3, #1
 800ad82:	d101      	bne.n	800ad88 <HAL_TIM_ConfigClockSource+0x1c>
 800ad84:	2302      	movs	r3, #2
 800ad86:	e0dc      	b.n	800af42 <HAL_TIM_ConfigClockSource+0x1d6>
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2201      	movs	r2, #1
 800ad8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2202      	movs	r2, #2
 800ad94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	689b      	ldr	r3, [r3, #8]
 800ad9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ada0:	68ba      	ldr	r2, [r7, #8]
 800ada2:	4b6a      	ldr	r3, [pc, #424]	; (800af4c <HAL_TIM_ConfigClockSource+0x1e0>)
 800ada4:	4013      	ands	r3, r2
 800ada6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ada8:	68bb      	ldr	r3, [r7, #8]
 800adaa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800adae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	68ba      	ldr	r2, [r7, #8]
 800adb6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	4a64      	ldr	r2, [pc, #400]	; (800af50 <HAL_TIM_ConfigClockSource+0x1e4>)
 800adbe:	4293      	cmp	r3, r2
 800adc0:	f000 80a9 	beq.w	800af16 <HAL_TIM_ConfigClockSource+0x1aa>
 800adc4:	4a62      	ldr	r2, [pc, #392]	; (800af50 <HAL_TIM_ConfigClockSource+0x1e4>)
 800adc6:	4293      	cmp	r3, r2
 800adc8:	f200 80ae 	bhi.w	800af28 <HAL_TIM_ConfigClockSource+0x1bc>
 800adcc:	4a61      	ldr	r2, [pc, #388]	; (800af54 <HAL_TIM_ConfigClockSource+0x1e8>)
 800adce:	4293      	cmp	r3, r2
 800add0:	f000 80a1 	beq.w	800af16 <HAL_TIM_ConfigClockSource+0x1aa>
 800add4:	4a5f      	ldr	r2, [pc, #380]	; (800af54 <HAL_TIM_ConfigClockSource+0x1e8>)
 800add6:	4293      	cmp	r3, r2
 800add8:	f200 80a6 	bhi.w	800af28 <HAL_TIM_ConfigClockSource+0x1bc>
 800addc:	4a5e      	ldr	r2, [pc, #376]	; (800af58 <HAL_TIM_ConfigClockSource+0x1ec>)
 800adde:	4293      	cmp	r3, r2
 800ade0:	f000 8099 	beq.w	800af16 <HAL_TIM_ConfigClockSource+0x1aa>
 800ade4:	4a5c      	ldr	r2, [pc, #368]	; (800af58 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ade6:	4293      	cmp	r3, r2
 800ade8:	f200 809e 	bhi.w	800af28 <HAL_TIM_ConfigClockSource+0x1bc>
 800adec:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800adf0:	f000 8091 	beq.w	800af16 <HAL_TIM_ConfigClockSource+0x1aa>
 800adf4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800adf8:	f200 8096 	bhi.w	800af28 <HAL_TIM_ConfigClockSource+0x1bc>
 800adfc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ae00:	f000 8089 	beq.w	800af16 <HAL_TIM_ConfigClockSource+0x1aa>
 800ae04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ae08:	f200 808e 	bhi.w	800af28 <HAL_TIM_ConfigClockSource+0x1bc>
 800ae0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae10:	d03e      	beq.n	800ae90 <HAL_TIM_ConfigClockSource+0x124>
 800ae12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae16:	f200 8087 	bhi.w	800af28 <HAL_TIM_ConfigClockSource+0x1bc>
 800ae1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae1e:	f000 8086 	beq.w	800af2e <HAL_TIM_ConfigClockSource+0x1c2>
 800ae22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae26:	d87f      	bhi.n	800af28 <HAL_TIM_ConfigClockSource+0x1bc>
 800ae28:	2b70      	cmp	r3, #112	; 0x70
 800ae2a:	d01a      	beq.n	800ae62 <HAL_TIM_ConfigClockSource+0xf6>
 800ae2c:	2b70      	cmp	r3, #112	; 0x70
 800ae2e:	d87b      	bhi.n	800af28 <HAL_TIM_ConfigClockSource+0x1bc>
 800ae30:	2b60      	cmp	r3, #96	; 0x60
 800ae32:	d050      	beq.n	800aed6 <HAL_TIM_ConfigClockSource+0x16a>
 800ae34:	2b60      	cmp	r3, #96	; 0x60
 800ae36:	d877      	bhi.n	800af28 <HAL_TIM_ConfigClockSource+0x1bc>
 800ae38:	2b50      	cmp	r3, #80	; 0x50
 800ae3a:	d03c      	beq.n	800aeb6 <HAL_TIM_ConfigClockSource+0x14a>
 800ae3c:	2b50      	cmp	r3, #80	; 0x50
 800ae3e:	d873      	bhi.n	800af28 <HAL_TIM_ConfigClockSource+0x1bc>
 800ae40:	2b40      	cmp	r3, #64	; 0x40
 800ae42:	d058      	beq.n	800aef6 <HAL_TIM_ConfigClockSource+0x18a>
 800ae44:	2b40      	cmp	r3, #64	; 0x40
 800ae46:	d86f      	bhi.n	800af28 <HAL_TIM_ConfigClockSource+0x1bc>
 800ae48:	2b30      	cmp	r3, #48	; 0x30
 800ae4a:	d064      	beq.n	800af16 <HAL_TIM_ConfigClockSource+0x1aa>
 800ae4c:	2b30      	cmp	r3, #48	; 0x30
 800ae4e:	d86b      	bhi.n	800af28 <HAL_TIM_ConfigClockSource+0x1bc>
 800ae50:	2b20      	cmp	r3, #32
 800ae52:	d060      	beq.n	800af16 <HAL_TIM_ConfigClockSource+0x1aa>
 800ae54:	2b20      	cmp	r3, #32
 800ae56:	d867      	bhi.n	800af28 <HAL_TIM_ConfigClockSource+0x1bc>
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d05c      	beq.n	800af16 <HAL_TIM_ConfigClockSource+0x1aa>
 800ae5c:	2b10      	cmp	r3, #16
 800ae5e:	d05a      	beq.n	800af16 <HAL_TIM_ConfigClockSource+0x1aa>
 800ae60:	e062      	b.n	800af28 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	6818      	ldr	r0, [r3, #0]
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	6899      	ldr	r1, [r3, #8]
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	685a      	ldr	r2, [r3, #4]
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	68db      	ldr	r3, [r3, #12]
 800ae72:	f000 f98b 	bl	800b18c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	689b      	ldr	r3, [r3, #8]
 800ae7c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ae7e:	68bb      	ldr	r3, [r7, #8]
 800ae80:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ae84:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	68ba      	ldr	r2, [r7, #8]
 800ae8c:	609a      	str	r2, [r3, #8]
      break;
 800ae8e:	e04f      	b.n	800af30 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	6818      	ldr	r0, [r3, #0]
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	6899      	ldr	r1, [r3, #8]
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	685a      	ldr	r2, [r3, #4]
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	68db      	ldr	r3, [r3, #12]
 800aea0:	f000 f974 	bl	800b18c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	689a      	ldr	r2, [r3, #8]
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800aeb2:	609a      	str	r2, [r3, #8]
      break;
 800aeb4:	e03c      	b.n	800af30 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	6818      	ldr	r0, [r3, #0]
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	6859      	ldr	r1, [r3, #4]
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	68db      	ldr	r3, [r3, #12]
 800aec2:	461a      	mov	r2, r3
 800aec4:	f000 f8e4 	bl	800b090 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	2150      	movs	r1, #80	; 0x50
 800aece:	4618      	mov	r0, r3
 800aed0:	f000 f93e 	bl	800b150 <TIM_ITRx_SetConfig>
      break;
 800aed4:	e02c      	b.n	800af30 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6818      	ldr	r0, [r3, #0]
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	6859      	ldr	r1, [r3, #4]
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	68db      	ldr	r3, [r3, #12]
 800aee2:	461a      	mov	r2, r3
 800aee4:	f000 f903 	bl	800b0ee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	2160      	movs	r1, #96	; 0x60
 800aeee:	4618      	mov	r0, r3
 800aef0:	f000 f92e 	bl	800b150 <TIM_ITRx_SetConfig>
      break;
 800aef4:	e01c      	b.n	800af30 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	6818      	ldr	r0, [r3, #0]
 800aefa:	683b      	ldr	r3, [r7, #0]
 800aefc:	6859      	ldr	r1, [r3, #4]
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	68db      	ldr	r3, [r3, #12]
 800af02:	461a      	mov	r2, r3
 800af04:	f000 f8c4 	bl	800b090 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	2140      	movs	r1, #64	; 0x40
 800af0e:	4618      	mov	r0, r3
 800af10:	f000 f91e 	bl	800b150 <TIM_ITRx_SetConfig>
      break;
 800af14:	e00c      	b.n	800af30 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681a      	ldr	r2, [r3, #0]
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	4619      	mov	r1, r3
 800af20:	4610      	mov	r0, r2
 800af22:	f000 f915 	bl	800b150 <TIM_ITRx_SetConfig>
      break;
 800af26:	e003      	b.n	800af30 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800af28:	2301      	movs	r3, #1
 800af2a:	73fb      	strb	r3, [r7, #15]
      break;
 800af2c:	e000      	b.n	800af30 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800af2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2201      	movs	r2, #1
 800af34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2200      	movs	r2, #0
 800af3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800af40:	7bfb      	ldrb	r3, [r7, #15]
}
 800af42:	4618      	mov	r0, r3
 800af44:	3710      	adds	r7, #16
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}
 800af4a:	bf00      	nop
 800af4c:	ffceff88 	.word	0xffceff88
 800af50:	00100040 	.word	0x00100040
 800af54:	00100030 	.word	0x00100030
 800af58:	00100020 	.word	0x00100020

0800af5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800af5c:	b480      	push	{r7}
 800af5e:	b085      	sub	sp, #20
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
 800af64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	4a40      	ldr	r2, [pc, #256]	; (800b070 <TIM_Base_SetConfig+0x114>)
 800af70:	4293      	cmp	r3, r2
 800af72:	d013      	beq.n	800af9c <TIM_Base_SetConfig+0x40>
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af7a:	d00f      	beq.n	800af9c <TIM_Base_SetConfig+0x40>
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	4a3d      	ldr	r2, [pc, #244]	; (800b074 <TIM_Base_SetConfig+0x118>)
 800af80:	4293      	cmp	r3, r2
 800af82:	d00b      	beq.n	800af9c <TIM_Base_SetConfig+0x40>
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	4a3c      	ldr	r2, [pc, #240]	; (800b078 <TIM_Base_SetConfig+0x11c>)
 800af88:	4293      	cmp	r3, r2
 800af8a:	d007      	beq.n	800af9c <TIM_Base_SetConfig+0x40>
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	4a3b      	ldr	r2, [pc, #236]	; (800b07c <TIM_Base_SetConfig+0x120>)
 800af90:	4293      	cmp	r3, r2
 800af92:	d003      	beq.n	800af9c <TIM_Base_SetConfig+0x40>
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	4a3a      	ldr	r2, [pc, #232]	; (800b080 <TIM_Base_SetConfig+0x124>)
 800af98:	4293      	cmp	r3, r2
 800af9a:	d108      	bne.n	800afae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afa2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	685b      	ldr	r3, [r3, #4]
 800afa8:	68fa      	ldr	r2, [r7, #12]
 800afaa:	4313      	orrs	r3, r2
 800afac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	4a2f      	ldr	r2, [pc, #188]	; (800b070 <TIM_Base_SetConfig+0x114>)
 800afb2:	4293      	cmp	r3, r2
 800afb4:	d01f      	beq.n	800aff6 <TIM_Base_SetConfig+0x9a>
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800afbc:	d01b      	beq.n	800aff6 <TIM_Base_SetConfig+0x9a>
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	4a2c      	ldr	r2, [pc, #176]	; (800b074 <TIM_Base_SetConfig+0x118>)
 800afc2:	4293      	cmp	r3, r2
 800afc4:	d017      	beq.n	800aff6 <TIM_Base_SetConfig+0x9a>
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	4a2b      	ldr	r2, [pc, #172]	; (800b078 <TIM_Base_SetConfig+0x11c>)
 800afca:	4293      	cmp	r3, r2
 800afcc:	d013      	beq.n	800aff6 <TIM_Base_SetConfig+0x9a>
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	4a2a      	ldr	r2, [pc, #168]	; (800b07c <TIM_Base_SetConfig+0x120>)
 800afd2:	4293      	cmp	r3, r2
 800afd4:	d00f      	beq.n	800aff6 <TIM_Base_SetConfig+0x9a>
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	4a29      	ldr	r2, [pc, #164]	; (800b080 <TIM_Base_SetConfig+0x124>)
 800afda:	4293      	cmp	r3, r2
 800afdc:	d00b      	beq.n	800aff6 <TIM_Base_SetConfig+0x9a>
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	4a28      	ldr	r2, [pc, #160]	; (800b084 <TIM_Base_SetConfig+0x128>)
 800afe2:	4293      	cmp	r3, r2
 800afe4:	d007      	beq.n	800aff6 <TIM_Base_SetConfig+0x9a>
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	4a27      	ldr	r2, [pc, #156]	; (800b088 <TIM_Base_SetConfig+0x12c>)
 800afea:	4293      	cmp	r3, r2
 800afec:	d003      	beq.n	800aff6 <TIM_Base_SetConfig+0x9a>
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	4a26      	ldr	r2, [pc, #152]	; (800b08c <TIM_Base_SetConfig+0x130>)
 800aff2:	4293      	cmp	r3, r2
 800aff4:	d108      	bne.n	800b008 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800affc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	68db      	ldr	r3, [r3, #12]
 800b002:	68fa      	ldr	r2, [r7, #12]
 800b004:	4313      	orrs	r3, r2
 800b006:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	695b      	ldr	r3, [r3, #20]
 800b012:	4313      	orrs	r3, r2
 800b014:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	68fa      	ldr	r2, [r7, #12]
 800b01a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	689a      	ldr	r2, [r3, #8]
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	681a      	ldr	r2, [r3, #0]
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	4a10      	ldr	r2, [pc, #64]	; (800b070 <TIM_Base_SetConfig+0x114>)
 800b030:	4293      	cmp	r3, r2
 800b032:	d00f      	beq.n	800b054 <TIM_Base_SetConfig+0xf8>
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	4a12      	ldr	r2, [pc, #72]	; (800b080 <TIM_Base_SetConfig+0x124>)
 800b038:	4293      	cmp	r3, r2
 800b03a:	d00b      	beq.n	800b054 <TIM_Base_SetConfig+0xf8>
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	4a11      	ldr	r2, [pc, #68]	; (800b084 <TIM_Base_SetConfig+0x128>)
 800b040:	4293      	cmp	r3, r2
 800b042:	d007      	beq.n	800b054 <TIM_Base_SetConfig+0xf8>
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	4a10      	ldr	r2, [pc, #64]	; (800b088 <TIM_Base_SetConfig+0x12c>)
 800b048:	4293      	cmp	r3, r2
 800b04a:	d003      	beq.n	800b054 <TIM_Base_SetConfig+0xf8>
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	4a0f      	ldr	r2, [pc, #60]	; (800b08c <TIM_Base_SetConfig+0x130>)
 800b050:	4293      	cmp	r3, r2
 800b052:	d103      	bne.n	800b05c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	691a      	ldr	r2, [r3, #16]
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2201      	movs	r2, #1
 800b060:	615a      	str	r2, [r3, #20]
}
 800b062:	bf00      	nop
 800b064:	3714      	adds	r7, #20
 800b066:	46bd      	mov	sp, r7
 800b068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06c:	4770      	bx	lr
 800b06e:	bf00      	nop
 800b070:	40010000 	.word	0x40010000
 800b074:	40000400 	.word	0x40000400
 800b078:	40000800 	.word	0x40000800
 800b07c:	40000c00 	.word	0x40000c00
 800b080:	40010400 	.word	0x40010400
 800b084:	40014000 	.word	0x40014000
 800b088:	40014400 	.word	0x40014400
 800b08c:	40014800 	.word	0x40014800

0800b090 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b090:	b480      	push	{r7}
 800b092:	b087      	sub	sp, #28
 800b094:	af00      	add	r7, sp, #0
 800b096:	60f8      	str	r0, [r7, #12]
 800b098:	60b9      	str	r1, [r7, #8]
 800b09a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	6a1b      	ldr	r3, [r3, #32]
 800b0a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	6a1b      	ldr	r3, [r3, #32]
 800b0a6:	f023 0201 	bic.w	r2, r3, #1
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	699b      	ldr	r3, [r3, #24]
 800b0b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b0b4:	693b      	ldr	r3, [r7, #16]
 800b0b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b0ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	011b      	lsls	r3, r3, #4
 800b0c0:	693a      	ldr	r2, [r7, #16]
 800b0c2:	4313      	orrs	r3, r2
 800b0c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b0c6:	697b      	ldr	r3, [r7, #20]
 800b0c8:	f023 030a 	bic.w	r3, r3, #10
 800b0cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b0ce:	697a      	ldr	r2, [r7, #20]
 800b0d0:	68bb      	ldr	r3, [r7, #8]
 800b0d2:	4313      	orrs	r3, r2
 800b0d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	693a      	ldr	r2, [r7, #16]
 800b0da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	697a      	ldr	r2, [r7, #20]
 800b0e0:	621a      	str	r2, [r3, #32]
}
 800b0e2:	bf00      	nop
 800b0e4:	371c      	adds	r7, #28
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ec:	4770      	bx	lr

0800b0ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b0ee:	b480      	push	{r7}
 800b0f0:	b087      	sub	sp, #28
 800b0f2:	af00      	add	r7, sp, #0
 800b0f4:	60f8      	str	r0, [r7, #12]
 800b0f6:	60b9      	str	r1, [r7, #8]
 800b0f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	6a1b      	ldr	r3, [r3, #32]
 800b0fe:	f023 0210 	bic.w	r2, r3, #16
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	699b      	ldr	r3, [r3, #24]
 800b10a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	6a1b      	ldr	r3, [r3, #32]
 800b110:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b112:	697b      	ldr	r3, [r7, #20]
 800b114:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b118:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	031b      	lsls	r3, r3, #12
 800b11e:	697a      	ldr	r2, [r7, #20]
 800b120:	4313      	orrs	r3, r2
 800b122:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b124:	693b      	ldr	r3, [r7, #16]
 800b126:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b12a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b12c:	68bb      	ldr	r3, [r7, #8]
 800b12e:	011b      	lsls	r3, r3, #4
 800b130:	693a      	ldr	r2, [r7, #16]
 800b132:	4313      	orrs	r3, r2
 800b134:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	697a      	ldr	r2, [r7, #20]
 800b13a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	693a      	ldr	r2, [r7, #16]
 800b140:	621a      	str	r2, [r3, #32]
}
 800b142:	bf00      	nop
 800b144:	371c      	adds	r7, #28
 800b146:	46bd      	mov	sp, r7
 800b148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14c:	4770      	bx	lr
	...

0800b150 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b150:	b480      	push	{r7}
 800b152:	b085      	sub	sp, #20
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
 800b158:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	689b      	ldr	r3, [r3, #8]
 800b15e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b160:	68fa      	ldr	r2, [r7, #12]
 800b162:	4b09      	ldr	r3, [pc, #36]	; (800b188 <TIM_ITRx_SetConfig+0x38>)
 800b164:	4013      	ands	r3, r2
 800b166:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b168:	683a      	ldr	r2, [r7, #0]
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	4313      	orrs	r3, r2
 800b16e:	f043 0307 	orr.w	r3, r3, #7
 800b172:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	68fa      	ldr	r2, [r7, #12]
 800b178:	609a      	str	r2, [r3, #8]
}
 800b17a:	bf00      	nop
 800b17c:	3714      	adds	r7, #20
 800b17e:	46bd      	mov	sp, r7
 800b180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b184:	4770      	bx	lr
 800b186:	bf00      	nop
 800b188:	ffcfff8f 	.word	0xffcfff8f

0800b18c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b18c:	b480      	push	{r7}
 800b18e:	b087      	sub	sp, #28
 800b190:	af00      	add	r7, sp, #0
 800b192:	60f8      	str	r0, [r7, #12]
 800b194:	60b9      	str	r1, [r7, #8]
 800b196:	607a      	str	r2, [r7, #4]
 800b198:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	689b      	ldr	r3, [r3, #8]
 800b19e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b1a0:	697b      	ldr	r3, [r7, #20]
 800b1a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b1a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	021a      	lsls	r2, r3, #8
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	431a      	orrs	r2, r3
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	4313      	orrs	r3, r2
 800b1b4:	697a      	ldr	r2, [r7, #20]
 800b1b6:	4313      	orrs	r3, r2
 800b1b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	697a      	ldr	r2, [r7, #20]
 800b1be:	609a      	str	r2, [r3, #8]
}
 800b1c0:	bf00      	nop
 800b1c2:	371c      	adds	r7, #28
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ca:	4770      	bx	lr

0800b1cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b1cc:	b480      	push	{r7}
 800b1ce:	b085      	sub	sp, #20
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
 800b1d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b1dc:	2b01      	cmp	r3, #1
 800b1de:	d101      	bne.n	800b1e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b1e0:	2302      	movs	r3, #2
 800b1e2:	e06d      	b.n	800b2c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2201      	movs	r2, #1
 800b1e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2202      	movs	r2, #2
 800b1f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	685b      	ldr	r3, [r3, #4]
 800b1fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	689b      	ldr	r3, [r3, #8]
 800b202:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	4a30      	ldr	r2, [pc, #192]	; (800b2cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b20a:	4293      	cmp	r3, r2
 800b20c:	d004      	beq.n	800b218 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	4a2f      	ldr	r2, [pc, #188]	; (800b2d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b214:	4293      	cmp	r3, r2
 800b216:	d108      	bne.n	800b22a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b21e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	685b      	ldr	r3, [r3, #4]
 800b224:	68fa      	ldr	r2, [r7, #12]
 800b226:	4313      	orrs	r3, r2
 800b228:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b230:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b232:	683b      	ldr	r3, [r7, #0]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	68fa      	ldr	r2, [r7, #12]
 800b238:	4313      	orrs	r3, r2
 800b23a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	68fa      	ldr	r2, [r7, #12]
 800b242:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	4a20      	ldr	r2, [pc, #128]	; (800b2cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b24a:	4293      	cmp	r3, r2
 800b24c:	d022      	beq.n	800b294 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b256:	d01d      	beq.n	800b294 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	4a1d      	ldr	r2, [pc, #116]	; (800b2d4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b25e:	4293      	cmp	r3, r2
 800b260:	d018      	beq.n	800b294 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	4a1c      	ldr	r2, [pc, #112]	; (800b2d8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b268:	4293      	cmp	r3, r2
 800b26a:	d013      	beq.n	800b294 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	4a1a      	ldr	r2, [pc, #104]	; (800b2dc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b272:	4293      	cmp	r3, r2
 800b274:	d00e      	beq.n	800b294 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	4a15      	ldr	r2, [pc, #84]	; (800b2d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b27c:	4293      	cmp	r3, r2
 800b27e:	d009      	beq.n	800b294 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	4a16      	ldr	r2, [pc, #88]	; (800b2e0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b286:	4293      	cmp	r3, r2
 800b288:	d004      	beq.n	800b294 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	4a15      	ldr	r2, [pc, #84]	; (800b2e4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b290:	4293      	cmp	r3, r2
 800b292:	d10c      	bne.n	800b2ae <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b294:	68bb      	ldr	r3, [r7, #8]
 800b296:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b29a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	689b      	ldr	r3, [r3, #8]
 800b2a0:	68ba      	ldr	r2, [r7, #8]
 800b2a2:	4313      	orrs	r3, r2
 800b2a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	68ba      	ldr	r2, [r7, #8]
 800b2ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	2201      	movs	r2, #1
 800b2b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b2be:	2300      	movs	r3, #0
}
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	3714      	adds	r7, #20
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ca:	4770      	bx	lr
 800b2cc:	40010000 	.word	0x40010000
 800b2d0:	40010400 	.word	0x40010400
 800b2d4:	40000400 	.word	0x40000400
 800b2d8:	40000800 	.word	0x40000800
 800b2dc:	40000c00 	.word	0x40000c00
 800b2e0:	40001800 	.word	0x40001800
 800b2e4:	40014000 	.word	0x40014000

0800b2e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b082      	sub	sp, #8
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d101      	bne.n	800b2fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b2f6:	2301      	movs	r3, #1
 800b2f8:	e042      	b.n	800b380 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b300:	2b00      	cmp	r3, #0
 800b302:	d106      	bne.n	800b312 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2200      	movs	r2, #0
 800b308:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b30c:	6878      	ldr	r0, [r7, #4]
 800b30e:	f7f7 f953 	bl	80025b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	2224      	movs	r2, #36	; 0x24
 800b316:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	681a      	ldr	r2, [r3, #0]
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	f022 0201 	bic.w	r2, r2, #1
 800b328:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f000 fce0 	bl	800bcf0 <UART_SetConfig>
 800b330:	4603      	mov	r3, r0
 800b332:	2b01      	cmp	r3, #1
 800b334:	d101      	bne.n	800b33a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b336:	2301      	movs	r3, #1
 800b338:	e022      	b.n	800b380 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d002      	beq.n	800b348 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	f001 fa3c 	bl	800c7c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	685a      	ldr	r2, [r3, #4]
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b356:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	689a      	ldr	r2, [r3, #8]
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b366:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	681a      	ldr	r2, [r3, #0]
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	f042 0201 	orr.w	r2, r2, #1
 800b376:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b378:	6878      	ldr	r0, [r7, #4]
 800b37a:	f001 fac3 	bl	800c904 <UART_CheckIdleState>
 800b37e:	4603      	mov	r3, r0
}
 800b380:	4618      	mov	r0, r3
 800b382:	3708      	adds	r7, #8
 800b384:	46bd      	mov	sp, r7
 800b386:	bd80      	pop	{r7, pc}

0800b388 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b08a      	sub	sp, #40	; 0x28
 800b38c:	af02      	add	r7, sp, #8
 800b38e:	60f8      	str	r0, [r7, #12]
 800b390:	60b9      	str	r1, [r7, #8]
 800b392:	603b      	str	r3, [r7, #0]
 800b394:	4613      	mov	r3, r2
 800b396:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b39e:	2b20      	cmp	r3, #32
 800b3a0:	d17b      	bne.n	800b49a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d002      	beq.n	800b3ae <HAL_UART_Transmit+0x26>
 800b3a8:	88fb      	ldrh	r3, [r7, #6]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d101      	bne.n	800b3b2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b3ae:	2301      	movs	r3, #1
 800b3b0:	e074      	b.n	800b49c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	2221      	movs	r2, #33	; 0x21
 800b3be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b3c2:	f7f7 fcbd 	bl	8002d40 <HAL_GetTick>
 800b3c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	88fa      	ldrh	r2, [r7, #6]
 800b3cc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	88fa      	ldrh	r2, [r7, #6]
 800b3d4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	689b      	ldr	r3, [r3, #8]
 800b3dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3e0:	d108      	bne.n	800b3f4 <HAL_UART_Transmit+0x6c>
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	691b      	ldr	r3, [r3, #16]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d104      	bne.n	800b3f4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b3ee:	68bb      	ldr	r3, [r7, #8]
 800b3f0:	61bb      	str	r3, [r7, #24]
 800b3f2:	e003      	b.n	800b3fc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b3f4:	68bb      	ldr	r3, [r7, #8]
 800b3f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b3fc:	e030      	b.n	800b460 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b3fe:	683b      	ldr	r3, [r7, #0]
 800b400:	9300      	str	r3, [sp, #0]
 800b402:	697b      	ldr	r3, [r7, #20]
 800b404:	2200      	movs	r2, #0
 800b406:	2180      	movs	r1, #128	; 0x80
 800b408:	68f8      	ldr	r0, [r7, #12]
 800b40a:	f001 fb25 	bl	800ca58 <UART_WaitOnFlagUntilTimeout>
 800b40e:	4603      	mov	r3, r0
 800b410:	2b00      	cmp	r3, #0
 800b412:	d005      	beq.n	800b420 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	2220      	movs	r2, #32
 800b418:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800b41c:	2303      	movs	r3, #3
 800b41e:	e03d      	b.n	800b49c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800b420:	69fb      	ldr	r3, [r7, #28]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d10b      	bne.n	800b43e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b426:	69bb      	ldr	r3, [r7, #24]
 800b428:	881b      	ldrh	r3, [r3, #0]
 800b42a:	461a      	mov	r2, r3
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b434:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b436:	69bb      	ldr	r3, [r7, #24]
 800b438:	3302      	adds	r3, #2
 800b43a:	61bb      	str	r3, [r7, #24]
 800b43c:	e007      	b.n	800b44e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b43e:	69fb      	ldr	r3, [r7, #28]
 800b440:	781a      	ldrb	r2, [r3, #0]
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b448:	69fb      	ldr	r3, [r7, #28]
 800b44a:	3301      	adds	r3, #1
 800b44c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b454:	b29b      	uxth	r3, r3
 800b456:	3b01      	subs	r3, #1
 800b458:	b29a      	uxth	r2, r3
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b466:	b29b      	uxth	r3, r3
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d1c8      	bne.n	800b3fe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b46c:	683b      	ldr	r3, [r7, #0]
 800b46e:	9300      	str	r3, [sp, #0]
 800b470:	697b      	ldr	r3, [r7, #20]
 800b472:	2200      	movs	r2, #0
 800b474:	2140      	movs	r1, #64	; 0x40
 800b476:	68f8      	ldr	r0, [r7, #12]
 800b478:	f001 faee 	bl	800ca58 <UART_WaitOnFlagUntilTimeout>
 800b47c:	4603      	mov	r3, r0
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d005      	beq.n	800b48e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	2220      	movs	r2, #32
 800b486:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800b48a:	2303      	movs	r3, #3
 800b48c:	e006      	b.n	800b49c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	2220      	movs	r2, #32
 800b492:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800b496:	2300      	movs	r3, #0
 800b498:	e000      	b.n	800b49c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800b49a:	2302      	movs	r3, #2
  }
}
 800b49c:	4618      	mov	r0, r3
 800b49e:	3720      	adds	r7, #32
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}

0800b4a4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b08a      	sub	sp, #40	; 0x28
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	60f8      	str	r0, [r7, #12]
 800b4ac:	60b9      	str	r1, [r7, #8]
 800b4ae:	4613      	mov	r3, r2
 800b4b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b4b8:	2b20      	cmp	r3, #32
 800b4ba:	d137      	bne.n	800b52c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800b4bc:	68bb      	ldr	r3, [r7, #8]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d002      	beq.n	800b4c8 <HAL_UART_Receive_IT+0x24>
 800b4c2:	88fb      	ldrh	r3, [r7, #6]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d101      	bne.n	800b4cc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800b4c8:	2301      	movs	r3, #1
 800b4ca:	e030      	b.n	800b52e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	4a18      	ldr	r2, [pc, #96]	; (800b538 <HAL_UART_Receive_IT+0x94>)
 800b4d8:	4293      	cmp	r3, r2
 800b4da:	d01f      	beq.n	800b51c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	685b      	ldr	r3, [r3, #4]
 800b4e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d018      	beq.n	800b51c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4f0:	697b      	ldr	r3, [r7, #20]
 800b4f2:	e853 3f00 	ldrex	r3, [r3]
 800b4f6:	613b      	str	r3, [r7, #16]
   return(result);
 800b4f8:	693b      	ldr	r3, [r7, #16]
 800b4fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b4fe:	627b      	str	r3, [r7, #36]	; 0x24
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	461a      	mov	r2, r3
 800b506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b508:	623b      	str	r3, [r7, #32]
 800b50a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b50c:	69f9      	ldr	r1, [r7, #28]
 800b50e:	6a3a      	ldr	r2, [r7, #32]
 800b510:	e841 2300 	strex	r3, r2, [r1]
 800b514:	61bb      	str	r3, [r7, #24]
   return(result);
 800b516:	69bb      	ldr	r3, [r7, #24]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d1e6      	bne.n	800b4ea <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b51c:	88fb      	ldrh	r3, [r7, #6]
 800b51e:	461a      	mov	r2, r3
 800b520:	68b9      	ldr	r1, [r7, #8]
 800b522:	68f8      	ldr	r0, [r7, #12]
 800b524:	f001 fb00 	bl	800cb28 <UART_Start_Receive_IT>
 800b528:	4603      	mov	r3, r0
 800b52a:	e000      	b.n	800b52e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b52c:	2302      	movs	r3, #2
  }
}
 800b52e:	4618      	mov	r0, r3
 800b530:	3728      	adds	r7, #40	; 0x28
 800b532:	46bd      	mov	sp, r7
 800b534:	bd80      	pop	{r7, pc}
 800b536:	bf00      	nop
 800b538:	58000c00 	.word	0x58000c00

0800b53c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b0ba      	sub	sp, #232	; 0xe8
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	69db      	ldr	r3, [r3, #28]
 800b54a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	689b      	ldr	r3, [r3, #8]
 800b55e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b562:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b566:	f640 030f 	movw	r3, #2063	; 0x80f
 800b56a:	4013      	ands	r3, r2
 800b56c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b570:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b574:	2b00      	cmp	r3, #0
 800b576:	d11b      	bne.n	800b5b0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b578:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b57c:	f003 0320 	and.w	r3, r3, #32
 800b580:	2b00      	cmp	r3, #0
 800b582:	d015      	beq.n	800b5b0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b584:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b588:	f003 0320 	and.w	r3, r3, #32
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d105      	bne.n	800b59c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b590:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d009      	beq.n	800b5b0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	f000 8377 	beq.w	800bc94 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	4798      	blx	r3
      }
      return;
 800b5ae:	e371      	b.n	800bc94 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b5b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	f000 8123 	beq.w	800b800 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b5ba:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b5be:	4b8d      	ldr	r3, [pc, #564]	; (800b7f4 <HAL_UART_IRQHandler+0x2b8>)
 800b5c0:	4013      	ands	r3, r2
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d106      	bne.n	800b5d4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b5c6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b5ca:	4b8b      	ldr	r3, [pc, #556]	; (800b7f8 <HAL_UART_IRQHandler+0x2bc>)
 800b5cc:	4013      	ands	r3, r2
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	f000 8116 	beq.w	800b800 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b5d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5d8:	f003 0301 	and.w	r3, r3, #1
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d011      	beq.n	800b604 <HAL_UART_IRQHandler+0xc8>
 800b5e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b5e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d00b      	beq.n	800b604 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	2201      	movs	r2, #1
 800b5f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5fa:	f043 0201 	orr.w	r2, r3, #1
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b608:	f003 0302 	and.w	r3, r3, #2
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d011      	beq.n	800b634 <HAL_UART_IRQHandler+0xf8>
 800b610:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b614:	f003 0301 	and.w	r3, r3, #1
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d00b      	beq.n	800b634 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	2202      	movs	r2, #2
 800b622:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b62a:	f043 0204 	orr.w	r2, r3, #4
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b634:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b638:	f003 0304 	and.w	r3, r3, #4
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d011      	beq.n	800b664 <HAL_UART_IRQHandler+0x128>
 800b640:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b644:	f003 0301 	and.w	r3, r3, #1
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d00b      	beq.n	800b664 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	2204      	movs	r2, #4
 800b652:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b65a:	f043 0202 	orr.w	r2, r3, #2
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b668:	f003 0308 	and.w	r3, r3, #8
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d017      	beq.n	800b6a0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b670:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b674:	f003 0320 	and.w	r3, r3, #32
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d105      	bne.n	800b688 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b67c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b680:	4b5c      	ldr	r3, [pc, #368]	; (800b7f4 <HAL_UART_IRQHandler+0x2b8>)
 800b682:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b684:	2b00      	cmp	r3, #0
 800b686:	d00b      	beq.n	800b6a0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	2208      	movs	r2, #8
 800b68e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b696:	f043 0208 	orr.w	r2, r3, #8
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b6a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d012      	beq.n	800b6d2 <HAL_UART_IRQHandler+0x196>
 800b6ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d00c      	beq.n	800b6d2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b6c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6c8:	f043 0220 	orr.w	r2, r3, #32
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	f000 82dd 	beq.w	800bc98 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b6de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6e2:	f003 0320 	and.w	r3, r3, #32
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d013      	beq.n	800b712 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b6ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6ee:	f003 0320 	and.w	r3, r3, #32
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d105      	bne.n	800b702 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b6f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b6fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d007      	beq.n	800b712 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b706:	2b00      	cmp	r3, #0
 800b708:	d003      	beq.n	800b712 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b70e:	6878      	ldr	r0, [r7, #4]
 800b710:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b718:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	689b      	ldr	r3, [r3, #8]
 800b722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b726:	2b40      	cmp	r3, #64	; 0x40
 800b728:	d005      	beq.n	800b736 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b72a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b72e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b732:	2b00      	cmp	r3, #0
 800b734:	d054      	beq.n	800b7e0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b736:	6878      	ldr	r0, [r7, #4]
 800b738:	f001 fb18 	bl	800cd6c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	689b      	ldr	r3, [r3, #8]
 800b742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b746:	2b40      	cmp	r3, #64	; 0x40
 800b748:	d146      	bne.n	800b7d8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	3308      	adds	r3, #8
 800b750:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b754:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b758:	e853 3f00 	ldrex	r3, [r3]
 800b75c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b760:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b764:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b768:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	3308      	adds	r3, #8
 800b772:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b776:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b77a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b77e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b782:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b786:	e841 2300 	strex	r3, r2, [r1]
 800b78a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b78e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b792:	2b00      	cmp	r3, #0
 800b794:	d1d9      	bne.n	800b74a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d017      	beq.n	800b7d0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b7a6:	4a15      	ldr	r2, [pc, #84]	; (800b7fc <HAL_UART_IRQHandler+0x2c0>)
 800b7a8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	f7f8 ffe7 	bl	8004784 <HAL_DMA_Abort_IT>
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d019      	beq.n	800b7f0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b7c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7c4:	687a      	ldr	r2, [r7, #4]
 800b7c6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800b7ca:	4610      	mov	r0, r2
 800b7cc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7ce:	e00f      	b.n	800b7f0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b7d0:	6878      	ldr	r0, [r7, #4]
 800b7d2:	f000 fa77 	bl	800bcc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7d6:	e00b      	b.n	800b7f0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b7d8:	6878      	ldr	r0, [r7, #4]
 800b7da:	f000 fa73 	bl	800bcc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7de:	e007      	b.n	800b7f0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b7e0:	6878      	ldr	r0, [r7, #4]
 800b7e2:	f000 fa6f 	bl	800bcc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800b7ee:	e253      	b.n	800bc98 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7f0:	bf00      	nop
    return;
 800b7f2:	e251      	b.n	800bc98 <HAL_UART_IRQHandler+0x75c>
 800b7f4:	10000001 	.word	0x10000001
 800b7f8:	04000120 	.word	0x04000120
 800b7fc:	0800ce39 	.word	0x0800ce39

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b804:	2b01      	cmp	r3, #1
 800b806:	f040 81e7 	bne.w	800bbd8 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b80a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b80e:	f003 0310 	and.w	r3, r3, #16
 800b812:	2b00      	cmp	r3, #0
 800b814:	f000 81e0 	beq.w	800bbd8 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b818:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b81c:	f003 0310 	and.w	r3, r3, #16
 800b820:	2b00      	cmp	r3, #0
 800b822:	f000 81d9 	beq.w	800bbd8 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	2210      	movs	r2, #16
 800b82c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	689b      	ldr	r3, [r3, #8]
 800b834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b838:	2b40      	cmp	r3, #64	; 0x40
 800b83a:	f040 8151 	bne.w	800bae0 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	4a96      	ldr	r2, [pc, #600]	; (800baa0 <HAL_UART_IRQHandler+0x564>)
 800b848:	4293      	cmp	r3, r2
 800b84a:	d068      	beq.n	800b91e <HAL_UART_IRQHandler+0x3e2>
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	4a93      	ldr	r2, [pc, #588]	; (800baa4 <HAL_UART_IRQHandler+0x568>)
 800b856:	4293      	cmp	r3, r2
 800b858:	d061      	beq.n	800b91e <HAL_UART_IRQHandler+0x3e2>
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	4a91      	ldr	r2, [pc, #580]	; (800baa8 <HAL_UART_IRQHandler+0x56c>)
 800b864:	4293      	cmp	r3, r2
 800b866:	d05a      	beq.n	800b91e <HAL_UART_IRQHandler+0x3e2>
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	4a8e      	ldr	r2, [pc, #568]	; (800baac <HAL_UART_IRQHandler+0x570>)
 800b872:	4293      	cmp	r3, r2
 800b874:	d053      	beq.n	800b91e <HAL_UART_IRQHandler+0x3e2>
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	4a8c      	ldr	r2, [pc, #560]	; (800bab0 <HAL_UART_IRQHandler+0x574>)
 800b880:	4293      	cmp	r3, r2
 800b882:	d04c      	beq.n	800b91e <HAL_UART_IRQHandler+0x3e2>
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	4a89      	ldr	r2, [pc, #548]	; (800bab4 <HAL_UART_IRQHandler+0x578>)
 800b88e:	4293      	cmp	r3, r2
 800b890:	d045      	beq.n	800b91e <HAL_UART_IRQHandler+0x3e2>
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	4a87      	ldr	r2, [pc, #540]	; (800bab8 <HAL_UART_IRQHandler+0x57c>)
 800b89c:	4293      	cmp	r3, r2
 800b89e:	d03e      	beq.n	800b91e <HAL_UART_IRQHandler+0x3e2>
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	4a84      	ldr	r2, [pc, #528]	; (800babc <HAL_UART_IRQHandler+0x580>)
 800b8aa:	4293      	cmp	r3, r2
 800b8ac:	d037      	beq.n	800b91e <HAL_UART_IRQHandler+0x3e2>
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	4a82      	ldr	r2, [pc, #520]	; (800bac0 <HAL_UART_IRQHandler+0x584>)
 800b8b8:	4293      	cmp	r3, r2
 800b8ba:	d030      	beq.n	800b91e <HAL_UART_IRQHandler+0x3e2>
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	4a7f      	ldr	r2, [pc, #508]	; (800bac4 <HAL_UART_IRQHandler+0x588>)
 800b8c6:	4293      	cmp	r3, r2
 800b8c8:	d029      	beq.n	800b91e <HAL_UART_IRQHandler+0x3e2>
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	4a7d      	ldr	r2, [pc, #500]	; (800bac8 <HAL_UART_IRQHandler+0x58c>)
 800b8d4:	4293      	cmp	r3, r2
 800b8d6:	d022      	beq.n	800b91e <HAL_UART_IRQHandler+0x3e2>
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	4a7a      	ldr	r2, [pc, #488]	; (800bacc <HAL_UART_IRQHandler+0x590>)
 800b8e2:	4293      	cmp	r3, r2
 800b8e4:	d01b      	beq.n	800b91e <HAL_UART_IRQHandler+0x3e2>
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	4a78      	ldr	r2, [pc, #480]	; (800bad0 <HAL_UART_IRQHandler+0x594>)
 800b8f0:	4293      	cmp	r3, r2
 800b8f2:	d014      	beq.n	800b91e <HAL_UART_IRQHandler+0x3e2>
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	4a75      	ldr	r2, [pc, #468]	; (800bad4 <HAL_UART_IRQHandler+0x598>)
 800b8fe:	4293      	cmp	r3, r2
 800b900:	d00d      	beq.n	800b91e <HAL_UART_IRQHandler+0x3e2>
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	4a73      	ldr	r2, [pc, #460]	; (800bad8 <HAL_UART_IRQHandler+0x59c>)
 800b90c:	4293      	cmp	r3, r2
 800b90e:	d006      	beq.n	800b91e <HAL_UART_IRQHandler+0x3e2>
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	4a70      	ldr	r2, [pc, #448]	; (800badc <HAL_UART_IRQHandler+0x5a0>)
 800b91a:	4293      	cmp	r3, r2
 800b91c:	d106      	bne.n	800b92c <HAL_UART_IRQHandler+0x3f0>
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	685b      	ldr	r3, [r3, #4]
 800b928:	b29b      	uxth	r3, r3
 800b92a:	e005      	b.n	800b938 <HAL_UART_IRQHandler+0x3fc>
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	685b      	ldr	r3, [r3, #4]
 800b936:	b29b      	uxth	r3, r3
 800b938:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b93c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b940:	2b00      	cmp	r3, #0
 800b942:	f000 81ab 	beq.w	800bc9c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b94c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b950:	429a      	cmp	r2, r3
 800b952:	f080 81a3 	bcs.w	800bc9c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b95c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b966:	69db      	ldr	r3, [r3, #28]
 800b968:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b96c:	f000 8087 	beq.w	800ba7e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b978:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b97c:	e853 3f00 	ldrex	r3, [r3]
 800b980:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b984:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b988:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b98c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	461a      	mov	r2, r3
 800b996:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b99a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b99e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b9a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b9aa:	e841 2300 	strex	r3, r2, [r1]
 800b9ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b9b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d1da      	bne.n	800b970 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	3308      	adds	r3, #8
 800b9c0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b9c4:	e853 3f00 	ldrex	r3, [r3]
 800b9c8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b9ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b9cc:	f023 0301 	bic.w	r3, r3, #1
 800b9d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	3308      	adds	r3, #8
 800b9da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b9de:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b9e2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9e4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b9e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b9ea:	e841 2300 	strex	r3, r2, [r1]
 800b9ee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b9f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d1e1      	bne.n	800b9ba <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	3308      	adds	r3, #8
 800b9fc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ba00:	e853 3f00 	ldrex	r3, [r3]
 800ba04:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ba06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ba08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	3308      	adds	r3, #8
 800ba16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ba1a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ba1c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba1e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ba20:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ba22:	e841 2300 	strex	r3, r2, [r1]
 800ba26:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ba28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d1e3      	bne.n	800b9f6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	2220      	movs	r2, #32
 800ba32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	2200      	movs	r2, #0
 800ba3a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba44:	e853 3f00 	ldrex	r3, [r3]
 800ba48:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ba4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba4c:	f023 0310 	bic.w	r3, r3, #16
 800ba50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	461a      	mov	r2, r3
 800ba5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ba5e:	65bb      	str	r3, [r7, #88]	; 0x58
 800ba60:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba62:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ba64:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ba66:	e841 2300 	strex	r3, r2, [r1]
 800ba6a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ba6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d1e4      	bne.n	800ba3c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba78:	4618      	mov	r0, r3
 800ba7a:	f7f8 fb65 	bl	8004148 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	2202      	movs	r2, #2
 800ba82:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ba90:	b29b      	uxth	r3, r3
 800ba92:	1ad3      	subs	r3, r2, r3
 800ba94:	b29b      	uxth	r3, r3
 800ba96:	4619      	mov	r1, r3
 800ba98:	6878      	ldr	r0, [r7, #4]
 800ba9a:	f000 f91d 	bl	800bcd8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ba9e:	e0fd      	b.n	800bc9c <HAL_UART_IRQHandler+0x760>
 800baa0:	40020010 	.word	0x40020010
 800baa4:	40020028 	.word	0x40020028
 800baa8:	40020040 	.word	0x40020040
 800baac:	40020058 	.word	0x40020058
 800bab0:	40020070 	.word	0x40020070
 800bab4:	40020088 	.word	0x40020088
 800bab8:	400200a0 	.word	0x400200a0
 800babc:	400200b8 	.word	0x400200b8
 800bac0:	40020410 	.word	0x40020410
 800bac4:	40020428 	.word	0x40020428
 800bac8:	40020440 	.word	0x40020440
 800bacc:	40020458 	.word	0x40020458
 800bad0:	40020470 	.word	0x40020470
 800bad4:	40020488 	.word	0x40020488
 800bad8:	400204a0 	.word	0x400204a0
 800badc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800baec:	b29b      	uxth	r3, r3
 800baee:	1ad3      	subs	r3, r2, r3
 800baf0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bafa:	b29b      	uxth	r3, r3
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	f000 80cf 	beq.w	800bca0 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800bb02:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	f000 80ca 	beq.w	800bca0 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb14:	e853 3f00 	ldrex	r3, [r3]
 800bb18:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bb1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bb20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	461a      	mov	r2, r3
 800bb2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bb2e:	647b      	str	r3, [r7, #68]	; 0x44
 800bb30:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb32:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bb34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bb36:	e841 2300 	strex	r3, r2, [r1]
 800bb3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bb3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d1e4      	bne.n	800bb0c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	3308      	adds	r3, #8
 800bb48:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb4c:	e853 3f00 	ldrex	r3, [r3]
 800bb50:	623b      	str	r3, [r7, #32]
   return(result);
 800bb52:	6a3a      	ldr	r2, [r7, #32]
 800bb54:	4b55      	ldr	r3, [pc, #340]	; (800bcac <HAL_UART_IRQHandler+0x770>)
 800bb56:	4013      	ands	r3, r2
 800bb58:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	3308      	adds	r3, #8
 800bb62:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bb66:	633a      	str	r2, [r7, #48]	; 0x30
 800bb68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bb6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb6e:	e841 2300 	strex	r3, r2, [r1]
 800bb72:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bb74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d1e3      	bne.n	800bb42 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	2220      	movs	r2, #32
 800bb7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	2200      	movs	r2, #0
 800bb86:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb94:	693b      	ldr	r3, [r7, #16]
 800bb96:	e853 3f00 	ldrex	r3, [r3]
 800bb9a:	60fb      	str	r3, [r7, #12]
   return(result);
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	f023 0310 	bic.w	r3, r3, #16
 800bba2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	461a      	mov	r2, r3
 800bbac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800bbb0:	61fb      	str	r3, [r7, #28]
 800bbb2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbb4:	69b9      	ldr	r1, [r7, #24]
 800bbb6:	69fa      	ldr	r2, [r7, #28]
 800bbb8:	e841 2300 	strex	r3, r2, [r1]
 800bbbc:	617b      	str	r3, [r7, #20]
   return(result);
 800bbbe:	697b      	ldr	r3, [r7, #20]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d1e4      	bne.n	800bb8e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2202      	movs	r2, #2
 800bbc8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bbca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bbce:	4619      	mov	r1, r3
 800bbd0:	6878      	ldr	r0, [r7, #4]
 800bbd2:	f000 f881 	bl	800bcd8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bbd6:	e063      	b.n	800bca0 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800bbd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d00e      	beq.n	800bc02 <HAL_UART_IRQHandler+0x6c6>
 800bbe4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bbe8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d008      	beq.n	800bc02 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800bbf8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800bbfa:	6878      	ldr	r0, [r7, #4]
 800bbfc:	f001 fe7a 	bl	800d8f4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bc00:	e051      	b.n	800bca6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800bc02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d014      	beq.n	800bc38 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800bc0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d105      	bne.n	800bc26 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800bc1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d008      	beq.n	800bc38 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d03a      	beq.n	800bca4 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc32:	6878      	ldr	r0, [r7, #4]
 800bc34:	4798      	blx	r3
    }
    return;
 800bc36:	e035      	b.n	800bca4 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bc38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d009      	beq.n	800bc58 <HAL_UART_IRQHandler+0x71c>
 800bc44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d003      	beq.n	800bc58 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800bc50:	6878      	ldr	r0, [r7, #4]
 800bc52:	f001 f907 	bl	800ce64 <UART_EndTransmit_IT>
    return;
 800bc56:	e026      	b.n	800bca6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800bc58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d009      	beq.n	800bc78 <HAL_UART_IRQHandler+0x73c>
 800bc64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc68:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d003      	beq.n	800bc78 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800bc70:	6878      	ldr	r0, [r7, #4]
 800bc72:	f001 fe53 	bl	800d91c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bc76:	e016      	b.n	800bca6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800bc78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d010      	beq.n	800bca6 <HAL_UART_IRQHandler+0x76a>
 800bc84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	da0c      	bge.n	800bca6 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800bc8c:	6878      	ldr	r0, [r7, #4]
 800bc8e:	f001 fe3b 	bl	800d908 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bc92:	e008      	b.n	800bca6 <HAL_UART_IRQHandler+0x76a>
      return;
 800bc94:	bf00      	nop
 800bc96:	e006      	b.n	800bca6 <HAL_UART_IRQHandler+0x76a>
    return;
 800bc98:	bf00      	nop
 800bc9a:	e004      	b.n	800bca6 <HAL_UART_IRQHandler+0x76a>
      return;
 800bc9c:	bf00      	nop
 800bc9e:	e002      	b.n	800bca6 <HAL_UART_IRQHandler+0x76a>
      return;
 800bca0:	bf00      	nop
 800bca2:	e000      	b.n	800bca6 <HAL_UART_IRQHandler+0x76a>
    return;
 800bca4:	bf00      	nop
  }
}
 800bca6:	37e8      	adds	r7, #232	; 0xe8
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	bd80      	pop	{r7, pc}
 800bcac:	effffffe 	.word	0xeffffffe

0800bcb0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bcb0:	b480      	push	{r7}
 800bcb2:	b083      	sub	sp, #12
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800bcb8:	bf00      	nop
 800bcba:	370c      	adds	r7, #12
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc2:	4770      	bx	lr

0800bcc4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bcc4:	b480      	push	{r7}
 800bcc6:	b083      	sub	sp, #12
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bccc:	bf00      	nop
 800bcce:	370c      	adds	r7, #12
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd6:	4770      	bx	lr

0800bcd8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bcd8:	b480      	push	{r7}
 800bcda:	b083      	sub	sp, #12
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
 800bce0:	460b      	mov	r3, r1
 800bce2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bce4:	bf00      	nop
 800bce6:	370c      	adds	r7, #12
 800bce8:	46bd      	mov	sp, r7
 800bcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcee:	4770      	bx	lr

0800bcf0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bcf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bcf4:	b092      	sub	sp, #72	; 0x48
 800bcf6:	af00      	add	r7, sp, #0
 800bcf8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bd00:	697b      	ldr	r3, [r7, #20]
 800bd02:	689a      	ldr	r2, [r3, #8]
 800bd04:	697b      	ldr	r3, [r7, #20]
 800bd06:	691b      	ldr	r3, [r3, #16]
 800bd08:	431a      	orrs	r2, r3
 800bd0a:	697b      	ldr	r3, [r7, #20]
 800bd0c:	695b      	ldr	r3, [r3, #20]
 800bd0e:	431a      	orrs	r2, r3
 800bd10:	697b      	ldr	r3, [r7, #20]
 800bd12:	69db      	ldr	r3, [r3, #28]
 800bd14:	4313      	orrs	r3, r2
 800bd16:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bd18:	697b      	ldr	r3, [r7, #20]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	681a      	ldr	r2, [r3, #0]
 800bd1e:	4bbe      	ldr	r3, [pc, #760]	; (800c018 <UART_SetConfig+0x328>)
 800bd20:	4013      	ands	r3, r2
 800bd22:	697a      	ldr	r2, [r7, #20]
 800bd24:	6812      	ldr	r2, [r2, #0]
 800bd26:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bd28:	430b      	orrs	r3, r1
 800bd2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bd2c:	697b      	ldr	r3, [r7, #20]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	685b      	ldr	r3, [r3, #4]
 800bd32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bd36:	697b      	ldr	r3, [r7, #20]
 800bd38:	68da      	ldr	r2, [r3, #12]
 800bd3a:	697b      	ldr	r3, [r7, #20]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	430a      	orrs	r2, r1
 800bd40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bd42:	697b      	ldr	r3, [r7, #20]
 800bd44:	699b      	ldr	r3, [r3, #24]
 800bd46:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bd48:	697b      	ldr	r3, [r7, #20]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	4ab3      	ldr	r2, [pc, #716]	; (800c01c <UART_SetConfig+0x32c>)
 800bd4e:	4293      	cmp	r3, r2
 800bd50:	d004      	beq.n	800bd5c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bd52:	697b      	ldr	r3, [r7, #20]
 800bd54:	6a1b      	ldr	r3, [r3, #32]
 800bd56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bd58:	4313      	orrs	r3, r2
 800bd5a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bd5c:	697b      	ldr	r3, [r7, #20]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	689a      	ldr	r2, [r3, #8]
 800bd62:	4baf      	ldr	r3, [pc, #700]	; (800c020 <UART_SetConfig+0x330>)
 800bd64:	4013      	ands	r3, r2
 800bd66:	697a      	ldr	r2, [r7, #20]
 800bd68:	6812      	ldr	r2, [r2, #0]
 800bd6a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bd6c:	430b      	orrs	r3, r1
 800bd6e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bd70:	697b      	ldr	r3, [r7, #20]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd76:	f023 010f 	bic.w	r1, r3, #15
 800bd7a:	697b      	ldr	r3, [r7, #20]
 800bd7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bd7e:	697b      	ldr	r3, [r7, #20]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	430a      	orrs	r2, r1
 800bd84:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bd86:	697b      	ldr	r3, [r7, #20]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	4aa6      	ldr	r2, [pc, #664]	; (800c024 <UART_SetConfig+0x334>)
 800bd8c:	4293      	cmp	r3, r2
 800bd8e:	d177      	bne.n	800be80 <UART_SetConfig+0x190>
 800bd90:	4ba5      	ldr	r3, [pc, #660]	; (800c028 <UART_SetConfig+0x338>)
 800bd92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd94:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bd98:	2b28      	cmp	r3, #40	; 0x28
 800bd9a:	d86d      	bhi.n	800be78 <UART_SetConfig+0x188>
 800bd9c:	a201      	add	r2, pc, #4	; (adr r2, 800bda4 <UART_SetConfig+0xb4>)
 800bd9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bda2:	bf00      	nop
 800bda4:	0800be49 	.word	0x0800be49
 800bda8:	0800be79 	.word	0x0800be79
 800bdac:	0800be79 	.word	0x0800be79
 800bdb0:	0800be79 	.word	0x0800be79
 800bdb4:	0800be79 	.word	0x0800be79
 800bdb8:	0800be79 	.word	0x0800be79
 800bdbc:	0800be79 	.word	0x0800be79
 800bdc0:	0800be79 	.word	0x0800be79
 800bdc4:	0800be51 	.word	0x0800be51
 800bdc8:	0800be79 	.word	0x0800be79
 800bdcc:	0800be79 	.word	0x0800be79
 800bdd0:	0800be79 	.word	0x0800be79
 800bdd4:	0800be79 	.word	0x0800be79
 800bdd8:	0800be79 	.word	0x0800be79
 800bddc:	0800be79 	.word	0x0800be79
 800bde0:	0800be79 	.word	0x0800be79
 800bde4:	0800be59 	.word	0x0800be59
 800bde8:	0800be79 	.word	0x0800be79
 800bdec:	0800be79 	.word	0x0800be79
 800bdf0:	0800be79 	.word	0x0800be79
 800bdf4:	0800be79 	.word	0x0800be79
 800bdf8:	0800be79 	.word	0x0800be79
 800bdfc:	0800be79 	.word	0x0800be79
 800be00:	0800be79 	.word	0x0800be79
 800be04:	0800be61 	.word	0x0800be61
 800be08:	0800be79 	.word	0x0800be79
 800be0c:	0800be79 	.word	0x0800be79
 800be10:	0800be79 	.word	0x0800be79
 800be14:	0800be79 	.word	0x0800be79
 800be18:	0800be79 	.word	0x0800be79
 800be1c:	0800be79 	.word	0x0800be79
 800be20:	0800be79 	.word	0x0800be79
 800be24:	0800be69 	.word	0x0800be69
 800be28:	0800be79 	.word	0x0800be79
 800be2c:	0800be79 	.word	0x0800be79
 800be30:	0800be79 	.word	0x0800be79
 800be34:	0800be79 	.word	0x0800be79
 800be38:	0800be79 	.word	0x0800be79
 800be3c:	0800be79 	.word	0x0800be79
 800be40:	0800be79 	.word	0x0800be79
 800be44:	0800be71 	.word	0x0800be71
 800be48:	2301      	movs	r3, #1
 800be4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be4e:	e222      	b.n	800c296 <UART_SetConfig+0x5a6>
 800be50:	2304      	movs	r3, #4
 800be52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be56:	e21e      	b.n	800c296 <UART_SetConfig+0x5a6>
 800be58:	2308      	movs	r3, #8
 800be5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be5e:	e21a      	b.n	800c296 <UART_SetConfig+0x5a6>
 800be60:	2310      	movs	r3, #16
 800be62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be66:	e216      	b.n	800c296 <UART_SetConfig+0x5a6>
 800be68:	2320      	movs	r3, #32
 800be6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be6e:	e212      	b.n	800c296 <UART_SetConfig+0x5a6>
 800be70:	2340      	movs	r3, #64	; 0x40
 800be72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be76:	e20e      	b.n	800c296 <UART_SetConfig+0x5a6>
 800be78:	2380      	movs	r3, #128	; 0x80
 800be7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be7e:	e20a      	b.n	800c296 <UART_SetConfig+0x5a6>
 800be80:	697b      	ldr	r3, [r7, #20]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	4a69      	ldr	r2, [pc, #420]	; (800c02c <UART_SetConfig+0x33c>)
 800be86:	4293      	cmp	r3, r2
 800be88:	d130      	bne.n	800beec <UART_SetConfig+0x1fc>
 800be8a:	4b67      	ldr	r3, [pc, #412]	; (800c028 <UART_SetConfig+0x338>)
 800be8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be8e:	f003 0307 	and.w	r3, r3, #7
 800be92:	2b05      	cmp	r3, #5
 800be94:	d826      	bhi.n	800bee4 <UART_SetConfig+0x1f4>
 800be96:	a201      	add	r2, pc, #4	; (adr r2, 800be9c <UART_SetConfig+0x1ac>)
 800be98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be9c:	0800beb5 	.word	0x0800beb5
 800bea0:	0800bebd 	.word	0x0800bebd
 800bea4:	0800bec5 	.word	0x0800bec5
 800bea8:	0800becd 	.word	0x0800becd
 800beac:	0800bed5 	.word	0x0800bed5
 800beb0:	0800bedd 	.word	0x0800bedd
 800beb4:	2300      	movs	r3, #0
 800beb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800beba:	e1ec      	b.n	800c296 <UART_SetConfig+0x5a6>
 800bebc:	2304      	movs	r3, #4
 800bebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bec2:	e1e8      	b.n	800c296 <UART_SetConfig+0x5a6>
 800bec4:	2308      	movs	r3, #8
 800bec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800beca:	e1e4      	b.n	800c296 <UART_SetConfig+0x5a6>
 800becc:	2310      	movs	r3, #16
 800bece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bed2:	e1e0      	b.n	800c296 <UART_SetConfig+0x5a6>
 800bed4:	2320      	movs	r3, #32
 800bed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800beda:	e1dc      	b.n	800c296 <UART_SetConfig+0x5a6>
 800bedc:	2340      	movs	r3, #64	; 0x40
 800bede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bee2:	e1d8      	b.n	800c296 <UART_SetConfig+0x5a6>
 800bee4:	2380      	movs	r3, #128	; 0x80
 800bee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800beea:	e1d4      	b.n	800c296 <UART_SetConfig+0x5a6>
 800beec:	697b      	ldr	r3, [r7, #20]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	4a4f      	ldr	r2, [pc, #316]	; (800c030 <UART_SetConfig+0x340>)
 800bef2:	4293      	cmp	r3, r2
 800bef4:	d130      	bne.n	800bf58 <UART_SetConfig+0x268>
 800bef6:	4b4c      	ldr	r3, [pc, #304]	; (800c028 <UART_SetConfig+0x338>)
 800bef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800befa:	f003 0307 	and.w	r3, r3, #7
 800befe:	2b05      	cmp	r3, #5
 800bf00:	d826      	bhi.n	800bf50 <UART_SetConfig+0x260>
 800bf02:	a201      	add	r2, pc, #4	; (adr r2, 800bf08 <UART_SetConfig+0x218>)
 800bf04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf08:	0800bf21 	.word	0x0800bf21
 800bf0c:	0800bf29 	.word	0x0800bf29
 800bf10:	0800bf31 	.word	0x0800bf31
 800bf14:	0800bf39 	.word	0x0800bf39
 800bf18:	0800bf41 	.word	0x0800bf41
 800bf1c:	0800bf49 	.word	0x0800bf49
 800bf20:	2300      	movs	r3, #0
 800bf22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf26:	e1b6      	b.n	800c296 <UART_SetConfig+0x5a6>
 800bf28:	2304      	movs	r3, #4
 800bf2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf2e:	e1b2      	b.n	800c296 <UART_SetConfig+0x5a6>
 800bf30:	2308      	movs	r3, #8
 800bf32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf36:	e1ae      	b.n	800c296 <UART_SetConfig+0x5a6>
 800bf38:	2310      	movs	r3, #16
 800bf3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf3e:	e1aa      	b.n	800c296 <UART_SetConfig+0x5a6>
 800bf40:	2320      	movs	r3, #32
 800bf42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf46:	e1a6      	b.n	800c296 <UART_SetConfig+0x5a6>
 800bf48:	2340      	movs	r3, #64	; 0x40
 800bf4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf4e:	e1a2      	b.n	800c296 <UART_SetConfig+0x5a6>
 800bf50:	2380      	movs	r3, #128	; 0x80
 800bf52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf56:	e19e      	b.n	800c296 <UART_SetConfig+0x5a6>
 800bf58:	697b      	ldr	r3, [r7, #20]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	4a35      	ldr	r2, [pc, #212]	; (800c034 <UART_SetConfig+0x344>)
 800bf5e:	4293      	cmp	r3, r2
 800bf60:	d130      	bne.n	800bfc4 <UART_SetConfig+0x2d4>
 800bf62:	4b31      	ldr	r3, [pc, #196]	; (800c028 <UART_SetConfig+0x338>)
 800bf64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf66:	f003 0307 	and.w	r3, r3, #7
 800bf6a:	2b05      	cmp	r3, #5
 800bf6c:	d826      	bhi.n	800bfbc <UART_SetConfig+0x2cc>
 800bf6e:	a201      	add	r2, pc, #4	; (adr r2, 800bf74 <UART_SetConfig+0x284>)
 800bf70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf74:	0800bf8d 	.word	0x0800bf8d
 800bf78:	0800bf95 	.word	0x0800bf95
 800bf7c:	0800bf9d 	.word	0x0800bf9d
 800bf80:	0800bfa5 	.word	0x0800bfa5
 800bf84:	0800bfad 	.word	0x0800bfad
 800bf88:	0800bfb5 	.word	0x0800bfb5
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf92:	e180      	b.n	800c296 <UART_SetConfig+0x5a6>
 800bf94:	2304      	movs	r3, #4
 800bf96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf9a:	e17c      	b.n	800c296 <UART_SetConfig+0x5a6>
 800bf9c:	2308      	movs	r3, #8
 800bf9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfa2:	e178      	b.n	800c296 <UART_SetConfig+0x5a6>
 800bfa4:	2310      	movs	r3, #16
 800bfa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfaa:	e174      	b.n	800c296 <UART_SetConfig+0x5a6>
 800bfac:	2320      	movs	r3, #32
 800bfae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfb2:	e170      	b.n	800c296 <UART_SetConfig+0x5a6>
 800bfb4:	2340      	movs	r3, #64	; 0x40
 800bfb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfba:	e16c      	b.n	800c296 <UART_SetConfig+0x5a6>
 800bfbc:	2380      	movs	r3, #128	; 0x80
 800bfbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfc2:	e168      	b.n	800c296 <UART_SetConfig+0x5a6>
 800bfc4:	697b      	ldr	r3, [r7, #20]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	4a1b      	ldr	r2, [pc, #108]	; (800c038 <UART_SetConfig+0x348>)
 800bfca:	4293      	cmp	r3, r2
 800bfcc:	d142      	bne.n	800c054 <UART_SetConfig+0x364>
 800bfce:	4b16      	ldr	r3, [pc, #88]	; (800c028 <UART_SetConfig+0x338>)
 800bfd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfd2:	f003 0307 	and.w	r3, r3, #7
 800bfd6:	2b05      	cmp	r3, #5
 800bfd8:	d838      	bhi.n	800c04c <UART_SetConfig+0x35c>
 800bfda:	a201      	add	r2, pc, #4	; (adr r2, 800bfe0 <UART_SetConfig+0x2f0>)
 800bfdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfe0:	0800bff9 	.word	0x0800bff9
 800bfe4:	0800c001 	.word	0x0800c001
 800bfe8:	0800c009 	.word	0x0800c009
 800bfec:	0800c011 	.word	0x0800c011
 800bff0:	0800c03d 	.word	0x0800c03d
 800bff4:	0800c045 	.word	0x0800c045
 800bff8:	2300      	movs	r3, #0
 800bffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bffe:	e14a      	b.n	800c296 <UART_SetConfig+0x5a6>
 800c000:	2304      	movs	r3, #4
 800c002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c006:	e146      	b.n	800c296 <UART_SetConfig+0x5a6>
 800c008:	2308      	movs	r3, #8
 800c00a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c00e:	e142      	b.n	800c296 <UART_SetConfig+0x5a6>
 800c010:	2310      	movs	r3, #16
 800c012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c016:	e13e      	b.n	800c296 <UART_SetConfig+0x5a6>
 800c018:	cfff69f3 	.word	0xcfff69f3
 800c01c:	58000c00 	.word	0x58000c00
 800c020:	11fff4ff 	.word	0x11fff4ff
 800c024:	40011000 	.word	0x40011000
 800c028:	58024400 	.word	0x58024400
 800c02c:	40004400 	.word	0x40004400
 800c030:	40004800 	.word	0x40004800
 800c034:	40004c00 	.word	0x40004c00
 800c038:	40005000 	.word	0x40005000
 800c03c:	2320      	movs	r3, #32
 800c03e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c042:	e128      	b.n	800c296 <UART_SetConfig+0x5a6>
 800c044:	2340      	movs	r3, #64	; 0x40
 800c046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c04a:	e124      	b.n	800c296 <UART_SetConfig+0x5a6>
 800c04c:	2380      	movs	r3, #128	; 0x80
 800c04e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c052:	e120      	b.n	800c296 <UART_SetConfig+0x5a6>
 800c054:	697b      	ldr	r3, [r7, #20]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	4acb      	ldr	r2, [pc, #812]	; (800c388 <UART_SetConfig+0x698>)
 800c05a:	4293      	cmp	r3, r2
 800c05c:	d176      	bne.n	800c14c <UART_SetConfig+0x45c>
 800c05e:	4bcb      	ldr	r3, [pc, #812]	; (800c38c <UART_SetConfig+0x69c>)
 800c060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c062:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c066:	2b28      	cmp	r3, #40	; 0x28
 800c068:	d86c      	bhi.n	800c144 <UART_SetConfig+0x454>
 800c06a:	a201      	add	r2, pc, #4	; (adr r2, 800c070 <UART_SetConfig+0x380>)
 800c06c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c070:	0800c115 	.word	0x0800c115
 800c074:	0800c145 	.word	0x0800c145
 800c078:	0800c145 	.word	0x0800c145
 800c07c:	0800c145 	.word	0x0800c145
 800c080:	0800c145 	.word	0x0800c145
 800c084:	0800c145 	.word	0x0800c145
 800c088:	0800c145 	.word	0x0800c145
 800c08c:	0800c145 	.word	0x0800c145
 800c090:	0800c11d 	.word	0x0800c11d
 800c094:	0800c145 	.word	0x0800c145
 800c098:	0800c145 	.word	0x0800c145
 800c09c:	0800c145 	.word	0x0800c145
 800c0a0:	0800c145 	.word	0x0800c145
 800c0a4:	0800c145 	.word	0x0800c145
 800c0a8:	0800c145 	.word	0x0800c145
 800c0ac:	0800c145 	.word	0x0800c145
 800c0b0:	0800c125 	.word	0x0800c125
 800c0b4:	0800c145 	.word	0x0800c145
 800c0b8:	0800c145 	.word	0x0800c145
 800c0bc:	0800c145 	.word	0x0800c145
 800c0c0:	0800c145 	.word	0x0800c145
 800c0c4:	0800c145 	.word	0x0800c145
 800c0c8:	0800c145 	.word	0x0800c145
 800c0cc:	0800c145 	.word	0x0800c145
 800c0d0:	0800c12d 	.word	0x0800c12d
 800c0d4:	0800c145 	.word	0x0800c145
 800c0d8:	0800c145 	.word	0x0800c145
 800c0dc:	0800c145 	.word	0x0800c145
 800c0e0:	0800c145 	.word	0x0800c145
 800c0e4:	0800c145 	.word	0x0800c145
 800c0e8:	0800c145 	.word	0x0800c145
 800c0ec:	0800c145 	.word	0x0800c145
 800c0f0:	0800c135 	.word	0x0800c135
 800c0f4:	0800c145 	.word	0x0800c145
 800c0f8:	0800c145 	.word	0x0800c145
 800c0fc:	0800c145 	.word	0x0800c145
 800c100:	0800c145 	.word	0x0800c145
 800c104:	0800c145 	.word	0x0800c145
 800c108:	0800c145 	.word	0x0800c145
 800c10c:	0800c145 	.word	0x0800c145
 800c110:	0800c13d 	.word	0x0800c13d
 800c114:	2301      	movs	r3, #1
 800c116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c11a:	e0bc      	b.n	800c296 <UART_SetConfig+0x5a6>
 800c11c:	2304      	movs	r3, #4
 800c11e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c122:	e0b8      	b.n	800c296 <UART_SetConfig+0x5a6>
 800c124:	2308      	movs	r3, #8
 800c126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c12a:	e0b4      	b.n	800c296 <UART_SetConfig+0x5a6>
 800c12c:	2310      	movs	r3, #16
 800c12e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c132:	e0b0      	b.n	800c296 <UART_SetConfig+0x5a6>
 800c134:	2320      	movs	r3, #32
 800c136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c13a:	e0ac      	b.n	800c296 <UART_SetConfig+0x5a6>
 800c13c:	2340      	movs	r3, #64	; 0x40
 800c13e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c142:	e0a8      	b.n	800c296 <UART_SetConfig+0x5a6>
 800c144:	2380      	movs	r3, #128	; 0x80
 800c146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c14a:	e0a4      	b.n	800c296 <UART_SetConfig+0x5a6>
 800c14c:	697b      	ldr	r3, [r7, #20]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	4a8f      	ldr	r2, [pc, #572]	; (800c390 <UART_SetConfig+0x6a0>)
 800c152:	4293      	cmp	r3, r2
 800c154:	d130      	bne.n	800c1b8 <UART_SetConfig+0x4c8>
 800c156:	4b8d      	ldr	r3, [pc, #564]	; (800c38c <UART_SetConfig+0x69c>)
 800c158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c15a:	f003 0307 	and.w	r3, r3, #7
 800c15e:	2b05      	cmp	r3, #5
 800c160:	d826      	bhi.n	800c1b0 <UART_SetConfig+0x4c0>
 800c162:	a201      	add	r2, pc, #4	; (adr r2, 800c168 <UART_SetConfig+0x478>)
 800c164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c168:	0800c181 	.word	0x0800c181
 800c16c:	0800c189 	.word	0x0800c189
 800c170:	0800c191 	.word	0x0800c191
 800c174:	0800c199 	.word	0x0800c199
 800c178:	0800c1a1 	.word	0x0800c1a1
 800c17c:	0800c1a9 	.word	0x0800c1a9
 800c180:	2300      	movs	r3, #0
 800c182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c186:	e086      	b.n	800c296 <UART_SetConfig+0x5a6>
 800c188:	2304      	movs	r3, #4
 800c18a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c18e:	e082      	b.n	800c296 <UART_SetConfig+0x5a6>
 800c190:	2308      	movs	r3, #8
 800c192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c196:	e07e      	b.n	800c296 <UART_SetConfig+0x5a6>
 800c198:	2310      	movs	r3, #16
 800c19a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c19e:	e07a      	b.n	800c296 <UART_SetConfig+0x5a6>
 800c1a0:	2320      	movs	r3, #32
 800c1a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1a6:	e076      	b.n	800c296 <UART_SetConfig+0x5a6>
 800c1a8:	2340      	movs	r3, #64	; 0x40
 800c1aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1ae:	e072      	b.n	800c296 <UART_SetConfig+0x5a6>
 800c1b0:	2380      	movs	r3, #128	; 0x80
 800c1b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1b6:	e06e      	b.n	800c296 <UART_SetConfig+0x5a6>
 800c1b8:	697b      	ldr	r3, [r7, #20]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	4a75      	ldr	r2, [pc, #468]	; (800c394 <UART_SetConfig+0x6a4>)
 800c1be:	4293      	cmp	r3, r2
 800c1c0:	d130      	bne.n	800c224 <UART_SetConfig+0x534>
 800c1c2:	4b72      	ldr	r3, [pc, #456]	; (800c38c <UART_SetConfig+0x69c>)
 800c1c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1c6:	f003 0307 	and.w	r3, r3, #7
 800c1ca:	2b05      	cmp	r3, #5
 800c1cc:	d826      	bhi.n	800c21c <UART_SetConfig+0x52c>
 800c1ce:	a201      	add	r2, pc, #4	; (adr r2, 800c1d4 <UART_SetConfig+0x4e4>)
 800c1d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1d4:	0800c1ed 	.word	0x0800c1ed
 800c1d8:	0800c1f5 	.word	0x0800c1f5
 800c1dc:	0800c1fd 	.word	0x0800c1fd
 800c1e0:	0800c205 	.word	0x0800c205
 800c1e4:	0800c20d 	.word	0x0800c20d
 800c1e8:	0800c215 	.word	0x0800c215
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1f2:	e050      	b.n	800c296 <UART_SetConfig+0x5a6>
 800c1f4:	2304      	movs	r3, #4
 800c1f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1fa:	e04c      	b.n	800c296 <UART_SetConfig+0x5a6>
 800c1fc:	2308      	movs	r3, #8
 800c1fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c202:	e048      	b.n	800c296 <UART_SetConfig+0x5a6>
 800c204:	2310      	movs	r3, #16
 800c206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c20a:	e044      	b.n	800c296 <UART_SetConfig+0x5a6>
 800c20c:	2320      	movs	r3, #32
 800c20e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c212:	e040      	b.n	800c296 <UART_SetConfig+0x5a6>
 800c214:	2340      	movs	r3, #64	; 0x40
 800c216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c21a:	e03c      	b.n	800c296 <UART_SetConfig+0x5a6>
 800c21c:	2380      	movs	r3, #128	; 0x80
 800c21e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c222:	e038      	b.n	800c296 <UART_SetConfig+0x5a6>
 800c224:	697b      	ldr	r3, [r7, #20]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	4a5b      	ldr	r2, [pc, #364]	; (800c398 <UART_SetConfig+0x6a8>)
 800c22a:	4293      	cmp	r3, r2
 800c22c:	d130      	bne.n	800c290 <UART_SetConfig+0x5a0>
 800c22e:	4b57      	ldr	r3, [pc, #348]	; (800c38c <UART_SetConfig+0x69c>)
 800c230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c232:	f003 0307 	and.w	r3, r3, #7
 800c236:	2b05      	cmp	r3, #5
 800c238:	d826      	bhi.n	800c288 <UART_SetConfig+0x598>
 800c23a:	a201      	add	r2, pc, #4	; (adr r2, 800c240 <UART_SetConfig+0x550>)
 800c23c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c240:	0800c259 	.word	0x0800c259
 800c244:	0800c261 	.word	0x0800c261
 800c248:	0800c269 	.word	0x0800c269
 800c24c:	0800c271 	.word	0x0800c271
 800c250:	0800c279 	.word	0x0800c279
 800c254:	0800c281 	.word	0x0800c281
 800c258:	2302      	movs	r3, #2
 800c25a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c25e:	e01a      	b.n	800c296 <UART_SetConfig+0x5a6>
 800c260:	2304      	movs	r3, #4
 800c262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c266:	e016      	b.n	800c296 <UART_SetConfig+0x5a6>
 800c268:	2308      	movs	r3, #8
 800c26a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c26e:	e012      	b.n	800c296 <UART_SetConfig+0x5a6>
 800c270:	2310      	movs	r3, #16
 800c272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c276:	e00e      	b.n	800c296 <UART_SetConfig+0x5a6>
 800c278:	2320      	movs	r3, #32
 800c27a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c27e:	e00a      	b.n	800c296 <UART_SetConfig+0x5a6>
 800c280:	2340      	movs	r3, #64	; 0x40
 800c282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c286:	e006      	b.n	800c296 <UART_SetConfig+0x5a6>
 800c288:	2380      	movs	r3, #128	; 0x80
 800c28a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c28e:	e002      	b.n	800c296 <UART_SetConfig+0x5a6>
 800c290:	2380      	movs	r3, #128	; 0x80
 800c292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c296:	697b      	ldr	r3, [r7, #20]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	4a3f      	ldr	r2, [pc, #252]	; (800c398 <UART_SetConfig+0x6a8>)
 800c29c:	4293      	cmp	r3, r2
 800c29e:	f040 80f8 	bne.w	800c492 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c2a2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c2a6:	2b20      	cmp	r3, #32
 800c2a8:	dc46      	bgt.n	800c338 <UART_SetConfig+0x648>
 800c2aa:	2b02      	cmp	r3, #2
 800c2ac:	f2c0 8082 	blt.w	800c3b4 <UART_SetConfig+0x6c4>
 800c2b0:	3b02      	subs	r3, #2
 800c2b2:	2b1e      	cmp	r3, #30
 800c2b4:	d87e      	bhi.n	800c3b4 <UART_SetConfig+0x6c4>
 800c2b6:	a201      	add	r2, pc, #4	; (adr r2, 800c2bc <UART_SetConfig+0x5cc>)
 800c2b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2bc:	0800c33f 	.word	0x0800c33f
 800c2c0:	0800c3b5 	.word	0x0800c3b5
 800c2c4:	0800c347 	.word	0x0800c347
 800c2c8:	0800c3b5 	.word	0x0800c3b5
 800c2cc:	0800c3b5 	.word	0x0800c3b5
 800c2d0:	0800c3b5 	.word	0x0800c3b5
 800c2d4:	0800c357 	.word	0x0800c357
 800c2d8:	0800c3b5 	.word	0x0800c3b5
 800c2dc:	0800c3b5 	.word	0x0800c3b5
 800c2e0:	0800c3b5 	.word	0x0800c3b5
 800c2e4:	0800c3b5 	.word	0x0800c3b5
 800c2e8:	0800c3b5 	.word	0x0800c3b5
 800c2ec:	0800c3b5 	.word	0x0800c3b5
 800c2f0:	0800c3b5 	.word	0x0800c3b5
 800c2f4:	0800c367 	.word	0x0800c367
 800c2f8:	0800c3b5 	.word	0x0800c3b5
 800c2fc:	0800c3b5 	.word	0x0800c3b5
 800c300:	0800c3b5 	.word	0x0800c3b5
 800c304:	0800c3b5 	.word	0x0800c3b5
 800c308:	0800c3b5 	.word	0x0800c3b5
 800c30c:	0800c3b5 	.word	0x0800c3b5
 800c310:	0800c3b5 	.word	0x0800c3b5
 800c314:	0800c3b5 	.word	0x0800c3b5
 800c318:	0800c3b5 	.word	0x0800c3b5
 800c31c:	0800c3b5 	.word	0x0800c3b5
 800c320:	0800c3b5 	.word	0x0800c3b5
 800c324:	0800c3b5 	.word	0x0800c3b5
 800c328:	0800c3b5 	.word	0x0800c3b5
 800c32c:	0800c3b5 	.word	0x0800c3b5
 800c330:	0800c3b5 	.word	0x0800c3b5
 800c334:	0800c3a7 	.word	0x0800c3a7
 800c338:	2b40      	cmp	r3, #64	; 0x40
 800c33a:	d037      	beq.n	800c3ac <UART_SetConfig+0x6bc>
 800c33c:	e03a      	b.n	800c3b4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c33e:	f7fd f963 	bl	8009608 <HAL_RCCEx_GetD3PCLK1Freq>
 800c342:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c344:	e03c      	b.n	800c3c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c346:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c34a:	4618      	mov	r0, r3
 800c34c:	f7fd f972 	bl	8009634 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c352:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c354:	e034      	b.n	800c3c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c356:	f107 0318 	add.w	r3, r7, #24
 800c35a:	4618      	mov	r0, r3
 800c35c:	f7fd fabe 	bl	80098dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c360:	69fb      	ldr	r3, [r7, #28]
 800c362:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c364:	e02c      	b.n	800c3c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c366:	4b09      	ldr	r3, [pc, #36]	; (800c38c <UART_SetConfig+0x69c>)
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	f003 0320 	and.w	r3, r3, #32
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d016      	beq.n	800c3a0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c372:	4b06      	ldr	r3, [pc, #24]	; (800c38c <UART_SetConfig+0x69c>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	08db      	lsrs	r3, r3, #3
 800c378:	f003 0303 	and.w	r3, r3, #3
 800c37c:	4a07      	ldr	r2, [pc, #28]	; (800c39c <UART_SetConfig+0x6ac>)
 800c37e:	fa22 f303 	lsr.w	r3, r2, r3
 800c382:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c384:	e01c      	b.n	800c3c0 <UART_SetConfig+0x6d0>
 800c386:	bf00      	nop
 800c388:	40011400 	.word	0x40011400
 800c38c:	58024400 	.word	0x58024400
 800c390:	40007800 	.word	0x40007800
 800c394:	40007c00 	.word	0x40007c00
 800c398:	58000c00 	.word	0x58000c00
 800c39c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c3a0:	4b9d      	ldr	r3, [pc, #628]	; (800c618 <UART_SetConfig+0x928>)
 800c3a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3a4:	e00c      	b.n	800c3c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c3a6:	4b9d      	ldr	r3, [pc, #628]	; (800c61c <UART_SetConfig+0x92c>)
 800c3a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3aa:	e009      	b.n	800c3c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c3ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c3b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3b2:	e005      	b.n	800c3c0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c3b8:	2301      	movs	r3, #1
 800c3ba:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c3be:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c3c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	f000 81de 	beq.w	800c784 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c3c8:	697b      	ldr	r3, [r7, #20]
 800c3ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3cc:	4a94      	ldr	r2, [pc, #592]	; (800c620 <UART_SetConfig+0x930>)
 800c3ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c3d2:	461a      	mov	r2, r3
 800c3d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3d6:	fbb3 f3f2 	udiv	r3, r3, r2
 800c3da:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c3dc:	697b      	ldr	r3, [r7, #20]
 800c3de:	685a      	ldr	r2, [r3, #4]
 800c3e0:	4613      	mov	r3, r2
 800c3e2:	005b      	lsls	r3, r3, #1
 800c3e4:	4413      	add	r3, r2
 800c3e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3e8:	429a      	cmp	r2, r3
 800c3ea:	d305      	bcc.n	800c3f8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c3ec:	697b      	ldr	r3, [r7, #20]
 800c3ee:	685b      	ldr	r3, [r3, #4]
 800c3f0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c3f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3f4:	429a      	cmp	r2, r3
 800c3f6:	d903      	bls.n	800c400 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c3f8:	2301      	movs	r3, #1
 800c3fa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c3fe:	e1c1      	b.n	800c784 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c402:	2200      	movs	r2, #0
 800c404:	60bb      	str	r3, [r7, #8]
 800c406:	60fa      	str	r2, [r7, #12]
 800c408:	697b      	ldr	r3, [r7, #20]
 800c40a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c40c:	4a84      	ldr	r2, [pc, #528]	; (800c620 <UART_SetConfig+0x930>)
 800c40e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c412:	b29b      	uxth	r3, r3
 800c414:	2200      	movs	r2, #0
 800c416:	603b      	str	r3, [r7, #0]
 800c418:	607a      	str	r2, [r7, #4]
 800c41a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c41e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c422:	f7f3 ff61 	bl	80002e8 <__aeabi_uldivmod>
 800c426:	4602      	mov	r2, r0
 800c428:	460b      	mov	r3, r1
 800c42a:	4610      	mov	r0, r2
 800c42c:	4619      	mov	r1, r3
 800c42e:	f04f 0200 	mov.w	r2, #0
 800c432:	f04f 0300 	mov.w	r3, #0
 800c436:	020b      	lsls	r3, r1, #8
 800c438:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c43c:	0202      	lsls	r2, r0, #8
 800c43e:	6979      	ldr	r1, [r7, #20]
 800c440:	6849      	ldr	r1, [r1, #4]
 800c442:	0849      	lsrs	r1, r1, #1
 800c444:	2000      	movs	r0, #0
 800c446:	460c      	mov	r4, r1
 800c448:	4605      	mov	r5, r0
 800c44a:	eb12 0804 	adds.w	r8, r2, r4
 800c44e:	eb43 0905 	adc.w	r9, r3, r5
 800c452:	697b      	ldr	r3, [r7, #20]
 800c454:	685b      	ldr	r3, [r3, #4]
 800c456:	2200      	movs	r2, #0
 800c458:	469a      	mov	sl, r3
 800c45a:	4693      	mov	fp, r2
 800c45c:	4652      	mov	r2, sl
 800c45e:	465b      	mov	r3, fp
 800c460:	4640      	mov	r0, r8
 800c462:	4649      	mov	r1, r9
 800c464:	f7f3 ff40 	bl	80002e8 <__aeabi_uldivmod>
 800c468:	4602      	mov	r2, r0
 800c46a:	460b      	mov	r3, r1
 800c46c:	4613      	mov	r3, r2
 800c46e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c472:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c476:	d308      	bcc.n	800c48a <UART_SetConfig+0x79a>
 800c478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c47a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c47e:	d204      	bcs.n	800c48a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800c480:	697b      	ldr	r3, [r7, #20]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c486:	60da      	str	r2, [r3, #12]
 800c488:	e17c      	b.n	800c784 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800c48a:	2301      	movs	r3, #1
 800c48c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c490:	e178      	b.n	800c784 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c492:	697b      	ldr	r3, [r7, #20]
 800c494:	69db      	ldr	r3, [r3, #28]
 800c496:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c49a:	f040 80c5 	bne.w	800c628 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800c49e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c4a2:	2b20      	cmp	r3, #32
 800c4a4:	dc48      	bgt.n	800c538 <UART_SetConfig+0x848>
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	db7b      	blt.n	800c5a2 <UART_SetConfig+0x8b2>
 800c4aa:	2b20      	cmp	r3, #32
 800c4ac:	d879      	bhi.n	800c5a2 <UART_SetConfig+0x8b2>
 800c4ae:	a201      	add	r2, pc, #4	; (adr r2, 800c4b4 <UART_SetConfig+0x7c4>)
 800c4b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4b4:	0800c53f 	.word	0x0800c53f
 800c4b8:	0800c547 	.word	0x0800c547
 800c4bc:	0800c5a3 	.word	0x0800c5a3
 800c4c0:	0800c5a3 	.word	0x0800c5a3
 800c4c4:	0800c54f 	.word	0x0800c54f
 800c4c8:	0800c5a3 	.word	0x0800c5a3
 800c4cc:	0800c5a3 	.word	0x0800c5a3
 800c4d0:	0800c5a3 	.word	0x0800c5a3
 800c4d4:	0800c55f 	.word	0x0800c55f
 800c4d8:	0800c5a3 	.word	0x0800c5a3
 800c4dc:	0800c5a3 	.word	0x0800c5a3
 800c4e0:	0800c5a3 	.word	0x0800c5a3
 800c4e4:	0800c5a3 	.word	0x0800c5a3
 800c4e8:	0800c5a3 	.word	0x0800c5a3
 800c4ec:	0800c5a3 	.word	0x0800c5a3
 800c4f0:	0800c5a3 	.word	0x0800c5a3
 800c4f4:	0800c56f 	.word	0x0800c56f
 800c4f8:	0800c5a3 	.word	0x0800c5a3
 800c4fc:	0800c5a3 	.word	0x0800c5a3
 800c500:	0800c5a3 	.word	0x0800c5a3
 800c504:	0800c5a3 	.word	0x0800c5a3
 800c508:	0800c5a3 	.word	0x0800c5a3
 800c50c:	0800c5a3 	.word	0x0800c5a3
 800c510:	0800c5a3 	.word	0x0800c5a3
 800c514:	0800c5a3 	.word	0x0800c5a3
 800c518:	0800c5a3 	.word	0x0800c5a3
 800c51c:	0800c5a3 	.word	0x0800c5a3
 800c520:	0800c5a3 	.word	0x0800c5a3
 800c524:	0800c5a3 	.word	0x0800c5a3
 800c528:	0800c5a3 	.word	0x0800c5a3
 800c52c:	0800c5a3 	.word	0x0800c5a3
 800c530:	0800c5a3 	.word	0x0800c5a3
 800c534:	0800c595 	.word	0x0800c595
 800c538:	2b40      	cmp	r3, #64	; 0x40
 800c53a:	d02e      	beq.n	800c59a <UART_SetConfig+0x8aa>
 800c53c:	e031      	b.n	800c5a2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c53e:	f7fb f8ad 	bl	800769c <HAL_RCC_GetPCLK1Freq>
 800c542:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c544:	e033      	b.n	800c5ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c546:	f7fb f8bf 	bl	80076c8 <HAL_RCC_GetPCLK2Freq>
 800c54a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c54c:	e02f      	b.n	800c5ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c54e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c552:	4618      	mov	r0, r3
 800c554:	f7fd f86e 	bl	8009634 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c55a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c55c:	e027      	b.n	800c5ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c55e:	f107 0318 	add.w	r3, r7, #24
 800c562:	4618      	mov	r0, r3
 800c564:	f7fd f9ba 	bl	80098dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c568:	69fb      	ldr	r3, [r7, #28]
 800c56a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c56c:	e01f      	b.n	800c5ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c56e:	4b2d      	ldr	r3, [pc, #180]	; (800c624 <UART_SetConfig+0x934>)
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	f003 0320 	and.w	r3, r3, #32
 800c576:	2b00      	cmp	r3, #0
 800c578:	d009      	beq.n	800c58e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c57a:	4b2a      	ldr	r3, [pc, #168]	; (800c624 <UART_SetConfig+0x934>)
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	08db      	lsrs	r3, r3, #3
 800c580:	f003 0303 	and.w	r3, r3, #3
 800c584:	4a24      	ldr	r2, [pc, #144]	; (800c618 <UART_SetConfig+0x928>)
 800c586:	fa22 f303 	lsr.w	r3, r2, r3
 800c58a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c58c:	e00f      	b.n	800c5ae <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c58e:	4b22      	ldr	r3, [pc, #136]	; (800c618 <UART_SetConfig+0x928>)
 800c590:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c592:	e00c      	b.n	800c5ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c594:	4b21      	ldr	r3, [pc, #132]	; (800c61c <UART_SetConfig+0x92c>)
 800c596:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c598:	e009      	b.n	800c5ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c59a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c59e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5a0:	e005      	b.n	800c5ae <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c5a6:	2301      	movs	r3, #1
 800c5a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c5ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c5ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	f000 80e7 	beq.w	800c784 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c5b6:	697b      	ldr	r3, [r7, #20]
 800c5b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5ba:	4a19      	ldr	r2, [pc, #100]	; (800c620 <UART_SetConfig+0x930>)
 800c5bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c5c0:	461a      	mov	r2, r3
 800c5c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5c4:	fbb3 f3f2 	udiv	r3, r3, r2
 800c5c8:	005a      	lsls	r2, r3, #1
 800c5ca:	697b      	ldr	r3, [r7, #20]
 800c5cc:	685b      	ldr	r3, [r3, #4]
 800c5ce:	085b      	lsrs	r3, r3, #1
 800c5d0:	441a      	add	r2, r3
 800c5d2:	697b      	ldr	r3, [r7, #20]
 800c5d4:	685b      	ldr	r3, [r3, #4]
 800c5d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c5da:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c5dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5de:	2b0f      	cmp	r3, #15
 800c5e0:	d916      	bls.n	800c610 <UART_SetConfig+0x920>
 800c5e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c5e8:	d212      	bcs.n	800c610 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c5ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5ec:	b29b      	uxth	r3, r3
 800c5ee:	f023 030f 	bic.w	r3, r3, #15
 800c5f2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c5f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5f6:	085b      	lsrs	r3, r3, #1
 800c5f8:	b29b      	uxth	r3, r3
 800c5fa:	f003 0307 	and.w	r3, r3, #7
 800c5fe:	b29a      	uxth	r2, r3
 800c600:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c602:	4313      	orrs	r3, r2
 800c604:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800c606:	697b      	ldr	r3, [r7, #20]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c60c:	60da      	str	r2, [r3, #12]
 800c60e:	e0b9      	b.n	800c784 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c610:	2301      	movs	r3, #1
 800c612:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c616:	e0b5      	b.n	800c784 <UART_SetConfig+0xa94>
 800c618:	03d09000 	.word	0x03d09000
 800c61c:	003d0900 	.word	0x003d0900
 800c620:	0800e49c 	.word	0x0800e49c
 800c624:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800c628:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c62c:	2b20      	cmp	r3, #32
 800c62e:	dc49      	bgt.n	800c6c4 <UART_SetConfig+0x9d4>
 800c630:	2b00      	cmp	r3, #0
 800c632:	db7c      	blt.n	800c72e <UART_SetConfig+0xa3e>
 800c634:	2b20      	cmp	r3, #32
 800c636:	d87a      	bhi.n	800c72e <UART_SetConfig+0xa3e>
 800c638:	a201      	add	r2, pc, #4	; (adr r2, 800c640 <UART_SetConfig+0x950>)
 800c63a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c63e:	bf00      	nop
 800c640:	0800c6cb 	.word	0x0800c6cb
 800c644:	0800c6d3 	.word	0x0800c6d3
 800c648:	0800c72f 	.word	0x0800c72f
 800c64c:	0800c72f 	.word	0x0800c72f
 800c650:	0800c6db 	.word	0x0800c6db
 800c654:	0800c72f 	.word	0x0800c72f
 800c658:	0800c72f 	.word	0x0800c72f
 800c65c:	0800c72f 	.word	0x0800c72f
 800c660:	0800c6eb 	.word	0x0800c6eb
 800c664:	0800c72f 	.word	0x0800c72f
 800c668:	0800c72f 	.word	0x0800c72f
 800c66c:	0800c72f 	.word	0x0800c72f
 800c670:	0800c72f 	.word	0x0800c72f
 800c674:	0800c72f 	.word	0x0800c72f
 800c678:	0800c72f 	.word	0x0800c72f
 800c67c:	0800c72f 	.word	0x0800c72f
 800c680:	0800c6fb 	.word	0x0800c6fb
 800c684:	0800c72f 	.word	0x0800c72f
 800c688:	0800c72f 	.word	0x0800c72f
 800c68c:	0800c72f 	.word	0x0800c72f
 800c690:	0800c72f 	.word	0x0800c72f
 800c694:	0800c72f 	.word	0x0800c72f
 800c698:	0800c72f 	.word	0x0800c72f
 800c69c:	0800c72f 	.word	0x0800c72f
 800c6a0:	0800c72f 	.word	0x0800c72f
 800c6a4:	0800c72f 	.word	0x0800c72f
 800c6a8:	0800c72f 	.word	0x0800c72f
 800c6ac:	0800c72f 	.word	0x0800c72f
 800c6b0:	0800c72f 	.word	0x0800c72f
 800c6b4:	0800c72f 	.word	0x0800c72f
 800c6b8:	0800c72f 	.word	0x0800c72f
 800c6bc:	0800c72f 	.word	0x0800c72f
 800c6c0:	0800c721 	.word	0x0800c721
 800c6c4:	2b40      	cmp	r3, #64	; 0x40
 800c6c6:	d02e      	beq.n	800c726 <UART_SetConfig+0xa36>
 800c6c8:	e031      	b.n	800c72e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c6ca:	f7fa ffe7 	bl	800769c <HAL_RCC_GetPCLK1Freq>
 800c6ce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c6d0:	e033      	b.n	800c73a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c6d2:	f7fa fff9 	bl	80076c8 <HAL_RCC_GetPCLK2Freq>
 800c6d6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c6d8:	e02f      	b.n	800c73a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c6da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c6de:	4618      	mov	r0, r3
 800c6e0:	f7fc ffa8 	bl	8009634 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c6e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6e8:	e027      	b.n	800c73a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c6ea:	f107 0318 	add.w	r3, r7, #24
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	f7fd f8f4 	bl	80098dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c6f4:	69fb      	ldr	r3, [r7, #28]
 800c6f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6f8:	e01f      	b.n	800c73a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c6fa:	4b2d      	ldr	r3, [pc, #180]	; (800c7b0 <UART_SetConfig+0xac0>)
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	f003 0320 	and.w	r3, r3, #32
 800c702:	2b00      	cmp	r3, #0
 800c704:	d009      	beq.n	800c71a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c706:	4b2a      	ldr	r3, [pc, #168]	; (800c7b0 <UART_SetConfig+0xac0>)
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	08db      	lsrs	r3, r3, #3
 800c70c:	f003 0303 	and.w	r3, r3, #3
 800c710:	4a28      	ldr	r2, [pc, #160]	; (800c7b4 <UART_SetConfig+0xac4>)
 800c712:	fa22 f303 	lsr.w	r3, r2, r3
 800c716:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c718:	e00f      	b.n	800c73a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800c71a:	4b26      	ldr	r3, [pc, #152]	; (800c7b4 <UART_SetConfig+0xac4>)
 800c71c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c71e:	e00c      	b.n	800c73a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c720:	4b25      	ldr	r3, [pc, #148]	; (800c7b8 <UART_SetConfig+0xac8>)
 800c722:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c724:	e009      	b.n	800c73a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c726:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c72a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c72c:	e005      	b.n	800c73a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800c72e:	2300      	movs	r3, #0
 800c730:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c732:	2301      	movs	r3, #1
 800c734:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c738:	bf00      	nop
    }

    if (pclk != 0U)
 800c73a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d021      	beq.n	800c784 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c740:	697b      	ldr	r3, [r7, #20]
 800c742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c744:	4a1d      	ldr	r2, [pc, #116]	; (800c7bc <UART_SetConfig+0xacc>)
 800c746:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c74a:	461a      	mov	r2, r3
 800c74c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c74e:	fbb3 f2f2 	udiv	r2, r3, r2
 800c752:	697b      	ldr	r3, [r7, #20]
 800c754:	685b      	ldr	r3, [r3, #4]
 800c756:	085b      	lsrs	r3, r3, #1
 800c758:	441a      	add	r2, r3
 800c75a:	697b      	ldr	r3, [r7, #20]
 800c75c:	685b      	ldr	r3, [r3, #4]
 800c75e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c762:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c766:	2b0f      	cmp	r3, #15
 800c768:	d909      	bls.n	800c77e <UART_SetConfig+0xa8e>
 800c76a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c76c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c770:	d205      	bcs.n	800c77e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c774:	b29a      	uxth	r2, r3
 800c776:	697b      	ldr	r3, [r7, #20]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	60da      	str	r2, [r3, #12]
 800c77c:	e002      	b.n	800c784 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c77e:	2301      	movs	r3, #1
 800c780:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c784:	697b      	ldr	r3, [r7, #20]
 800c786:	2201      	movs	r2, #1
 800c788:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c78c:	697b      	ldr	r3, [r7, #20]
 800c78e:	2201      	movs	r2, #1
 800c790:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c794:	697b      	ldr	r3, [r7, #20]
 800c796:	2200      	movs	r2, #0
 800c798:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800c79a:	697b      	ldr	r3, [r7, #20]
 800c79c:	2200      	movs	r2, #0
 800c79e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800c7a0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	3748      	adds	r7, #72	; 0x48
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c7ae:	bf00      	nop
 800c7b0:	58024400 	.word	0x58024400
 800c7b4:	03d09000 	.word	0x03d09000
 800c7b8:	003d0900 	.word	0x003d0900
 800c7bc:	0800e49c 	.word	0x0800e49c

0800c7c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c7c0:	b480      	push	{r7}
 800c7c2:	b083      	sub	sp, #12
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7cc:	f003 0301 	and.w	r3, r3, #1
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d00a      	beq.n	800c7ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	685b      	ldr	r3, [r3, #4]
 800c7da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	430a      	orrs	r2, r1
 800c7e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7ee:	f003 0302 	and.w	r3, r3, #2
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d00a      	beq.n	800c80c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	685b      	ldr	r3, [r3, #4]
 800c7fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	430a      	orrs	r2, r1
 800c80a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c810:	f003 0304 	and.w	r3, r3, #4
 800c814:	2b00      	cmp	r3, #0
 800c816:	d00a      	beq.n	800c82e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	685b      	ldr	r3, [r3, #4]
 800c81e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	430a      	orrs	r2, r1
 800c82c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c832:	f003 0308 	and.w	r3, r3, #8
 800c836:	2b00      	cmp	r3, #0
 800c838:	d00a      	beq.n	800c850 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	685b      	ldr	r3, [r3, #4]
 800c840:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	430a      	orrs	r2, r1
 800c84e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c854:	f003 0310 	and.w	r3, r3, #16
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d00a      	beq.n	800c872 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	689b      	ldr	r3, [r3, #8]
 800c862:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	430a      	orrs	r2, r1
 800c870:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c876:	f003 0320 	and.w	r3, r3, #32
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d00a      	beq.n	800c894 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	689b      	ldr	r3, [r3, #8]
 800c884:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	430a      	orrs	r2, r1
 800c892:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d01a      	beq.n	800c8d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	685b      	ldr	r3, [r3, #4]
 800c8a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	430a      	orrs	r2, r1
 800c8b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c8ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c8be:	d10a      	bne.n	800c8d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	685b      	ldr	r3, [r3, #4]
 800c8c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	430a      	orrs	r2, r1
 800c8d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d00a      	beq.n	800c8f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	685b      	ldr	r3, [r3, #4]
 800c8e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	430a      	orrs	r2, r1
 800c8f6:	605a      	str	r2, [r3, #4]
  }
}
 800c8f8:	bf00      	nop
 800c8fa:	370c      	adds	r7, #12
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c902:	4770      	bx	lr

0800c904 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c904:	b580      	push	{r7, lr}
 800c906:	b098      	sub	sp, #96	; 0x60
 800c908:	af02      	add	r7, sp, #8
 800c90a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2200      	movs	r2, #0
 800c910:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c914:	f7f6 fa14 	bl	8002d40 <HAL_GetTick>
 800c918:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	f003 0308 	and.w	r3, r3, #8
 800c924:	2b08      	cmp	r3, #8
 800c926:	d12f      	bne.n	800c988 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c928:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c92c:	9300      	str	r3, [sp, #0]
 800c92e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c930:	2200      	movs	r2, #0
 800c932:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c936:	6878      	ldr	r0, [r7, #4]
 800c938:	f000 f88e 	bl	800ca58 <UART_WaitOnFlagUntilTimeout>
 800c93c:	4603      	mov	r3, r0
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d022      	beq.n	800c988 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c94a:	e853 3f00 	ldrex	r3, [r3]
 800c94e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c952:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c956:	653b      	str	r3, [r7, #80]	; 0x50
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	461a      	mov	r2, r3
 800c95e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c960:	647b      	str	r3, [r7, #68]	; 0x44
 800c962:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c964:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c966:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c968:	e841 2300 	strex	r3, r2, [r1]
 800c96c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c96e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c970:	2b00      	cmp	r3, #0
 800c972:	d1e6      	bne.n	800c942 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	2220      	movs	r2, #32
 800c978:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	2200      	movs	r2, #0
 800c980:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c984:	2303      	movs	r3, #3
 800c986:	e063      	b.n	800ca50 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	f003 0304 	and.w	r3, r3, #4
 800c992:	2b04      	cmp	r3, #4
 800c994:	d149      	bne.n	800ca2a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c996:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c99a:	9300      	str	r3, [sp, #0]
 800c99c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c99e:	2200      	movs	r2, #0
 800c9a0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c9a4:	6878      	ldr	r0, [r7, #4]
 800c9a6:	f000 f857 	bl	800ca58 <UART_WaitOnFlagUntilTimeout>
 800c9aa:	4603      	mov	r3, r0
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d03c      	beq.n	800ca2a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9b8:	e853 3f00 	ldrex	r3, [r3]
 800c9bc:	623b      	str	r3, [r7, #32]
   return(result);
 800c9be:	6a3b      	ldr	r3, [r7, #32]
 800c9c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c9c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	461a      	mov	r2, r3
 800c9cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9ce:	633b      	str	r3, [r7, #48]	; 0x30
 800c9d0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c9d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c9d6:	e841 2300 	strex	r3, r2, [r1]
 800c9da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c9dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d1e6      	bne.n	800c9b0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	3308      	adds	r3, #8
 800c9e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9ea:	693b      	ldr	r3, [r7, #16]
 800c9ec:	e853 3f00 	ldrex	r3, [r3]
 800c9f0:	60fb      	str	r3, [r7, #12]
   return(result);
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	f023 0301 	bic.w	r3, r3, #1
 800c9f8:	64bb      	str	r3, [r7, #72]	; 0x48
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	3308      	adds	r3, #8
 800ca00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ca02:	61fa      	str	r2, [r7, #28]
 800ca04:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca06:	69b9      	ldr	r1, [r7, #24]
 800ca08:	69fa      	ldr	r2, [r7, #28]
 800ca0a:	e841 2300 	strex	r3, r2, [r1]
 800ca0e:	617b      	str	r3, [r7, #20]
   return(result);
 800ca10:	697b      	ldr	r3, [r7, #20]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d1e5      	bne.n	800c9e2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	2220      	movs	r2, #32
 800ca1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	2200      	movs	r2, #0
 800ca22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ca26:	2303      	movs	r3, #3
 800ca28:	e012      	b.n	800ca50 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	2220      	movs	r2, #32
 800ca2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	2220      	movs	r2, #32
 800ca36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	2200      	movs	r2, #0
 800ca3e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	2200      	movs	r2, #0
 800ca44:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	2200      	movs	r2, #0
 800ca4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ca4e:	2300      	movs	r3, #0
}
 800ca50:	4618      	mov	r0, r3
 800ca52:	3758      	adds	r7, #88	; 0x58
 800ca54:	46bd      	mov	sp, r7
 800ca56:	bd80      	pop	{r7, pc}

0800ca58 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b084      	sub	sp, #16
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	60f8      	str	r0, [r7, #12]
 800ca60:	60b9      	str	r1, [r7, #8]
 800ca62:	603b      	str	r3, [r7, #0]
 800ca64:	4613      	mov	r3, r2
 800ca66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ca68:	e049      	b.n	800cafe <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ca6a:	69bb      	ldr	r3, [r7, #24]
 800ca6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca70:	d045      	beq.n	800cafe <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ca72:	f7f6 f965 	bl	8002d40 <HAL_GetTick>
 800ca76:	4602      	mov	r2, r0
 800ca78:	683b      	ldr	r3, [r7, #0]
 800ca7a:	1ad3      	subs	r3, r2, r3
 800ca7c:	69ba      	ldr	r2, [r7, #24]
 800ca7e:	429a      	cmp	r2, r3
 800ca80:	d302      	bcc.n	800ca88 <UART_WaitOnFlagUntilTimeout+0x30>
 800ca82:	69bb      	ldr	r3, [r7, #24]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d101      	bne.n	800ca8c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ca88:	2303      	movs	r3, #3
 800ca8a:	e048      	b.n	800cb1e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	f003 0304 	and.w	r3, r3, #4
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d031      	beq.n	800cafe <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	69db      	ldr	r3, [r3, #28]
 800caa0:	f003 0308 	and.w	r3, r3, #8
 800caa4:	2b08      	cmp	r3, #8
 800caa6:	d110      	bne.n	800caca <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	2208      	movs	r2, #8
 800caae:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800cab0:	68f8      	ldr	r0, [r7, #12]
 800cab2:	f000 f95b 	bl	800cd6c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	2208      	movs	r2, #8
 800caba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	2200      	movs	r2, #0
 800cac2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800cac6:	2301      	movs	r3, #1
 800cac8:	e029      	b.n	800cb1e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	69db      	ldr	r3, [r3, #28]
 800cad0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cad4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cad8:	d111      	bne.n	800cafe <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cae2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cae4:	68f8      	ldr	r0, [r7, #12]
 800cae6:	f000 f941 	bl	800cd6c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	2220      	movs	r2, #32
 800caee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	2200      	movs	r2, #0
 800caf6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800cafa:	2303      	movs	r3, #3
 800cafc:	e00f      	b.n	800cb1e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	69da      	ldr	r2, [r3, #28]
 800cb04:	68bb      	ldr	r3, [r7, #8]
 800cb06:	4013      	ands	r3, r2
 800cb08:	68ba      	ldr	r2, [r7, #8]
 800cb0a:	429a      	cmp	r2, r3
 800cb0c:	bf0c      	ite	eq
 800cb0e:	2301      	moveq	r3, #1
 800cb10:	2300      	movne	r3, #0
 800cb12:	b2db      	uxtb	r3, r3
 800cb14:	461a      	mov	r2, r3
 800cb16:	79fb      	ldrb	r3, [r7, #7]
 800cb18:	429a      	cmp	r2, r3
 800cb1a:	d0a6      	beq.n	800ca6a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cb1c:	2300      	movs	r3, #0
}
 800cb1e:	4618      	mov	r0, r3
 800cb20:	3710      	adds	r7, #16
 800cb22:	46bd      	mov	sp, r7
 800cb24:	bd80      	pop	{r7, pc}
	...

0800cb28 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cb28:	b480      	push	{r7}
 800cb2a:	b0a3      	sub	sp, #140	; 0x8c
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	60f8      	str	r0, [r7, #12]
 800cb30:	60b9      	str	r1, [r7, #8]
 800cb32:	4613      	mov	r3, r2
 800cb34:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	68ba      	ldr	r2, [r7, #8]
 800cb3a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	88fa      	ldrh	r2, [r7, #6]
 800cb40:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	88fa      	ldrh	r2, [r7, #6]
 800cb48:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	2200      	movs	r2, #0
 800cb50:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	689b      	ldr	r3, [r3, #8]
 800cb56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cb5a:	d10e      	bne.n	800cb7a <UART_Start_Receive_IT+0x52>
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	691b      	ldr	r3, [r3, #16]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d105      	bne.n	800cb70 <UART_Start_Receive_IT+0x48>
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	f240 12ff 	movw	r2, #511	; 0x1ff
 800cb6a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cb6e:	e02d      	b.n	800cbcc <UART_Start_Receive_IT+0xa4>
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	22ff      	movs	r2, #255	; 0xff
 800cb74:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cb78:	e028      	b.n	800cbcc <UART_Start_Receive_IT+0xa4>
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	689b      	ldr	r3, [r3, #8]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d10d      	bne.n	800cb9e <UART_Start_Receive_IT+0x76>
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	691b      	ldr	r3, [r3, #16]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d104      	bne.n	800cb94 <UART_Start_Receive_IT+0x6c>
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	22ff      	movs	r2, #255	; 0xff
 800cb8e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cb92:	e01b      	b.n	800cbcc <UART_Start_Receive_IT+0xa4>
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	227f      	movs	r2, #127	; 0x7f
 800cb98:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cb9c:	e016      	b.n	800cbcc <UART_Start_Receive_IT+0xa4>
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	689b      	ldr	r3, [r3, #8]
 800cba2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cba6:	d10d      	bne.n	800cbc4 <UART_Start_Receive_IT+0x9c>
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	691b      	ldr	r3, [r3, #16]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d104      	bne.n	800cbba <UART_Start_Receive_IT+0x92>
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	227f      	movs	r2, #127	; 0x7f
 800cbb4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cbb8:	e008      	b.n	800cbcc <UART_Start_Receive_IT+0xa4>
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	223f      	movs	r2, #63	; 0x3f
 800cbbe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cbc2:	e003      	b.n	800cbcc <UART_Start_Receive_IT+0xa4>
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	2200      	movs	r2, #0
 800cbd0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	2222      	movs	r2, #34	; 0x22
 800cbd8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	3308      	adds	r3, #8
 800cbe2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbe4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cbe6:	e853 3f00 	ldrex	r3, [r3]
 800cbea:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800cbec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cbee:	f043 0301 	orr.w	r3, r3, #1
 800cbf2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	3308      	adds	r3, #8
 800cbfc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800cc00:	673a      	str	r2, [r7, #112]	; 0x70
 800cc02:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc04:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800cc06:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800cc08:	e841 2300 	strex	r3, r2, [r1]
 800cc0c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800cc0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d1e3      	bne.n	800cbdc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cc18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cc1c:	d14f      	bne.n	800ccbe <UART_Start_Receive_IT+0x196>
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cc24:	88fa      	ldrh	r2, [r7, #6]
 800cc26:	429a      	cmp	r2, r3
 800cc28:	d349      	bcc.n	800ccbe <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	689b      	ldr	r3, [r3, #8]
 800cc2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cc32:	d107      	bne.n	800cc44 <UART_Start_Receive_IT+0x11c>
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	691b      	ldr	r3, [r3, #16]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d103      	bne.n	800cc44 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	4a47      	ldr	r2, [pc, #284]	; (800cd5c <UART_Start_Receive_IT+0x234>)
 800cc40:	675a      	str	r2, [r3, #116]	; 0x74
 800cc42:	e002      	b.n	800cc4a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	4a46      	ldr	r2, [pc, #280]	; (800cd60 <UART_Start_Receive_IT+0x238>)
 800cc48:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	691b      	ldr	r3, [r3, #16]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d01a      	beq.n	800cc88 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc5a:	e853 3f00 	ldrex	r3, [r3]
 800cc5e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800cc60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cc66:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	461a      	mov	r2, r3
 800cc70:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cc74:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cc76:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc78:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cc7a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cc7c:	e841 2300 	strex	r3, r2, [r1]
 800cc80:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800cc82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d1e4      	bne.n	800cc52 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	3308      	adds	r3, #8
 800cc8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc92:	e853 3f00 	ldrex	r3, [r3]
 800cc96:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cc98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cc9e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	3308      	adds	r3, #8
 800cca6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800cca8:	64ba      	str	r2, [r7, #72]	; 0x48
 800ccaa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccac:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ccae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ccb0:	e841 2300 	strex	r3, r2, [r1]
 800ccb4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ccb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d1e5      	bne.n	800cc88 <UART_Start_Receive_IT+0x160>
 800ccbc:	e046      	b.n	800cd4c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	689b      	ldr	r3, [r3, #8]
 800ccc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ccc6:	d107      	bne.n	800ccd8 <UART_Start_Receive_IT+0x1b0>
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	691b      	ldr	r3, [r3, #16]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d103      	bne.n	800ccd8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	4a24      	ldr	r2, [pc, #144]	; (800cd64 <UART_Start_Receive_IT+0x23c>)
 800ccd4:	675a      	str	r2, [r3, #116]	; 0x74
 800ccd6:	e002      	b.n	800ccde <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	4a23      	ldr	r2, [pc, #140]	; (800cd68 <UART_Start_Receive_IT+0x240>)
 800ccdc:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	691b      	ldr	r3, [r3, #16]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d019      	beq.n	800cd1a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccee:	e853 3f00 	ldrex	r3, [r3]
 800ccf2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ccf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccf6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800ccfa:	677b      	str	r3, [r7, #116]	; 0x74
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	461a      	mov	r2, r3
 800cd02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cd04:	637b      	str	r3, [r7, #52]	; 0x34
 800cd06:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd08:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cd0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cd0c:	e841 2300 	strex	r3, r2, [r1]
 800cd10:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800cd12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d1e6      	bne.n	800cce6 <UART_Start_Receive_IT+0x1be>
 800cd18:	e018      	b.n	800cd4c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd20:	697b      	ldr	r3, [r7, #20]
 800cd22:	e853 3f00 	ldrex	r3, [r3]
 800cd26:	613b      	str	r3, [r7, #16]
   return(result);
 800cd28:	693b      	ldr	r3, [r7, #16]
 800cd2a:	f043 0320 	orr.w	r3, r3, #32
 800cd2e:	67bb      	str	r3, [r7, #120]	; 0x78
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	461a      	mov	r2, r3
 800cd36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cd38:	623b      	str	r3, [r7, #32]
 800cd3a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd3c:	69f9      	ldr	r1, [r7, #28]
 800cd3e:	6a3a      	ldr	r2, [r7, #32]
 800cd40:	e841 2300 	strex	r3, r2, [r1]
 800cd44:	61bb      	str	r3, [r7, #24]
   return(result);
 800cd46:	69bb      	ldr	r3, [r7, #24]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d1e6      	bne.n	800cd1a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800cd4c:	2300      	movs	r3, #0
}
 800cd4e:	4618      	mov	r0, r3
 800cd50:	378c      	adds	r7, #140	; 0x8c
 800cd52:	46bd      	mov	sp, r7
 800cd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd58:	4770      	bx	lr
 800cd5a:	bf00      	nop
 800cd5c:	0800d58d 	.word	0x0800d58d
 800cd60:	0800d22d 	.word	0x0800d22d
 800cd64:	0800d075 	.word	0x0800d075
 800cd68:	0800cebd 	.word	0x0800cebd

0800cd6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cd6c:	b480      	push	{r7}
 800cd6e:	b095      	sub	sp, #84	; 0x54
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd7c:	e853 3f00 	ldrex	r3, [r3]
 800cd80:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cd82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cd88:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	461a      	mov	r2, r3
 800cd90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd92:	643b      	str	r3, [r7, #64]	; 0x40
 800cd94:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd96:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cd98:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cd9a:	e841 2300 	strex	r3, r2, [r1]
 800cd9e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cda0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d1e6      	bne.n	800cd74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	3308      	adds	r3, #8
 800cdac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdae:	6a3b      	ldr	r3, [r7, #32]
 800cdb0:	e853 3f00 	ldrex	r3, [r3]
 800cdb4:	61fb      	str	r3, [r7, #28]
   return(result);
 800cdb6:	69fa      	ldr	r2, [r7, #28]
 800cdb8:	4b1e      	ldr	r3, [pc, #120]	; (800ce34 <UART_EndRxTransfer+0xc8>)
 800cdba:	4013      	ands	r3, r2
 800cdbc:	64bb      	str	r3, [r7, #72]	; 0x48
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	3308      	adds	r3, #8
 800cdc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cdc6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cdc8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cdcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cdce:	e841 2300 	strex	r3, r2, [r1]
 800cdd2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cdd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d1e5      	bne.n	800cda6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cdde:	2b01      	cmp	r3, #1
 800cde0:	d118      	bne.n	800ce14 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	e853 3f00 	ldrex	r3, [r3]
 800cdee:	60bb      	str	r3, [r7, #8]
   return(result);
 800cdf0:	68bb      	ldr	r3, [r7, #8]
 800cdf2:	f023 0310 	bic.w	r3, r3, #16
 800cdf6:	647b      	str	r3, [r7, #68]	; 0x44
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	461a      	mov	r2, r3
 800cdfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce00:	61bb      	str	r3, [r7, #24]
 800ce02:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce04:	6979      	ldr	r1, [r7, #20]
 800ce06:	69ba      	ldr	r2, [r7, #24]
 800ce08:	e841 2300 	strex	r3, r2, [r1]
 800ce0c:	613b      	str	r3, [r7, #16]
   return(result);
 800ce0e:	693b      	ldr	r3, [r7, #16]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d1e6      	bne.n	800cde2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	2220      	movs	r2, #32
 800ce18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	2200      	movs	r2, #0
 800ce20:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	2200      	movs	r2, #0
 800ce26:	675a      	str	r2, [r3, #116]	; 0x74
}
 800ce28:	bf00      	nop
 800ce2a:	3754      	adds	r7, #84	; 0x54
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce32:	4770      	bx	lr
 800ce34:	effffffe 	.word	0xeffffffe

0800ce38 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b084      	sub	sp, #16
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce44:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	2200      	movs	r2, #0
 800ce4a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	2200      	movs	r2, #0
 800ce52:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ce56:	68f8      	ldr	r0, [r7, #12]
 800ce58:	f7fe ff34 	bl	800bcc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ce5c:	bf00      	nop
 800ce5e:	3710      	adds	r7, #16
 800ce60:	46bd      	mov	sp, r7
 800ce62:	bd80      	pop	{r7, pc}

0800ce64 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b088      	sub	sp, #32
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	e853 3f00 	ldrex	r3, [r3]
 800ce78:	60bb      	str	r3, [r7, #8]
   return(result);
 800ce7a:	68bb      	ldr	r3, [r7, #8]
 800ce7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ce80:	61fb      	str	r3, [r7, #28]
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	461a      	mov	r2, r3
 800ce88:	69fb      	ldr	r3, [r7, #28]
 800ce8a:	61bb      	str	r3, [r7, #24]
 800ce8c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce8e:	6979      	ldr	r1, [r7, #20]
 800ce90:	69ba      	ldr	r2, [r7, #24]
 800ce92:	e841 2300 	strex	r3, r2, [r1]
 800ce96:	613b      	str	r3, [r7, #16]
   return(result);
 800ce98:	693b      	ldr	r3, [r7, #16]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d1e6      	bne.n	800ce6c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	2220      	movs	r2, #32
 800cea2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	2200      	movs	r2, #0
 800ceaa:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ceac:	6878      	ldr	r0, [r7, #4]
 800ceae:	f7fe feff 	bl	800bcb0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ceb2:	bf00      	nop
 800ceb4:	3720      	adds	r7, #32
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	bd80      	pop	{r7, pc}
	...

0800cebc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b09c      	sub	sp, #112	; 0x70
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ceca:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ced4:	2b22      	cmp	r3, #34	; 0x22
 800ced6:	f040 80be 	bne.w	800d056 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cee0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800cee4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800cee8:	b2d9      	uxtb	r1, r3
 800ceea:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800ceee:	b2da      	uxtb	r2, r3
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cef4:	400a      	ands	r2, r1
 800cef6:	b2d2      	uxtb	r2, r2
 800cef8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cefe:	1c5a      	adds	r2, r3, #1
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cf0a:	b29b      	uxth	r3, r3
 800cf0c:	3b01      	subs	r3, #1
 800cf0e:	b29a      	uxth	r2, r3
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cf1c:	b29b      	uxth	r3, r3
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	f040 80a1 	bne.w	800d066 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf2c:	e853 3f00 	ldrex	r3, [r3]
 800cf30:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800cf32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cf34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cf38:	66bb      	str	r3, [r7, #104]	; 0x68
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	461a      	mov	r2, r3
 800cf40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cf42:	65bb      	str	r3, [r7, #88]	; 0x58
 800cf44:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf46:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cf48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cf4a:	e841 2300 	strex	r3, r2, [r1]
 800cf4e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800cf50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d1e6      	bne.n	800cf24 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	3308      	adds	r3, #8
 800cf5c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf60:	e853 3f00 	ldrex	r3, [r3]
 800cf64:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cf66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf68:	f023 0301 	bic.w	r3, r3, #1
 800cf6c:	667b      	str	r3, [r7, #100]	; 0x64
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	3308      	adds	r3, #8
 800cf74:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800cf76:	647a      	str	r2, [r7, #68]	; 0x44
 800cf78:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf7a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cf7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cf7e:	e841 2300 	strex	r3, r2, [r1]
 800cf82:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cf84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d1e5      	bne.n	800cf56 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	2220      	movs	r2, #32
 800cf8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	2200      	movs	r2, #0
 800cf96:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	4a33      	ldr	r2, [pc, #204]	; (800d070 <UART_RxISR_8BIT+0x1b4>)
 800cfa4:	4293      	cmp	r3, r2
 800cfa6:	d01f      	beq.n	800cfe8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	685b      	ldr	r3, [r3, #4]
 800cfae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d018      	beq.n	800cfe8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfbe:	e853 3f00 	ldrex	r3, [r3]
 800cfc2:	623b      	str	r3, [r7, #32]
   return(result);
 800cfc4:	6a3b      	ldr	r3, [r7, #32]
 800cfc6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cfca:	663b      	str	r3, [r7, #96]	; 0x60
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	461a      	mov	r2, r3
 800cfd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cfd4:	633b      	str	r3, [r7, #48]	; 0x30
 800cfd6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfd8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cfda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cfdc:	e841 2300 	strex	r3, r2, [r1]
 800cfe0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cfe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d1e6      	bne.n	800cfb6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cfec:	2b01      	cmp	r3, #1
 800cfee:	d12e      	bne.n	800d04e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	2200      	movs	r2, #0
 800cff4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cffc:	693b      	ldr	r3, [r7, #16]
 800cffe:	e853 3f00 	ldrex	r3, [r3]
 800d002:	60fb      	str	r3, [r7, #12]
   return(result);
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	f023 0310 	bic.w	r3, r3, #16
 800d00a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	461a      	mov	r2, r3
 800d012:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d014:	61fb      	str	r3, [r7, #28]
 800d016:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d018:	69b9      	ldr	r1, [r7, #24]
 800d01a:	69fa      	ldr	r2, [r7, #28]
 800d01c:	e841 2300 	strex	r3, r2, [r1]
 800d020:	617b      	str	r3, [r7, #20]
   return(result);
 800d022:	697b      	ldr	r3, [r7, #20]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d1e6      	bne.n	800cff6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	69db      	ldr	r3, [r3, #28]
 800d02e:	f003 0310 	and.w	r3, r3, #16
 800d032:	2b10      	cmp	r3, #16
 800d034:	d103      	bne.n	800d03e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	2210      	movs	r2, #16
 800d03c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d044:	4619      	mov	r1, r3
 800d046:	6878      	ldr	r0, [r7, #4]
 800d048:	f7fe fe46 	bl	800bcd8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d04c:	e00b      	b.n	800d066 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800d04e:	6878      	ldr	r0, [r7, #4]
 800d050:	f7f4 fcc6 	bl	80019e0 <HAL_UART_RxCpltCallback>
}
 800d054:	e007      	b.n	800d066 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	699a      	ldr	r2, [r3, #24]
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	f042 0208 	orr.w	r2, r2, #8
 800d064:	619a      	str	r2, [r3, #24]
}
 800d066:	bf00      	nop
 800d068:	3770      	adds	r7, #112	; 0x70
 800d06a:	46bd      	mov	sp, r7
 800d06c:	bd80      	pop	{r7, pc}
 800d06e:	bf00      	nop
 800d070:	58000c00 	.word	0x58000c00

0800d074 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d074:	b580      	push	{r7, lr}
 800d076:	b09c      	sub	sp, #112	; 0x70
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d082:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d08c:	2b22      	cmp	r3, #34	; 0x22
 800d08e:	f040 80be 	bne.w	800d20e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d098:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d0a0:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800d0a2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800d0a6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800d0aa:	4013      	ands	r3, r2
 800d0ac:	b29a      	uxth	r2, r3
 800d0ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d0b0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d0b6:	1c9a      	adds	r2, r3, #2
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d0c2:	b29b      	uxth	r3, r3
 800d0c4:	3b01      	subs	r3, #1
 800d0c6:	b29a      	uxth	r2, r3
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d0d4:	b29b      	uxth	r3, r3
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	f040 80a1 	bne.w	800d21e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d0e4:	e853 3f00 	ldrex	r3, [r3]
 800d0e8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800d0ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d0ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d0f0:	667b      	str	r3, [r7, #100]	; 0x64
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	461a      	mov	r2, r3
 800d0f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d0fa:	657b      	str	r3, [r7, #84]	; 0x54
 800d0fc:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0fe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d100:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d102:	e841 2300 	strex	r3, r2, [r1]
 800d106:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d108:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d1e6      	bne.n	800d0dc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	3308      	adds	r3, #8
 800d114:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d118:	e853 3f00 	ldrex	r3, [r3]
 800d11c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d11e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d120:	f023 0301 	bic.w	r3, r3, #1
 800d124:	663b      	str	r3, [r7, #96]	; 0x60
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	3308      	adds	r3, #8
 800d12c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d12e:	643a      	str	r2, [r7, #64]	; 0x40
 800d130:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d132:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d134:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d136:	e841 2300 	strex	r3, r2, [r1]
 800d13a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d13c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d1e5      	bne.n	800d10e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	2220      	movs	r2, #32
 800d146:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	2200      	movs	r2, #0
 800d14e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	2200      	movs	r2, #0
 800d154:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	4a33      	ldr	r2, [pc, #204]	; (800d228 <UART_RxISR_16BIT+0x1b4>)
 800d15c:	4293      	cmp	r3, r2
 800d15e:	d01f      	beq.n	800d1a0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	685b      	ldr	r3, [r3, #4]
 800d166:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d018      	beq.n	800d1a0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d174:	6a3b      	ldr	r3, [r7, #32]
 800d176:	e853 3f00 	ldrex	r3, [r3]
 800d17a:	61fb      	str	r3, [r7, #28]
   return(result);
 800d17c:	69fb      	ldr	r3, [r7, #28]
 800d17e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d182:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	461a      	mov	r2, r3
 800d18a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d18c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d18e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d190:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d192:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d194:	e841 2300 	strex	r3, r2, [r1]
 800d198:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d1e6      	bne.n	800d16e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1a4:	2b01      	cmp	r3, #1
 800d1a6:	d12e      	bne.n	800d206 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	2200      	movs	r2, #0
 800d1ac:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	e853 3f00 	ldrex	r3, [r3]
 800d1ba:	60bb      	str	r3, [r7, #8]
   return(result);
 800d1bc:	68bb      	ldr	r3, [r7, #8]
 800d1be:	f023 0310 	bic.w	r3, r3, #16
 800d1c2:	65bb      	str	r3, [r7, #88]	; 0x58
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	461a      	mov	r2, r3
 800d1ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d1cc:	61bb      	str	r3, [r7, #24]
 800d1ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1d0:	6979      	ldr	r1, [r7, #20]
 800d1d2:	69ba      	ldr	r2, [r7, #24]
 800d1d4:	e841 2300 	strex	r3, r2, [r1]
 800d1d8:	613b      	str	r3, [r7, #16]
   return(result);
 800d1da:	693b      	ldr	r3, [r7, #16]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d1e6      	bne.n	800d1ae <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	69db      	ldr	r3, [r3, #28]
 800d1e6:	f003 0310 	and.w	r3, r3, #16
 800d1ea:	2b10      	cmp	r3, #16
 800d1ec:	d103      	bne.n	800d1f6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	2210      	movs	r2, #16
 800d1f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d1fc:	4619      	mov	r1, r3
 800d1fe:	6878      	ldr	r0, [r7, #4]
 800d200:	f7fe fd6a 	bl	800bcd8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d204:	e00b      	b.n	800d21e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800d206:	6878      	ldr	r0, [r7, #4]
 800d208:	f7f4 fbea 	bl	80019e0 <HAL_UART_RxCpltCallback>
}
 800d20c:	e007      	b.n	800d21e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	699a      	ldr	r2, [r3, #24]
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	f042 0208 	orr.w	r2, r2, #8
 800d21c:	619a      	str	r2, [r3, #24]
}
 800d21e:	bf00      	nop
 800d220:	3770      	adds	r7, #112	; 0x70
 800d222:	46bd      	mov	sp, r7
 800d224:	bd80      	pop	{r7, pc}
 800d226:	bf00      	nop
 800d228:	58000c00 	.word	0x58000c00

0800d22c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b0ac      	sub	sp, #176	; 0xb0
 800d230:	af00      	add	r7, sp, #0
 800d232:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d23a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	69db      	ldr	r3, [r3, #28]
 800d244:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	689b      	ldr	r3, [r3, #8]
 800d258:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d262:	2b22      	cmp	r3, #34	; 0x22
 800d264:	f040 8180 	bne.w	800d568 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d26e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d272:	e123      	b.n	800d4bc <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d27a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d27e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800d282:	b2d9      	uxtb	r1, r3
 800d284:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800d288:	b2da      	uxtb	r2, r3
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d28e:	400a      	ands	r2, r1
 800d290:	b2d2      	uxtb	r2, r2
 800d292:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d298:	1c5a      	adds	r2, r3, #1
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d2a4:	b29b      	uxth	r3, r3
 800d2a6:	3b01      	subs	r3, #1
 800d2a8:	b29a      	uxth	r2, r3
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	69db      	ldr	r3, [r3, #28]
 800d2b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d2ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d2be:	f003 0307 	and.w	r3, r3, #7
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d053      	beq.n	800d36e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d2c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d2ca:	f003 0301 	and.w	r3, r3, #1
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d011      	beq.n	800d2f6 <UART_RxISR_8BIT_FIFOEN+0xca>
 800d2d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d2d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d00b      	beq.n	800d2f6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	2201      	movs	r2, #1
 800d2e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d2ec:	f043 0201 	orr.w	r2, r3, #1
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d2f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d2fa:	f003 0302 	and.w	r3, r3, #2
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d011      	beq.n	800d326 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800d302:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d306:	f003 0301 	and.w	r3, r3, #1
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d00b      	beq.n	800d326 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	2202      	movs	r2, #2
 800d314:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d31c:	f043 0204 	orr.w	r2, r3, #4
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d326:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d32a:	f003 0304 	and.w	r3, r3, #4
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d011      	beq.n	800d356 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800d332:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d336:	f003 0301 	and.w	r3, r3, #1
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d00b      	beq.n	800d356 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	2204      	movs	r2, #4
 800d344:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d34c:	f043 0202 	orr.w	r2, r3, #2
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d006      	beq.n	800d36e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d360:	6878      	ldr	r0, [r7, #4]
 800d362:	f7fe fcaf 	bl	800bcc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	2200      	movs	r2, #0
 800d36a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d374:	b29b      	uxth	r3, r3
 800d376:	2b00      	cmp	r3, #0
 800d378:	f040 80a0 	bne.w	800d4bc <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d382:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d384:	e853 3f00 	ldrex	r3, [r3]
 800d388:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800d38a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d38c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d390:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	461a      	mov	r2, r3
 800d39a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d39e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d3a0:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3a2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800d3a4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800d3a6:	e841 2300 	strex	r3, r2, [r1]
 800d3aa:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800d3ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d1e4      	bne.n	800d37c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	3308      	adds	r3, #8
 800d3b8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d3bc:	e853 3f00 	ldrex	r3, [r3]
 800d3c0:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800d3c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d3c4:	4b6e      	ldr	r3, [pc, #440]	; (800d580 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800d3c6:	4013      	ands	r3, r2
 800d3c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	3308      	adds	r3, #8
 800d3d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d3d6:	66ba      	str	r2, [r7, #104]	; 0x68
 800d3d8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3da:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800d3dc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d3de:	e841 2300 	strex	r3, r2, [r1]
 800d3e2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800d3e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d1e3      	bne.n	800d3b2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	2220      	movs	r2, #32
 800d3ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	2200      	movs	r2, #0
 800d3f6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	4a60      	ldr	r2, [pc, #384]	; (800d584 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800d404:	4293      	cmp	r3, r2
 800d406:	d021      	beq.n	800d44c <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	685b      	ldr	r3, [r3, #4]
 800d40e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d412:	2b00      	cmp	r3, #0
 800d414:	d01a      	beq.n	800d44c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d41c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d41e:	e853 3f00 	ldrex	r3, [r3]
 800d422:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800d424:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d426:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d42a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	461a      	mov	r2, r3
 800d434:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d438:	657b      	str	r3, [r7, #84]	; 0x54
 800d43a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d43c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d43e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d440:	e841 2300 	strex	r3, r2, [r1]
 800d444:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d446:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d1e4      	bne.n	800d416 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d450:	2b01      	cmp	r3, #1
 800d452:	d130      	bne.n	800d4b6 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	2200      	movs	r2, #0
 800d458:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d462:	e853 3f00 	ldrex	r3, [r3]
 800d466:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d46a:	f023 0310 	bic.w	r3, r3, #16
 800d46e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	461a      	mov	r2, r3
 800d478:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d47c:	643b      	str	r3, [r7, #64]	; 0x40
 800d47e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d480:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d482:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d484:	e841 2300 	strex	r3, r2, [r1]
 800d488:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d48a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d1e4      	bne.n	800d45a <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	69db      	ldr	r3, [r3, #28]
 800d496:	f003 0310 	and.w	r3, r3, #16
 800d49a:	2b10      	cmp	r3, #16
 800d49c:	d103      	bne.n	800d4a6 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	2210      	movs	r2, #16
 800d4a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d4ac:	4619      	mov	r1, r3
 800d4ae:	6878      	ldr	r0, [r7, #4]
 800d4b0:	f7fe fc12 	bl	800bcd8 <HAL_UARTEx_RxEventCallback>
 800d4b4:	e002      	b.n	800d4bc <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800d4b6:	6878      	ldr	r0, [r7, #4]
 800d4b8:	f7f4 fa92 	bl	80019e0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d4bc:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d006      	beq.n	800d4d2 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800d4c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d4c8:	f003 0320 	and.w	r3, r3, #32
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	f47f aed1 	bne.w	800d274 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d4d8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d4dc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d049      	beq.n	800d578 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d4ea:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800d4ee:	429a      	cmp	r2, r3
 800d4f0:	d242      	bcs.n	800d578 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	3308      	adds	r3, #8
 800d4f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4fa:	6a3b      	ldr	r3, [r7, #32]
 800d4fc:	e853 3f00 	ldrex	r3, [r3]
 800d500:	61fb      	str	r3, [r7, #28]
   return(result);
 800d502:	69fb      	ldr	r3, [r7, #28]
 800d504:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d508:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	3308      	adds	r3, #8
 800d512:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800d516:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d518:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d51a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d51c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d51e:	e841 2300 	strex	r3, r2, [r1]
 800d522:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d526:	2b00      	cmp	r3, #0
 800d528:	d1e3      	bne.n	800d4f2 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	4a16      	ldr	r2, [pc, #88]	; (800d588 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800d52e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	e853 3f00 	ldrex	r3, [r3]
 800d53c:	60bb      	str	r3, [r7, #8]
   return(result);
 800d53e:	68bb      	ldr	r3, [r7, #8]
 800d540:	f043 0320 	orr.w	r3, r3, #32
 800d544:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	461a      	mov	r2, r3
 800d54e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d552:	61bb      	str	r3, [r7, #24]
 800d554:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d556:	6979      	ldr	r1, [r7, #20]
 800d558:	69ba      	ldr	r2, [r7, #24]
 800d55a:	e841 2300 	strex	r3, r2, [r1]
 800d55e:	613b      	str	r3, [r7, #16]
   return(result);
 800d560:	693b      	ldr	r3, [r7, #16]
 800d562:	2b00      	cmp	r3, #0
 800d564:	d1e4      	bne.n	800d530 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d566:	e007      	b.n	800d578 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	699a      	ldr	r2, [r3, #24]
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	f042 0208 	orr.w	r2, r2, #8
 800d576:	619a      	str	r2, [r3, #24]
}
 800d578:	bf00      	nop
 800d57a:	37b0      	adds	r7, #176	; 0xb0
 800d57c:	46bd      	mov	sp, r7
 800d57e:	bd80      	pop	{r7, pc}
 800d580:	effffffe 	.word	0xeffffffe
 800d584:	58000c00 	.word	0x58000c00
 800d588:	0800cebd 	.word	0x0800cebd

0800d58c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d58c:	b580      	push	{r7, lr}
 800d58e:	b0ae      	sub	sp, #184	; 0xb8
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d59a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	69db      	ldr	r3, [r3, #28]
 800d5a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	689b      	ldr	r3, [r3, #8]
 800d5b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d5c2:	2b22      	cmp	r3, #34	; 0x22
 800d5c4:	f040 8184 	bne.w	800d8d0 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d5ce:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d5d2:	e127      	b.n	800d824 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5da:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d5e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800d5e6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800d5ea:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800d5ee:	4013      	ands	r3, r2
 800d5f0:	b29a      	uxth	r2, r3
 800d5f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d5f6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d5fc:	1c9a      	adds	r2, r3, #2
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d608:	b29b      	uxth	r3, r3
 800d60a:	3b01      	subs	r3, #1
 800d60c:	b29a      	uxth	r2, r3
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	69db      	ldr	r3, [r3, #28]
 800d61a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d61e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d622:	f003 0307 	and.w	r3, r3, #7
 800d626:	2b00      	cmp	r3, #0
 800d628:	d053      	beq.n	800d6d2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d62a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d62e:	f003 0301 	and.w	r3, r3, #1
 800d632:	2b00      	cmp	r3, #0
 800d634:	d011      	beq.n	800d65a <UART_RxISR_16BIT_FIFOEN+0xce>
 800d636:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d63a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d00b      	beq.n	800d65a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	2201      	movs	r2, #1
 800d648:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d650:	f043 0201 	orr.w	r2, r3, #1
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d65a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d65e:	f003 0302 	and.w	r3, r3, #2
 800d662:	2b00      	cmp	r3, #0
 800d664:	d011      	beq.n	800d68a <UART_RxISR_16BIT_FIFOEN+0xfe>
 800d666:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d66a:	f003 0301 	and.w	r3, r3, #1
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d00b      	beq.n	800d68a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	2202      	movs	r2, #2
 800d678:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d680:	f043 0204 	orr.w	r2, r3, #4
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d68a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d68e:	f003 0304 	and.w	r3, r3, #4
 800d692:	2b00      	cmp	r3, #0
 800d694:	d011      	beq.n	800d6ba <UART_RxISR_16BIT_FIFOEN+0x12e>
 800d696:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d69a:	f003 0301 	and.w	r3, r3, #1
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d00b      	beq.n	800d6ba <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	2204      	movs	r2, #4
 800d6a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d6b0:	f043 0202 	orr.w	r2, r3, #2
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d006      	beq.n	800d6d2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d6c4:	6878      	ldr	r0, [r7, #4]
 800d6c6:	f7fe fafd 	bl	800bcc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d6d8:	b29b      	uxth	r3, r3
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	f040 80a2 	bne.w	800d824 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d6e8:	e853 3f00 	ldrex	r3, [r3]
 800d6ec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d6ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d6f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d6f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	461a      	mov	r2, r3
 800d6fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d702:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d706:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d708:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d70a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d70e:	e841 2300 	strex	r3, r2, [r1]
 800d712:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d714:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d716:	2b00      	cmp	r3, #0
 800d718:	d1e2      	bne.n	800d6e0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	3308      	adds	r3, #8
 800d720:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d722:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d724:	e853 3f00 	ldrex	r3, [r3]
 800d728:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d72a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d72c:	4b6e      	ldr	r3, [pc, #440]	; (800d8e8 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800d72e:	4013      	ands	r3, r2
 800d730:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	3308      	adds	r3, #8
 800d73a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800d73e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d740:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d742:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d744:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d746:	e841 2300 	strex	r3, r2, [r1]
 800d74a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d74c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d1e3      	bne.n	800d71a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	2220      	movs	r2, #32
 800d756:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	2200      	movs	r2, #0
 800d75e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	2200      	movs	r2, #0
 800d764:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	4a60      	ldr	r2, [pc, #384]	; (800d8ec <UART_RxISR_16BIT_FIFOEN+0x360>)
 800d76c:	4293      	cmp	r3, r2
 800d76e:	d021      	beq.n	800d7b4 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	685b      	ldr	r3, [r3, #4]
 800d776:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d01a      	beq.n	800d7b4 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d784:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d786:	e853 3f00 	ldrex	r3, [r3]
 800d78a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d78c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d78e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d792:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	461a      	mov	r2, r3
 800d79c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d7a0:	65bb      	str	r3, [r7, #88]	; 0x58
 800d7a2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d7a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d7a8:	e841 2300 	strex	r3, r2, [r1]
 800d7ac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d7ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d1e4      	bne.n	800d77e <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d7b8:	2b01      	cmp	r3, #1
 800d7ba:	d130      	bne.n	800d81e <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	2200      	movs	r2, #0
 800d7c0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7ca:	e853 3f00 	ldrex	r3, [r3]
 800d7ce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d7d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7d2:	f023 0310 	bic.w	r3, r3, #16
 800d7d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	461a      	mov	r2, r3
 800d7e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d7e4:	647b      	str	r3, [r7, #68]	; 0x44
 800d7e6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d7ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d7ec:	e841 2300 	strex	r3, r2, [r1]
 800d7f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d7f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d1e4      	bne.n	800d7c2 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	69db      	ldr	r3, [r3, #28]
 800d7fe:	f003 0310 	and.w	r3, r3, #16
 800d802:	2b10      	cmp	r3, #16
 800d804:	d103      	bne.n	800d80e <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	2210      	movs	r2, #16
 800d80c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d814:	4619      	mov	r1, r3
 800d816:	6878      	ldr	r0, [r7, #4]
 800d818:	f7fe fa5e 	bl	800bcd8 <HAL_UARTEx_RxEventCallback>
 800d81c:	e002      	b.n	800d824 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800d81e:	6878      	ldr	r0, [r7, #4]
 800d820:	f7f4 f8de 	bl	80019e0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d824:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d006      	beq.n	800d83a <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800d82c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d830:	f003 0320 	and.w	r3, r3, #32
 800d834:	2b00      	cmp	r3, #0
 800d836:	f47f aecd 	bne.w	800d5d4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d840:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d844:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d049      	beq.n	800d8e0 <UART_RxISR_16BIT_FIFOEN+0x354>
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d852:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800d856:	429a      	cmp	r2, r3
 800d858:	d242      	bcs.n	800d8e0 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	3308      	adds	r3, #8
 800d860:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d864:	e853 3f00 	ldrex	r3, [r3]
 800d868:	623b      	str	r3, [r7, #32]
   return(result);
 800d86a:	6a3b      	ldr	r3, [r7, #32]
 800d86c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d870:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	3308      	adds	r3, #8
 800d87a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d87e:	633a      	str	r2, [r7, #48]	; 0x30
 800d880:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d882:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d884:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d886:	e841 2300 	strex	r3, r2, [r1]
 800d88a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d88c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d1e3      	bne.n	800d85a <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	4a16      	ldr	r2, [pc, #88]	; (800d8f0 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800d896:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d89e:	693b      	ldr	r3, [r7, #16]
 800d8a0:	e853 3f00 	ldrex	r3, [r3]
 800d8a4:	60fb      	str	r3, [r7, #12]
   return(result);
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	f043 0320 	orr.w	r3, r3, #32
 800d8ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	461a      	mov	r2, r3
 800d8b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d8ba:	61fb      	str	r3, [r7, #28]
 800d8bc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8be:	69b9      	ldr	r1, [r7, #24]
 800d8c0:	69fa      	ldr	r2, [r7, #28]
 800d8c2:	e841 2300 	strex	r3, r2, [r1]
 800d8c6:	617b      	str	r3, [r7, #20]
   return(result);
 800d8c8:	697b      	ldr	r3, [r7, #20]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d1e4      	bne.n	800d898 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d8ce:	e007      	b.n	800d8e0 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	699a      	ldr	r2, [r3, #24]
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	f042 0208 	orr.w	r2, r2, #8
 800d8de:	619a      	str	r2, [r3, #24]
}
 800d8e0:	bf00      	nop
 800d8e2:	37b8      	adds	r7, #184	; 0xb8
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	bd80      	pop	{r7, pc}
 800d8e8:	effffffe 	.word	0xeffffffe
 800d8ec:	58000c00 	.word	0x58000c00
 800d8f0:	0800d075 	.word	0x0800d075

0800d8f4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d8f4:	b480      	push	{r7}
 800d8f6:	b083      	sub	sp, #12
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d8fc:	bf00      	nop
 800d8fe:	370c      	adds	r7, #12
 800d900:	46bd      	mov	sp, r7
 800d902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d906:	4770      	bx	lr

0800d908 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d908:	b480      	push	{r7}
 800d90a:	b083      	sub	sp, #12
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d910:	bf00      	nop
 800d912:	370c      	adds	r7, #12
 800d914:	46bd      	mov	sp, r7
 800d916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91a:	4770      	bx	lr

0800d91c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d91c:	b480      	push	{r7}
 800d91e:	b083      	sub	sp, #12
 800d920:	af00      	add	r7, sp, #0
 800d922:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d924:	bf00      	nop
 800d926:	370c      	adds	r7, #12
 800d928:	46bd      	mov	sp, r7
 800d92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92e:	4770      	bx	lr

0800d930 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d930:	b480      	push	{r7}
 800d932:	b085      	sub	sp, #20
 800d934:	af00      	add	r7, sp, #0
 800d936:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d93e:	2b01      	cmp	r3, #1
 800d940:	d101      	bne.n	800d946 <HAL_UARTEx_DisableFifoMode+0x16>
 800d942:	2302      	movs	r3, #2
 800d944:	e027      	b.n	800d996 <HAL_UARTEx_DisableFifoMode+0x66>
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	2201      	movs	r2, #1
 800d94a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	2224      	movs	r2, #36	; 0x24
 800d952:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	681a      	ldr	r2, [r3, #0]
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	f022 0201 	bic.w	r2, r2, #1
 800d96c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d974:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	2200      	movs	r2, #0
 800d97a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	68fa      	ldr	r2, [r7, #12]
 800d982:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	2220      	movs	r2, #32
 800d988:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	2200      	movs	r2, #0
 800d990:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d994:	2300      	movs	r3, #0
}
 800d996:	4618      	mov	r0, r3
 800d998:	3714      	adds	r7, #20
 800d99a:	46bd      	mov	sp, r7
 800d99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a0:	4770      	bx	lr

0800d9a2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d9a2:	b580      	push	{r7, lr}
 800d9a4:	b084      	sub	sp, #16
 800d9a6:	af00      	add	r7, sp, #0
 800d9a8:	6078      	str	r0, [r7, #4]
 800d9aa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d9b2:	2b01      	cmp	r3, #1
 800d9b4:	d101      	bne.n	800d9ba <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d9b6:	2302      	movs	r3, #2
 800d9b8:	e02d      	b.n	800da16 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	2201      	movs	r2, #1
 800d9be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	2224      	movs	r2, #36	; 0x24
 800d9c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	681a      	ldr	r2, [r3, #0]
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	f022 0201 	bic.w	r2, r2, #1
 800d9e0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	689b      	ldr	r3, [r3, #8]
 800d9e8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	683a      	ldr	r2, [r7, #0]
 800d9f2:	430a      	orrs	r2, r1
 800d9f4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d9f6:	6878      	ldr	r0, [r7, #4]
 800d9f8:	f000 f850 	bl	800da9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	68fa      	ldr	r2, [r7, #12]
 800da02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	2220      	movs	r2, #32
 800da08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	2200      	movs	r2, #0
 800da10:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800da14:	2300      	movs	r3, #0
}
 800da16:	4618      	mov	r0, r3
 800da18:	3710      	adds	r7, #16
 800da1a:	46bd      	mov	sp, r7
 800da1c:	bd80      	pop	{r7, pc}

0800da1e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800da1e:	b580      	push	{r7, lr}
 800da20:	b084      	sub	sp, #16
 800da22:	af00      	add	r7, sp, #0
 800da24:	6078      	str	r0, [r7, #4]
 800da26:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800da2e:	2b01      	cmp	r3, #1
 800da30:	d101      	bne.n	800da36 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800da32:	2302      	movs	r3, #2
 800da34:	e02d      	b.n	800da92 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	2201      	movs	r2, #1
 800da3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	2224      	movs	r2, #36	; 0x24
 800da42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	681a      	ldr	r2, [r3, #0]
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	f022 0201 	bic.w	r2, r2, #1
 800da5c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	689b      	ldr	r3, [r3, #8]
 800da64:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	683a      	ldr	r2, [r7, #0]
 800da6e:	430a      	orrs	r2, r1
 800da70:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800da72:	6878      	ldr	r0, [r7, #4]
 800da74:	f000 f812 	bl	800da9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	68fa      	ldr	r2, [r7, #12]
 800da7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	2220      	movs	r2, #32
 800da84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	2200      	movs	r2, #0
 800da8c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800da90:	2300      	movs	r3, #0
}
 800da92:	4618      	mov	r0, r3
 800da94:	3710      	adds	r7, #16
 800da96:	46bd      	mov	sp, r7
 800da98:	bd80      	pop	{r7, pc}
	...

0800da9c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800da9c:	b480      	push	{r7}
 800da9e:	b085      	sub	sp, #20
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d108      	bne.n	800dabe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	2201      	movs	r2, #1
 800dab0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	2201      	movs	r2, #1
 800dab8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800dabc:	e031      	b.n	800db22 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800dabe:	2310      	movs	r3, #16
 800dac0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800dac2:	2310      	movs	r3, #16
 800dac4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	689b      	ldr	r3, [r3, #8]
 800dacc:	0e5b      	lsrs	r3, r3, #25
 800dace:	b2db      	uxtb	r3, r3
 800dad0:	f003 0307 	and.w	r3, r3, #7
 800dad4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	689b      	ldr	r3, [r3, #8]
 800dadc:	0f5b      	lsrs	r3, r3, #29
 800dade:	b2db      	uxtb	r3, r3
 800dae0:	f003 0307 	and.w	r3, r3, #7
 800dae4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dae6:	7bbb      	ldrb	r3, [r7, #14]
 800dae8:	7b3a      	ldrb	r2, [r7, #12]
 800daea:	4911      	ldr	r1, [pc, #68]	; (800db30 <UARTEx_SetNbDataToProcess+0x94>)
 800daec:	5c8a      	ldrb	r2, [r1, r2]
 800daee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800daf2:	7b3a      	ldrb	r2, [r7, #12]
 800daf4:	490f      	ldr	r1, [pc, #60]	; (800db34 <UARTEx_SetNbDataToProcess+0x98>)
 800daf6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800daf8:	fb93 f3f2 	sdiv	r3, r3, r2
 800dafc:	b29a      	uxth	r2, r3
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800db04:	7bfb      	ldrb	r3, [r7, #15]
 800db06:	7b7a      	ldrb	r2, [r7, #13]
 800db08:	4909      	ldr	r1, [pc, #36]	; (800db30 <UARTEx_SetNbDataToProcess+0x94>)
 800db0a:	5c8a      	ldrb	r2, [r1, r2]
 800db0c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800db10:	7b7a      	ldrb	r2, [r7, #13]
 800db12:	4908      	ldr	r1, [pc, #32]	; (800db34 <UARTEx_SetNbDataToProcess+0x98>)
 800db14:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800db16:	fb93 f3f2 	sdiv	r3, r3, r2
 800db1a:	b29a      	uxth	r2, r3
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800db22:	bf00      	nop
 800db24:	3714      	adds	r7, #20
 800db26:	46bd      	mov	sp, r7
 800db28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db2c:	4770      	bx	lr
 800db2e:	bf00      	nop
 800db30:	0800e4b4 	.word	0x0800e4b4
 800db34:	0800e4bc 	.word	0x0800e4bc

0800db38 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800db38:	b480      	push	{r7}
 800db3a:	b083      	sub	sp, #12
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	6078      	str	r0, [r7, #4]
 800db40:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800db42:	683b      	ldr	r3, [r7, #0]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d121      	bne.n	800db8e <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	681a      	ldr	r2, [r3, #0]
 800db4e:	4b27      	ldr	r3, [pc, #156]	; (800dbec <FMC_SDRAM_Init+0xb4>)
 800db50:	4013      	ands	r3, r2
 800db52:	683a      	ldr	r2, [r7, #0]
 800db54:	6851      	ldr	r1, [r2, #4]
 800db56:	683a      	ldr	r2, [r7, #0]
 800db58:	6892      	ldr	r2, [r2, #8]
 800db5a:	4311      	orrs	r1, r2
 800db5c:	683a      	ldr	r2, [r7, #0]
 800db5e:	68d2      	ldr	r2, [r2, #12]
 800db60:	4311      	orrs	r1, r2
 800db62:	683a      	ldr	r2, [r7, #0]
 800db64:	6912      	ldr	r2, [r2, #16]
 800db66:	4311      	orrs	r1, r2
 800db68:	683a      	ldr	r2, [r7, #0]
 800db6a:	6952      	ldr	r2, [r2, #20]
 800db6c:	4311      	orrs	r1, r2
 800db6e:	683a      	ldr	r2, [r7, #0]
 800db70:	6992      	ldr	r2, [r2, #24]
 800db72:	4311      	orrs	r1, r2
 800db74:	683a      	ldr	r2, [r7, #0]
 800db76:	69d2      	ldr	r2, [r2, #28]
 800db78:	4311      	orrs	r1, r2
 800db7a:	683a      	ldr	r2, [r7, #0]
 800db7c:	6a12      	ldr	r2, [r2, #32]
 800db7e:	4311      	orrs	r1, r2
 800db80:	683a      	ldr	r2, [r7, #0]
 800db82:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800db84:	430a      	orrs	r2, r1
 800db86:	431a      	orrs	r2, r3
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	601a      	str	r2, [r3, #0]
 800db8c:	e026      	b.n	800dbdc <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800db96:	683b      	ldr	r3, [r7, #0]
 800db98:	69d9      	ldr	r1, [r3, #28]
 800db9a:	683b      	ldr	r3, [r7, #0]
 800db9c:	6a1b      	ldr	r3, [r3, #32]
 800db9e:	4319      	orrs	r1, r3
 800dba0:	683b      	ldr	r3, [r7, #0]
 800dba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dba4:	430b      	orrs	r3, r1
 800dba6:	431a      	orrs	r2, r3
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	685a      	ldr	r2, [r3, #4]
 800dbb0:	4b0e      	ldr	r3, [pc, #56]	; (800dbec <FMC_SDRAM_Init+0xb4>)
 800dbb2:	4013      	ands	r3, r2
 800dbb4:	683a      	ldr	r2, [r7, #0]
 800dbb6:	6851      	ldr	r1, [r2, #4]
 800dbb8:	683a      	ldr	r2, [r7, #0]
 800dbba:	6892      	ldr	r2, [r2, #8]
 800dbbc:	4311      	orrs	r1, r2
 800dbbe:	683a      	ldr	r2, [r7, #0]
 800dbc0:	68d2      	ldr	r2, [r2, #12]
 800dbc2:	4311      	orrs	r1, r2
 800dbc4:	683a      	ldr	r2, [r7, #0]
 800dbc6:	6912      	ldr	r2, [r2, #16]
 800dbc8:	4311      	orrs	r1, r2
 800dbca:	683a      	ldr	r2, [r7, #0]
 800dbcc:	6952      	ldr	r2, [r2, #20]
 800dbce:	4311      	orrs	r1, r2
 800dbd0:	683a      	ldr	r2, [r7, #0]
 800dbd2:	6992      	ldr	r2, [r2, #24]
 800dbd4:	430a      	orrs	r2, r1
 800dbd6:	431a      	orrs	r2, r3
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800dbdc:	2300      	movs	r3, #0
}
 800dbde:	4618      	mov	r0, r3
 800dbe0:	370c      	adds	r7, #12
 800dbe2:	46bd      	mov	sp, r7
 800dbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe8:	4770      	bx	lr
 800dbea:	bf00      	nop
 800dbec:	ffff8000 	.word	0xffff8000

0800dbf0 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800dbf0:	b480      	push	{r7}
 800dbf2:	b085      	sub	sp, #20
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	60f8      	str	r0, [r7, #12]
 800dbf8:	60b9      	str	r1, [r7, #8]
 800dbfa:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d128      	bne.n	800dc54 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	689b      	ldr	r3, [r3, #8]
 800dc06:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800dc0a:	68bb      	ldr	r3, [r7, #8]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	1e59      	subs	r1, r3, #1
 800dc10:	68bb      	ldr	r3, [r7, #8]
 800dc12:	685b      	ldr	r3, [r3, #4]
 800dc14:	3b01      	subs	r3, #1
 800dc16:	011b      	lsls	r3, r3, #4
 800dc18:	4319      	orrs	r1, r3
 800dc1a:	68bb      	ldr	r3, [r7, #8]
 800dc1c:	689b      	ldr	r3, [r3, #8]
 800dc1e:	3b01      	subs	r3, #1
 800dc20:	021b      	lsls	r3, r3, #8
 800dc22:	4319      	orrs	r1, r3
 800dc24:	68bb      	ldr	r3, [r7, #8]
 800dc26:	68db      	ldr	r3, [r3, #12]
 800dc28:	3b01      	subs	r3, #1
 800dc2a:	031b      	lsls	r3, r3, #12
 800dc2c:	4319      	orrs	r1, r3
 800dc2e:	68bb      	ldr	r3, [r7, #8]
 800dc30:	691b      	ldr	r3, [r3, #16]
 800dc32:	3b01      	subs	r3, #1
 800dc34:	041b      	lsls	r3, r3, #16
 800dc36:	4319      	orrs	r1, r3
 800dc38:	68bb      	ldr	r3, [r7, #8]
 800dc3a:	695b      	ldr	r3, [r3, #20]
 800dc3c:	3b01      	subs	r3, #1
 800dc3e:	051b      	lsls	r3, r3, #20
 800dc40:	4319      	orrs	r1, r3
 800dc42:	68bb      	ldr	r3, [r7, #8]
 800dc44:	699b      	ldr	r3, [r3, #24]
 800dc46:	3b01      	subs	r3, #1
 800dc48:	061b      	lsls	r3, r3, #24
 800dc4a:	430b      	orrs	r3, r1
 800dc4c:	431a      	orrs	r2, r3
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	609a      	str	r2, [r3, #8]
 800dc52:	e02d      	b.n	800dcb0 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	689a      	ldr	r2, [r3, #8]
 800dc58:	4b19      	ldr	r3, [pc, #100]	; (800dcc0 <FMC_SDRAM_Timing_Init+0xd0>)
 800dc5a:	4013      	ands	r3, r2
 800dc5c:	68ba      	ldr	r2, [r7, #8]
 800dc5e:	68d2      	ldr	r2, [r2, #12]
 800dc60:	3a01      	subs	r2, #1
 800dc62:	0311      	lsls	r1, r2, #12
 800dc64:	68ba      	ldr	r2, [r7, #8]
 800dc66:	6952      	ldr	r2, [r2, #20]
 800dc68:	3a01      	subs	r2, #1
 800dc6a:	0512      	lsls	r2, r2, #20
 800dc6c:	430a      	orrs	r2, r1
 800dc6e:	431a      	orrs	r2, r3
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	68db      	ldr	r3, [r3, #12]
 800dc78:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800dc7c:	68bb      	ldr	r3, [r7, #8]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	1e59      	subs	r1, r3, #1
 800dc82:	68bb      	ldr	r3, [r7, #8]
 800dc84:	685b      	ldr	r3, [r3, #4]
 800dc86:	3b01      	subs	r3, #1
 800dc88:	011b      	lsls	r3, r3, #4
 800dc8a:	4319      	orrs	r1, r3
 800dc8c:	68bb      	ldr	r3, [r7, #8]
 800dc8e:	689b      	ldr	r3, [r3, #8]
 800dc90:	3b01      	subs	r3, #1
 800dc92:	021b      	lsls	r3, r3, #8
 800dc94:	4319      	orrs	r1, r3
 800dc96:	68bb      	ldr	r3, [r7, #8]
 800dc98:	691b      	ldr	r3, [r3, #16]
 800dc9a:	3b01      	subs	r3, #1
 800dc9c:	041b      	lsls	r3, r3, #16
 800dc9e:	4319      	orrs	r1, r3
 800dca0:	68bb      	ldr	r3, [r7, #8]
 800dca2:	699b      	ldr	r3, [r3, #24]
 800dca4:	3b01      	subs	r3, #1
 800dca6:	061b      	lsls	r3, r3, #24
 800dca8:	430b      	orrs	r3, r1
 800dcaa:	431a      	orrs	r2, r3
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800dcb0:	2300      	movs	r3, #0
}
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	3714      	adds	r7, #20
 800dcb6:	46bd      	mov	sp, r7
 800dcb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcbc:	4770      	bx	lr
 800dcbe:	bf00      	nop
 800dcc0:	ff0f0fff 	.word	0xff0f0fff

0800dcc4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800dcc4:	b084      	sub	sp, #16
 800dcc6:	b580      	push	{r7, lr}
 800dcc8:	b084      	sub	sp, #16
 800dcca:	af00      	add	r7, sp, #0
 800dccc:	6078      	str	r0, [r7, #4]
 800dcce:	f107 001c 	add.w	r0, r7, #28
 800dcd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800dcd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcd8:	2b01      	cmp	r3, #1
 800dcda:	d120      	bne.n	800dd1e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dce0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	68da      	ldr	r2, [r3, #12]
 800dcec:	4b2a      	ldr	r3, [pc, #168]	; (800dd98 <USB_CoreInit+0xd4>)
 800dcee:	4013      	ands	r3, r2
 800dcf0:	687a      	ldr	r2, [r7, #4]
 800dcf2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	68db      	ldr	r3, [r3, #12]
 800dcf8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800dd00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd02:	2b01      	cmp	r3, #1
 800dd04:	d105      	bne.n	800dd12 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	68db      	ldr	r3, [r3, #12]
 800dd0a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800dd12:	6878      	ldr	r0, [r7, #4]
 800dd14:	f000 faac 	bl	800e270 <USB_CoreReset>
 800dd18:	4603      	mov	r3, r0
 800dd1a:	73fb      	strb	r3, [r7, #15]
 800dd1c:	e01a      	b.n	800dd54 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	68db      	ldr	r3, [r3, #12]
 800dd22:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800dd2a:	6878      	ldr	r0, [r7, #4]
 800dd2c:	f000 faa0 	bl	800e270 <USB_CoreReset>
 800dd30:	4603      	mov	r3, r0
 800dd32:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800dd34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d106      	bne.n	800dd48 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd3e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	639a      	str	r2, [r3, #56]	; 0x38
 800dd46:	e005      	b.n	800dd54 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800dd54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd56:	2b01      	cmp	r3, #1
 800dd58:	d116      	bne.n	800dd88 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dd5e:	b29a      	uxth	r2, r3
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800dd68:	4b0c      	ldr	r3, [pc, #48]	; (800dd9c <USB_CoreInit+0xd8>)
 800dd6a:	4313      	orrs	r3, r2
 800dd6c:	687a      	ldr	r2, [r7, #4]
 800dd6e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	689b      	ldr	r3, [r3, #8]
 800dd74:	f043 0206 	orr.w	r2, r3, #6
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	689b      	ldr	r3, [r3, #8]
 800dd80:	f043 0220 	orr.w	r2, r3, #32
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800dd88:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	3710      	adds	r7, #16
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dd94:	b004      	add	sp, #16
 800dd96:	4770      	bx	lr
 800dd98:	ffbdffbf 	.word	0xffbdffbf
 800dd9c:	03ee0000 	.word	0x03ee0000

0800dda0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800dda0:	b480      	push	{r7}
 800dda2:	b083      	sub	sp, #12
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	689b      	ldr	r3, [r3, #8]
 800ddac:	f023 0201 	bic.w	r2, r3, #1
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ddb4:	2300      	movs	r3, #0
}
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	370c      	adds	r7, #12
 800ddba:	46bd      	mov	sp, r7
 800ddbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc0:	4770      	bx	lr

0800ddc2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ddc2:	b580      	push	{r7, lr}
 800ddc4:	b084      	sub	sp, #16
 800ddc6:	af00      	add	r7, sp, #0
 800ddc8:	6078      	str	r0, [r7, #4]
 800ddca:	460b      	mov	r3, r1
 800ddcc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ddce:	2300      	movs	r3, #0
 800ddd0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	68db      	ldr	r3, [r3, #12]
 800ddd6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ddde:	78fb      	ldrb	r3, [r7, #3]
 800dde0:	2b01      	cmp	r3, #1
 800dde2:	d115      	bne.n	800de10 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	68db      	ldr	r3, [r3, #12]
 800dde8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ddf0:	2001      	movs	r0, #1
 800ddf2:	f7f4 ffb1 	bl	8002d58 <HAL_Delay>
      ms++;
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	3301      	adds	r3, #1
 800ddfa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800ddfc:	6878      	ldr	r0, [r7, #4]
 800ddfe:	f000 fa29 	bl	800e254 <USB_GetMode>
 800de02:	4603      	mov	r3, r0
 800de04:	2b01      	cmp	r3, #1
 800de06:	d01e      	beq.n	800de46 <USB_SetCurrentMode+0x84>
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	2b31      	cmp	r3, #49	; 0x31
 800de0c:	d9f0      	bls.n	800ddf0 <USB_SetCurrentMode+0x2e>
 800de0e:	e01a      	b.n	800de46 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800de10:	78fb      	ldrb	r3, [r7, #3]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d115      	bne.n	800de42 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	68db      	ldr	r3, [r3, #12]
 800de1a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800de22:	2001      	movs	r0, #1
 800de24:	f7f4 ff98 	bl	8002d58 <HAL_Delay>
      ms++;
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	3301      	adds	r3, #1
 800de2c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800de2e:	6878      	ldr	r0, [r7, #4]
 800de30:	f000 fa10 	bl	800e254 <USB_GetMode>
 800de34:	4603      	mov	r3, r0
 800de36:	2b00      	cmp	r3, #0
 800de38:	d005      	beq.n	800de46 <USB_SetCurrentMode+0x84>
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	2b31      	cmp	r3, #49	; 0x31
 800de3e:	d9f0      	bls.n	800de22 <USB_SetCurrentMode+0x60>
 800de40:	e001      	b.n	800de46 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800de42:	2301      	movs	r3, #1
 800de44:	e005      	b.n	800de52 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	2b32      	cmp	r3, #50	; 0x32
 800de4a:	d101      	bne.n	800de50 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800de4c:	2301      	movs	r3, #1
 800de4e:	e000      	b.n	800de52 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800de50:	2300      	movs	r3, #0
}
 800de52:	4618      	mov	r0, r3
 800de54:	3710      	adds	r7, #16
 800de56:	46bd      	mov	sp, r7
 800de58:	bd80      	pop	{r7, pc}
	...

0800de5c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800de5c:	b084      	sub	sp, #16
 800de5e:	b580      	push	{r7, lr}
 800de60:	b086      	sub	sp, #24
 800de62:	af00      	add	r7, sp, #0
 800de64:	6078      	str	r0, [r7, #4]
 800de66:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800de6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800de6e:	2300      	movs	r3, #0
 800de70:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800de76:	2300      	movs	r3, #0
 800de78:	613b      	str	r3, [r7, #16]
 800de7a:	e009      	b.n	800de90 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800de7c:	687a      	ldr	r2, [r7, #4]
 800de7e:	693b      	ldr	r3, [r7, #16]
 800de80:	3340      	adds	r3, #64	; 0x40
 800de82:	009b      	lsls	r3, r3, #2
 800de84:	4413      	add	r3, r2
 800de86:	2200      	movs	r2, #0
 800de88:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800de8a:	693b      	ldr	r3, [r7, #16]
 800de8c:	3301      	adds	r3, #1
 800de8e:	613b      	str	r3, [r7, #16]
 800de90:	693b      	ldr	r3, [r7, #16]
 800de92:	2b0e      	cmp	r3, #14
 800de94:	d9f2      	bls.n	800de7c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800de96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d11c      	bne.n	800ded6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dea2:	685b      	ldr	r3, [r3, #4]
 800dea4:	68fa      	ldr	r2, [r7, #12]
 800dea6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800deaa:	f043 0302 	orr.w	r3, r3, #2
 800deae:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800deb4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	601a      	str	r2, [r3, #0]
 800ded4:	e005      	b.n	800dee2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800deda:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800dee8:	461a      	mov	r2, r3
 800deea:	2300      	movs	r3, #0
 800deec:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800def4:	4619      	mov	r1, r3
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800defc:	461a      	mov	r2, r3
 800defe:	680b      	ldr	r3, [r1, #0]
 800df00:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800df02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df04:	2b01      	cmp	r3, #1
 800df06:	d10c      	bne.n	800df22 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800df08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d104      	bne.n	800df18 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800df0e:	2100      	movs	r1, #0
 800df10:	6878      	ldr	r0, [r7, #4]
 800df12:	f000 f965 	bl	800e1e0 <USB_SetDevSpeed>
 800df16:	e008      	b.n	800df2a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800df18:	2101      	movs	r1, #1
 800df1a:	6878      	ldr	r0, [r7, #4]
 800df1c:	f000 f960 	bl	800e1e0 <USB_SetDevSpeed>
 800df20:	e003      	b.n	800df2a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800df22:	2103      	movs	r1, #3
 800df24:	6878      	ldr	r0, [r7, #4]
 800df26:	f000 f95b 	bl	800e1e0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800df2a:	2110      	movs	r1, #16
 800df2c:	6878      	ldr	r0, [r7, #4]
 800df2e:	f000 f8f3 	bl	800e118 <USB_FlushTxFifo>
 800df32:	4603      	mov	r3, r0
 800df34:	2b00      	cmp	r3, #0
 800df36:	d001      	beq.n	800df3c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800df38:	2301      	movs	r3, #1
 800df3a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800df3c:	6878      	ldr	r0, [r7, #4]
 800df3e:	f000 f91f 	bl	800e180 <USB_FlushRxFifo>
 800df42:	4603      	mov	r3, r0
 800df44:	2b00      	cmp	r3, #0
 800df46:	d001      	beq.n	800df4c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800df48:	2301      	movs	r3, #1
 800df4a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df52:	461a      	mov	r2, r3
 800df54:	2300      	movs	r3, #0
 800df56:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df5e:	461a      	mov	r2, r3
 800df60:	2300      	movs	r3, #0
 800df62:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df6a:	461a      	mov	r2, r3
 800df6c:	2300      	movs	r3, #0
 800df6e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800df70:	2300      	movs	r3, #0
 800df72:	613b      	str	r3, [r7, #16]
 800df74:	e043      	b.n	800dffe <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800df76:	693b      	ldr	r3, [r7, #16]
 800df78:	015a      	lsls	r2, r3, #5
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	4413      	add	r3, r2
 800df7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800df88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800df8c:	d118      	bne.n	800dfc0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800df8e:	693b      	ldr	r3, [r7, #16]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d10a      	bne.n	800dfaa <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800df94:	693b      	ldr	r3, [r7, #16]
 800df96:	015a      	lsls	r2, r3, #5
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	4413      	add	r3, r2
 800df9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dfa0:	461a      	mov	r2, r3
 800dfa2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800dfa6:	6013      	str	r3, [r2, #0]
 800dfa8:	e013      	b.n	800dfd2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800dfaa:	693b      	ldr	r3, [r7, #16]
 800dfac:	015a      	lsls	r2, r3, #5
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	4413      	add	r3, r2
 800dfb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dfb6:	461a      	mov	r2, r3
 800dfb8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800dfbc:	6013      	str	r3, [r2, #0]
 800dfbe:	e008      	b.n	800dfd2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800dfc0:	693b      	ldr	r3, [r7, #16]
 800dfc2:	015a      	lsls	r2, r3, #5
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	4413      	add	r3, r2
 800dfc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dfcc:	461a      	mov	r2, r3
 800dfce:	2300      	movs	r3, #0
 800dfd0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800dfd2:	693b      	ldr	r3, [r7, #16]
 800dfd4:	015a      	lsls	r2, r3, #5
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	4413      	add	r3, r2
 800dfda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dfde:	461a      	mov	r2, r3
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800dfe4:	693b      	ldr	r3, [r7, #16]
 800dfe6:	015a      	lsls	r2, r3, #5
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	4413      	add	r3, r2
 800dfec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dff0:	461a      	mov	r2, r3
 800dff2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800dff6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dff8:	693b      	ldr	r3, [r7, #16]
 800dffa:	3301      	adds	r3, #1
 800dffc:	613b      	str	r3, [r7, #16]
 800dffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e000:	693a      	ldr	r2, [r7, #16]
 800e002:	429a      	cmp	r2, r3
 800e004:	d3b7      	bcc.n	800df76 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e006:	2300      	movs	r3, #0
 800e008:	613b      	str	r3, [r7, #16]
 800e00a:	e043      	b.n	800e094 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e00c:	693b      	ldr	r3, [r7, #16]
 800e00e:	015a      	lsls	r2, r3, #5
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	4413      	add	r3, r2
 800e014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e01e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e022:	d118      	bne.n	800e056 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800e024:	693b      	ldr	r3, [r7, #16]
 800e026:	2b00      	cmp	r3, #0
 800e028:	d10a      	bne.n	800e040 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800e02a:	693b      	ldr	r3, [r7, #16]
 800e02c:	015a      	lsls	r2, r3, #5
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	4413      	add	r3, r2
 800e032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e036:	461a      	mov	r2, r3
 800e038:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e03c:	6013      	str	r3, [r2, #0]
 800e03e:	e013      	b.n	800e068 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e040:	693b      	ldr	r3, [r7, #16]
 800e042:	015a      	lsls	r2, r3, #5
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	4413      	add	r3, r2
 800e048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e04c:	461a      	mov	r2, r3
 800e04e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e052:	6013      	str	r3, [r2, #0]
 800e054:	e008      	b.n	800e068 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e056:	693b      	ldr	r3, [r7, #16]
 800e058:	015a      	lsls	r2, r3, #5
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	4413      	add	r3, r2
 800e05e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e062:	461a      	mov	r2, r3
 800e064:	2300      	movs	r3, #0
 800e066:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800e068:	693b      	ldr	r3, [r7, #16]
 800e06a:	015a      	lsls	r2, r3, #5
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	4413      	add	r3, r2
 800e070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e074:	461a      	mov	r2, r3
 800e076:	2300      	movs	r3, #0
 800e078:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e07a:	693b      	ldr	r3, [r7, #16]
 800e07c:	015a      	lsls	r2, r3, #5
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	4413      	add	r3, r2
 800e082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e086:	461a      	mov	r2, r3
 800e088:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e08c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e08e:	693b      	ldr	r3, [r7, #16]
 800e090:	3301      	adds	r3, #1
 800e092:	613b      	str	r3, [r7, #16]
 800e094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e096:	693a      	ldr	r2, [r7, #16]
 800e098:	429a      	cmp	r2, r3
 800e09a:	d3b7      	bcc.n	800e00c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e0a2:	691b      	ldr	r3, [r3, #16]
 800e0a4:	68fa      	ldr	r2, [r7, #12]
 800e0a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e0aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e0ae:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800e0bc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e0be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d105      	bne.n	800e0d0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	699b      	ldr	r3, [r3, #24]
 800e0c8:	f043 0210 	orr.w	r2, r3, #16
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	699a      	ldr	r2, [r3, #24]
 800e0d4:	4b0e      	ldr	r3, [pc, #56]	; (800e110 <USB_DevInit+0x2b4>)
 800e0d6:	4313      	orrs	r3, r2
 800e0d8:	687a      	ldr	r2, [r7, #4]
 800e0da:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800e0dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d005      	beq.n	800e0ee <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	699b      	ldr	r3, [r3, #24]
 800e0e6:	f043 0208 	orr.w	r2, r3, #8
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800e0ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e0f0:	2b01      	cmp	r3, #1
 800e0f2:	d105      	bne.n	800e100 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	699a      	ldr	r2, [r3, #24]
 800e0f8:	4b06      	ldr	r3, [pc, #24]	; (800e114 <USB_DevInit+0x2b8>)
 800e0fa:	4313      	orrs	r3, r2
 800e0fc:	687a      	ldr	r2, [r7, #4]
 800e0fe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800e100:	7dfb      	ldrb	r3, [r7, #23]
}
 800e102:	4618      	mov	r0, r3
 800e104:	3718      	adds	r7, #24
 800e106:	46bd      	mov	sp, r7
 800e108:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e10c:	b004      	add	sp, #16
 800e10e:	4770      	bx	lr
 800e110:	803c3800 	.word	0x803c3800
 800e114:	40000004 	.word	0x40000004

0800e118 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e118:	b480      	push	{r7}
 800e11a:	b085      	sub	sp, #20
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	6078      	str	r0, [r7, #4]
 800e120:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e122:	2300      	movs	r3, #0
 800e124:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	3301      	adds	r3, #1
 800e12a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	4a13      	ldr	r2, [pc, #76]	; (800e17c <USB_FlushTxFifo+0x64>)
 800e130:	4293      	cmp	r3, r2
 800e132:	d901      	bls.n	800e138 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800e134:	2303      	movs	r3, #3
 800e136:	e01b      	b.n	800e170 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	691b      	ldr	r3, [r3, #16]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	daf2      	bge.n	800e126 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800e140:	2300      	movs	r3, #0
 800e142:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e144:	683b      	ldr	r3, [r7, #0]
 800e146:	019b      	lsls	r3, r3, #6
 800e148:	f043 0220 	orr.w	r2, r3, #32
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	3301      	adds	r3, #1
 800e154:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	4a08      	ldr	r2, [pc, #32]	; (800e17c <USB_FlushTxFifo+0x64>)
 800e15a:	4293      	cmp	r3, r2
 800e15c:	d901      	bls.n	800e162 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800e15e:	2303      	movs	r3, #3
 800e160:	e006      	b.n	800e170 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	691b      	ldr	r3, [r3, #16]
 800e166:	f003 0320 	and.w	r3, r3, #32
 800e16a:	2b20      	cmp	r3, #32
 800e16c:	d0f0      	beq.n	800e150 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800e16e:	2300      	movs	r3, #0
}
 800e170:	4618      	mov	r0, r3
 800e172:	3714      	adds	r7, #20
 800e174:	46bd      	mov	sp, r7
 800e176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e17a:	4770      	bx	lr
 800e17c:	00030d40 	.word	0x00030d40

0800e180 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e180:	b480      	push	{r7}
 800e182:	b085      	sub	sp, #20
 800e184:	af00      	add	r7, sp, #0
 800e186:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e188:	2300      	movs	r3, #0
 800e18a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	3301      	adds	r3, #1
 800e190:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	4a11      	ldr	r2, [pc, #68]	; (800e1dc <USB_FlushRxFifo+0x5c>)
 800e196:	4293      	cmp	r3, r2
 800e198:	d901      	bls.n	800e19e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800e19a:	2303      	movs	r3, #3
 800e19c:	e018      	b.n	800e1d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	691b      	ldr	r3, [r3, #16]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	daf2      	bge.n	800e18c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	2210      	movs	r2, #16
 800e1ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	3301      	adds	r3, #1
 800e1b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	4a08      	ldr	r2, [pc, #32]	; (800e1dc <USB_FlushRxFifo+0x5c>)
 800e1ba:	4293      	cmp	r3, r2
 800e1bc:	d901      	bls.n	800e1c2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800e1be:	2303      	movs	r3, #3
 800e1c0:	e006      	b.n	800e1d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	691b      	ldr	r3, [r3, #16]
 800e1c6:	f003 0310 	and.w	r3, r3, #16
 800e1ca:	2b10      	cmp	r3, #16
 800e1cc:	d0f0      	beq.n	800e1b0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800e1ce:	2300      	movs	r3, #0
}
 800e1d0:	4618      	mov	r0, r3
 800e1d2:	3714      	adds	r7, #20
 800e1d4:	46bd      	mov	sp, r7
 800e1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1da:	4770      	bx	lr
 800e1dc:	00030d40 	.word	0x00030d40

0800e1e0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800e1e0:	b480      	push	{r7}
 800e1e2:	b085      	sub	sp, #20
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	6078      	str	r0, [r7, #4]
 800e1e8:	460b      	mov	r3, r1
 800e1ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e1f6:	681a      	ldr	r2, [r3, #0]
 800e1f8:	78fb      	ldrb	r3, [r7, #3]
 800e1fa:	68f9      	ldr	r1, [r7, #12]
 800e1fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e200:	4313      	orrs	r3, r2
 800e202:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800e204:	2300      	movs	r3, #0
}
 800e206:	4618      	mov	r0, r3
 800e208:	3714      	adds	r7, #20
 800e20a:	46bd      	mov	sp, r7
 800e20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e210:	4770      	bx	lr

0800e212 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e212:	b480      	push	{r7}
 800e214:	b085      	sub	sp, #20
 800e216:	af00      	add	r7, sp, #0
 800e218:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	68fa      	ldr	r2, [r7, #12]
 800e228:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e22c:	f023 0303 	bic.w	r3, r3, #3
 800e230:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e238:	685b      	ldr	r3, [r3, #4]
 800e23a:	68fa      	ldr	r2, [r7, #12]
 800e23c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e240:	f043 0302 	orr.w	r3, r3, #2
 800e244:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e246:	2300      	movs	r3, #0
}
 800e248:	4618      	mov	r0, r3
 800e24a:	3714      	adds	r7, #20
 800e24c:	46bd      	mov	sp, r7
 800e24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e252:	4770      	bx	lr

0800e254 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800e254:	b480      	push	{r7}
 800e256:	b083      	sub	sp, #12
 800e258:	af00      	add	r7, sp, #0
 800e25a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	695b      	ldr	r3, [r3, #20]
 800e260:	f003 0301 	and.w	r3, r3, #1
}
 800e264:	4618      	mov	r0, r3
 800e266:	370c      	adds	r7, #12
 800e268:	46bd      	mov	sp, r7
 800e26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e26e:	4770      	bx	lr

0800e270 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e270:	b480      	push	{r7}
 800e272:	b085      	sub	sp, #20
 800e274:	af00      	add	r7, sp, #0
 800e276:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e278:	2300      	movs	r3, #0
 800e27a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	3301      	adds	r3, #1
 800e280:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	4a13      	ldr	r2, [pc, #76]	; (800e2d4 <USB_CoreReset+0x64>)
 800e286:	4293      	cmp	r3, r2
 800e288:	d901      	bls.n	800e28e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800e28a:	2303      	movs	r3, #3
 800e28c:	e01b      	b.n	800e2c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	691b      	ldr	r3, [r3, #16]
 800e292:	2b00      	cmp	r3, #0
 800e294:	daf2      	bge.n	800e27c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e296:	2300      	movs	r3, #0
 800e298:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	691b      	ldr	r3, [r3, #16]
 800e29e:	f043 0201 	orr.w	r2, r3, #1
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	3301      	adds	r3, #1
 800e2aa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	4a09      	ldr	r2, [pc, #36]	; (800e2d4 <USB_CoreReset+0x64>)
 800e2b0:	4293      	cmp	r3, r2
 800e2b2:	d901      	bls.n	800e2b8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800e2b4:	2303      	movs	r3, #3
 800e2b6:	e006      	b.n	800e2c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	691b      	ldr	r3, [r3, #16]
 800e2bc:	f003 0301 	and.w	r3, r3, #1
 800e2c0:	2b01      	cmp	r3, #1
 800e2c2:	d0f0      	beq.n	800e2a6 <USB_CoreReset+0x36>

  return HAL_OK;
 800e2c4:	2300      	movs	r3, #0
}
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	3714      	adds	r7, #20
 800e2ca:	46bd      	mov	sp, r7
 800e2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d0:	4770      	bx	lr
 800e2d2:	bf00      	nop
 800e2d4:	00030d40 	.word	0x00030d40

0800e2d8 <__libc_init_array>:
 800e2d8:	b570      	push	{r4, r5, r6, lr}
 800e2da:	4d0d      	ldr	r5, [pc, #52]	; (800e310 <__libc_init_array+0x38>)
 800e2dc:	4c0d      	ldr	r4, [pc, #52]	; (800e314 <__libc_init_array+0x3c>)
 800e2de:	1b64      	subs	r4, r4, r5
 800e2e0:	10a4      	asrs	r4, r4, #2
 800e2e2:	2600      	movs	r6, #0
 800e2e4:	42a6      	cmp	r6, r4
 800e2e6:	d109      	bne.n	800e2fc <__libc_init_array+0x24>
 800e2e8:	4d0b      	ldr	r5, [pc, #44]	; (800e318 <__libc_init_array+0x40>)
 800e2ea:	4c0c      	ldr	r4, [pc, #48]	; (800e31c <__libc_init_array+0x44>)
 800e2ec:	f000 f82e 	bl	800e34c <_init>
 800e2f0:	1b64      	subs	r4, r4, r5
 800e2f2:	10a4      	asrs	r4, r4, #2
 800e2f4:	2600      	movs	r6, #0
 800e2f6:	42a6      	cmp	r6, r4
 800e2f8:	d105      	bne.n	800e306 <__libc_init_array+0x2e>
 800e2fa:	bd70      	pop	{r4, r5, r6, pc}
 800e2fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800e300:	4798      	blx	r3
 800e302:	3601      	adds	r6, #1
 800e304:	e7ee      	b.n	800e2e4 <__libc_init_array+0xc>
 800e306:	f855 3b04 	ldr.w	r3, [r5], #4
 800e30a:	4798      	blx	r3
 800e30c:	3601      	adds	r6, #1
 800e30e:	e7f2      	b.n	800e2f6 <__libc_init_array+0x1e>
 800e310:	0800e4cc 	.word	0x0800e4cc
 800e314:	0800e4cc 	.word	0x0800e4cc
 800e318:	0800e4cc 	.word	0x0800e4cc
 800e31c:	0800e4d0 	.word	0x0800e4d0

0800e320 <memcpy>:
 800e320:	440a      	add	r2, r1
 800e322:	4291      	cmp	r1, r2
 800e324:	f100 33ff 	add.w	r3, r0, #4294967295
 800e328:	d100      	bne.n	800e32c <memcpy+0xc>
 800e32a:	4770      	bx	lr
 800e32c:	b510      	push	{r4, lr}
 800e32e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e332:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e336:	4291      	cmp	r1, r2
 800e338:	d1f9      	bne.n	800e32e <memcpy+0xe>
 800e33a:	bd10      	pop	{r4, pc}

0800e33c <memset>:
 800e33c:	4402      	add	r2, r0
 800e33e:	4603      	mov	r3, r0
 800e340:	4293      	cmp	r3, r2
 800e342:	d100      	bne.n	800e346 <memset+0xa>
 800e344:	4770      	bx	lr
 800e346:	f803 1b01 	strb.w	r1, [r3], #1
 800e34a:	e7f9      	b.n	800e340 <memset+0x4>

0800e34c <_init>:
 800e34c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e34e:	bf00      	nop
 800e350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e352:	bc08      	pop	{r3}
 800e354:	469e      	mov	lr, r3
 800e356:	4770      	bx	lr

0800e358 <_fini>:
 800e358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e35a:	bf00      	nop
 800e35c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e35e:	bc08      	pop	{r3}
 800e360:	469e      	mov	lr, r3
 800e362:	4770      	bx	lr
