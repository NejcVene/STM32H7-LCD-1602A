
LCD_Display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f128  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  0800f3c8  0800f3c8  0001f3c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f58c  0800f58c  0001f58c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f594  0800f594  0001f594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f598  0800f598  0001f598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000a0  24000000  0800f59c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  240000a0  0800f63c  000200a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000100  0800f69c  00020100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c80  24000160  0800f6fc  00020160  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000de0  0800f6fc  00020de0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003280c  00000000  00000000  0002018e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000046f3  00000000  00000000  0005299a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002530  00000000  00000000  00057090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002390  00000000  00000000  000595c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000421ba  00000000  00000000  0005b950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003051f  00000000  00000000  0009db0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001a5f9c  00000000  00000000  000ce029  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00273fc5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a918  00000000  00000000  00274018  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000160 	.word	0x24000160
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800f3b0 	.word	0x0800f3b0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000164 	.word	0x24000164
 80002dc:	0800f3b0 	.word	0x0800f3b0

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <__LCD_Delay>:
/*
 * @brief Function to delay in microseconds
 * @param delay: value in microseconds to delay
 * @retval None
 */
void __LCD_Delay(uint16_t delay) {
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	80fb      	strh	r3, [r7, #6]

	__HAL_TIM_SET_COUNTER(&timer, 0);
 800069e:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <__LCD_Delay+0x30>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	2200      	movs	r2, #0
 80006a4:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < delay);
 80006a6:	bf00      	nop
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <__LCD_Delay+0x30>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80006ae:	88fb      	ldrh	r3, [r7, #6]
 80006b0:	429a      	cmp	r2, r3
 80006b2:	d3f9      	bcc.n	80006a8 <__LCD_Delay+0x14>

}
 80006b4:	bf00      	nop
 80006b6:	bf00      	nop
 80006b8:	370c      	adds	r7, #12
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	24000754 	.word	0x24000754

080006c8 <__LCD_Write4Bits>:
/*
 * @brief Function to write individual bits to the pins
 * @param value: value to write
 * @retval None
 */
void __LCD_Write4Bits(uint8_t value) {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(DATA4_PORT, DATA4_PIN, (value >> 3) & 0x01);
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	08db      	lsrs	r3, r3, #3
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	f003 0301 	and.w	r3, r3, #1
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	461a      	mov	r2, r3
 80006e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006e4:	481a      	ldr	r0, [pc, #104]	; (8000750 <__LCD_Write4Bits+0x88>)
 80006e6:	f005 fd8d 	bl	8006204 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DATA3_PORT, DATA3_PIN, (value >> 2) & 0x01);
 80006ea:	79fb      	ldrb	r3, [r7, #7]
 80006ec:	089b      	lsrs	r3, r3, #2
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	f003 0301 	and.w	r3, r3, #1
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	461a      	mov	r2, r3
 80006f8:	2102      	movs	r1, #2
 80006fa:	4816      	ldr	r0, [pc, #88]	; (8000754 <__LCD_Write4Bits+0x8c>)
 80006fc:	f005 fd82 	bl	8006204 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DATA2_PORT, DATA2_PIN, (value >> 1) & 0x01);
 8000700:	79fb      	ldrb	r3, [r7, #7]
 8000702:	085b      	lsrs	r3, r3, #1
 8000704:	b2db      	uxtb	r3, r3
 8000706:	f003 0301 	and.w	r3, r3, #1
 800070a:	b2db      	uxtb	r3, r3
 800070c:	461a      	mov	r2, r3
 800070e:	2140      	movs	r1, #64	; 0x40
 8000710:	480f      	ldr	r0, [pc, #60]	; (8000750 <__LCD_Write4Bits+0x88>)
 8000712:	f005 fd77 	bl	8006204 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DATA1_PORT, DATA1_PIN, value & 0x01);
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	f003 0301 	and.w	r3, r3, #1
 800071c:	b2db      	uxtb	r3, r3
 800071e:	461a      	mov	r2, r3
 8000720:	2108      	movs	r1, #8
 8000722:	480d      	ldr	r0, [pc, #52]	; (8000758 <__LCD_Write4Bits+0x90>)
 8000724:	f005 fd6e 	bl	8006204 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(E_PORT, E_PIN, 1);
 8000728:	2201      	movs	r2, #1
 800072a:	2140      	movs	r1, #64	; 0x40
 800072c:	480b      	ldr	r0, [pc, #44]	; (800075c <__LCD_Write4Bits+0x94>)
 800072e:	f005 fd69 	bl	8006204 <HAL_GPIO_WritePin>
	__LCD_Delay(120);
 8000732:	2078      	movs	r0, #120	; 0x78
 8000734:	f7ff ffae 	bl	8000694 <__LCD_Delay>
	HAL_GPIO_WritePin(E_PORT, E_PIN, 0);
 8000738:	2200      	movs	r2, #0
 800073a:	2140      	movs	r1, #64	; 0x40
 800073c:	4807      	ldr	r0, [pc, #28]	; (800075c <__LCD_Write4Bits+0x94>)
 800073e:	f005 fd61 	bl	8006204 <HAL_GPIO_WritePin>
	__LCD_Delay(120);
 8000742:	2078      	movs	r0, #120	; 0x78
 8000744:	f7ff ffa6 	bl	8000694 <__LCD_Delay>

}
 8000748:	bf00      	nop
 800074a:	3708      	adds	r7, #8
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	58020000 	.word	0x58020000
 8000754:	58022800 	.word	0x58022800
 8000758:	58021800 	.word	0x58021800
 800075c:	58020400 	.word	0x58020400

08000760 <__LCD_Send>:
 * @brief Function to send data to the LCD and enable RS pin
 * @param value: value to send
 * @param state: state to set RS (register select) pin [0, 1]
 * @retval None
 */
void __LCD_Send(uint8_t value, int state) {
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	6039      	str	r1, [r7, #0]
 800076a:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(RS_PORT, RS_PIN, state);
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	b2db      	uxtb	r3, r3
 8000770:	461a      	mov	r2, r3
 8000772:	2180      	movs	r1, #128	; 0x80
 8000774:	4808      	ldr	r0, [pc, #32]	; (8000798 <__LCD_Send+0x38>)
 8000776:	f005 fd45 	bl	8006204 <HAL_GPIO_WritePin>
	__LCD_Write4Bits(value >> 4);
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	091b      	lsrs	r3, r3, #4
 800077e:	b2db      	uxtb	r3, r3
 8000780:	4618      	mov	r0, r3
 8000782:	f7ff ffa1 	bl	80006c8 <__LCD_Write4Bits>
	__LCD_Write4Bits(value);
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	4618      	mov	r0, r3
 800078a:	f7ff ff9d 	bl	80006c8 <__LCD_Write4Bits>

}
 800078e:	bf00      	nop
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	58020400 	.word	0x58020400

0800079c <__LCD_Cmd>:
/*
 * @brief Function to send command to the LCD
 * @param value: command to send
 * @retval None
 */
void __LCD_Cmd(uint8_t value) {
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	71fb      	strb	r3, [r7, #7]

	__LCD_Send(value, 0);
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	2100      	movs	r1, #0
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff ffd8 	bl	8000760 <__LCD_Send>

}
 80007b0:	bf00      	nop
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <__LCD_Data>:
/*
 * @brief Function to send data to the LCD
 * @param value: value to send
 * @retval None
 */
void __LCD_Data(uint8_t value) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	71fb      	strb	r3, [r7, #7]

	__LCD_Send(value, 1);
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	2101      	movs	r1, #1
 80007c6:	4618      	mov	r0, r3
 80007c8:	f7ff ffca 	bl	8000760 <__LCD_Send>

}
 80007cc:	bf00      	nop
 80007ce:	3708      	adds	r7, #8
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <LCD_Write>:
/*
 * @brief Function to write to the LCD
 * @param value: value to write to the LCD
 * @retval None
 */
void LCD_Write(char *value) {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]

	while (*value) {
 80007dc:	e00a      	b.n	80007f4 <LCD_Write+0x20>
		__LCD_Data(*value++);
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	1c5a      	adds	r2, r3, #1
 80007e2:	607a      	str	r2, [r7, #4]
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	4618      	mov	r0, r3
 80007e8:	f7ff ffe6 	bl	80007b8 <__LCD_Data>
		__LCD_Delay(5000);
 80007ec:	f241 3088 	movw	r0, #5000	; 0x1388
 80007f0:	f7ff ff50 	bl	8000694 <__LCD_Delay>
	while (*value) {
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d1f0      	bne.n	80007de <LCD_Write+0xa>
		// HAL_Delay(1000);
	}

}
 80007fc:	bf00      	nop
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}

08000806 <LCD_Write_Char>:
/*
 * @brief Function to write a single character to the LCD
 * @param character: value to write
 * @retval None
 */
void LCD_Write_Char(char character) {
 8000806:	b580      	push	{r7, lr}
 8000808:	b082      	sub	sp, #8
 800080a:	af00      	add	r7, sp, #0
 800080c:	4603      	mov	r3, r0
 800080e:	71fb      	strb	r3, [r7, #7]

	__LCD_Data(character);
 8000810:	79fb      	ldrb	r3, [r7, #7]
 8000812:	4618      	mov	r0, r3
 8000814:	f7ff ffd0 	bl	80007b8 <__LCD_Data>
	__LCD_Delay(5000);
 8000818:	f241 3088 	movw	r0, #5000	; 0x1388
 800081c:	f7ff ff3a 	bl	8000694 <__LCD_Delay>

}
 8000820:	bf00      	nop
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}

08000828 <LCD_Pos_Cursor>:
 * @brief Function to set the cursor position
 * @param row: row to set the cursor [0, 1]
 * @param col: column to set the cursor [0, 15]
 * @retval None
 */
void LCD_Pos_Cursor(uint8_t row, uint8_t col) {
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	460a      	mov	r2, r1
 8000832:	71fb      	strb	r3, [r7, #7]
 8000834:	4613      	mov	r3, r2
 8000836:	71bb      	strb	r3, [r7, #6]

	switch (row) {
 8000838:	79fb      	ldrb	r3, [r7, #7]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d002      	beq.n	8000844 <LCD_Pos_Cursor+0x1c>
 800083e:	2b01      	cmp	r3, #1
 8000840:	d005      	beq.n	800084e <LCD_Pos_Cursor+0x26>
 8000842:	e009      	b.n	8000858 <LCD_Pos_Cursor+0x30>
		case 0:
			col |= 0x80;
 8000844:	79bb      	ldrb	r3, [r7, #6]
 8000846:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800084a:	71bb      	strb	r3, [r7, #6]
	        break;
 800084c:	e009      	b.n	8000862 <LCD_Pos_Cursor+0x3a>
	    case 1:
	        col |= 0xC0;
 800084e:	79bb      	ldrb	r3, [r7, #6]
 8000850:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000854:	71bb      	strb	r3, [r7, #6]
	        break;
 8000856:	e004      	b.n	8000862 <LCD_Pos_Cursor+0x3a>
	    default:
	    	row = 0;
 8000858:	2300      	movs	r3, #0
 800085a:	71fb      	strb	r3, [r7, #7]
	    	col = 0;
 800085c:	2300      	movs	r3, #0
 800085e:	71bb      	strb	r3, [r7, #6]
	    	break;
 8000860:	bf00      	nop
	}
	__LCD_Cmd(col);
 8000862:	79bb      	ldrb	r3, [r7, #6]
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff ff99 	bl	800079c <__LCD_Cmd>

}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}

08000872 <LCD_Clear>:
/*
 * @brief Function to clear the display
 * @param None
 * @retval None
 */
void LCD_Clear(void) {
 8000872:	b580      	push	{r7, lr}
 8000874:	af00      	add	r7, sp, #0

	__LCD_Cmd(CLEAR);
 8000876:	2001      	movs	r0, #1
 8000878:	f7ff ff90 	bl	800079c <__LCD_Cmd>

}
 800087c:	bf00      	nop
 800087e:	bd80      	pop	{r7, pc}

08000880 <LCD_Scroll_Display_Right>:
/*
 * @brief Function to scroll the display right
 * @param None
 * @retval None
 */
void LCD_Scroll_Display_Right(void) {
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0

	__LCD_Cmd(SCROLL_DISPLAY_RIGHT);
 8000884:	201c      	movs	r0, #28
 8000886:	f7ff ff89 	bl	800079c <__LCD_Cmd>

}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}

0800088e <LCD_Scroll_Display_Left>:
/*
 * @brief Function to scroll the display left
 * @param None
 * @retval None
 */
void LCD_Scroll_Display_Left(void) {
 800088e:	b580      	push	{r7, lr}
 8000890:	af00      	add	r7, sp, #0

	__LCD_Cmd(SCROLL_DISPLAY_LEFT);
 8000892:	2018      	movs	r0, #24
 8000894:	f7ff ff82 	bl	800079c <__LCD_Cmd>

}
 8000898:	bf00      	nop
 800089a:	bd80      	pop	{r7, pc}

0800089c <LCD_Init>:
 * @brief Function to initialize the LCD
 * @param cursor: true/false to enable cursor
 * @param blinking: true/false to enable blinking
 * @retval None
 */
void LCD_Init(bool cursor, bool blinking) {
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	460a      	mov	r2, r1
 80008a6:	71fb      	strb	r3, [r7, #7]
 80008a8:	4613      	mov	r3, r2
 80008aa:	71bb      	strb	r3, [r7, #6]

	// Init
	__LCD_Delay(50000);
 80008ac:	f24c 3050 	movw	r0, #50000	; 0xc350
 80008b0:	f7ff fef0 	bl	8000694 <__LCD_Delay>
	__LCD_Cmd(0x30);
 80008b4:	2030      	movs	r0, #48	; 0x30
 80008b6:	f7ff ff71 	bl	800079c <__LCD_Cmd>
	__LCD_Delay(4500);
 80008ba:	f241 1094 	movw	r0, #4500	; 0x1194
 80008be:	f7ff fee9 	bl	8000694 <__LCD_Delay>
	__LCD_Cmd(0x30);
 80008c2:	2030      	movs	r0, #48	; 0x30
 80008c4:	f7ff ff6a 	bl	800079c <__LCD_Cmd>
	__LCD_Delay(150);
 80008c8:	2096      	movs	r0, #150	; 0x96
 80008ca:	f7ff fee3 	bl	8000694 <__LCD_Delay>
	__LCD_Cmd(0x30);
 80008ce:	2030      	movs	r0, #48	; 0x30
 80008d0:	f7ff ff64 	bl	800079c <__LCD_Cmd>

	// Go to 4 bit mode
	__LCD_Delay(10);
 80008d4:	200a      	movs	r0, #10
 80008d6:	f7ff fedd 	bl	8000694 <__LCD_Delay>
	__LCD_Cmd(0x20);
 80008da:	2020      	movs	r0, #32
 80008dc:	f7ff ff5e 	bl	800079c <__LCD_Cmd>
	__LCD_Delay(50);
 80008e0:	2032      	movs	r0, #50	; 0x32
 80008e2:	f7ff fed7 	bl	8000694 <__LCD_Delay>

	// Set display lines and font
	__LCD_Cmd(0x28);
 80008e6:	2028      	movs	r0, #40	; 0x28
 80008e8:	f7ff ff58 	bl	800079c <__LCD_Cmd>
	__LCD_Delay(50);
 80008ec:	2032      	movs	r0, #50	; 0x32
 80008ee:	f7ff fed1 	bl	8000694 <__LCD_Delay>

	// Display on/off
	__LCD_Cmd(0x08);
 80008f2:	2008      	movs	r0, #8
 80008f4:	f7ff ff52 	bl	800079c <__LCD_Cmd>
	__LCD_Delay(50);
 80008f8:	2032      	movs	r0, #50	; 0x32
 80008fa:	f7ff fecb 	bl	8000694 <__LCD_Delay>

	// Display clear
	__LCD_Cmd(0x01);
 80008fe:	2001      	movs	r0, #1
 8000900:	f7ff ff4c 	bl	800079c <__LCD_Cmd>
	__LCD_Delay(1500);
 8000904:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000908:	f7ff fec4 	bl	8000694 <__LCD_Delay>

	// Entry mode set
	__LCD_Cmd(0x06);
 800090c:	2006      	movs	r0, #6
 800090e:	f7ff ff45 	bl	800079c <__LCD_Cmd>
	__LCD_Delay(50);
 8000912:	2032      	movs	r0, #50	; 0x32
 8000914:	f7ff febe 	bl	8000694 <__LCD_Delay>

	// Display on/off
	if (cursor && blinking) {
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d006      	beq.n	800092c <LCD_Init+0x90>
 800091e:	79bb      	ldrb	r3, [r7, #6]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d003      	beq.n	800092c <LCD_Init+0x90>
		__LCD_Cmd(CURSOR_BLINK);
 8000924:	200f      	movs	r0, #15
 8000926:	f7ff ff39 	bl	800079c <__LCD_Cmd>
 800092a:	e010      	b.n	800094e <LCD_Init+0xb2>
	} else if (cursor) {
 800092c:	79fb      	ldrb	r3, [r7, #7]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d003      	beq.n	800093a <LCD_Init+0x9e>
		__LCD_Cmd(CURSOR);
 8000932:	200e      	movs	r0, #14
 8000934:	f7ff ff32 	bl	800079c <__LCD_Cmd>
 8000938:	e009      	b.n	800094e <LCD_Init+0xb2>
	} else if (blinking) {
 800093a:	79bb      	ldrb	r3, [r7, #6]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d003      	beq.n	8000948 <LCD_Init+0xac>
		__LCD_Cmd(BLINK);
 8000940:	200d      	movs	r0, #13
 8000942:	f7ff ff2b 	bl	800079c <__LCD_Cmd>
 8000946:	e002      	b.n	800094e <LCD_Init+0xb2>
	} else {
		__LCD_Cmd(NO_BLINK_NO_CURSOR);
 8000948:	200c      	movs	r0, #12
 800094a:	f7ff ff27 	bl	800079c <__LCD_Cmd>
	}

	__LCD_Delay(50000);
 800094e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000952:	f7ff fe9f 	bl	8000694 <__LCD_Delay>
	LCD_Pos_Cursor(0, 0);
 8000956:	2100      	movs	r1, #0
 8000958:	2000      	movs	r0, #0
 800095a:	f7ff ff65 	bl	8000828 <LCD_Pos_Cursor>

}
 800095e:	bf00      	nop
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
	...

08000968 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800096e:	f002 fb23 	bl	8002fb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000972:	f000 f8bb 	bl	8000aec <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000976:	f000 f93b 	bl	8000bf0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800097a:	f000 fef7 	bl	800176c <MX_GPIO_Init>
  MX_ADC1_Init();
 800097e:	f000 f967 	bl	8000c50 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000982:	f000 f9db 	bl	8000d3c <MX_ADC2_Init>
  MX_ADC3_Init();
 8000986:	f000 fa3d 	bl	8000e04 <MX_ADC3_Init>
  MX_ETH_Init();
 800098a:	f000 fa9d 	bl	8000ec8 <MX_ETH_Init>
  MX_FDCAN1_Init();
 800098e:	f000 fae7 	bl	8000f60 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8000992:	f000 fb49 	bl	8001028 <MX_FDCAN2_Init>
  MX_FMC_Init();
 8000996:	f000 fe9b 	bl	80016d0 <MX_FMC_Init>
  MX_LTDC_Init();
 800099a:	f000 fba9 	bl	80010f0 <MX_LTDC_Init>
  MX_RTC_Init();
 800099e:	f000 fc59 	bl	8001254 <MX_RTC_Init>
  MX_SAI2_Init();
 80009a2:	f000 fcb3 	bl	800130c <MX_SAI2_Init>
  MX_SPI2_Init();
 80009a6:	f000 fd6f 	bl	8001488 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 80009aa:	f000 fe13 	bl	80015d4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80009ae:	f000 fe5d 	bl	800166c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 80009b2:	f000 fdbd 	bl	8001530 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  STATE state = SETUP;
 80009b6:	2300      	movs	r3, #0
 80009b8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  switch (state) {
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	2b07      	cmp	r3, #7
 80009be:	d87d      	bhi.n	8000abc <main+0x154>
 80009c0:	a201      	add	r2, pc, #4	; (adr r2, 80009c8 <main+0x60>)
 80009c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009c6:	bf00      	nop
 80009c8:	080009e9 	.word	0x080009e9
 80009cc:	080009f7 	.word	0x080009f7
 80009d0:	08000a07 	.word	0x08000a07
 80009d4:	08000a1d 	.word	0x08000a1d
 80009d8:	08000a3d 	.word	0x08000a3d
 80009dc:	08000a8d 	.word	0x08000a8d
 80009e0:	08000a9d 	.word	0x08000a9d
 80009e4:	08000aad 	.word	0x08000aad
	  	  case SETUP:
	  		  LCD_Init(true, false);
 80009e8:	2100      	movs	r1, #0
 80009ea:	2001      	movs	r0, #1
 80009ec:	f7ff ff56 	bl	800089c <LCD_Init>
	  		  state = SHOW_MENU;
 80009f0:	2301      	movs	r3, #1
 80009f2:	71fb      	strb	r3, [r7, #7]
	  		  break;
 80009f4:	e06c      	b.n	8000ad0 <main+0x168>
	  	  case SHOW_MENU:
	  		  if (printWelcomeText()) {
 80009f6:	f001 f8d1 	bl	8001b9c <printWelcomeText>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d060      	beq.n	8000ac2 <main+0x15a>
	  			  state = SHOW_PROMPT;
 8000a00:	2302      	movs	r3, #2
 8000a02:	71fb      	strb	r3, [r7, #7]
	  		  }
	  		  break;
 8000a04:	e05d      	b.n	8000ac2 <main+0x15a>
	  	  case SHOW_PROMPT:
	  		  if (printString(inputPrompt)) {
 8000a06:	4b35      	ldr	r3, [pc, #212]	; (8000adc <main+0x174>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f001 f8e8 	bl	8001be0 <printString>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d057      	beq.n	8000ac6 <main+0x15e>
	  			  state = GET_OPTION;
 8000a16:	2303      	movs	r3, #3
 8000a18:	71fb      	strb	r3, [r7, #7]
	  		  }
	  		  break;
 8000a1a:	e054      	b.n	8000ac6 <main+0x15e>
	  	  case GET_OPTION:
	  		  if (!receiverActive && receiveValue(1)) {
 8000a1c:	4b30      	ldr	r3, [pc, #192]	; (8000ae0 <main+0x178>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	f083 0301 	eor.w	r3, r3, #1
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d04f      	beq.n	8000aca <main+0x162>
 8000a2a:	2001      	movs	r0, #1
 8000a2c:	f001 f8f4 	bl	8001c18 <receiveValue>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d049      	beq.n	8000aca <main+0x162>
	  			  state = SELECT_PROGRAM;
 8000a36:	2304      	movs	r3, #4
 8000a38:	71fb      	strb	r3, [r7, #7]
	  		  }
	  		  break;
 8000a3a:	e046      	b.n	8000aca <main+0x162>
	  	  case SELECT_PROGRAM:
	  		  if (haveReceived && printString(rxBuffer)) {
 8000a3c:	4b29      	ldr	r3, [pc, #164]	; (8000ae4 <main+0x17c>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d044      	beq.n	8000ace <main+0x166>
 8000a44:	4828      	ldr	r0, [pc, #160]	; (8000ae8 <main+0x180>)
 8000a46:	f001 f8cb 	bl	8001be0 <printString>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d03e      	beq.n	8000ace <main+0x166>
	  			  switch (rxBuffer[0]) {
 8000a50:	4b25      	ldr	r3, [pc, #148]	; (8000ae8 <main+0x180>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	2b33      	cmp	r3, #51	; 0x33
 8000a56:	d00c      	beq.n	8000a72 <main+0x10a>
 8000a58:	2b33      	cmp	r3, #51	; 0x33
 8000a5a:	dc0d      	bgt.n	8000a78 <main+0x110>
 8000a5c:	2b31      	cmp	r3, #49	; 0x31
 8000a5e:	d002      	beq.n	8000a66 <main+0xfe>
 8000a60:	2b32      	cmp	r3, #50	; 0x32
 8000a62:	d003      	beq.n	8000a6c <main+0x104>
 8000a64:	e008      	b.n	8000a78 <main+0x110>
	  			  	  case '1':
	  			  		  state = TYPE_TO_LCD;
 8000a66:	2305      	movs	r3, #5
 8000a68:	71fb      	strb	r3, [r7, #7]
	  			  		  break;
 8000a6a:	e008      	b.n	8000a7e <main+0x116>
	  			  	  case '2':
	  			  		  state = MOVE_TEXT;
 8000a6c:	2306      	movs	r3, #6
 8000a6e:	71fb      	strb	r3, [r7, #7]
	  			  		  break;
 8000a70:	e005      	b.n	8000a7e <main+0x116>
	  			  	  case '3':
	  			  		  state = CLOCK_F;
 8000a72:	2307      	movs	r3, #7
 8000a74:	71fb      	strb	r3, [r7, #7]
	  			  		  break;
 8000a76:	e002      	b.n	8000a7e <main+0x116>
	  			  	  default:
	  			  		  state = SHOW_PROMPT;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	71fb      	strb	r3, [r7, #7]
	  			  		  break;
 8000a7c:	bf00      	nop
	  			  }
	  			  if (state != SELECT_PROGRAM) {
 8000a7e:	79fb      	ldrb	r3, [r7, #7]
 8000a80:	2b04      	cmp	r3, #4
 8000a82:	d024      	beq.n	8000ace <main+0x166>
	  				  haveReceived = false;
 8000a84:	4b17      	ldr	r3, [pc, #92]	; (8000ae4 <main+0x17c>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	701a      	strb	r2, [r3, #0]
	  			  }
	  		  }
	  		  break;
 8000a8a:	e020      	b.n	8000ace <main+0x166>
	  	  case TYPE_TO_LCD:
	  		  typeToLCD();
 8000a8c:	f001 f8e2 	bl	8001c54 <typeToLCD>
	  		  state = SHOW_PROMPT;
 8000a90:	2302      	movs	r3, #2
 8000a92:	71fb      	strb	r3, [r7, #7]
	  		  haveReceived = false;
 8000a94:	4b13      	ldr	r3, [pc, #76]	; (8000ae4 <main+0x17c>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	701a      	strb	r2, [r3, #0]
	  		  break;
 8000a9a:	e019      	b.n	8000ad0 <main+0x168>
	  	  case MOVE_TEXT:
	  		  moveTextLCD();
 8000a9c:	f001 f926 	bl	8001cec <moveTextLCD>
	  		  state = SHOW_PROMPT;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	71fb      	strb	r3, [r7, #7]
	  		  haveReceived = false;
 8000aa4:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <main+0x17c>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	701a      	strb	r2, [r3, #0]
	  		  break;
 8000aaa:	e011      	b.n	8000ad0 <main+0x168>
	  	  case CLOCK_F:
	  		  displayClock();
 8000aac:	f001 f988 	bl	8001dc0 <displayClock>
	  		  state = SHOW_PROMPT;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	71fb      	strb	r3, [r7, #7]
	  		  haveReceived = false;
 8000ab4:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <main+0x17c>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	701a      	strb	r2, [r3, #0]
	  		  break;
 8000aba:	e009      	b.n	8000ad0 <main+0x168>
	  	  default:
	  		  return -1;
 8000abc:	f04f 33ff 	mov.w	r3, #4294967295
 8000ac0:	e007      	b.n	8000ad2 <main+0x16a>
	  		  break;
 8000ac2:	bf00      	nop
 8000ac4:	e779      	b.n	80009ba <main+0x52>
	  		  break;
 8000ac6:	bf00      	nop
 8000ac8:	e777      	b.n	80009ba <main+0x52>
	  		  break;
 8000aca:	bf00      	nop
 8000acc:	e775      	b.n	80009ba <main+0x52>
	  		  break;
 8000ace:	bf00      	nop
	  switch (state) {
 8000ad0:	e773      	b.n	80009ba <main+0x52>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	24000024 	.word	0x24000024
 8000ae0:	24000d75 	.word	0x24000d75
 8000ae4:	24000d74 	.word	0x24000d74
 8000ae8:	24000d78 	.word	0x24000d78

08000aec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b09c      	sub	sp, #112	; 0x70
 8000af0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000af2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af6:	224c      	movs	r2, #76	; 0x4c
 8000af8:	2100      	movs	r1, #0
 8000afa:	4618      	mov	r0, r3
 8000afc:	f00d fff0 	bl	800eae0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b00:	1d3b      	adds	r3, r7, #4
 8000b02:	2220      	movs	r2, #32
 8000b04:	2100      	movs	r1, #0
 8000b06:	4618      	mov	r0, r3
 8000b08:	f00d ffea 	bl	800eae0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000b0c:	2002      	movs	r0, #2
 8000b0e:	f005 ff83 	bl	8006a18 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b12:	2300      	movs	r3, #0
 8000b14:	603b      	str	r3, [r7, #0]
 8000b16:	4b34      	ldr	r3, [pc, #208]	; (8000be8 <SystemClock_Config+0xfc>)
 8000b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b1a:	4a33      	ldr	r2, [pc, #204]	; (8000be8 <SystemClock_Config+0xfc>)
 8000b1c:	f023 0301 	bic.w	r3, r3, #1
 8000b20:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000b22:	4b31      	ldr	r3, [pc, #196]	; (8000be8 <SystemClock_Config+0xfc>)
 8000b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	603b      	str	r3, [r7, #0]
 8000b2c:	4b2f      	ldr	r3, [pc, #188]	; (8000bec <SystemClock_Config+0x100>)
 8000b2e:	699b      	ldr	r3, [r3, #24]
 8000b30:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b34:	4a2d      	ldr	r2, [pc, #180]	; (8000bec <SystemClock_Config+0x100>)
 8000b36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b3a:	6193      	str	r3, [r2, #24]
 8000b3c:	4b2b      	ldr	r3, [pc, #172]	; (8000bec <SystemClock_Config+0x100>)
 8000b3e:	699b      	ldr	r3, [r3, #24]
 8000b40:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b44:	603b      	str	r3, [r7, #0]
 8000b46:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b48:	bf00      	nop
 8000b4a:	4b28      	ldr	r3, [pc, #160]	; (8000bec <SystemClock_Config+0x100>)
 8000b4c:	699b      	ldr	r3, [r3, #24]
 8000b4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b56:	d1f8      	bne.n	8000b4a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000b58:	230b      	movs	r3, #11
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b5c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b60:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000b62:	2301      	movs	r3, #1
 8000b64:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b66:	2340      	movs	r3, #64	; 0x40
 8000b68:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b72:	2302      	movs	r3, #2
 8000b74:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 22;
 8000b76:	2316      	movs	r3, #22
 8000b78:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 169;
 8000b7a:	23a9      	movs	r3, #169	; 0xa9
 8000b7c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b82:	2304      	movs	r3, #4
 8000b84:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b86:	2302      	movs	r3, #2
 8000b88:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b92:	2300      	movs	r3, #0
 8000b94:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f005 ff86 	bl	8006aac <HAL_RCC_OscConfig>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000ba6:	f001 f965 	bl	8001e74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000baa:	233f      	movs	r3, #63	; 0x3f
 8000bac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000bca:	1d3b      	adds	r3, r7, #4
 8000bcc:	2101      	movs	r1, #1
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f006 fbc6 	bl	8007360 <HAL_RCC_ClockConfig>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000bda:	f001 f94b 	bl	8001e74 <Error_Handler>
  }
}
 8000bde:	bf00      	nop
 8000be0:	3770      	adds	r7, #112	; 0x70
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	58000400 	.word	0x58000400
 8000bec:	58024800 	.word	0x58024800

08000bf0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b0b0      	sub	sp, #192	; 0xc0
 8000bf4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bf6:	463b      	mov	r3, r7
 8000bf8:	22c0      	movs	r2, #192	; 0xc0
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f00d ff6f 	bl	800eae0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c02:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000c06:	f04f 0300 	mov.w	r3, #0
 8000c0a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000c12:	230c      	movs	r3, #12
 8000c14:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 8000c16:	2305      	movs	r3, #5
 8000c18:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000c22:	23c0      	movs	r3, #192	; 0xc0
 8000c24:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000c26:	2320      	movs	r3, #32
 8000c28:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c34:	463b      	mov	r3, r7
 8000c36:	4618      	mov	r0, r3
 8000c38:	f006 ff1e 	bl	8007a78 <HAL_RCCEx_PeriphCLKConfig>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000c42:	f001 f917 	bl	8001e74 <Error_Handler>
  }
}
 8000c46:	bf00      	nop
 8000c48:	37c0      	adds	r7, #192	; 0xc0
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
	...

08000c50 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08a      	sub	sp, #40	; 0x28
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c56:	f107 031c 	add.w	r3, r7, #28
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	605a      	str	r2, [r3, #4]
 8000c60:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c62:	463b      	mov	r3, r7
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
 8000c6e:	611a      	str	r2, [r3, #16]
 8000c70:	615a      	str	r2, [r3, #20]
 8000c72:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c74:	4b2f      	ldr	r3, [pc, #188]	; (8000d34 <MX_ADC1_Init+0xe4>)
 8000c76:	4a30      	ldr	r2, [pc, #192]	; (8000d38 <MX_ADC1_Init+0xe8>)
 8000c78:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c7a:	4b2e      	ldr	r3, [pc, #184]	; (8000d34 <MX_ADC1_Init+0xe4>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000c80:	4b2c      	ldr	r3, [pc, #176]	; (8000d34 <MX_ADC1_Init+0xe4>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c86:	4b2b      	ldr	r3, [pc, #172]	; (8000d34 <MX_ADC1_Init+0xe4>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c8c:	4b29      	ldr	r3, [pc, #164]	; (8000d34 <MX_ADC1_Init+0xe4>)
 8000c8e:	2204      	movs	r2, #4
 8000c90:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c92:	4b28      	ldr	r3, [pc, #160]	; (8000d34 <MX_ADC1_Init+0xe4>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c98:	4b26      	ldr	r3, [pc, #152]	; (8000d34 <MX_ADC1_Init+0xe4>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000c9e:	4b25      	ldr	r3, [pc, #148]	; (8000d34 <MX_ADC1_Init+0xe4>)
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ca4:	4b23      	ldr	r3, [pc, #140]	; (8000d34 <MX_ADC1_Init+0xe4>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000caa:	4b22      	ldr	r3, [pc, #136]	; (8000d34 <MX_ADC1_Init+0xe4>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cb0:	4b20      	ldr	r3, [pc, #128]	; (8000d34 <MX_ADC1_Init+0xe4>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000cb6:	4b1f      	ldr	r3, [pc, #124]	; (8000d34 <MX_ADC1_Init+0xe4>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000cbc:	4b1d      	ldr	r3, [pc, #116]	; (8000d34 <MX_ADC1_Init+0xe4>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000cc2:	4b1c      	ldr	r3, [pc, #112]	; (8000d34 <MX_ADC1_Init+0xe4>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000cc8:	4b1a      	ldr	r3, [pc, #104]	; (8000d34 <MX_ADC1_Init+0xe4>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cd0:	4818      	ldr	r0, [pc, #96]	; (8000d34 <MX_ADC1_Init+0xe4>)
 8000cd2:	f002 fbe9 	bl	80034a8 <HAL_ADC_Init>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000cdc:	f001 f8ca 	bl	8001e74 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ce4:	f107 031c 	add.w	r3, r7, #28
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4812      	ldr	r0, [pc, #72]	; (8000d34 <MX_ADC1_Init+0xe4>)
 8000cec:	f003 fa00 	bl	80040f0 <HAL_ADCEx_MultiModeConfigChannel>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000cf6:	f001 f8bd 	bl	8001e74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cfe:	2306      	movs	r3, #6
 8000d00:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d02:	2300      	movs	r3, #0
 8000d04:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d06:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000d0a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d0c:	2304      	movs	r3, #4
 8000d0e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000d14:	2300      	movs	r3, #0
 8000d16:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d18:	463b      	mov	r3, r7
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4805      	ldr	r0, [pc, #20]	; (8000d34 <MX_ADC1_Init+0xe4>)
 8000d1e:	f002 fd65 	bl	80037ec <HAL_ADC_ConfigChannel>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000d28:	f001 f8a4 	bl	8001e74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d2c:	bf00      	nop
 8000d2e:	3728      	adds	r7, #40	; 0x28
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	240001b4 	.word	0x240001b4
 8000d38:	40022000 	.word	0x40022000

08000d3c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b088      	sub	sp, #32
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d42:	1d3b      	adds	r3, r7, #4
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
 8000d4e:	611a      	str	r2, [r3, #16]
 8000d50:	615a      	str	r2, [r3, #20]
 8000d52:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000d54:	4b29      	ldr	r3, [pc, #164]	; (8000dfc <MX_ADC2_Init+0xc0>)
 8000d56:	4a2a      	ldr	r2, [pc, #168]	; (8000e00 <MX_ADC2_Init+0xc4>)
 8000d58:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d5a:	4b28      	ldr	r3, [pc, #160]	; (8000dfc <MX_ADC2_Init+0xc0>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000d60:	4b26      	ldr	r3, [pc, #152]	; (8000dfc <MX_ADC2_Init+0xc0>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d66:	4b25      	ldr	r3, [pc, #148]	; (8000dfc <MX_ADC2_Init+0xc0>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d6c:	4b23      	ldr	r3, [pc, #140]	; (8000dfc <MX_ADC2_Init+0xc0>)
 8000d6e:	2204      	movs	r2, #4
 8000d70:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000d72:	4b22      	ldr	r3, [pc, #136]	; (8000dfc <MX_ADC2_Init+0xc0>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000d78:	4b20      	ldr	r3, [pc, #128]	; (8000dfc <MX_ADC2_Init+0xc0>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000d7e:	4b1f      	ldr	r3, [pc, #124]	; (8000dfc <MX_ADC2_Init+0xc0>)
 8000d80:	2201      	movs	r2, #1
 8000d82:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000d84:	4b1d      	ldr	r3, [pc, #116]	; (8000dfc <MX_ADC2_Init+0xc0>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d8a:	4b1c      	ldr	r3, [pc, #112]	; (8000dfc <MX_ADC2_Init+0xc0>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d90:	4b1a      	ldr	r3, [pc, #104]	; (8000dfc <MX_ADC2_Init+0xc0>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000d96:	4b19      	ldr	r3, [pc, #100]	; (8000dfc <MX_ADC2_Init+0xc0>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d9c:	4b17      	ldr	r3, [pc, #92]	; (8000dfc <MX_ADC2_Init+0xc0>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000da2:	4b16      	ldr	r3, [pc, #88]	; (8000dfc <MX_ADC2_Init+0xc0>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000da8:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <MX_ADC2_Init+0xc0>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000db0:	4812      	ldr	r0, [pc, #72]	; (8000dfc <MX_ADC2_Init+0xc0>)
 8000db2:	f002 fb79 	bl	80034a8 <HAL_ADC_Init>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8000dbc:	f001 f85a 	bl	8001e74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dc4:	2306      	movs	r3, #6
 8000dc6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000dcc:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000dd0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000dd2:	2304      	movs	r3, #4
 8000dd4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000dde:	1d3b      	adds	r3, r7, #4
 8000de0:	4619      	mov	r1, r3
 8000de2:	4806      	ldr	r0, [pc, #24]	; (8000dfc <MX_ADC2_Init+0xc0>)
 8000de4:	f002 fd02 	bl	80037ec <HAL_ADC_ConfigChannel>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000dee:	f001 f841 	bl	8001e74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000df2:	bf00      	nop
 8000df4:	3720      	adds	r7, #32
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	24000218 	.word	0x24000218
 8000e00:	40022100 	.word	0x40022100

08000e04 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b088      	sub	sp, #32
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e0a:	1d3b      	adds	r3, r7, #4
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	611a      	str	r2, [r3, #16]
 8000e18:	615a      	str	r2, [r3, #20]
 8000e1a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000e1c:	4b27      	ldr	r3, [pc, #156]	; (8000ebc <MX_ADC3_Init+0xb8>)
 8000e1e:	4a28      	ldr	r2, [pc, #160]	; (8000ec0 <MX_ADC3_Init+0xbc>)
 8000e20:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000e22:	4b26      	ldr	r3, [pc, #152]	; (8000ebc <MX_ADC3_Init+0xb8>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e28:	4b24      	ldr	r3, [pc, #144]	; (8000ebc <MX_ADC3_Init+0xb8>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e2e:	4b23      	ldr	r3, [pc, #140]	; (8000ebc <MX_ADC3_Init+0xb8>)
 8000e30:	2204      	movs	r2, #4
 8000e32:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000e34:	4b21      	ldr	r3, [pc, #132]	; (8000ebc <MX_ADC3_Init+0xb8>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000e3a:	4b20      	ldr	r3, [pc, #128]	; (8000ebc <MX_ADC3_Init+0xb8>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000e40:	4b1e      	ldr	r3, [pc, #120]	; (8000ebc <MX_ADC3_Init+0xb8>)
 8000e42:	2201      	movs	r2, #1
 8000e44:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000e46:	4b1d      	ldr	r3, [pc, #116]	; (8000ebc <MX_ADC3_Init+0xb8>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e4c:	4b1b      	ldr	r3, [pc, #108]	; (8000ebc <MX_ADC3_Init+0xb8>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e52:	4b1a      	ldr	r3, [pc, #104]	; (8000ebc <MX_ADC3_Init+0xb8>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000e58:	4b18      	ldr	r3, [pc, #96]	; (8000ebc <MX_ADC3_Init+0xb8>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e5e:	4b17      	ldr	r3, [pc, #92]	; (8000ebc <MX_ADC3_Init+0xb8>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000e64:	4b15      	ldr	r3, [pc, #84]	; (8000ebc <MX_ADC3_Init+0xb8>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000e6a:	4b14      	ldr	r3, [pc, #80]	; (8000ebc <MX_ADC3_Init+0xb8>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000e72:	4812      	ldr	r0, [pc, #72]	; (8000ebc <MX_ADC3_Init+0xb8>)
 8000e74:	f002 fb18 	bl	80034a8 <HAL_ADC_Init>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_ADC3_Init+0x7e>
  {
    Error_Handler();
 8000e7e:	f000 fff9 	bl	8001e74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000e82:	4b10      	ldr	r3, [pc, #64]	; (8000ec4 <MX_ADC3_Init+0xc0>)
 8000e84:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e86:	2306      	movs	r3, #6
 8000e88:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e8e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000e92:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e94:	2304      	movs	r3, #4
 8000e96:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000ea0:	1d3b      	adds	r3, r7, #4
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4805      	ldr	r0, [pc, #20]	; (8000ebc <MX_ADC3_Init+0xb8>)
 8000ea6:	f002 fca1 	bl	80037ec <HAL_ADC_ConfigChannel>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8000eb0:	f000 ffe0 	bl	8001e74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000eb4:	bf00      	nop
 8000eb6:	3720      	adds	r7, #32
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	2400027c 	.word	0x2400027c
 8000ec0:	58026000 	.word	0x58026000
 8000ec4:	1d500080 	.word	0x1d500080

08000ec8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000ecc:	4b1e      	ldr	r3, [pc, #120]	; (8000f48 <MX_ETH_Init+0x80>)
 8000ece:	4a1f      	ldr	r2, [pc, #124]	; (8000f4c <MX_ETH_Init+0x84>)
 8000ed0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000ed2:	4b1f      	ldr	r3, [pc, #124]	; (8000f50 <MX_ETH_Init+0x88>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000ed8:	4b1d      	ldr	r3, [pc, #116]	; (8000f50 <MX_ETH_Init+0x88>)
 8000eda:	2280      	movs	r2, #128	; 0x80
 8000edc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000ede:	4b1c      	ldr	r3, [pc, #112]	; (8000f50 <MX_ETH_Init+0x88>)
 8000ee0:	22e1      	movs	r2, #225	; 0xe1
 8000ee2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000ee4:	4b1a      	ldr	r3, [pc, #104]	; (8000f50 <MX_ETH_Init+0x88>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000eea:	4b19      	ldr	r3, [pc, #100]	; (8000f50 <MX_ETH_Init+0x88>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000ef0:	4b17      	ldr	r3, [pc, #92]	; (8000f50 <MX_ETH_Init+0x88>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000ef6:	4b14      	ldr	r3, [pc, #80]	; (8000f48 <MX_ETH_Init+0x80>)
 8000ef8:	4a15      	ldr	r2, [pc, #84]	; (8000f50 <MX_ETH_Init+0x88>)
 8000efa:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_MII_MODE;
 8000efc:	4b12      	ldr	r3, [pc, #72]	; (8000f48 <MX_ETH_Init+0x80>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000f02:	4b11      	ldr	r3, [pc, #68]	; (8000f48 <MX_ETH_Init+0x80>)
 8000f04:	4a13      	ldr	r2, [pc, #76]	; (8000f54 <MX_ETH_Init+0x8c>)
 8000f06:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000f08:	4b0f      	ldr	r3, [pc, #60]	; (8000f48 <MX_ETH_Init+0x80>)
 8000f0a:	4a13      	ldr	r2, [pc, #76]	; (8000f58 <MX_ETH_Init+0x90>)
 8000f0c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000f0e:	4b0e      	ldr	r3, [pc, #56]	; (8000f48 <MX_ETH_Init+0x80>)
 8000f10:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000f14:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000f16:	480c      	ldr	r0, [pc, #48]	; (8000f48 <MX_ETH_Init+0x80>)
 8000f18:	f004 f83c 	bl	8004f94 <HAL_ETH_Init>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000f22:	f000 ffa7 	bl	8001e74 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000f26:	2238      	movs	r2, #56	; 0x38
 8000f28:	2100      	movs	r1, #0
 8000f2a:	480c      	ldr	r0, [pc, #48]	; (8000f5c <MX_ETH_Init+0x94>)
 8000f2c:	f00d fdd8 	bl	800eae0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000f30:	4b0a      	ldr	r3, [pc, #40]	; (8000f5c <MX_ETH_Init+0x94>)
 8000f32:	2221      	movs	r2, #33	; 0x21
 8000f34:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000f36:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <MX_ETH_Init+0x94>)
 8000f38:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000f3c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000f3e:	4b07      	ldr	r3, [pc, #28]	; (8000f5c <MX_ETH_Init+0x94>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000f44:	bf00      	nop
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	240002e0 	.word	0x240002e0
 8000f4c:	40028000 	.word	0x40028000
 8000f50:	24000db0 	.word	0x24000db0
 8000f54:	24000100 	.word	0x24000100
 8000f58:	240000a0 	.word	0x240000a0
 8000f5c:	2400017c 	.word	0x2400017c

08000f60 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000f64:	4b2e      	ldr	r3, [pc, #184]	; (8001020 <MX_FDCAN1_Init+0xc0>)
 8000f66:	4a2f      	ldr	r2, [pc, #188]	; (8001024 <MX_FDCAN1_Init+0xc4>)
 8000f68:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000f6a:	4b2d      	ldr	r3, [pc, #180]	; (8001020 <MX_FDCAN1_Init+0xc0>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000f70:	4b2b      	ldr	r3, [pc, #172]	; (8001020 <MX_FDCAN1_Init+0xc0>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000f76:	4b2a      	ldr	r3, [pc, #168]	; (8001020 <MX_FDCAN1_Init+0xc0>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000f7c:	4b28      	ldr	r3, [pc, #160]	; (8001020 <MX_FDCAN1_Init+0xc0>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000f82:	4b27      	ldr	r3, [pc, #156]	; (8001020 <MX_FDCAN1_Init+0xc0>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000f88:	4b25      	ldr	r3, [pc, #148]	; (8001020 <MX_FDCAN1_Init+0xc0>)
 8000f8a:	2210      	movs	r2, #16
 8000f8c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000f8e:	4b24      	ldr	r3, [pc, #144]	; (8001020 <MX_FDCAN1_Init+0xc0>)
 8000f90:	2201      	movs	r2, #1
 8000f92:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000f94:	4b22      	ldr	r3, [pc, #136]	; (8001020 <MX_FDCAN1_Init+0xc0>)
 8000f96:	2202      	movs	r2, #2
 8000f98:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000f9a:	4b21      	ldr	r3, [pc, #132]	; (8001020 <MX_FDCAN1_Init+0xc0>)
 8000f9c:	2202      	movs	r2, #2
 8000f9e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000fa0:	4b1f      	ldr	r3, [pc, #124]	; (8001020 <MX_FDCAN1_Init+0xc0>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000fa6:	4b1e      	ldr	r3, [pc, #120]	; (8001020 <MX_FDCAN1_Init+0xc0>)
 8000fa8:	2201      	movs	r2, #1
 8000faa:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000fac:	4b1c      	ldr	r3, [pc, #112]	; (8001020 <MX_FDCAN1_Init+0xc0>)
 8000fae:	2201      	movs	r2, #1
 8000fb0:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000fb2:	4b1b      	ldr	r3, [pc, #108]	; (8001020 <MX_FDCAN1_Init+0xc0>)
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000fb8:	4b19      	ldr	r3, [pc, #100]	; (8001020 <MX_FDCAN1_Init+0xc0>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000fbe:	4b18      	ldr	r3, [pc, #96]	; (8001020 <MX_FDCAN1_Init+0xc0>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000fc4:	4b16      	ldr	r3, [pc, #88]	; (8001020 <MX_FDCAN1_Init+0xc0>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000fca:	4b15      	ldr	r3, [pc, #84]	; (8001020 <MX_FDCAN1_Init+0xc0>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000fd0:	4b13      	ldr	r3, [pc, #76]	; (8001020 <MX_FDCAN1_Init+0xc0>)
 8000fd2:	2204      	movs	r2, #4
 8000fd4:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000fd6:	4b12      	ldr	r3, [pc, #72]	; (8001020 <MX_FDCAN1_Init+0xc0>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000fdc:	4b10      	ldr	r3, [pc, #64]	; (8001020 <MX_FDCAN1_Init+0xc0>)
 8000fde:	2204      	movs	r2, #4
 8000fe0:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000fe2:	4b0f      	ldr	r3, [pc, #60]	; (8001020 <MX_FDCAN1_Init+0xc0>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000fe8:	4b0d      	ldr	r3, [pc, #52]	; (8001020 <MX_FDCAN1_Init+0xc0>)
 8000fea:	2204      	movs	r2, #4
 8000fec:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000fee:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <MX_FDCAN1_Init+0xc0>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000ff4:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <MX_FDCAN1_Init+0xc0>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000ffa:	4b09      	ldr	r3, [pc, #36]	; (8001020 <MX_FDCAN1_Init+0xc0>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001000:	4b07      	ldr	r3, [pc, #28]	; (8001020 <MX_FDCAN1_Init+0xc0>)
 8001002:	2200      	movs	r2, #0
 8001004:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001006:	4b06      	ldr	r3, [pc, #24]	; (8001020 <MX_FDCAN1_Init+0xc0>)
 8001008:	2204      	movs	r2, #4
 800100a:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800100c:	4804      	ldr	r0, [pc, #16]	; (8001020 <MX_FDCAN1_Init+0xc0>)
 800100e:	f004 fbe5 	bl	80057dc <HAL_FDCAN_Init>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8001018:	f000 ff2c 	bl	8001e74 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800101c:	bf00      	nop
 800101e:	bd80      	pop	{r7, pc}
 8001020:	24000390 	.word	0x24000390
 8001024:	4000a000 	.word	0x4000a000

08001028 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 800102c:	4b2e      	ldr	r3, [pc, #184]	; (80010e8 <MX_FDCAN2_Init+0xc0>)
 800102e:	4a2f      	ldr	r2, [pc, #188]	; (80010ec <MX_FDCAN2_Init+0xc4>)
 8001030:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001032:	4b2d      	ldr	r3, [pc, #180]	; (80010e8 <MX_FDCAN2_Init+0xc0>)
 8001034:	2200      	movs	r2, #0
 8001036:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8001038:	4b2b      	ldr	r3, [pc, #172]	; (80010e8 <MX_FDCAN2_Init+0xc0>)
 800103a:	2200      	movs	r2, #0
 800103c:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 800103e:	4b2a      	ldr	r3, [pc, #168]	; (80010e8 <MX_FDCAN2_Init+0xc0>)
 8001040:	2200      	movs	r2, #0
 8001042:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8001044:	4b28      	ldr	r3, [pc, #160]	; (80010e8 <MX_FDCAN2_Init+0xc0>)
 8001046:	2200      	movs	r2, #0
 8001048:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 800104a:	4b27      	ldr	r3, [pc, #156]	; (80010e8 <MX_FDCAN2_Init+0xc0>)
 800104c:	2200      	movs	r2, #0
 800104e:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8001050:	4b25      	ldr	r3, [pc, #148]	; (80010e8 <MX_FDCAN2_Init+0xc0>)
 8001052:	2210      	movs	r2, #16
 8001054:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8001056:	4b24      	ldr	r3, [pc, #144]	; (80010e8 <MX_FDCAN2_Init+0xc0>)
 8001058:	2201      	movs	r2, #1
 800105a:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 800105c:	4b22      	ldr	r3, [pc, #136]	; (80010e8 <MX_FDCAN2_Init+0xc0>)
 800105e:	2202      	movs	r2, #2
 8001060:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8001062:	4b21      	ldr	r3, [pc, #132]	; (80010e8 <MX_FDCAN2_Init+0xc0>)
 8001064:	2202      	movs	r2, #2
 8001066:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8001068:	4b1f      	ldr	r3, [pc, #124]	; (80010e8 <MX_FDCAN2_Init+0xc0>)
 800106a:	2201      	movs	r2, #1
 800106c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 800106e:	4b1e      	ldr	r3, [pc, #120]	; (80010e8 <MX_FDCAN2_Init+0xc0>)
 8001070:	2201      	movs	r2, #1
 8001072:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8001074:	4b1c      	ldr	r3, [pc, #112]	; (80010e8 <MX_FDCAN2_Init+0xc0>)
 8001076:	2201      	movs	r2, #1
 8001078:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 800107a:	4b1b      	ldr	r3, [pc, #108]	; (80010e8 <MX_FDCAN2_Init+0xc0>)
 800107c:	2201      	movs	r2, #1
 800107e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8001080:	4b19      	ldr	r3, [pc, #100]	; (80010e8 <MX_FDCAN2_Init+0xc0>)
 8001082:	2200      	movs	r2, #0
 8001084:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8001086:	4b18      	ldr	r3, [pc, #96]	; (80010e8 <MX_FDCAN2_Init+0xc0>)
 8001088:	2200      	movs	r2, #0
 800108a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 800108c:	4b16      	ldr	r3, [pc, #88]	; (80010e8 <MX_FDCAN2_Init+0xc0>)
 800108e:	2200      	movs	r2, #0
 8001090:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8001092:	4b15      	ldr	r3, [pc, #84]	; (80010e8 <MX_FDCAN2_Init+0xc0>)
 8001094:	2200      	movs	r2, #0
 8001096:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001098:	4b13      	ldr	r3, [pc, #76]	; (80010e8 <MX_FDCAN2_Init+0xc0>)
 800109a:	2204      	movs	r2, #4
 800109c:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 800109e:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <MX_FDCAN2_Init+0xc0>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80010a4:	4b10      	ldr	r3, [pc, #64]	; (80010e8 <MX_FDCAN2_Init+0xc0>)
 80010a6:	2204      	movs	r2, #4
 80010a8:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 80010aa:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <MX_FDCAN2_Init+0xc0>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80010b0:	4b0d      	ldr	r3, [pc, #52]	; (80010e8 <MX_FDCAN2_Init+0xc0>)
 80010b2:	2204      	movs	r2, #4
 80010b4:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 80010b6:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <MX_FDCAN2_Init+0xc0>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 80010bc:	4b0a      	ldr	r3, [pc, #40]	; (80010e8 <MX_FDCAN2_Init+0xc0>)
 80010be:	2200      	movs	r2, #0
 80010c0:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 80010c2:	4b09      	ldr	r3, [pc, #36]	; (80010e8 <MX_FDCAN2_Init+0xc0>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80010c8:	4b07      	ldr	r3, [pc, #28]	; (80010e8 <MX_FDCAN2_Init+0xc0>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80010ce:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <MX_FDCAN2_Init+0xc0>)
 80010d0:	2204      	movs	r2, #4
 80010d2:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80010d4:	4804      	ldr	r0, [pc, #16]	; (80010e8 <MX_FDCAN2_Init+0xc0>)
 80010d6:	f004 fb81 	bl	80057dc <HAL_FDCAN_Init>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 80010e0:	f000 fec8 	bl	8001e74 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	24000430 	.word	0x24000430
 80010ec:	4000a400 	.word	0x4000a400

080010f0 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b09a      	sub	sp, #104	; 0x68
 80010f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80010f6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80010fa:	2234      	movs	r2, #52	; 0x34
 80010fc:	2100      	movs	r1, #0
 80010fe:	4618      	mov	r0, r3
 8001100:	f00d fcee 	bl	800eae0 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8001104:	463b      	mov	r3, r7
 8001106:	2234      	movs	r2, #52	; 0x34
 8001108:	2100      	movs	r1, #0
 800110a:	4618      	mov	r0, r3
 800110c:	f00d fce8 	bl	800eae0 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001110:	4b4e      	ldr	r3, [pc, #312]	; (800124c <MX_LTDC_Init+0x15c>)
 8001112:	4a4f      	ldr	r2, [pc, #316]	; (8001250 <MX_LTDC_Init+0x160>)
 8001114:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001116:	4b4d      	ldr	r3, [pc, #308]	; (800124c <MX_LTDC_Init+0x15c>)
 8001118:	2200      	movs	r2, #0
 800111a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800111c:	4b4b      	ldr	r3, [pc, #300]	; (800124c <MX_LTDC_Init+0x15c>)
 800111e:	2200      	movs	r2, #0
 8001120:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001122:	4b4a      	ldr	r3, [pc, #296]	; (800124c <MX_LTDC_Init+0x15c>)
 8001124:	2200      	movs	r2, #0
 8001126:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001128:	4b48      	ldr	r3, [pc, #288]	; (800124c <MX_LTDC_Init+0x15c>)
 800112a:	2200      	movs	r2, #0
 800112c:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 800112e:	4b47      	ldr	r3, [pc, #284]	; (800124c <MX_LTDC_Init+0x15c>)
 8001130:	2207      	movs	r2, #7
 8001132:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8001134:	4b45      	ldr	r3, [pc, #276]	; (800124c <MX_LTDC_Init+0x15c>)
 8001136:	2203      	movs	r2, #3
 8001138:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 800113a:	4b44      	ldr	r3, [pc, #272]	; (800124c <MX_LTDC_Init+0x15c>)
 800113c:	220e      	movs	r2, #14
 800113e:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8001140:	4b42      	ldr	r3, [pc, #264]	; (800124c <MX_LTDC_Init+0x15c>)
 8001142:	2205      	movs	r2, #5
 8001144:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8001146:	4b41      	ldr	r3, [pc, #260]	; (800124c <MX_LTDC_Init+0x15c>)
 8001148:	f240 228e 	movw	r2, #654	; 0x28e
 800114c:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 800114e:	4b3f      	ldr	r3, [pc, #252]	; (800124c <MX_LTDC_Init+0x15c>)
 8001150:	f240 12e5 	movw	r2, #485	; 0x1e5
 8001154:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 8001156:	4b3d      	ldr	r3, [pc, #244]	; (800124c <MX_LTDC_Init+0x15c>)
 8001158:	f44f 7225 	mov.w	r2, #660	; 0x294
 800115c:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 800115e:	4b3b      	ldr	r3, [pc, #236]	; (800124c <MX_LTDC_Init+0x15c>)
 8001160:	f240 12e7 	movw	r2, #487	; 0x1e7
 8001164:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001166:	4b39      	ldr	r3, [pc, #228]	; (800124c <MX_LTDC_Init+0x15c>)
 8001168:	2200      	movs	r2, #0
 800116a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800116e:	4b37      	ldr	r3, [pc, #220]	; (800124c <MX_LTDC_Init+0x15c>)
 8001170:	2200      	movs	r2, #0
 8001172:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001176:	4b35      	ldr	r3, [pc, #212]	; (800124c <MX_LTDC_Init+0x15c>)
 8001178:	2200      	movs	r2, #0
 800117a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800117e:	4833      	ldr	r0, [pc, #204]	; (800124c <MX_LTDC_Init+0x15c>)
 8001180:	f005 f85a 	bl	8006238 <HAL_LTDC_Init>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 800118a:	f000 fe73 	bl	8001e74 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800118e:	2300      	movs	r3, #0
 8001190:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8001192:	2300      	movs	r3, #0
 8001194:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8001196:	2300      	movs	r3, #0
 8001198:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 800119a:	2300      	movs	r3, #0
 800119c:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800119e:	2300      	movs	r3, #0
 80011a0:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 80011a2:	2300      	movs	r3, #0
 80011a4:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80011aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011ae:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80011b0:	2305      	movs	r3, #5
 80011b2:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 80011b8:	2300      	movs	r3, #0
 80011ba:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 80011bc:	2300      	movs	r3, #0
 80011be:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 80011cc:	2300      	movs	r3, #0
 80011ce:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80011d2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80011d6:	2200      	movs	r2, #0
 80011d8:	4619      	mov	r1, r3
 80011da:	481c      	ldr	r0, [pc, #112]	; (800124c <MX_LTDC_Init+0x15c>)
 80011dc:	f005 f8fc 	bl	80063d8 <HAL_LTDC_ConfigLayer>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 80011e6:	f000 fe45 	bl	8001e74 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 80011f6:	2300      	movs	r3, #0
 80011f8:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80011fa:	2300      	movs	r3, #0
 80011fc:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 80011fe:	2300      	movs	r3, #0
 8001200:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8001202:	2300      	movs	r3, #0
 8001204:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001206:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800120a:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800120c:	2305      	movs	r3, #5
 800120e:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8001210:	2300      	movs	r3, #0
 8001212:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8001218:	2300      	movs	r3, #0
 800121a:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 800121c:	2300      	movs	r3, #0
 800121e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8001222:	2300      	movs	r3, #0
 8001224:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001228:	2300      	movs	r3, #0
 800122a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800122e:	463b      	mov	r3, r7
 8001230:	2201      	movs	r2, #1
 8001232:	4619      	mov	r1, r3
 8001234:	4805      	ldr	r0, [pc, #20]	; (800124c <MX_LTDC_Init+0x15c>)
 8001236:	f005 f8cf 	bl	80063d8 <HAL_LTDC_ConfigLayer>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8001240:	f000 fe18 	bl	8001e74 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001244:	bf00      	nop
 8001246:	3768      	adds	r7, #104	; 0x68
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	240004d0 	.word	0x240004d0
 8001250:	50001000 	.word	0x50001000

08001254 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800125a:	1d3b      	adds	r3, r7, #4
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001268:	2300      	movs	r3, #0
 800126a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800126c:	4b25      	ldr	r3, [pc, #148]	; (8001304 <MX_RTC_Init+0xb0>)
 800126e:	4a26      	ldr	r2, [pc, #152]	; (8001308 <MX_RTC_Init+0xb4>)
 8001270:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001272:	4b24      	ldr	r3, [pc, #144]	; (8001304 <MX_RTC_Init+0xb0>)
 8001274:	2200      	movs	r2, #0
 8001276:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001278:	4b22      	ldr	r3, [pc, #136]	; (8001304 <MX_RTC_Init+0xb0>)
 800127a:	227f      	movs	r2, #127	; 0x7f
 800127c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800127e:	4b21      	ldr	r3, [pc, #132]	; (8001304 <MX_RTC_Init+0xb0>)
 8001280:	22ff      	movs	r2, #255	; 0xff
 8001282:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001284:	4b1f      	ldr	r3, [pc, #124]	; (8001304 <MX_RTC_Init+0xb0>)
 8001286:	2200      	movs	r2, #0
 8001288:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800128a:	4b1e      	ldr	r3, [pc, #120]	; (8001304 <MX_RTC_Init+0xb0>)
 800128c:	2200      	movs	r2, #0
 800128e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001290:	4b1c      	ldr	r3, [pc, #112]	; (8001304 <MX_RTC_Init+0xb0>)
 8001292:	2200      	movs	r2, #0
 8001294:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001296:	4b1b      	ldr	r3, [pc, #108]	; (8001304 <MX_RTC_Init+0xb0>)
 8001298:	2200      	movs	r2, #0
 800129a:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800129c:	4819      	ldr	r0, [pc, #100]	; (8001304 <MX_RTC_Init+0xb0>)
 800129e:	f009 f8e9 	bl	800a474 <HAL_RTC_Init>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80012a8:	f000 fde4 	bl	8001e74 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 80012b0:	2300      	movs	r3, #0
 80012b2:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80012b8:	2300      	movs	r3, #0
 80012ba:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80012c0:	1d3b      	adds	r3, r7, #4
 80012c2:	2200      	movs	r2, #0
 80012c4:	4619      	mov	r1, r3
 80012c6:	480f      	ldr	r0, [pc, #60]	; (8001304 <MX_RTC_Init+0xb0>)
 80012c8:	f009 f956 	bl	800a578 <HAL_RTC_SetTime>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80012d2:	f000 fdcf 	bl	8001e74 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80012d6:	2301      	movs	r3, #1
 80012d8:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80012da:	2301      	movs	r3, #1
 80012dc:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 80012de:	2301      	movs	r3, #1
 80012e0:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 80012e2:	2300      	movs	r3, #0
 80012e4:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80012e6:	463b      	mov	r3, r7
 80012e8:	2200      	movs	r2, #0
 80012ea:	4619      	mov	r1, r3
 80012ec:	4805      	ldr	r0, [pc, #20]	; (8001304 <MX_RTC_Init+0xb0>)
 80012ee:	f009 fa3d 	bl	800a76c <HAL_RTC_SetDate>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 80012f8:	f000 fdbc 	bl	8001e74 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80012fc:	bf00      	nop
 80012fe:	3718      	adds	r7, #24
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	24000578 	.word	0x24000578
 8001308:	58004000 	.word	0x58004000

0800130c <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001310:	4b58      	ldr	r3, [pc, #352]	; (8001474 <MX_SAI2_Init+0x168>)
 8001312:	4a59      	ldr	r2, [pc, #356]	; (8001478 <MX_SAI2_Init+0x16c>)
 8001314:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001316:	4b57      	ldr	r3, [pc, #348]	; (8001474 <MX_SAI2_Init+0x168>)
 8001318:	2200      	movs	r2, #0
 800131a:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 800131c:	4b55      	ldr	r3, [pc, #340]	; (8001474 <MX_SAI2_Init+0x168>)
 800131e:	2200      	movs	r2, #0
 8001320:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8001322:	4b54      	ldr	r3, [pc, #336]	; (8001474 <MX_SAI2_Init+0x168>)
 8001324:	2240      	movs	r2, #64	; 0x40
 8001326:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001328:	4b52      	ldr	r3, [pc, #328]	; (8001474 <MX_SAI2_Init+0x168>)
 800132a:	2200      	movs	r2, #0
 800132c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800132e:	4b51      	ldr	r3, [pc, #324]	; (8001474 <MX_SAI2_Init+0x168>)
 8001330:	2200      	movs	r2, #0
 8001332:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001334:	4b4f      	ldr	r3, [pc, #316]	; (8001474 <MX_SAI2_Init+0x168>)
 8001336:	2200      	movs	r2, #0
 8001338:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800133a:	4b4e      	ldr	r3, [pc, #312]	; (8001474 <MX_SAI2_Init+0x168>)
 800133c:	2200      	movs	r2, #0
 800133e:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001340:	4b4c      	ldr	r3, [pc, #304]	; (8001474 <MX_SAI2_Init+0x168>)
 8001342:	2200      	movs	r2, #0
 8001344:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001346:	4b4b      	ldr	r3, [pc, #300]	; (8001474 <MX_SAI2_Init+0x168>)
 8001348:	2200      	movs	r2, #0
 800134a:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 800134c:	4b49      	ldr	r3, [pc, #292]	; (8001474 <MX_SAI2_Init+0x168>)
 800134e:	4a4b      	ldr	r2, [pc, #300]	; (800147c <MX_SAI2_Init+0x170>)
 8001350:	621a      	str	r2, [r3, #32]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001352:	4b48      	ldr	r3, [pc, #288]	; (8001474 <MX_SAI2_Init+0x168>)
 8001354:	2200      	movs	r2, #0
 8001356:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001358:	4b46      	ldr	r3, [pc, #280]	; (8001474 <MX_SAI2_Init+0x168>)
 800135a:	2200      	movs	r2, #0
 800135c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 800135e:	4b45      	ldr	r3, [pc, #276]	; (8001474 <MX_SAI2_Init+0x168>)
 8001360:	2200      	movs	r2, #0
 8001362:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001364:	4b43      	ldr	r3, [pc, #268]	; (8001474 <MX_SAI2_Init+0x168>)
 8001366:	2200      	movs	r2, #0
 8001368:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.PdmInit.Activation = DISABLE;
 800136a:	4b42      	ldr	r3, [pc, #264]	; (8001474 <MX_SAI2_Init+0x168>)
 800136c:	2200      	movs	r2, #0
 800136e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.PdmInit.MicPairsNbr = 1;
 8001372:	4b40      	ldr	r3, [pc, #256]	; (8001474 <MX_SAI2_Init+0x168>)
 8001374:	2201      	movs	r2, #1
 8001376:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8001378:	4b3e      	ldr	r3, [pc, #248]	; (8001474 <MX_SAI2_Init+0x168>)
 800137a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800137e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001380:	4b3c      	ldr	r3, [pc, #240]	; (8001474 <MX_SAI2_Init+0x168>)
 8001382:	2208      	movs	r2, #8
 8001384:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001386:	4b3b      	ldr	r3, [pc, #236]	; (8001474 <MX_SAI2_Init+0x168>)
 8001388:	2201      	movs	r2, #1
 800138a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800138c:	4b39      	ldr	r3, [pc, #228]	; (8001474 <MX_SAI2_Init+0x168>)
 800138e:	2200      	movs	r2, #0
 8001390:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001392:	4b38      	ldr	r3, [pc, #224]	; (8001474 <MX_SAI2_Init+0x168>)
 8001394:	2200      	movs	r2, #0
 8001396:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001398:	4b36      	ldr	r3, [pc, #216]	; (8001474 <MX_SAI2_Init+0x168>)
 800139a:	2200      	movs	r2, #0
 800139c:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 800139e:	4b35      	ldr	r3, [pc, #212]	; (8001474 <MX_SAI2_Init+0x168>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80013a4:	4b33      	ldr	r3, [pc, #204]	; (8001474 <MX_SAI2_Init+0x168>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 80013aa:	4b32      	ldr	r3, [pc, #200]	; (8001474 <MX_SAI2_Init+0x168>)
 80013ac:	2201      	movs	r2, #1
 80013ae:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 80013b0:	4b30      	ldr	r3, [pc, #192]	; (8001474 <MX_SAI2_Init+0x168>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 80013b6:	482f      	ldr	r0, [pc, #188]	; (8001474 <MX_SAI2_Init+0x168>)
 80013b8:	f009 fb7e 	bl	800aab8 <HAL_SAI_Init>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_SAI2_Init+0xba>
  {
    Error_Handler();
 80013c2:	f000 fd57 	bl	8001e74 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 80013c6:	4b2e      	ldr	r3, [pc, #184]	; (8001480 <MX_SAI2_Init+0x174>)
 80013c8:	4a2e      	ldr	r2, [pc, #184]	; (8001484 <MX_SAI2_Init+0x178>)
 80013ca:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 80013cc:	4b2c      	ldr	r3, [pc, #176]	; (8001480 <MX_SAI2_Init+0x174>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 80013d2:	4b2b      	ldr	r3, [pc, #172]	; (8001480 <MX_SAI2_Init+0x174>)
 80013d4:	2203      	movs	r2, #3
 80013d6:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 80013d8:	4b29      	ldr	r3, [pc, #164]	; (8001480 <MX_SAI2_Init+0x174>)
 80013da:	2240      	movs	r2, #64	; 0x40
 80013dc:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80013de:	4b28      	ldr	r3, [pc, #160]	; (8001480 <MX_SAI2_Init+0x174>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80013e4:	4b26      	ldr	r3, [pc, #152]	; (8001480 <MX_SAI2_Init+0x174>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 80013ea:	4b25      	ldr	r3, [pc, #148]	; (8001480 <MX_SAI2_Init+0x174>)
 80013ec:	2201      	movs	r2, #1
 80013ee:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80013f0:	4b23      	ldr	r3, [pc, #140]	; (8001480 <MX_SAI2_Init+0x174>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80013f6:	4b22      	ldr	r3, [pc, #136]	; (8001480 <MX_SAI2_Init+0x174>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80013fc:	4b20      	ldr	r3, [pc, #128]	; (8001480 <MX_SAI2_Init+0x174>)
 80013fe:	2200      	movs	r2, #0
 8001400:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001402:	4b1f      	ldr	r3, [pc, #124]	; (8001480 <MX_SAI2_Init+0x174>)
 8001404:	2200      	movs	r2, #0
 8001406:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001408:	4b1d      	ldr	r3, [pc, #116]	; (8001480 <MX_SAI2_Init+0x174>)
 800140a:	2200      	movs	r2, #0
 800140c:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800140e:	4b1c      	ldr	r3, [pc, #112]	; (8001480 <MX_SAI2_Init+0x174>)
 8001410:	2200      	movs	r2, #0
 8001412:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.PdmInit.Activation = DISABLE;
 8001414:	4b1a      	ldr	r3, [pc, #104]	; (8001480 <MX_SAI2_Init+0x174>)
 8001416:	2200      	movs	r2, #0
 8001418:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.PdmInit.MicPairsNbr = 1;
 800141c:	4b18      	ldr	r3, [pc, #96]	; (8001480 <MX_SAI2_Init+0x174>)
 800141e:	2201      	movs	r2, #1
 8001420:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8001422:	4b17      	ldr	r3, [pc, #92]	; (8001480 <MX_SAI2_Init+0x174>)
 8001424:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001428:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.FrameLength = 8;
 800142a:	4b15      	ldr	r3, [pc, #84]	; (8001480 <MX_SAI2_Init+0x174>)
 800142c:	2208      	movs	r2, #8
 800142e:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8001430:	4b13      	ldr	r3, [pc, #76]	; (8001480 <MX_SAI2_Init+0x174>)
 8001432:	2201      	movs	r2, #1
 8001434:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001436:	4b12      	ldr	r3, [pc, #72]	; (8001480 <MX_SAI2_Init+0x174>)
 8001438:	2200      	movs	r2, #0
 800143a:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800143c:	4b10      	ldr	r3, [pc, #64]	; (8001480 <MX_SAI2_Init+0x174>)
 800143e:	2200      	movs	r2, #0
 8001440:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001442:	4b0f      	ldr	r3, [pc, #60]	; (8001480 <MX_SAI2_Init+0x174>)
 8001444:	2200      	movs	r2, #0
 8001446:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001448:	4b0d      	ldr	r3, [pc, #52]	; (8001480 <MX_SAI2_Init+0x174>)
 800144a:	2200      	movs	r2, #0
 800144c:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800144e:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <MX_SAI2_Init+0x174>)
 8001450:	2200      	movs	r2, #0
 8001452:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8001454:	4b0a      	ldr	r3, [pc, #40]	; (8001480 <MX_SAI2_Init+0x174>)
 8001456:	2201      	movs	r2, #1
 8001458:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 800145a:	4b09      	ldr	r3, [pc, #36]	; (8001480 <MX_SAI2_Init+0x174>)
 800145c:	2200      	movs	r2, #0
 800145e:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001460:	4807      	ldr	r0, [pc, #28]	; (8001480 <MX_SAI2_Init+0x174>)
 8001462:	f009 fb29 	bl	800aab8 <HAL_SAI_Init>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_SAI2_Init+0x164>
  {
    Error_Handler();
 800146c:	f000 fd02 	bl	8001e74 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001470:	bf00      	nop
 8001472:	bd80      	pop	{r7, pc}
 8001474:	2400059c 	.word	0x2400059c
 8001478:	40015c04 	.word	0x40015c04
 800147c:	0002ee00 	.word	0x0002ee00
 8001480:	24000634 	.word	0x24000634
 8001484:	40015c24 	.word	0x40015c24

08001488 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800148c:	4b26      	ldr	r3, [pc, #152]	; (8001528 <MX_SPI2_Init+0xa0>)
 800148e:	4a27      	ldr	r2, [pc, #156]	; (800152c <MX_SPI2_Init+0xa4>)
 8001490:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001492:	4b25      	ldr	r3, [pc, #148]	; (8001528 <MX_SPI2_Init+0xa0>)
 8001494:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001498:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800149a:	4b23      	ldr	r3, [pc, #140]	; (8001528 <MX_SPI2_Init+0xa0>)
 800149c:	2200      	movs	r2, #0
 800149e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80014a0:	4b21      	ldr	r3, [pc, #132]	; (8001528 <MX_SPI2_Init+0xa0>)
 80014a2:	2203      	movs	r2, #3
 80014a4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014a6:	4b20      	ldr	r3, [pc, #128]	; (8001528 <MX_SPI2_Init+0xa0>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014ac:	4b1e      	ldr	r3, [pc, #120]	; (8001528 <MX_SPI2_Init+0xa0>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 80014b2:	4b1d      	ldr	r3, [pc, #116]	; (8001528 <MX_SPI2_Init+0xa0>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80014b8:	4b1b      	ldr	r3, [pc, #108]	; (8001528 <MX_SPI2_Init+0xa0>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014be:	4b1a      	ldr	r3, [pc, #104]	; (8001528 <MX_SPI2_Init+0xa0>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80014c4:	4b18      	ldr	r3, [pc, #96]	; (8001528 <MX_SPI2_Init+0xa0>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014ca:	4b17      	ldr	r3, [pc, #92]	; (8001528 <MX_SPI2_Init+0xa0>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80014d0:	4b15      	ldr	r3, [pc, #84]	; (8001528 <MX_SPI2_Init+0xa0>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80014d6:	4b14      	ldr	r3, [pc, #80]	; (8001528 <MX_SPI2_Init+0xa0>)
 80014d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014dc:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80014de:	4b12      	ldr	r3, [pc, #72]	; (8001528 <MX_SPI2_Init+0xa0>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80014e4:	4b10      	ldr	r3, [pc, #64]	; (8001528 <MX_SPI2_Init+0xa0>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80014ea:	4b0f      	ldr	r3, [pc, #60]	; (8001528 <MX_SPI2_Init+0xa0>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80014f0:	4b0d      	ldr	r3, [pc, #52]	; (8001528 <MX_SPI2_Init+0xa0>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80014f6:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <MX_SPI2_Init+0xa0>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80014fc:	4b0a      	ldr	r3, [pc, #40]	; (8001528 <MX_SPI2_Init+0xa0>)
 80014fe:	2200      	movs	r2, #0
 8001500:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001502:	4b09      	ldr	r3, [pc, #36]	; (8001528 <MX_SPI2_Init+0xa0>)
 8001504:	2200      	movs	r2, #0
 8001506:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001508:	4b07      	ldr	r3, [pc, #28]	; (8001528 <MX_SPI2_Init+0xa0>)
 800150a:	2200      	movs	r2, #0
 800150c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800150e:	4b06      	ldr	r3, [pc, #24]	; (8001528 <MX_SPI2_Init+0xa0>)
 8001510:	2200      	movs	r2, #0
 8001512:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001514:	4804      	ldr	r0, [pc, #16]	; (8001528 <MX_SPI2_Init+0xa0>)
 8001516:	f009 fdef 	bl	800b0f8 <HAL_SPI_Init>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_SPI2_Init+0x9c>
  {
    Error_Handler();
 8001520:	f000 fca8 	bl	8001e74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001524:	bf00      	nop
 8001526:	bd80      	pop	{r7, pc}
 8001528:	240006cc 	.word	0x240006cc
 800152c:	40003800 	.word	0x40003800

08001530 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b088      	sub	sp, #32
 8001534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001536:	f107 0310 	add.w	r3, r7, #16
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	605a      	str	r2, [r3, #4]
 8001540:	609a      	str	r2, [r3, #8]
 8001542:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001544:	1d3b      	adds	r3, r7, #4
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	605a      	str	r2, [r3, #4]
 800154c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800154e:	4b1f      	ldr	r3, [pc, #124]	; (80015cc <MX_TIM3_Init+0x9c>)
 8001550:	4a1f      	ldr	r2, [pc, #124]	; (80015d0 <MX_TIM3_Init+0xa0>)
 8001552:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 8001554:	4b1d      	ldr	r3, [pc, #116]	; (80015cc <MX_TIM3_Init+0x9c>)
 8001556:	223f      	movs	r2, #63	; 0x3f
 8001558:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800155a:	4b1c      	ldr	r3, [pc, #112]	; (80015cc <MX_TIM3_Init+0x9c>)
 800155c:	2200      	movs	r2, #0
 800155e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001560:	4b1a      	ldr	r3, [pc, #104]	; (80015cc <MX_TIM3_Init+0x9c>)
 8001562:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001566:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001568:	4b18      	ldr	r3, [pc, #96]	; (80015cc <MX_TIM3_Init+0x9c>)
 800156a:	2200      	movs	r2, #0
 800156c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800156e:	4b17      	ldr	r3, [pc, #92]	; (80015cc <MX_TIM3_Init+0x9c>)
 8001570:	2200      	movs	r2, #0
 8001572:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001574:	4815      	ldr	r0, [pc, #84]	; (80015cc <MX_TIM3_Init+0x9c>)
 8001576:	f009 fefe 	bl	800b376 <HAL_TIM_Base_Init>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001580:	f000 fc78 	bl	8001e74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001584:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001588:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800158a:	f107 0310 	add.w	r3, r7, #16
 800158e:	4619      	mov	r1, r3
 8001590:	480e      	ldr	r0, [pc, #56]	; (80015cc <MX_TIM3_Init+0x9c>)
 8001592:	f009 ffb7 	bl	800b504 <HAL_TIM_ConfigClockSource>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800159c:	f000 fc6a 	bl	8001e74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015a0:	2300      	movs	r3, #0
 80015a2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015a4:	2300      	movs	r3, #0
 80015a6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015a8:	1d3b      	adds	r3, r7, #4
 80015aa:	4619      	mov	r1, r3
 80015ac:	4807      	ldr	r0, [pc, #28]	; (80015cc <MX_TIM3_Init+0x9c>)
 80015ae:	f00a f9d9 	bl	800b964 <HAL_TIMEx_MasterConfigSynchronization>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80015b8:	f000 fc5c 	bl	8001e74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Base_Start(&htim3);
 80015bc:	4803      	ldr	r0, [pc, #12]	; (80015cc <MX_TIM3_Init+0x9c>)
 80015be:	f009 ff31 	bl	800b424 <HAL_TIM_Base_Start>

  /* USER CODE END TIM3_Init 2 */

}
 80015c2:	bf00      	nop
 80015c4:	3720      	adds	r7, #32
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	24000754 	.word	0x24000754
 80015d0:	40000400 	.word	0x40000400

080015d4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80015d8:	4b22      	ldr	r3, [pc, #136]	; (8001664 <MX_USART3_UART_Init+0x90>)
 80015da:	4a23      	ldr	r2, [pc, #140]	; (8001668 <MX_USART3_UART_Init+0x94>)
 80015dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80015de:	4b21      	ldr	r3, [pc, #132]	; (8001664 <MX_USART3_UART_Init+0x90>)
 80015e0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80015e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015e6:	4b1f      	ldr	r3, [pc, #124]	; (8001664 <MX_USART3_UART_Init+0x90>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015ec:	4b1d      	ldr	r3, [pc, #116]	; (8001664 <MX_USART3_UART_Init+0x90>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015f2:	4b1c      	ldr	r3, [pc, #112]	; (8001664 <MX_USART3_UART_Init+0x90>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015f8:	4b1a      	ldr	r3, [pc, #104]	; (8001664 <MX_USART3_UART_Init+0x90>)
 80015fa:	220c      	movs	r2, #12
 80015fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015fe:	4b19      	ldr	r3, [pc, #100]	; (8001664 <MX_USART3_UART_Init+0x90>)
 8001600:	2200      	movs	r2, #0
 8001602:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001604:	4b17      	ldr	r3, [pc, #92]	; (8001664 <MX_USART3_UART_Init+0x90>)
 8001606:	2200      	movs	r2, #0
 8001608:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800160a:	4b16      	ldr	r3, [pc, #88]	; (8001664 <MX_USART3_UART_Init+0x90>)
 800160c:	2200      	movs	r2, #0
 800160e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001610:	4b14      	ldr	r3, [pc, #80]	; (8001664 <MX_USART3_UART_Init+0x90>)
 8001612:	2200      	movs	r2, #0
 8001614:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001616:	4b13      	ldr	r3, [pc, #76]	; (8001664 <MX_USART3_UART_Init+0x90>)
 8001618:	2200      	movs	r2, #0
 800161a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800161c:	4811      	ldr	r0, [pc, #68]	; (8001664 <MX_USART3_UART_Init+0x90>)
 800161e:	f00a fa2f 	bl	800ba80 <HAL_UART_Init>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001628:	f000 fc24 	bl	8001e74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800162c:	2100      	movs	r1, #0
 800162e:	480d      	ldr	r0, [pc, #52]	; (8001664 <MX_USART3_UART_Init+0x90>)
 8001630:	f00c fd83 	bl	800e13a <HAL_UARTEx_SetTxFifoThreshold>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800163a:	f000 fc1b 	bl	8001e74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800163e:	2100      	movs	r1, #0
 8001640:	4808      	ldr	r0, [pc, #32]	; (8001664 <MX_USART3_UART_Init+0x90>)
 8001642:	f00c fdb8 	bl	800e1b6 <HAL_UARTEx_SetRxFifoThreshold>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800164c:	f000 fc12 	bl	8001e74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001650:	4804      	ldr	r0, [pc, #16]	; (8001664 <MX_USART3_UART_Init+0x90>)
 8001652:	f00c fd39 	bl	800e0c8 <HAL_UARTEx_DisableFifoMode>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800165c:	f000 fc0a 	bl	8001e74 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001660:	bf00      	nop
 8001662:	bd80      	pop	{r7, pc}
 8001664:	240007a0 	.word	0x240007a0
 8001668:	40004800 	.word	0x40004800

0800166c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001670:	4b15      	ldr	r3, [pc, #84]	; (80016c8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001672:	4a16      	ldr	r2, [pc, #88]	; (80016cc <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001674:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001676:	4b14      	ldr	r3, [pc, #80]	; (80016c8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001678:	2209      	movs	r2, #9
 800167a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800167c:	4b12      	ldr	r3, [pc, #72]	; (80016c8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800167e:	2202      	movs	r2, #2
 8001680:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001682:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001684:	2200      	movs	r2, #0
 8001686:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001688:	4b0f      	ldr	r3, [pc, #60]	; (80016c8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800168a:	2202      	movs	r2, #2
 800168c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800168e:	4b0e      	ldr	r3, [pc, #56]	; (80016c8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001690:	2200      	movs	r2, #0
 8001692:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001694:	4b0c      	ldr	r3, [pc, #48]	; (80016c8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001696:	2200      	movs	r2, #0
 8001698:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800169a:	4b0b      	ldr	r3, [pc, #44]	; (80016c8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800169c:	2200      	movs	r2, #0
 800169e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80016a0:	4b09      	ldr	r3, [pc, #36]	; (80016c8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80016a2:	2201      	movs	r2, #1
 80016a4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80016a6:	4b08      	ldr	r3, [pc, #32]	; (80016c8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80016a8:	2201      	movs	r2, #1
 80016aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80016ac:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80016b2:	4805      	ldr	r0, [pc, #20]	; (80016c8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80016b4:	f005 f868 	bl	8006788 <HAL_PCD_Init>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80016be:	f000 fbd9 	bl	8001e74 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	24000834 	.word	0x24000834
 80016cc:	40080000 	.word	0x40080000

080016d0 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b088      	sub	sp, #32
 80016d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80016d6:	1d3b      	adds	r3, r7, #4
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	605a      	str	r2, [r3, #4]
 80016de:	609a      	str	r2, [r3, #8]
 80016e0:	60da      	str	r2, [r3, #12]
 80016e2:	611a      	str	r2, [r3, #16]
 80016e4:	615a      	str	r2, [r3, #20]
 80016e6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80016e8:	4b1e      	ldr	r3, [pc, #120]	; (8001764 <MX_FMC_Init+0x94>)
 80016ea:	4a1f      	ldr	r2, [pc, #124]	; (8001768 <MX_FMC_Init+0x98>)
 80016ec:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80016ee:	4b1d      	ldr	r3, [pc, #116]	; (8001764 <MX_FMC_Init+0x94>)
 80016f0:	2201      	movs	r2, #1
 80016f2:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80016f4:	4b1b      	ldr	r3, [pc, #108]	; (8001764 <MX_FMC_Init+0x94>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80016fa:	4b1a      	ldr	r3, [pc, #104]	; (8001764 <MX_FMC_Init+0x94>)
 80016fc:	2204      	movs	r2, #4
 80016fe:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001700:	4b18      	ldr	r3, [pc, #96]	; (8001764 <MX_FMC_Init+0x94>)
 8001702:	2210      	movs	r2, #16
 8001704:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001706:	4b17      	ldr	r3, [pc, #92]	; (8001764 <MX_FMC_Init+0x94>)
 8001708:	2240      	movs	r2, #64	; 0x40
 800170a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 800170c:	4b15      	ldr	r3, [pc, #84]	; (8001764 <MX_FMC_Init+0x94>)
 800170e:	2280      	movs	r2, #128	; 0x80
 8001710:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001712:	4b14      	ldr	r3, [pc, #80]	; (8001764 <MX_FMC_Init+0x94>)
 8001714:	2200      	movs	r2, #0
 8001716:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8001718:	4b12      	ldr	r3, [pc, #72]	; (8001764 <MX_FMC_Init+0x94>)
 800171a:	2200      	movs	r2, #0
 800171c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800171e:	4b11      	ldr	r3, [pc, #68]	; (8001764 <MX_FMC_Init+0x94>)
 8001720:	2200      	movs	r2, #0
 8001722:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001724:	4b0f      	ldr	r3, [pc, #60]	; (8001764 <MX_FMC_Init+0x94>)
 8001726:	2200      	movs	r2, #0
 8001728:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 800172a:	2310      	movs	r3, #16
 800172c:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 800172e:	2310      	movs	r3, #16
 8001730:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8001732:	2310      	movs	r3, #16
 8001734:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8001736:	2310      	movs	r3, #16
 8001738:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 800173a:	2310      	movs	r3, #16
 800173c:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 800173e:	2310      	movs	r3, #16
 8001740:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8001742:	2310      	movs	r3, #16
 8001744:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001746:	1d3b      	adds	r3, r7, #4
 8001748:	4619      	mov	r1, r3
 800174a:	4806      	ldr	r0, [pc, #24]	; (8001764 <MX_FMC_Init+0x94>)
 800174c:	f009 fc98 	bl	800b080 <HAL_SDRAM_Init>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8001756:	f000 fb8d 	bl	8001e74 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800175a:	bf00      	nop
 800175c:	3720      	adds	r7, #32
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	24000d40 	.word	0x24000d40
 8001768:	52004140 	.word	0x52004140

0800176c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b090      	sub	sp, #64	; 0x40
 8001770:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001772:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	605a      	str	r2, [r3, #4]
 800177c:	609a      	str	r2, [r3, #8]
 800177e:	60da      	str	r2, [r3, #12]
 8001780:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001782:	4bc0      	ldr	r3, [pc, #768]	; (8001a84 <MX_GPIO_Init+0x318>)
 8001784:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001788:	4abe      	ldr	r2, [pc, #760]	; (8001a84 <MX_GPIO_Init+0x318>)
 800178a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800178e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001792:	4bbc      	ldr	r3, [pc, #752]	; (8001a84 <MX_GPIO_Init+0x318>)
 8001794:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800179c:	62bb      	str	r3, [r7, #40]	; 0x28
 800179e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a0:	4bb8      	ldr	r3, [pc, #736]	; (8001a84 <MX_GPIO_Init+0x318>)
 80017a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017a6:	4ab7      	ldr	r2, [pc, #732]	; (8001a84 <MX_GPIO_Init+0x318>)
 80017a8:	f043 0302 	orr.w	r3, r3, #2
 80017ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017b0:	4bb4      	ldr	r3, [pc, #720]	; (8001a84 <MX_GPIO_Init+0x318>)
 80017b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	627b      	str	r3, [r7, #36]	; 0x24
 80017bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80017be:	4bb1      	ldr	r3, [pc, #708]	; (8001a84 <MX_GPIO_Init+0x318>)
 80017c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017c4:	4aaf      	ldr	r2, [pc, #700]	; (8001a84 <MX_GPIO_Init+0x318>)
 80017c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017ce:	4bad      	ldr	r3, [pc, #692]	; (8001a84 <MX_GPIO_Init+0x318>)
 80017d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017d8:	623b      	str	r3, [r7, #32]
 80017da:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80017dc:	4ba9      	ldr	r3, [pc, #676]	; (8001a84 <MX_GPIO_Init+0x318>)
 80017de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017e2:	4aa8      	ldr	r2, [pc, #672]	; (8001a84 <MX_GPIO_Init+0x318>)
 80017e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017ec:	4ba5      	ldr	r3, [pc, #660]	; (8001a84 <MX_GPIO_Init+0x318>)
 80017ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017f6:	61fb      	str	r3, [r7, #28]
 80017f8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017fa:	4ba2      	ldr	r3, [pc, #648]	; (8001a84 <MX_GPIO_Init+0x318>)
 80017fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001800:	4aa0      	ldr	r2, [pc, #640]	; (8001a84 <MX_GPIO_Init+0x318>)
 8001802:	f043 0304 	orr.w	r3, r3, #4
 8001806:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800180a:	4b9e      	ldr	r3, [pc, #632]	; (8001a84 <MX_GPIO_Init+0x318>)
 800180c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001810:	f003 0304 	and.w	r3, r3, #4
 8001814:	61bb      	str	r3, [r7, #24]
 8001816:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001818:	4b9a      	ldr	r3, [pc, #616]	; (8001a84 <MX_GPIO_Init+0x318>)
 800181a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800181e:	4a99      	ldr	r2, [pc, #612]	; (8001a84 <MX_GPIO_Init+0x318>)
 8001820:	f043 0301 	orr.w	r3, r3, #1
 8001824:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001828:	4b96      	ldr	r3, [pc, #600]	; (8001a84 <MX_GPIO_Init+0x318>)
 800182a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	617b      	str	r3, [r7, #20]
 8001834:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001836:	4b93      	ldr	r3, [pc, #588]	; (8001a84 <MX_GPIO_Init+0x318>)
 8001838:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800183c:	4a91      	ldr	r2, [pc, #580]	; (8001a84 <MX_GPIO_Init+0x318>)
 800183e:	f043 0310 	orr.w	r3, r3, #16
 8001842:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001846:	4b8f      	ldr	r3, [pc, #572]	; (8001a84 <MX_GPIO_Init+0x318>)
 8001848:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800184c:	f003 0310 	and.w	r3, r3, #16
 8001850:	613b      	str	r3, [r7, #16]
 8001852:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001854:	4b8b      	ldr	r3, [pc, #556]	; (8001a84 <MX_GPIO_Init+0x318>)
 8001856:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800185a:	4a8a      	ldr	r2, [pc, #552]	; (8001a84 <MX_GPIO_Init+0x318>)
 800185c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001860:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001864:	4b87      	ldr	r3, [pc, #540]	; (8001a84 <MX_GPIO_Init+0x318>)
 8001866:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800186a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001872:	4b84      	ldr	r3, [pc, #528]	; (8001a84 <MX_GPIO_Init+0x318>)
 8001874:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001878:	4a82      	ldr	r2, [pc, #520]	; (8001a84 <MX_GPIO_Init+0x318>)
 800187a:	f043 0308 	orr.w	r3, r3, #8
 800187e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001882:	4b80      	ldr	r3, [pc, #512]	; (8001a84 <MX_GPIO_Init+0x318>)
 8001884:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001888:	f003 0308 	and.w	r3, r3, #8
 800188c:	60bb      	str	r3, [r7, #8]
 800188e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001890:	4b7c      	ldr	r3, [pc, #496]	; (8001a84 <MX_GPIO_Init+0x318>)
 8001892:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001896:	4a7b      	ldr	r2, [pc, #492]	; (8001a84 <MX_GPIO_Init+0x318>)
 8001898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800189c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018a0:	4b78      	ldr	r3, [pc, #480]	; (8001a84 <MX_GPIO_Init+0x318>)
 80018a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018aa:	607b      	str	r3, [r7, #4]
 80018ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018ae:	4b75      	ldr	r3, [pc, #468]	; (8001a84 <MX_GPIO_Init+0x318>)
 80018b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018b4:	4a73      	ldr	r2, [pc, #460]	; (8001a84 <MX_GPIO_Init+0x318>)
 80018b6:	f043 0320 	orr.w	r3, r3, #32
 80018ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018be:	4b71      	ldr	r3, [pc, #452]	; (8001a84 <MX_GPIO_Init+0x318>)
 80018c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018c4:	f003 0320 	and.w	r3, r3, #32
 80018c8:	603b      	str	r3, [r7, #0]
 80018ca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7|MII_TX_ER_nINT_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 80018cc:	2200      	movs	r2, #0
 80018ce:	f241 01c4 	movw	r1, #4292	; 0x10c4
 80018d2:	486d      	ldr	r0, [pc, #436]	; (8001a88 <MX_GPIO_Init+0x31c>)
 80018d4:	f004 fc96 	bl	8006204 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_6, GPIO_PIN_RESET);
 80018d8:	2200      	movs	r2, #0
 80018da:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80018de:	486b      	ldr	r0, [pc, #428]	; (8001a8c <MX_GPIO_Init+0x320>)
 80018e0:	f004 fc90 	bl	8006204 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80018e4:	2200      	movs	r2, #0
 80018e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018ea:	4869      	ldr	r0, [pc, #420]	; (8001a90 <MX_GPIO_Init+0x324>)
 80018ec:	f004 fc8a 	bl	8006204 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, GPIO_PIN_RESET);
 80018f0:	2200      	movs	r2, #0
 80018f2:	2108      	movs	r1, #8
 80018f4:	4867      	ldr	r0, [pc, #412]	; (8001a94 <MX_GPIO_Init+0x328>)
 80018f6:	f004 fc85 	bl	8006204 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_1, GPIO_PIN_RESET);
 80018fa:	2200      	movs	r2, #0
 80018fc:	2102      	movs	r1, #2
 80018fe:	4866      	ldr	r0, [pc, #408]	; (8001a98 <MX_GPIO_Init+0x32c>)
 8001900:	f004 fc80 	bl	8006204 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8001904:	2200      	movs	r2, #0
 8001906:	2104      	movs	r1, #4
 8001908:	4864      	ldr	r0, [pc, #400]	; (8001a9c <MX_GPIO_Init+0x330>)
 800190a:	f004 fc7b 	bl	8006204 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB6 PB7 MII_TX_ER_nINT_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|MII_TX_ER_nINT_Pin|LCD_RST_Pin;
 800190e:	f241 03c4 	movw	r3, #4292	; 0x10c4
 8001912:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001914:	2301      	movs	r3, #1
 8001916:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001918:	2300      	movs	r3, #0
 800191a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191c:	2300      	movs	r3, #0
 800191e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001920:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001924:	4619      	mov	r1, r3
 8001926:	4858      	ldr	r0, [pc, #352]	; (8001a88 <MX_GPIO_Init+0x31c>)
 8001928:	f004 fabc 	bl	8005ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800192c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001930:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001932:	2302      	movs	r3, #2
 8001934:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001936:	2300      	movs	r3, #0
 8001938:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193a:	2300      	movs	r3, #0
 800193c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800193e:	2303      	movs	r3, #3
 8001940:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001942:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001946:	4619      	mov	r1, r3
 8001948:	4855      	ldr	r0, [pc, #340]	; (8001aa0 <MX_GPIO_Init+0x334>)
 800194a:	f004 faab 	bl	8005ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISPD7_Pin */
  GPIO_InitStruct.Pin = LCD_DISPD7_Pin;
 800194e:	2380      	movs	r3, #128	; 0x80
 8001950:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001952:	2300      	movs	r3, #0
 8001954:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001956:	2300      	movs	r3, #0
 8001958:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_DISPD7_GPIO_Port, &GPIO_InitStruct);
 800195a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800195e:	4619      	mov	r1, r3
 8001960:	4850      	ldr	r0, [pc, #320]	; (8001aa4 <MX_GPIO_Init+0x338>)
 8001962:	f004 fa9f 	bl	8005ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE5 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 8001966:	2330      	movs	r3, #48	; 0x30
 8001968:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196a:	2302      	movs	r3, #2
 800196c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196e:	2300      	movs	r3, #0
 8001970:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001972:	2300      	movs	r3, #0
 8001974:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8001976:	230a      	movs	r3, #10
 8001978:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800197a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800197e:	4619      	mov	r1, r3
 8001980:	4849      	ldr	r0, [pc, #292]	; (8001aa8 <MX_GPIO_Init+0x33c>)
 8001982:	f004 fa8f 	bl	8005ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS2_ID_Pin OTG_FS2_PSO_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS2_ID_Pin|OTG_FS2_PSO_Pin;
 8001986:	f44f 6384 	mov.w	r3, #1056	; 0x420
 800198a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800198c:	2300      	movs	r3, #0
 800198e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001990:	2300      	movs	r3, #0
 8001992:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001994:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001998:	4619      	mov	r1, r3
 800199a:	483c      	ldr	r0, [pc, #240]	; (8001a8c <MX_GPIO_Init+0x320>)
 800199c:	f004 fa82 	bl	8005ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80019a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019a6:	2300      	movs	r3, #0
 80019a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019aa:	2300      	movs	r3, #0
 80019ac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80019ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019b2:	4619      	mov	r1, r3
 80019b4:	483d      	ldr	r0, [pc, #244]	; (8001aac <MX_GPIO_Init+0x340>)
 80019b6:	f004 fa75 	bl	8005ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_6;
 80019ba:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80019be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c0:	2301      	movs	r3, #1
 80019c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c8:	2300      	movs	r3, #0
 80019ca:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019d0:	4619      	mov	r1, r3
 80019d2:	482e      	ldr	r0, [pc, #184]	; (8001a8c <MX_GPIO_Init+0x320>)
 80019d4:	f004 fa66 	bl	8005ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : audio_Int_Pin */
  GPIO_InitStruct.Pin = audio_Int_Pin;
 80019d8:	2380      	movs	r3, #128	; 0x80
 80019da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019dc:	2302      	movs	r3, #2
 80019de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e4:	2300      	movs	r3, #0
 80019e6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80019e8:	2306      	movs	r3, #6
 80019ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(audio_Int_GPIO_Port, &GPIO_InitStruct);
 80019ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019f0:	4619      	mov	r1, r3
 80019f2:	4828      	ldr	r0, [pc, #160]	; (8001a94 <MX_GPIO_Init+0x328>)
 80019f4:	f004 fa56 	bl	8005ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80019f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019fe:	2301      	movs	r3, #1
 8001a00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a06:	2300      	movs	r3, #0
 8001a08:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001a0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a0e:	4619      	mov	r1, r3
 8001a10:	481f      	ldr	r0, [pc, #124]	; (8001a90 <MX_GPIO_Init+0x324>)
 8001a12:	f004 fa47 	bl	8005ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a16:	2308      	movs	r3, #8
 8001a18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a22:	2300      	movs	r3, #0
 8001a24:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4819      	ldr	r0, [pc, #100]	; (8001a94 <MX_GPIO_Init+0x328>)
 8001a2e:	f004 fa39 	bl	8005ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001a32:	2304      	movs	r3, #4
 8001a34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a36:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001a40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a44:	4619      	mov	r1, r3
 8001a46:	4813      	ldr	r0, [pc, #76]	; (8001a94 <MX_GPIO_Init+0x328>)
 8001a48:	f004 fa2c 	bl	8005ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a50:	2300      	movs	r3, #0
 8001a52:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a54:	2300      	movs	r3, #0
 8001a56:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8001a58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	480e      	ldr	r0, [pc, #56]	; (8001a98 <MX_GPIO_Init+0x32c>)
 8001a60:	f004 fa20 	bl	8005ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PK1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001a64:	2302      	movs	r3, #2
 8001a66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a70:	2300      	movs	r3, #0
 8001a72:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001a74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4807      	ldr	r0, [pc, #28]	; (8001a98 <MX_GPIO_Init+0x32c>)
 8001a7c:	f004 fa12 	bl	8005ea4 <HAL_GPIO_Init>
 8001a80:	e016      	b.n	8001ab0 <MX_GPIO_Init+0x344>
 8001a82:	bf00      	nop
 8001a84:	58024400 	.word	0x58024400
 8001a88:	58020400 	.word	0x58020400
 8001a8c:	58020000 	.word	0x58020000
 8001a90:	58022000 	.word	0x58022000
 8001a94:	58021800 	.word	0x58021800
 8001a98:	58022800 	.word	0x58022800
 8001a9c:	58022400 	.word	0x58022400
 8001aa0:	58021c00 	.word	0x58021c00
 8001aa4:	58020c00 	.word	0x58020c00
 8001aa8:	58021000 	.word	0x58021000
 8001aac:	58020800 	.word	0x58020800

  /*Configure GPIO pins : PF6 PF7 PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8001ab0:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aba:	2300      	movs	r3, #0
 8001abc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001ac2:	2309      	movs	r3, #9
 8001ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ac6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aca:	4619      	mov	r1, r3
 8001acc:	4822      	ldr	r0, [pc, #136]	; (8001b58 <MX_GPIO_Init+0x3ec>)
 8001ace:	f004 f9e9 	bl	8005ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ad2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad8:	2302      	movs	r3, #2
 8001ada:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001adc:	2300      	movs	r3, #0
 8001ade:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001ae4:	230a      	movs	r3, #10
 8001ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ae8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aec:	4619      	mov	r1, r3
 8001aee:	481a      	ldr	r0, [pc, #104]	; (8001b58 <MX_GPIO_Init+0x3ec>)
 8001af0:	f004 f9d8 	bl	8005ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS2_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS2_OverCurrent_Pin;
 8001af4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001af8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001afa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001afe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b00:	2300      	movs	r3, #0
 8001b02:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS2_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001b04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4814      	ldr	r0, [pc, #80]	; (8001b5c <MX_GPIO_Init+0x3f0>)
 8001b0c:	f004 f9ca 	bl	8005ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001b10:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b16:	2302      	movs	r3, #2
 8001b18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001b22:	2309      	movs	r3, #9
 8001b24:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	480c      	ldr	r0, [pc, #48]	; (8001b60 <MX_GPIO_Init+0x3f4>)
 8001b2e:	f004 f9b9 	bl	8005ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8001b32:	2304      	movs	r3, #4
 8001b34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b36:	2301      	movs	r3, #1
 8001b38:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8001b42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b46:	4619      	mov	r1, r3
 8001b48:	4806      	ldr	r0, [pc, #24]	; (8001b64 <MX_GPIO_Init+0x3f8>)
 8001b4a:	f004 f9ab 	bl	8005ea4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b4e:	bf00      	nop
 8001b50:	3740      	adds	r7, #64	; 0x40
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	58021400 	.word	0x58021400
 8001b5c:	58021c00 	.word	0x58021c00
 8001b60:	58020c00 	.word	0x58020c00
 8001b64:	58022400 	.word	0x58022400

08001b68 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]

	if (huart == &huart3) {
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	4a07      	ldr	r2, [pc, #28]	; (8001b90 <HAL_UART_RxCpltCallback+0x28>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d105      	bne.n	8001b84 <HAL_UART_RxCpltCallback+0x1c>
		haveReceived = true;
 8001b78:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <HAL_UART_RxCpltCallback+0x2c>)
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	701a      	strb	r2, [r3, #0]
		receiverActive = false;
 8001b7e:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <HAL_UART_RxCpltCallback+0x30>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	701a      	strb	r2, [r3, #0]
	}

}
 8001b84:	bf00      	nop
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	240007a0 	.word	0x240007a0
 8001b94:	24000d74 	.word	0x24000d74
 8001b98:	24000d75 	.word	0x24000d75

08001b9c <printWelcomeText>:

bool printWelcomeText(void) {
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0

	for (int i = 0; i<WELCOME_STRINGS; i++) {
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	607b      	str	r3, [r7, #4]
 8001ba6:	e011      	b.n	8001bcc <printWelcomeText+0x30>
		if (!printString(welcomeStrings[i])) {
 8001ba8:	4a0c      	ldr	r2, [pc, #48]	; (8001bdc <printWelcomeText+0x40>)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f000 f815 	bl	8001be0 <printString>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	f083 0301 	eor.w	r3, r3, #1
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <printWelcomeText+0x2a>
			return false;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	e006      	b.n	8001bd4 <printWelcomeText+0x38>
	for (int i = 0; i<WELCOME_STRINGS; i++) {
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	3301      	adds	r3, #1
 8001bca:	607b      	str	r3, [r7, #4]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2b08      	cmp	r3, #8
 8001bd0:	ddea      	ble.n	8001ba8 <printWelcomeText+0xc>
		}
	}
	return true;
 8001bd2:	2301      	movs	r3, #1

}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3708      	adds	r7, #8
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	24000000 	.word	0x24000000

08001be0 <printString>:

bool printString(char *string) {
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]

	if (HAL_UART_Transmit(&huart3, (const uint8_t *) string, strlen(string), 6000) != HAL_OK) {
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f7fe fb79 	bl	80002e0 <strlen>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	b29a      	uxth	r2, r3
 8001bf2:	f241 7370 	movw	r3, #6000	; 0x1770
 8001bf6:	6879      	ldr	r1, [r7, #4]
 8001bf8:	4806      	ldr	r0, [pc, #24]	; (8001c14 <printString+0x34>)
 8001bfa:	f009 ff91 	bl	800bb20 <HAL_UART_Transmit>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <printString+0x28>
		return false;
 8001c04:	2300      	movs	r3, #0
 8001c06:	e000      	b.n	8001c0a <printString+0x2a>
	}
	return true;
 8001c08:	2301      	movs	r3, #1

}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	240007a0 	.word	0x240007a0

08001c18 <receiveValue>:

bool receiveValue(int bytesToReceive) {
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]

	if (HAL_UART_Receive_IT(&huart3, rxBuffer, bytesToReceive) != HAL_OK) {
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	461a      	mov	r2, r3
 8001c26:	4908      	ldr	r1, [pc, #32]	; (8001c48 <receiveValue+0x30>)
 8001c28:	4808      	ldr	r0, [pc, #32]	; (8001c4c <receiveValue+0x34>)
 8001c2a:	f00a f807 	bl	800bc3c <HAL_UART_Receive_IT>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <receiveValue+0x20>
		return false;
 8001c34:	2300      	movs	r3, #0
 8001c36:	e003      	b.n	8001c40 <receiveValue+0x28>
	}
	receiverActive = true;
 8001c38:	4b05      	ldr	r3, [pc, #20]	; (8001c50 <receiveValue+0x38>)
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	701a      	strb	r2, [r3, #0]
	return true;
 8001c3e:	2301      	movs	r3, #1

}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	24000d78 	.word	0x24000d78
 8001c4c:	240007a0 	.word	0x240007a0
 8001c50:	24000d75 	.word	0x24000d75

08001c54 <typeToLCD>:

void typeToLCD(void) {
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0

	int index = 0;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	607b      	str	r3, [r7, #4]
	if (printString(inputPrompt)) {
 8001c5e:	4b1f      	ldr	r3, [pc, #124]	; (8001cdc <typeToLCD+0x88>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff ffbc 	bl	8001be0 <printString>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d033      	beq.n	8001cd6 <typeToLCD+0x82>
		LCD_Clear();
 8001c6e:	f7fe fe00 	bl	8000872 <LCD_Clear>
		HAL_Delay(100);
 8001c72:	2064      	movs	r0, #100	; 0x64
 8001c74:	f001 fa32 	bl	80030dc <HAL_Delay>
		while (1) {
			if (haveReceived && printString(rxBuffer)) {
 8001c78:	4b19      	ldr	r3, [pc, #100]	; (8001ce0 <typeToLCD+0x8c>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d017      	beq.n	8001cb0 <typeToLCD+0x5c>
 8001c80:	4818      	ldr	r0, [pc, #96]	; (8001ce4 <typeToLCD+0x90>)
 8001c82:	f7ff ffad 	bl	8001be0 <printString>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d011      	beq.n	8001cb0 <typeToLCD+0x5c>
				LCD_Write_Char(rxBuffer[0]);
 8001c8c:	4b15      	ldr	r3, [pc, #84]	; (8001ce4 <typeToLCD+0x90>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7fe fdb8 	bl	8000806 <LCD_Write_Char>
				// LCD_Pos_Cursor(col > 2 ? (0, 1) : 0, ++col);
				haveReceived = false;
 8001c96:	4b12      	ldr	r3, [pc, #72]	; (8001ce0 <typeToLCD+0x8c>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	701a      	strb	r2, [r3, #0]
				if (index == 15) {
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2b0f      	cmp	r3, #15
 8001ca0:	d103      	bne.n	8001caa <typeToLCD+0x56>
					LCD_Pos_Cursor(1, 0);
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	2001      	movs	r0, #1
 8001ca6:	f7fe fdbf 	bl	8000828 <LCD_Pos_Cursor>
				}
				index++;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	3301      	adds	r3, #1
 8001cae:	607b      	str	r3, [r7, #4]
			}
			if (index >= 32) {
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2b1f      	cmp	r3, #31
 8001cb4:	dc0e      	bgt.n	8001cd4 <typeToLCD+0x80>
				return;
			}
			if (!receiverActive) {
 8001cb6:	4b0c      	ldr	r3, [pc, #48]	; (8001ce8 <typeToLCD+0x94>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	f083 0301 	eor.w	r3, r3, #1
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d002      	beq.n	8001cca <typeToLCD+0x76>
				receiveValue(1);
 8001cc4:	2001      	movs	r0, #1
 8001cc6:	f7ff ffa7 	bl	8001c18 <receiveValue>
			}
			HAL_Delay(700);
 8001cca:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8001cce:	f001 fa05 	bl	80030dc <HAL_Delay>
			if (haveReceived && printString(rxBuffer)) {
 8001cd2:	e7d1      	b.n	8001c78 <typeToLCD+0x24>
				return;
 8001cd4:	bf00      	nop
		}

	}

}
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	24000024 	.word	0x24000024
 8001ce0:	24000d74 	.word	0x24000d74
 8001ce4:	24000d78 	.word	0x24000d78
 8001ce8:	24000d75 	.word	0x24000d75

08001cec <moveTextLCD>:


void moveTextLCD(void) {
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0

	LCD_Clear();
 8001cf2:	f7fe fdbe 	bl	8000872 <LCD_Clear>
	strcpy(rxBuffer, "Hello");
 8001cf6:	4b2e      	ldr	r3, [pc, #184]	; (8001db0 <moveTextLCD+0xc4>)
 8001cf8:	4a2e      	ldr	r2, [pc, #184]	; (8001db4 <moveTextLCD+0xc8>)
 8001cfa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001cfe:	6018      	str	r0, [r3, #0]
 8001d00:	3304      	adds	r3, #4
 8001d02:	8019      	strh	r1, [r3, #0]
	HAL_Delay(1000);
 8001d04:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d08:	f001 f9e8 	bl	80030dc <HAL_Delay>
	LCD_Write(rxBuffer);
 8001d0c:	4828      	ldr	r0, [pc, #160]	; (8001db0 <moveTextLCD+0xc4>)
 8001d0e:	f7fe fd61 	bl	80007d4 <LCD_Write>
	int i = 0, stringLength = strlen(rxBuffer);
 8001d12:	2300      	movs	r3, #0
 8001d14:	60fb      	str	r3, [r7, #12]
 8001d16:	4826      	ldr	r0, [pc, #152]	; (8001db0 <moveTextLCD+0xc4>)
 8001d18:	f7fe fae2 	bl	80002e0 <strlen>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	607b      	str	r3, [r7, #4]
	bool edge = false;
 8001d20:	2300      	movs	r3, #0
 8001d22:	72fb      	strb	r3, [r7, #11]
	if (receiveValue(1)) {
 8001d24:	2001      	movs	r0, #1
 8001d26:	f7ff ff77 	bl	8001c18 <receiveValue>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d03a      	beq.n	8001da6 <moveTextLCD+0xba>
		if (printString(quitPrompt)) {
 8001d30:	4b21      	ldr	r3, [pc, #132]	; (8001db8 <moveTextLCD+0xcc>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff ff53 	bl	8001be0 <printString>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d032      	beq.n	8001da6 <moveTextLCD+0xba>
			while (!haveReceived) {
 8001d40:	e02a      	b.n	8001d98 <moveTextLCD+0xac>
				if (i < (16 - stringLength) && !edge) {
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f1c3 0310 	rsb	r3, r3, #16
 8001d48:	68fa      	ldr	r2, [r7, #12]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	da13      	bge.n	8001d76 <moveTextLCD+0x8a>
 8001d4e:	7afb      	ldrb	r3, [r7, #11]
 8001d50:	f083 0301 	eor.w	r3, r3, #1
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d00d      	beq.n	8001d76 <moveTextLCD+0x8a>
					LCD_Scroll_Display_Right();
 8001d5a:	f7fe fd91 	bl	8000880 <LCD_Scroll_Display_Right>
					i++;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	3301      	adds	r3, #1
 8001d62:	60fb      	str	r3, [r7, #12]
					if (i == (16 - stringLength)) {
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f1c3 0310 	rsb	r3, r3, #16
 8001d6a:	68fa      	ldr	r2, [r7, #12]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d10f      	bne.n	8001d90 <moveTextLCD+0xa4>
						edge = true;
 8001d70:	2301      	movs	r3, #1
 8001d72:	72fb      	strb	r3, [r7, #11]
					if (i == (16 - stringLength)) {
 8001d74:	e00c      	b.n	8001d90 <moveTextLCD+0xa4>
					}
				} else if (edge) {
 8001d76:	7afb      	ldrb	r3, [r7, #11]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d009      	beq.n	8001d90 <moveTextLCD+0xa4>
					LCD_Scroll_Display_Left();
 8001d7c:	f7fe fd87 	bl	800088e <LCD_Scroll_Display_Left>
					i--;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	3b01      	subs	r3, #1
 8001d84:	60fb      	str	r3, [r7, #12]
					if (i == 0) {
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d101      	bne.n	8001d90 <moveTextLCD+0xa4>
						edge = false;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	72fb      	strb	r3, [r7, #11]
					}
				}
				HAL_Delay(1000);
 8001d90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d94:	f001 f9a2 	bl	80030dc <HAL_Delay>
			while (!haveReceived) {
 8001d98:	4b08      	ldr	r3, [pc, #32]	; (8001dbc <moveTextLCD+0xd0>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	f083 0301 	eor.w	r3, r3, #1
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d1cd      	bne.n	8001d42 <moveTextLCD+0x56>
			}
		}
	}

}
 8001da6:	bf00      	nop
 8001da8:	3710      	adds	r7, #16
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	24000d78 	.word	0x24000d78
 8001db4:	0800f4bc 	.word	0x0800f4bc
 8001db8:	24000028 	.word	0x24000028
 8001dbc:	24000d74 	.word	0x24000d74

08001dc0 <displayClock>:

void displayClock(void) {
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b086      	sub	sp, #24
 8001dc4:	af02      	add	r7, sp, #8

	uint8_t seconds, minutes, hours;
	char timeString[9];

	if (receiveValue(1)) {
 8001dc6:	2001      	movs	r0, #1
 8001dc8:	f7ff ff26 	bl	8001c18 <receiveValue>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d03f      	beq.n	8001e52 <displayClock+0x92>
		if (printString(quitPrompt)) {
 8001dd2:	4b22      	ldr	r3, [pc, #136]	; (8001e5c <displayClock+0x9c>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7ff ff02 	bl	8001be0 <printString>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d037      	beq.n	8001e52 <displayClock+0x92>
			LCD_Clear();
 8001de2:	f7fe fd46 	bl	8000872 <LCD_Clear>
			while (!haveReceived) {
 8001de6:	e02d      	b.n	8001e44 <displayClock+0x84>
				HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001de8:	2200      	movs	r2, #0
 8001dea:	491d      	ldr	r1, [pc, #116]	; (8001e60 <displayClock+0xa0>)
 8001dec:	481d      	ldr	r0, [pc, #116]	; (8001e64 <displayClock+0xa4>)
 8001dee:	f008 fc61 	bl	800a6b4 <HAL_RTC_GetTime>
				seconds = sTime.Seconds;
 8001df2:	4b1b      	ldr	r3, [pc, #108]	; (8001e60 <displayClock+0xa0>)
 8001df4:	789b      	ldrb	r3, [r3, #2]
 8001df6:	73fb      	strb	r3, [r7, #15]
				minutes = sTime.Minutes;
 8001df8:	4b19      	ldr	r3, [pc, #100]	; (8001e60 <displayClock+0xa0>)
 8001dfa:	785b      	ldrb	r3, [r3, #1]
 8001dfc:	73bb      	strb	r3, [r7, #14]
				hours = sTime.Hours;
 8001dfe:	4b18      	ldr	r3, [pc, #96]	; (8001e60 <displayClock+0xa0>)
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	737b      	strb	r3, [r7, #13]
				HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001e04:	2200      	movs	r2, #0
 8001e06:	4918      	ldr	r1, [pc, #96]	; (8001e68 <displayClock+0xa8>)
 8001e08:	4816      	ldr	r0, [pc, #88]	; (8001e64 <displayClock+0xa4>)
 8001e0a:	f008 fd37 	bl	800a87c <HAL_RTC_GetDate>
				sprintf(timeString, "%02u:%02u:%02u", hours, minutes, seconds);
 8001e0e:	7b7a      	ldrb	r2, [r7, #13]
 8001e10:	7bb9      	ldrb	r1, [r7, #14]
 8001e12:	7bfb      	ldrb	r3, [r7, #15]
 8001e14:	1d38      	adds	r0, r7, #4
 8001e16:	9300      	str	r3, [sp, #0]
 8001e18:	460b      	mov	r3, r1
 8001e1a:	4914      	ldr	r1, [pc, #80]	; (8001e6c <displayClock+0xac>)
 8001e1c:	f00c fe68 	bl	800eaf0 <siprintf>

				HAL_Delay(100);
 8001e20:	2064      	movs	r0, #100	; 0x64
 8001e22:	f001 f95b 	bl	80030dc <HAL_Delay>
				LCD_Pos_Cursor(0, 0);
 8001e26:	2100      	movs	r1, #0
 8001e28:	2000      	movs	r0, #0
 8001e2a:	f7fe fcfd 	bl	8000828 <LCD_Pos_Cursor>
				HAL_Delay(100);
 8001e2e:	2064      	movs	r0, #100	; 0x64
 8001e30:	f001 f954 	bl	80030dc <HAL_Delay>
				LCD_Write(timeString);
 8001e34:	1d3b      	adds	r3, r7, #4
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7fe fccc 	bl	80007d4 <LCD_Write>
				HAL_Delay(800);
 8001e3c:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001e40:	f001 f94c 	bl	80030dc <HAL_Delay>
			while (!haveReceived) {
 8001e44:	4b0a      	ldr	r3, [pc, #40]	; (8001e70 <displayClock+0xb0>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	f083 0301 	eor.w	r3, r3, #1
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d1ca      	bne.n	8001de8 <displayClock+0x28>
			}
		}
	}

}
 8001e52:	bf00      	nop
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	24000028 	.word	0x24000028
 8001e60:	24000d98 	.word	0x24000d98
 8001e64:	24000578 	.word	0x24000578
 8001e68:	24000dac 	.word	0x24000dac
 8001e6c:	0800f4c4 	.word	0x0800f4c4
 8001e70:	24000d74 	.word	0x24000d74

08001e74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e78:	b672      	cpsid	i
}
 8001e7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e7c:	e7fe      	b.n	8001e7c <Error_Handler+0x8>
	...

08001e80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e86:	4b0a      	ldr	r3, [pc, #40]	; (8001eb0 <HAL_MspInit+0x30>)
 8001e88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e8c:	4a08      	ldr	r2, [pc, #32]	; (8001eb0 <HAL_MspInit+0x30>)
 8001e8e:	f043 0302 	orr.w	r3, r3, #2
 8001e92:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001e96:	4b06      	ldr	r3, [pc, #24]	; (8001eb0 <HAL_MspInit+0x30>)
 8001e98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	607b      	str	r3, [r7, #4]
 8001ea2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ea4:	bf00      	nop
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr
 8001eb0:	58024400 	.word	0x58024400

08001eb4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b090      	sub	sp, #64	; 0x40
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ebc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	605a      	str	r2, [r3, #4]
 8001ec6:	609a      	str	r2, [r3, #8]
 8001ec8:	60da      	str	r2, [r3, #12]
 8001eca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a72      	ldr	r2, [pc, #456]	; (800209c <HAL_ADC_MspInit+0x1e8>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d14e      	bne.n	8001f74 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001ed6:	4b72      	ldr	r3, [pc, #456]	; (80020a0 <HAL_ADC_MspInit+0x1ec>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	3301      	adds	r3, #1
 8001edc:	4a70      	ldr	r2, [pc, #448]	; (80020a0 <HAL_ADC_MspInit+0x1ec>)
 8001ede:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001ee0:	4b6f      	ldr	r3, [pc, #444]	; (80020a0 <HAL_ADC_MspInit+0x1ec>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d10e      	bne.n	8001f06 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001ee8:	4b6e      	ldr	r3, [pc, #440]	; (80020a4 <HAL_ADC_MspInit+0x1f0>)
 8001eea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001eee:	4a6d      	ldr	r2, [pc, #436]	; (80020a4 <HAL_ADC_MspInit+0x1f0>)
 8001ef0:	f043 0320 	orr.w	r3, r3, #32
 8001ef4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001ef8:	4b6a      	ldr	r3, [pc, #424]	; (80020a4 <HAL_ADC_MspInit+0x1f0>)
 8001efa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001efe:	f003 0320 	and.w	r3, r3, #32
 8001f02:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f06:	4b67      	ldr	r3, [pc, #412]	; (80020a4 <HAL_ADC_MspInit+0x1f0>)
 8001f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f0c:	4a65      	ldr	r2, [pc, #404]	; (80020a4 <HAL_ADC_MspInit+0x1f0>)
 8001f0e:	f043 0304 	orr.w	r3, r3, #4
 8001f12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f16:	4b63      	ldr	r3, [pc, #396]	; (80020a4 <HAL_ADC_MspInit+0x1f0>)
 8001f18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f1c:	f003 0304 	and.w	r3, r3, #4
 8001f20:	627b      	str	r3, [r7, #36]	; 0x24
 8001f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f24:	4b5f      	ldr	r3, [pc, #380]	; (80020a4 <HAL_ADC_MspInit+0x1f0>)
 8001f26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f2a:	4a5e      	ldr	r2, [pc, #376]	; (80020a4 <HAL_ADC_MspInit+0x1f0>)
 8001f2c:	f043 0301 	orr.w	r3, r3, #1
 8001f30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f34:	4b5b      	ldr	r3, [pc, #364]	; (80020a4 <HAL_ADC_MspInit+0x1f0>)
 8001f36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	623b      	str	r3, [r7, #32]
 8001f40:	6a3b      	ldr	r3, [r7, #32]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    PA0_C     ------> ADC1_INP0
    PA1_C     ------> ADC1_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f42:	2301      	movs	r3, #1
 8001f44:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f46:	2303      	movs	r3, #3
 8001f48:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f52:	4619      	mov	r1, r3
 8001f54:	4854      	ldr	r0, [pc, #336]	; (80020a8 <HAL_ADC_MspInit+0x1f4>)
 8001f56:	f003 ffa5 	bl	8005ea4 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8001f5a:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8001f5e:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8001f62:	f001 f8ff 	bl	8003164 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8001f66:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001f6a:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8001f6e:	f001 f8f9 	bl	8003164 <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001f72:	e08f      	b.n	8002094 <HAL_ADC_MspInit+0x1e0>
  else if(hadc->Instance==ADC2)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a4c      	ldr	r2, [pc, #304]	; (80020ac <HAL_ADC_MspInit+0x1f8>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d133      	bne.n	8001fe6 <HAL_ADC_MspInit+0x132>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001f7e:	4b48      	ldr	r3, [pc, #288]	; (80020a0 <HAL_ADC_MspInit+0x1ec>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	3301      	adds	r3, #1
 8001f84:	4a46      	ldr	r2, [pc, #280]	; (80020a0 <HAL_ADC_MspInit+0x1ec>)
 8001f86:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001f88:	4b45      	ldr	r3, [pc, #276]	; (80020a0 <HAL_ADC_MspInit+0x1ec>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d10e      	bne.n	8001fae <HAL_ADC_MspInit+0xfa>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001f90:	4b44      	ldr	r3, [pc, #272]	; (80020a4 <HAL_ADC_MspInit+0x1f0>)
 8001f92:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001f96:	4a43      	ldr	r2, [pc, #268]	; (80020a4 <HAL_ADC_MspInit+0x1f0>)
 8001f98:	f043 0320 	orr.w	r3, r3, #32
 8001f9c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001fa0:	4b40      	ldr	r3, [pc, #256]	; (80020a4 <HAL_ADC_MspInit+0x1f0>)
 8001fa2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001fa6:	f003 0320 	and.w	r3, r3, #32
 8001faa:	61fb      	str	r3, [r7, #28]
 8001fac:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fae:	4b3d      	ldr	r3, [pc, #244]	; (80020a4 <HAL_ADC_MspInit+0x1f0>)
 8001fb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fb4:	4a3b      	ldr	r2, [pc, #236]	; (80020a4 <HAL_ADC_MspInit+0x1f0>)
 8001fb6:	f043 0301 	orr.w	r3, r3, #1
 8001fba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fbe:	4b39      	ldr	r3, [pc, #228]	; (80020a4 <HAL_ADC_MspInit+0x1f0>)
 8001fc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fc4:	f003 0301 	and.w	r3, r3, #1
 8001fc8:	61bb      	str	r3, [r7, #24]
 8001fca:	69bb      	ldr	r3, [r7, #24]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8001fcc:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8001fd0:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8001fd4:	f001 f8c6 	bl	8003164 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8001fd8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001fdc:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8001fe0:	f001 f8c0 	bl	8003164 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8001fe4:	e056      	b.n	8002094 <HAL_ADC_MspInit+0x1e0>
  else if(hadc->Instance==ADC3)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a31      	ldr	r2, [pc, #196]	; (80020b0 <HAL_ADC_MspInit+0x1fc>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d151      	bne.n	8002094 <HAL_ADC_MspInit+0x1e0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001ff0:	4b2c      	ldr	r3, [pc, #176]	; (80020a4 <HAL_ADC_MspInit+0x1f0>)
 8001ff2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ff6:	4a2b      	ldr	r2, [pc, #172]	; (80020a4 <HAL_ADC_MspInit+0x1f0>)
 8001ff8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ffc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002000:	4b28      	ldr	r3, [pc, #160]	; (80020a4 <HAL_ADC_MspInit+0x1f0>)
 8002002:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002006:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800200a:	617b      	str	r3, [r7, #20]
 800200c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800200e:	4b25      	ldr	r3, [pc, #148]	; (80020a4 <HAL_ADC_MspInit+0x1f0>)
 8002010:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002014:	4a23      	ldr	r2, [pc, #140]	; (80020a4 <HAL_ADC_MspInit+0x1f0>)
 8002016:	f043 0320 	orr.w	r3, r3, #32
 800201a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800201e:	4b21      	ldr	r3, [pc, #132]	; (80020a4 <HAL_ADC_MspInit+0x1f0>)
 8002020:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002024:	f003 0320 	and.w	r3, r3, #32
 8002028:	613b      	str	r3, [r7, #16]
 800202a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800202c:	4b1d      	ldr	r3, [pc, #116]	; (80020a4 <HAL_ADC_MspInit+0x1f0>)
 800202e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002032:	4a1c      	ldr	r2, [pc, #112]	; (80020a4 <HAL_ADC_MspInit+0x1f0>)
 8002034:	f043 0304 	orr.w	r3, r3, #4
 8002038:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800203c:	4b19      	ldr	r3, [pc, #100]	; (80020a4 <HAL_ADC_MspInit+0x1f0>)
 800203e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002042:	f003 0304 	and.w	r3, r3, #4
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800204a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800204e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002050:	2303      	movs	r3, #3
 8002052:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002054:	2300      	movs	r3, #0
 8002056:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002058:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800205c:	4619      	mov	r1, r3
 800205e:	4815      	ldr	r0, [pc, #84]	; (80020b4 <HAL_ADC_MspInit+0x200>)
 8002060:	f003 ff20 	bl	8005ea4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002064:	2301      	movs	r3, #1
 8002066:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002068:	2303      	movs	r3, #3
 800206a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206c:	2300      	movs	r3, #0
 800206e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002070:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002074:	4619      	mov	r1, r3
 8002076:	480c      	ldr	r0, [pc, #48]	; (80020a8 <HAL_ADC_MspInit+0x1f4>)
 8002078:	f003 ff14 	bl	8005ea4 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 800207c:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8002080:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002084:	f001 f86e 	bl	8003164 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002088:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800208c:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002090:	f001 f868 	bl	8003164 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8002094:	bf00      	nop
 8002096:	3740      	adds	r7, #64	; 0x40
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40022000 	.word	0x40022000
 80020a0:	24000db8 	.word	0x24000db8
 80020a4:	58024400 	.word	0x58024400
 80020a8:	58020800 	.word	0x58020800
 80020ac:	40022100 	.word	0x40022100
 80020b0:	58026000 	.word	0x58026000
 80020b4:	58021400 	.word	0x58021400

080020b8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b092      	sub	sp, #72	; 0x48
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	605a      	str	r2, [r3, #4]
 80020ca:	609a      	str	r2, [r3, #8]
 80020cc:	60da      	str	r2, [r3, #12]
 80020ce:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a87      	ldr	r2, [pc, #540]	; (80022f4 <HAL_ETH_MspInit+0x23c>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	f040 8108 	bne.w	80022ec <HAL_ETH_MspInit+0x234>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80020dc:	4b86      	ldr	r3, [pc, #536]	; (80022f8 <HAL_ETH_MspInit+0x240>)
 80020de:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80020e2:	4a85      	ldr	r2, [pc, #532]	; (80022f8 <HAL_ETH_MspInit+0x240>)
 80020e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020e8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80020ec:	4b82      	ldr	r3, [pc, #520]	; (80022f8 <HAL_ETH_MspInit+0x240>)
 80020ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80020f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020f6:	633b      	str	r3, [r7, #48]	; 0x30
 80020f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80020fa:	4b7f      	ldr	r3, [pc, #508]	; (80022f8 <HAL_ETH_MspInit+0x240>)
 80020fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002100:	4a7d      	ldr	r2, [pc, #500]	; (80022f8 <HAL_ETH_MspInit+0x240>)
 8002102:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002106:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800210a:	4b7b      	ldr	r3, [pc, #492]	; (80022f8 <HAL_ETH_MspInit+0x240>)
 800210c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002110:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002114:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8002118:	4b77      	ldr	r3, [pc, #476]	; (80022f8 <HAL_ETH_MspInit+0x240>)
 800211a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800211e:	4a76      	ldr	r2, [pc, #472]	; (80022f8 <HAL_ETH_MspInit+0x240>)
 8002120:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002124:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002128:	4b73      	ldr	r3, [pc, #460]	; (80022f8 <HAL_ETH_MspInit+0x240>)
 800212a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800212e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002132:	62bb      	str	r3, [r7, #40]	; 0x28
 8002134:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002136:	4b70      	ldr	r3, [pc, #448]	; (80022f8 <HAL_ETH_MspInit+0x240>)
 8002138:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800213c:	4a6e      	ldr	r2, [pc, #440]	; (80022f8 <HAL_ETH_MspInit+0x240>)
 800213e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002142:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002146:	4b6c      	ldr	r3, [pc, #432]	; (80022f8 <HAL_ETH_MspInit+0x240>)
 8002148:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800214c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002150:	627b      	str	r3, [r7, #36]	; 0x24
 8002152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002154:	4b68      	ldr	r3, [pc, #416]	; (80022f8 <HAL_ETH_MspInit+0x240>)
 8002156:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800215a:	4a67      	ldr	r2, [pc, #412]	; (80022f8 <HAL_ETH_MspInit+0x240>)
 800215c:	f043 0310 	orr.w	r3, r3, #16
 8002160:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002164:	4b64      	ldr	r3, [pc, #400]	; (80022f8 <HAL_ETH_MspInit+0x240>)
 8002166:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800216a:	f003 0310 	and.w	r3, r3, #16
 800216e:	623b      	str	r3, [r7, #32]
 8002170:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002172:	4b61      	ldr	r3, [pc, #388]	; (80022f8 <HAL_ETH_MspInit+0x240>)
 8002174:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002178:	4a5f      	ldr	r2, [pc, #380]	; (80022f8 <HAL_ETH_MspInit+0x240>)
 800217a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800217e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002182:	4b5d      	ldr	r3, [pc, #372]	; (80022f8 <HAL_ETH_MspInit+0x240>)
 8002184:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800218c:	61fb      	str	r3, [r7, #28]
 800218e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002190:	4b59      	ldr	r3, [pc, #356]	; (80022f8 <HAL_ETH_MspInit+0x240>)
 8002192:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002196:	4a58      	ldr	r2, [pc, #352]	; (80022f8 <HAL_ETH_MspInit+0x240>)
 8002198:	f043 0304 	orr.w	r3, r3, #4
 800219c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021a0:	4b55      	ldr	r3, [pc, #340]	; (80022f8 <HAL_ETH_MspInit+0x240>)
 80021a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021a6:	f003 0304 	and.w	r3, r3, #4
 80021aa:	61bb      	str	r3, [r7, #24]
 80021ac:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80021ae:	4b52      	ldr	r3, [pc, #328]	; (80022f8 <HAL_ETH_MspInit+0x240>)
 80021b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021b4:	4a50      	ldr	r2, [pc, #320]	; (80022f8 <HAL_ETH_MspInit+0x240>)
 80021b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021be:	4b4e      	ldr	r3, [pc, #312]	; (80022f8 <HAL_ETH_MspInit+0x240>)
 80021c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021c8:	617b      	str	r3, [r7, #20]
 80021ca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021cc:	4b4a      	ldr	r3, [pc, #296]	; (80022f8 <HAL_ETH_MspInit+0x240>)
 80021ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021d2:	4a49      	ldr	r2, [pc, #292]	; (80022f8 <HAL_ETH_MspInit+0x240>)
 80021d4:	f043 0301 	orr.w	r3, r3, #1
 80021d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021dc:	4b46      	ldr	r3, [pc, #280]	; (80022f8 <HAL_ETH_MspInit+0x240>)
 80021de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	613b      	str	r3, [r7, #16]
 80021e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ea:	4b43      	ldr	r3, [pc, #268]	; (80022f8 <HAL_ETH_MspInit+0x240>)
 80021ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021f0:	4a41      	ldr	r2, [pc, #260]	; (80022f8 <HAL_ETH_MspInit+0x240>)
 80021f2:	f043 0302 	orr.w	r3, r3, #2
 80021f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021fa:	4b3f      	ldr	r3, [pc, #252]	; (80022f8 <HAL_ETH_MspInit+0x240>)
 80021fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	60fb      	str	r3, [r7, #12]
 8002206:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PB1     ------> ETH_RXD3
    PC5     ------> ETH_RXD1
    PB0     ------> ETH_RXD2
    */
    GPIO_InitStruct.Pin = MII_TX_EN_Pin|MII_TXD1_Pin|MII_TXD0_Pin;
 8002208:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800220c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220e:	2302      	movs	r3, #2
 8002210:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002212:	2300      	movs	r3, #0
 8002214:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002216:	2300      	movs	r3, #0
 8002218:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800221a:	230b      	movs	r3, #11
 800221c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800221e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002222:	4619      	mov	r1, r3
 8002224:	4835      	ldr	r0, [pc, #212]	; (80022fc <HAL_ETH_MspInit+0x244>)
 8002226:	f003 fe3d 	bl	8005ea4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_TXD3_Pin;
 800222a:	2304      	movs	r3, #4
 800222c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222e:	2302      	movs	r3, #2
 8002230:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002232:	2300      	movs	r3, #0
 8002234:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002236:	2300      	movs	r3, #0
 8002238:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800223a:	230b      	movs	r3, #11
 800223c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(MII_TXD3_GPIO_Port, &GPIO_InitStruct);
 800223e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002242:	4619      	mov	r1, r3
 8002244:	482e      	ldr	r0, [pc, #184]	; (8002300 <HAL_ETH_MspInit+0x248>)
 8002246:	f003 fe2d 	bl	8005ea4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RX_ER_Pin;
 800224a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800224e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002250:	2302      	movs	r3, #2
 8002252:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002254:	2300      	movs	r3, #0
 8002256:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002258:	2300      	movs	r3, #0
 800225a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800225c:	230b      	movs	r3, #11
 800225e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(MII_RX_ER_GPIO_Port, &GPIO_InitStruct);
 8002260:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002264:	4619      	mov	r1, r3
 8002266:	4827      	ldr	r0, [pc, #156]	; (8002304 <HAL_ETH_MspInit+0x24c>)
 8002268:	f003 fe1c 	bl	8005ea4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDC_Pin|MII_TXD2_Pin|MII_TX_CLK_Pin|MII_RXD0_Pin
 800226c:	233e      	movs	r3, #62	; 0x3e
 800226e:	637b      	str	r3, [r7, #52]	; 0x34
                          |MII_RXD1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002270:	2302      	movs	r3, #2
 8002272:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002274:	2300      	movs	r3, #0
 8002276:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002278:	2300      	movs	r3, #0
 800227a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800227c:	230b      	movs	r3, #11
 800227e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002280:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002284:	4619      	mov	r1, r3
 8002286:	4820      	ldr	r0, [pc, #128]	; (8002308 <HAL_ETH_MspInit+0x250>)
 8002288:	f003 fe0c 	bl	8005ea4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_CRS_Pin|MII_COL_Pin;
 800228c:	230c      	movs	r3, #12
 800228e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002290:	2302      	movs	r3, #2
 8002292:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002294:	2300      	movs	r3, #0
 8002296:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002298:	2300      	movs	r3, #0
 800229a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800229c:	230b      	movs	r3, #11
 800229e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80022a0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80022a4:	4619      	mov	r1, r3
 80022a6:	4819      	ldr	r0, [pc, #100]	; (800230c <HAL_ETH_MspInit+0x254>)
 80022a8:	f003 fdfc 	bl	8005ea4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDIO_Pin|MII_RX_CLK_Pin|MII_RX_DV_Pin;
 80022ac:	2386      	movs	r3, #134	; 0x86
 80022ae:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b0:	2302      	movs	r3, #2
 80022b2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b4:	2300      	movs	r3, #0
 80022b6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b8:	2300      	movs	r3, #0
 80022ba:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80022bc:	230b      	movs	r3, #11
 80022be:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022c0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80022c4:	4619      	mov	r1, r3
 80022c6:	4812      	ldr	r0, [pc, #72]	; (8002310 <HAL_ETH_MspInit+0x258>)
 80022c8:	f003 fdec 	bl	8005ea4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RX_D3_Pin|MII_RX_D2_Pin;
 80022cc:	2303      	movs	r3, #3
 80022ce:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d0:	2302      	movs	r3, #2
 80022d2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d4:	2300      	movs	r3, #0
 80022d6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d8:	2300      	movs	r3, #0
 80022da:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80022dc:	230b      	movs	r3, #11
 80022de:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80022e4:	4619      	mov	r1, r3
 80022e6:	480b      	ldr	r0, [pc, #44]	; (8002314 <HAL_ETH_MspInit+0x25c>)
 80022e8:	f003 fddc 	bl	8005ea4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80022ec:	bf00      	nop
 80022ee:	3748      	adds	r7, #72	; 0x48
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40028000 	.word	0x40028000
 80022f8:	58024400 	.word	0x58024400
 80022fc:	58021800 	.word	0x58021800
 8002300:	58021000 	.word	0x58021000
 8002304:	58022000 	.word	0x58022000
 8002308:	58020800 	.word	0x58020800
 800230c:	58021c00 	.word	0x58021c00
 8002310:	58020000 	.word	0x58020000
 8002314:	58020400 	.word	0x58020400

08002318 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b0bc      	sub	sp, #240	; 0xf0
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002320:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	605a      	str	r2, [r3, #4]
 800232a:	609a      	str	r2, [r3, #8]
 800232c:	60da      	str	r2, [r3, #12]
 800232e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002330:	f107 0318 	add.w	r3, r7, #24
 8002334:	22c0      	movs	r2, #192	; 0xc0
 8002336:	2100      	movs	r1, #0
 8002338:	4618      	mov	r0, r3
 800233a:	f00c fbd1 	bl	800eae0 <memset>
  if(hfdcan->Instance==FDCAN1)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a57      	ldr	r2, [pc, #348]	; (80024a0 <HAL_FDCAN_MspInit+0x188>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d151      	bne.n	80023ec <HAL_FDCAN_MspInit+0xd4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002348:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800234c:	f04f 0300 	mov.w	r3, #0
 8002350:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8002354:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002358:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800235c:	f107 0318 	add.w	r3, r7, #24
 8002360:	4618      	mov	r0, r3
 8002362:	f005 fb89 	bl	8007a78 <HAL_RCCEx_PeriphCLKConfig>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 800236c:	f7ff fd82 	bl	8001e74 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002370:	4b4c      	ldr	r3, [pc, #304]	; (80024a4 <HAL_FDCAN_MspInit+0x18c>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	3301      	adds	r3, #1
 8002376:	4a4b      	ldr	r2, [pc, #300]	; (80024a4 <HAL_FDCAN_MspInit+0x18c>)
 8002378:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800237a:	4b4a      	ldr	r3, [pc, #296]	; (80024a4 <HAL_FDCAN_MspInit+0x18c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d10e      	bne.n	80023a0 <HAL_FDCAN_MspInit+0x88>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002382:	4b49      	ldr	r3, [pc, #292]	; (80024a8 <HAL_FDCAN_MspInit+0x190>)
 8002384:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002388:	4a47      	ldr	r2, [pc, #284]	; (80024a8 <HAL_FDCAN_MspInit+0x190>)
 800238a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800238e:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002392:	4b45      	ldr	r3, [pc, #276]	; (80024a8 <HAL_FDCAN_MspInit+0x190>)
 8002394:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800239c:	617b      	str	r3, [r7, #20]
 800239e:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 80023a0:	4b41      	ldr	r3, [pc, #260]	; (80024a8 <HAL_FDCAN_MspInit+0x190>)
 80023a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023a6:	4a40      	ldr	r2, [pc, #256]	; (80024a8 <HAL_FDCAN_MspInit+0x190>)
 80023a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023b0:	4b3d      	ldr	r3, [pc, #244]	; (80024a8 <HAL_FDCAN_MspInit+0x190>)
 80023b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ba:	613b      	str	r3, [r7, #16]
 80023bc:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PH14     ------> FDCAN1_RX
    PH13     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = FDCAN1_RX_Pin|FDCAN1_TX_Pin;
 80023be:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80023c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c6:	2302      	movs	r3, #2
 80023c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023cc:	2300      	movs	r3, #0
 80023ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d2:	2300      	movs	r3, #0
 80023d4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80023d8:	2309      	movs	r3, #9
 80023da:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80023de:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80023e2:	4619      	mov	r1, r3
 80023e4:	4831      	ldr	r0, [pc, #196]	; (80024ac <HAL_FDCAN_MspInit+0x194>)
 80023e6:	f003 fd5d 	bl	8005ea4 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 80023ea:	e055      	b.n	8002498 <HAL_FDCAN_MspInit+0x180>
  else if(hfdcan->Instance==FDCAN2)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a2f      	ldr	r2, [pc, #188]	; (80024b0 <HAL_FDCAN_MspInit+0x198>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d150      	bne.n	8002498 <HAL_FDCAN_MspInit+0x180>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80023f6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80023fa:	f04f 0300 	mov.w	r3, #0
 80023fe:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8002402:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002406:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800240a:	f107 0318 	add.w	r3, r7, #24
 800240e:	4618      	mov	r0, r3
 8002410:	f005 fb32 	bl	8007a78 <HAL_RCCEx_PeriphCLKConfig>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <HAL_FDCAN_MspInit+0x106>
      Error_Handler();
 800241a:	f7ff fd2b 	bl	8001e74 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800241e:	4b21      	ldr	r3, [pc, #132]	; (80024a4 <HAL_FDCAN_MspInit+0x18c>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	3301      	adds	r3, #1
 8002424:	4a1f      	ldr	r2, [pc, #124]	; (80024a4 <HAL_FDCAN_MspInit+0x18c>)
 8002426:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002428:	4b1e      	ldr	r3, [pc, #120]	; (80024a4 <HAL_FDCAN_MspInit+0x18c>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2b01      	cmp	r3, #1
 800242e:	d10e      	bne.n	800244e <HAL_FDCAN_MspInit+0x136>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002430:	4b1d      	ldr	r3, [pc, #116]	; (80024a8 <HAL_FDCAN_MspInit+0x190>)
 8002432:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002436:	4a1c      	ldr	r2, [pc, #112]	; (80024a8 <HAL_FDCAN_MspInit+0x190>)
 8002438:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800243c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002440:	4b19      	ldr	r3, [pc, #100]	; (80024a8 <HAL_FDCAN_MspInit+0x190>)
 8002442:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800244a:	60fb      	str	r3, [r7, #12]
 800244c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800244e:	4b16      	ldr	r3, [pc, #88]	; (80024a8 <HAL_FDCAN_MspInit+0x190>)
 8002450:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002454:	4a14      	ldr	r2, [pc, #80]	; (80024a8 <HAL_FDCAN_MspInit+0x190>)
 8002456:	f043 0302 	orr.w	r3, r3, #2
 800245a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800245e:	4b12      	ldr	r3, [pc, #72]	; (80024a8 <HAL_FDCAN_MspInit+0x190>)
 8002460:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	60bb      	str	r3, [r7, #8]
 800246a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FDCAN2_RX_Pin|FDCAN2_TX_Pin;
 800246c:	f242 0320 	movw	r3, #8224	; 0x2020
 8002470:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002474:	2302      	movs	r3, #2
 8002476:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247a:	2300      	movs	r3, #0
 800247c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002480:	2300      	movs	r3, #0
 8002482:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8002486:	2309      	movs	r3, #9
 8002488:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800248c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002490:	4619      	mov	r1, r3
 8002492:	4808      	ldr	r0, [pc, #32]	; (80024b4 <HAL_FDCAN_MspInit+0x19c>)
 8002494:	f003 fd06 	bl	8005ea4 <HAL_GPIO_Init>
}
 8002498:	bf00      	nop
 800249a:	37f0      	adds	r7, #240	; 0xf0
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	4000a000 	.word	0x4000a000
 80024a4:	24000dbc 	.word	0x24000dbc
 80024a8:	58024400 	.word	0x58024400
 80024ac:	58021c00 	.word	0x58021c00
 80024b0:	4000a400 	.word	0x4000a400
 80024b4:	58020400 	.word	0x58020400

080024b8 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b0be      	sub	sp, #248	; 0xf8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	605a      	str	r2, [r3, #4]
 80024ca:	609a      	str	r2, [r3, #8]
 80024cc:	60da      	str	r2, [r3, #12]
 80024ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024d0:	f107 0320 	add.w	r3, r7, #32
 80024d4:	22c0      	movs	r2, #192	; 0xc0
 80024d6:	2100      	movs	r1, #0
 80024d8:	4618      	mov	r0, r3
 80024da:	f00c fb01 	bl	800eae0 <memset>
  if(hltdc->Instance==LTDC)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a66      	ldr	r2, [pc, #408]	; (800267c <HAL_LTDC_MspInit+0x1c4>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	f040 80c4 	bne.w	8002672 <HAL_LTDC_MspInit+0x1ba>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80024ea:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80024ee:	f04f 0300 	mov.w	r3, #0
 80024f2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.PLL3.PLL3M = 32;
 80024f6:	2320      	movs	r3, #32
 80024f8:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3N = 192;
 80024fa:	23c0      	movs	r3, #192	; 0xc0
 80024fc:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80024fe:	2302      	movs	r3, #2
 8002500:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8002502:	2302      	movs	r3, #2
 8002504:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8002506:	2302      	movs	r3, #2
 8002508:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 800250a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800250e:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8002510:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002514:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8002516:	2300      	movs	r3, #0
 8002518:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800251a:	f107 0320 	add.w	r3, r7, #32
 800251e:	4618      	mov	r0, r3
 8002520:	f005 faaa 	bl	8007a78 <HAL_RCCEx_PeriphCLKConfig>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <HAL_LTDC_MspInit+0x76>
    {
      Error_Handler();
 800252a:	f7ff fca3 	bl	8001e74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800252e:	4b54      	ldr	r3, [pc, #336]	; (8002680 <HAL_LTDC_MspInit+0x1c8>)
 8002530:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002534:	4a52      	ldr	r2, [pc, #328]	; (8002680 <HAL_LTDC_MspInit+0x1c8>)
 8002536:	f043 0308 	orr.w	r3, r3, #8
 800253a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800253e:	4b50      	ldr	r3, [pc, #320]	; (8002680 <HAL_LTDC_MspInit+0x1c8>)
 8002540:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002544:	f003 0308 	and.w	r3, r3, #8
 8002548:	61fb      	str	r3, [r7, #28]
 800254a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 800254c:	4b4c      	ldr	r3, [pc, #304]	; (8002680 <HAL_LTDC_MspInit+0x1c8>)
 800254e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002552:	4a4b      	ldr	r2, [pc, #300]	; (8002680 <HAL_LTDC_MspInit+0x1c8>)
 8002554:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002558:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800255c:	4b48      	ldr	r3, [pc, #288]	; (8002680 <HAL_LTDC_MspInit+0x1c8>)
 800255e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002562:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002566:	61bb      	str	r3, [r7, #24]
 8002568:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800256a:	4b45      	ldr	r3, [pc, #276]	; (8002680 <HAL_LTDC_MspInit+0x1c8>)
 800256c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002570:	4a43      	ldr	r2, [pc, #268]	; (8002680 <HAL_LTDC_MspInit+0x1c8>)
 8002572:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002576:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800257a:	4b41      	ldr	r3, [pc, #260]	; (8002680 <HAL_LTDC_MspInit+0x1c8>)
 800257c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002584:	617b      	str	r3, [r7, #20]
 8002586:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002588:	4b3d      	ldr	r3, [pc, #244]	; (8002680 <HAL_LTDC_MspInit+0x1c8>)
 800258a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800258e:	4a3c      	ldr	r2, [pc, #240]	; (8002680 <HAL_LTDC_MspInit+0x1c8>)
 8002590:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002594:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002598:	4b39      	ldr	r3, [pc, #228]	; (8002680 <HAL_LTDC_MspInit+0x1c8>)
 800259a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800259e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025a2:	613b      	str	r3, [r7, #16]
 80025a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80025a6:	4b36      	ldr	r3, [pc, #216]	; (8002680 <HAL_LTDC_MspInit+0x1c8>)
 80025a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025ac:	4a34      	ldr	r2, [pc, #208]	; (8002680 <HAL_LTDC_MspInit+0x1c8>)
 80025ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025b6:	4b32      	ldr	r3, [pc, #200]	; (8002680 <HAL_LTDC_MspInit+0x1c8>)
 80025b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025c0:	60fb      	str	r3, [r7, #12]
 80025c2:	68fb      	ldr	r3, [r7, #12]
    PJ5     ------> LTDC_R6
    PH9     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    PJ4     ------> LTDC_R5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
 80025c4:	23fc      	movs	r3, #252	; 0xfc
 80025c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_7|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ca:	2302      	movs	r3, #2
 80025cc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d0:	2300      	movs	r3, #0
 80025d2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d6:	2300      	movs	r3, #0
 80025d8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80025dc:	230e      	movs	r3, #14
 80025de:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80025e2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80025e6:	4619      	mov	r1, r3
 80025e8:	4826      	ldr	r0, [pc, #152]	; (8002684 <HAL_LTDC_MspInit+0x1cc>)
 80025ea:	f003 fc5b 	bl	8005ea4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
 80025ee:	f24d 2303 	movw	r3, #53763	; 0xd203
 80025f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f6:	2302      	movs	r3, #2
 80025f8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fc:	2300      	movs	r3, #0
 80025fe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002602:	2300      	movs	r3, #0
 8002604:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002608:	230e      	movs	r3, #14
 800260a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800260e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002612:	4619      	mov	r1, r3
 8002614:	481c      	ldr	r0, [pc, #112]	; (8002688 <HAL_LTDC_MspInit+0x1d0>)
 8002616:	f003 fc45 	bl	8005ea4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DISP_Pin|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
 800261a:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 800261e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002622:	2302      	movs	r3, #2
 8002624:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002628:	2300      	movs	r3, #0
 800262a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800262e:	2300      	movs	r3, #0
 8002630:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002634:	230e      	movs	r3, #14
 8002636:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800263a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800263e:	4619      	mov	r1, r3
 8002640:	4812      	ldr	r0, [pc, #72]	; (800268c <HAL_LTDC_MspInit+0x1d4>)
 8002642:	f003 fc2f 	bl	8005ea4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002646:	f44f 7300 	mov.w	r3, #512	; 0x200
 800264a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800264e:	2302      	movs	r3, #2
 8002650:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002654:	2300      	movs	r3, #0
 8002656:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800265a:	2300      	movs	r3, #0
 800265c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002660:	230e      	movs	r3, #14
 8002662:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002666:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800266a:	4619      	mov	r1, r3
 800266c:	4808      	ldr	r0, [pc, #32]	; (8002690 <HAL_LTDC_MspInit+0x1d8>)
 800266e:	f003 fc19 	bl	8005ea4 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002672:	bf00      	nop
 8002674:	37f8      	adds	r7, #248	; 0xf8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	50001000 	.word	0x50001000
 8002680:	58024400 	.word	0x58024400
 8002684:	58022800 	.word	0x58022800
 8002688:	58022000 	.word	0x58022000
 800268c:	58022400 	.word	0x58022400
 8002690:	58021c00 	.word	0x58021c00

08002694 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b0b2      	sub	sp, #200	; 0xc8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800269c:	f107 0308 	add.w	r3, r7, #8
 80026a0:	22c0      	movs	r2, #192	; 0xc0
 80026a2:	2100      	movs	r1, #0
 80026a4:	4618      	mov	r0, r3
 80026a6:	f00c fa1b 	bl	800eae0 <memset>
  if(hrtc->Instance==RTC)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a10      	ldr	r2, [pc, #64]	; (80026f0 <HAL_RTC_MspInit+0x5c>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d119      	bne.n	80026e8 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80026b4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80026b8:	f04f 0300 	mov.w	r3, #0
 80026bc:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80026c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026c8:	f107 0308 	add.w	r3, r7, #8
 80026cc:	4618      	mov	r0, r3
 80026ce:	f005 f9d3 	bl	8007a78 <HAL_RCCEx_PeriphCLKConfig>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 80026d8:	f7ff fbcc 	bl	8001e74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80026dc:	4b05      	ldr	r3, [pc, #20]	; (80026f4 <HAL_RTC_MspInit+0x60>)
 80026de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e0:	4a04      	ldr	r2, [pc, #16]	; (80026f4 <HAL_RTC_MspInit+0x60>)
 80026e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026e6:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80026e8:	bf00      	nop
 80026ea:	37c8      	adds	r7, #200	; 0xc8
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	58004000 	.word	0x58004000
 80026f4:	58024400 	.word	0x58024400

080026f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b0bc      	sub	sp, #240	; 0xf0
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002700:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002704:	2200      	movs	r2, #0
 8002706:	601a      	str	r2, [r3, #0]
 8002708:	605a      	str	r2, [r3, #4]
 800270a:	609a      	str	r2, [r3, #8]
 800270c:	60da      	str	r2, [r3, #12]
 800270e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002710:	f107 0318 	add.w	r3, r7, #24
 8002714:	22c0      	movs	r2, #192	; 0xc0
 8002716:	2100      	movs	r1, #0
 8002718:	4618      	mov	r0, r3
 800271a:	f00c f9e1 	bl	800eae0 <memset>
  if(hspi->Instance==SPI2)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a55      	ldr	r2, [pc, #340]	; (8002878 <HAL_SPI_MspInit+0x180>)
 8002724:	4293      	cmp	r3, r2
 8002726:	f040 80a3 	bne.w	8002870 <HAL_SPI_MspInit+0x178>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800272a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800272e:	f04f 0300 	mov.w	r3, #0
 8002732:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002736:	2300      	movs	r3, #0
 8002738:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800273a:	f107 0318 	add.w	r3, r7, #24
 800273e:	4618      	mov	r0, r3
 8002740:	f005 f99a 	bl	8007a78 <HAL_RCCEx_PeriphCLKConfig>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 800274a:	f7ff fb93 	bl	8001e74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800274e:	4b4b      	ldr	r3, [pc, #300]	; (800287c <HAL_SPI_MspInit+0x184>)
 8002750:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002754:	4a49      	ldr	r2, [pc, #292]	; (800287c <HAL_SPI_MspInit+0x184>)
 8002756:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800275a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800275e:	4b47      	ldr	r3, [pc, #284]	; (800287c <HAL_SPI_MspInit+0x184>)
 8002760:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002764:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002768:	617b      	str	r3, [r7, #20]
 800276a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800276c:	4b43      	ldr	r3, [pc, #268]	; (800287c <HAL_SPI_MspInit+0x184>)
 800276e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002772:	4a42      	ldr	r2, [pc, #264]	; (800287c <HAL_SPI_MspInit+0x184>)
 8002774:	f043 0302 	orr.w	r3, r3, #2
 8002778:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800277c:	4b3f      	ldr	r3, [pc, #252]	; (800287c <HAL_SPI_MspInit+0x184>)
 800277e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	613b      	str	r3, [r7, #16]
 8002788:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800278a:	4b3c      	ldr	r3, [pc, #240]	; (800287c <HAL_SPI_MspInit+0x184>)
 800278c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002790:	4a3a      	ldr	r2, [pc, #232]	; (800287c <HAL_SPI_MspInit+0x184>)
 8002792:	f043 0308 	orr.w	r3, r3, #8
 8002796:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800279a:	4b38      	ldr	r3, [pc, #224]	; (800287c <HAL_SPI_MspInit+0x184>)
 800279c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027a0:	f003 0308 	and.w	r3, r3, #8
 80027a4:	60fb      	str	r3, [r7, #12]
 80027a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80027a8:	4b34      	ldr	r3, [pc, #208]	; (800287c <HAL_SPI_MspInit+0x184>)
 80027aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027ae:	4a33      	ldr	r2, [pc, #204]	; (800287c <HAL_SPI_MspInit+0x184>)
 80027b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027b8:	4b30      	ldr	r3, [pc, #192]	; (800287c <HAL_SPI_MspInit+0x184>)
 80027ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027c2:	60bb      	str	r3, [r7, #8]
 80027c4:	68bb      	ldr	r3, [r7, #8]
    PB4 (NJTRST)     ------> SPI2_NSS
    PD3     ------> SPI2_SCK
    PI2     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80027c6:	2310      	movs	r3, #16
 80027c8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027cc:	2302      	movs	r3, #2
 80027ce:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d2:	2300      	movs	r3, #0
 80027d4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d8:	2300      	movs	r3, #0
 80027da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 80027de:	2307      	movs	r3, #7
 80027e0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027e4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80027e8:	4619      	mov	r1, r3
 80027ea:	4825      	ldr	r0, [pc, #148]	; (8002880 <HAL_SPI_MspInit+0x188>)
 80027ec:	f003 fb5a 	bl	8005ea4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80027f0:	2308      	movs	r3, #8
 80027f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f6:	2302      	movs	r3, #2
 80027f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fc:	2300      	movs	r3, #0
 80027fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002802:	2300      	movs	r3, #0
 8002804:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002808:	2305      	movs	r3, #5
 800280a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800280e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002812:	4619      	mov	r1, r3
 8002814:	481b      	ldr	r0, [pc, #108]	; (8002884 <HAL_SPI_MspInit+0x18c>)
 8002816:	f003 fb45 	bl	8005ea4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800281a:	2304      	movs	r3, #4
 800281c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002820:	2302      	movs	r3, #2
 8002822:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002826:	2300      	movs	r3, #0
 8002828:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800282c:	2300      	movs	r3, #0
 800282e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002832:	2305      	movs	r3, #5
 8002834:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002838:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800283c:	4619      	mov	r1, r3
 800283e:	4812      	ldr	r0, [pc, #72]	; (8002888 <HAL_SPI_MspInit+0x190>)
 8002840:	f003 fb30 	bl	8005ea4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002844:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002848:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800284c:	2302      	movs	r3, #2
 800284e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002852:	2300      	movs	r3, #0
 8002854:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002858:	2300      	movs	r3, #0
 800285a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800285e:	2305      	movs	r3, #5
 8002860:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002864:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002868:	4619      	mov	r1, r3
 800286a:	4805      	ldr	r0, [pc, #20]	; (8002880 <HAL_SPI_MspInit+0x188>)
 800286c:	f003 fb1a 	bl	8005ea4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002870:	bf00      	nop
 8002872:	37f0      	adds	r7, #240	; 0xf0
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	40003800 	.word	0x40003800
 800287c:	58024400 	.word	0x58024400
 8002880:	58020400 	.word	0x58020400
 8002884:	58020c00 	.word	0x58020c00
 8002888:	58022000 	.word	0x58022000

0800288c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a0b      	ldr	r2, [pc, #44]	; (80028c8 <HAL_TIM_Base_MspInit+0x3c>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d10e      	bne.n	80028bc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800289e:	4b0b      	ldr	r3, [pc, #44]	; (80028cc <HAL_TIM_Base_MspInit+0x40>)
 80028a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80028a4:	4a09      	ldr	r2, [pc, #36]	; (80028cc <HAL_TIM_Base_MspInit+0x40>)
 80028a6:	f043 0302 	orr.w	r3, r3, #2
 80028aa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80028ae:	4b07      	ldr	r3, [pc, #28]	; (80028cc <HAL_TIM_Base_MspInit+0x40>)
 80028b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80028b4:	f003 0302 	and.w	r3, r3, #2
 80028b8:	60fb      	str	r3, [r7, #12]
 80028ba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80028bc:	bf00      	nop
 80028be:	3714      	adds	r7, #20
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr
 80028c8:	40000400 	.word	0x40000400
 80028cc:	58024400 	.word	0x58024400

080028d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b0ba      	sub	sp, #232	; 0xe8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028d8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80028dc:	2200      	movs	r2, #0
 80028de:	601a      	str	r2, [r3, #0]
 80028e0:	605a      	str	r2, [r3, #4]
 80028e2:	609a      	str	r2, [r3, #8]
 80028e4:	60da      	str	r2, [r3, #12]
 80028e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80028e8:	f107 0310 	add.w	r3, r7, #16
 80028ec:	22c0      	movs	r2, #192	; 0xc0
 80028ee:	2100      	movs	r1, #0
 80028f0:	4618      	mov	r0, r3
 80028f2:	f00c f8f5 	bl	800eae0 <memset>
  if(huart->Instance==USART3)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a2b      	ldr	r2, [pc, #172]	; (80029a8 <HAL_UART_MspInit+0xd8>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d14e      	bne.n	800299e <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002900:	f04f 0202 	mov.w	r2, #2
 8002904:	f04f 0300 	mov.w	r3, #0
 8002908:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800290c:	2300      	movs	r3, #0
 800290e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002912:	f107 0310 	add.w	r3, r7, #16
 8002916:	4618      	mov	r0, r3
 8002918:	f005 f8ae 	bl	8007a78 <HAL_RCCEx_PeriphCLKConfig>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002922:	f7ff faa7 	bl	8001e74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002926:	4b21      	ldr	r3, [pc, #132]	; (80029ac <HAL_UART_MspInit+0xdc>)
 8002928:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800292c:	4a1f      	ldr	r2, [pc, #124]	; (80029ac <HAL_UART_MspInit+0xdc>)
 800292e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002932:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002936:	4b1d      	ldr	r3, [pc, #116]	; (80029ac <HAL_UART_MspInit+0xdc>)
 8002938:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800293c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002940:	60fb      	str	r3, [r7, #12]
 8002942:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002944:	4b19      	ldr	r3, [pc, #100]	; (80029ac <HAL_UART_MspInit+0xdc>)
 8002946:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800294a:	4a18      	ldr	r2, [pc, #96]	; (80029ac <HAL_UART_MspInit+0xdc>)
 800294c:	f043 0302 	orr.w	r3, r3, #2
 8002950:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002954:	4b15      	ldr	r3, [pc, #84]	; (80029ac <HAL_UART_MspInit+0xdc>)
 8002956:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	60bb      	str	r3, [r7, #8]
 8002960:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8002962:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002966:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800296a:	2302      	movs	r3, #2
 800296c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002970:	2300      	movs	r3, #0
 8002972:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002976:	2300      	movs	r3, #0
 8002978:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800297c:	2307      	movs	r3, #7
 800297e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002982:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002986:	4619      	mov	r1, r3
 8002988:	4809      	ldr	r0, [pc, #36]	; (80029b0 <HAL_UART_MspInit+0xe0>)
 800298a:	f003 fa8b 	bl	8005ea4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800298e:	2200      	movs	r2, #0
 8002990:	2100      	movs	r1, #0
 8002992:	2027      	movs	r0, #39	; 0x27
 8002994:	f001 fd65 	bl	8004462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002998:	2027      	movs	r0, #39	; 0x27
 800299a:	f001 fd7c 	bl	8004496 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800299e:	bf00      	nop
 80029a0:	37e8      	adds	r7, #232	; 0xe8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	40004800 	.word	0x40004800
 80029ac:	58024400 	.word	0x58024400
 80029b0:	58020400 	.word	0x58020400

080029b4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b0ba      	sub	sp, #232	; 0xe8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029bc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80029c0:	2200      	movs	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]
 80029c4:	605a      	str	r2, [r3, #4]
 80029c6:	609a      	str	r2, [r3, #8]
 80029c8:	60da      	str	r2, [r3, #12]
 80029ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80029cc:	f107 0310 	add.w	r3, r7, #16
 80029d0:	22c0      	movs	r2, #192	; 0xc0
 80029d2:	2100      	movs	r1, #0
 80029d4:	4618      	mov	r0, r3
 80029d6:	f00c f883 	bl	800eae0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a30      	ldr	r2, [pc, #192]	; (8002aa0 <HAL_PCD_MspInit+0xec>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d159      	bne.n	8002a98 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80029e4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80029e8:	f04f 0300 	mov.w	r3, #0
 80029ec:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80029f0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80029f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029f8:	f107 0310 	add.w	r3, r7, #16
 80029fc:	4618      	mov	r0, r3
 80029fe:	f005 f83b 	bl	8007a78 <HAL_RCCEx_PeriphCLKConfig>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d001      	beq.n	8002a0c <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8002a08:	f7ff fa34 	bl	8001e74 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8002a0c:	f004 f83e 	bl	8006a8c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a10:	4b24      	ldr	r3, [pc, #144]	; (8002aa4 <HAL_PCD_MspInit+0xf0>)
 8002a12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a16:	4a23      	ldr	r2, [pc, #140]	; (8002aa4 <HAL_PCD_MspInit+0xf0>)
 8002a18:	f043 0301 	orr.w	r3, r3, #1
 8002a1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a20:	4b20      	ldr	r3, [pc, #128]	; (8002aa4 <HAL_PCD_MspInit+0xf0>)
 8002a22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	60fb      	str	r3, [r7, #12]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = VBUS_FS2_Pin;
 8002a2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a36:	2300      	movs	r3, #0
 8002a38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(VBUS_FS2_GPIO_Port, &GPIO_InitStruct);
 8002a42:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002a46:	4619      	mov	r1, r3
 8002a48:	4817      	ldr	r0, [pc, #92]	; (8002aa8 <HAL_PCD_MspInit+0xf4>)
 8002a4a:	f003 fa2b 	bl	8005ea4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS2_P_Pin|USB_OTG_FS2_N_Pin;
 8002a4e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002a52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a56:	2302      	movs	r3, #2
 8002a58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a62:	2300      	movs	r3, #0
 8002a64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002a68:	230a      	movs	r3, #10
 8002a6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a6e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002a72:	4619      	mov	r1, r3
 8002a74:	480c      	ldr	r0, [pc, #48]	; (8002aa8 <HAL_PCD_MspInit+0xf4>)
 8002a76:	f003 fa15 	bl	8005ea4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002a7a:	4b0a      	ldr	r3, [pc, #40]	; (8002aa4 <HAL_PCD_MspInit+0xf0>)
 8002a7c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002a80:	4a08      	ldr	r2, [pc, #32]	; (8002aa4 <HAL_PCD_MspInit+0xf0>)
 8002a82:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002a86:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002a8a:	4b06      	ldr	r3, [pc, #24]	; (8002aa4 <HAL_PCD_MspInit+0xf0>)
 8002a8c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002a90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a94:	60bb      	str	r3, [r7, #8]
 8002a96:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002a98:	bf00      	nop
 8002a9a:	37e8      	adds	r7, #232	; 0xe8
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	40080000 	.word	0x40080000
 8002aa4:	58024400 	.word	0x58024400
 8002aa8:	58020000 	.word	0x58020000

08002aac <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b0b8      	sub	sp, #224	; 0xe0
 8002ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002ab2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	601a      	str	r2, [r3, #0]
 8002aba:	605a      	str	r2, [r3, #4]
 8002abc:	609a      	str	r2, [r3, #8]
 8002abe:	60da      	str	r2, [r3, #12]
 8002ac0:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002ac2:	4b51      	ldr	r3, [pc, #324]	; (8002c08 <HAL_FMC_MspInit+0x15c>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f040 8099 	bne.w	8002bfe <HAL_FMC_MspInit+0x152>
    return;
  }
  FMC_Initialized = 1;
 8002acc:	4b4e      	ldr	r3, [pc, #312]	; (8002c08 <HAL_FMC_MspInit+0x15c>)
 8002ace:	2201      	movs	r2, #1
 8002ad0:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ad2:	f107 0308 	add.w	r3, r7, #8
 8002ad6:	22c0      	movs	r2, #192	; 0xc0
 8002ad8:	2100      	movs	r1, #0
 8002ada:	4618      	mov	r0, r3
 8002adc:	f00c f800 	bl	800eae0 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8002ae0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ae4:	f04f 0300 	mov.w	r3, #0
 8002ae8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8002aec:	2300      	movs	r3, #0
 8002aee:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002af0:	f107 0308 	add.w	r3, r7, #8
 8002af4:	4618      	mov	r0, r3
 8002af6:	f004 ffbf 	bl	8007a78 <HAL_RCCEx_PeriphCLKConfig>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 8002b00:	f7ff f9b8 	bl	8001e74 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002b04:	4b41      	ldr	r3, [pc, #260]	; (8002c0c <HAL_FMC_MspInit+0x160>)
 8002b06:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002b0a:	4a40      	ldr	r2, [pc, #256]	; (8002c0c <HAL_FMC_MspInit+0x160>)
 8002b0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b10:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8002b14:	4b3d      	ldr	r3, [pc, #244]	; (8002c0c <HAL_FMC_MspInit+0x160>)
 8002b16:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002b1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b1e:	607b      	str	r3, [r7, #4]
 8002b20:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8002b22:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002b26:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b30:	2300      	movs	r3, #0
 8002b32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b36:	2303      	movs	r3, #3
 8002b38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002b3c:	230c      	movs	r3, #12
 8002b3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b42:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002b46:	4619      	mov	r1, r3
 8002b48:	4831      	ldr	r0, [pc, #196]	; (8002c10 <HAL_FMC_MspInit+0x164>)
 8002b4a:	f003 f9ab 	bl	8005ea4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8002b4e:	f248 1333 	movw	r3, #33075	; 0x8133
 8002b52:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b56:	2302      	movs	r3, #2
 8002b58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b62:	2303      	movs	r3, #3
 8002b64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002b68:	230c      	movs	r3, #12
 8002b6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b6e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002b72:	4619      	mov	r1, r3
 8002b74:	4827      	ldr	r0, [pc, #156]	; (8002c14 <HAL_FMC_MspInit+0x168>)
 8002b76:	f003 f995 	bl	8005ea4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8002b7a:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002b7e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b82:	2302      	movs	r3, #2
 8002b84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002b94:	230c      	movs	r3, #12
 8002b96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b9a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	481d      	ldr	r0, [pc, #116]	; (8002c18 <HAL_FMC_MspInit+0x16c>)
 8002ba2:	f003 f97f 	bl	8005ea4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8002ba6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002baa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bae:	2302      	movs	r3, #2
 8002bb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002bc0:	230c      	movs	r3, #12
 8002bc2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002bc6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002bca:	4619      	mov	r1, r3
 8002bcc:	4813      	ldr	r0, [pc, #76]	; (8002c1c <HAL_FMC_MspInit+0x170>)
 8002bce:	f003 f969 	bl	8005ea4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002bd2:	23e0      	movs	r3, #224	; 0xe0
 8002bd4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd8:	2302      	movs	r3, #2
 8002bda:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bde:	2300      	movs	r3, #0
 8002be0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002be4:	2303      	movs	r3, #3
 8002be6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002bea:	230c      	movs	r3, #12
 8002bec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002bf0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	480a      	ldr	r0, [pc, #40]	; (8002c20 <HAL_FMC_MspInit+0x174>)
 8002bf8:	f003 f954 	bl	8005ea4 <HAL_GPIO_Init>
 8002bfc:	e000      	b.n	8002c00 <HAL_FMC_MspInit+0x154>
    return;
 8002bfe:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002c00:	37e0      	adds	r7, #224	; 0xe0
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	24000dc0 	.word	0x24000dc0
 8002c0c:	58024400 	.word	0x58024400
 8002c10:	58021000 	.word	0x58021000
 8002c14:	58021800 	.word	0x58021800
 8002c18:	58020c00 	.word	0x58020c00
 8002c1c:	58021400 	.word	0x58021400
 8002c20:	58021c00 	.word	0x58021c00

08002c24 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002c2c:	f7ff ff3e 	bl	8002aac <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002c30:	bf00      	nop
 8002c32:	3708      	adds	r7, #8
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b0ba      	sub	sp, #232	; 0xe8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c40:	f107 0310 	add.w	r3, r7, #16
 8002c44:	22c0      	movs	r2, #192	; 0xc0
 8002c46:	2100      	movs	r1, #0
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f00b ff49 	bl	800eae0 <memset>
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a45      	ldr	r2, [pc, #276]	; (8002d68 <HAL_SAI_MspInit+0x130>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d13e      	bne.n	8002cd6 <HAL_SAI_MspInit+0x9e>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8002c58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c5c:	f04f 0300 	mov.w	r3, #0
 8002c60:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 8002c64:	2300      	movs	r3, #0
 8002c66:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c68:	f107 0310 	add.w	r3, r7, #16
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f004 ff03 	bl	8007a78 <HAL_RCCEx_PeriphCLKConfig>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <HAL_SAI_MspInit+0x44>
    {
      Error_Handler();
 8002c78:	f7ff f8fc 	bl	8001e74 <Error_Handler>
    }

    if (SAI2_client == 0)
 8002c7c:	4b3b      	ldr	r3, [pc, #236]	; (8002d6c <HAL_SAI_MspInit+0x134>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d10e      	bne.n	8002ca2 <HAL_SAI_MspInit+0x6a>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002c84:	4b3a      	ldr	r3, [pc, #232]	; (8002d70 <HAL_SAI_MspInit+0x138>)
 8002c86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c8a:	4a39      	ldr	r2, [pc, #228]	; (8002d70 <HAL_SAI_MspInit+0x138>)
 8002c8c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c90:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002c94:	4b36      	ldr	r3, [pc, #216]	; (8002d70 <HAL_SAI_MspInit+0x138>)
 8002c96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c9e:	60fb      	str	r3, [r7, #12]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
    }
    SAI2_client ++;
 8002ca2:	4b32      	ldr	r3, [pc, #200]	; (8002d6c <HAL_SAI_MspInit+0x134>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	4a30      	ldr	r2, [pc, #192]	; (8002d6c <HAL_SAI_MspInit+0x134>)
 8002caa:	6013      	str	r3, [r2, #0]
    PI6     ------> SAI2_SD_A
    PI5     ------> SAI2_SCK_A
    PI4     ------> SAI2_MCLK_A
    PI7     ------> SAI2_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_7;
 8002cac:	23f0      	movs	r3, #240	; 0xf0
 8002cae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002cc4:	230a      	movs	r3, #10
 8002cc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002cca:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002cce:	4619      	mov	r1, r3
 8002cd0:	4828      	ldr	r0, [pc, #160]	; (8002d74 <HAL_SAI_MspInit+0x13c>)
 8002cd2:	f003 f8e7 	bl	8005ea4 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a27      	ldr	r2, [pc, #156]	; (8002d78 <HAL_SAI_MspInit+0x140>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d13f      	bne.n	8002d60 <HAL_SAI_MspInit+0x128>
    {
      /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8002ce0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ce4:	f04f 0300 	mov.w	r3, #0
 8002ce8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 8002cec:	2300      	movs	r3, #0
 8002cee:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002cf0:	f107 0310 	add.w	r3, r7, #16
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f004 febf 	bl	8007a78 <HAL_RCCEx_PeriphCLKConfig>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <HAL_SAI_MspInit+0xcc>
    {
      Error_Handler();
 8002d00:	f7ff f8b8 	bl	8001e74 <Error_Handler>
    }

      if (SAI2_client == 0)
 8002d04:	4b19      	ldr	r3, [pc, #100]	; (8002d6c <HAL_SAI_MspInit+0x134>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d10e      	bne.n	8002d2a <HAL_SAI_MspInit+0xf2>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002d0c:	4b18      	ldr	r3, [pc, #96]	; (8002d70 <HAL_SAI_MspInit+0x138>)
 8002d0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d12:	4a17      	ldr	r2, [pc, #92]	; (8002d70 <HAL_SAI_MspInit+0x138>)
 8002d14:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d18:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002d1c:	4b14      	ldr	r3, [pc, #80]	; (8002d70 <HAL_SAI_MspInit+0x138>)
 8002d1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d26:	60bb      	str	r3, [r7, #8]
 8002d28:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 8002d2a:	4b10      	ldr	r3, [pc, #64]	; (8002d6c <HAL_SAI_MspInit+0x134>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	3301      	adds	r3, #1
 8002d30:	4a0e      	ldr	r2, [pc, #56]	; (8002d6c <HAL_SAI_MspInit+0x134>)
 8002d32:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002d34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d38:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d42:	2300      	movs	r3, #0
 8002d44:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002d4e:	230a      	movs	r3, #10
 8002d50:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002d54:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002d58:	4619      	mov	r1, r3
 8002d5a:	4808      	ldr	r0, [pc, #32]	; (8002d7c <HAL_SAI_MspInit+0x144>)
 8002d5c:	f003 f8a2 	bl	8005ea4 <HAL_GPIO_Init>

    }
}
 8002d60:	bf00      	nop
 8002d62:	37e8      	adds	r7, #232	; 0xe8
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	40015c04 	.word	0x40015c04
 8002d6c:	24000dc4 	.word	0x24000dc4
 8002d70:	58024400 	.word	0x58024400
 8002d74:	58022000 	.word	0x58022000
 8002d78:	40015c24 	.word	0x40015c24
 8002d7c:	58021800 	.word	0x58021800

08002d80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d84:	e7fe      	b.n	8002d84 <NMI_Handler+0x4>

08002d86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d86:	b480      	push	{r7}
 8002d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d8a:	e7fe      	b.n	8002d8a <HardFault_Handler+0x4>

08002d8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d90:	e7fe      	b.n	8002d90 <MemManage_Handler+0x4>

08002d92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d92:	b480      	push	{r7}
 8002d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d96:	e7fe      	b.n	8002d96 <BusFault_Handler+0x4>

08002d98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d9c:	e7fe      	b.n	8002d9c <UsageFault_Handler+0x4>

08002d9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002da2:	bf00      	nop
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002db0:	bf00      	nop
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr

08002dba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002dba:	b480      	push	{r7}
 8002dbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002dbe:	bf00      	nop
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002dcc:	f000 f966 	bl	800309c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002dd0:	bf00      	nop
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002dd8:	4802      	ldr	r0, [pc, #8]	; (8002de4 <USART3_IRQHandler+0x10>)
 8002dda:	f008 ff7b 	bl	800bcd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002dde:	bf00      	nop
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	240007a0 	.word	0x240007a0

08002de8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b086      	sub	sp, #24
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002df0:	4a14      	ldr	r2, [pc, #80]	; (8002e44 <_sbrk+0x5c>)
 8002df2:	4b15      	ldr	r3, [pc, #84]	; (8002e48 <_sbrk+0x60>)
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002dfc:	4b13      	ldr	r3, [pc, #76]	; (8002e4c <_sbrk+0x64>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d102      	bne.n	8002e0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e04:	4b11      	ldr	r3, [pc, #68]	; (8002e4c <_sbrk+0x64>)
 8002e06:	4a12      	ldr	r2, [pc, #72]	; (8002e50 <_sbrk+0x68>)
 8002e08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e0a:	4b10      	ldr	r3, [pc, #64]	; (8002e4c <_sbrk+0x64>)
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4413      	add	r3, r2
 8002e12:	693a      	ldr	r2, [r7, #16]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d207      	bcs.n	8002e28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e18:	f00b fe2a 	bl	800ea70 <__errno>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	220c      	movs	r2, #12
 8002e20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e22:	f04f 33ff 	mov.w	r3, #4294967295
 8002e26:	e009      	b.n	8002e3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e28:	4b08      	ldr	r3, [pc, #32]	; (8002e4c <_sbrk+0x64>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e2e:	4b07      	ldr	r3, [pc, #28]	; (8002e4c <_sbrk+0x64>)
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4413      	add	r3, r2
 8002e36:	4a05      	ldr	r2, [pc, #20]	; (8002e4c <_sbrk+0x64>)
 8002e38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3718      	adds	r7, #24
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	24080000 	.word	0x24080000
 8002e48:	00000400 	.word	0x00000400
 8002e4c:	24000dc8 	.word	0x24000dc8
 8002e50:	24000de0 	.word	0x24000de0

08002e54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002e58:	4b37      	ldr	r3, [pc, #220]	; (8002f38 <SystemInit+0xe4>)
 8002e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e5e:	4a36      	ldr	r2, [pc, #216]	; (8002f38 <SystemInit+0xe4>)
 8002e60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002e68:	4b34      	ldr	r3, [pc, #208]	; (8002f3c <SystemInit+0xe8>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 030f 	and.w	r3, r3, #15
 8002e70:	2b06      	cmp	r3, #6
 8002e72:	d807      	bhi.n	8002e84 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002e74:	4b31      	ldr	r3, [pc, #196]	; (8002f3c <SystemInit+0xe8>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f023 030f 	bic.w	r3, r3, #15
 8002e7c:	4a2f      	ldr	r2, [pc, #188]	; (8002f3c <SystemInit+0xe8>)
 8002e7e:	f043 0307 	orr.w	r3, r3, #7
 8002e82:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002e84:	4b2e      	ldr	r3, [pc, #184]	; (8002f40 <SystemInit+0xec>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a2d      	ldr	r2, [pc, #180]	; (8002f40 <SystemInit+0xec>)
 8002e8a:	f043 0301 	orr.w	r3, r3, #1
 8002e8e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002e90:	4b2b      	ldr	r3, [pc, #172]	; (8002f40 <SystemInit+0xec>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002e96:	4b2a      	ldr	r3, [pc, #168]	; (8002f40 <SystemInit+0xec>)
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	4929      	ldr	r1, [pc, #164]	; (8002f40 <SystemInit+0xec>)
 8002e9c:	4b29      	ldr	r3, [pc, #164]	; (8002f44 <SystemInit+0xf0>)
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002ea2:	4b26      	ldr	r3, [pc, #152]	; (8002f3c <SystemInit+0xe8>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0308 	and.w	r3, r3, #8
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d007      	beq.n	8002ebe <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002eae:	4b23      	ldr	r3, [pc, #140]	; (8002f3c <SystemInit+0xe8>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f023 030f 	bic.w	r3, r3, #15
 8002eb6:	4a21      	ldr	r2, [pc, #132]	; (8002f3c <SystemInit+0xe8>)
 8002eb8:	f043 0307 	orr.w	r3, r3, #7
 8002ebc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002ebe:	4b20      	ldr	r3, [pc, #128]	; (8002f40 <SystemInit+0xec>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002ec4:	4b1e      	ldr	r3, [pc, #120]	; (8002f40 <SystemInit+0xec>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002eca:	4b1d      	ldr	r3, [pc, #116]	; (8002f40 <SystemInit+0xec>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002ed0:	4b1b      	ldr	r3, [pc, #108]	; (8002f40 <SystemInit+0xec>)
 8002ed2:	4a1d      	ldr	r2, [pc, #116]	; (8002f48 <SystemInit+0xf4>)
 8002ed4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002ed6:	4b1a      	ldr	r3, [pc, #104]	; (8002f40 <SystemInit+0xec>)
 8002ed8:	4a1c      	ldr	r2, [pc, #112]	; (8002f4c <SystemInit+0xf8>)
 8002eda:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002edc:	4b18      	ldr	r3, [pc, #96]	; (8002f40 <SystemInit+0xec>)
 8002ede:	4a1c      	ldr	r2, [pc, #112]	; (8002f50 <SystemInit+0xfc>)
 8002ee0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002ee2:	4b17      	ldr	r3, [pc, #92]	; (8002f40 <SystemInit+0xec>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002ee8:	4b15      	ldr	r3, [pc, #84]	; (8002f40 <SystemInit+0xec>)
 8002eea:	4a19      	ldr	r2, [pc, #100]	; (8002f50 <SystemInit+0xfc>)
 8002eec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002eee:	4b14      	ldr	r3, [pc, #80]	; (8002f40 <SystemInit+0xec>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002ef4:	4b12      	ldr	r3, [pc, #72]	; (8002f40 <SystemInit+0xec>)
 8002ef6:	4a16      	ldr	r2, [pc, #88]	; (8002f50 <SystemInit+0xfc>)
 8002ef8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002efa:	4b11      	ldr	r3, [pc, #68]	; (8002f40 <SystemInit+0xec>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002f00:	4b0f      	ldr	r3, [pc, #60]	; (8002f40 <SystemInit+0xec>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a0e      	ldr	r2, [pc, #56]	; (8002f40 <SystemInit+0xec>)
 8002f06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f0a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002f0c:	4b0c      	ldr	r3, [pc, #48]	; (8002f40 <SystemInit+0xec>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002f12:	4b10      	ldr	r3, [pc, #64]	; (8002f54 <SystemInit+0x100>)
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	4b10      	ldr	r3, [pc, #64]	; (8002f58 <SystemInit+0x104>)
 8002f18:	4013      	ands	r3, r2
 8002f1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f1e:	d202      	bcs.n	8002f26 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002f20:	4b0e      	ldr	r3, [pc, #56]	; (8002f5c <SystemInit+0x108>)
 8002f22:	2201      	movs	r2, #1
 8002f24:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002f26:	4b0e      	ldr	r3, [pc, #56]	; (8002f60 <SystemInit+0x10c>)
 8002f28:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002f2c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002f2e:	bf00      	nop
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr
 8002f38:	e000ed00 	.word	0xe000ed00
 8002f3c:	52002000 	.word	0x52002000
 8002f40:	58024400 	.word	0x58024400
 8002f44:	eaf6ed7f 	.word	0xeaf6ed7f
 8002f48:	02020200 	.word	0x02020200
 8002f4c:	01ff0000 	.word	0x01ff0000
 8002f50:	01010280 	.word	0x01010280
 8002f54:	5c001000 	.word	0x5c001000
 8002f58:	ffff0000 	.word	0xffff0000
 8002f5c:	51008108 	.word	0x51008108
 8002f60:	52004000 	.word	0x52004000

08002f64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002f64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f9c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002f68:	f7ff ff74 	bl	8002e54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f6c:	480c      	ldr	r0, [pc, #48]	; (8002fa0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002f6e:	490d      	ldr	r1, [pc, #52]	; (8002fa4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002f70:	4a0d      	ldr	r2, [pc, #52]	; (8002fa8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002f72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f74:	e002      	b.n	8002f7c <LoopCopyDataInit>

08002f76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f7a:	3304      	adds	r3, #4

08002f7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f80:	d3f9      	bcc.n	8002f76 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f82:	4a0a      	ldr	r2, [pc, #40]	; (8002fac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002f84:	4c0a      	ldr	r4, [pc, #40]	; (8002fb0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002f86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f88:	e001      	b.n	8002f8e <LoopFillZerobss>

08002f8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f8c:	3204      	adds	r2, #4

08002f8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f90:	d3fb      	bcc.n	8002f8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f92:	f00b fd73 	bl	800ea7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f96:	f7fd fce7 	bl	8000968 <main>
  bx  lr
 8002f9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002f9c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002fa0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002fa4:	240000a0 	.word	0x240000a0
  ldr r2, =_sidata
 8002fa8:	0800f59c 	.word	0x0800f59c
  ldr r2, =_sbss
 8002fac:	24000160 	.word	0x24000160
  ldr r4, =_ebss
 8002fb0:	24000de0 	.word	0x24000de0

08002fb4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002fb4:	e7fe      	b.n	8002fb4 <ADC3_IRQHandler>
	...

08002fb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fbe:	2003      	movs	r0, #3
 8002fc0:	f001 fa44 	bl	800444c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002fc4:	f004 fb82 	bl	80076cc <HAL_RCC_GetSysClockFreq>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	4b15      	ldr	r3, [pc, #84]	; (8003020 <HAL_Init+0x68>)
 8002fcc:	699b      	ldr	r3, [r3, #24]
 8002fce:	0a1b      	lsrs	r3, r3, #8
 8002fd0:	f003 030f 	and.w	r3, r3, #15
 8002fd4:	4913      	ldr	r1, [pc, #76]	; (8003024 <HAL_Init+0x6c>)
 8002fd6:	5ccb      	ldrb	r3, [r1, r3]
 8002fd8:	f003 031f 	and.w	r3, r3, #31
 8002fdc:	fa22 f303 	lsr.w	r3, r2, r3
 8002fe0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002fe2:	4b0f      	ldr	r3, [pc, #60]	; (8003020 <HAL_Init+0x68>)
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	f003 030f 	and.w	r3, r3, #15
 8002fea:	4a0e      	ldr	r2, [pc, #56]	; (8003024 <HAL_Init+0x6c>)
 8002fec:	5cd3      	ldrb	r3, [r2, r3]
 8002fee:	f003 031f 	and.w	r3, r3, #31
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ff8:	4a0b      	ldr	r2, [pc, #44]	; (8003028 <HAL_Init+0x70>)
 8002ffa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ffc:	4a0b      	ldr	r2, [pc, #44]	; (800302c <HAL_Init+0x74>)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003002:	2000      	movs	r0, #0
 8003004:	f000 f814 	bl	8003030 <HAL_InitTick>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d001      	beq.n	8003012 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e002      	b.n	8003018 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003012:	f7fe ff35 	bl	8001e80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003016:	2300      	movs	r3, #0
}
 8003018:	4618      	mov	r0, r3
 800301a:	3708      	adds	r7, #8
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	58024400 	.word	0x58024400
 8003024:	0800f520 	.word	0x0800f520
 8003028:	24000030 	.word	0x24000030
 800302c:	2400002c 	.word	0x2400002c

08003030 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003038:	4b15      	ldr	r3, [pc, #84]	; (8003090 <HAL_InitTick+0x60>)
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d101      	bne.n	8003044 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e021      	b.n	8003088 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003044:	4b13      	ldr	r3, [pc, #76]	; (8003094 <HAL_InitTick+0x64>)
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	4b11      	ldr	r3, [pc, #68]	; (8003090 <HAL_InitTick+0x60>)
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	4619      	mov	r1, r3
 800304e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003052:	fbb3 f3f1 	udiv	r3, r3, r1
 8003056:	fbb2 f3f3 	udiv	r3, r2, r3
 800305a:	4618      	mov	r0, r3
 800305c:	f001 fa29 	bl	80044b2 <HAL_SYSTICK_Config>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e00e      	b.n	8003088 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2b0f      	cmp	r3, #15
 800306e:	d80a      	bhi.n	8003086 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003070:	2200      	movs	r2, #0
 8003072:	6879      	ldr	r1, [r7, #4]
 8003074:	f04f 30ff 	mov.w	r0, #4294967295
 8003078:	f001 f9f3 	bl	8004462 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800307c:	4a06      	ldr	r2, [pc, #24]	; (8003098 <HAL_InitTick+0x68>)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003082:	2300      	movs	r3, #0
 8003084:	e000      	b.n	8003088 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
}
 8003088:	4618      	mov	r0, r3
 800308a:	3708      	adds	r7, #8
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	24000038 	.word	0x24000038
 8003094:	2400002c 	.word	0x2400002c
 8003098:	24000034 	.word	0x24000034

0800309c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80030a0:	4b06      	ldr	r3, [pc, #24]	; (80030bc <HAL_IncTick+0x20>)
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	461a      	mov	r2, r3
 80030a6:	4b06      	ldr	r3, [pc, #24]	; (80030c0 <HAL_IncTick+0x24>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4413      	add	r3, r2
 80030ac:	4a04      	ldr	r2, [pc, #16]	; (80030c0 <HAL_IncTick+0x24>)
 80030ae:	6013      	str	r3, [r2, #0]
}
 80030b0:	bf00      	nop
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	24000038 	.word	0x24000038
 80030c0:	24000dcc 	.word	0x24000dcc

080030c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
  return uwTick;
 80030c8:	4b03      	ldr	r3, [pc, #12]	; (80030d8 <HAL_GetTick+0x14>)
 80030ca:	681b      	ldr	r3, [r3, #0]
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	24000dcc 	.word	0x24000dcc

080030dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030e4:	f7ff ffee 	bl	80030c4 <HAL_GetTick>
 80030e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f4:	d005      	beq.n	8003102 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030f6:	4b0a      	ldr	r3, [pc, #40]	; (8003120 <HAL_Delay+0x44>)
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	461a      	mov	r2, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	4413      	add	r3, r2
 8003100:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003102:	bf00      	nop
 8003104:	f7ff ffde 	bl	80030c4 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	429a      	cmp	r2, r3
 8003112:	d8f7      	bhi.n	8003104 <HAL_Delay+0x28>
  {
  }
}
 8003114:	bf00      	nop
 8003116:	bf00      	nop
 8003118:	3710      	adds	r7, #16
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	24000038 	.word	0x24000038

08003124 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003128:	4b03      	ldr	r3, [pc, #12]	; (8003138 <HAL_GetREVID+0x14>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	0c1b      	lsrs	r3, r3, #16
}
 800312e:	4618      	mov	r0, r3
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr
 8003138:	5c001000 	.word	0x5c001000

0800313c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8003144:	4b06      	ldr	r3, [pc, #24]	; (8003160 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800314c:	4904      	ldr	r1, [pc, #16]	; (8003160 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4313      	orrs	r3, r2
 8003152:	604b      	str	r3, [r1, #4]
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr
 8003160:	58000400 	.word	0x58000400

08003164 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800316e:	4b07      	ldr	r3, [pc, #28]	; (800318c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003170:	685a      	ldr	r2, [r3, #4]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	43db      	mvns	r3, r3
 8003176:	401a      	ands	r2, r3
 8003178:	4904      	ldr	r1, [pc, #16]	; (800318c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	4313      	orrs	r3, r2
 800317e:	604b      	str	r3, [r1, #4]
}
 8003180:	bf00      	nop
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr
 800318c:	58000400 	.word	0x58000400

08003190 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	431a      	orrs	r2, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	609a      	str	r2, [r3, #8]
}
 80031aa:	bf00      	nop
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr

080031b6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80031b6:	b480      	push	{r7}
 80031b8:	b083      	sub	sp, #12
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
 80031be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	431a      	orrs	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	609a      	str	r2, [r3, #8]
}
 80031d0:	bf00      	nop
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b087      	sub	sp, #28
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
 8003204:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	3360      	adds	r3, #96	; 0x60
 800320a:	461a      	mov	r2, r3
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	4413      	add	r3, r2
 8003212:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	430b      	orrs	r3, r1
 8003226:	431a      	orrs	r2, r3
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800322c:	bf00      	nop
 800322e:	371c      	adds	r7, #28
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003238:	b480      	push	{r7}
 800323a:	b085      	sub	sp, #20
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	691b      	ldr	r3, [r3, #16]
 8003248:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	f003 031f 	and.w	r3, r3, #31
 8003252:	6879      	ldr	r1, [r7, #4]
 8003254:	fa01 f303 	lsl.w	r3, r1, r3
 8003258:	431a      	orrs	r2, r3
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	611a      	str	r2, [r3, #16]
}
 800325e:	bf00      	nop
 8003260:	3714      	adds	r7, #20
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr

0800326a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800326a:	b480      	push	{r7}
 800326c:	b087      	sub	sp, #28
 800326e:	af00      	add	r7, sp, #0
 8003270:	60f8      	str	r0, [r7, #12]
 8003272:	60b9      	str	r1, [r7, #8]
 8003274:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	3360      	adds	r3, #96	; 0x60
 800327a:	461a      	mov	r2, r3
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	4413      	add	r3, r2
 8003282:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	431a      	orrs	r2, r3
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	601a      	str	r2, [r3, #0]
  }
}
 8003294:	bf00      	nop
 8003296:	371c      	adds	r7, #28
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b087      	sub	sp, #28
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	3330      	adds	r3, #48	; 0x30
 80032b0:	461a      	mov	r2, r3
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	0a1b      	lsrs	r3, r3, #8
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	f003 030c 	and.w	r3, r3, #12
 80032bc:	4413      	add	r3, r2
 80032be:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	f003 031f 	and.w	r3, r3, #31
 80032ca:	211f      	movs	r1, #31
 80032cc:	fa01 f303 	lsl.w	r3, r1, r3
 80032d0:	43db      	mvns	r3, r3
 80032d2:	401a      	ands	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	0e9b      	lsrs	r3, r3, #26
 80032d8:	f003 011f 	and.w	r1, r3, #31
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	f003 031f 	and.w	r3, r3, #31
 80032e2:	fa01 f303 	lsl.w	r3, r1, r3
 80032e6:	431a      	orrs	r2, r3
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80032ec:	bf00      	nop
 80032ee:	371c      	adds	r7, #28
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b087      	sub	sp, #28
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	3314      	adds	r3, #20
 8003308:	461a      	mov	r2, r3
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	0e5b      	lsrs	r3, r3, #25
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	f003 0304 	and.w	r3, r3, #4
 8003314:	4413      	add	r3, r2
 8003316:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	0d1b      	lsrs	r3, r3, #20
 8003320:	f003 031f 	and.w	r3, r3, #31
 8003324:	2107      	movs	r1, #7
 8003326:	fa01 f303 	lsl.w	r3, r1, r3
 800332a:	43db      	mvns	r3, r3
 800332c:	401a      	ands	r2, r3
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	0d1b      	lsrs	r3, r3, #20
 8003332:	f003 031f 	and.w	r3, r3, #31
 8003336:	6879      	ldr	r1, [r7, #4]
 8003338:	fa01 f303 	lsl.w	r3, r1, r3
 800333c:	431a      	orrs	r2, r3
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003342:	bf00      	nop
 8003344:	371c      	adds	r7, #28
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
	...

08003350 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003350:	b480      	push	{r7}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003368:	43db      	mvns	r3, r3
 800336a:	401a      	ands	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f003 0318 	and.w	r3, r3, #24
 8003372:	4908      	ldr	r1, [pc, #32]	; (8003394 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003374:	40d9      	lsrs	r1, r3
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	400b      	ands	r3, r1
 800337a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800337e:	431a      	orrs	r2, r3
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003386:	bf00      	nop
 8003388:	3714      	adds	r7, #20
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	000fffff 	.word	0x000fffff

08003398 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	689a      	ldr	r2, [r3, #8]
 80033a4:	4b04      	ldr	r3, [pc, #16]	; (80033b8 <LL_ADC_DisableDeepPowerDown+0x20>)
 80033a6:	4013      	ands	r3, r2
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	6093      	str	r3, [r2, #8]
}
 80033ac:	bf00      	nop
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr
 80033b8:	5fffffc0 	.word	0x5fffffc0

080033bc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033d0:	d101      	bne.n	80033d6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80033d2:	2301      	movs	r3, #1
 80033d4:	e000      	b.n	80033d8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	689a      	ldr	r2, [r3, #8]
 80033f0:	4b05      	ldr	r3, [pc, #20]	; (8003408 <LL_ADC_EnableInternalRegulator+0x24>)
 80033f2:	4013      	ands	r3, r2
 80033f4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80033fc:	bf00      	nop
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr
 8003408:	6fffffc0 	.word	0x6fffffc0

0800340c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800341c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003420:	d101      	bne.n	8003426 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003422:	2301      	movs	r3, #1
 8003424:	e000      	b.n	8003428 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f003 0301 	and.w	r3, r3, #1
 8003444:	2b01      	cmp	r3, #1
 8003446:	d101      	bne.n	800344c <LL_ADC_IsEnabled+0x18>
 8003448:	2301      	movs	r3, #1
 800344a:	e000      	b.n	800344e <LL_ADC_IsEnabled+0x1a>
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr

0800345a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800345a:	b480      	push	{r7}
 800345c:	b083      	sub	sp, #12
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f003 0304 	and.w	r3, r3, #4
 800346a:	2b04      	cmp	r3, #4
 800346c:	d101      	bne.n	8003472 <LL_ADC_REG_IsConversionOngoing+0x18>
 800346e:	2301      	movs	r3, #1
 8003470:	e000      	b.n	8003474 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003472:	2300      	movs	r3, #0
}
 8003474:	4618      	mov	r0, r3
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f003 0308 	and.w	r3, r3, #8
 8003490:	2b08      	cmp	r3, #8
 8003492:	d101      	bne.n	8003498 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003494:	2301      	movs	r3, #1
 8003496:	e000      	b.n	800349a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	370c      	adds	r7, #12
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
	...

080034a8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80034a8:	b590      	push	{r4, r7, lr}
 80034aa:	b089      	sub	sp, #36	; 0x24
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034b0:	2300      	movs	r3, #0
 80034b2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80034b4:	2300      	movs	r3, #0
 80034b6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e18f      	b.n	80037e2 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d109      	bne.n	80034e4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f7fe fcef 	bl	8001eb4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7ff ff67 	bl	80033bc <LL_ADC_IsDeepPowerDownEnabled>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d004      	beq.n	80034fe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7ff ff4d 	bl	8003398 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4618      	mov	r0, r3
 8003504:	f7ff ff82 	bl	800340c <LL_ADC_IsInternalRegulatorEnabled>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d114      	bne.n	8003538 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4618      	mov	r0, r3
 8003514:	f7ff ff66 	bl	80033e4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003518:	4b87      	ldr	r3, [pc, #540]	; (8003738 <HAL_ADC_Init+0x290>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	099b      	lsrs	r3, r3, #6
 800351e:	4a87      	ldr	r2, [pc, #540]	; (800373c <HAL_ADC_Init+0x294>)
 8003520:	fba2 2303 	umull	r2, r3, r2, r3
 8003524:	099b      	lsrs	r3, r3, #6
 8003526:	3301      	adds	r3, #1
 8003528:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800352a:	e002      	b.n	8003532 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	3b01      	subs	r3, #1
 8003530:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d1f9      	bne.n	800352c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4618      	mov	r0, r3
 800353e:	f7ff ff65 	bl	800340c <LL_ADC_IsInternalRegulatorEnabled>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d10d      	bne.n	8003564 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800354c:	f043 0210 	orr.w	r2, r3, #16
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003558:	f043 0201 	orr.w	r2, r3, #1
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4618      	mov	r0, r3
 800356a:	f7ff ff76 	bl	800345a <LL_ADC_REG_IsConversionOngoing>
 800356e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003574:	f003 0310 	and.w	r3, r3, #16
 8003578:	2b00      	cmp	r3, #0
 800357a:	f040 8129 	bne.w	80037d0 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	2b00      	cmp	r3, #0
 8003582:	f040 8125 	bne.w	80037d0 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800358a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800358e:	f043 0202 	orr.w	r2, r3, #2
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4618      	mov	r0, r3
 800359c:	f7ff ff4a 	bl	8003434 <LL_ADC_IsEnabled>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d136      	bne.n	8003614 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a65      	ldr	r2, [pc, #404]	; (8003740 <HAL_ADC_Init+0x298>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d004      	beq.n	80035ba <HAL_ADC_Init+0x112>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a63      	ldr	r2, [pc, #396]	; (8003744 <HAL_ADC_Init+0x29c>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d10e      	bne.n	80035d8 <HAL_ADC_Init+0x130>
 80035ba:	4861      	ldr	r0, [pc, #388]	; (8003740 <HAL_ADC_Init+0x298>)
 80035bc:	f7ff ff3a 	bl	8003434 <LL_ADC_IsEnabled>
 80035c0:	4604      	mov	r4, r0
 80035c2:	4860      	ldr	r0, [pc, #384]	; (8003744 <HAL_ADC_Init+0x29c>)
 80035c4:	f7ff ff36 	bl	8003434 <LL_ADC_IsEnabled>
 80035c8:	4603      	mov	r3, r0
 80035ca:	4323      	orrs	r3, r4
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	bf0c      	ite	eq
 80035d0:	2301      	moveq	r3, #1
 80035d2:	2300      	movne	r3, #0
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	e008      	b.n	80035ea <HAL_ADC_Init+0x142>
 80035d8:	485b      	ldr	r0, [pc, #364]	; (8003748 <HAL_ADC_Init+0x2a0>)
 80035da:	f7ff ff2b 	bl	8003434 <LL_ADC_IsEnabled>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	bf0c      	ite	eq
 80035e4:	2301      	moveq	r3, #1
 80035e6:	2300      	movne	r3, #0
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d012      	beq.n	8003614 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a53      	ldr	r2, [pc, #332]	; (8003740 <HAL_ADC_Init+0x298>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d004      	beq.n	8003602 <HAL_ADC_Init+0x15a>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a51      	ldr	r2, [pc, #324]	; (8003744 <HAL_ADC_Init+0x29c>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d101      	bne.n	8003606 <HAL_ADC_Init+0x15e>
 8003602:	4a52      	ldr	r2, [pc, #328]	; (800374c <HAL_ADC_Init+0x2a4>)
 8003604:	e000      	b.n	8003608 <HAL_ADC_Init+0x160>
 8003606:	4a52      	ldr	r2, [pc, #328]	; (8003750 <HAL_ADC_Init+0x2a8>)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	4619      	mov	r1, r3
 800360e:	4610      	mov	r0, r2
 8003610:	f7ff fdbe 	bl	8003190 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003614:	f7ff fd86 	bl	8003124 <HAL_GetREVID>
 8003618:	4603      	mov	r3, r0
 800361a:	f241 0203 	movw	r2, #4099	; 0x1003
 800361e:	4293      	cmp	r3, r2
 8003620:	d914      	bls.n	800364c <HAL_ADC_Init+0x1a4>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	2b10      	cmp	r3, #16
 8003628:	d110      	bne.n	800364c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	7d5b      	ldrb	r3, [r3, #21]
 800362e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003634:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800363a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	7f1b      	ldrb	r3, [r3, #28]
 8003640:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003642:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003644:	f043 030c 	orr.w	r3, r3, #12
 8003648:	61bb      	str	r3, [r7, #24]
 800364a:	e00d      	b.n	8003668 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	7d5b      	ldrb	r3, [r3, #21]
 8003650:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003656:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800365c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	7f1b      	ldrb	r3, [r3, #28]
 8003662:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003664:	4313      	orrs	r3, r2
 8003666:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	7f1b      	ldrb	r3, [r3, #28]
 800366c:	2b01      	cmp	r3, #1
 800366e:	d106      	bne.n	800367e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a1b      	ldr	r3, [r3, #32]
 8003674:	3b01      	subs	r3, #1
 8003676:	045b      	lsls	r3, r3, #17
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	4313      	orrs	r3, r2
 800367c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003682:	2b00      	cmp	r3, #0
 8003684:	d009      	beq.n	800369a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003692:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	4313      	orrs	r3, r2
 8003698:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68da      	ldr	r2, [r3, #12]
 80036a0:	4b2c      	ldr	r3, [pc, #176]	; (8003754 <HAL_ADC_Init+0x2ac>)
 80036a2:	4013      	ands	r3, r2
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	6812      	ldr	r2, [r2, #0]
 80036a8:	69b9      	ldr	r1, [r7, #24]
 80036aa:	430b      	orrs	r3, r1
 80036ac:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7ff fed1 	bl	800345a <LL_ADC_REG_IsConversionOngoing>
 80036b8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4618      	mov	r0, r3
 80036c0:	f7ff fede 	bl	8003480 <LL_ADC_INJ_IsConversionOngoing>
 80036c4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d15f      	bne.n	800378c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d15c      	bne.n	800378c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	7d1b      	ldrb	r3, [r3, #20]
 80036d6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80036dc:	4313      	orrs	r3, r2
 80036de:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68da      	ldr	r2, [r3, #12]
 80036e6:	4b1c      	ldr	r3, [pc, #112]	; (8003758 <HAL_ADC_Init+0x2b0>)
 80036e8:	4013      	ands	r3, r2
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	6812      	ldr	r2, [r2, #0]
 80036ee:	69b9      	ldr	r1, [r7, #24]
 80036f0:	430b      	orrs	r3, r1
 80036f2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d130      	bne.n	8003760 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003702:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	691a      	ldr	r2, [r3, #16]
 800370a:	4b14      	ldr	r3, [pc, #80]	; (800375c <HAL_ADC_Init+0x2b4>)
 800370c:	4013      	ands	r3, r2
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003712:	3a01      	subs	r2, #1
 8003714:	0411      	lsls	r1, r2, #16
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800371a:	4311      	orrs	r1, r2
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003720:	4311      	orrs	r1, r2
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003726:	430a      	orrs	r2, r1
 8003728:	431a      	orrs	r2, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f042 0201 	orr.w	r2, r2, #1
 8003732:	611a      	str	r2, [r3, #16]
 8003734:	e01c      	b.n	8003770 <HAL_ADC_Init+0x2c8>
 8003736:	bf00      	nop
 8003738:	2400002c 	.word	0x2400002c
 800373c:	053e2d63 	.word	0x053e2d63
 8003740:	40022000 	.word	0x40022000
 8003744:	40022100 	.word	0x40022100
 8003748:	58026000 	.word	0x58026000
 800374c:	40022300 	.word	0x40022300
 8003750:	58026300 	.word	0x58026300
 8003754:	fff0c003 	.word	0xfff0c003
 8003758:	ffffbffc 	.word	0xffffbffc
 800375c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	691a      	ldr	r2, [r3, #16]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f022 0201 	bic.w	r2, r2, #1
 800376e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	430a      	orrs	r2, r1
 8003784:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 fb80 	bl	8003e8c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	2b01      	cmp	r3, #1
 8003792:	d10c      	bne.n	80037ae <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379a:	f023 010f 	bic.w	r1, r3, #15
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	1e5a      	subs	r2, r3, #1
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	430a      	orrs	r2, r1
 80037aa:	631a      	str	r2, [r3, #48]	; 0x30
 80037ac:	e007      	b.n	80037be <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f022 020f 	bic.w	r2, r2, #15
 80037bc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037c2:	f023 0303 	bic.w	r3, r3, #3
 80037c6:	f043 0201 	orr.w	r2, r3, #1
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	655a      	str	r2, [r3, #84]	; 0x54
 80037ce:	e007      	b.n	80037e0 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d4:	f043 0210 	orr.w	r2, r3, #16
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80037e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3724      	adds	r7, #36	; 0x24
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd90      	pop	{r4, r7, pc}
 80037ea:	bf00      	nop

080037ec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80037ec:	b590      	push	{r4, r7, lr}
 80037ee:	b0a1      	sub	sp, #132	; 0x84
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037f6:	2300      	movs	r3, #0
 80037f8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80037fc:	2300      	movs	r3, #0
 80037fe:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	4a9d      	ldr	r2, [pc, #628]	; (8003a7c <HAL_ADC_ConfigChannel+0x290>)
 8003806:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800380e:	2b01      	cmp	r3, #1
 8003810:	d101      	bne.n	8003816 <HAL_ADC_ConfigChannel+0x2a>
 8003812:	2302      	movs	r3, #2
 8003814:	e321      	b.n	8003e5a <HAL_ADC_ConfigChannel+0x66e>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2201      	movs	r2, #1
 800381a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4618      	mov	r0, r3
 8003824:	f7ff fe19 	bl	800345a <LL_ADC_REG_IsConversionOngoing>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	f040 8306 	bne.w	8003e3c <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003838:	2b00      	cmp	r3, #0
 800383a:	d108      	bne.n	800384e <HAL_ADC_ConfigChannel+0x62>
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	0e9b      	lsrs	r3, r3, #26
 8003842:	f003 031f 	and.w	r3, r3, #31
 8003846:	2201      	movs	r2, #1
 8003848:	fa02 f303 	lsl.w	r3, r2, r3
 800384c:	e016      	b.n	800387c <HAL_ADC_ConfigChannel+0x90>
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003854:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003856:	fa93 f3a3 	rbit	r3, r3
 800385a:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800385c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800385e:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003860:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003862:	2b00      	cmp	r3, #0
 8003864:	d101      	bne.n	800386a <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8003866:	2320      	movs	r3, #32
 8003868:	e003      	b.n	8003872 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800386a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800386c:	fab3 f383 	clz	r3, r3
 8003870:	b2db      	uxtb	r3, r3
 8003872:	f003 031f 	and.w	r3, r3, #31
 8003876:	2201      	movs	r2, #1
 8003878:	fa02 f303 	lsl.w	r3, r2, r3
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	6812      	ldr	r2, [r2, #0]
 8003880:	69d1      	ldr	r1, [r2, #28]
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	6812      	ldr	r2, [r2, #0]
 8003886:	430b      	orrs	r3, r1
 8003888:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6818      	ldr	r0, [r3, #0]
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	6859      	ldr	r1, [r3, #4]
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	461a      	mov	r2, r3
 8003898:	f7ff fd02 	bl	80032a0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7ff fdda 	bl	800345a <LL_ADC_REG_IsConversionOngoing>
 80038a6:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4618      	mov	r0, r3
 80038ae:	f7ff fde7 	bl	8003480 <LL_ADC_INJ_IsConversionOngoing>
 80038b2:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80038b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	f040 80b3 	bne.w	8003a22 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80038bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038be:	2b00      	cmp	r3, #0
 80038c0:	f040 80af 	bne.w	8003a22 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6818      	ldr	r0, [r3, #0]
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	6819      	ldr	r1, [r3, #0]
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	461a      	mov	r2, r3
 80038d2:	f7ff fd11 	bl	80032f8 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80038d6:	4b6a      	ldr	r3, [pc, #424]	; (8003a80 <HAL_ADC_ConfigChannel+0x294>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80038de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038e2:	d10b      	bne.n	80038fc <HAL_ADC_ConfigChannel+0x110>
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	695a      	ldr	r2, [r3, #20]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	089b      	lsrs	r3, r3, #2
 80038f0:	f003 0307 	and.w	r3, r3, #7
 80038f4:	005b      	lsls	r3, r3, #1
 80038f6:	fa02 f303 	lsl.w	r3, r2, r3
 80038fa:	e01d      	b.n	8003938 <HAL_ADC_ConfigChannel+0x14c>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	f003 0310 	and.w	r3, r3, #16
 8003906:	2b00      	cmp	r3, #0
 8003908:	d10b      	bne.n	8003922 <HAL_ADC_ConfigChannel+0x136>
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	695a      	ldr	r2, [r3, #20]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	089b      	lsrs	r3, r3, #2
 8003916:	f003 0307 	and.w	r3, r3, #7
 800391a:	005b      	lsls	r3, r3, #1
 800391c:	fa02 f303 	lsl.w	r3, r2, r3
 8003920:	e00a      	b.n	8003938 <HAL_ADC_ConfigChannel+0x14c>
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	695a      	ldr	r2, [r3, #20]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	089b      	lsrs	r3, r3, #2
 800392e:	f003 0304 	and.w	r3, r3, #4
 8003932:	005b      	lsls	r3, r3, #1
 8003934:	fa02 f303 	lsl.w	r3, r2, r3
 8003938:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	2b04      	cmp	r3, #4
 8003940:	d027      	beq.n	8003992 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6818      	ldr	r0, [r3, #0]
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	6919      	ldr	r1, [r3, #16]
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003950:	f7ff fc52 	bl	80031f8 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6818      	ldr	r0, [r3, #0]
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	6919      	ldr	r1, [r3, #16]
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	7e5b      	ldrb	r3, [r3, #25]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d102      	bne.n	800396a <HAL_ADC_ConfigChannel+0x17e>
 8003964:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003968:	e000      	b.n	800396c <HAL_ADC_ConfigChannel+0x180>
 800396a:	2300      	movs	r3, #0
 800396c:	461a      	mov	r2, r3
 800396e:	f7ff fc7c 	bl	800326a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6818      	ldr	r0, [r3, #0]
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	6919      	ldr	r1, [r3, #16]
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	7e1b      	ldrb	r3, [r3, #24]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d102      	bne.n	8003988 <HAL_ADC_ConfigChannel+0x19c>
 8003982:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003986:	e000      	b.n	800398a <HAL_ADC_ConfigChannel+0x19e>
 8003988:	2300      	movs	r3, #0
 800398a:	461a      	mov	r2, r3
 800398c:	f7ff fc54 	bl	8003238 <LL_ADC_SetDataRightShift>
 8003990:	e047      	b.n	8003a22 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003998:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	069b      	lsls	r3, r3, #26
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d107      	bne.n	80039b6 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80039b4:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039bc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	069b      	lsls	r3, r3, #26
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d107      	bne.n	80039da <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80039d8:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039e0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	069b      	lsls	r3, r3, #26
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d107      	bne.n	80039fe <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80039fc:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a04:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	069b      	lsls	r3, r3, #26
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d107      	bne.n	8003a22 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003a20:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7ff fd04 	bl	8003434 <LL_ADC_IsEnabled>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	f040 820d 	bne.w	8003e4e <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6818      	ldr	r0, [r3, #0]
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	6819      	ldr	r1, [r3, #0]
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	461a      	mov	r2, r3
 8003a42:	f7ff fc85 	bl	8003350 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	4a0c      	ldr	r2, [pc, #48]	; (8003a7c <HAL_ADC_ConfigChannel+0x290>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	f040 8133 	bne.w	8003cb8 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d110      	bne.n	8003a84 <HAL_ADC_ConfigChannel+0x298>
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	0e9b      	lsrs	r3, r3, #26
 8003a68:	3301      	adds	r3, #1
 8003a6a:	f003 031f 	and.w	r3, r3, #31
 8003a6e:	2b09      	cmp	r3, #9
 8003a70:	bf94      	ite	ls
 8003a72:	2301      	movls	r3, #1
 8003a74:	2300      	movhi	r3, #0
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	e01e      	b.n	8003ab8 <HAL_ADC_ConfigChannel+0x2cc>
 8003a7a:	bf00      	nop
 8003a7c:	47ff0000 	.word	0x47ff0000
 8003a80:	5c001000 	.word	0x5c001000
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a8c:	fa93 f3a3 	rbit	r3, r3
 8003a90:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003a92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a94:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003a96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d101      	bne.n	8003aa0 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8003a9c:	2320      	movs	r3, #32
 8003a9e:	e003      	b.n	8003aa8 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003aa0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003aa2:	fab3 f383 	clz	r3, r3
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	f003 031f 	and.w	r3, r3, #31
 8003aae:	2b09      	cmp	r3, #9
 8003ab0:	bf94      	ite	ls
 8003ab2:	2301      	movls	r3, #1
 8003ab4:	2300      	movhi	r3, #0
 8003ab6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d079      	beq.n	8003bb0 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d107      	bne.n	8003ad8 <HAL_ADC_ConfigChannel+0x2ec>
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	0e9b      	lsrs	r3, r3, #26
 8003ace:	3301      	adds	r3, #1
 8003ad0:	069b      	lsls	r3, r3, #26
 8003ad2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ad6:	e015      	b.n	8003b04 <HAL_ADC_ConfigChannel+0x318>
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ade:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ae0:	fa93 f3a3 	rbit	r3, r3
 8003ae4:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003ae6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ae8:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003aea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d101      	bne.n	8003af4 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8003af0:	2320      	movs	r3, #32
 8003af2:	e003      	b.n	8003afc <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003af4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003af6:	fab3 f383 	clz	r3, r3
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	3301      	adds	r3, #1
 8003afe:	069b      	lsls	r3, r3, #26
 8003b00:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d109      	bne.n	8003b24 <HAL_ADC_ConfigChannel+0x338>
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	0e9b      	lsrs	r3, r3, #26
 8003b16:	3301      	adds	r3, #1
 8003b18:	f003 031f 	and.w	r3, r3, #31
 8003b1c:	2101      	movs	r1, #1
 8003b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b22:	e017      	b.n	8003b54 <HAL_ADC_ConfigChannel+0x368>
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b2c:	fa93 f3a3 	rbit	r3, r3
 8003b30:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003b32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b34:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003b36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d101      	bne.n	8003b40 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8003b3c:	2320      	movs	r3, #32
 8003b3e:	e003      	b.n	8003b48 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8003b40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b42:	fab3 f383 	clz	r3, r3
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	3301      	adds	r3, #1
 8003b4a:	f003 031f 	and.w	r3, r3, #31
 8003b4e:	2101      	movs	r1, #1
 8003b50:	fa01 f303 	lsl.w	r3, r1, r3
 8003b54:	ea42 0103 	orr.w	r1, r2, r3
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d10a      	bne.n	8003b7a <HAL_ADC_ConfigChannel+0x38e>
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	0e9b      	lsrs	r3, r3, #26
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	f003 021f 	and.w	r2, r3, #31
 8003b70:	4613      	mov	r3, r2
 8003b72:	005b      	lsls	r3, r3, #1
 8003b74:	4413      	add	r3, r2
 8003b76:	051b      	lsls	r3, r3, #20
 8003b78:	e018      	b.n	8003bac <HAL_ADC_ConfigChannel+0x3c0>
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b82:	fa93 f3a3 	rbit	r3, r3
 8003b86:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b8a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d101      	bne.n	8003b96 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8003b92:	2320      	movs	r3, #32
 8003b94:	e003      	b.n	8003b9e <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8003b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b98:	fab3 f383 	clz	r3, r3
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	f003 021f 	and.w	r2, r3, #31
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	005b      	lsls	r3, r3, #1
 8003ba8:	4413      	add	r3, r2
 8003baa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003bac:	430b      	orrs	r3, r1
 8003bae:	e07e      	b.n	8003cae <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d107      	bne.n	8003bcc <HAL_ADC_ConfigChannel+0x3e0>
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	0e9b      	lsrs	r3, r3, #26
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	069b      	lsls	r3, r3, #26
 8003bc6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003bca:	e015      	b.n	8003bf8 <HAL_ADC_ConfigChannel+0x40c>
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd4:	fa93 f3a3 	rbit	r3, r3
 8003bd8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d101      	bne.n	8003be8 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003be4:	2320      	movs	r3, #32
 8003be6:	e003      	b.n	8003bf0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bea:	fab3 f383 	clz	r3, r3
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	069b      	lsls	r3, r3, #26
 8003bf4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d109      	bne.n	8003c18 <HAL_ADC_ConfigChannel+0x42c>
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	0e9b      	lsrs	r3, r3, #26
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	f003 031f 	and.w	r3, r3, #31
 8003c10:	2101      	movs	r1, #1
 8003c12:	fa01 f303 	lsl.w	r3, r1, r3
 8003c16:	e017      	b.n	8003c48 <HAL_ADC_ConfigChannel+0x45c>
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	fa93 f3a3 	rbit	r3, r3
 8003c24:	61bb      	str	r3, [r7, #24]
  return result;
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003c2a:	6a3b      	ldr	r3, [r7, #32]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d101      	bne.n	8003c34 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8003c30:	2320      	movs	r3, #32
 8003c32:	e003      	b.n	8003c3c <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8003c34:	6a3b      	ldr	r3, [r7, #32]
 8003c36:	fab3 f383 	clz	r3, r3
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	f003 031f 	and.w	r3, r3, #31
 8003c42:	2101      	movs	r1, #1
 8003c44:	fa01 f303 	lsl.w	r3, r1, r3
 8003c48:	ea42 0103 	orr.w	r1, r2, r3
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d10d      	bne.n	8003c74 <HAL_ADC_ConfigChannel+0x488>
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	0e9b      	lsrs	r3, r3, #26
 8003c5e:	3301      	adds	r3, #1
 8003c60:	f003 021f 	and.w	r2, r3, #31
 8003c64:	4613      	mov	r3, r2
 8003c66:	005b      	lsls	r3, r3, #1
 8003c68:	4413      	add	r3, r2
 8003c6a:	3b1e      	subs	r3, #30
 8003c6c:	051b      	lsls	r3, r3, #20
 8003c6e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c72:	e01b      	b.n	8003cac <HAL_ADC_ConfigChannel+0x4c0>
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	fa93 f3a3 	rbit	r3, r3
 8003c80:	60fb      	str	r3, [r7, #12]
  return result;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d101      	bne.n	8003c90 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8003c8c:	2320      	movs	r3, #32
 8003c8e:	e003      	b.n	8003c98 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	fab3 f383 	clz	r3, r3
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	3301      	adds	r3, #1
 8003c9a:	f003 021f 	and.w	r2, r3, #31
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	4413      	add	r3, r2
 8003ca4:	3b1e      	subs	r3, #30
 8003ca6:	051b      	lsls	r3, r3, #20
 8003ca8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003cac:	430b      	orrs	r3, r1
 8003cae:	683a      	ldr	r2, [r7, #0]
 8003cb0:	6892      	ldr	r2, [r2, #8]
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	f7ff fb20 	bl	80032f8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	f280 80c6 	bge.w	8003e4e <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a67      	ldr	r2, [pc, #412]	; (8003e64 <HAL_ADC_ConfigChannel+0x678>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d004      	beq.n	8003cd6 <HAL_ADC_ConfigChannel+0x4ea>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a65      	ldr	r2, [pc, #404]	; (8003e68 <HAL_ADC_ConfigChannel+0x67c>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d101      	bne.n	8003cda <HAL_ADC_ConfigChannel+0x4ee>
 8003cd6:	4b65      	ldr	r3, [pc, #404]	; (8003e6c <HAL_ADC_ConfigChannel+0x680>)
 8003cd8:	e000      	b.n	8003cdc <HAL_ADC_ConfigChannel+0x4f0>
 8003cda:	4b65      	ldr	r3, [pc, #404]	; (8003e70 <HAL_ADC_ConfigChannel+0x684>)
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f7ff fa7d 	bl	80031dc <LL_ADC_GetCommonPathInternalCh>
 8003ce2:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a5e      	ldr	r2, [pc, #376]	; (8003e64 <HAL_ADC_ConfigChannel+0x678>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d004      	beq.n	8003cf8 <HAL_ADC_ConfigChannel+0x50c>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a5d      	ldr	r2, [pc, #372]	; (8003e68 <HAL_ADC_ConfigChannel+0x67c>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d10e      	bne.n	8003d16 <HAL_ADC_ConfigChannel+0x52a>
 8003cf8:	485a      	ldr	r0, [pc, #360]	; (8003e64 <HAL_ADC_ConfigChannel+0x678>)
 8003cfa:	f7ff fb9b 	bl	8003434 <LL_ADC_IsEnabled>
 8003cfe:	4604      	mov	r4, r0
 8003d00:	4859      	ldr	r0, [pc, #356]	; (8003e68 <HAL_ADC_ConfigChannel+0x67c>)
 8003d02:	f7ff fb97 	bl	8003434 <LL_ADC_IsEnabled>
 8003d06:	4603      	mov	r3, r0
 8003d08:	4323      	orrs	r3, r4
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	bf0c      	ite	eq
 8003d0e:	2301      	moveq	r3, #1
 8003d10:	2300      	movne	r3, #0
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	e008      	b.n	8003d28 <HAL_ADC_ConfigChannel+0x53c>
 8003d16:	4857      	ldr	r0, [pc, #348]	; (8003e74 <HAL_ADC_ConfigChannel+0x688>)
 8003d18:	f7ff fb8c 	bl	8003434 <LL_ADC_IsEnabled>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	bf0c      	ite	eq
 8003d22:	2301      	moveq	r3, #1
 8003d24:	2300      	movne	r3, #0
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d07d      	beq.n	8003e28 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a51      	ldr	r2, [pc, #324]	; (8003e78 <HAL_ADC_ConfigChannel+0x68c>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d130      	bne.n	8003d98 <HAL_ADC_ConfigChannel+0x5ac>
 8003d36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d12b      	bne.n	8003d98 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a4b      	ldr	r2, [pc, #300]	; (8003e74 <HAL_ADC_ConfigChannel+0x688>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	f040 8081 	bne.w	8003e4e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a44      	ldr	r2, [pc, #272]	; (8003e64 <HAL_ADC_ConfigChannel+0x678>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d004      	beq.n	8003d60 <HAL_ADC_ConfigChannel+0x574>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a43      	ldr	r2, [pc, #268]	; (8003e68 <HAL_ADC_ConfigChannel+0x67c>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d101      	bne.n	8003d64 <HAL_ADC_ConfigChannel+0x578>
 8003d60:	4a42      	ldr	r2, [pc, #264]	; (8003e6c <HAL_ADC_ConfigChannel+0x680>)
 8003d62:	e000      	b.n	8003d66 <HAL_ADC_ConfigChannel+0x57a>
 8003d64:	4a42      	ldr	r2, [pc, #264]	; (8003e70 <HAL_ADC_ConfigChannel+0x684>)
 8003d66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d68:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	4610      	mov	r0, r2
 8003d70:	f7ff fa21 	bl	80031b6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d74:	4b41      	ldr	r3, [pc, #260]	; (8003e7c <HAL_ADC_ConfigChannel+0x690>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	099b      	lsrs	r3, r3, #6
 8003d7a:	4a41      	ldr	r2, [pc, #260]	; (8003e80 <HAL_ADC_ConfigChannel+0x694>)
 8003d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d80:	099b      	lsrs	r3, r3, #6
 8003d82:	3301      	adds	r3, #1
 8003d84:	005b      	lsls	r3, r3, #1
 8003d86:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003d88:	e002      	b.n	8003d90 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	3b01      	subs	r3, #1
 8003d8e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1f9      	bne.n	8003d8a <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003d96:	e05a      	b.n	8003e4e <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a39      	ldr	r2, [pc, #228]	; (8003e84 <HAL_ADC_ConfigChannel+0x698>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d11e      	bne.n	8003de0 <HAL_ADC_ConfigChannel+0x5f4>
 8003da2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003da4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d119      	bne.n	8003de0 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a30      	ldr	r2, [pc, #192]	; (8003e74 <HAL_ADC_ConfigChannel+0x688>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d14b      	bne.n	8003e4e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a2a      	ldr	r2, [pc, #168]	; (8003e64 <HAL_ADC_ConfigChannel+0x678>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d004      	beq.n	8003dca <HAL_ADC_ConfigChannel+0x5de>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a28      	ldr	r2, [pc, #160]	; (8003e68 <HAL_ADC_ConfigChannel+0x67c>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d101      	bne.n	8003dce <HAL_ADC_ConfigChannel+0x5e2>
 8003dca:	4a28      	ldr	r2, [pc, #160]	; (8003e6c <HAL_ADC_ConfigChannel+0x680>)
 8003dcc:	e000      	b.n	8003dd0 <HAL_ADC_ConfigChannel+0x5e4>
 8003dce:	4a28      	ldr	r2, [pc, #160]	; (8003e70 <HAL_ADC_ConfigChannel+0x684>)
 8003dd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	4610      	mov	r0, r2
 8003dda:	f7ff f9ec 	bl	80031b6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003dde:	e036      	b.n	8003e4e <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a28      	ldr	r2, [pc, #160]	; (8003e88 <HAL_ADC_ConfigChannel+0x69c>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d131      	bne.n	8003e4e <HAL_ADC_ConfigChannel+0x662>
 8003dea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d12c      	bne.n	8003e4e <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a1e      	ldr	r2, [pc, #120]	; (8003e74 <HAL_ADC_ConfigChannel+0x688>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d127      	bne.n	8003e4e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a18      	ldr	r2, [pc, #96]	; (8003e64 <HAL_ADC_ConfigChannel+0x678>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d004      	beq.n	8003e12 <HAL_ADC_ConfigChannel+0x626>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a16      	ldr	r2, [pc, #88]	; (8003e68 <HAL_ADC_ConfigChannel+0x67c>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d101      	bne.n	8003e16 <HAL_ADC_ConfigChannel+0x62a>
 8003e12:	4a16      	ldr	r2, [pc, #88]	; (8003e6c <HAL_ADC_ConfigChannel+0x680>)
 8003e14:	e000      	b.n	8003e18 <HAL_ADC_ConfigChannel+0x62c>
 8003e16:	4a16      	ldr	r2, [pc, #88]	; (8003e70 <HAL_ADC_ConfigChannel+0x684>)
 8003e18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e1a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003e1e:	4619      	mov	r1, r3
 8003e20:	4610      	mov	r0, r2
 8003e22:	f7ff f9c8 	bl	80031b6 <LL_ADC_SetCommonPathInternalCh>
 8003e26:	e012      	b.n	8003e4e <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e2c:	f043 0220 	orr.w	r2, r3, #32
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003e3a:	e008      	b.n	8003e4e <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e40:	f043 0220 	orr.w	r2, r3, #32
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003e56:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3784      	adds	r7, #132	; 0x84
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd90      	pop	{r4, r7, pc}
 8003e62:	bf00      	nop
 8003e64:	40022000 	.word	0x40022000
 8003e68:	40022100 	.word	0x40022100
 8003e6c:	40022300 	.word	0x40022300
 8003e70:	58026300 	.word	0x58026300
 8003e74:	58026000 	.word	0x58026000
 8003e78:	cb840000 	.word	0xcb840000
 8003e7c:	2400002c 	.word	0x2400002c
 8003e80:	053e2d63 	.word	0x053e2d63
 8003e84:	c7520000 	.word	0xc7520000
 8003e88:	cfb80000 	.word	0xcfb80000

08003e8c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a7a      	ldr	r2, [pc, #488]	; (8004084 <ADC_ConfigureBoostMode+0x1f8>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d004      	beq.n	8003ea8 <ADC_ConfigureBoostMode+0x1c>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a79      	ldr	r2, [pc, #484]	; (8004088 <ADC_ConfigureBoostMode+0x1fc>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d109      	bne.n	8003ebc <ADC_ConfigureBoostMode+0x30>
 8003ea8:	4b78      	ldr	r3, [pc, #480]	; (800408c <ADC_ConfigureBoostMode+0x200>)
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	bf14      	ite	ne
 8003eb4:	2301      	movne	r3, #1
 8003eb6:	2300      	moveq	r3, #0
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	e008      	b.n	8003ece <ADC_ConfigureBoostMode+0x42>
 8003ebc:	4b74      	ldr	r3, [pc, #464]	; (8004090 <ADC_ConfigureBoostMode+0x204>)
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	bf14      	ite	ne
 8003ec8:	2301      	movne	r3, #1
 8003eca:	2300      	moveq	r3, #0
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d01c      	beq.n	8003f0c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003ed2:	f003 fd75 	bl	80079c0 <HAL_RCC_GetHCLKFreq>
 8003ed6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003ee0:	d010      	beq.n	8003f04 <ADC_ConfigureBoostMode+0x78>
 8003ee2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003ee6:	d873      	bhi.n	8003fd0 <ADC_ConfigureBoostMode+0x144>
 8003ee8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eec:	d002      	beq.n	8003ef4 <ADC_ConfigureBoostMode+0x68>
 8003eee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ef2:	d16d      	bne.n	8003fd0 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	0c1b      	lsrs	r3, r3, #16
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f00:	60fb      	str	r3, [r7, #12]
        break;
 8003f02:	e068      	b.n	8003fd6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	089b      	lsrs	r3, r3, #2
 8003f08:	60fb      	str	r3, [r7, #12]
        break;
 8003f0a:	e064      	b.n	8003fd6 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003f0c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003f10:	f04f 0100 	mov.w	r1, #0
 8003f14:	f004 ffba 	bl	8008e8c <HAL_RCCEx_GetPeriphCLKFreq>
 8003f18:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003f22:	d051      	beq.n	8003fc8 <ADC_ConfigureBoostMode+0x13c>
 8003f24:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003f28:	d854      	bhi.n	8003fd4 <ADC_ConfigureBoostMode+0x148>
 8003f2a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003f2e:	d047      	beq.n	8003fc0 <ADC_ConfigureBoostMode+0x134>
 8003f30:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003f34:	d84e      	bhi.n	8003fd4 <ADC_ConfigureBoostMode+0x148>
 8003f36:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003f3a:	d03d      	beq.n	8003fb8 <ADC_ConfigureBoostMode+0x12c>
 8003f3c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003f40:	d848      	bhi.n	8003fd4 <ADC_ConfigureBoostMode+0x148>
 8003f42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f46:	d033      	beq.n	8003fb0 <ADC_ConfigureBoostMode+0x124>
 8003f48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f4c:	d842      	bhi.n	8003fd4 <ADC_ConfigureBoostMode+0x148>
 8003f4e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003f52:	d029      	beq.n	8003fa8 <ADC_ConfigureBoostMode+0x11c>
 8003f54:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003f58:	d83c      	bhi.n	8003fd4 <ADC_ConfigureBoostMode+0x148>
 8003f5a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003f5e:	d01a      	beq.n	8003f96 <ADC_ConfigureBoostMode+0x10a>
 8003f60:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003f64:	d836      	bhi.n	8003fd4 <ADC_ConfigureBoostMode+0x148>
 8003f66:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003f6a:	d014      	beq.n	8003f96 <ADC_ConfigureBoostMode+0x10a>
 8003f6c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003f70:	d830      	bhi.n	8003fd4 <ADC_ConfigureBoostMode+0x148>
 8003f72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f76:	d00e      	beq.n	8003f96 <ADC_ConfigureBoostMode+0x10a>
 8003f78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f7c:	d82a      	bhi.n	8003fd4 <ADC_ConfigureBoostMode+0x148>
 8003f7e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003f82:	d008      	beq.n	8003f96 <ADC_ConfigureBoostMode+0x10a>
 8003f84:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003f88:	d824      	bhi.n	8003fd4 <ADC_ConfigureBoostMode+0x148>
 8003f8a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f8e:	d002      	beq.n	8003f96 <ADC_ConfigureBoostMode+0x10a>
 8003f90:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003f94:	d11e      	bne.n	8003fd4 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	0c9b      	lsrs	r3, r3, #18
 8003f9c:	005b      	lsls	r3, r3, #1
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fa4:	60fb      	str	r3, [r7, #12]
        break;
 8003fa6:	e016      	b.n	8003fd6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	091b      	lsrs	r3, r3, #4
 8003fac:	60fb      	str	r3, [r7, #12]
        break;
 8003fae:	e012      	b.n	8003fd6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	095b      	lsrs	r3, r3, #5
 8003fb4:	60fb      	str	r3, [r7, #12]
        break;
 8003fb6:	e00e      	b.n	8003fd6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	099b      	lsrs	r3, r3, #6
 8003fbc:	60fb      	str	r3, [r7, #12]
        break;
 8003fbe:	e00a      	b.n	8003fd6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	09db      	lsrs	r3, r3, #7
 8003fc4:	60fb      	str	r3, [r7, #12]
        break;
 8003fc6:	e006      	b.n	8003fd6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	0a1b      	lsrs	r3, r3, #8
 8003fcc:	60fb      	str	r3, [r7, #12]
        break;
 8003fce:	e002      	b.n	8003fd6 <ADC_ConfigureBoostMode+0x14a>
        break;
 8003fd0:	bf00      	nop
 8003fd2:	e000      	b.n	8003fd6 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003fd4:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003fd6:	f7ff f8a5 	bl	8003124 <HAL_GetREVID>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	f241 0203 	movw	r2, #4099	; 0x1003
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d815      	bhi.n	8004010 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	4a2b      	ldr	r2, [pc, #172]	; (8004094 <ADC_ConfigureBoostMode+0x208>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d908      	bls.n	8003ffe <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	689a      	ldr	r2, [r3, #8]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ffa:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003ffc:	e03e      	b.n	800407c <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	689a      	ldr	r2, [r3, #8]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800400c:	609a      	str	r2, [r3, #8]
}
 800400e:	e035      	b.n	800407c <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	085b      	lsrs	r3, r3, #1
 8004014:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	4a1f      	ldr	r2, [pc, #124]	; (8004098 <ADC_ConfigureBoostMode+0x20c>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d808      	bhi.n	8004030 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	689a      	ldr	r2, [r3, #8]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800402c:	609a      	str	r2, [r3, #8]
}
 800402e:	e025      	b.n	800407c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	4a1a      	ldr	r2, [pc, #104]	; (800409c <ADC_ConfigureBoostMode+0x210>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d80a      	bhi.n	800404e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800404a:	609a      	str	r2, [r3, #8]
}
 800404c:	e016      	b.n	800407c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	4a13      	ldr	r2, [pc, #76]	; (80040a0 <ADC_ConfigureBoostMode+0x214>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d80a      	bhi.n	800406c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004068:	609a      	str	r2, [r3, #8]
}
 800406a:	e007      	b.n	800407c <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	689a      	ldr	r2, [r3, #8]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800407a:	609a      	str	r2, [r3, #8]
}
 800407c:	bf00      	nop
 800407e:	3710      	adds	r7, #16
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	40022000 	.word	0x40022000
 8004088:	40022100 	.word	0x40022100
 800408c:	40022300 	.word	0x40022300
 8004090:	58026300 	.word	0x58026300
 8004094:	01312d00 	.word	0x01312d00
 8004098:	005f5e10 	.word	0x005f5e10
 800409c:	00bebc20 	.word	0x00bebc20
 80040a0:	017d7840 	.word	0x017d7840

080040a4 <LL_ADC_IsEnabled>:
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f003 0301 	and.w	r3, r3, #1
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d101      	bne.n	80040bc <LL_ADC_IsEnabled+0x18>
 80040b8:	2301      	movs	r3, #1
 80040ba:	e000      	b.n	80040be <LL_ADC_IsEnabled+0x1a>
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	370c      	adds	r7, #12
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr

080040ca <LL_ADC_REG_IsConversionOngoing>:
{
 80040ca:	b480      	push	{r7}
 80040cc:	b083      	sub	sp, #12
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f003 0304 	and.w	r3, r3, #4
 80040da:	2b04      	cmp	r3, #4
 80040dc:	d101      	bne.n	80040e2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80040de:	2301      	movs	r3, #1
 80040e0:	e000      	b.n	80040e4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80040f0:	b590      	push	{r4, r7, lr}
 80040f2:	b09f      	sub	sp, #124	; 0x7c
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040fa:	2300      	movs	r3, #0
 80040fc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004106:	2b01      	cmp	r3, #1
 8004108:	d101      	bne.n	800410e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800410a:	2302      	movs	r3, #2
 800410c:	e0be      	b.n	800428c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2201      	movs	r2, #1
 8004112:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004116:	2300      	movs	r3, #0
 8004118:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800411a:	2300      	movs	r3, #0
 800411c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a5c      	ldr	r2, [pc, #368]	; (8004294 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d102      	bne.n	800412e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004128:	4b5b      	ldr	r3, [pc, #364]	; (8004298 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800412a:	60bb      	str	r3, [r7, #8]
 800412c:	e001      	b.n	8004132 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800412e:	2300      	movs	r3, #0
 8004130:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d10b      	bne.n	8004150 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800413c:	f043 0220 	orr.w	r2, r3, #32
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e09d      	b.n	800428c <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	4618      	mov	r0, r3
 8004154:	f7ff ffb9 	bl	80040ca <LL_ADC_REG_IsConversionOngoing>
 8004158:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4618      	mov	r0, r3
 8004160:	f7ff ffb3 	bl	80040ca <LL_ADC_REG_IsConversionOngoing>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d17f      	bne.n	800426a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800416a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800416c:	2b00      	cmp	r3, #0
 800416e:	d17c      	bne.n	800426a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a47      	ldr	r2, [pc, #284]	; (8004294 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d004      	beq.n	8004184 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a46      	ldr	r2, [pc, #280]	; (8004298 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d101      	bne.n	8004188 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8004184:	4b45      	ldr	r3, [pc, #276]	; (800429c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004186:	e000      	b.n	800418a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004188:	4b45      	ldr	r3, [pc, #276]	; (80042a0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800418a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d039      	beq.n	8004208 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004194:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	431a      	orrs	r2, r3
 80041a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041a4:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a3a      	ldr	r2, [pc, #232]	; (8004294 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d004      	beq.n	80041ba <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a38      	ldr	r2, [pc, #224]	; (8004298 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d10e      	bne.n	80041d8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80041ba:	4836      	ldr	r0, [pc, #216]	; (8004294 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80041bc:	f7ff ff72 	bl	80040a4 <LL_ADC_IsEnabled>
 80041c0:	4604      	mov	r4, r0
 80041c2:	4835      	ldr	r0, [pc, #212]	; (8004298 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80041c4:	f7ff ff6e 	bl	80040a4 <LL_ADC_IsEnabled>
 80041c8:	4603      	mov	r3, r0
 80041ca:	4323      	orrs	r3, r4
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	bf0c      	ite	eq
 80041d0:	2301      	moveq	r3, #1
 80041d2:	2300      	movne	r3, #0
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	e008      	b.n	80041ea <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80041d8:	4832      	ldr	r0, [pc, #200]	; (80042a4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80041da:	f7ff ff63 	bl	80040a4 <LL_ADC_IsEnabled>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	bf0c      	ite	eq
 80041e4:	2301      	moveq	r3, #1
 80041e6:	2300      	movne	r3, #0
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d047      	beq.n	800427e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80041ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041f0:	689a      	ldr	r2, [r3, #8]
 80041f2:	4b2d      	ldr	r3, [pc, #180]	; (80042a8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80041f4:	4013      	ands	r3, r2
 80041f6:	683a      	ldr	r2, [r7, #0]
 80041f8:	6811      	ldr	r1, [r2, #0]
 80041fa:	683a      	ldr	r2, [r7, #0]
 80041fc:	6892      	ldr	r2, [r2, #8]
 80041fe:	430a      	orrs	r2, r1
 8004200:	431a      	orrs	r2, r3
 8004202:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004204:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004206:	e03a      	b.n	800427e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004208:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004210:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004212:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a1e      	ldr	r2, [pc, #120]	; (8004294 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d004      	beq.n	8004228 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a1d      	ldr	r2, [pc, #116]	; (8004298 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d10e      	bne.n	8004246 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004228:	481a      	ldr	r0, [pc, #104]	; (8004294 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800422a:	f7ff ff3b 	bl	80040a4 <LL_ADC_IsEnabled>
 800422e:	4604      	mov	r4, r0
 8004230:	4819      	ldr	r0, [pc, #100]	; (8004298 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004232:	f7ff ff37 	bl	80040a4 <LL_ADC_IsEnabled>
 8004236:	4603      	mov	r3, r0
 8004238:	4323      	orrs	r3, r4
 800423a:	2b00      	cmp	r3, #0
 800423c:	bf0c      	ite	eq
 800423e:	2301      	moveq	r3, #1
 8004240:	2300      	movne	r3, #0
 8004242:	b2db      	uxtb	r3, r3
 8004244:	e008      	b.n	8004258 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004246:	4817      	ldr	r0, [pc, #92]	; (80042a4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004248:	f7ff ff2c 	bl	80040a4 <LL_ADC_IsEnabled>
 800424c:	4603      	mov	r3, r0
 800424e:	2b00      	cmp	r3, #0
 8004250:	bf0c      	ite	eq
 8004252:	2301      	moveq	r3, #1
 8004254:	2300      	movne	r3, #0
 8004256:	b2db      	uxtb	r3, r3
 8004258:	2b00      	cmp	r3, #0
 800425a:	d010      	beq.n	800427e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800425c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800425e:	689a      	ldr	r2, [r3, #8]
 8004260:	4b11      	ldr	r3, [pc, #68]	; (80042a8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004262:	4013      	ands	r3, r2
 8004264:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004266:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004268:	e009      	b.n	800427e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800426e:	f043 0220 	orr.w	r2, r3, #32
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800427c:	e000      	b.n	8004280 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800427e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004288:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800428c:	4618      	mov	r0, r3
 800428e:	377c      	adds	r7, #124	; 0x7c
 8004290:	46bd      	mov	sp, r7
 8004292:	bd90      	pop	{r4, r7, pc}
 8004294:	40022000 	.word	0x40022000
 8004298:	40022100 	.word	0x40022100
 800429c:	40022300 	.word	0x40022300
 80042a0:	58026300 	.word	0x58026300
 80042a4:	58026000 	.word	0x58026000
 80042a8:	fffff0e0 	.word	0xfffff0e0

080042ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b085      	sub	sp, #20
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f003 0307 	and.w	r3, r3, #7
 80042ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042bc:	4b0b      	ldr	r3, [pc, #44]	; (80042ec <__NVIC_SetPriorityGrouping+0x40>)
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042c2:	68ba      	ldr	r2, [r7, #8]
 80042c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80042c8:	4013      	ands	r3, r2
 80042ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80042d4:	4b06      	ldr	r3, [pc, #24]	; (80042f0 <__NVIC_SetPriorityGrouping+0x44>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80042da:	4a04      	ldr	r2, [pc, #16]	; (80042ec <__NVIC_SetPriorityGrouping+0x40>)
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	60d3      	str	r3, [r2, #12]
}
 80042e0:	bf00      	nop
 80042e2:	3714      	adds	r7, #20
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr
 80042ec:	e000ed00 	.word	0xe000ed00
 80042f0:	05fa0000 	.word	0x05fa0000

080042f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80042f4:	b480      	push	{r7}
 80042f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042f8:	4b04      	ldr	r3, [pc, #16]	; (800430c <__NVIC_GetPriorityGrouping+0x18>)
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	0a1b      	lsrs	r3, r3, #8
 80042fe:	f003 0307 	and.w	r3, r3, #7
}
 8004302:	4618      	mov	r0, r3
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr
 800430c:	e000ed00 	.word	0xe000ed00

08004310 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	4603      	mov	r3, r0
 8004318:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800431a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800431e:	2b00      	cmp	r3, #0
 8004320:	db0b      	blt.n	800433a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004322:	88fb      	ldrh	r3, [r7, #6]
 8004324:	f003 021f 	and.w	r2, r3, #31
 8004328:	4907      	ldr	r1, [pc, #28]	; (8004348 <__NVIC_EnableIRQ+0x38>)
 800432a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800432e:	095b      	lsrs	r3, r3, #5
 8004330:	2001      	movs	r0, #1
 8004332:	fa00 f202 	lsl.w	r2, r0, r2
 8004336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800433a:	bf00      	nop
 800433c:	370c      	adds	r7, #12
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
 8004346:	bf00      	nop
 8004348:	e000e100 	.word	0xe000e100

0800434c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	4603      	mov	r3, r0
 8004354:	6039      	str	r1, [r7, #0]
 8004356:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004358:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800435c:	2b00      	cmp	r3, #0
 800435e:	db0a      	blt.n	8004376 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	b2da      	uxtb	r2, r3
 8004364:	490c      	ldr	r1, [pc, #48]	; (8004398 <__NVIC_SetPriority+0x4c>)
 8004366:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800436a:	0112      	lsls	r2, r2, #4
 800436c:	b2d2      	uxtb	r2, r2
 800436e:	440b      	add	r3, r1
 8004370:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004374:	e00a      	b.n	800438c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	b2da      	uxtb	r2, r3
 800437a:	4908      	ldr	r1, [pc, #32]	; (800439c <__NVIC_SetPriority+0x50>)
 800437c:	88fb      	ldrh	r3, [r7, #6]
 800437e:	f003 030f 	and.w	r3, r3, #15
 8004382:	3b04      	subs	r3, #4
 8004384:	0112      	lsls	r2, r2, #4
 8004386:	b2d2      	uxtb	r2, r2
 8004388:	440b      	add	r3, r1
 800438a:	761a      	strb	r2, [r3, #24]
}
 800438c:	bf00      	nop
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr
 8004398:	e000e100 	.word	0xe000e100
 800439c:	e000ed00 	.word	0xe000ed00

080043a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b089      	sub	sp, #36	; 0x24
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f003 0307 	and.w	r3, r3, #7
 80043b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	f1c3 0307 	rsb	r3, r3, #7
 80043ba:	2b04      	cmp	r3, #4
 80043bc:	bf28      	it	cs
 80043be:	2304      	movcs	r3, #4
 80043c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	3304      	adds	r3, #4
 80043c6:	2b06      	cmp	r3, #6
 80043c8:	d902      	bls.n	80043d0 <NVIC_EncodePriority+0x30>
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	3b03      	subs	r3, #3
 80043ce:	e000      	b.n	80043d2 <NVIC_EncodePriority+0x32>
 80043d0:	2300      	movs	r3, #0
 80043d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043d4:	f04f 32ff 	mov.w	r2, #4294967295
 80043d8:	69bb      	ldr	r3, [r7, #24]
 80043da:	fa02 f303 	lsl.w	r3, r2, r3
 80043de:	43da      	mvns	r2, r3
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	401a      	ands	r2, r3
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043e8:	f04f 31ff 	mov.w	r1, #4294967295
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	fa01 f303 	lsl.w	r3, r1, r3
 80043f2:	43d9      	mvns	r1, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043f8:	4313      	orrs	r3, r2
         );
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3724      	adds	r7, #36	; 0x24
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
	...

08004408 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	3b01      	subs	r3, #1
 8004414:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004418:	d301      	bcc.n	800441e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800441a:	2301      	movs	r3, #1
 800441c:	e00f      	b.n	800443e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800441e:	4a0a      	ldr	r2, [pc, #40]	; (8004448 <SysTick_Config+0x40>)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	3b01      	subs	r3, #1
 8004424:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004426:	210f      	movs	r1, #15
 8004428:	f04f 30ff 	mov.w	r0, #4294967295
 800442c:	f7ff ff8e 	bl	800434c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004430:	4b05      	ldr	r3, [pc, #20]	; (8004448 <SysTick_Config+0x40>)
 8004432:	2200      	movs	r2, #0
 8004434:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004436:	4b04      	ldr	r3, [pc, #16]	; (8004448 <SysTick_Config+0x40>)
 8004438:	2207      	movs	r2, #7
 800443a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3708      	adds	r7, #8
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	e000e010 	.word	0xe000e010

0800444c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f7ff ff29 	bl	80042ac <__NVIC_SetPriorityGrouping>
}
 800445a:	bf00      	nop
 800445c:	3708      	adds	r7, #8
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}

08004462 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004462:	b580      	push	{r7, lr}
 8004464:	b086      	sub	sp, #24
 8004466:	af00      	add	r7, sp, #0
 8004468:	4603      	mov	r3, r0
 800446a:	60b9      	str	r1, [r7, #8]
 800446c:	607a      	str	r2, [r7, #4]
 800446e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004470:	f7ff ff40 	bl	80042f4 <__NVIC_GetPriorityGrouping>
 8004474:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	68b9      	ldr	r1, [r7, #8]
 800447a:	6978      	ldr	r0, [r7, #20]
 800447c:	f7ff ff90 	bl	80043a0 <NVIC_EncodePriority>
 8004480:	4602      	mov	r2, r0
 8004482:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004486:	4611      	mov	r1, r2
 8004488:	4618      	mov	r0, r3
 800448a:	f7ff ff5f 	bl	800434c <__NVIC_SetPriority>
}
 800448e:	bf00      	nop
 8004490:	3718      	adds	r7, #24
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}

08004496 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004496:	b580      	push	{r7, lr}
 8004498:	b082      	sub	sp, #8
 800449a:	af00      	add	r7, sp, #0
 800449c:	4603      	mov	r3, r0
 800449e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80044a4:	4618      	mov	r0, r3
 80044a6:	f7ff ff33 	bl	8004310 <__NVIC_EnableIRQ>
}
 80044aa:	bf00      	nop
 80044ac:	3708      	adds	r7, #8
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}

080044b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80044b2:	b580      	push	{r7, lr}
 80044b4:	b082      	sub	sp, #8
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f7ff ffa4 	bl	8004408 <SysTick_Config>
 80044c0:	4603      	mov	r3, r0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3708      	adds	r7, #8
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
	...

080044cc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b086      	sub	sp, #24
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80044d4:	f7fe fdf6 	bl	80030c4 <HAL_GetTick>
 80044d8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d101      	bne.n	80044e4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e2dc      	b.n	8004a9e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d008      	beq.n	8004502 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2280      	movs	r2, #128	; 0x80
 80044f4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e2cd      	b.n	8004a9e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a76      	ldr	r2, [pc, #472]	; (80046e0 <HAL_DMA_Abort+0x214>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d04a      	beq.n	80045a2 <HAL_DMA_Abort+0xd6>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a74      	ldr	r2, [pc, #464]	; (80046e4 <HAL_DMA_Abort+0x218>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d045      	beq.n	80045a2 <HAL_DMA_Abort+0xd6>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a73      	ldr	r2, [pc, #460]	; (80046e8 <HAL_DMA_Abort+0x21c>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d040      	beq.n	80045a2 <HAL_DMA_Abort+0xd6>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a71      	ldr	r2, [pc, #452]	; (80046ec <HAL_DMA_Abort+0x220>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d03b      	beq.n	80045a2 <HAL_DMA_Abort+0xd6>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a70      	ldr	r2, [pc, #448]	; (80046f0 <HAL_DMA_Abort+0x224>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d036      	beq.n	80045a2 <HAL_DMA_Abort+0xd6>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a6e      	ldr	r2, [pc, #440]	; (80046f4 <HAL_DMA_Abort+0x228>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d031      	beq.n	80045a2 <HAL_DMA_Abort+0xd6>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a6d      	ldr	r2, [pc, #436]	; (80046f8 <HAL_DMA_Abort+0x22c>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d02c      	beq.n	80045a2 <HAL_DMA_Abort+0xd6>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a6b      	ldr	r2, [pc, #428]	; (80046fc <HAL_DMA_Abort+0x230>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d027      	beq.n	80045a2 <HAL_DMA_Abort+0xd6>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a6a      	ldr	r2, [pc, #424]	; (8004700 <HAL_DMA_Abort+0x234>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d022      	beq.n	80045a2 <HAL_DMA_Abort+0xd6>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a68      	ldr	r2, [pc, #416]	; (8004704 <HAL_DMA_Abort+0x238>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d01d      	beq.n	80045a2 <HAL_DMA_Abort+0xd6>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a67      	ldr	r2, [pc, #412]	; (8004708 <HAL_DMA_Abort+0x23c>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d018      	beq.n	80045a2 <HAL_DMA_Abort+0xd6>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a65      	ldr	r2, [pc, #404]	; (800470c <HAL_DMA_Abort+0x240>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d013      	beq.n	80045a2 <HAL_DMA_Abort+0xd6>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a64      	ldr	r2, [pc, #400]	; (8004710 <HAL_DMA_Abort+0x244>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d00e      	beq.n	80045a2 <HAL_DMA_Abort+0xd6>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a62      	ldr	r2, [pc, #392]	; (8004714 <HAL_DMA_Abort+0x248>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d009      	beq.n	80045a2 <HAL_DMA_Abort+0xd6>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a61      	ldr	r2, [pc, #388]	; (8004718 <HAL_DMA_Abort+0x24c>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d004      	beq.n	80045a2 <HAL_DMA_Abort+0xd6>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a5f      	ldr	r2, [pc, #380]	; (800471c <HAL_DMA_Abort+0x250>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d101      	bne.n	80045a6 <HAL_DMA_Abort+0xda>
 80045a2:	2301      	movs	r3, #1
 80045a4:	e000      	b.n	80045a8 <HAL_DMA_Abort+0xdc>
 80045a6:	2300      	movs	r3, #0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d013      	beq.n	80045d4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f022 021e 	bic.w	r2, r2, #30
 80045ba:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	695a      	ldr	r2, [r3, #20]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045ca:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	617b      	str	r3, [r7, #20]
 80045d2:	e00a      	b.n	80045ea <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f022 020e 	bic.w	r2, r2, #14
 80045e2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a3c      	ldr	r2, [pc, #240]	; (80046e0 <HAL_DMA_Abort+0x214>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d072      	beq.n	80046da <HAL_DMA_Abort+0x20e>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a3a      	ldr	r2, [pc, #232]	; (80046e4 <HAL_DMA_Abort+0x218>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d06d      	beq.n	80046da <HAL_DMA_Abort+0x20e>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a39      	ldr	r2, [pc, #228]	; (80046e8 <HAL_DMA_Abort+0x21c>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d068      	beq.n	80046da <HAL_DMA_Abort+0x20e>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a37      	ldr	r2, [pc, #220]	; (80046ec <HAL_DMA_Abort+0x220>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d063      	beq.n	80046da <HAL_DMA_Abort+0x20e>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a36      	ldr	r2, [pc, #216]	; (80046f0 <HAL_DMA_Abort+0x224>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d05e      	beq.n	80046da <HAL_DMA_Abort+0x20e>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a34      	ldr	r2, [pc, #208]	; (80046f4 <HAL_DMA_Abort+0x228>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d059      	beq.n	80046da <HAL_DMA_Abort+0x20e>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a33      	ldr	r2, [pc, #204]	; (80046f8 <HAL_DMA_Abort+0x22c>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d054      	beq.n	80046da <HAL_DMA_Abort+0x20e>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a31      	ldr	r2, [pc, #196]	; (80046fc <HAL_DMA_Abort+0x230>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d04f      	beq.n	80046da <HAL_DMA_Abort+0x20e>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a30      	ldr	r2, [pc, #192]	; (8004700 <HAL_DMA_Abort+0x234>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d04a      	beq.n	80046da <HAL_DMA_Abort+0x20e>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a2e      	ldr	r2, [pc, #184]	; (8004704 <HAL_DMA_Abort+0x238>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d045      	beq.n	80046da <HAL_DMA_Abort+0x20e>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a2d      	ldr	r2, [pc, #180]	; (8004708 <HAL_DMA_Abort+0x23c>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d040      	beq.n	80046da <HAL_DMA_Abort+0x20e>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a2b      	ldr	r2, [pc, #172]	; (800470c <HAL_DMA_Abort+0x240>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d03b      	beq.n	80046da <HAL_DMA_Abort+0x20e>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a2a      	ldr	r2, [pc, #168]	; (8004710 <HAL_DMA_Abort+0x244>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d036      	beq.n	80046da <HAL_DMA_Abort+0x20e>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a28      	ldr	r2, [pc, #160]	; (8004714 <HAL_DMA_Abort+0x248>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d031      	beq.n	80046da <HAL_DMA_Abort+0x20e>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a27      	ldr	r2, [pc, #156]	; (8004718 <HAL_DMA_Abort+0x24c>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d02c      	beq.n	80046da <HAL_DMA_Abort+0x20e>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a25      	ldr	r2, [pc, #148]	; (800471c <HAL_DMA_Abort+0x250>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d027      	beq.n	80046da <HAL_DMA_Abort+0x20e>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a24      	ldr	r2, [pc, #144]	; (8004720 <HAL_DMA_Abort+0x254>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d022      	beq.n	80046da <HAL_DMA_Abort+0x20e>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a22      	ldr	r2, [pc, #136]	; (8004724 <HAL_DMA_Abort+0x258>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d01d      	beq.n	80046da <HAL_DMA_Abort+0x20e>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a21      	ldr	r2, [pc, #132]	; (8004728 <HAL_DMA_Abort+0x25c>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d018      	beq.n	80046da <HAL_DMA_Abort+0x20e>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a1f      	ldr	r2, [pc, #124]	; (800472c <HAL_DMA_Abort+0x260>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d013      	beq.n	80046da <HAL_DMA_Abort+0x20e>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a1e      	ldr	r2, [pc, #120]	; (8004730 <HAL_DMA_Abort+0x264>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d00e      	beq.n	80046da <HAL_DMA_Abort+0x20e>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a1c      	ldr	r2, [pc, #112]	; (8004734 <HAL_DMA_Abort+0x268>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d009      	beq.n	80046da <HAL_DMA_Abort+0x20e>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a1b      	ldr	r2, [pc, #108]	; (8004738 <HAL_DMA_Abort+0x26c>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d004      	beq.n	80046da <HAL_DMA_Abort+0x20e>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a19      	ldr	r2, [pc, #100]	; (800473c <HAL_DMA_Abort+0x270>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d132      	bne.n	8004740 <HAL_DMA_Abort+0x274>
 80046da:	2301      	movs	r3, #1
 80046dc:	e031      	b.n	8004742 <HAL_DMA_Abort+0x276>
 80046de:	bf00      	nop
 80046e0:	40020010 	.word	0x40020010
 80046e4:	40020028 	.word	0x40020028
 80046e8:	40020040 	.word	0x40020040
 80046ec:	40020058 	.word	0x40020058
 80046f0:	40020070 	.word	0x40020070
 80046f4:	40020088 	.word	0x40020088
 80046f8:	400200a0 	.word	0x400200a0
 80046fc:	400200b8 	.word	0x400200b8
 8004700:	40020410 	.word	0x40020410
 8004704:	40020428 	.word	0x40020428
 8004708:	40020440 	.word	0x40020440
 800470c:	40020458 	.word	0x40020458
 8004710:	40020470 	.word	0x40020470
 8004714:	40020488 	.word	0x40020488
 8004718:	400204a0 	.word	0x400204a0
 800471c:	400204b8 	.word	0x400204b8
 8004720:	58025408 	.word	0x58025408
 8004724:	5802541c 	.word	0x5802541c
 8004728:	58025430 	.word	0x58025430
 800472c:	58025444 	.word	0x58025444
 8004730:	58025458 	.word	0x58025458
 8004734:	5802546c 	.word	0x5802546c
 8004738:	58025480 	.word	0x58025480
 800473c:	58025494 	.word	0x58025494
 8004740:	2300      	movs	r3, #0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d007      	beq.n	8004756 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004750:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004754:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a6d      	ldr	r2, [pc, #436]	; (8004910 <HAL_DMA_Abort+0x444>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d04a      	beq.n	80047f6 <HAL_DMA_Abort+0x32a>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a6b      	ldr	r2, [pc, #428]	; (8004914 <HAL_DMA_Abort+0x448>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d045      	beq.n	80047f6 <HAL_DMA_Abort+0x32a>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a6a      	ldr	r2, [pc, #424]	; (8004918 <HAL_DMA_Abort+0x44c>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d040      	beq.n	80047f6 <HAL_DMA_Abort+0x32a>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a68      	ldr	r2, [pc, #416]	; (800491c <HAL_DMA_Abort+0x450>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d03b      	beq.n	80047f6 <HAL_DMA_Abort+0x32a>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a67      	ldr	r2, [pc, #412]	; (8004920 <HAL_DMA_Abort+0x454>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d036      	beq.n	80047f6 <HAL_DMA_Abort+0x32a>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a65      	ldr	r2, [pc, #404]	; (8004924 <HAL_DMA_Abort+0x458>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d031      	beq.n	80047f6 <HAL_DMA_Abort+0x32a>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a64      	ldr	r2, [pc, #400]	; (8004928 <HAL_DMA_Abort+0x45c>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d02c      	beq.n	80047f6 <HAL_DMA_Abort+0x32a>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a62      	ldr	r2, [pc, #392]	; (800492c <HAL_DMA_Abort+0x460>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d027      	beq.n	80047f6 <HAL_DMA_Abort+0x32a>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a61      	ldr	r2, [pc, #388]	; (8004930 <HAL_DMA_Abort+0x464>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d022      	beq.n	80047f6 <HAL_DMA_Abort+0x32a>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a5f      	ldr	r2, [pc, #380]	; (8004934 <HAL_DMA_Abort+0x468>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d01d      	beq.n	80047f6 <HAL_DMA_Abort+0x32a>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a5e      	ldr	r2, [pc, #376]	; (8004938 <HAL_DMA_Abort+0x46c>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d018      	beq.n	80047f6 <HAL_DMA_Abort+0x32a>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a5c      	ldr	r2, [pc, #368]	; (800493c <HAL_DMA_Abort+0x470>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d013      	beq.n	80047f6 <HAL_DMA_Abort+0x32a>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a5b      	ldr	r2, [pc, #364]	; (8004940 <HAL_DMA_Abort+0x474>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d00e      	beq.n	80047f6 <HAL_DMA_Abort+0x32a>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a59      	ldr	r2, [pc, #356]	; (8004944 <HAL_DMA_Abort+0x478>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d009      	beq.n	80047f6 <HAL_DMA_Abort+0x32a>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a58      	ldr	r2, [pc, #352]	; (8004948 <HAL_DMA_Abort+0x47c>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d004      	beq.n	80047f6 <HAL_DMA_Abort+0x32a>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a56      	ldr	r2, [pc, #344]	; (800494c <HAL_DMA_Abort+0x480>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d108      	bne.n	8004808 <HAL_DMA_Abort+0x33c>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f022 0201 	bic.w	r2, r2, #1
 8004804:	601a      	str	r2, [r3, #0]
 8004806:	e007      	b.n	8004818 <HAL_DMA_Abort+0x34c>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f022 0201 	bic.w	r2, r2, #1
 8004816:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004818:	e013      	b.n	8004842 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800481a:	f7fe fc53 	bl	80030c4 <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	2b05      	cmp	r3, #5
 8004826:	d90c      	bls.n	8004842 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2220      	movs	r2, #32
 800482c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2203      	movs	r2, #3
 8004832:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e12d      	b.n	8004a9e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0301 	and.w	r3, r3, #1
 800484a:	2b00      	cmp	r3, #0
 800484c:	d1e5      	bne.n	800481a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a2f      	ldr	r2, [pc, #188]	; (8004910 <HAL_DMA_Abort+0x444>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d04a      	beq.n	80048ee <HAL_DMA_Abort+0x422>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a2d      	ldr	r2, [pc, #180]	; (8004914 <HAL_DMA_Abort+0x448>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d045      	beq.n	80048ee <HAL_DMA_Abort+0x422>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a2c      	ldr	r2, [pc, #176]	; (8004918 <HAL_DMA_Abort+0x44c>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d040      	beq.n	80048ee <HAL_DMA_Abort+0x422>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a2a      	ldr	r2, [pc, #168]	; (800491c <HAL_DMA_Abort+0x450>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d03b      	beq.n	80048ee <HAL_DMA_Abort+0x422>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a29      	ldr	r2, [pc, #164]	; (8004920 <HAL_DMA_Abort+0x454>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d036      	beq.n	80048ee <HAL_DMA_Abort+0x422>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a27      	ldr	r2, [pc, #156]	; (8004924 <HAL_DMA_Abort+0x458>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d031      	beq.n	80048ee <HAL_DMA_Abort+0x422>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a26      	ldr	r2, [pc, #152]	; (8004928 <HAL_DMA_Abort+0x45c>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d02c      	beq.n	80048ee <HAL_DMA_Abort+0x422>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a24      	ldr	r2, [pc, #144]	; (800492c <HAL_DMA_Abort+0x460>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d027      	beq.n	80048ee <HAL_DMA_Abort+0x422>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a23      	ldr	r2, [pc, #140]	; (8004930 <HAL_DMA_Abort+0x464>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d022      	beq.n	80048ee <HAL_DMA_Abort+0x422>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a21      	ldr	r2, [pc, #132]	; (8004934 <HAL_DMA_Abort+0x468>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d01d      	beq.n	80048ee <HAL_DMA_Abort+0x422>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a20      	ldr	r2, [pc, #128]	; (8004938 <HAL_DMA_Abort+0x46c>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d018      	beq.n	80048ee <HAL_DMA_Abort+0x422>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a1e      	ldr	r2, [pc, #120]	; (800493c <HAL_DMA_Abort+0x470>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d013      	beq.n	80048ee <HAL_DMA_Abort+0x422>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a1d      	ldr	r2, [pc, #116]	; (8004940 <HAL_DMA_Abort+0x474>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d00e      	beq.n	80048ee <HAL_DMA_Abort+0x422>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a1b      	ldr	r2, [pc, #108]	; (8004944 <HAL_DMA_Abort+0x478>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d009      	beq.n	80048ee <HAL_DMA_Abort+0x422>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a1a      	ldr	r2, [pc, #104]	; (8004948 <HAL_DMA_Abort+0x47c>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d004      	beq.n	80048ee <HAL_DMA_Abort+0x422>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a18      	ldr	r2, [pc, #96]	; (800494c <HAL_DMA_Abort+0x480>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d101      	bne.n	80048f2 <HAL_DMA_Abort+0x426>
 80048ee:	2301      	movs	r3, #1
 80048f0:	e000      	b.n	80048f4 <HAL_DMA_Abort+0x428>
 80048f2:	2300      	movs	r3, #0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d02b      	beq.n	8004950 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048fc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004902:	f003 031f 	and.w	r3, r3, #31
 8004906:	223f      	movs	r2, #63	; 0x3f
 8004908:	409a      	lsls	r2, r3
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	609a      	str	r2, [r3, #8]
 800490e:	e02a      	b.n	8004966 <HAL_DMA_Abort+0x49a>
 8004910:	40020010 	.word	0x40020010
 8004914:	40020028 	.word	0x40020028
 8004918:	40020040 	.word	0x40020040
 800491c:	40020058 	.word	0x40020058
 8004920:	40020070 	.word	0x40020070
 8004924:	40020088 	.word	0x40020088
 8004928:	400200a0 	.word	0x400200a0
 800492c:	400200b8 	.word	0x400200b8
 8004930:	40020410 	.word	0x40020410
 8004934:	40020428 	.word	0x40020428
 8004938:	40020440 	.word	0x40020440
 800493c:	40020458 	.word	0x40020458
 8004940:	40020470 	.word	0x40020470
 8004944:	40020488 	.word	0x40020488
 8004948:	400204a0 	.word	0x400204a0
 800494c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004954:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800495a:	f003 031f 	and.w	r3, r3, #31
 800495e:	2201      	movs	r2, #1
 8004960:	409a      	lsls	r2, r3
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a4f      	ldr	r2, [pc, #316]	; (8004aa8 <HAL_DMA_Abort+0x5dc>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d072      	beq.n	8004a56 <HAL_DMA_Abort+0x58a>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a4d      	ldr	r2, [pc, #308]	; (8004aac <HAL_DMA_Abort+0x5e0>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d06d      	beq.n	8004a56 <HAL_DMA_Abort+0x58a>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a4c      	ldr	r2, [pc, #304]	; (8004ab0 <HAL_DMA_Abort+0x5e4>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d068      	beq.n	8004a56 <HAL_DMA_Abort+0x58a>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a4a      	ldr	r2, [pc, #296]	; (8004ab4 <HAL_DMA_Abort+0x5e8>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d063      	beq.n	8004a56 <HAL_DMA_Abort+0x58a>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a49      	ldr	r2, [pc, #292]	; (8004ab8 <HAL_DMA_Abort+0x5ec>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d05e      	beq.n	8004a56 <HAL_DMA_Abort+0x58a>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a47      	ldr	r2, [pc, #284]	; (8004abc <HAL_DMA_Abort+0x5f0>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d059      	beq.n	8004a56 <HAL_DMA_Abort+0x58a>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a46      	ldr	r2, [pc, #280]	; (8004ac0 <HAL_DMA_Abort+0x5f4>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d054      	beq.n	8004a56 <HAL_DMA_Abort+0x58a>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a44      	ldr	r2, [pc, #272]	; (8004ac4 <HAL_DMA_Abort+0x5f8>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d04f      	beq.n	8004a56 <HAL_DMA_Abort+0x58a>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a43      	ldr	r2, [pc, #268]	; (8004ac8 <HAL_DMA_Abort+0x5fc>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d04a      	beq.n	8004a56 <HAL_DMA_Abort+0x58a>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a41      	ldr	r2, [pc, #260]	; (8004acc <HAL_DMA_Abort+0x600>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d045      	beq.n	8004a56 <HAL_DMA_Abort+0x58a>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a40      	ldr	r2, [pc, #256]	; (8004ad0 <HAL_DMA_Abort+0x604>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d040      	beq.n	8004a56 <HAL_DMA_Abort+0x58a>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a3e      	ldr	r2, [pc, #248]	; (8004ad4 <HAL_DMA_Abort+0x608>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d03b      	beq.n	8004a56 <HAL_DMA_Abort+0x58a>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a3d      	ldr	r2, [pc, #244]	; (8004ad8 <HAL_DMA_Abort+0x60c>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d036      	beq.n	8004a56 <HAL_DMA_Abort+0x58a>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a3b      	ldr	r2, [pc, #236]	; (8004adc <HAL_DMA_Abort+0x610>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d031      	beq.n	8004a56 <HAL_DMA_Abort+0x58a>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a3a      	ldr	r2, [pc, #232]	; (8004ae0 <HAL_DMA_Abort+0x614>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d02c      	beq.n	8004a56 <HAL_DMA_Abort+0x58a>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a38      	ldr	r2, [pc, #224]	; (8004ae4 <HAL_DMA_Abort+0x618>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d027      	beq.n	8004a56 <HAL_DMA_Abort+0x58a>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a37      	ldr	r2, [pc, #220]	; (8004ae8 <HAL_DMA_Abort+0x61c>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d022      	beq.n	8004a56 <HAL_DMA_Abort+0x58a>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a35      	ldr	r2, [pc, #212]	; (8004aec <HAL_DMA_Abort+0x620>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d01d      	beq.n	8004a56 <HAL_DMA_Abort+0x58a>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a34      	ldr	r2, [pc, #208]	; (8004af0 <HAL_DMA_Abort+0x624>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d018      	beq.n	8004a56 <HAL_DMA_Abort+0x58a>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a32      	ldr	r2, [pc, #200]	; (8004af4 <HAL_DMA_Abort+0x628>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d013      	beq.n	8004a56 <HAL_DMA_Abort+0x58a>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a31      	ldr	r2, [pc, #196]	; (8004af8 <HAL_DMA_Abort+0x62c>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d00e      	beq.n	8004a56 <HAL_DMA_Abort+0x58a>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a2f      	ldr	r2, [pc, #188]	; (8004afc <HAL_DMA_Abort+0x630>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d009      	beq.n	8004a56 <HAL_DMA_Abort+0x58a>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a2e      	ldr	r2, [pc, #184]	; (8004b00 <HAL_DMA_Abort+0x634>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d004      	beq.n	8004a56 <HAL_DMA_Abort+0x58a>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a2c      	ldr	r2, [pc, #176]	; (8004b04 <HAL_DMA_Abort+0x638>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d101      	bne.n	8004a5a <HAL_DMA_Abort+0x58e>
 8004a56:	2301      	movs	r3, #1
 8004a58:	e000      	b.n	8004a5c <HAL_DMA_Abort+0x590>
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d015      	beq.n	8004a8c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004a68:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d00c      	beq.n	8004a8c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a80:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004a8a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3718      	adds	r7, #24
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	40020010 	.word	0x40020010
 8004aac:	40020028 	.word	0x40020028
 8004ab0:	40020040 	.word	0x40020040
 8004ab4:	40020058 	.word	0x40020058
 8004ab8:	40020070 	.word	0x40020070
 8004abc:	40020088 	.word	0x40020088
 8004ac0:	400200a0 	.word	0x400200a0
 8004ac4:	400200b8 	.word	0x400200b8
 8004ac8:	40020410 	.word	0x40020410
 8004acc:	40020428 	.word	0x40020428
 8004ad0:	40020440 	.word	0x40020440
 8004ad4:	40020458 	.word	0x40020458
 8004ad8:	40020470 	.word	0x40020470
 8004adc:	40020488 	.word	0x40020488
 8004ae0:	400204a0 	.word	0x400204a0
 8004ae4:	400204b8 	.word	0x400204b8
 8004ae8:	58025408 	.word	0x58025408
 8004aec:	5802541c 	.word	0x5802541c
 8004af0:	58025430 	.word	0x58025430
 8004af4:	58025444 	.word	0x58025444
 8004af8:	58025458 	.word	0x58025458
 8004afc:	5802546c 	.word	0x5802546c
 8004b00:	58025480 	.word	0x58025480
 8004b04:	58025494 	.word	0x58025494

08004b08 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d101      	bne.n	8004b1a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e237      	b.n	8004f8a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	d004      	beq.n	8004b30 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2280      	movs	r2, #128	; 0x80
 8004b2a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e22c      	b.n	8004f8a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a5c      	ldr	r2, [pc, #368]	; (8004ca8 <HAL_DMA_Abort_IT+0x1a0>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d04a      	beq.n	8004bd0 <HAL_DMA_Abort_IT+0xc8>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a5b      	ldr	r2, [pc, #364]	; (8004cac <HAL_DMA_Abort_IT+0x1a4>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d045      	beq.n	8004bd0 <HAL_DMA_Abort_IT+0xc8>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a59      	ldr	r2, [pc, #356]	; (8004cb0 <HAL_DMA_Abort_IT+0x1a8>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d040      	beq.n	8004bd0 <HAL_DMA_Abort_IT+0xc8>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a58      	ldr	r2, [pc, #352]	; (8004cb4 <HAL_DMA_Abort_IT+0x1ac>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d03b      	beq.n	8004bd0 <HAL_DMA_Abort_IT+0xc8>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a56      	ldr	r2, [pc, #344]	; (8004cb8 <HAL_DMA_Abort_IT+0x1b0>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d036      	beq.n	8004bd0 <HAL_DMA_Abort_IT+0xc8>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a55      	ldr	r2, [pc, #340]	; (8004cbc <HAL_DMA_Abort_IT+0x1b4>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d031      	beq.n	8004bd0 <HAL_DMA_Abort_IT+0xc8>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a53      	ldr	r2, [pc, #332]	; (8004cc0 <HAL_DMA_Abort_IT+0x1b8>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d02c      	beq.n	8004bd0 <HAL_DMA_Abort_IT+0xc8>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a52      	ldr	r2, [pc, #328]	; (8004cc4 <HAL_DMA_Abort_IT+0x1bc>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d027      	beq.n	8004bd0 <HAL_DMA_Abort_IT+0xc8>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a50      	ldr	r2, [pc, #320]	; (8004cc8 <HAL_DMA_Abort_IT+0x1c0>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d022      	beq.n	8004bd0 <HAL_DMA_Abort_IT+0xc8>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a4f      	ldr	r2, [pc, #316]	; (8004ccc <HAL_DMA_Abort_IT+0x1c4>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d01d      	beq.n	8004bd0 <HAL_DMA_Abort_IT+0xc8>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a4d      	ldr	r2, [pc, #308]	; (8004cd0 <HAL_DMA_Abort_IT+0x1c8>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d018      	beq.n	8004bd0 <HAL_DMA_Abort_IT+0xc8>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a4c      	ldr	r2, [pc, #304]	; (8004cd4 <HAL_DMA_Abort_IT+0x1cc>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d013      	beq.n	8004bd0 <HAL_DMA_Abort_IT+0xc8>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a4a      	ldr	r2, [pc, #296]	; (8004cd8 <HAL_DMA_Abort_IT+0x1d0>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d00e      	beq.n	8004bd0 <HAL_DMA_Abort_IT+0xc8>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a49      	ldr	r2, [pc, #292]	; (8004cdc <HAL_DMA_Abort_IT+0x1d4>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d009      	beq.n	8004bd0 <HAL_DMA_Abort_IT+0xc8>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a47      	ldr	r2, [pc, #284]	; (8004ce0 <HAL_DMA_Abort_IT+0x1d8>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d004      	beq.n	8004bd0 <HAL_DMA_Abort_IT+0xc8>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a46      	ldr	r2, [pc, #280]	; (8004ce4 <HAL_DMA_Abort_IT+0x1dc>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d101      	bne.n	8004bd4 <HAL_DMA_Abort_IT+0xcc>
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e000      	b.n	8004bd6 <HAL_DMA_Abort_IT+0xce>
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	f000 8086 	beq.w	8004ce8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2204      	movs	r2, #4
 8004be0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a2f      	ldr	r2, [pc, #188]	; (8004ca8 <HAL_DMA_Abort_IT+0x1a0>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d04a      	beq.n	8004c84 <HAL_DMA_Abort_IT+0x17c>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a2e      	ldr	r2, [pc, #184]	; (8004cac <HAL_DMA_Abort_IT+0x1a4>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d045      	beq.n	8004c84 <HAL_DMA_Abort_IT+0x17c>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a2c      	ldr	r2, [pc, #176]	; (8004cb0 <HAL_DMA_Abort_IT+0x1a8>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d040      	beq.n	8004c84 <HAL_DMA_Abort_IT+0x17c>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a2b      	ldr	r2, [pc, #172]	; (8004cb4 <HAL_DMA_Abort_IT+0x1ac>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d03b      	beq.n	8004c84 <HAL_DMA_Abort_IT+0x17c>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a29      	ldr	r2, [pc, #164]	; (8004cb8 <HAL_DMA_Abort_IT+0x1b0>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d036      	beq.n	8004c84 <HAL_DMA_Abort_IT+0x17c>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a28      	ldr	r2, [pc, #160]	; (8004cbc <HAL_DMA_Abort_IT+0x1b4>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d031      	beq.n	8004c84 <HAL_DMA_Abort_IT+0x17c>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a26      	ldr	r2, [pc, #152]	; (8004cc0 <HAL_DMA_Abort_IT+0x1b8>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d02c      	beq.n	8004c84 <HAL_DMA_Abort_IT+0x17c>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a25      	ldr	r2, [pc, #148]	; (8004cc4 <HAL_DMA_Abort_IT+0x1bc>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d027      	beq.n	8004c84 <HAL_DMA_Abort_IT+0x17c>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a23      	ldr	r2, [pc, #140]	; (8004cc8 <HAL_DMA_Abort_IT+0x1c0>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d022      	beq.n	8004c84 <HAL_DMA_Abort_IT+0x17c>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a22      	ldr	r2, [pc, #136]	; (8004ccc <HAL_DMA_Abort_IT+0x1c4>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d01d      	beq.n	8004c84 <HAL_DMA_Abort_IT+0x17c>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a20      	ldr	r2, [pc, #128]	; (8004cd0 <HAL_DMA_Abort_IT+0x1c8>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d018      	beq.n	8004c84 <HAL_DMA_Abort_IT+0x17c>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a1f      	ldr	r2, [pc, #124]	; (8004cd4 <HAL_DMA_Abort_IT+0x1cc>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d013      	beq.n	8004c84 <HAL_DMA_Abort_IT+0x17c>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a1d      	ldr	r2, [pc, #116]	; (8004cd8 <HAL_DMA_Abort_IT+0x1d0>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d00e      	beq.n	8004c84 <HAL_DMA_Abort_IT+0x17c>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a1c      	ldr	r2, [pc, #112]	; (8004cdc <HAL_DMA_Abort_IT+0x1d4>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d009      	beq.n	8004c84 <HAL_DMA_Abort_IT+0x17c>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a1a      	ldr	r2, [pc, #104]	; (8004ce0 <HAL_DMA_Abort_IT+0x1d8>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d004      	beq.n	8004c84 <HAL_DMA_Abort_IT+0x17c>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a19      	ldr	r2, [pc, #100]	; (8004ce4 <HAL_DMA_Abort_IT+0x1dc>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d108      	bne.n	8004c96 <HAL_DMA_Abort_IT+0x18e>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f022 0201 	bic.w	r2, r2, #1
 8004c92:	601a      	str	r2, [r3, #0]
 8004c94:	e178      	b.n	8004f88 <HAL_DMA_Abort_IT+0x480>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f022 0201 	bic.w	r2, r2, #1
 8004ca4:	601a      	str	r2, [r3, #0]
 8004ca6:	e16f      	b.n	8004f88 <HAL_DMA_Abort_IT+0x480>
 8004ca8:	40020010 	.word	0x40020010
 8004cac:	40020028 	.word	0x40020028
 8004cb0:	40020040 	.word	0x40020040
 8004cb4:	40020058 	.word	0x40020058
 8004cb8:	40020070 	.word	0x40020070
 8004cbc:	40020088 	.word	0x40020088
 8004cc0:	400200a0 	.word	0x400200a0
 8004cc4:	400200b8 	.word	0x400200b8
 8004cc8:	40020410 	.word	0x40020410
 8004ccc:	40020428 	.word	0x40020428
 8004cd0:	40020440 	.word	0x40020440
 8004cd4:	40020458 	.word	0x40020458
 8004cd8:	40020470 	.word	0x40020470
 8004cdc:	40020488 	.word	0x40020488
 8004ce0:	400204a0 	.word	0x400204a0
 8004ce4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f022 020e 	bic.w	r2, r2, #14
 8004cf6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a6c      	ldr	r2, [pc, #432]	; (8004eb0 <HAL_DMA_Abort_IT+0x3a8>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d04a      	beq.n	8004d98 <HAL_DMA_Abort_IT+0x290>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a6b      	ldr	r2, [pc, #428]	; (8004eb4 <HAL_DMA_Abort_IT+0x3ac>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d045      	beq.n	8004d98 <HAL_DMA_Abort_IT+0x290>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a69      	ldr	r2, [pc, #420]	; (8004eb8 <HAL_DMA_Abort_IT+0x3b0>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d040      	beq.n	8004d98 <HAL_DMA_Abort_IT+0x290>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a68      	ldr	r2, [pc, #416]	; (8004ebc <HAL_DMA_Abort_IT+0x3b4>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d03b      	beq.n	8004d98 <HAL_DMA_Abort_IT+0x290>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a66      	ldr	r2, [pc, #408]	; (8004ec0 <HAL_DMA_Abort_IT+0x3b8>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d036      	beq.n	8004d98 <HAL_DMA_Abort_IT+0x290>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a65      	ldr	r2, [pc, #404]	; (8004ec4 <HAL_DMA_Abort_IT+0x3bc>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d031      	beq.n	8004d98 <HAL_DMA_Abort_IT+0x290>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a63      	ldr	r2, [pc, #396]	; (8004ec8 <HAL_DMA_Abort_IT+0x3c0>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d02c      	beq.n	8004d98 <HAL_DMA_Abort_IT+0x290>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a62      	ldr	r2, [pc, #392]	; (8004ecc <HAL_DMA_Abort_IT+0x3c4>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d027      	beq.n	8004d98 <HAL_DMA_Abort_IT+0x290>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a60      	ldr	r2, [pc, #384]	; (8004ed0 <HAL_DMA_Abort_IT+0x3c8>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d022      	beq.n	8004d98 <HAL_DMA_Abort_IT+0x290>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a5f      	ldr	r2, [pc, #380]	; (8004ed4 <HAL_DMA_Abort_IT+0x3cc>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d01d      	beq.n	8004d98 <HAL_DMA_Abort_IT+0x290>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a5d      	ldr	r2, [pc, #372]	; (8004ed8 <HAL_DMA_Abort_IT+0x3d0>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d018      	beq.n	8004d98 <HAL_DMA_Abort_IT+0x290>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a5c      	ldr	r2, [pc, #368]	; (8004edc <HAL_DMA_Abort_IT+0x3d4>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d013      	beq.n	8004d98 <HAL_DMA_Abort_IT+0x290>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a5a      	ldr	r2, [pc, #360]	; (8004ee0 <HAL_DMA_Abort_IT+0x3d8>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d00e      	beq.n	8004d98 <HAL_DMA_Abort_IT+0x290>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a59      	ldr	r2, [pc, #356]	; (8004ee4 <HAL_DMA_Abort_IT+0x3dc>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d009      	beq.n	8004d98 <HAL_DMA_Abort_IT+0x290>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a57      	ldr	r2, [pc, #348]	; (8004ee8 <HAL_DMA_Abort_IT+0x3e0>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d004      	beq.n	8004d98 <HAL_DMA_Abort_IT+0x290>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a56      	ldr	r2, [pc, #344]	; (8004eec <HAL_DMA_Abort_IT+0x3e4>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d108      	bne.n	8004daa <HAL_DMA_Abort_IT+0x2a2>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f022 0201 	bic.w	r2, r2, #1
 8004da6:	601a      	str	r2, [r3, #0]
 8004da8:	e007      	b.n	8004dba <HAL_DMA_Abort_IT+0x2b2>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f022 0201 	bic.w	r2, r2, #1
 8004db8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a3c      	ldr	r2, [pc, #240]	; (8004eb0 <HAL_DMA_Abort_IT+0x3a8>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d072      	beq.n	8004eaa <HAL_DMA_Abort_IT+0x3a2>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a3a      	ldr	r2, [pc, #232]	; (8004eb4 <HAL_DMA_Abort_IT+0x3ac>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d06d      	beq.n	8004eaa <HAL_DMA_Abort_IT+0x3a2>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a39      	ldr	r2, [pc, #228]	; (8004eb8 <HAL_DMA_Abort_IT+0x3b0>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d068      	beq.n	8004eaa <HAL_DMA_Abort_IT+0x3a2>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a37      	ldr	r2, [pc, #220]	; (8004ebc <HAL_DMA_Abort_IT+0x3b4>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d063      	beq.n	8004eaa <HAL_DMA_Abort_IT+0x3a2>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a36      	ldr	r2, [pc, #216]	; (8004ec0 <HAL_DMA_Abort_IT+0x3b8>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d05e      	beq.n	8004eaa <HAL_DMA_Abort_IT+0x3a2>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a34      	ldr	r2, [pc, #208]	; (8004ec4 <HAL_DMA_Abort_IT+0x3bc>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d059      	beq.n	8004eaa <HAL_DMA_Abort_IT+0x3a2>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a33      	ldr	r2, [pc, #204]	; (8004ec8 <HAL_DMA_Abort_IT+0x3c0>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d054      	beq.n	8004eaa <HAL_DMA_Abort_IT+0x3a2>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a31      	ldr	r2, [pc, #196]	; (8004ecc <HAL_DMA_Abort_IT+0x3c4>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d04f      	beq.n	8004eaa <HAL_DMA_Abort_IT+0x3a2>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a30      	ldr	r2, [pc, #192]	; (8004ed0 <HAL_DMA_Abort_IT+0x3c8>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d04a      	beq.n	8004eaa <HAL_DMA_Abort_IT+0x3a2>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a2e      	ldr	r2, [pc, #184]	; (8004ed4 <HAL_DMA_Abort_IT+0x3cc>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d045      	beq.n	8004eaa <HAL_DMA_Abort_IT+0x3a2>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a2d      	ldr	r2, [pc, #180]	; (8004ed8 <HAL_DMA_Abort_IT+0x3d0>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d040      	beq.n	8004eaa <HAL_DMA_Abort_IT+0x3a2>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a2b      	ldr	r2, [pc, #172]	; (8004edc <HAL_DMA_Abort_IT+0x3d4>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d03b      	beq.n	8004eaa <HAL_DMA_Abort_IT+0x3a2>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a2a      	ldr	r2, [pc, #168]	; (8004ee0 <HAL_DMA_Abort_IT+0x3d8>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d036      	beq.n	8004eaa <HAL_DMA_Abort_IT+0x3a2>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a28      	ldr	r2, [pc, #160]	; (8004ee4 <HAL_DMA_Abort_IT+0x3dc>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d031      	beq.n	8004eaa <HAL_DMA_Abort_IT+0x3a2>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a27      	ldr	r2, [pc, #156]	; (8004ee8 <HAL_DMA_Abort_IT+0x3e0>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d02c      	beq.n	8004eaa <HAL_DMA_Abort_IT+0x3a2>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a25      	ldr	r2, [pc, #148]	; (8004eec <HAL_DMA_Abort_IT+0x3e4>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d027      	beq.n	8004eaa <HAL_DMA_Abort_IT+0x3a2>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a24      	ldr	r2, [pc, #144]	; (8004ef0 <HAL_DMA_Abort_IT+0x3e8>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d022      	beq.n	8004eaa <HAL_DMA_Abort_IT+0x3a2>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a22      	ldr	r2, [pc, #136]	; (8004ef4 <HAL_DMA_Abort_IT+0x3ec>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d01d      	beq.n	8004eaa <HAL_DMA_Abort_IT+0x3a2>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a21      	ldr	r2, [pc, #132]	; (8004ef8 <HAL_DMA_Abort_IT+0x3f0>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d018      	beq.n	8004eaa <HAL_DMA_Abort_IT+0x3a2>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a1f      	ldr	r2, [pc, #124]	; (8004efc <HAL_DMA_Abort_IT+0x3f4>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d013      	beq.n	8004eaa <HAL_DMA_Abort_IT+0x3a2>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a1e      	ldr	r2, [pc, #120]	; (8004f00 <HAL_DMA_Abort_IT+0x3f8>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d00e      	beq.n	8004eaa <HAL_DMA_Abort_IT+0x3a2>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a1c      	ldr	r2, [pc, #112]	; (8004f04 <HAL_DMA_Abort_IT+0x3fc>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d009      	beq.n	8004eaa <HAL_DMA_Abort_IT+0x3a2>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a1b      	ldr	r2, [pc, #108]	; (8004f08 <HAL_DMA_Abort_IT+0x400>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d004      	beq.n	8004eaa <HAL_DMA_Abort_IT+0x3a2>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a19      	ldr	r2, [pc, #100]	; (8004f0c <HAL_DMA_Abort_IT+0x404>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d132      	bne.n	8004f10 <HAL_DMA_Abort_IT+0x408>
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e031      	b.n	8004f12 <HAL_DMA_Abort_IT+0x40a>
 8004eae:	bf00      	nop
 8004eb0:	40020010 	.word	0x40020010
 8004eb4:	40020028 	.word	0x40020028
 8004eb8:	40020040 	.word	0x40020040
 8004ebc:	40020058 	.word	0x40020058
 8004ec0:	40020070 	.word	0x40020070
 8004ec4:	40020088 	.word	0x40020088
 8004ec8:	400200a0 	.word	0x400200a0
 8004ecc:	400200b8 	.word	0x400200b8
 8004ed0:	40020410 	.word	0x40020410
 8004ed4:	40020428 	.word	0x40020428
 8004ed8:	40020440 	.word	0x40020440
 8004edc:	40020458 	.word	0x40020458
 8004ee0:	40020470 	.word	0x40020470
 8004ee4:	40020488 	.word	0x40020488
 8004ee8:	400204a0 	.word	0x400204a0
 8004eec:	400204b8 	.word	0x400204b8
 8004ef0:	58025408 	.word	0x58025408
 8004ef4:	5802541c 	.word	0x5802541c
 8004ef8:	58025430 	.word	0x58025430
 8004efc:	58025444 	.word	0x58025444
 8004f00:	58025458 	.word	0x58025458
 8004f04:	5802546c 	.word	0x5802546c
 8004f08:	58025480 	.word	0x58025480
 8004f0c:	58025494 	.word	0x58025494
 8004f10:	2300      	movs	r3, #0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d028      	beq.n	8004f68 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f24:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f2a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f30:	f003 031f 	and.w	r3, r3, #31
 8004f34:	2201      	movs	r2, #1
 8004f36:	409a      	lsls	r2, r3
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004f44:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00c      	beq.n	8004f68 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f5c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004f66:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d003      	beq.n	8004f88 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3710      	adds	r7, #16
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop

08004f94 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d101      	bne.n	8004fa6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e0cf      	b.n	8005146 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d106      	bne.n	8004fbe <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2223      	movs	r2, #35	; 0x23
 8004fb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f7fd f87d 	bl	80020b8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fbe:	4b64      	ldr	r3, [pc, #400]	; (8005150 <HAL_ETH_Init+0x1bc>)
 8004fc0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004fc4:	4a62      	ldr	r2, [pc, #392]	; (8005150 <HAL_ETH_Init+0x1bc>)
 8004fc6:	f043 0302 	orr.w	r3, r3, #2
 8004fca:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004fce:	4b60      	ldr	r3, [pc, #384]	; (8005150 <HAL_ETH_Init+0x1bc>)
 8004fd0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004fd4:	f003 0302 	and.w	r3, r3, #2
 8004fd8:	60bb      	str	r3, [r7, #8]
 8004fda:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	7a1b      	ldrb	r3, [r3, #8]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d103      	bne.n	8004fec <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8004fe4:	2000      	movs	r0, #0
 8004fe6:	f7fe f8a9 	bl	800313c <HAL_SYSCFG_ETHInterfaceSelect>
 8004fea:	e003      	b.n	8004ff4 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8004fec:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8004ff0:	f7fe f8a4 	bl	800313c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8004ff4:	4b57      	ldr	r3, [pc, #348]	; (8005154 <HAL_ETH_Init+0x1c0>)
 8004ff6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	6812      	ldr	r2, [r2, #0]
 8005006:	f043 0301 	orr.w	r3, r3, #1
 800500a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800500e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005010:	f7fe f858 	bl	80030c4 <HAL_GetTick>
 8005014:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005016:	e011      	b.n	800503c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8005018:	f7fe f854 	bl	80030c4 <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005026:	d909      	bls.n	800503c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2204      	movs	r2, #4
 800502c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	22e0      	movs	r2, #224	; 0xe0
 8005034:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e084      	b.n	8005146 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 0301 	and.w	r3, r3, #1
 800504a:	2b00      	cmp	r3, #0
 800504c:	d1e4      	bne.n	8005018 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 f886 	bl	8005160 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8005054:	f002 fcb4 	bl	80079c0 <HAL_RCC_GetHCLKFreq>
 8005058:	4603      	mov	r3, r0
 800505a:	4a3f      	ldr	r2, [pc, #252]	; (8005158 <HAL_ETH_Init+0x1c4>)
 800505c:	fba2 2303 	umull	r2, r3, r2, r3
 8005060:	0c9a      	lsrs	r2, r3, #18
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	3a01      	subs	r2, #1
 8005068:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f000 fa71 	bl	8005554 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800507a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800507e:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	6812      	ldr	r2, [r2, #0]
 8005086:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800508a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800508e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	695b      	ldr	r3, [r3, #20]
 8005096:	f003 0303 	and.w	r3, r3, #3
 800509a:	2b00      	cmp	r3, #0
 800509c:	d009      	beq.n	80050b2 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2201      	movs	r2, #1
 80050a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	22e0      	movs	r2, #224	; 0xe0
 80050aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e049      	b.n	8005146 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050ba:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80050be:	4b27      	ldr	r3, [pc, #156]	; (800515c <HAL_ETH_Init+0x1c8>)
 80050c0:	4013      	ands	r3, r2
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	6952      	ldr	r2, [r2, #20]
 80050c6:	0051      	lsls	r1, r2, #1
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	6812      	ldr	r2, [r2, #0]
 80050cc:	430b      	orrs	r3, r1
 80050ce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80050d2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f000 fad9 	bl	800568e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f000 fb1f 	bl	8005720 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	3305      	adds	r3, #5
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	021a      	lsls	r2, r3, #8
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	3304      	adds	r3, #4
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	4619      	mov	r1, r3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	430a      	orrs	r2, r1
 80050fc:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	3303      	adds	r3, #3
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	061a      	lsls	r2, r3, #24
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	3302      	adds	r3, #2
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	041b      	lsls	r3, r3, #16
 8005114:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	3301      	adds	r3, #1
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005120:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800512e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005130:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2210      	movs	r2, #16
 8005140:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005144:	2300      	movs	r3, #0
}
 8005146:	4618      	mov	r0, r3
 8005148:	3710      	adds	r7, #16
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	58024400 	.word	0x58024400
 8005154:	58000400 	.word	0x58000400
 8005158:	431bde83 	.word	0x431bde83
 800515c:	ffff8001 	.word	0xffff8001

08005160 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005170:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005178:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800517a:	f002 fc21 	bl	80079c0 <HAL_RCC_GetHCLKFreq>
 800517e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	4a1e      	ldr	r2, [pc, #120]	; (80051fc <HAL_ETH_SetMDIOClockRange+0x9c>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d908      	bls.n	800519a <HAL_ETH_SetMDIOClockRange+0x3a>
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	4a1d      	ldr	r2, [pc, #116]	; (8005200 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d804      	bhi.n	800519a <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005196:	60fb      	str	r3, [r7, #12]
 8005198:	e027      	b.n	80051ea <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	4a18      	ldr	r2, [pc, #96]	; (8005200 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d908      	bls.n	80051b4 <HAL_ETH_SetMDIOClockRange+0x54>
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	4a17      	ldr	r2, [pc, #92]	; (8005204 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d204      	bcs.n	80051b4 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80051b0:	60fb      	str	r3, [r7, #12]
 80051b2:	e01a      	b.n	80051ea <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	4a13      	ldr	r2, [pc, #76]	; (8005204 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d303      	bcc.n	80051c4 <HAL_ETH_SetMDIOClockRange+0x64>
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	4a12      	ldr	r2, [pc, #72]	; (8005208 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d911      	bls.n	80051e8 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	4a10      	ldr	r2, [pc, #64]	; (8005208 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d908      	bls.n	80051de <HAL_ETH_SetMDIOClockRange+0x7e>
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	4a0f      	ldr	r2, [pc, #60]	; (800520c <HAL_ETH_SetMDIOClockRange+0xac>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d804      	bhi.n	80051de <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051da:	60fb      	str	r3, [r7, #12]
 80051dc:	e005      	b.n	80051ea <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80051e4:	60fb      	str	r3, [r7, #12]
 80051e6:	e000      	b.n	80051ea <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80051e8:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80051f4:	bf00      	nop
 80051f6:	3710      	adds	r7, #16
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	01312cff 	.word	0x01312cff
 8005200:	02160ebf 	.word	0x02160ebf
 8005204:	03938700 	.word	0x03938700
 8005208:	05f5e0ff 	.word	0x05f5e0ff
 800520c:	08f0d17f 	.word	0x08f0d17f

08005210 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8005210:	b480      	push	{r7}
 8005212:	b085      	sub	sp, #20
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8005222:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	791b      	ldrb	r3, [r3, #4]
 8005228:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800522a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	7b1b      	ldrb	r3, [r3, #12]
 8005230:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8005232:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	7b5b      	ldrb	r3, [r3, #13]
 8005238:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800523a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	7b9b      	ldrb	r3, [r3, #14]
 8005240:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8005242:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	7bdb      	ldrb	r3, [r3, #15]
 8005248:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800524a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800524c:	683a      	ldr	r2, [r7, #0]
 800524e:	7c12      	ldrb	r2, [r2, #16]
 8005250:	2a00      	cmp	r2, #0
 8005252:	d102      	bne.n	800525a <ETH_SetMACConfig+0x4a>
 8005254:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005258:	e000      	b.n	800525c <ETH_SetMACConfig+0x4c>
 800525a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800525c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800525e:	683a      	ldr	r2, [r7, #0]
 8005260:	7c52      	ldrb	r2, [r2, #17]
 8005262:	2a00      	cmp	r2, #0
 8005264:	d102      	bne.n	800526c <ETH_SetMACConfig+0x5c>
 8005266:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800526a:	e000      	b.n	800526e <ETH_SetMACConfig+0x5e>
 800526c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800526e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	7c9b      	ldrb	r3, [r3, #18]
 8005274:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005276:	431a      	orrs	r2, r3
               macconf->Speed |
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800527c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8005282:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	7f1b      	ldrb	r3, [r3, #28]
 8005288:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800528a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	7f5b      	ldrb	r3, [r3, #29]
 8005290:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8005292:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8005294:	683a      	ldr	r2, [r7, #0]
 8005296:	7f92      	ldrb	r2, [r2, #30]
 8005298:	2a00      	cmp	r2, #0
 800529a:	d102      	bne.n	80052a2 <ETH_SetMACConfig+0x92>
 800529c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80052a0:	e000      	b.n	80052a4 <ETH_SetMACConfig+0x94>
 80052a2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80052a4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	7fdb      	ldrb	r3, [r3, #31]
 80052aa:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80052ac:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80052ae:	683a      	ldr	r2, [r7, #0]
 80052b0:	f892 2020 	ldrb.w	r2, [r2, #32]
 80052b4:	2a00      	cmp	r2, #0
 80052b6:	d102      	bne.n	80052be <ETH_SetMACConfig+0xae>
 80052b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80052bc:	e000      	b.n	80052c0 <ETH_SetMACConfig+0xb0>
 80052be:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80052c0:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80052c6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052ce:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80052d0:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80052d6:	4313      	orrs	r3, r2
 80052d8:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	4b56      	ldr	r3, [pc, #344]	; (800543c <ETH_SetMACConfig+0x22c>)
 80052e2:	4013      	ands	r3, r2
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	6812      	ldr	r2, [r2, #0]
 80052e8:	68f9      	ldr	r1, [r7, #12]
 80052ea:	430b      	orrs	r3, r1
 80052ec:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052f2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80052fa:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80052fc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005304:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8005306:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800530e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8005310:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8005312:	683a      	ldr	r2, [r7, #0]
 8005314:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8005318:	2a00      	cmp	r2, #0
 800531a:	d102      	bne.n	8005322 <ETH_SetMACConfig+0x112>
 800531c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005320:	e000      	b.n	8005324 <ETH_SetMACConfig+0x114>
 8005322:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8005324:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800532a:	4313      	orrs	r3, r2
 800532c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	685a      	ldr	r2, [r3, #4]
 8005334:	4b42      	ldr	r3, [pc, #264]	; (8005440 <ETH_SetMACConfig+0x230>)
 8005336:	4013      	ands	r3, r2
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	6812      	ldr	r2, [r2, #0]
 800533c:	68f9      	ldr	r1, [r7, #12]
 800533e:	430b      	orrs	r3, r1
 8005340:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005348:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800534e:	4313      	orrs	r3, r2
 8005350:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68da      	ldr	r2, [r3, #12]
 8005358:	4b3a      	ldr	r3, [pc, #232]	; (8005444 <ETH_SetMACConfig+0x234>)
 800535a:	4013      	ands	r3, r2
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	6812      	ldr	r2, [r2, #0]
 8005360:	68f9      	ldr	r1, [r7, #12]
 8005362:	430b      	orrs	r3, r1
 8005364:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800536c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005372:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8005374:	683a      	ldr	r2, [r7, #0]
 8005376:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800537a:	2a00      	cmp	r2, #0
 800537c:	d101      	bne.n	8005382 <ETH_SetMACConfig+0x172>
 800537e:	2280      	movs	r2, #128	; 0x80
 8005380:	e000      	b.n	8005384 <ETH_SetMACConfig+0x174>
 8005382:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8005384:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800538a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800538c:	4313      	orrs	r3, r2
 800538e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005396:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800539a:	4013      	ands	r3, r2
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	6812      	ldr	r2, [r2, #0]
 80053a0:	68f9      	ldr	r1, [r7, #12]
 80053a2:	430b      	orrs	r3, r1
 80053a4:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80053ac:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80053b4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80053b6:	4313      	orrs	r3, r2
 80053b8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053c2:	f023 0103 	bic.w	r1, r3, #3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68fa      	ldr	r2, [r7, #12]
 80053cc:	430a      	orrs	r2, r1
 80053ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80053da:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	430a      	orrs	r2, r1
 80053e8:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80053f0:	683a      	ldr	r2, [r7, #0]
 80053f2:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80053f6:	2a00      	cmp	r2, #0
 80053f8:	d101      	bne.n	80053fe <ETH_SetMACConfig+0x1ee>
 80053fa:	2240      	movs	r2, #64	; 0x40
 80053fc:	e000      	b.n	8005400 <ETH_SetMACConfig+0x1f0>
 80053fe:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8005400:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005408:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800540a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8005412:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8005414:	4313      	orrs	r3, r2
 8005416:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8005420:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68fa      	ldr	r2, [r7, #12]
 800542a:	430a      	orrs	r2, r1
 800542c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8005430:	bf00      	nop
 8005432:	3714      	adds	r7, #20
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr
 800543c:	00048083 	.word	0x00048083
 8005440:	c0f88000 	.word	0xc0f88000
 8005444:	fffffef0 	.word	0xfffffef0

08005448 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8005448:	b480      	push	{r7}
 800544a:	b085      	sub	sp, #20
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	4b38      	ldr	r3, [pc, #224]	; (8005540 <ETH_SetDMAConfig+0xf8>)
 800545e:	4013      	ands	r3, r2
 8005460:	683a      	ldr	r2, [r7, #0]
 8005462:	6811      	ldr	r1, [r2, #0]
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	6812      	ldr	r2, [r2, #0]
 8005468:	430b      	orrs	r3, r1
 800546a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800546e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	791b      	ldrb	r3, [r3, #4]
 8005474:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800547a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	7b1b      	ldrb	r3, [r3, #12]
 8005480:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005482:	4313      	orrs	r3, r2
 8005484:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800548e:	685a      	ldr	r2, [r3, #4]
 8005490:	4b2c      	ldr	r3, [pc, #176]	; (8005544 <ETH_SetDMAConfig+0xfc>)
 8005492:	4013      	ands	r3, r2
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	6812      	ldr	r2, [r2, #0]
 8005498:	68f9      	ldr	r1, [r7, #12]
 800549a:	430b      	orrs	r3, r1
 800549c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80054a0:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	7b5b      	ldrb	r3, [r3, #13]
 80054a6:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80054ac:	4313      	orrs	r3, r2
 80054ae:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054b8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80054bc:	4b22      	ldr	r3, [pc, #136]	; (8005548 <ETH_SetDMAConfig+0x100>)
 80054be:	4013      	ands	r3, r2
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	6812      	ldr	r2, [r2, #0]
 80054c4:	68f9      	ldr	r1, [r7, #12]
 80054c6:	430b      	orrs	r3, r1
 80054c8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80054cc:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	7d1b      	ldrb	r3, [r3, #20]
 80054d8:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80054da:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	7f5b      	ldrb	r3, [r3, #29]
 80054e0:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80054e2:	4313      	orrs	r3, r2
 80054e4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054ee:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80054f2:	4b16      	ldr	r3, [pc, #88]	; (800554c <ETH_SetDMAConfig+0x104>)
 80054f4:	4013      	ands	r3, r2
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	6812      	ldr	r2, [r2, #0]
 80054fa:	68f9      	ldr	r1, [r7, #12]
 80054fc:	430b      	orrs	r3, r1
 80054fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005502:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	7f1b      	ldrb	r3, [r3, #28]
 800550a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005510:	4313      	orrs	r3, r2
 8005512:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800551c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8005520:	4b0b      	ldr	r3, [pc, #44]	; (8005550 <ETH_SetDMAConfig+0x108>)
 8005522:	4013      	ands	r3, r2
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	6812      	ldr	r2, [r2, #0]
 8005528:	68f9      	ldr	r1, [r7, #12]
 800552a:	430b      	orrs	r3, r1
 800552c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005530:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8005534:	bf00      	nop
 8005536:	3714      	adds	r7, #20
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr
 8005540:	ffff87fd 	.word	0xffff87fd
 8005544:	ffff2ffe 	.word	0xffff2ffe
 8005548:	fffec000 	.word	0xfffec000
 800554c:	ffc0efef 	.word	0xffc0efef
 8005550:	7fc0ffff 	.word	0x7fc0ffff

08005554 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b0a4      	sub	sp, #144	; 0x90
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800555c:	2301      	movs	r3, #1
 800555e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005562:	2300      	movs	r3, #0
 8005564:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8005566:	2300      	movs	r3, #0
 8005568:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800556c:	2300      	movs	r3, #0
 800556e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8005572:	2301      	movs	r3, #1
 8005574:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8005578:	2301      	movs	r3, #1
 800557a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800557e:	2301      	movs	r3, #1
 8005580:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8005584:	2300      	movs	r3, #0
 8005586:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800558a:	2301      	movs	r3, #1
 800558c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005590:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005594:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8005596:	2300      	movs	r3, #0
 8005598:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 800559c:	2300      	movs	r3, #0
 800559e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80055a0:	2300      	movs	r3, #0
 80055a2:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80055a6:	2300      	movs	r3, #0
 80055a8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80055ac:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80055b0:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80055b2:	2300      	movs	r3, #0
 80055b4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80055b8:	2300      	movs	r3, #0
 80055ba:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80055bc:	2301      	movs	r3, #1
 80055be:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80055c2:	2300      	movs	r3, #0
 80055c4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80055c8:	2300      	movs	r3, #0
 80055ca:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80055ce:	2300      	movs	r3, #0
 80055d0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80055d2:	2300      	movs	r3, #0
 80055d4:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80055d6:	2300      	movs	r3, #0
 80055d8:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80055da:	2300      	movs	r3, #0
 80055dc:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80055e0:	2300      	movs	r3, #0
 80055e2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80055e6:	2301      	movs	r3, #1
 80055e8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80055ec:	2320      	movs	r3, #32
 80055ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80055f2:	2301      	movs	r3, #1
 80055f4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80055f8:	2300      	movs	r3, #0
 80055fa:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80055fe:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8005602:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005604:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005608:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800560a:	2300      	movs	r3, #0
 800560c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8005610:	2302      	movs	r3, #2
 8005612:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005616:	2300      	movs	r3, #0
 8005618:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800561c:	2300      	movs	r3, #0
 800561e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8005622:	2300      	movs	r3, #0
 8005624:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8005628:	2301      	movs	r3, #1
 800562a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800562e:	2300      	movs	r3, #0
 8005630:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8005632:	2301      	movs	r3, #1
 8005634:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005638:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800563c:	4619      	mov	r1, r3
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f7ff fde6 	bl	8005210 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005644:	2301      	movs	r3, #1
 8005646:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005648:	2301      	movs	r3, #1
 800564a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800564c:	2300      	movs	r3, #0
 800564e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8005650:	2300      	movs	r3, #0
 8005652:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8005656:	2300      	movs	r3, #0
 8005658:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800565a:	2300      	movs	r3, #0
 800565c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800565e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005662:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8005664:	2300      	movs	r3, #0
 8005666:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005668:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800566c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800566e:	2300      	movs	r3, #0
 8005670:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8005674:	f44f 7306 	mov.w	r3, #536	; 0x218
 8005678:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800567a:	f107 0308 	add.w	r3, r7, #8
 800567e:	4619      	mov	r1, r3
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f7ff fee1 	bl	8005448 <ETH_SetDMAConfig>
}
 8005686:	bf00      	nop
 8005688:	3790      	adds	r7, #144	; 0x90
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}

0800568e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800568e:	b480      	push	{r7}
 8005690:	b085      	sub	sp, #20
 8005692:	af00      	add	r7, sp, #0
 8005694:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005696:	2300      	movs	r3, #0
 8005698:	60fb      	str	r3, [r7, #12]
 800569a:	e01d      	b.n	80056d8 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	68d9      	ldr	r1, [r3, #12]
 80056a0:	68fa      	ldr	r2, [r7, #12]
 80056a2:	4613      	mov	r3, r2
 80056a4:	005b      	lsls	r3, r3, #1
 80056a6:	4413      	add	r3, r2
 80056a8:	00db      	lsls	r3, r3, #3
 80056aa:	440b      	add	r3, r1
 80056ac:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	2200      	movs	r2, #0
 80056b2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	2200      	movs	r2, #0
 80056b8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	2200      	movs	r2, #0
 80056be:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	2200      	movs	r2, #0
 80056c4:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80056c6:	68b9      	ldr	r1, [r7, #8]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	68fa      	ldr	r2, [r7, #12]
 80056cc:	3206      	adds	r2, #6
 80056ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	3301      	adds	r3, #1
 80056d6:	60fb      	str	r3, [r7, #12]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2b03      	cmp	r3, #3
 80056dc:	d9de      	bls.n	800569c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056ec:	461a      	mov	r2, r3
 80056ee:	2303      	movs	r3, #3
 80056f0:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	68da      	ldr	r2, [r3, #12]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005700:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	68da      	ldr	r2, [r3, #12]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005710:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8005714:	bf00      	nop
 8005716:	3714      	adds	r7, #20
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005720:	b480      	push	{r7}
 8005722:	b085      	sub	sp, #20
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005728:	2300      	movs	r3, #0
 800572a:	60fb      	str	r3, [r7, #12]
 800572c:	e023      	b.n	8005776 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6919      	ldr	r1, [r3, #16]
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	4613      	mov	r3, r2
 8005736:	005b      	lsls	r3, r3, #1
 8005738:	4413      	add	r3, r2
 800573a:	00db      	lsls	r3, r3, #3
 800573c:	440b      	add	r3, r1
 800573e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	2200      	movs	r2, #0
 8005744:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	2200      	movs	r2, #0
 800574a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	2200      	movs	r2, #0
 8005750:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	2200      	movs	r2, #0
 8005756:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	2200      	movs	r2, #0
 800575c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	2200      	movs	r2, #0
 8005762:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005764:	68b9      	ldr	r1, [r7, #8]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	3212      	adds	r2, #18
 800576c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	3301      	adds	r3, #1
 8005774:	60fb      	str	r3, [r7, #12]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2b03      	cmp	r3, #3
 800577a:	d9d8      	bls.n	800572e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057a2:	461a      	mov	r2, r3
 80057a4:	2303      	movs	r3, #3
 80057a6:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	691a      	ldr	r2, [r3, #16]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057b6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057ca:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80057ce:	bf00      	nop
 80057d0:	3714      	adds	r7, #20
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr
	...

080057dc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b098      	sub	sp, #96	; 0x60
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80057e4:	4a84      	ldr	r2, [pc, #528]	; (80059f8 <HAL_FDCAN_Init+0x21c>)
 80057e6:	f107 030c 	add.w	r3, r7, #12
 80057ea:	4611      	mov	r1, r2
 80057ec:	224c      	movs	r2, #76	; 0x4c
 80057ee:	4618      	mov	r0, r3
 80057f0:	f009 f968 	bl	800eac4 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d101      	bne.n	80057fe <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e1c6      	b.n	8005b8c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a7e      	ldr	r2, [pc, #504]	; (80059fc <HAL_FDCAN_Init+0x220>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d106      	bne.n	8005816 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005810:	461a      	mov	r2, r3
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800581c:	b2db      	uxtb	r3, r3
 800581e:	2b00      	cmp	r3, #0
 8005820:	d106      	bne.n	8005830 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f7fc fd74 	bl	8002318 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	699a      	ldr	r2, [r3, #24]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f022 0210 	bic.w	r2, r2, #16
 800583e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005840:	f7fd fc40 	bl	80030c4 <HAL_GetTick>
 8005844:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005846:	e014      	b.n	8005872 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005848:	f7fd fc3c 	bl	80030c4 <HAL_GetTick>
 800584c:	4602      	mov	r2, r0
 800584e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	2b0a      	cmp	r3, #10
 8005854:	d90d      	bls.n	8005872 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800585c:	f043 0201 	orr.w	r2, r3, #1
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2203      	movs	r2, #3
 800586a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e18c      	b.n	8005b8c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	699b      	ldr	r3, [r3, #24]
 8005878:	f003 0308 	and.w	r3, r3, #8
 800587c:	2b08      	cmp	r3, #8
 800587e:	d0e3      	beq.n	8005848 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	699a      	ldr	r2, [r3, #24]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f042 0201 	orr.w	r2, r2, #1
 800588e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005890:	f7fd fc18 	bl	80030c4 <HAL_GetTick>
 8005894:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005896:	e014      	b.n	80058c2 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005898:	f7fd fc14 	bl	80030c4 <HAL_GetTick>
 800589c:	4602      	mov	r2, r0
 800589e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	2b0a      	cmp	r3, #10
 80058a4:	d90d      	bls.n	80058c2 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80058ac:	f043 0201 	orr.w	r2, r3, #1
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2203      	movs	r2, #3
 80058ba:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e164      	b.n	8005b8c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	699b      	ldr	r3, [r3, #24]
 80058c8:	f003 0301 	and.w	r3, r3, #1
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d0e3      	beq.n	8005898 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	699a      	ldr	r2, [r3, #24]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f042 0202 	orr.w	r2, r2, #2
 80058de:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	7c1b      	ldrb	r3, [r3, #16]
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d108      	bne.n	80058fa <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	699a      	ldr	r2, [r3, #24]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058f6:	619a      	str	r2, [r3, #24]
 80058f8:	e007      	b.n	800590a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	699a      	ldr	r2, [r3, #24]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005908:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	7c5b      	ldrb	r3, [r3, #17]
 800590e:	2b01      	cmp	r3, #1
 8005910:	d108      	bne.n	8005924 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	699a      	ldr	r2, [r3, #24]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005920:	619a      	str	r2, [r3, #24]
 8005922:	e007      	b.n	8005934 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	699a      	ldr	r2, [r3, #24]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005932:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	7c9b      	ldrb	r3, [r3, #18]
 8005938:	2b01      	cmp	r3, #1
 800593a:	d108      	bne.n	800594e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	699a      	ldr	r2, [r3, #24]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800594a:	619a      	str	r2, [r3, #24]
 800594c:	e007      	b.n	800595e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	699a      	ldr	r2, [r3, #24]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800595c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	699b      	ldr	r3, [r3, #24]
 8005964:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	689a      	ldr	r2, [r3, #8]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	430a      	orrs	r2, r1
 8005972:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	699a      	ldr	r2, [r3, #24]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8005982:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	691a      	ldr	r2, [r3, #16]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f022 0210 	bic.w	r2, r2, #16
 8005992:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	2b01      	cmp	r3, #1
 800599a:	d108      	bne.n	80059ae <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	699a      	ldr	r2, [r3, #24]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f042 0204 	orr.w	r2, r2, #4
 80059aa:	619a      	str	r2, [r3, #24]
 80059ac:	e030      	b.n	8005a10 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d02c      	beq.n	8005a10 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	2b02      	cmp	r3, #2
 80059bc:	d020      	beq.n	8005a00 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	699a      	ldr	r2, [r3, #24]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80059cc:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	691a      	ldr	r2, [r3, #16]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f042 0210 	orr.w	r2, r2, #16
 80059dc:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	2b03      	cmp	r3, #3
 80059e4:	d114      	bne.n	8005a10 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	699a      	ldr	r2, [r3, #24]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f042 0220 	orr.w	r2, r2, #32
 80059f4:	619a      	str	r2, [r3, #24]
 80059f6:	e00b      	b.n	8005a10 <HAL_FDCAN_Init+0x234>
 80059f8:	0800f4d4 	.word	0x0800f4d4
 80059fc:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	699a      	ldr	r2, [r3, #24]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f042 0220 	orr.w	r2, r2, #32
 8005a0e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	699b      	ldr	r3, [r3, #24]
 8005a14:	3b01      	subs	r3, #1
 8005a16:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	69db      	ldr	r3, [r3, #28]
 8005a1c:	3b01      	subs	r3, #1
 8005a1e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005a20:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a1b      	ldr	r3, [r3, #32]
 8005a26:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005a28:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	695b      	ldr	r3, [r3, #20]
 8005a30:	3b01      	subs	r3, #1
 8005a32:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005a38:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005a3a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a44:	d115      	bne.n	8005a72 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a4a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a50:	3b01      	subs	r3, #1
 8005a52:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005a54:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a5a:	3b01      	subs	r3, #1
 8005a5c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8005a5e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a66:	3b01      	subs	r3, #1
 8005a68:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8005a6e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005a70:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d00a      	beq.n	8005a90 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	430a      	orrs	r2, r1
 8005a8c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a98:	4413      	add	r3, r2
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d011      	beq.n	8005ac2 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8005aa6:	f023 0107 	bic.w	r1, r3, #7
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	3360      	adds	r3, #96	; 0x60
 8005ab2:	443b      	add	r3, r7
 8005ab4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	430a      	orrs	r2, r1
 8005abe:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d011      	beq.n	8005aee <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005ad2:	f023 0107 	bic.w	r1, r3, #7
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	3360      	adds	r3, #96	; 0x60
 8005ade:	443b      	add	r3, r7
 8005ae0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	430a      	orrs	r2, r1
 8005aea:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d012      	beq.n	8005b1c <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005afe:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	3360      	adds	r3, #96	; 0x60
 8005b0a:	443b      	add	r3, r7
 8005b0c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005b10:	011a      	lsls	r2, r3, #4
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	430a      	orrs	r2, r1
 8005b18:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d012      	beq.n	8005b4a <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005b2c:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	3360      	adds	r3, #96	; 0x60
 8005b38:	443b      	add	r3, r7
 8005b3a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005b3e:	021a      	lsls	r2, r3, #8
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	430a      	orrs	r2, r1
 8005b46:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a11      	ldr	r2, [pc, #68]	; (8005b94 <HAL_FDCAN_Init+0x3b8>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d107      	bne.n	8005b64 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	689a      	ldr	r2, [r3, #8]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	f022 0203 	bic.w	r2, r2, #3
 8005b62:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f000 f80b 	bl	8005b98 <FDCAN_CalcultateRamBlockAddresses>
 8005b82:	4603      	mov	r3, r0
 8005b84:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8005b88:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3760      	adds	r7, #96	; 0x60
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	4000a000 	.word	0x4000a000

08005b98 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b085      	sub	sp, #20
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ba4:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005bae:	4ba7      	ldr	r3, [pc, #668]	; (8005e4c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005bb0:	4013      	ands	r3, r2
 8005bb2:	68ba      	ldr	r2, [r7, #8]
 8005bb4:	0091      	lsls	r1, r2, #2
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	6812      	ldr	r2, [r2, #0]
 8005bba:	430b      	orrs	r3, r1
 8005bbc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bc8:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd0:	041a      	lsls	r2, r3, #16
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	430a      	orrs	r2, r1
 8005bd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be0:	68ba      	ldr	r2, [r7, #8]
 8005be2:	4413      	add	r3, r2
 8005be4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005bee:	4b97      	ldr	r3, [pc, #604]	; (8005e4c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	68ba      	ldr	r2, [r7, #8]
 8005bf4:	0091      	lsls	r1, r2, #2
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	6812      	ldr	r2, [r2, #0]
 8005bfa:	430b      	orrs	r3, r1
 8005bfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c08:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c10:	041a      	lsls	r2, r3, #16
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	430a      	orrs	r2, r1
 8005c18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c20:	005b      	lsls	r3, r3, #1
 8005c22:	68ba      	ldr	r2, [r7, #8]
 8005c24:	4413      	add	r3, r2
 8005c26:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8005c30:	4b86      	ldr	r3, [pc, #536]	; (8005e4c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005c32:	4013      	ands	r3, r2
 8005c34:	68ba      	ldr	r2, [r7, #8]
 8005c36:	0091      	lsls	r1, r2, #2
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	6812      	ldr	r2, [r2, #0]
 8005c3c:	430b      	orrs	r3, r1
 8005c3e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005c4a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c52:	041a      	lsls	r2, r3, #16
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	430a      	orrs	r2, r1
 8005c5a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005c66:	fb02 f303 	mul.w	r3, r2, r3
 8005c6a:	68ba      	ldr	r2, [r7, #8]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005c78:	4b74      	ldr	r3, [pc, #464]	; (8005e4c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	68ba      	ldr	r2, [r7, #8]
 8005c7e:	0091      	lsls	r1, r2, #2
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	6812      	ldr	r2, [r2, #0]
 8005c84:	430b      	orrs	r3, r1
 8005c86:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005c92:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c9a:	041a      	lsls	r2, r3, #16
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	430a      	orrs	r2, r1
 8005ca2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005cae:	fb02 f303 	mul.w	r3, r2, r3
 8005cb2:	68ba      	ldr	r2, [r7, #8]
 8005cb4:	4413      	add	r3, r2
 8005cb6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005cc0:	4b62      	ldr	r3, [pc, #392]	; (8005e4c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005cc2:	4013      	ands	r3, r2
 8005cc4:	68ba      	ldr	r2, [r7, #8]
 8005cc6:	0091      	lsls	r1, r2, #2
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	6812      	ldr	r2, [r2, #0]
 8005ccc:	430b      	orrs	r3, r1
 8005cce:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005cda:	fb02 f303 	mul.w	r3, r2, r3
 8005cde:	68ba      	ldr	r2, [r7, #8]
 8005ce0:	4413      	add	r3, r2
 8005ce2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8005cec:	4b57      	ldr	r3, [pc, #348]	; (8005e4c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005cee:	4013      	ands	r3, r2
 8005cf0:	68ba      	ldr	r2, [r7, #8]
 8005cf2:	0091      	lsls	r1, r2, #2
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	6812      	ldr	r2, [r2, #0]
 8005cf8:	430b      	orrs	r3, r1
 8005cfa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005d06:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d0e:	041a      	lsls	r2, r3, #16
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	430a      	orrs	r2, r1
 8005d16:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d1e:	005b      	lsls	r3, r3, #1
 8005d20:	68ba      	ldr	r2, [r7, #8]
 8005d22:	4413      	add	r3, r2
 8005d24:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005d2e:	4b47      	ldr	r3, [pc, #284]	; (8005e4c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005d30:	4013      	ands	r3, r2
 8005d32:	68ba      	ldr	r2, [r7, #8]
 8005d34:	0091      	lsls	r1, r2, #2
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	6812      	ldr	r2, [r2, #0]
 8005d3a:	430b      	orrs	r3, r1
 8005d3c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005d48:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d50:	041a      	lsls	r2, r3, #16
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	430a      	orrs	r2, r1
 8005d58:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005d64:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d6c:	061a      	lsls	r2, r3, #24
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	430a      	orrs	r2, r1
 8005d74:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d7c:	4b34      	ldr	r3, [pc, #208]	; (8005e50 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8005d7e:	4413      	add	r3, r2
 8005d80:	009a      	lsls	r2, r3, #2
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d8e:	009b      	lsls	r3, r3, #2
 8005d90:	441a      	add	r2, r3
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d9e:	00db      	lsls	r3, r3, #3
 8005da0:	441a      	add	r2, r3
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dae:	6879      	ldr	r1, [r7, #4]
 8005db0:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8005db2:	fb01 f303 	mul.w	r3, r1, r3
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	441a      	add	r2, r3
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dc6:	6879      	ldr	r1, [r7, #4]
 8005dc8:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8005dca:	fb01 f303 	mul.w	r3, r1, r3
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	441a      	add	r2, r3
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dde:	6879      	ldr	r1, [r7, #4]
 8005de0:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8005de2:	fb01 f303 	mul.w	r3, r1, r3
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	441a      	add	r2, r3
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dfa:	00db      	lsls	r3, r3, #3
 8005dfc:	441a      	add	r2, r3
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e0e:	6879      	ldr	r1, [r7, #4]
 8005e10:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8005e12:	fb01 f303 	mul.w	r3, r1, r3
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	441a      	add	r2, r3
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e2a:	6879      	ldr	r1, [r7, #4]
 8005e2c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8005e2e:	fb01 f303 	mul.w	r3, r1, r3
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	441a      	add	r2, r3
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e42:	4a04      	ldr	r2, [pc, #16]	; (8005e54 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d915      	bls.n	8005e74 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8005e48:	e006      	b.n	8005e58 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8005e4a:	bf00      	nop
 8005e4c:	ffff0003 	.word	0xffff0003
 8005e50:	10002b00 	.word	0x10002b00
 8005e54:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e5e:	f043 0220 	orr.w	r2, r3, #32
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2203      	movs	r2, #3
 8005e6c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	e010      	b.n	8005e96 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e78:	60fb      	str	r3, [r7, #12]
 8005e7a:	e005      	b.n	8005e88 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	3304      	adds	r3, #4
 8005e86:	60fb      	str	r3, [r7, #12]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e8e:	68fa      	ldr	r2, [r7, #12]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d3f3      	bcc.n	8005e7c <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005e94:	2300      	movs	r3, #0
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3714      	adds	r7, #20
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr
 8005ea2:	bf00      	nop

08005ea4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b089      	sub	sp, #36	; 0x24
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005eb2:	4b89      	ldr	r3, [pc, #548]	; (80060d8 <HAL_GPIO_Init+0x234>)
 8005eb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005eb6:	e194      	b.n	80061e2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	2101      	movs	r1, #1
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ec4:	4013      	ands	r3, r2
 8005ec6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	f000 8186 	beq.w	80061dc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	f003 0303 	and.w	r3, r3, #3
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d005      	beq.n	8005ee8 <HAL_GPIO_Init+0x44>
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	f003 0303 	and.w	r3, r3, #3
 8005ee4:	2b02      	cmp	r3, #2
 8005ee6:	d130      	bne.n	8005f4a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	005b      	lsls	r3, r3, #1
 8005ef2:	2203      	movs	r2, #3
 8005ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ef8:	43db      	mvns	r3, r3
 8005efa:	69ba      	ldr	r2, [r7, #24]
 8005efc:	4013      	ands	r3, r2
 8005efe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	68da      	ldr	r2, [r3, #12]
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	005b      	lsls	r3, r3, #1
 8005f08:	fa02 f303 	lsl.w	r3, r2, r3
 8005f0c:	69ba      	ldr	r2, [r7, #24]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	69ba      	ldr	r2, [r7, #24]
 8005f16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005f1e:	2201      	movs	r2, #1
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	fa02 f303 	lsl.w	r3, r2, r3
 8005f26:	43db      	mvns	r3, r3
 8005f28:	69ba      	ldr	r2, [r7, #24]
 8005f2a:	4013      	ands	r3, r2
 8005f2c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	091b      	lsrs	r3, r3, #4
 8005f34:	f003 0201 	and.w	r2, r3, #1
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f3e:	69ba      	ldr	r2, [r7, #24]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	69ba      	ldr	r2, [r7, #24]
 8005f48:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	f003 0303 	and.w	r3, r3, #3
 8005f52:	2b03      	cmp	r3, #3
 8005f54:	d017      	beq.n	8005f86 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	005b      	lsls	r3, r3, #1
 8005f60:	2203      	movs	r2, #3
 8005f62:	fa02 f303 	lsl.w	r3, r2, r3
 8005f66:	43db      	mvns	r3, r3
 8005f68:	69ba      	ldr	r2, [r7, #24]
 8005f6a:	4013      	ands	r3, r2
 8005f6c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	689a      	ldr	r2, [r3, #8]
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	005b      	lsls	r3, r3, #1
 8005f76:	fa02 f303 	lsl.w	r3, r2, r3
 8005f7a:	69ba      	ldr	r2, [r7, #24]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	69ba      	ldr	r2, [r7, #24]
 8005f84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	f003 0303 	and.w	r3, r3, #3
 8005f8e:	2b02      	cmp	r3, #2
 8005f90:	d123      	bne.n	8005fda <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005f92:	69fb      	ldr	r3, [r7, #28]
 8005f94:	08da      	lsrs	r2, r3, #3
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	3208      	adds	r2, #8
 8005f9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005fa0:	69fb      	ldr	r3, [r7, #28]
 8005fa2:	f003 0307 	and.w	r3, r3, #7
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	220f      	movs	r2, #15
 8005faa:	fa02 f303 	lsl.w	r3, r2, r3
 8005fae:	43db      	mvns	r3, r3
 8005fb0:	69ba      	ldr	r2, [r7, #24]
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	691a      	ldr	r2, [r3, #16]
 8005fba:	69fb      	ldr	r3, [r7, #28]
 8005fbc:	f003 0307 	and.w	r3, r3, #7
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc6:	69ba      	ldr	r2, [r7, #24]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005fcc:	69fb      	ldr	r3, [r7, #28]
 8005fce:	08da      	lsrs	r2, r3, #3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	3208      	adds	r2, #8
 8005fd4:	69b9      	ldr	r1, [r7, #24]
 8005fd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005fe0:	69fb      	ldr	r3, [r7, #28]
 8005fe2:	005b      	lsls	r3, r3, #1
 8005fe4:	2203      	movs	r2, #3
 8005fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8005fea:	43db      	mvns	r3, r3
 8005fec:	69ba      	ldr	r2, [r7, #24]
 8005fee:	4013      	ands	r3, r2
 8005ff0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	f003 0203 	and.w	r2, r3, #3
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	005b      	lsls	r3, r3, #1
 8005ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8006002:	69ba      	ldr	r2, [r7, #24]
 8006004:	4313      	orrs	r3, r2
 8006006:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	69ba      	ldr	r2, [r7, #24]
 800600c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006016:	2b00      	cmp	r3, #0
 8006018:	f000 80e0 	beq.w	80061dc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800601c:	4b2f      	ldr	r3, [pc, #188]	; (80060dc <HAL_GPIO_Init+0x238>)
 800601e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006022:	4a2e      	ldr	r2, [pc, #184]	; (80060dc <HAL_GPIO_Init+0x238>)
 8006024:	f043 0302 	orr.w	r3, r3, #2
 8006028:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800602c:	4b2b      	ldr	r3, [pc, #172]	; (80060dc <HAL_GPIO_Init+0x238>)
 800602e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006032:	f003 0302 	and.w	r3, r3, #2
 8006036:	60fb      	str	r3, [r7, #12]
 8006038:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800603a:	4a29      	ldr	r2, [pc, #164]	; (80060e0 <HAL_GPIO_Init+0x23c>)
 800603c:	69fb      	ldr	r3, [r7, #28]
 800603e:	089b      	lsrs	r3, r3, #2
 8006040:	3302      	adds	r3, #2
 8006042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006046:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006048:	69fb      	ldr	r3, [r7, #28]
 800604a:	f003 0303 	and.w	r3, r3, #3
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	220f      	movs	r2, #15
 8006052:	fa02 f303 	lsl.w	r3, r2, r3
 8006056:	43db      	mvns	r3, r3
 8006058:	69ba      	ldr	r2, [r7, #24]
 800605a:	4013      	ands	r3, r2
 800605c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a20      	ldr	r2, [pc, #128]	; (80060e4 <HAL_GPIO_Init+0x240>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d052      	beq.n	800610c <HAL_GPIO_Init+0x268>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4a1f      	ldr	r2, [pc, #124]	; (80060e8 <HAL_GPIO_Init+0x244>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d031      	beq.n	80060d2 <HAL_GPIO_Init+0x22e>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4a1e      	ldr	r2, [pc, #120]	; (80060ec <HAL_GPIO_Init+0x248>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d02b      	beq.n	80060ce <HAL_GPIO_Init+0x22a>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	4a1d      	ldr	r2, [pc, #116]	; (80060f0 <HAL_GPIO_Init+0x24c>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d025      	beq.n	80060ca <HAL_GPIO_Init+0x226>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	4a1c      	ldr	r2, [pc, #112]	; (80060f4 <HAL_GPIO_Init+0x250>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d01f      	beq.n	80060c6 <HAL_GPIO_Init+0x222>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	4a1b      	ldr	r2, [pc, #108]	; (80060f8 <HAL_GPIO_Init+0x254>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d019      	beq.n	80060c2 <HAL_GPIO_Init+0x21e>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	4a1a      	ldr	r2, [pc, #104]	; (80060fc <HAL_GPIO_Init+0x258>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d013      	beq.n	80060be <HAL_GPIO_Init+0x21a>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4a19      	ldr	r2, [pc, #100]	; (8006100 <HAL_GPIO_Init+0x25c>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d00d      	beq.n	80060ba <HAL_GPIO_Init+0x216>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a18      	ldr	r2, [pc, #96]	; (8006104 <HAL_GPIO_Init+0x260>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d007      	beq.n	80060b6 <HAL_GPIO_Init+0x212>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4a17      	ldr	r2, [pc, #92]	; (8006108 <HAL_GPIO_Init+0x264>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d101      	bne.n	80060b2 <HAL_GPIO_Init+0x20e>
 80060ae:	2309      	movs	r3, #9
 80060b0:	e02d      	b.n	800610e <HAL_GPIO_Init+0x26a>
 80060b2:	230a      	movs	r3, #10
 80060b4:	e02b      	b.n	800610e <HAL_GPIO_Init+0x26a>
 80060b6:	2308      	movs	r3, #8
 80060b8:	e029      	b.n	800610e <HAL_GPIO_Init+0x26a>
 80060ba:	2307      	movs	r3, #7
 80060bc:	e027      	b.n	800610e <HAL_GPIO_Init+0x26a>
 80060be:	2306      	movs	r3, #6
 80060c0:	e025      	b.n	800610e <HAL_GPIO_Init+0x26a>
 80060c2:	2305      	movs	r3, #5
 80060c4:	e023      	b.n	800610e <HAL_GPIO_Init+0x26a>
 80060c6:	2304      	movs	r3, #4
 80060c8:	e021      	b.n	800610e <HAL_GPIO_Init+0x26a>
 80060ca:	2303      	movs	r3, #3
 80060cc:	e01f      	b.n	800610e <HAL_GPIO_Init+0x26a>
 80060ce:	2302      	movs	r3, #2
 80060d0:	e01d      	b.n	800610e <HAL_GPIO_Init+0x26a>
 80060d2:	2301      	movs	r3, #1
 80060d4:	e01b      	b.n	800610e <HAL_GPIO_Init+0x26a>
 80060d6:	bf00      	nop
 80060d8:	58000080 	.word	0x58000080
 80060dc:	58024400 	.word	0x58024400
 80060e0:	58000400 	.word	0x58000400
 80060e4:	58020000 	.word	0x58020000
 80060e8:	58020400 	.word	0x58020400
 80060ec:	58020800 	.word	0x58020800
 80060f0:	58020c00 	.word	0x58020c00
 80060f4:	58021000 	.word	0x58021000
 80060f8:	58021400 	.word	0x58021400
 80060fc:	58021800 	.word	0x58021800
 8006100:	58021c00 	.word	0x58021c00
 8006104:	58022000 	.word	0x58022000
 8006108:	58022400 	.word	0x58022400
 800610c:	2300      	movs	r3, #0
 800610e:	69fa      	ldr	r2, [r7, #28]
 8006110:	f002 0203 	and.w	r2, r2, #3
 8006114:	0092      	lsls	r2, r2, #2
 8006116:	4093      	lsls	r3, r2
 8006118:	69ba      	ldr	r2, [r7, #24]
 800611a:	4313      	orrs	r3, r2
 800611c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800611e:	4938      	ldr	r1, [pc, #224]	; (8006200 <HAL_GPIO_Init+0x35c>)
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	089b      	lsrs	r3, r3, #2
 8006124:	3302      	adds	r3, #2
 8006126:	69ba      	ldr	r2, [r7, #24]
 8006128:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800612c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	43db      	mvns	r3, r3
 8006138:	69ba      	ldr	r2, [r7, #24]
 800613a:	4013      	ands	r3, r2
 800613c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006146:	2b00      	cmp	r3, #0
 8006148:	d003      	beq.n	8006152 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800614a:	69ba      	ldr	r2, [r7, #24]
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	4313      	orrs	r3, r2
 8006150:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006152:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006156:	69bb      	ldr	r3, [r7, #24]
 8006158:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800615a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	43db      	mvns	r3, r3
 8006166:	69ba      	ldr	r2, [r7, #24]
 8006168:	4013      	ands	r3, r2
 800616a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006174:	2b00      	cmp	r3, #0
 8006176:	d003      	beq.n	8006180 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006178:	69ba      	ldr	r2, [r7, #24]
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	4313      	orrs	r3, r2
 800617e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006180:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	43db      	mvns	r3, r3
 8006192:	69ba      	ldr	r2, [r7, #24]
 8006194:	4013      	ands	r3, r2
 8006196:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d003      	beq.n	80061ac <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80061a4:	69ba      	ldr	r2, [r7, #24]
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	69ba      	ldr	r2, [r7, #24]
 80061b0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	43db      	mvns	r3, r3
 80061bc:	69ba      	ldr	r2, [r7, #24]
 80061be:	4013      	ands	r3, r2
 80061c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d003      	beq.n	80061d6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80061ce:	69ba      	ldr	r2, [r7, #24]
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	69ba      	ldr	r2, [r7, #24]
 80061da:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	3301      	adds	r3, #1
 80061e0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	69fb      	ldr	r3, [r7, #28]
 80061e8:	fa22 f303 	lsr.w	r3, r2, r3
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	f47f ae63 	bne.w	8005eb8 <HAL_GPIO_Init+0x14>
  }
}
 80061f2:	bf00      	nop
 80061f4:	bf00      	nop
 80061f6:	3724      	adds	r7, #36	; 0x24
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr
 8006200:	58000400 	.word	0x58000400

08006204 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006204:	b480      	push	{r7}
 8006206:	b083      	sub	sp, #12
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	460b      	mov	r3, r1
 800620e:	807b      	strh	r3, [r7, #2]
 8006210:	4613      	mov	r3, r2
 8006212:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006214:	787b      	ldrb	r3, [r7, #1]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d003      	beq.n	8006222 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800621a:	887a      	ldrh	r2, [r7, #2]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006220:	e003      	b.n	800622a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006222:	887b      	ldrh	r3, [r7, #2]
 8006224:	041a      	lsls	r2, r3, #16
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	619a      	str	r2, [r3, #24]
}
 800622a:	bf00      	nop
 800622c:	370c      	adds	r7, #12
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr
	...

08006238 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b084      	sub	sp, #16
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d101      	bne.n	800624a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	e0bf      	b.n	80063ca <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006250:	b2db      	uxtb	r3, r3
 8006252:	2b00      	cmp	r3, #0
 8006254:	d106      	bne.n	8006264 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f7fc f92a 	bl	80024b8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2202      	movs	r2, #2
 8006268:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	699a      	ldr	r2, [r3, #24]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800627a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	6999      	ldr	r1, [r3, #24]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	685a      	ldr	r2, [r3, #4]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006290:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	691b      	ldr	r3, [r3, #16]
 8006296:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	430a      	orrs	r2, r1
 800629e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	6899      	ldr	r1, [r3, #8]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	4b4a      	ldr	r3, [pc, #296]	; (80063d4 <HAL_LTDC_Init+0x19c>)
 80062ac:	400b      	ands	r3, r1
 80062ae:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	695b      	ldr	r3, [r3, #20]
 80062b4:	041b      	lsls	r3, r3, #16
 80062b6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	6899      	ldr	r1, [r3, #8]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	699a      	ldr	r2, [r3, #24]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	431a      	orrs	r2, r3
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	430a      	orrs	r2, r1
 80062cc:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	68d9      	ldr	r1, [r3, #12]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	4b3e      	ldr	r3, [pc, #248]	; (80063d4 <HAL_LTDC_Init+0x19c>)
 80062da:	400b      	ands	r3, r1
 80062dc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	69db      	ldr	r3, [r3, #28]
 80062e2:	041b      	lsls	r3, r3, #16
 80062e4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	68d9      	ldr	r1, [r3, #12]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6a1a      	ldr	r2, [r3, #32]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	431a      	orrs	r2, r3
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	430a      	orrs	r2, r1
 80062fa:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	6919      	ldr	r1, [r3, #16]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	4b33      	ldr	r3, [pc, #204]	; (80063d4 <HAL_LTDC_Init+0x19c>)
 8006308:	400b      	ands	r3, r1
 800630a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006310:	041b      	lsls	r3, r3, #16
 8006312:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	6919      	ldr	r1, [r3, #16]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	431a      	orrs	r2, r3
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	430a      	orrs	r2, r1
 8006328:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	6959      	ldr	r1, [r3, #20]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	4b27      	ldr	r3, [pc, #156]	; (80063d4 <HAL_LTDC_Init+0x19c>)
 8006336:	400b      	ands	r3, r1
 8006338:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800633e:	041b      	lsls	r3, r3, #16
 8006340:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	6959      	ldr	r1, [r3, #20]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	431a      	orrs	r2, r3
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	430a      	orrs	r2, r1
 8006356:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800635e:	021b      	lsls	r3, r3, #8
 8006360:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006368:	041b      	lsls	r3, r3, #16
 800636a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800637a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006382:	68ba      	ldr	r2, [r7, #8]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	4313      	orrs	r3, r2
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800638e:	431a      	orrs	r2, r3
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	430a      	orrs	r2, r1
 8006396:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f042 0206 	orr.w	r2, r2, #6
 80063a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	699a      	ldr	r2, [r3, #24]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f042 0201 	orr.w	r2, r2, #1
 80063b6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80063c8:	2300      	movs	r3, #0
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3710      	adds	r7, #16
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}
 80063d2:	bf00      	nop
 80063d4:	f000f800 	.word	0xf000f800

080063d8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80063d8:	b5b0      	push	{r4, r5, r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af00      	add	r7, sp, #0
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	60b9      	str	r1, [r7, #8]
 80063e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d101      	bne.n	80063f2 <HAL_LTDC_ConfigLayer+0x1a>
 80063ee:	2302      	movs	r3, #2
 80063f0:	e02c      	b.n	800644c <HAL_LTDC_ConfigLayer+0x74>
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2201      	movs	r2, #1
 80063f6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2202      	movs	r2, #2
 80063fe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006402:	68fa      	ldr	r2, [r7, #12]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2134      	movs	r1, #52	; 0x34
 8006408:	fb01 f303 	mul.w	r3, r1, r3
 800640c:	4413      	add	r3, r2
 800640e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	4614      	mov	r4, r2
 8006416:	461d      	mov	r5, r3
 8006418:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800641a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800641c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800641e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006420:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006422:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006424:	682b      	ldr	r3, [r5, #0]
 8006426:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	68b9      	ldr	r1, [r7, #8]
 800642c:	68f8      	ldr	r0, [r7, #12]
 800642e:	f000 f811 	bl	8006454 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	2201      	movs	r2, #1
 8006438:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2201      	movs	r2, #1
 800643e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2200      	movs	r2, #0
 8006446:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800644a:	2300      	movs	r3, #0
}
 800644c:	4618      	mov	r0, r3
 800644e:	3710      	adds	r7, #16
 8006450:	46bd      	mov	sp, r7
 8006452:	bdb0      	pop	{r4, r5, r7, pc}

08006454 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006454:	b480      	push	{r7}
 8006456:	b089      	sub	sp, #36	; 0x24
 8006458:	af00      	add	r7, sp, #0
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	60b9      	str	r1, [r7, #8]
 800645e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	685a      	ldr	r2, [r3, #4]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	0c1b      	lsrs	r3, r3, #16
 800646c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006470:	4413      	add	r3, r2
 8006472:	041b      	lsls	r3, r3, #16
 8006474:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	461a      	mov	r2, r3
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	01db      	lsls	r3, r3, #7
 8006480:	4413      	add	r3, r2
 8006482:	3384      	adds	r3, #132	; 0x84
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	68fa      	ldr	r2, [r7, #12]
 8006488:	6812      	ldr	r2, [r2, #0]
 800648a:	4611      	mov	r1, r2
 800648c:	687a      	ldr	r2, [r7, #4]
 800648e:	01d2      	lsls	r2, r2, #7
 8006490:	440a      	add	r2, r1
 8006492:	3284      	adds	r2, #132	; 0x84
 8006494:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006498:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	68db      	ldr	r3, [r3, #12]
 80064a4:	0c1b      	lsrs	r3, r3, #16
 80064a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80064aa:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80064ac:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4619      	mov	r1, r3
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	01db      	lsls	r3, r3, #7
 80064b8:	440b      	add	r3, r1
 80064ba:	3384      	adds	r3, #132	; 0x84
 80064bc:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80064be:	69fb      	ldr	r3, [r7, #28]
 80064c0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80064c2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	68da      	ldr	r2, [r3, #12]
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80064d2:	4413      	add	r3, r2
 80064d4:	041b      	lsls	r3, r3, #16
 80064d6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	461a      	mov	r2, r3
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	01db      	lsls	r3, r3, #7
 80064e2:	4413      	add	r3, r2
 80064e4:	3384      	adds	r3, #132	; 0x84
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	6812      	ldr	r2, [r2, #0]
 80064ec:	4611      	mov	r1, r2
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	01d2      	lsls	r2, r2, #7
 80064f2:	440a      	add	r2, r1
 80064f4:	3284      	adds	r2, #132	; 0x84
 80064f6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80064fa:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	689a      	ldr	r2, [r3, #8]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	68db      	ldr	r3, [r3, #12]
 8006506:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800650a:	4413      	add	r3, r2
 800650c:	1c5a      	adds	r2, r3, #1
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4619      	mov	r1, r3
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	01db      	lsls	r3, r3, #7
 8006518:	440b      	add	r3, r1
 800651a:	3384      	adds	r3, #132	; 0x84
 800651c:	4619      	mov	r1, r3
 800651e:	69fb      	ldr	r3, [r7, #28]
 8006520:	4313      	orrs	r3, r2
 8006522:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	461a      	mov	r2, r3
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	01db      	lsls	r3, r3, #7
 800652e:	4413      	add	r3, r2
 8006530:	3384      	adds	r3, #132	; 0x84
 8006532:	691b      	ldr	r3, [r3, #16]
 8006534:	68fa      	ldr	r2, [r7, #12]
 8006536:	6812      	ldr	r2, [r2, #0]
 8006538:	4611      	mov	r1, r2
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	01d2      	lsls	r2, r2, #7
 800653e:	440a      	add	r2, r1
 8006540:	3284      	adds	r2, #132	; 0x84
 8006542:	f023 0307 	bic.w	r3, r3, #7
 8006546:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	461a      	mov	r2, r3
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	01db      	lsls	r3, r3, #7
 8006552:	4413      	add	r3, r2
 8006554:	3384      	adds	r3, #132	; 0x84
 8006556:	461a      	mov	r2, r3
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	691b      	ldr	r3, [r3, #16]
 800655c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006564:	021b      	lsls	r3, r3, #8
 8006566:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800656e:	041b      	lsls	r3, r3, #16
 8006570:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	699b      	ldr	r3, [r3, #24]
 8006576:	061b      	lsls	r3, r3, #24
 8006578:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	461a      	mov	r2, r3
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	01db      	lsls	r3, r3, #7
 8006584:	4413      	add	r3, r2
 8006586:	3384      	adds	r3, #132	; 0x84
 8006588:	699b      	ldr	r3, [r3, #24]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	461a      	mov	r2, r3
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	01db      	lsls	r3, r3, #7
 8006594:	4413      	add	r3, r2
 8006596:	3384      	adds	r3, #132	; 0x84
 8006598:	461a      	mov	r2, r3
 800659a:	2300      	movs	r3, #0
 800659c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80065a4:	461a      	mov	r2, r3
 80065a6:	69fb      	ldr	r3, [r7, #28]
 80065a8:	431a      	orrs	r2, r3
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	431a      	orrs	r2, r3
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4619      	mov	r1, r3
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	01db      	lsls	r3, r3, #7
 80065b8:	440b      	add	r3, r1
 80065ba:	3384      	adds	r3, #132	; 0x84
 80065bc:	4619      	mov	r1, r3
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	4313      	orrs	r3, r2
 80065c2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	461a      	mov	r2, r3
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	01db      	lsls	r3, r3, #7
 80065ce:	4413      	add	r3, r2
 80065d0:	3384      	adds	r3, #132	; 0x84
 80065d2:	695b      	ldr	r3, [r3, #20]
 80065d4:	68fa      	ldr	r2, [r7, #12]
 80065d6:	6812      	ldr	r2, [r2, #0]
 80065d8:	4611      	mov	r1, r2
 80065da:	687a      	ldr	r2, [r7, #4]
 80065dc:	01d2      	lsls	r2, r2, #7
 80065de:	440a      	add	r2, r1
 80065e0:	3284      	adds	r2, #132	; 0x84
 80065e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80065e6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	461a      	mov	r2, r3
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	01db      	lsls	r3, r3, #7
 80065f2:	4413      	add	r3, r2
 80065f4:	3384      	adds	r3, #132	; 0x84
 80065f6:	461a      	mov	r2, r3
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	695b      	ldr	r3, [r3, #20]
 80065fc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	461a      	mov	r2, r3
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	01db      	lsls	r3, r3, #7
 8006608:	4413      	add	r3, r2
 800660a:	3384      	adds	r3, #132	; 0x84
 800660c:	69da      	ldr	r2, [r3, #28]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4619      	mov	r1, r3
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	01db      	lsls	r3, r3, #7
 8006618:	440b      	add	r3, r1
 800661a:	3384      	adds	r3, #132	; 0x84
 800661c:	4619      	mov	r1, r3
 800661e:	4b58      	ldr	r3, [pc, #352]	; (8006780 <LTDC_SetConfig+0x32c>)
 8006620:	4013      	ands	r3, r2
 8006622:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	69da      	ldr	r2, [r3, #28]
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	6a1b      	ldr	r3, [r3, #32]
 800662c:	68f9      	ldr	r1, [r7, #12]
 800662e:	6809      	ldr	r1, [r1, #0]
 8006630:	4608      	mov	r0, r1
 8006632:	6879      	ldr	r1, [r7, #4]
 8006634:	01c9      	lsls	r1, r1, #7
 8006636:	4401      	add	r1, r0
 8006638:	3184      	adds	r1, #132	; 0x84
 800663a:	4313      	orrs	r3, r2
 800663c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	461a      	mov	r2, r3
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	01db      	lsls	r3, r3, #7
 8006648:	4413      	add	r3, r2
 800664a:	3384      	adds	r3, #132	; 0x84
 800664c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	461a      	mov	r2, r3
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	01db      	lsls	r3, r3, #7
 8006658:	4413      	add	r3, r2
 800665a:	3384      	adds	r3, #132	; 0x84
 800665c:	461a      	mov	r2, r3
 800665e:	2300      	movs	r3, #0
 8006660:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	461a      	mov	r2, r3
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	01db      	lsls	r3, r3, #7
 800666c:	4413      	add	r3, r2
 800666e:	3384      	adds	r3, #132	; 0x84
 8006670:	461a      	mov	r2, r3
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006676:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	691b      	ldr	r3, [r3, #16]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d102      	bne.n	8006686 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006680:	2304      	movs	r3, #4
 8006682:	61fb      	str	r3, [r7, #28]
 8006684:	e01b      	b.n	80066be <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	691b      	ldr	r3, [r3, #16]
 800668a:	2b01      	cmp	r3, #1
 800668c:	d102      	bne.n	8006694 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800668e:	2303      	movs	r3, #3
 8006690:	61fb      	str	r3, [r7, #28]
 8006692:	e014      	b.n	80066be <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	691b      	ldr	r3, [r3, #16]
 8006698:	2b04      	cmp	r3, #4
 800669a:	d00b      	beq.n	80066b4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80066a0:	2b02      	cmp	r3, #2
 80066a2:	d007      	beq.n	80066b4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80066a8:	2b03      	cmp	r3, #3
 80066aa:	d003      	beq.n	80066b4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80066b0:	2b07      	cmp	r3, #7
 80066b2:	d102      	bne.n	80066ba <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80066b4:	2302      	movs	r3, #2
 80066b6:	61fb      	str	r3, [r7, #28]
 80066b8:	e001      	b.n	80066be <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80066ba:	2301      	movs	r3, #1
 80066bc:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	461a      	mov	r2, r3
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	01db      	lsls	r3, r3, #7
 80066c8:	4413      	add	r3, r2
 80066ca:	3384      	adds	r3, #132	; 0x84
 80066cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ce:	68fa      	ldr	r2, [r7, #12]
 80066d0:	6812      	ldr	r2, [r2, #0]
 80066d2:	4611      	mov	r1, r2
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	01d2      	lsls	r2, r2, #7
 80066d8:	440a      	add	r2, r1
 80066da:	3284      	adds	r2, #132	; 0x84
 80066dc:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80066e0:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066e6:	69fa      	ldr	r2, [r7, #28]
 80066e8:	fb02 f303 	mul.w	r3, r2, r3
 80066ec:	041a      	lsls	r2, r3, #16
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	6859      	ldr	r1, [r3, #4]
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	1acb      	subs	r3, r1, r3
 80066f8:	69f9      	ldr	r1, [r7, #28]
 80066fa:	fb01 f303 	mul.w	r3, r1, r3
 80066fe:	3307      	adds	r3, #7
 8006700:	68f9      	ldr	r1, [r7, #12]
 8006702:	6809      	ldr	r1, [r1, #0]
 8006704:	4608      	mov	r0, r1
 8006706:	6879      	ldr	r1, [r7, #4]
 8006708:	01c9      	lsls	r1, r1, #7
 800670a:	4401      	add	r1, r0
 800670c:	3184      	adds	r1, #132	; 0x84
 800670e:	4313      	orrs	r3, r2
 8006710:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	461a      	mov	r2, r3
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	01db      	lsls	r3, r3, #7
 800671c:	4413      	add	r3, r2
 800671e:	3384      	adds	r3, #132	; 0x84
 8006720:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4619      	mov	r1, r3
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	01db      	lsls	r3, r3, #7
 800672c:	440b      	add	r3, r1
 800672e:	3384      	adds	r3, #132	; 0x84
 8006730:	4619      	mov	r1, r3
 8006732:	4b14      	ldr	r3, [pc, #80]	; (8006784 <LTDC_SetConfig+0x330>)
 8006734:	4013      	ands	r3, r2
 8006736:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	461a      	mov	r2, r3
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	01db      	lsls	r3, r3, #7
 8006742:	4413      	add	r3, r2
 8006744:	3384      	adds	r3, #132	; 0x84
 8006746:	461a      	mov	r2, r3
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800674c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	461a      	mov	r2, r3
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	01db      	lsls	r3, r3, #7
 8006758:	4413      	add	r3, r2
 800675a:	3384      	adds	r3, #132	; 0x84
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	68fa      	ldr	r2, [r7, #12]
 8006760:	6812      	ldr	r2, [r2, #0]
 8006762:	4611      	mov	r1, r2
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	01d2      	lsls	r2, r2, #7
 8006768:	440a      	add	r2, r1
 800676a:	3284      	adds	r2, #132	; 0x84
 800676c:	f043 0301 	orr.w	r3, r3, #1
 8006770:	6013      	str	r3, [r2, #0]
}
 8006772:	bf00      	nop
 8006774:	3724      	adds	r7, #36	; 0x24
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr
 800677e:	bf00      	nop
 8006780:	fffff8f8 	.word	0xfffff8f8
 8006784:	fffff800 	.word	0xfffff800

08006788 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800678a:	b08f      	sub	sp, #60	; 0x3c
 800678c:	af0a      	add	r7, sp, #40	; 0x28
 800678e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d101      	bne.n	800679a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	e116      	b.n	80069c8 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d106      	bne.n	80067ba <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f7fc f8fd 	bl	80029b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2203      	movs	r2, #3
 80067be:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d102      	bne.n	80067d4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4618      	mov	r0, r3
 80067da:	f007 fead 	bl	800e538 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	603b      	str	r3, [r7, #0]
 80067e4:	687e      	ldr	r6, [r7, #4]
 80067e6:	466d      	mov	r5, sp
 80067e8:	f106 0410 	add.w	r4, r6, #16
 80067ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80067ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80067f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80067f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80067f4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80067f8:	e885 0003 	stmia.w	r5, {r0, r1}
 80067fc:	1d33      	adds	r3, r6, #4
 80067fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006800:	6838      	ldr	r0, [r7, #0]
 8006802:	f007 fe2b 	bl	800e45c <USB_CoreInit>
 8006806:	4603      	mov	r3, r0
 8006808:	2b00      	cmp	r3, #0
 800680a:	d005      	beq.n	8006818 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2202      	movs	r2, #2
 8006810:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006814:	2301      	movs	r3, #1
 8006816:	e0d7      	b.n	80069c8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	2100      	movs	r1, #0
 800681e:	4618      	mov	r0, r3
 8006820:	f007 fe9b 	bl	800e55a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006824:	2300      	movs	r3, #0
 8006826:	73fb      	strb	r3, [r7, #15]
 8006828:	e04a      	b.n	80068c0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800682a:	7bfa      	ldrb	r2, [r7, #15]
 800682c:	6879      	ldr	r1, [r7, #4]
 800682e:	4613      	mov	r3, r2
 8006830:	00db      	lsls	r3, r3, #3
 8006832:	4413      	add	r3, r2
 8006834:	009b      	lsls	r3, r3, #2
 8006836:	440b      	add	r3, r1
 8006838:	333d      	adds	r3, #61	; 0x3d
 800683a:	2201      	movs	r2, #1
 800683c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800683e:	7bfa      	ldrb	r2, [r7, #15]
 8006840:	6879      	ldr	r1, [r7, #4]
 8006842:	4613      	mov	r3, r2
 8006844:	00db      	lsls	r3, r3, #3
 8006846:	4413      	add	r3, r2
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	440b      	add	r3, r1
 800684c:	333c      	adds	r3, #60	; 0x3c
 800684e:	7bfa      	ldrb	r2, [r7, #15]
 8006850:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006852:	7bfa      	ldrb	r2, [r7, #15]
 8006854:	7bfb      	ldrb	r3, [r7, #15]
 8006856:	b298      	uxth	r0, r3
 8006858:	6879      	ldr	r1, [r7, #4]
 800685a:	4613      	mov	r3, r2
 800685c:	00db      	lsls	r3, r3, #3
 800685e:	4413      	add	r3, r2
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	440b      	add	r3, r1
 8006864:	3356      	adds	r3, #86	; 0x56
 8006866:	4602      	mov	r2, r0
 8006868:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800686a:	7bfa      	ldrb	r2, [r7, #15]
 800686c:	6879      	ldr	r1, [r7, #4]
 800686e:	4613      	mov	r3, r2
 8006870:	00db      	lsls	r3, r3, #3
 8006872:	4413      	add	r3, r2
 8006874:	009b      	lsls	r3, r3, #2
 8006876:	440b      	add	r3, r1
 8006878:	3340      	adds	r3, #64	; 0x40
 800687a:	2200      	movs	r2, #0
 800687c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800687e:	7bfa      	ldrb	r2, [r7, #15]
 8006880:	6879      	ldr	r1, [r7, #4]
 8006882:	4613      	mov	r3, r2
 8006884:	00db      	lsls	r3, r3, #3
 8006886:	4413      	add	r3, r2
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	440b      	add	r3, r1
 800688c:	3344      	adds	r3, #68	; 0x44
 800688e:	2200      	movs	r2, #0
 8006890:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006892:	7bfa      	ldrb	r2, [r7, #15]
 8006894:	6879      	ldr	r1, [r7, #4]
 8006896:	4613      	mov	r3, r2
 8006898:	00db      	lsls	r3, r3, #3
 800689a:	4413      	add	r3, r2
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	440b      	add	r3, r1
 80068a0:	3348      	adds	r3, #72	; 0x48
 80068a2:	2200      	movs	r2, #0
 80068a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80068a6:	7bfa      	ldrb	r2, [r7, #15]
 80068a8:	6879      	ldr	r1, [r7, #4]
 80068aa:	4613      	mov	r3, r2
 80068ac:	00db      	lsls	r3, r3, #3
 80068ae:	4413      	add	r3, r2
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	440b      	add	r3, r1
 80068b4:	334c      	adds	r3, #76	; 0x4c
 80068b6:	2200      	movs	r2, #0
 80068b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80068ba:	7bfb      	ldrb	r3, [r7, #15]
 80068bc:	3301      	adds	r3, #1
 80068be:	73fb      	strb	r3, [r7, #15]
 80068c0:	7bfa      	ldrb	r2, [r7, #15]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d3af      	bcc.n	800682a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80068ca:	2300      	movs	r3, #0
 80068cc:	73fb      	strb	r3, [r7, #15]
 80068ce:	e044      	b.n	800695a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80068d0:	7bfa      	ldrb	r2, [r7, #15]
 80068d2:	6879      	ldr	r1, [r7, #4]
 80068d4:	4613      	mov	r3, r2
 80068d6:	00db      	lsls	r3, r3, #3
 80068d8:	4413      	add	r3, r2
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	440b      	add	r3, r1
 80068de:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80068e2:	2200      	movs	r2, #0
 80068e4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80068e6:	7bfa      	ldrb	r2, [r7, #15]
 80068e8:	6879      	ldr	r1, [r7, #4]
 80068ea:	4613      	mov	r3, r2
 80068ec:	00db      	lsls	r3, r3, #3
 80068ee:	4413      	add	r3, r2
 80068f0:	009b      	lsls	r3, r3, #2
 80068f2:	440b      	add	r3, r1
 80068f4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80068f8:	7bfa      	ldrb	r2, [r7, #15]
 80068fa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80068fc:	7bfa      	ldrb	r2, [r7, #15]
 80068fe:	6879      	ldr	r1, [r7, #4]
 8006900:	4613      	mov	r3, r2
 8006902:	00db      	lsls	r3, r3, #3
 8006904:	4413      	add	r3, r2
 8006906:	009b      	lsls	r3, r3, #2
 8006908:	440b      	add	r3, r1
 800690a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800690e:	2200      	movs	r2, #0
 8006910:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006912:	7bfa      	ldrb	r2, [r7, #15]
 8006914:	6879      	ldr	r1, [r7, #4]
 8006916:	4613      	mov	r3, r2
 8006918:	00db      	lsls	r3, r3, #3
 800691a:	4413      	add	r3, r2
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	440b      	add	r3, r1
 8006920:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8006924:	2200      	movs	r2, #0
 8006926:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006928:	7bfa      	ldrb	r2, [r7, #15]
 800692a:	6879      	ldr	r1, [r7, #4]
 800692c:	4613      	mov	r3, r2
 800692e:	00db      	lsls	r3, r3, #3
 8006930:	4413      	add	r3, r2
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	440b      	add	r3, r1
 8006936:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800693a:	2200      	movs	r2, #0
 800693c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800693e:	7bfa      	ldrb	r2, [r7, #15]
 8006940:	6879      	ldr	r1, [r7, #4]
 8006942:	4613      	mov	r3, r2
 8006944:	00db      	lsls	r3, r3, #3
 8006946:	4413      	add	r3, r2
 8006948:	009b      	lsls	r3, r3, #2
 800694a:	440b      	add	r3, r1
 800694c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006950:	2200      	movs	r2, #0
 8006952:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006954:	7bfb      	ldrb	r3, [r7, #15]
 8006956:	3301      	adds	r3, #1
 8006958:	73fb      	strb	r3, [r7, #15]
 800695a:	7bfa      	ldrb	r2, [r7, #15]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	429a      	cmp	r2, r3
 8006962:	d3b5      	bcc.n	80068d0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	603b      	str	r3, [r7, #0]
 800696a:	687e      	ldr	r6, [r7, #4]
 800696c:	466d      	mov	r5, sp
 800696e:	f106 0410 	add.w	r4, r6, #16
 8006972:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006974:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006976:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006978:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800697a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800697e:	e885 0003 	stmia.w	r5, {r0, r1}
 8006982:	1d33      	adds	r3, r6, #4
 8006984:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006986:	6838      	ldr	r0, [r7, #0]
 8006988:	f007 fe34 	bl	800e5f4 <USB_DevInit>
 800698c:	4603      	mov	r3, r0
 800698e:	2b00      	cmp	r3, #0
 8006990:	d005      	beq.n	800699e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2202      	movs	r2, #2
 8006996:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800699a:	2301      	movs	r3, #1
 800699c:	e014      	b.n	80069c8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2200      	movs	r2, #0
 80069a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2201      	movs	r2, #1
 80069aa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	d102      	bne.n	80069bc <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 f80a 	bl	80069d0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4618      	mov	r0, r3
 80069c2:	f007 fff2 	bl	800e9aa <USB_DevDisconnect>

  return HAL_OK;
 80069c6:	2300      	movs	r3, #0
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3714      	adds	r7, #20
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080069d0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b085      	sub	sp, #20
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2201      	movs	r2, #1
 80069e2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2200      	movs	r2, #0
 80069ea:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	699b      	ldr	r3, [r3, #24]
 80069f2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80069fe:	4b05      	ldr	r3, [pc, #20]	; (8006a14 <HAL_PCDEx_ActivateLPM+0x44>)
 8006a00:	4313      	orrs	r3, r2
 8006a02:	68fa      	ldr	r2, [r7, #12]
 8006a04:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006a06:	2300      	movs	r3, #0
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3714      	adds	r7, #20
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr
 8006a14:	10000003 	.word	0x10000003

08006a18 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b084      	sub	sp, #16
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006a20:	4b19      	ldr	r3, [pc, #100]	; (8006a88 <HAL_PWREx_ConfigSupply+0x70>)
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	f003 0304 	and.w	r3, r3, #4
 8006a28:	2b04      	cmp	r3, #4
 8006a2a:	d00a      	beq.n	8006a42 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006a2c:	4b16      	ldr	r3, [pc, #88]	; (8006a88 <HAL_PWREx_ConfigSupply+0x70>)
 8006a2e:	68db      	ldr	r3, [r3, #12]
 8006a30:	f003 0307 	and.w	r3, r3, #7
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d001      	beq.n	8006a3e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e01f      	b.n	8006a7e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	e01d      	b.n	8006a7e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006a42:	4b11      	ldr	r3, [pc, #68]	; (8006a88 <HAL_PWREx_ConfigSupply+0x70>)
 8006a44:	68db      	ldr	r3, [r3, #12]
 8006a46:	f023 0207 	bic.w	r2, r3, #7
 8006a4a:	490f      	ldr	r1, [pc, #60]	; (8006a88 <HAL_PWREx_ConfigSupply+0x70>)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006a52:	f7fc fb37 	bl	80030c4 <HAL_GetTick>
 8006a56:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006a58:	e009      	b.n	8006a6e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006a5a:	f7fc fb33 	bl	80030c4 <HAL_GetTick>
 8006a5e:	4602      	mov	r2, r0
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	1ad3      	subs	r3, r2, r3
 8006a64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a68:	d901      	bls.n	8006a6e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	e007      	b.n	8006a7e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006a6e:	4b06      	ldr	r3, [pc, #24]	; (8006a88 <HAL_PWREx_ConfigSupply+0x70>)
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a7a:	d1ee      	bne.n	8006a5a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006a7c:	2300      	movs	r3, #0
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3710      	adds	r7, #16
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop
 8006a88:	58024800 	.word	0x58024800

08006a8c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006a90:	4b05      	ldr	r3, [pc, #20]	; (8006aa8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006a92:	68db      	ldr	r3, [r3, #12]
 8006a94:	4a04      	ldr	r2, [pc, #16]	; (8006aa8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006a96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a9a:	60d3      	str	r3, [r2, #12]
}
 8006a9c:	bf00      	nop
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr
 8006aa6:	bf00      	nop
 8006aa8:	58024800 	.word	0x58024800

08006aac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b08c      	sub	sp, #48	; 0x30
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d102      	bne.n	8006ac0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006aba:	2301      	movs	r3, #1
 8006abc:	f000 bc48 	b.w	8007350 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f003 0301 	and.w	r3, r3, #1
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	f000 8088 	beq.w	8006bde <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ace:	4b99      	ldr	r3, [pc, #612]	; (8006d34 <HAL_RCC_OscConfig+0x288>)
 8006ad0:	691b      	ldr	r3, [r3, #16]
 8006ad2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006ad8:	4b96      	ldr	r3, [pc, #600]	; (8006d34 <HAL_RCC_OscConfig+0x288>)
 8006ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006adc:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ae0:	2b10      	cmp	r3, #16
 8006ae2:	d007      	beq.n	8006af4 <HAL_RCC_OscConfig+0x48>
 8006ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ae6:	2b18      	cmp	r3, #24
 8006ae8:	d111      	bne.n	8006b0e <HAL_RCC_OscConfig+0x62>
 8006aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aec:	f003 0303 	and.w	r3, r3, #3
 8006af0:	2b02      	cmp	r3, #2
 8006af2:	d10c      	bne.n	8006b0e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006af4:	4b8f      	ldr	r3, [pc, #572]	; (8006d34 <HAL_RCC_OscConfig+0x288>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d06d      	beq.n	8006bdc <HAL_RCC_OscConfig+0x130>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d169      	bne.n	8006bdc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	f000 bc21 	b.w	8007350 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b16:	d106      	bne.n	8006b26 <HAL_RCC_OscConfig+0x7a>
 8006b18:	4b86      	ldr	r3, [pc, #536]	; (8006d34 <HAL_RCC_OscConfig+0x288>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a85      	ldr	r2, [pc, #532]	; (8006d34 <HAL_RCC_OscConfig+0x288>)
 8006b1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b22:	6013      	str	r3, [r2, #0]
 8006b24:	e02e      	b.n	8006b84 <HAL_RCC_OscConfig+0xd8>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d10c      	bne.n	8006b48 <HAL_RCC_OscConfig+0x9c>
 8006b2e:	4b81      	ldr	r3, [pc, #516]	; (8006d34 <HAL_RCC_OscConfig+0x288>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a80      	ldr	r2, [pc, #512]	; (8006d34 <HAL_RCC_OscConfig+0x288>)
 8006b34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b38:	6013      	str	r3, [r2, #0]
 8006b3a:	4b7e      	ldr	r3, [pc, #504]	; (8006d34 <HAL_RCC_OscConfig+0x288>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a7d      	ldr	r2, [pc, #500]	; (8006d34 <HAL_RCC_OscConfig+0x288>)
 8006b40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b44:	6013      	str	r3, [r2, #0]
 8006b46:	e01d      	b.n	8006b84 <HAL_RCC_OscConfig+0xd8>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b50:	d10c      	bne.n	8006b6c <HAL_RCC_OscConfig+0xc0>
 8006b52:	4b78      	ldr	r3, [pc, #480]	; (8006d34 <HAL_RCC_OscConfig+0x288>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a77      	ldr	r2, [pc, #476]	; (8006d34 <HAL_RCC_OscConfig+0x288>)
 8006b58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b5c:	6013      	str	r3, [r2, #0]
 8006b5e:	4b75      	ldr	r3, [pc, #468]	; (8006d34 <HAL_RCC_OscConfig+0x288>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a74      	ldr	r2, [pc, #464]	; (8006d34 <HAL_RCC_OscConfig+0x288>)
 8006b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b68:	6013      	str	r3, [r2, #0]
 8006b6a:	e00b      	b.n	8006b84 <HAL_RCC_OscConfig+0xd8>
 8006b6c:	4b71      	ldr	r3, [pc, #452]	; (8006d34 <HAL_RCC_OscConfig+0x288>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a70      	ldr	r2, [pc, #448]	; (8006d34 <HAL_RCC_OscConfig+0x288>)
 8006b72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b76:	6013      	str	r3, [r2, #0]
 8006b78:	4b6e      	ldr	r3, [pc, #440]	; (8006d34 <HAL_RCC_OscConfig+0x288>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a6d      	ldr	r2, [pc, #436]	; (8006d34 <HAL_RCC_OscConfig+0x288>)
 8006b7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d013      	beq.n	8006bb4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b8c:	f7fc fa9a 	bl	80030c4 <HAL_GetTick>
 8006b90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006b92:	e008      	b.n	8006ba6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b94:	f7fc fa96 	bl	80030c4 <HAL_GetTick>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9c:	1ad3      	subs	r3, r2, r3
 8006b9e:	2b64      	cmp	r3, #100	; 0x64
 8006ba0:	d901      	bls.n	8006ba6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006ba2:	2303      	movs	r3, #3
 8006ba4:	e3d4      	b.n	8007350 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006ba6:	4b63      	ldr	r3, [pc, #396]	; (8006d34 <HAL_RCC_OscConfig+0x288>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d0f0      	beq.n	8006b94 <HAL_RCC_OscConfig+0xe8>
 8006bb2:	e014      	b.n	8006bde <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bb4:	f7fc fa86 	bl	80030c4 <HAL_GetTick>
 8006bb8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006bba:	e008      	b.n	8006bce <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006bbc:	f7fc fa82 	bl	80030c4 <HAL_GetTick>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc4:	1ad3      	subs	r3, r2, r3
 8006bc6:	2b64      	cmp	r3, #100	; 0x64
 8006bc8:	d901      	bls.n	8006bce <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006bca:	2303      	movs	r3, #3
 8006bcc:	e3c0      	b.n	8007350 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006bce:	4b59      	ldr	r3, [pc, #356]	; (8006d34 <HAL_RCC_OscConfig+0x288>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d1f0      	bne.n	8006bbc <HAL_RCC_OscConfig+0x110>
 8006bda:	e000      	b.n	8006bde <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f003 0302 	and.w	r3, r3, #2
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	f000 80ca 	beq.w	8006d80 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006bec:	4b51      	ldr	r3, [pc, #324]	; (8006d34 <HAL_RCC_OscConfig+0x288>)
 8006bee:	691b      	ldr	r3, [r3, #16]
 8006bf0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006bf4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006bf6:	4b4f      	ldr	r3, [pc, #316]	; (8006d34 <HAL_RCC_OscConfig+0x288>)
 8006bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bfa:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006bfc:	6a3b      	ldr	r3, [r7, #32]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d007      	beq.n	8006c12 <HAL_RCC_OscConfig+0x166>
 8006c02:	6a3b      	ldr	r3, [r7, #32]
 8006c04:	2b18      	cmp	r3, #24
 8006c06:	d156      	bne.n	8006cb6 <HAL_RCC_OscConfig+0x20a>
 8006c08:	69fb      	ldr	r3, [r7, #28]
 8006c0a:	f003 0303 	and.w	r3, r3, #3
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d151      	bne.n	8006cb6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006c12:	4b48      	ldr	r3, [pc, #288]	; (8006d34 <HAL_RCC_OscConfig+0x288>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f003 0304 	and.w	r3, r3, #4
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d005      	beq.n	8006c2a <HAL_RCC_OscConfig+0x17e>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d101      	bne.n	8006c2a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	e392      	b.n	8007350 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006c2a:	4b42      	ldr	r3, [pc, #264]	; (8006d34 <HAL_RCC_OscConfig+0x288>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f023 0219 	bic.w	r2, r3, #25
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	68db      	ldr	r3, [r3, #12]
 8006c36:	493f      	ldr	r1, [pc, #252]	; (8006d34 <HAL_RCC_OscConfig+0x288>)
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c3c:	f7fc fa42 	bl	80030c4 <HAL_GetTick>
 8006c40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006c42:	e008      	b.n	8006c56 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c44:	f7fc fa3e 	bl	80030c4 <HAL_GetTick>
 8006c48:	4602      	mov	r2, r0
 8006c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4c:	1ad3      	subs	r3, r2, r3
 8006c4e:	2b02      	cmp	r3, #2
 8006c50:	d901      	bls.n	8006c56 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006c52:	2303      	movs	r3, #3
 8006c54:	e37c      	b.n	8007350 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006c56:	4b37      	ldr	r3, [pc, #220]	; (8006d34 <HAL_RCC_OscConfig+0x288>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f003 0304 	and.w	r3, r3, #4
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d0f0      	beq.n	8006c44 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c62:	f7fc fa5f 	bl	8003124 <HAL_GetREVID>
 8006c66:	4603      	mov	r3, r0
 8006c68:	f241 0203 	movw	r2, #4099	; 0x1003
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d817      	bhi.n	8006ca0 <HAL_RCC_OscConfig+0x1f4>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	691b      	ldr	r3, [r3, #16]
 8006c74:	2b40      	cmp	r3, #64	; 0x40
 8006c76:	d108      	bne.n	8006c8a <HAL_RCC_OscConfig+0x1de>
 8006c78:	4b2e      	ldr	r3, [pc, #184]	; (8006d34 <HAL_RCC_OscConfig+0x288>)
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006c80:	4a2c      	ldr	r2, [pc, #176]	; (8006d34 <HAL_RCC_OscConfig+0x288>)
 8006c82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c86:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006c88:	e07a      	b.n	8006d80 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c8a:	4b2a      	ldr	r3, [pc, #168]	; (8006d34 <HAL_RCC_OscConfig+0x288>)
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	691b      	ldr	r3, [r3, #16]
 8006c96:	031b      	lsls	r3, r3, #12
 8006c98:	4926      	ldr	r1, [pc, #152]	; (8006d34 <HAL_RCC_OscConfig+0x288>)
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006c9e:	e06f      	b.n	8006d80 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ca0:	4b24      	ldr	r3, [pc, #144]	; (8006d34 <HAL_RCC_OscConfig+0x288>)
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	691b      	ldr	r3, [r3, #16]
 8006cac:	061b      	lsls	r3, r3, #24
 8006cae:	4921      	ldr	r1, [pc, #132]	; (8006d34 <HAL_RCC_OscConfig+0x288>)
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006cb4:	e064      	b.n	8006d80 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	68db      	ldr	r3, [r3, #12]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d047      	beq.n	8006d4e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006cbe:	4b1d      	ldr	r3, [pc, #116]	; (8006d34 <HAL_RCC_OscConfig+0x288>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f023 0219 	bic.w	r2, r3, #25
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	68db      	ldr	r3, [r3, #12]
 8006cca:	491a      	ldr	r1, [pc, #104]	; (8006d34 <HAL_RCC_OscConfig+0x288>)
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cd0:	f7fc f9f8 	bl	80030c4 <HAL_GetTick>
 8006cd4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006cd6:	e008      	b.n	8006cea <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006cd8:	f7fc f9f4 	bl	80030c4 <HAL_GetTick>
 8006cdc:	4602      	mov	r2, r0
 8006cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce0:	1ad3      	subs	r3, r2, r3
 8006ce2:	2b02      	cmp	r3, #2
 8006ce4:	d901      	bls.n	8006cea <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006ce6:	2303      	movs	r3, #3
 8006ce8:	e332      	b.n	8007350 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006cea:	4b12      	ldr	r3, [pc, #72]	; (8006d34 <HAL_RCC_OscConfig+0x288>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f003 0304 	and.w	r3, r3, #4
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d0f0      	beq.n	8006cd8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cf6:	f7fc fa15 	bl	8003124 <HAL_GetREVID>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	f241 0203 	movw	r2, #4099	; 0x1003
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d819      	bhi.n	8006d38 <HAL_RCC_OscConfig+0x28c>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	691b      	ldr	r3, [r3, #16]
 8006d08:	2b40      	cmp	r3, #64	; 0x40
 8006d0a:	d108      	bne.n	8006d1e <HAL_RCC_OscConfig+0x272>
 8006d0c:	4b09      	ldr	r3, [pc, #36]	; (8006d34 <HAL_RCC_OscConfig+0x288>)
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006d14:	4a07      	ldr	r2, [pc, #28]	; (8006d34 <HAL_RCC_OscConfig+0x288>)
 8006d16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d1a:	6053      	str	r3, [r2, #4]
 8006d1c:	e030      	b.n	8006d80 <HAL_RCC_OscConfig+0x2d4>
 8006d1e:	4b05      	ldr	r3, [pc, #20]	; (8006d34 <HAL_RCC_OscConfig+0x288>)
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	691b      	ldr	r3, [r3, #16]
 8006d2a:	031b      	lsls	r3, r3, #12
 8006d2c:	4901      	ldr	r1, [pc, #4]	; (8006d34 <HAL_RCC_OscConfig+0x288>)
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	604b      	str	r3, [r1, #4]
 8006d32:	e025      	b.n	8006d80 <HAL_RCC_OscConfig+0x2d4>
 8006d34:	58024400 	.word	0x58024400
 8006d38:	4b9a      	ldr	r3, [pc, #616]	; (8006fa4 <HAL_RCC_OscConfig+0x4f8>)
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	691b      	ldr	r3, [r3, #16]
 8006d44:	061b      	lsls	r3, r3, #24
 8006d46:	4997      	ldr	r1, [pc, #604]	; (8006fa4 <HAL_RCC_OscConfig+0x4f8>)
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	604b      	str	r3, [r1, #4]
 8006d4c:	e018      	b.n	8006d80 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d4e:	4b95      	ldr	r3, [pc, #596]	; (8006fa4 <HAL_RCC_OscConfig+0x4f8>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a94      	ldr	r2, [pc, #592]	; (8006fa4 <HAL_RCC_OscConfig+0x4f8>)
 8006d54:	f023 0301 	bic.w	r3, r3, #1
 8006d58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d5a:	f7fc f9b3 	bl	80030c4 <HAL_GetTick>
 8006d5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006d60:	e008      	b.n	8006d74 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d62:	f7fc f9af 	bl	80030c4 <HAL_GetTick>
 8006d66:	4602      	mov	r2, r0
 8006d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d6a:	1ad3      	subs	r3, r2, r3
 8006d6c:	2b02      	cmp	r3, #2
 8006d6e:	d901      	bls.n	8006d74 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006d70:	2303      	movs	r3, #3
 8006d72:	e2ed      	b.n	8007350 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006d74:	4b8b      	ldr	r3, [pc, #556]	; (8006fa4 <HAL_RCC_OscConfig+0x4f8>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f003 0304 	and.w	r3, r3, #4
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d1f0      	bne.n	8006d62 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f003 0310 	and.w	r3, r3, #16
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	f000 80a9 	beq.w	8006ee0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d8e:	4b85      	ldr	r3, [pc, #532]	; (8006fa4 <HAL_RCC_OscConfig+0x4f8>)
 8006d90:	691b      	ldr	r3, [r3, #16]
 8006d92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d96:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006d98:	4b82      	ldr	r3, [pc, #520]	; (8006fa4 <HAL_RCC_OscConfig+0x4f8>)
 8006d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d9c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006d9e:	69bb      	ldr	r3, [r7, #24]
 8006da0:	2b08      	cmp	r3, #8
 8006da2:	d007      	beq.n	8006db4 <HAL_RCC_OscConfig+0x308>
 8006da4:	69bb      	ldr	r3, [r7, #24]
 8006da6:	2b18      	cmp	r3, #24
 8006da8:	d13a      	bne.n	8006e20 <HAL_RCC_OscConfig+0x374>
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	f003 0303 	and.w	r3, r3, #3
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d135      	bne.n	8006e20 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006db4:	4b7b      	ldr	r3, [pc, #492]	; (8006fa4 <HAL_RCC_OscConfig+0x4f8>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d005      	beq.n	8006dcc <HAL_RCC_OscConfig+0x320>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	69db      	ldr	r3, [r3, #28]
 8006dc4:	2b80      	cmp	r3, #128	; 0x80
 8006dc6:	d001      	beq.n	8006dcc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	e2c1      	b.n	8007350 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006dcc:	f7fc f9aa 	bl	8003124 <HAL_GetREVID>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	f241 0203 	movw	r2, #4099	; 0x1003
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d817      	bhi.n	8006e0a <HAL_RCC_OscConfig+0x35e>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6a1b      	ldr	r3, [r3, #32]
 8006dde:	2b20      	cmp	r3, #32
 8006de0:	d108      	bne.n	8006df4 <HAL_RCC_OscConfig+0x348>
 8006de2:	4b70      	ldr	r3, [pc, #448]	; (8006fa4 <HAL_RCC_OscConfig+0x4f8>)
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006dea:	4a6e      	ldr	r2, [pc, #440]	; (8006fa4 <HAL_RCC_OscConfig+0x4f8>)
 8006dec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006df0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006df2:	e075      	b.n	8006ee0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006df4:	4b6b      	ldr	r3, [pc, #428]	; (8006fa4 <HAL_RCC_OscConfig+0x4f8>)
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6a1b      	ldr	r3, [r3, #32]
 8006e00:	069b      	lsls	r3, r3, #26
 8006e02:	4968      	ldr	r1, [pc, #416]	; (8006fa4 <HAL_RCC_OscConfig+0x4f8>)
 8006e04:	4313      	orrs	r3, r2
 8006e06:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006e08:	e06a      	b.n	8006ee0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006e0a:	4b66      	ldr	r3, [pc, #408]	; (8006fa4 <HAL_RCC_OscConfig+0x4f8>)
 8006e0c:	68db      	ldr	r3, [r3, #12]
 8006e0e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6a1b      	ldr	r3, [r3, #32]
 8006e16:	061b      	lsls	r3, r3, #24
 8006e18:	4962      	ldr	r1, [pc, #392]	; (8006fa4 <HAL_RCC_OscConfig+0x4f8>)
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006e1e:	e05f      	b.n	8006ee0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	69db      	ldr	r3, [r3, #28]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d042      	beq.n	8006eae <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006e28:	4b5e      	ldr	r3, [pc, #376]	; (8006fa4 <HAL_RCC_OscConfig+0x4f8>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a5d      	ldr	r2, [pc, #372]	; (8006fa4 <HAL_RCC_OscConfig+0x4f8>)
 8006e2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e34:	f7fc f946 	bl	80030c4 <HAL_GetTick>
 8006e38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006e3a:	e008      	b.n	8006e4e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006e3c:	f7fc f942 	bl	80030c4 <HAL_GetTick>
 8006e40:	4602      	mov	r2, r0
 8006e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e44:	1ad3      	subs	r3, r2, r3
 8006e46:	2b02      	cmp	r3, #2
 8006e48:	d901      	bls.n	8006e4e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006e4a:	2303      	movs	r3, #3
 8006e4c:	e280      	b.n	8007350 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006e4e:	4b55      	ldr	r3, [pc, #340]	; (8006fa4 <HAL_RCC_OscConfig+0x4f8>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d0f0      	beq.n	8006e3c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006e5a:	f7fc f963 	bl	8003124 <HAL_GetREVID>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	f241 0203 	movw	r2, #4099	; 0x1003
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d817      	bhi.n	8006e98 <HAL_RCC_OscConfig+0x3ec>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6a1b      	ldr	r3, [r3, #32]
 8006e6c:	2b20      	cmp	r3, #32
 8006e6e:	d108      	bne.n	8006e82 <HAL_RCC_OscConfig+0x3d6>
 8006e70:	4b4c      	ldr	r3, [pc, #304]	; (8006fa4 <HAL_RCC_OscConfig+0x4f8>)
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006e78:	4a4a      	ldr	r2, [pc, #296]	; (8006fa4 <HAL_RCC_OscConfig+0x4f8>)
 8006e7a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e7e:	6053      	str	r3, [r2, #4]
 8006e80:	e02e      	b.n	8006ee0 <HAL_RCC_OscConfig+0x434>
 8006e82:	4b48      	ldr	r3, [pc, #288]	; (8006fa4 <HAL_RCC_OscConfig+0x4f8>)
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6a1b      	ldr	r3, [r3, #32]
 8006e8e:	069b      	lsls	r3, r3, #26
 8006e90:	4944      	ldr	r1, [pc, #272]	; (8006fa4 <HAL_RCC_OscConfig+0x4f8>)
 8006e92:	4313      	orrs	r3, r2
 8006e94:	604b      	str	r3, [r1, #4]
 8006e96:	e023      	b.n	8006ee0 <HAL_RCC_OscConfig+0x434>
 8006e98:	4b42      	ldr	r3, [pc, #264]	; (8006fa4 <HAL_RCC_OscConfig+0x4f8>)
 8006e9a:	68db      	ldr	r3, [r3, #12]
 8006e9c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6a1b      	ldr	r3, [r3, #32]
 8006ea4:	061b      	lsls	r3, r3, #24
 8006ea6:	493f      	ldr	r1, [pc, #252]	; (8006fa4 <HAL_RCC_OscConfig+0x4f8>)
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	60cb      	str	r3, [r1, #12]
 8006eac:	e018      	b.n	8006ee0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006eae:	4b3d      	ldr	r3, [pc, #244]	; (8006fa4 <HAL_RCC_OscConfig+0x4f8>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a3c      	ldr	r2, [pc, #240]	; (8006fa4 <HAL_RCC_OscConfig+0x4f8>)
 8006eb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006eb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eba:	f7fc f903 	bl	80030c4 <HAL_GetTick>
 8006ebe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006ec0:	e008      	b.n	8006ed4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006ec2:	f7fc f8ff 	bl	80030c4 <HAL_GetTick>
 8006ec6:	4602      	mov	r2, r0
 8006ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eca:	1ad3      	subs	r3, r2, r3
 8006ecc:	2b02      	cmp	r3, #2
 8006ece:	d901      	bls.n	8006ed4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006ed0:	2303      	movs	r3, #3
 8006ed2:	e23d      	b.n	8007350 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006ed4:	4b33      	ldr	r3, [pc, #204]	; (8006fa4 <HAL_RCC_OscConfig+0x4f8>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d1f0      	bne.n	8006ec2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f003 0308 	and.w	r3, r3, #8
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d036      	beq.n	8006f5a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	695b      	ldr	r3, [r3, #20]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d019      	beq.n	8006f28 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ef4:	4b2b      	ldr	r3, [pc, #172]	; (8006fa4 <HAL_RCC_OscConfig+0x4f8>)
 8006ef6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ef8:	4a2a      	ldr	r2, [pc, #168]	; (8006fa4 <HAL_RCC_OscConfig+0x4f8>)
 8006efa:	f043 0301 	orr.w	r3, r3, #1
 8006efe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f00:	f7fc f8e0 	bl	80030c4 <HAL_GetTick>
 8006f04:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006f06:	e008      	b.n	8006f1a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f08:	f7fc f8dc 	bl	80030c4 <HAL_GetTick>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f10:	1ad3      	subs	r3, r2, r3
 8006f12:	2b02      	cmp	r3, #2
 8006f14:	d901      	bls.n	8006f1a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006f16:	2303      	movs	r3, #3
 8006f18:	e21a      	b.n	8007350 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006f1a:	4b22      	ldr	r3, [pc, #136]	; (8006fa4 <HAL_RCC_OscConfig+0x4f8>)
 8006f1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f1e:	f003 0302 	and.w	r3, r3, #2
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d0f0      	beq.n	8006f08 <HAL_RCC_OscConfig+0x45c>
 8006f26:	e018      	b.n	8006f5a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f28:	4b1e      	ldr	r3, [pc, #120]	; (8006fa4 <HAL_RCC_OscConfig+0x4f8>)
 8006f2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f2c:	4a1d      	ldr	r2, [pc, #116]	; (8006fa4 <HAL_RCC_OscConfig+0x4f8>)
 8006f2e:	f023 0301 	bic.w	r3, r3, #1
 8006f32:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f34:	f7fc f8c6 	bl	80030c4 <HAL_GetTick>
 8006f38:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006f3a:	e008      	b.n	8006f4e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f3c:	f7fc f8c2 	bl	80030c4 <HAL_GetTick>
 8006f40:	4602      	mov	r2, r0
 8006f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f44:	1ad3      	subs	r3, r2, r3
 8006f46:	2b02      	cmp	r3, #2
 8006f48:	d901      	bls.n	8006f4e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006f4a:	2303      	movs	r3, #3
 8006f4c:	e200      	b.n	8007350 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006f4e:	4b15      	ldr	r3, [pc, #84]	; (8006fa4 <HAL_RCC_OscConfig+0x4f8>)
 8006f50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f52:	f003 0302 	and.w	r3, r3, #2
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d1f0      	bne.n	8006f3c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f003 0320 	and.w	r3, r3, #32
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d039      	beq.n	8006fda <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	699b      	ldr	r3, [r3, #24]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d01c      	beq.n	8006fa8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006f6e:	4b0d      	ldr	r3, [pc, #52]	; (8006fa4 <HAL_RCC_OscConfig+0x4f8>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a0c      	ldr	r2, [pc, #48]	; (8006fa4 <HAL_RCC_OscConfig+0x4f8>)
 8006f74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006f78:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006f7a:	f7fc f8a3 	bl	80030c4 <HAL_GetTick>
 8006f7e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006f80:	e008      	b.n	8006f94 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006f82:	f7fc f89f 	bl	80030c4 <HAL_GetTick>
 8006f86:	4602      	mov	r2, r0
 8006f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8a:	1ad3      	subs	r3, r2, r3
 8006f8c:	2b02      	cmp	r3, #2
 8006f8e:	d901      	bls.n	8006f94 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006f90:	2303      	movs	r3, #3
 8006f92:	e1dd      	b.n	8007350 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006f94:	4b03      	ldr	r3, [pc, #12]	; (8006fa4 <HAL_RCC_OscConfig+0x4f8>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d0f0      	beq.n	8006f82 <HAL_RCC_OscConfig+0x4d6>
 8006fa0:	e01b      	b.n	8006fda <HAL_RCC_OscConfig+0x52e>
 8006fa2:	bf00      	nop
 8006fa4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006fa8:	4b9b      	ldr	r3, [pc, #620]	; (8007218 <HAL_RCC_OscConfig+0x76c>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a9a      	ldr	r2, [pc, #616]	; (8007218 <HAL_RCC_OscConfig+0x76c>)
 8006fae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006fb2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006fb4:	f7fc f886 	bl	80030c4 <HAL_GetTick>
 8006fb8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006fba:	e008      	b.n	8006fce <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006fbc:	f7fc f882 	bl	80030c4 <HAL_GetTick>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc4:	1ad3      	subs	r3, r2, r3
 8006fc6:	2b02      	cmp	r3, #2
 8006fc8:	d901      	bls.n	8006fce <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006fca:	2303      	movs	r3, #3
 8006fcc:	e1c0      	b.n	8007350 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006fce:	4b92      	ldr	r3, [pc, #584]	; (8007218 <HAL_RCC_OscConfig+0x76c>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d1f0      	bne.n	8006fbc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f003 0304 	and.w	r3, r3, #4
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	f000 8081 	beq.w	80070ea <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006fe8:	4b8c      	ldr	r3, [pc, #560]	; (800721c <HAL_RCC_OscConfig+0x770>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a8b      	ldr	r2, [pc, #556]	; (800721c <HAL_RCC_OscConfig+0x770>)
 8006fee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ff2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006ff4:	f7fc f866 	bl	80030c4 <HAL_GetTick>
 8006ff8:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ffa:	e008      	b.n	800700e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ffc:	f7fc f862 	bl	80030c4 <HAL_GetTick>
 8007000:	4602      	mov	r2, r0
 8007002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007004:	1ad3      	subs	r3, r2, r3
 8007006:	2b64      	cmp	r3, #100	; 0x64
 8007008:	d901      	bls.n	800700e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800700a:	2303      	movs	r3, #3
 800700c:	e1a0      	b.n	8007350 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800700e:	4b83      	ldr	r3, [pc, #524]	; (800721c <HAL_RCC_OscConfig+0x770>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007016:	2b00      	cmp	r3, #0
 8007018:	d0f0      	beq.n	8006ffc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	2b01      	cmp	r3, #1
 8007020:	d106      	bne.n	8007030 <HAL_RCC_OscConfig+0x584>
 8007022:	4b7d      	ldr	r3, [pc, #500]	; (8007218 <HAL_RCC_OscConfig+0x76c>)
 8007024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007026:	4a7c      	ldr	r2, [pc, #496]	; (8007218 <HAL_RCC_OscConfig+0x76c>)
 8007028:	f043 0301 	orr.w	r3, r3, #1
 800702c:	6713      	str	r3, [r2, #112]	; 0x70
 800702e:	e02d      	b.n	800708c <HAL_RCC_OscConfig+0x5e0>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d10c      	bne.n	8007052 <HAL_RCC_OscConfig+0x5a6>
 8007038:	4b77      	ldr	r3, [pc, #476]	; (8007218 <HAL_RCC_OscConfig+0x76c>)
 800703a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800703c:	4a76      	ldr	r2, [pc, #472]	; (8007218 <HAL_RCC_OscConfig+0x76c>)
 800703e:	f023 0301 	bic.w	r3, r3, #1
 8007042:	6713      	str	r3, [r2, #112]	; 0x70
 8007044:	4b74      	ldr	r3, [pc, #464]	; (8007218 <HAL_RCC_OscConfig+0x76c>)
 8007046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007048:	4a73      	ldr	r2, [pc, #460]	; (8007218 <HAL_RCC_OscConfig+0x76c>)
 800704a:	f023 0304 	bic.w	r3, r3, #4
 800704e:	6713      	str	r3, [r2, #112]	; 0x70
 8007050:	e01c      	b.n	800708c <HAL_RCC_OscConfig+0x5e0>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	2b05      	cmp	r3, #5
 8007058:	d10c      	bne.n	8007074 <HAL_RCC_OscConfig+0x5c8>
 800705a:	4b6f      	ldr	r3, [pc, #444]	; (8007218 <HAL_RCC_OscConfig+0x76c>)
 800705c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800705e:	4a6e      	ldr	r2, [pc, #440]	; (8007218 <HAL_RCC_OscConfig+0x76c>)
 8007060:	f043 0304 	orr.w	r3, r3, #4
 8007064:	6713      	str	r3, [r2, #112]	; 0x70
 8007066:	4b6c      	ldr	r3, [pc, #432]	; (8007218 <HAL_RCC_OscConfig+0x76c>)
 8007068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800706a:	4a6b      	ldr	r2, [pc, #428]	; (8007218 <HAL_RCC_OscConfig+0x76c>)
 800706c:	f043 0301 	orr.w	r3, r3, #1
 8007070:	6713      	str	r3, [r2, #112]	; 0x70
 8007072:	e00b      	b.n	800708c <HAL_RCC_OscConfig+0x5e0>
 8007074:	4b68      	ldr	r3, [pc, #416]	; (8007218 <HAL_RCC_OscConfig+0x76c>)
 8007076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007078:	4a67      	ldr	r2, [pc, #412]	; (8007218 <HAL_RCC_OscConfig+0x76c>)
 800707a:	f023 0301 	bic.w	r3, r3, #1
 800707e:	6713      	str	r3, [r2, #112]	; 0x70
 8007080:	4b65      	ldr	r3, [pc, #404]	; (8007218 <HAL_RCC_OscConfig+0x76c>)
 8007082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007084:	4a64      	ldr	r2, [pc, #400]	; (8007218 <HAL_RCC_OscConfig+0x76c>)
 8007086:	f023 0304 	bic.w	r3, r3, #4
 800708a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d015      	beq.n	80070c0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007094:	f7fc f816 	bl	80030c4 <HAL_GetTick>
 8007098:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800709a:	e00a      	b.n	80070b2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800709c:	f7fc f812 	bl	80030c4 <HAL_GetTick>
 80070a0:	4602      	mov	r2, r0
 80070a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a4:	1ad3      	subs	r3, r2, r3
 80070a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d901      	bls.n	80070b2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80070ae:	2303      	movs	r3, #3
 80070b0:	e14e      	b.n	8007350 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80070b2:	4b59      	ldr	r3, [pc, #356]	; (8007218 <HAL_RCC_OscConfig+0x76c>)
 80070b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070b6:	f003 0302 	and.w	r3, r3, #2
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d0ee      	beq.n	800709c <HAL_RCC_OscConfig+0x5f0>
 80070be:	e014      	b.n	80070ea <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070c0:	f7fc f800 	bl	80030c4 <HAL_GetTick>
 80070c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80070c6:	e00a      	b.n	80070de <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070c8:	f7fb fffc 	bl	80030c4 <HAL_GetTick>
 80070cc:	4602      	mov	r2, r0
 80070ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d0:	1ad3      	subs	r3, r2, r3
 80070d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d901      	bls.n	80070de <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80070da:	2303      	movs	r3, #3
 80070dc:	e138      	b.n	8007350 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80070de:	4b4e      	ldr	r3, [pc, #312]	; (8007218 <HAL_RCC_OscConfig+0x76c>)
 80070e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070e2:	f003 0302 	and.w	r3, r3, #2
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d1ee      	bne.n	80070c8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	f000 812d 	beq.w	800734e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80070f4:	4b48      	ldr	r3, [pc, #288]	; (8007218 <HAL_RCC_OscConfig+0x76c>)
 80070f6:	691b      	ldr	r3, [r3, #16]
 80070f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80070fc:	2b18      	cmp	r3, #24
 80070fe:	f000 80bd 	beq.w	800727c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007106:	2b02      	cmp	r3, #2
 8007108:	f040 809e 	bne.w	8007248 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800710c:	4b42      	ldr	r3, [pc, #264]	; (8007218 <HAL_RCC_OscConfig+0x76c>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a41      	ldr	r2, [pc, #260]	; (8007218 <HAL_RCC_OscConfig+0x76c>)
 8007112:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007116:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007118:	f7fb ffd4 	bl	80030c4 <HAL_GetTick>
 800711c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800711e:	e008      	b.n	8007132 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007120:	f7fb ffd0 	bl	80030c4 <HAL_GetTick>
 8007124:	4602      	mov	r2, r0
 8007126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007128:	1ad3      	subs	r3, r2, r3
 800712a:	2b02      	cmp	r3, #2
 800712c:	d901      	bls.n	8007132 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800712e:	2303      	movs	r3, #3
 8007130:	e10e      	b.n	8007350 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007132:	4b39      	ldr	r3, [pc, #228]	; (8007218 <HAL_RCC_OscConfig+0x76c>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800713a:	2b00      	cmp	r3, #0
 800713c:	d1f0      	bne.n	8007120 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800713e:	4b36      	ldr	r3, [pc, #216]	; (8007218 <HAL_RCC_OscConfig+0x76c>)
 8007140:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007142:	4b37      	ldr	r3, [pc, #220]	; (8007220 <HAL_RCC_OscConfig+0x774>)
 8007144:	4013      	ands	r3, r2
 8007146:	687a      	ldr	r2, [r7, #4]
 8007148:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800714e:	0112      	lsls	r2, r2, #4
 8007150:	430a      	orrs	r2, r1
 8007152:	4931      	ldr	r1, [pc, #196]	; (8007218 <HAL_RCC_OscConfig+0x76c>)
 8007154:	4313      	orrs	r3, r2
 8007156:	628b      	str	r3, [r1, #40]	; 0x28
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800715c:	3b01      	subs	r3, #1
 800715e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007166:	3b01      	subs	r3, #1
 8007168:	025b      	lsls	r3, r3, #9
 800716a:	b29b      	uxth	r3, r3
 800716c:	431a      	orrs	r2, r3
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007172:	3b01      	subs	r3, #1
 8007174:	041b      	lsls	r3, r3, #16
 8007176:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800717a:	431a      	orrs	r2, r3
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007180:	3b01      	subs	r3, #1
 8007182:	061b      	lsls	r3, r3, #24
 8007184:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007188:	4923      	ldr	r1, [pc, #140]	; (8007218 <HAL_RCC_OscConfig+0x76c>)
 800718a:	4313      	orrs	r3, r2
 800718c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800718e:	4b22      	ldr	r3, [pc, #136]	; (8007218 <HAL_RCC_OscConfig+0x76c>)
 8007190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007192:	4a21      	ldr	r2, [pc, #132]	; (8007218 <HAL_RCC_OscConfig+0x76c>)
 8007194:	f023 0301 	bic.w	r3, r3, #1
 8007198:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800719a:	4b1f      	ldr	r3, [pc, #124]	; (8007218 <HAL_RCC_OscConfig+0x76c>)
 800719c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800719e:	4b21      	ldr	r3, [pc, #132]	; (8007224 <HAL_RCC_OscConfig+0x778>)
 80071a0:	4013      	ands	r3, r2
 80071a2:	687a      	ldr	r2, [r7, #4]
 80071a4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80071a6:	00d2      	lsls	r2, r2, #3
 80071a8:	491b      	ldr	r1, [pc, #108]	; (8007218 <HAL_RCC_OscConfig+0x76c>)
 80071aa:	4313      	orrs	r3, r2
 80071ac:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80071ae:	4b1a      	ldr	r3, [pc, #104]	; (8007218 <HAL_RCC_OscConfig+0x76c>)
 80071b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b2:	f023 020c 	bic.w	r2, r3, #12
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ba:	4917      	ldr	r1, [pc, #92]	; (8007218 <HAL_RCC_OscConfig+0x76c>)
 80071bc:	4313      	orrs	r3, r2
 80071be:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80071c0:	4b15      	ldr	r3, [pc, #84]	; (8007218 <HAL_RCC_OscConfig+0x76c>)
 80071c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c4:	f023 0202 	bic.w	r2, r3, #2
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071cc:	4912      	ldr	r1, [pc, #72]	; (8007218 <HAL_RCC_OscConfig+0x76c>)
 80071ce:	4313      	orrs	r3, r2
 80071d0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80071d2:	4b11      	ldr	r3, [pc, #68]	; (8007218 <HAL_RCC_OscConfig+0x76c>)
 80071d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071d6:	4a10      	ldr	r2, [pc, #64]	; (8007218 <HAL_RCC_OscConfig+0x76c>)
 80071d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071dc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071de:	4b0e      	ldr	r3, [pc, #56]	; (8007218 <HAL_RCC_OscConfig+0x76c>)
 80071e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e2:	4a0d      	ldr	r2, [pc, #52]	; (8007218 <HAL_RCC_OscConfig+0x76c>)
 80071e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80071ea:	4b0b      	ldr	r3, [pc, #44]	; (8007218 <HAL_RCC_OscConfig+0x76c>)
 80071ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ee:	4a0a      	ldr	r2, [pc, #40]	; (8007218 <HAL_RCC_OscConfig+0x76c>)
 80071f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80071f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80071f6:	4b08      	ldr	r3, [pc, #32]	; (8007218 <HAL_RCC_OscConfig+0x76c>)
 80071f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071fa:	4a07      	ldr	r2, [pc, #28]	; (8007218 <HAL_RCC_OscConfig+0x76c>)
 80071fc:	f043 0301 	orr.w	r3, r3, #1
 8007200:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007202:	4b05      	ldr	r3, [pc, #20]	; (8007218 <HAL_RCC_OscConfig+0x76c>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a04      	ldr	r2, [pc, #16]	; (8007218 <HAL_RCC_OscConfig+0x76c>)
 8007208:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800720c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800720e:	f7fb ff59 	bl	80030c4 <HAL_GetTick>
 8007212:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007214:	e011      	b.n	800723a <HAL_RCC_OscConfig+0x78e>
 8007216:	bf00      	nop
 8007218:	58024400 	.word	0x58024400
 800721c:	58024800 	.word	0x58024800
 8007220:	fffffc0c 	.word	0xfffffc0c
 8007224:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007228:	f7fb ff4c 	bl	80030c4 <HAL_GetTick>
 800722c:	4602      	mov	r2, r0
 800722e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007230:	1ad3      	subs	r3, r2, r3
 8007232:	2b02      	cmp	r3, #2
 8007234:	d901      	bls.n	800723a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8007236:	2303      	movs	r3, #3
 8007238:	e08a      	b.n	8007350 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800723a:	4b47      	ldr	r3, [pc, #284]	; (8007358 <HAL_RCC_OscConfig+0x8ac>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007242:	2b00      	cmp	r3, #0
 8007244:	d0f0      	beq.n	8007228 <HAL_RCC_OscConfig+0x77c>
 8007246:	e082      	b.n	800734e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007248:	4b43      	ldr	r3, [pc, #268]	; (8007358 <HAL_RCC_OscConfig+0x8ac>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a42      	ldr	r2, [pc, #264]	; (8007358 <HAL_RCC_OscConfig+0x8ac>)
 800724e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007252:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007254:	f7fb ff36 	bl	80030c4 <HAL_GetTick>
 8007258:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800725a:	e008      	b.n	800726e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800725c:	f7fb ff32 	bl	80030c4 <HAL_GetTick>
 8007260:	4602      	mov	r2, r0
 8007262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007264:	1ad3      	subs	r3, r2, r3
 8007266:	2b02      	cmp	r3, #2
 8007268:	d901      	bls.n	800726e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800726a:	2303      	movs	r3, #3
 800726c:	e070      	b.n	8007350 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800726e:	4b3a      	ldr	r3, [pc, #232]	; (8007358 <HAL_RCC_OscConfig+0x8ac>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007276:	2b00      	cmp	r3, #0
 8007278:	d1f0      	bne.n	800725c <HAL_RCC_OscConfig+0x7b0>
 800727a:	e068      	b.n	800734e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800727c:	4b36      	ldr	r3, [pc, #216]	; (8007358 <HAL_RCC_OscConfig+0x8ac>)
 800727e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007280:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007282:	4b35      	ldr	r3, [pc, #212]	; (8007358 <HAL_RCC_OscConfig+0x8ac>)
 8007284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007286:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800728c:	2b01      	cmp	r3, #1
 800728e:	d031      	beq.n	80072f4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	f003 0203 	and.w	r2, r3, #3
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800729a:	429a      	cmp	r2, r3
 800729c:	d12a      	bne.n	80072f4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	091b      	lsrs	r3, r3, #4
 80072a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d122      	bne.n	80072f4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072b8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80072ba:	429a      	cmp	r2, r3
 80072bc:	d11a      	bne.n	80072f4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	0a5b      	lsrs	r3, r3, #9
 80072c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072ca:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d111      	bne.n	80072f4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	0c1b      	lsrs	r3, r3, #16
 80072d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072dc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80072de:	429a      	cmp	r2, r3
 80072e0:	d108      	bne.n	80072f4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	0e1b      	lsrs	r3, r3, #24
 80072e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072ee:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80072f0:	429a      	cmp	r2, r3
 80072f2:	d001      	beq.n	80072f8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80072f4:	2301      	movs	r3, #1
 80072f6:	e02b      	b.n	8007350 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80072f8:	4b17      	ldr	r3, [pc, #92]	; (8007358 <HAL_RCC_OscConfig+0x8ac>)
 80072fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072fc:	08db      	lsrs	r3, r3, #3
 80072fe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007302:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007308:	693a      	ldr	r2, [r7, #16]
 800730a:	429a      	cmp	r2, r3
 800730c:	d01f      	beq.n	800734e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800730e:	4b12      	ldr	r3, [pc, #72]	; (8007358 <HAL_RCC_OscConfig+0x8ac>)
 8007310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007312:	4a11      	ldr	r2, [pc, #68]	; (8007358 <HAL_RCC_OscConfig+0x8ac>)
 8007314:	f023 0301 	bic.w	r3, r3, #1
 8007318:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800731a:	f7fb fed3 	bl	80030c4 <HAL_GetTick>
 800731e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007320:	bf00      	nop
 8007322:	f7fb fecf 	bl	80030c4 <HAL_GetTick>
 8007326:	4602      	mov	r2, r0
 8007328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732a:	4293      	cmp	r3, r2
 800732c:	d0f9      	beq.n	8007322 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800732e:	4b0a      	ldr	r3, [pc, #40]	; (8007358 <HAL_RCC_OscConfig+0x8ac>)
 8007330:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007332:	4b0a      	ldr	r3, [pc, #40]	; (800735c <HAL_RCC_OscConfig+0x8b0>)
 8007334:	4013      	ands	r3, r2
 8007336:	687a      	ldr	r2, [r7, #4]
 8007338:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800733a:	00d2      	lsls	r2, r2, #3
 800733c:	4906      	ldr	r1, [pc, #24]	; (8007358 <HAL_RCC_OscConfig+0x8ac>)
 800733e:	4313      	orrs	r3, r2
 8007340:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007342:	4b05      	ldr	r3, [pc, #20]	; (8007358 <HAL_RCC_OscConfig+0x8ac>)
 8007344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007346:	4a04      	ldr	r2, [pc, #16]	; (8007358 <HAL_RCC_OscConfig+0x8ac>)
 8007348:	f043 0301 	orr.w	r3, r3, #1
 800734c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800734e:	2300      	movs	r3, #0
}
 8007350:	4618      	mov	r0, r3
 8007352:	3730      	adds	r7, #48	; 0x30
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}
 8007358:	58024400 	.word	0x58024400
 800735c:	ffff0007 	.word	0xffff0007

08007360 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b086      	sub	sp, #24
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d101      	bne.n	8007374 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007370:	2301      	movs	r3, #1
 8007372:	e19c      	b.n	80076ae <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007374:	4b8a      	ldr	r3, [pc, #552]	; (80075a0 <HAL_RCC_ClockConfig+0x240>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f003 030f 	and.w	r3, r3, #15
 800737c:	683a      	ldr	r2, [r7, #0]
 800737e:	429a      	cmp	r2, r3
 8007380:	d910      	bls.n	80073a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007382:	4b87      	ldr	r3, [pc, #540]	; (80075a0 <HAL_RCC_ClockConfig+0x240>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f023 020f 	bic.w	r2, r3, #15
 800738a:	4985      	ldr	r1, [pc, #532]	; (80075a0 <HAL_RCC_ClockConfig+0x240>)
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	4313      	orrs	r3, r2
 8007390:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007392:	4b83      	ldr	r3, [pc, #524]	; (80075a0 <HAL_RCC_ClockConfig+0x240>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f003 030f 	and.w	r3, r3, #15
 800739a:	683a      	ldr	r2, [r7, #0]
 800739c:	429a      	cmp	r2, r3
 800739e:	d001      	beq.n	80073a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80073a0:	2301      	movs	r3, #1
 80073a2:	e184      	b.n	80076ae <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f003 0304 	and.w	r3, r3, #4
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d010      	beq.n	80073d2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	691a      	ldr	r2, [r3, #16]
 80073b4:	4b7b      	ldr	r3, [pc, #492]	; (80075a4 <HAL_RCC_ClockConfig+0x244>)
 80073b6:	699b      	ldr	r3, [r3, #24]
 80073b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80073bc:	429a      	cmp	r2, r3
 80073be:	d908      	bls.n	80073d2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80073c0:	4b78      	ldr	r3, [pc, #480]	; (80075a4 <HAL_RCC_ClockConfig+0x244>)
 80073c2:	699b      	ldr	r3, [r3, #24]
 80073c4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	691b      	ldr	r3, [r3, #16]
 80073cc:	4975      	ldr	r1, [pc, #468]	; (80075a4 <HAL_RCC_ClockConfig+0x244>)
 80073ce:	4313      	orrs	r3, r2
 80073d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f003 0308 	and.w	r3, r3, #8
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d010      	beq.n	8007400 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	695a      	ldr	r2, [r3, #20]
 80073e2:	4b70      	ldr	r3, [pc, #448]	; (80075a4 <HAL_RCC_ClockConfig+0x244>)
 80073e4:	69db      	ldr	r3, [r3, #28]
 80073e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80073ea:	429a      	cmp	r2, r3
 80073ec:	d908      	bls.n	8007400 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80073ee:	4b6d      	ldr	r3, [pc, #436]	; (80075a4 <HAL_RCC_ClockConfig+0x244>)
 80073f0:	69db      	ldr	r3, [r3, #28]
 80073f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	695b      	ldr	r3, [r3, #20]
 80073fa:	496a      	ldr	r1, [pc, #424]	; (80075a4 <HAL_RCC_ClockConfig+0x244>)
 80073fc:	4313      	orrs	r3, r2
 80073fe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f003 0310 	and.w	r3, r3, #16
 8007408:	2b00      	cmp	r3, #0
 800740a:	d010      	beq.n	800742e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	699a      	ldr	r2, [r3, #24]
 8007410:	4b64      	ldr	r3, [pc, #400]	; (80075a4 <HAL_RCC_ClockConfig+0x244>)
 8007412:	69db      	ldr	r3, [r3, #28]
 8007414:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007418:	429a      	cmp	r2, r3
 800741a:	d908      	bls.n	800742e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800741c:	4b61      	ldr	r3, [pc, #388]	; (80075a4 <HAL_RCC_ClockConfig+0x244>)
 800741e:	69db      	ldr	r3, [r3, #28]
 8007420:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	699b      	ldr	r3, [r3, #24]
 8007428:	495e      	ldr	r1, [pc, #376]	; (80075a4 <HAL_RCC_ClockConfig+0x244>)
 800742a:	4313      	orrs	r3, r2
 800742c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f003 0320 	and.w	r3, r3, #32
 8007436:	2b00      	cmp	r3, #0
 8007438:	d010      	beq.n	800745c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	69da      	ldr	r2, [r3, #28]
 800743e:	4b59      	ldr	r3, [pc, #356]	; (80075a4 <HAL_RCC_ClockConfig+0x244>)
 8007440:	6a1b      	ldr	r3, [r3, #32]
 8007442:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007446:	429a      	cmp	r2, r3
 8007448:	d908      	bls.n	800745c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800744a:	4b56      	ldr	r3, [pc, #344]	; (80075a4 <HAL_RCC_ClockConfig+0x244>)
 800744c:	6a1b      	ldr	r3, [r3, #32]
 800744e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	69db      	ldr	r3, [r3, #28]
 8007456:	4953      	ldr	r1, [pc, #332]	; (80075a4 <HAL_RCC_ClockConfig+0x244>)
 8007458:	4313      	orrs	r3, r2
 800745a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f003 0302 	and.w	r3, r3, #2
 8007464:	2b00      	cmp	r3, #0
 8007466:	d010      	beq.n	800748a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	68da      	ldr	r2, [r3, #12]
 800746c:	4b4d      	ldr	r3, [pc, #308]	; (80075a4 <HAL_RCC_ClockConfig+0x244>)
 800746e:	699b      	ldr	r3, [r3, #24]
 8007470:	f003 030f 	and.w	r3, r3, #15
 8007474:	429a      	cmp	r2, r3
 8007476:	d908      	bls.n	800748a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007478:	4b4a      	ldr	r3, [pc, #296]	; (80075a4 <HAL_RCC_ClockConfig+0x244>)
 800747a:	699b      	ldr	r3, [r3, #24]
 800747c:	f023 020f 	bic.w	r2, r3, #15
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	68db      	ldr	r3, [r3, #12]
 8007484:	4947      	ldr	r1, [pc, #284]	; (80075a4 <HAL_RCC_ClockConfig+0x244>)
 8007486:	4313      	orrs	r3, r2
 8007488:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f003 0301 	and.w	r3, r3, #1
 8007492:	2b00      	cmp	r3, #0
 8007494:	d055      	beq.n	8007542 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007496:	4b43      	ldr	r3, [pc, #268]	; (80075a4 <HAL_RCC_ClockConfig+0x244>)
 8007498:	699b      	ldr	r3, [r3, #24]
 800749a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	689b      	ldr	r3, [r3, #8]
 80074a2:	4940      	ldr	r1, [pc, #256]	; (80075a4 <HAL_RCC_ClockConfig+0x244>)
 80074a4:	4313      	orrs	r3, r2
 80074a6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	2b02      	cmp	r3, #2
 80074ae:	d107      	bne.n	80074c0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80074b0:	4b3c      	ldr	r3, [pc, #240]	; (80075a4 <HAL_RCC_ClockConfig+0x244>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d121      	bne.n	8007500 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80074bc:	2301      	movs	r3, #1
 80074be:	e0f6      	b.n	80076ae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	2b03      	cmp	r3, #3
 80074c6:	d107      	bne.n	80074d8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80074c8:	4b36      	ldr	r3, [pc, #216]	; (80075a4 <HAL_RCC_ClockConfig+0x244>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d115      	bne.n	8007500 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80074d4:	2301      	movs	r3, #1
 80074d6:	e0ea      	b.n	80076ae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d107      	bne.n	80074f0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80074e0:	4b30      	ldr	r3, [pc, #192]	; (80075a4 <HAL_RCC_ClockConfig+0x244>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d109      	bne.n	8007500 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80074ec:	2301      	movs	r3, #1
 80074ee:	e0de      	b.n	80076ae <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80074f0:	4b2c      	ldr	r3, [pc, #176]	; (80075a4 <HAL_RCC_ClockConfig+0x244>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f003 0304 	and.w	r3, r3, #4
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d101      	bne.n	8007500 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80074fc:	2301      	movs	r3, #1
 80074fe:	e0d6      	b.n	80076ae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007500:	4b28      	ldr	r3, [pc, #160]	; (80075a4 <HAL_RCC_ClockConfig+0x244>)
 8007502:	691b      	ldr	r3, [r3, #16]
 8007504:	f023 0207 	bic.w	r2, r3, #7
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	4925      	ldr	r1, [pc, #148]	; (80075a4 <HAL_RCC_ClockConfig+0x244>)
 800750e:	4313      	orrs	r3, r2
 8007510:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007512:	f7fb fdd7 	bl	80030c4 <HAL_GetTick>
 8007516:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007518:	e00a      	b.n	8007530 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800751a:	f7fb fdd3 	bl	80030c4 <HAL_GetTick>
 800751e:	4602      	mov	r2, r0
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	1ad3      	subs	r3, r2, r3
 8007524:	f241 3288 	movw	r2, #5000	; 0x1388
 8007528:	4293      	cmp	r3, r2
 800752a:	d901      	bls.n	8007530 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800752c:	2303      	movs	r3, #3
 800752e:	e0be      	b.n	80076ae <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007530:	4b1c      	ldr	r3, [pc, #112]	; (80075a4 <HAL_RCC_ClockConfig+0x244>)
 8007532:	691b      	ldr	r3, [r3, #16]
 8007534:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	00db      	lsls	r3, r3, #3
 800753e:	429a      	cmp	r2, r3
 8007540:	d1eb      	bne.n	800751a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f003 0302 	and.w	r3, r3, #2
 800754a:	2b00      	cmp	r3, #0
 800754c:	d010      	beq.n	8007570 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	68da      	ldr	r2, [r3, #12]
 8007552:	4b14      	ldr	r3, [pc, #80]	; (80075a4 <HAL_RCC_ClockConfig+0x244>)
 8007554:	699b      	ldr	r3, [r3, #24]
 8007556:	f003 030f 	and.w	r3, r3, #15
 800755a:	429a      	cmp	r2, r3
 800755c:	d208      	bcs.n	8007570 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800755e:	4b11      	ldr	r3, [pc, #68]	; (80075a4 <HAL_RCC_ClockConfig+0x244>)
 8007560:	699b      	ldr	r3, [r3, #24]
 8007562:	f023 020f 	bic.w	r2, r3, #15
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	68db      	ldr	r3, [r3, #12]
 800756a:	490e      	ldr	r1, [pc, #56]	; (80075a4 <HAL_RCC_ClockConfig+0x244>)
 800756c:	4313      	orrs	r3, r2
 800756e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007570:	4b0b      	ldr	r3, [pc, #44]	; (80075a0 <HAL_RCC_ClockConfig+0x240>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f003 030f 	and.w	r3, r3, #15
 8007578:	683a      	ldr	r2, [r7, #0]
 800757a:	429a      	cmp	r2, r3
 800757c:	d214      	bcs.n	80075a8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800757e:	4b08      	ldr	r3, [pc, #32]	; (80075a0 <HAL_RCC_ClockConfig+0x240>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f023 020f 	bic.w	r2, r3, #15
 8007586:	4906      	ldr	r1, [pc, #24]	; (80075a0 <HAL_RCC_ClockConfig+0x240>)
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	4313      	orrs	r3, r2
 800758c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800758e:	4b04      	ldr	r3, [pc, #16]	; (80075a0 <HAL_RCC_ClockConfig+0x240>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f003 030f 	and.w	r3, r3, #15
 8007596:	683a      	ldr	r2, [r7, #0]
 8007598:	429a      	cmp	r2, r3
 800759a:	d005      	beq.n	80075a8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800759c:	2301      	movs	r3, #1
 800759e:	e086      	b.n	80076ae <HAL_RCC_ClockConfig+0x34e>
 80075a0:	52002000 	.word	0x52002000
 80075a4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f003 0304 	and.w	r3, r3, #4
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d010      	beq.n	80075d6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	691a      	ldr	r2, [r3, #16]
 80075b8:	4b3f      	ldr	r3, [pc, #252]	; (80076b8 <HAL_RCC_ClockConfig+0x358>)
 80075ba:	699b      	ldr	r3, [r3, #24]
 80075bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80075c0:	429a      	cmp	r2, r3
 80075c2:	d208      	bcs.n	80075d6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80075c4:	4b3c      	ldr	r3, [pc, #240]	; (80076b8 <HAL_RCC_ClockConfig+0x358>)
 80075c6:	699b      	ldr	r3, [r3, #24]
 80075c8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	691b      	ldr	r3, [r3, #16]
 80075d0:	4939      	ldr	r1, [pc, #228]	; (80076b8 <HAL_RCC_ClockConfig+0x358>)
 80075d2:	4313      	orrs	r3, r2
 80075d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f003 0308 	and.w	r3, r3, #8
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d010      	beq.n	8007604 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	695a      	ldr	r2, [r3, #20]
 80075e6:	4b34      	ldr	r3, [pc, #208]	; (80076b8 <HAL_RCC_ClockConfig+0x358>)
 80075e8:	69db      	ldr	r3, [r3, #28]
 80075ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d208      	bcs.n	8007604 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80075f2:	4b31      	ldr	r3, [pc, #196]	; (80076b8 <HAL_RCC_ClockConfig+0x358>)
 80075f4:	69db      	ldr	r3, [r3, #28]
 80075f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	695b      	ldr	r3, [r3, #20]
 80075fe:	492e      	ldr	r1, [pc, #184]	; (80076b8 <HAL_RCC_ClockConfig+0x358>)
 8007600:	4313      	orrs	r3, r2
 8007602:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f003 0310 	and.w	r3, r3, #16
 800760c:	2b00      	cmp	r3, #0
 800760e:	d010      	beq.n	8007632 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	699a      	ldr	r2, [r3, #24]
 8007614:	4b28      	ldr	r3, [pc, #160]	; (80076b8 <HAL_RCC_ClockConfig+0x358>)
 8007616:	69db      	ldr	r3, [r3, #28]
 8007618:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800761c:	429a      	cmp	r2, r3
 800761e:	d208      	bcs.n	8007632 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007620:	4b25      	ldr	r3, [pc, #148]	; (80076b8 <HAL_RCC_ClockConfig+0x358>)
 8007622:	69db      	ldr	r3, [r3, #28]
 8007624:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	699b      	ldr	r3, [r3, #24]
 800762c:	4922      	ldr	r1, [pc, #136]	; (80076b8 <HAL_RCC_ClockConfig+0x358>)
 800762e:	4313      	orrs	r3, r2
 8007630:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f003 0320 	and.w	r3, r3, #32
 800763a:	2b00      	cmp	r3, #0
 800763c:	d010      	beq.n	8007660 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	69da      	ldr	r2, [r3, #28]
 8007642:	4b1d      	ldr	r3, [pc, #116]	; (80076b8 <HAL_RCC_ClockConfig+0x358>)
 8007644:	6a1b      	ldr	r3, [r3, #32]
 8007646:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800764a:	429a      	cmp	r2, r3
 800764c:	d208      	bcs.n	8007660 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800764e:	4b1a      	ldr	r3, [pc, #104]	; (80076b8 <HAL_RCC_ClockConfig+0x358>)
 8007650:	6a1b      	ldr	r3, [r3, #32]
 8007652:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	69db      	ldr	r3, [r3, #28]
 800765a:	4917      	ldr	r1, [pc, #92]	; (80076b8 <HAL_RCC_ClockConfig+0x358>)
 800765c:	4313      	orrs	r3, r2
 800765e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007660:	f000 f834 	bl	80076cc <HAL_RCC_GetSysClockFreq>
 8007664:	4602      	mov	r2, r0
 8007666:	4b14      	ldr	r3, [pc, #80]	; (80076b8 <HAL_RCC_ClockConfig+0x358>)
 8007668:	699b      	ldr	r3, [r3, #24]
 800766a:	0a1b      	lsrs	r3, r3, #8
 800766c:	f003 030f 	and.w	r3, r3, #15
 8007670:	4912      	ldr	r1, [pc, #72]	; (80076bc <HAL_RCC_ClockConfig+0x35c>)
 8007672:	5ccb      	ldrb	r3, [r1, r3]
 8007674:	f003 031f 	and.w	r3, r3, #31
 8007678:	fa22 f303 	lsr.w	r3, r2, r3
 800767c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800767e:	4b0e      	ldr	r3, [pc, #56]	; (80076b8 <HAL_RCC_ClockConfig+0x358>)
 8007680:	699b      	ldr	r3, [r3, #24]
 8007682:	f003 030f 	and.w	r3, r3, #15
 8007686:	4a0d      	ldr	r2, [pc, #52]	; (80076bc <HAL_RCC_ClockConfig+0x35c>)
 8007688:	5cd3      	ldrb	r3, [r2, r3]
 800768a:	f003 031f 	and.w	r3, r3, #31
 800768e:	693a      	ldr	r2, [r7, #16]
 8007690:	fa22 f303 	lsr.w	r3, r2, r3
 8007694:	4a0a      	ldr	r2, [pc, #40]	; (80076c0 <HAL_RCC_ClockConfig+0x360>)
 8007696:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007698:	4a0a      	ldr	r2, [pc, #40]	; (80076c4 <HAL_RCC_ClockConfig+0x364>)
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800769e:	4b0a      	ldr	r3, [pc, #40]	; (80076c8 <HAL_RCC_ClockConfig+0x368>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4618      	mov	r0, r3
 80076a4:	f7fb fcc4 	bl	8003030 <HAL_InitTick>
 80076a8:	4603      	mov	r3, r0
 80076aa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80076ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3718      	adds	r7, #24
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
 80076b6:	bf00      	nop
 80076b8:	58024400 	.word	0x58024400
 80076bc:	0800f520 	.word	0x0800f520
 80076c0:	24000030 	.word	0x24000030
 80076c4:	2400002c 	.word	0x2400002c
 80076c8:	24000034 	.word	0x24000034

080076cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b089      	sub	sp, #36	; 0x24
 80076d0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80076d2:	4bb3      	ldr	r3, [pc, #716]	; (80079a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076d4:	691b      	ldr	r3, [r3, #16]
 80076d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80076da:	2b18      	cmp	r3, #24
 80076dc:	f200 8155 	bhi.w	800798a <HAL_RCC_GetSysClockFreq+0x2be>
 80076e0:	a201      	add	r2, pc, #4	; (adr r2, 80076e8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80076e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e6:	bf00      	nop
 80076e8:	0800774d 	.word	0x0800774d
 80076ec:	0800798b 	.word	0x0800798b
 80076f0:	0800798b 	.word	0x0800798b
 80076f4:	0800798b 	.word	0x0800798b
 80076f8:	0800798b 	.word	0x0800798b
 80076fc:	0800798b 	.word	0x0800798b
 8007700:	0800798b 	.word	0x0800798b
 8007704:	0800798b 	.word	0x0800798b
 8007708:	08007773 	.word	0x08007773
 800770c:	0800798b 	.word	0x0800798b
 8007710:	0800798b 	.word	0x0800798b
 8007714:	0800798b 	.word	0x0800798b
 8007718:	0800798b 	.word	0x0800798b
 800771c:	0800798b 	.word	0x0800798b
 8007720:	0800798b 	.word	0x0800798b
 8007724:	0800798b 	.word	0x0800798b
 8007728:	08007779 	.word	0x08007779
 800772c:	0800798b 	.word	0x0800798b
 8007730:	0800798b 	.word	0x0800798b
 8007734:	0800798b 	.word	0x0800798b
 8007738:	0800798b 	.word	0x0800798b
 800773c:	0800798b 	.word	0x0800798b
 8007740:	0800798b 	.word	0x0800798b
 8007744:	0800798b 	.word	0x0800798b
 8007748:	0800777f 	.word	0x0800777f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800774c:	4b94      	ldr	r3, [pc, #592]	; (80079a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f003 0320 	and.w	r3, r3, #32
 8007754:	2b00      	cmp	r3, #0
 8007756:	d009      	beq.n	800776c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007758:	4b91      	ldr	r3, [pc, #580]	; (80079a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	08db      	lsrs	r3, r3, #3
 800775e:	f003 0303 	and.w	r3, r3, #3
 8007762:	4a90      	ldr	r2, [pc, #576]	; (80079a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007764:	fa22 f303 	lsr.w	r3, r2, r3
 8007768:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800776a:	e111      	b.n	8007990 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800776c:	4b8d      	ldr	r3, [pc, #564]	; (80079a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800776e:	61bb      	str	r3, [r7, #24]
      break;
 8007770:	e10e      	b.n	8007990 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007772:	4b8d      	ldr	r3, [pc, #564]	; (80079a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007774:	61bb      	str	r3, [r7, #24]
      break;
 8007776:	e10b      	b.n	8007990 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007778:	4b8c      	ldr	r3, [pc, #560]	; (80079ac <HAL_RCC_GetSysClockFreq+0x2e0>)
 800777a:	61bb      	str	r3, [r7, #24]
      break;
 800777c:	e108      	b.n	8007990 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800777e:	4b88      	ldr	r3, [pc, #544]	; (80079a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007782:	f003 0303 	and.w	r3, r3, #3
 8007786:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007788:	4b85      	ldr	r3, [pc, #532]	; (80079a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800778a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800778c:	091b      	lsrs	r3, r3, #4
 800778e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007792:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007794:	4b82      	ldr	r3, [pc, #520]	; (80079a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007798:	f003 0301 	and.w	r3, r3, #1
 800779c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800779e:	4b80      	ldr	r3, [pc, #512]	; (80079a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077a2:	08db      	lsrs	r3, r3, #3
 80077a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80077a8:	68fa      	ldr	r2, [r7, #12]
 80077aa:	fb02 f303 	mul.w	r3, r2, r3
 80077ae:	ee07 3a90 	vmov	s15, r3
 80077b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077b6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	f000 80e1 	beq.w	8007984 <HAL_RCC_GetSysClockFreq+0x2b8>
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	2b02      	cmp	r3, #2
 80077c6:	f000 8083 	beq.w	80078d0 <HAL_RCC_GetSysClockFreq+0x204>
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	2b02      	cmp	r3, #2
 80077ce:	f200 80a1 	bhi.w	8007914 <HAL_RCC_GetSysClockFreq+0x248>
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d003      	beq.n	80077e0 <HAL_RCC_GetSysClockFreq+0x114>
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	2b01      	cmp	r3, #1
 80077dc:	d056      	beq.n	800788c <HAL_RCC_GetSysClockFreq+0x1c0>
 80077de:	e099      	b.n	8007914 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80077e0:	4b6f      	ldr	r3, [pc, #444]	; (80079a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f003 0320 	and.w	r3, r3, #32
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d02d      	beq.n	8007848 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80077ec:	4b6c      	ldr	r3, [pc, #432]	; (80079a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	08db      	lsrs	r3, r3, #3
 80077f2:	f003 0303 	and.w	r3, r3, #3
 80077f6:	4a6b      	ldr	r2, [pc, #428]	; (80079a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80077f8:	fa22 f303 	lsr.w	r3, r2, r3
 80077fc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	ee07 3a90 	vmov	s15, r3
 8007804:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	ee07 3a90 	vmov	s15, r3
 800780e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007812:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007816:	4b62      	ldr	r3, [pc, #392]	; (80079a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800781a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800781e:	ee07 3a90 	vmov	s15, r3
 8007822:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007826:	ed97 6a02 	vldr	s12, [r7, #8]
 800782a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80079b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800782e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007832:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007836:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800783a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800783e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007842:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007846:	e087      	b.n	8007958 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	ee07 3a90 	vmov	s15, r3
 800784e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007852:	eddf 6a58 	vldr	s13, [pc, #352]	; 80079b4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007856:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800785a:	4b51      	ldr	r3, [pc, #324]	; (80079a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800785c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800785e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007862:	ee07 3a90 	vmov	s15, r3
 8007866:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800786a:	ed97 6a02 	vldr	s12, [r7, #8]
 800786e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80079b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007872:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007876:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800787a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800787e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007886:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800788a:	e065      	b.n	8007958 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	ee07 3a90 	vmov	s15, r3
 8007892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007896:	eddf 6a48 	vldr	s13, [pc, #288]	; 80079b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800789a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800789e:	4b40      	ldr	r3, [pc, #256]	; (80079a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078a6:	ee07 3a90 	vmov	s15, r3
 80078aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80078b2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80079b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80078b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078ca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80078ce:	e043      	b.n	8007958 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	ee07 3a90 	vmov	s15, r3
 80078d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078da:	eddf 6a38 	vldr	s13, [pc, #224]	; 80079bc <HAL_RCC_GetSysClockFreq+0x2f0>
 80078de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078e2:	4b2f      	ldr	r3, [pc, #188]	; (80079a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078ea:	ee07 3a90 	vmov	s15, r3
 80078ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80078f6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80079b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80078fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007902:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007906:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800790a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800790e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007912:	e021      	b.n	8007958 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	ee07 3a90 	vmov	s15, r3
 800791a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800791e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80079b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007922:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007926:	4b1e      	ldr	r3, [pc, #120]	; (80079a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800792a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800792e:	ee07 3a90 	vmov	s15, r3
 8007932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007936:	ed97 6a02 	vldr	s12, [r7, #8]
 800793a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80079b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800793e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007942:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007946:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800794a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800794e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007952:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007956:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007958:	4b11      	ldr	r3, [pc, #68]	; (80079a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800795a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800795c:	0a5b      	lsrs	r3, r3, #9
 800795e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007962:	3301      	adds	r3, #1
 8007964:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	ee07 3a90 	vmov	s15, r3
 800796c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007970:	edd7 6a07 	vldr	s13, [r7, #28]
 8007974:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007978:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800797c:	ee17 3a90 	vmov	r3, s15
 8007980:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007982:	e005      	b.n	8007990 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007984:	2300      	movs	r3, #0
 8007986:	61bb      	str	r3, [r7, #24]
      break;
 8007988:	e002      	b.n	8007990 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800798a:	4b07      	ldr	r3, [pc, #28]	; (80079a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800798c:	61bb      	str	r3, [r7, #24]
      break;
 800798e:	bf00      	nop
  }

  return sysclockfreq;
 8007990:	69bb      	ldr	r3, [r7, #24]
}
 8007992:	4618      	mov	r0, r3
 8007994:	3724      	adds	r7, #36	; 0x24
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr
 800799e:	bf00      	nop
 80079a0:	58024400 	.word	0x58024400
 80079a4:	03d09000 	.word	0x03d09000
 80079a8:	003d0900 	.word	0x003d0900
 80079ac:	017d7840 	.word	0x017d7840
 80079b0:	46000000 	.word	0x46000000
 80079b4:	4c742400 	.word	0x4c742400
 80079b8:	4a742400 	.word	0x4a742400
 80079bc:	4bbebc20 	.word	0x4bbebc20

080079c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b082      	sub	sp, #8
 80079c4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80079c6:	f7ff fe81 	bl	80076cc <HAL_RCC_GetSysClockFreq>
 80079ca:	4602      	mov	r2, r0
 80079cc:	4b10      	ldr	r3, [pc, #64]	; (8007a10 <HAL_RCC_GetHCLKFreq+0x50>)
 80079ce:	699b      	ldr	r3, [r3, #24]
 80079d0:	0a1b      	lsrs	r3, r3, #8
 80079d2:	f003 030f 	and.w	r3, r3, #15
 80079d6:	490f      	ldr	r1, [pc, #60]	; (8007a14 <HAL_RCC_GetHCLKFreq+0x54>)
 80079d8:	5ccb      	ldrb	r3, [r1, r3]
 80079da:	f003 031f 	and.w	r3, r3, #31
 80079de:	fa22 f303 	lsr.w	r3, r2, r3
 80079e2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80079e4:	4b0a      	ldr	r3, [pc, #40]	; (8007a10 <HAL_RCC_GetHCLKFreq+0x50>)
 80079e6:	699b      	ldr	r3, [r3, #24]
 80079e8:	f003 030f 	and.w	r3, r3, #15
 80079ec:	4a09      	ldr	r2, [pc, #36]	; (8007a14 <HAL_RCC_GetHCLKFreq+0x54>)
 80079ee:	5cd3      	ldrb	r3, [r2, r3]
 80079f0:	f003 031f 	and.w	r3, r3, #31
 80079f4:	687a      	ldr	r2, [r7, #4]
 80079f6:	fa22 f303 	lsr.w	r3, r2, r3
 80079fa:	4a07      	ldr	r2, [pc, #28]	; (8007a18 <HAL_RCC_GetHCLKFreq+0x58>)
 80079fc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80079fe:	4a07      	ldr	r2, [pc, #28]	; (8007a1c <HAL_RCC_GetHCLKFreq+0x5c>)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007a04:	4b04      	ldr	r3, [pc, #16]	; (8007a18 <HAL_RCC_GetHCLKFreq+0x58>)
 8007a06:	681b      	ldr	r3, [r3, #0]
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3708      	adds	r7, #8
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}
 8007a10:	58024400 	.word	0x58024400
 8007a14:	0800f520 	.word	0x0800f520
 8007a18:	24000030 	.word	0x24000030
 8007a1c:	2400002c 	.word	0x2400002c

08007a20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007a24:	f7ff ffcc 	bl	80079c0 <HAL_RCC_GetHCLKFreq>
 8007a28:	4602      	mov	r2, r0
 8007a2a:	4b06      	ldr	r3, [pc, #24]	; (8007a44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007a2c:	69db      	ldr	r3, [r3, #28]
 8007a2e:	091b      	lsrs	r3, r3, #4
 8007a30:	f003 0307 	and.w	r3, r3, #7
 8007a34:	4904      	ldr	r1, [pc, #16]	; (8007a48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007a36:	5ccb      	ldrb	r3, [r1, r3]
 8007a38:	f003 031f 	and.w	r3, r3, #31
 8007a3c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	bd80      	pop	{r7, pc}
 8007a44:	58024400 	.word	0x58024400
 8007a48:	0800f520 	.word	0x0800f520

08007a4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007a50:	f7ff ffb6 	bl	80079c0 <HAL_RCC_GetHCLKFreq>
 8007a54:	4602      	mov	r2, r0
 8007a56:	4b06      	ldr	r3, [pc, #24]	; (8007a70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007a58:	69db      	ldr	r3, [r3, #28]
 8007a5a:	0a1b      	lsrs	r3, r3, #8
 8007a5c:	f003 0307 	and.w	r3, r3, #7
 8007a60:	4904      	ldr	r1, [pc, #16]	; (8007a74 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007a62:	5ccb      	ldrb	r3, [r1, r3]
 8007a64:	f003 031f 	and.w	r3, r3, #31
 8007a68:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	bd80      	pop	{r7, pc}
 8007a70:	58024400 	.word	0x58024400
 8007a74:	0800f520 	.word	0x0800f520

08007a78 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007a78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a7c:	b0ca      	sub	sp, #296	; 0x128
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007a84:	2300      	movs	r3, #0
 8007a86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a98:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8007a9c:	2500      	movs	r5, #0
 8007a9e:	ea54 0305 	orrs.w	r3, r4, r5
 8007aa2:	d049      	beq.n	8007b38 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007aa8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007aaa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007aae:	d02f      	beq.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007ab0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007ab4:	d828      	bhi.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007ab6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007aba:	d01a      	beq.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007abc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ac0:	d822      	bhi.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d003      	beq.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007ac6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007aca:	d007      	beq.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007acc:	e01c      	b.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ace:	4bb8      	ldr	r3, [pc, #736]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ad2:	4ab7      	ldr	r2, [pc, #732]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ad4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ad8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007ada:	e01a      	b.n	8007b12 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ae0:	3308      	adds	r3, #8
 8007ae2:	2102      	movs	r1, #2
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f002 fb61 	bl	800a1ac <RCCEx_PLL2_Config>
 8007aea:	4603      	mov	r3, r0
 8007aec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007af0:	e00f      	b.n	8007b12 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007af6:	3328      	adds	r3, #40	; 0x28
 8007af8:	2102      	movs	r1, #2
 8007afa:	4618      	mov	r0, r3
 8007afc:	f002 fc08 	bl	800a310 <RCCEx_PLL3_Config>
 8007b00:	4603      	mov	r3, r0
 8007b02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007b06:	e004      	b.n	8007b12 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b08:	2301      	movs	r3, #1
 8007b0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007b0e:	e000      	b.n	8007b12 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007b10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d10a      	bne.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007b1a:	4ba5      	ldr	r3, [pc, #660]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b1e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b28:	4aa1      	ldr	r2, [pc, #644]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b2a:	430b      	orrs	r3, r1
 8007b2c:	6513      	str	r3, [r2, #80]	; 0x50
 8007b2e:	e003      	b.n	8007b38 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b30:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b34:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b40:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8007b44:	f04f 0900 	mov.w	r9, #0
 8007b48:	ea58 0309 	orrs.w	r3, r8, r9
 8007b4c:	d047      	beq.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b54:	2b04      	cmp	r3, #4
 8007b56:	d82a      	bhi.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007b58:	a201      	add	r2, pc, #4	; (adr r2, 8007b60 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b5e:	bf00      	nop
 8007b60:	08007b75 	.word	0x08007b75
 8007b64:	08007b83 	.word	0x08007b83
 8007b68:	08007b99 	.word	0x08007b99
 8007b6c:	08007bb7 	.word	0x08007bb7
 8007b70:	08007bb7 	.word	0x08007bb7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b74:	4b8e      	ldr	r3, [pc, #568]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b78:	4a8d      	ldr	r2, [pc, #564]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007b80:	e01a      	b.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b86:	3308      	adds	r3, #8
 8007b88:	2100      	movs	r1, #0
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f002 fb0e 	bl	800a1ac <RCCEx_PLL2_Config>
 8007b90:	4603      	mov	r3, r0
 8007b92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007b96:	e00f      	b.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b9c:	3328      	adds	r3, #40	; 0x28
 8007b9e:	2100      	movs	r1, #0
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f002 fbb5 	bl	800a310 <RCCEx_PLL3_Config>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007bac:	e004      	b.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007bb4:	e000      	b.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007bb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bb8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d10a      	bne.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007bc0:	4b7b      	ldr	r3, [pc, #492]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007bc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bc4:	f023 0107 	bic.w	r1, r3, #7
 8007bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bce:	4a78      	ldr	r2, [pc, #480]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007bd0:	430b      	orrs	r3, r1
 8007bd2:	6513      	str	r3, [r2, #80]	; 0x50
 8007bd4:	e003      	b.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007bda:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be6:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8007bea:	f04f 0b00 	mov.w	fp, #0
 8007bee:	ea5a 030b 	orrs.w	r3, sl, fp
 8007bf2:	d04c      	beq.n	8007c8e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007bf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bfe:	d030      	beq.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8007c00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c04:	d829      	bhi.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007c06:	2bc0      	cmp	r3, #192	; 0xc0
 8007c08:	d02d      	beq.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007c0a:	2bc0      	cmp	r3, #192	; 0xc0
 8007c0c:	d825      	bhi.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007c0e:	2b80      	cmp	r3, #128	; 0x80
 8007c10:	d018      	beq.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007c12:	2b80      	cmp	r3, #128	; 0x80
 8007c14:	d821      	bhi.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d002      	beq.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8007c1a:	2b40      	cmp	r3, #64	; 0x40
 8007c1c:	d007      	beq.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8007c1e:	e01c      	b.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c20:	4b63      	ldr	r3, [pc, #396]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c24:	4a62      	ldr	r2, [pc, #392]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007c26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c2a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007c2c:	e01c      	b.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c32:	3308      	adds	r3, #8
 8007c34:	2100      	movs	r1, #0
 8007c36:	4618      	mov	r0, r3
 8007c38:	f002 fab8 	bl	800a1ac <RCCEx_PLL2_Config>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007c42:	e011      	b.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007c44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c48:	3328      	adds	r3, #40	; 0x28
 8007c4a:	2100      	movs	r1, #0
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f002 fb5f 	bl	800a310 <RCCEx_PLL3_Config>
 8007c52:	4603      	mov	r3, r0
 8007c54:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007c58:	e006      	b.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007c60:	e002      	b.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007c62:	bf00      	nop
 8007c64:	e000      	b.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007c66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d10a      	bne.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007c70:	4b4f      	ldr	r3, [pc, #316]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007c72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c74:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8007c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c7e:	4a4c      	ldr	r2, [pc, #304]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007c80:	430b      	orrs	r3, r1
 8007c82:	6513      	str	r3, [r2, #80]	; 0x50
 8007c84:	e003      	b.n	8007c8e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c8a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c96:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8007c9a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007ca4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8007ca8:	460b      	mov	r3, r1
 8007caa:	4313      	orrs	r3, r2
 8007cac:	d053      	beq.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cb2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007cb6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007cba:	d035      	beq.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007cbc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007cc0:	d82e      	bhi.n	8007d20 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007cc2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007cc6:	d031      	beq.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007cc8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007ccc:	d828      	bhi.n	8007d20 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007cce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007cd2:	d01a      	beq.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007cd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007cd8:	d822      	bhi.n	8007d20 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d003      	beq.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007cde:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ce2:	d007      	beq.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007ce4:	e01c      	b.n	8007d20 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ce6:	4b32      	ldr	r3, [pc, #200]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cea:	4a31      	ldr	r2, [pc, #196]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007cec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007cf0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007cf2:	e01c      	b.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cf8:	3308      	adds	r3, #8
 8007cfa:	2100      	movs	r1, #0
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f002 fa55 	bl	800a1ac <RCCEx_PLL2_Config>
 8007d02:	4603      	mov	r3, r0
 8007d04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007d08:	e011      	b.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d0e:	3328      	adds	r3, #40	; 0x28
 8007d10:	2100      	movs	r1, #0
 8007d12:	4618      	mov	r0, r3
 8007d14:	f002 fafc 	bl	800a310 <RCCEx_PLL3_Config>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007d1e:	e006      	b.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007d20:	2301      	movs	r3, #1
 8007d22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007d26:	e002      	b.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007d28:	bf00      	nop
 8007d2a:	e000      	b.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007d2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d10b      	bne.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007d36:	4b1e      	ldr	r3, [pc, #120]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d3a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8007d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d42:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007d46:	4a1a      	ldr	r2, [pc, #104]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007d48:	430b      	orrs	r3, r1
 8007d4a:	6593      	str	r3, [r2, #88]	; 0x58
 8007d4c:	e003      	b.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d52:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d5e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8007d62:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007d66:	2300      	movs	r3, #0
 8007d68:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007d6c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8007d70:	460b      	mov	r3, r1
 8007d72:	4313      	orrs	r3, r2
 8007d74:	d056      	beq.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d7a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007d7e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007d82:	d038      	beq.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007d84:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007d88:	d831      	bhi.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007d8a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007d8e:	d034      	beq.n	8007dfa <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007d90:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007d94:	d82b      	bhi.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007d96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d9a:	d01d      	beq.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007d9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007da0:	d825      	bhi.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d006      	beq.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007da6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007daa:	d00a      	beq.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007dac:	e01f      	b.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007dae:	bf00      	nop
 8007db0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007db4:	4ba2      	ldr	r3, [pc, #648]	; (8008040 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007db8:	4aa1      	ldr	r2, [pc, #644]	; (8008040 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007dba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007dbe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007dc0:	e01c      	b.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dc6:	3308      	adds	r3, #8
 8007dc8:	2100      	movs	r1, #0
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f002 f9ee 	bl	800a1ac <RCCEx_PLL2_Config>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007dd6:	e011      	b.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007dd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ddc:	3328      	adds	r3, #40	; 0x28
 8007dde:	2100      	movs	r1, #0
 8007de0:	4618      	mov	r0, r3
 8007de2:	f002 fa95 	bl	800a310 <RCCEx_PLL3_Config>
 8007de6:	4603      	mov	r3, r0
 8007de8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007dec:	e006      	b.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007dee:	2301      	movs	r3, #1
 8007df0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007df4:	e002      	b.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007df6:	bf00      	nop
 8007df8:	e000      	b.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007dfa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007dfc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d10b      	bne.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007e04:	4b8e      	ldr	r3, [pc, #568]	; (8008040 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e08:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8007e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e10:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007e14:	4a8a      	ldr	r2, [pc, #552]	; (8008040 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e16:	430b      	orrs	r3, r1
 8007e18:	6593      	str	r3, [r2, #88]	; 0x58
 8007e1a:	e003      	b.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e1c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e20:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007e24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e2c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8007e30:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007e34:	2300      	movs	r3, #0
 8007e36:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007e3a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8007e3e:	460b      	mov	r3, r1
 8007e40:	4313      	orrs	r3, r2
 8007e42:	d03a      	beq.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e4a:	2b30      	cmp	r3, #48	; 0x30
 8007e4c:	d01f      	beq.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007e4e:	2b30      	cmp	r3, #48	; 0x30
 8007e50:	d819      	bhi.n	8007e86 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007e52:	2b20      	cmp	r3, #32
 8007e54:	d00c      	beq.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007e56:	2b20      	cmp	r3, #32
 8007e58:	d815      	bhi.n	8007e86 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d019      	beq.n	8007e92 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007e5e:	2b10      	cmp	r3, #16
 8007e60:	d111      	bne.n	8007e86 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e62:	4b77      	ldr	r3, [pc, #476]	; (8008040 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e66:	4a76      	ldr	r2, [pc, #472]	; (8008040 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e6c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007e6e:	e011      	b.n	8007e94 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e74:	3308      	adds	r3, #8
 8007e76:	2102      	movs	r1, #2
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f002 f997 	bl	800a1ac <RCCEx_PLL2_Config>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007e84:	e006      	b.n	8007e94 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007e86:	2301      	movs	r3, #1
 8007e88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007e8c:	e002      	b.n	8007e94 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007e8e:	bf00      	nop
 8007e90:	e000      	b.n	8007e94 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007e92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e94:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d10a      	bne.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007e9c:	4b68      	ldr	r3, [pc, #416]	; (8008040 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ea0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8007ea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007eaa:	4a65      	ldr	r2, [pc, #404]	; (8008040 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007eac:	430b      	orrs	r3, r1
 8007eae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007eb0:	e003      	b.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007eb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007eb6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8007ec6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007eca:	2300      	movs	r3, #0
 8007ecc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007ed0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8007ed4:	460b      	mov	r3, r1
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	d051      	beq.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ee0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ee4:	d035      	beq.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007ee6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007eea:	d82e      	bhi.n	8007f4a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007eec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007ef0:	d031      	beq.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007ef2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007ef6:	d828      	bhi.n	8007f4a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007ef8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007efc:	d01a      	beq.n	8007f34 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007efe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f02:	d822      	bhi.n	8007f4a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d003      	beq.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007f08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f0c:	d007      	beq.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007f0e:	e01c      	b.n	8007f4a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f10:	4b4b      	ldr	r3, [pc, #300]	; (8008040 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f14:	4a4a      	ldr	r2, [pc, #296]	; (8008040 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007f16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007f1c:	e01c      	b.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f22:	3308      	adds	r3, #8
 8007f24:	2100      	movs	r1, #0
 8007f26:	4618      	mov	r0, r3
 8007f28:	f002 f940 	bl	800a1ac <RCCEx_PLL2_Config>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007f32:	e011      	b.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007f34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f38:	3328      	adds	r3, #40	; 0x28
 8007f3a:	2100      	movs	r1, #0
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f002 f9e7 	bl	800a310 <RCCEx_PLL3_Config>
 8007f42:	4603      	mov	r3, r0
 8007f44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007f48:	e006      	b.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007f50:	e002      	b.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007f52:	bf00      	nop
 8007f54:	e000      	b.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007f56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d10a      	bne.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007f60:	4b37      	ldr	r3, [pc, #220]	; (8008040 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007f62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f64:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8007f68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f6e:	4a34      	ldr	r2, [pc, #208]	; (8008040 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007f70:	430b      	orrs	r3, r1
 8007f72:	6513      	str	r3, [r2, #80]	; 0x50
 8007f74:	e003      	b.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f7a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f86:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8007f8a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007f8e:	2300      	movs	r3, #0
 8007f90:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007f94:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8007f98:	460b      	mov	r3, r1
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	d056      	beq.n	800804c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fa2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fa4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007fa8:	d033      	beq.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007faa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007fae:	d82c      	bhi.n	800800a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007fb0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007fb4:	d02f      	beq.n	8008016 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007fb6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007fba:	d826      	bhi.n	800800a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007fbc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007fc0:	d02b      	beq.n	800801a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007fc2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007fc6:	d820      	bhi.n	800800a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007fc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007fcc:	d012      	beq.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007fce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007fd2:	d81a      	bhi.n	800800a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d022      	beq.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007fd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fdc:	d115      	bne.n	800800a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fe2:	3308      	adds	r3, #8
 8007fe4:	2101      	movs	r1, #1
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f002 f8e0 	bl	800a1ac <RCCEx_PLL2_Config>
 8007fec:	4603      	mov	r3, r0
 8007fee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007ff2:	e015      	b.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ff8:	3328      	adds	r3, #40	; 0x28
 8007ffa:	2101      	movs	r1, #1
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f002 f987 	bl	800a310 <RCCEx_PLL3_Config>
 8008002:	4603      	mov	r3, r0
 8008004:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008008:	e00a      	b.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800800a:	2301      	movs	r3, #1
 800800c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008010:	e006      	b.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008012:	bf00      	nop
 8008014:	e004      	b.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008016:	bf00      	nop
 8008018:	e002      	b.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800801a:	bf00      	nop
 800801c:	e000      	b.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800801e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008020:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008024:	2b00      	cmp	r3, #0
 8008026:	d10d      	bne.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008028:	4b05      	ldr	r3, [pc, #20]	; (8008040 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800802a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800802c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8008030:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008034:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008036:	4a02      	ldr	r2, [pc, #8]	; (8008040 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008038:	430b      	orrs	r3, r1
 800803a:	6513      	str	r3, [r2, #80]	; 0x50
 800803c:	e006      	b.n	800804c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800803e:	bf00      	nop
 8008040:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008044:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008048:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800804c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008054:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8008058:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800805c:	2300      	movs	r3, #0
 800805e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008062:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8008066:	460b      	mov	r3, r1
 8008068:	4313      	orrs	r3, r2
 800806a:	d055      	beq.n	8008118 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800806c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008070:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008074:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008078:	d033      	beq.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800807a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800807e:	d82c      	bhi.n	80080da <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008080:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008084:	d02f      	beq.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8008086:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800808a:	d826      	bhi.n	80080da <HAL_RCCEx_PeriphCLKConfig+0x662>
 800808c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008090:	d02b      	beq.n	80080ea <HAL_RCCEx_PeriphCLKConfig+0x672>
 8008092:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008096:	d820      	bhi.n	80080da <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008098:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800809c:	d012      	beq.n	80080c4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800809e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080a2:	d81a      	bhi.n	80080da <HAL_RCCEx_PeriphCLKConfig+0x662>
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d022      	beq.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0x676>
 80080a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80080ac:	d115      	bne.n	80080da <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80080ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080b2:	3308      	adds	r3, #8
 80080b4:	2101      	movs	r1, #1
 80080b6:	4618      	mov	r0, r3
 80080b8:	f002 f878 	bl	800a1ac <RCCEx_PLL2_Config>
 80080bc:	4603      	mov	r3, r0
 80080be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80080c2:	e015      	b.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80080c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080c8:	3328      	adds	r3, #40	; 0x28
 80080ca:	2101      	movs	r1, #1
 80080cc:	4618      	mov	r0, r3
 80080ce:	f002 f91f 	bl	800a310 <RCCEx_PLL3_Config>
 80080d2:	4603      	mov	r3, r0
 80080d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80080d8:	e00a      	b.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80080da:	2301      	movs	r3, #1
 80080dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80080e0:	e006      	b.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80080e2:	bf00      	nop
 80080e4:	e004      	b.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80080e6:	bf00      	nop
 80080e8:	e002      	b.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80080ea:	bf00      	nop
 80080ec:	e000      	b.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80080ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d10b      	bne.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80080f8:	4ba3      	ldr	r3, [pc, #652]	; (8008388 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080fc:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8008100:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008104:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008108:	4a9f      	ldr	r2, [pc, #636]	; (8008388 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800810a:	430b      	orrs	r3, r1
 800810c:	6593      	str	r3, [r2, #88]	; 0x58
 800810e:	e003      	b.n	8008118 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008110:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008114:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008118:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800811c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008120:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8008124:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008128:	2300      	movs	r3, #0
 800812a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800812e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008132:	460b      	mov	r3, r1
 8008134:	4313      	orrs	r3, r2
 8008136:	d037      	beq.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008138:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800813c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800813e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008142:	d00e      	beq.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8008144:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008148:	d816      	bhi.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800814a:	2b00      	cmp	r3, #0
 800814c:	d018      	beq.n	8008180 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800814e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008152:	d111      	bne.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008154:	4b8c      	ldr	r3, [pc, #560]	; (8008388 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008158:	4a8b      	ldr	r2, [pc, #556]	; (8008388 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800815a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800815e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008160:	e00f      	b.n	8008182 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008162:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008166:	3308      	adds	r3, #8
 8008168:	2101      	movs	r1, #1
 800816a:	4618      	mov	r0, r3
 800816c:	f002 f81e 	bl	800a1ac <RCCEx_PLL2_Config>
 8008170:	4603      	mov	r3, r0
 8008172:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008176:	e004      	b.n	8008182 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008178:	2301      	movs	r3, #1
 800817a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800817e:	e000      	b.n	8008182 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8008180:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008182:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008186:	2b00      	cmp	r3, #0
 8008188:	d10a      	bne.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800818a:	4b7f      	ldr	r3, [pc, #508]	; (8008388 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800818c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800818e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8008192:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008198:	4a7b      	ldr	r2, [pc, #492]	; (8008388 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800819a:	430b      	orrs	r3, r1
 800819c:	6513      	str	r3, [r2, #80]	; 0x50
 800819e:	e003      	b.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80081a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80081a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80081b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80081b8:	2300      	movs	r3, #0
 80081ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80081be:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80081c2:	460b      	mov	r3, r1
 80081c4:	4313      	orrs	r3, r2
 80081c6:	d039      	beq.n	800823c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80081c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081ce:	2b03      	cmp	r3, #3
 80081d0:	d81c      	bhi.n	800820c <HAL_RCCEx_PeriphCLKConfig+0x794>
 80081d2:	a201      	add	r2, pc, #4	; (adr r2, 80081d8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80081d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081d8:	08008215 	.word	0x08008215
 80081dc:	080081e9 	.word	0x080081e9
 80081e0:	080081f7 	.word	0x080081f7
 80081e4:	08008215 	.word	0x08008215
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081e8:	4b67      	ldr	r3, [pc, #412]	; (8008388 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80081ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ec:	4a66      	ldr	r2, [pc, #408]	; (8008388 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80081ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80081f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80081f4:	e00f      	b.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80081f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081fa:	3308      	adds	r3, #8
 80081fc:	2102      	movs	r1, #2
 80081fe:	4618      	mov	r0, r3
 8008200:	f001 ffd4 	bl	800a1ac <RCCEx_PLL2_Config>
 8008204:	4603      	mov	r3, r0
 8008206:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800820a:	e004      	b.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800820c:	2301      	movs	r3, #1
 800820e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008212:	e000      	b.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8008214:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008216:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800821a:	2b00      	cmp	r3, #0
 800821c:	d10a      	bne.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800821e:	4b5a      	ldr	r3, [pc, #360]	; (8008388 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008222:	f023 0103 	bic.w	r1, r3, #3
 8008226:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800822a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800822c:	4a56      	ldr	r2, [pc, #344]	; (8008388 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800822e:	430b      	orrs	r3, r1
 8008230:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008232:	e003      	b.n	800823c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008234:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008238:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800823c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008244:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8008248:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800824c:	2300      	movs	r3, #0
 800824e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008252:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8008256:	460b      	mov	r3, r1
 8008258:	4313      	orrs	r3, r2
 800825a:	f000 809f 	beq.w	800839c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800825e:	4b4b      	ldr	r3, [pc, #300]	; (800838c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4a4a      	ldr	r2, [pc, #296]	; (800838c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008264:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008268:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800826a:	f7fa ff2b 	bl	80030c4 <HAL_GetTick>
 800826e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008272:	e00b      	b.n	800828c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008274:	f7fa ff26 	bl	80030c4 <HAL_GetTick>
 8008278:	4602      	mov	r2, r0
 800827a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800827e:	1ad3      	subs	r3, r2, r3
 8008280:	2b64      	cmp	r3, #100	; 0x64
 8008282:	d903      	bls.n	800828c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8008284:	2303      	movs	r3, #3
 8008286:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800828a:	e005      	b.n	8008298 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800828c:	4b3f      	ldr	r3, [pc, #252]	; (800838c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008294:	2b00      	cmp	r3, #0
 8008296:	d0ed      	beq.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8008298:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800829c:	2b00      	cmp	r3, #0
 800829e:	d179      	bne.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80082a0:	4b39      	ldr	r3, [pc, #228]	; (8008388 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80082a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80082a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082a8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80082ac:	4053      	eors	r3, r2
 80082ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d015      	beq.n	80082e2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80082b6:	4b34      	ldr	r3, [pc, #208]	; (8008388 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80082b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082be:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80082c2:	4b31      	ldr	r3, [pc, #196]	; (8008388 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80082c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082c6:	4a30      	ldr	r2, [pc, #192]	; (8008388 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80082c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082cc:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80082ce:	4b2e      	ldr	r3, [pc, #184]	; (8008388 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80082d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082d2:	4a2d      	ldr	r2, [pc, #180]	; (8008388 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80082d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80082d8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80082da:	4a2b      	ldr	r2, [pc, #172]	; (8008388 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80082dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80082e0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80082e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80082ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082ee:	d118      	bne.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082f0:	f7fa fee8 	bl	80030c4 <HAL_GetTick>
 80082f4:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80082f8:	e00d      	b.n	8008316 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80082fa:	f7fa fee3 	bl	80030c4 <HAL_GetTick>
 80082fe:	4602      	mov	r2, r0
 8008300:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008304:	1ad2      	subs	r2, r2, r3
 8008306:	f241 3388 	movw	r3, #5000	; 0x1388
 800830a:	429a      	cmp	r2, r3
 800830c:	d903      	bls.n	8008316 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800830e:	2303      	movs	r3, #3
 8008310:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8008314:	e005      	b.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008316:	4b1c      	ldr	r3, [pc, #112]	; (8008388 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800831a:	f003 0302 	and.w	r3, r3, #2
 800831e:	2b00      	cmp	r3, #0
 8008320:	d0eb      	beq.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8008322:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008326:	2b00      	cmp	r3, #0
 8008328:	d129      	bne.n	800837e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800832a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800832e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008332:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008336:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800833a:	d10e      	bne.n	800835a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800833c:	4b12      	ldr	r3, [pc, #72]	; (8008388 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800833e:	691b      	ldr	r3, [r3, #16]
 8008340:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8008344:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008348:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800834c:	091a      	lsrs	r2, r3, #4
 800834e:	4b10      	ldr	r3, [pc, #64]	; (8008390 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8008350:	4013      	ands	r3, r2
 8008352:	4a0d      	ldr	r2, [pc, #52]	; (8008388 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008354:	430b      	orrs	r3, r1
 8008356:	6113      	str	r3, [r2, #16]
 8008358:	e005      	b.n	8008366 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800835a:	4b0b      	ldr	r3, [pc, #44]	; (8008388 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800835c:	691b      	ldr	r3, [r3, #16]
 800835e:	4a0a      	ldr	r2, [pc, #40]	; (8008388 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008360:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008364:	6113      	str	r3, [r2, #16]
 8008366:	4b08      	ldr	r3, [pc, #32]	; (8008388 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008368:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800836a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800836e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008372:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008376:	4a04      	ldr	r2, [pc, #16]	; (8008388 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008378:	430b      	orrs	r3, r1
 800837a:	6713      	str	r3, [r2, #112]	; 0x70
 800837c:	e00e      	b.n	800839c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800837e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008382:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8008386:	e009      	b.n	800839c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008388:	58024400 	.word	0x58024400
 800838c:	58024800 	.word	0x58024800
 8008390:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008394:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008398:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800839c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a4:	f002 0301 	and.w	r3, r2, #1
 80083a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80083ac:	2300      	movs	r3, #0
 80083ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80083b2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80083b6:	460b      	mov	r3, r1
 80083b8:	4313      	orrs	r3, r2
 80083ba:	f000 8089 	beq.w	80084d0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80083be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083c4:	2b28      	cmp	r3, #40	; 0x28
 80083c6:	d86b      	bhi.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80083c8:	a201      	add	r2, pc, #4	; (adr r2, 80083d0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80083ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083ce:	bf00      	nop
 80083d0:	080084a9 	.word	0x080084a9
 80083d4:	080084a1 	.word	0x080084a1
 80083d8:	080084a1 	.word	0x080084a1
 80083dc:	080084a1 	.word	0x080084a1
 80083e0:	080084a1 	.word	0x080084a1
 80083e4:	080084a1 	.word	0x080084a1
 80083e8:	080084a1 	.word	0x080084a1
 80083ec:	080084a1 	.word	0x080084a1
 80083f0:	08008475 	.word	0x08008475
 80083f4:	080084a1 	.word	0x080084a1
 80083f8:	080084a1 	.word	0x080084a1
 80083fc:	080084a1 	.word	0x080084a1
 8008400:	080084a1 	.word	0x080084a1
 8008404:	080084a1 	.word	0x080084a1
 8008408:	080084a1 	.word	0x080084a1
 800840c:	080084a1 	.word	0x080084a1
 8008410:	0800848b 	.word	0x0800848b
 8008414:	080084a1 	.word	0x080084a1
 8008418:	080084a1 	.word	0x080084a1
 800841c:	080084a1 	.word	0x080084a1
 8008420:	080084a1 	.word	0x080084a1
 8008424:	080084a1 	.word	0x080084a1
 8008428:	080084a1 	.word	0x080084a1
 800842c:	080084a1 	.word	0x080084a1
 8008430:	080084a9 	.word	0x080084a9
 8008434:	080084a1 	.word	0x080084a1
 8008438:	080084a1 	.word	0x080084a1
 800843c:	080084a1 	.word	0x080084a1
 8008440:	080084a1 	.word	0x080084a1
 8008444:	080084a1 	.word	0x080084a1
 8008448:	080084a1 	.word	0x080084a1
 800844c:	080084a1 	.word	0x080084a1
 8008450:	080084a9 	.word	0x080084a9
 8008454:	080084a1 	.word	0x080084a1
 8008458:	080084a1 	.word	0x080084a1
 800845c:	080084a1 	.word	0x080084a1
 8008460:	080084a1 	.word	0x080084a1
 8008464:	080084a1 	.word	0x080084a1
 8008468:	080084a1 	.word	0x080084a1
 800846c:	080084a1 	.word	0x080084a1
 8008470:	080084a9 	.word	0x080084a9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008474:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008478:	3308      	adds	r3, #8
 800847a:	2101      	movs	r1, #1
 800847c:	4618      	mov	r0, r3
 800847e:	f001 fe95 	bl	800a1ac <RCCEx_PLL2_Config>
 8008482:	4603      	mov	r3, r0
 8008484:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008488:	e00f      	b.n	80084aa <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800848a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800848e:	3328      	adds	r3, #40	; 0x28
 8008490:	2101      	movs	r1, #1
 8008492:	4618      	mov	r0, r3
 8008494:	f001 ff3c 	bl	800a310 <RCCEx_PLL3_Config>
 8008498:	4603      	mov	r3, r0
 800849a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800849e:	e004      	b.n	80084aa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80084a0:	2301      	movs	r3, #1
 80084a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80084a6:	e000      	b.n	80084aa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80084a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d10a      	bne.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80084b2:	4bbf      	ldr	r3, [pc, #764]	; (80087b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80084b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084b6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80084ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084c0:	4abb      	ldr	r2, [pc, #748]	; (80087b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80084c2:	430b      	orrs	r3, r1
 80084c4:	6553      	str	r3, [r2, #84]	; 0x54
 80084c6:	e003      	b.n	80084d0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80084cc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80084d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084d8:	f002 0302 	and.w	r3, r2, #2
 80084dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80084e0:	2300      	movs	r3, #0
 80084e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80084e6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80084ea:	460b      	mov	r3, r1
 80084ec:	4313      	orrs	r3, r2
 80084ee:	d041      	beq.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80084f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084f6:	2b05      	cmp	r3, #5
 80084f8:	d824      	bhi.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80084fa:	a201      	add	r2, pc, #4	; (adr r2, 8008500 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80084fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008500:	0800854d 	.word	0x0800854d
 8008504:	08008519 	.word	0x08008519
 8008508:	0800852f 	.word	0x0800852f
 800850c:	0800854d 	.word	0x0800854d
 8008510:	0800854d 	.word	0x0800854d
 8008514:	0800854d 	.word	0x0800854d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008518:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800851c:	3308      	adds	r3, #8
 800851e:	2101      	movs	r1, #1
 8008520:	4618      	mov	r0, r3
 8008522:	f001 fe43 	bl	800a1ac <RCCEx_PLL2_Config>
 8008526:	4603      	mov	r3, r0
 8008528:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800852c:	e00f      	b.n	800854e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800852e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008532:	3328      	adds	r3, #40	; 0x28
 8008534:	2101      	movs	r1, #1
 8008536:	4618      	mov	r0, r3
 8008538:	f001 feea 	bl	800a310 <RCCEx_PLL3_Config>
 800853c:	4603      	mov	r3, r0
 800853e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008542:	e004      	b.n	800854e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008544:	2301      	movs	r3, #1
 8008546:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800854a:	e000      	b.n	800854e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800854c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800854e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008552:	2b00      	cmp	r3, #0
 8008554:	d10a      	bne.n	800856c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008556:	4b96      	ldr	r3, [pc, #600]	; (80087b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800855a:	f023 0107 	bic.w	r1, r3, #7
 800855e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008562:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008564:	4a92      	ldr	r2, [pc, #584]	; (80087b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008566:	430b      	orrs	r3, r1
 8008568:	6553      	str	r3, [r2, #84]	; 0x54
 800856a:	e003      	b.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800856c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008570:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008574:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800857c:	f002 0304 	and.w	r3, r2, #4
 8008580:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008584:	2300      	movs	r3, #0
 8008586:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800858a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800858e:	460b      	mov	r3, r1
 8008590:	4313      	orrs	r3, r2
 8008592:	d044      	beq.n	800861e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008594:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008598:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800859c:	2b05      	cmp	r3, #5
 800859e:	d825      	bhi.n	80085ec <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80085a0:	a201      	add	r2, pc, #4	; (adr r2, 80085a8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80085a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085a6:	bf00      	nop
 80085a8:	080085f5 	.word	0x080085f5
 80085ac:	080085c1 	.word	0x080085c1
 80085b0:	080085d7 	.word	0x080085d7
 80085b4:	080085f5 	.word	0x080085f5
 80085b8:	080085f5 	.word	0x080085f5
 80085bc:	080085f5 	.word	0x080085f5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80085c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085c4:	3308      	adds	r3, #8
 80085c6:	2101      	movs	r1, #1
 80085c8:	4618      	mov	r0, r3
 80085ca:	f001 fdef 	bl	800a1ac <RCCEx_PLL2_Config>
 80085ce:	4603      	mov	r3, r0
 80085d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80085d4:	e00f      	b.n	80085f6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80085d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085da:	3328      	adds	r3, #40	; 0x28
 80085dc:	2101      	movs	r1, #1
 80085de:	4618      	mov	r0, r3
 80085e0:	f001 fe96 	bl	800a310 <RCCEx_PLL3_Config>
 80085e4:	4603      	mov	r3, r0
 80085e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80085ea:	e004      	b.n	80085f6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80085ec:	2301      	movs	r3, #1
 80085ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80085f2:	e000      	b.n	80085f6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80085f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d10b      	bne.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80085fe:	4b6c      	ldr	r3, [pc, #432]	; (80087b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008602:	f023 0107 	bic.w	r1, r3, #7
 8008606:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800860a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800860e:	4a68      	ldr	r2, [pc, #416]	; (80087b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008610:	430b      	orrs	r3, r1
 8008612:	6593      	str	r3, [r2, #88]	; 0x58
 8008614:	e003      	b.n	800861e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008616:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800861a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800861e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008626:	f002 0320 	and.w	r3, r2, #32
 800862a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800862e:	2300      	movs	r3, #0
 8008630:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008634:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008638:	460b      	mov	r3, r1
 800863a:	4313      	orrs	r3, r2
 800863c:	d055      	beq.n	80086ea <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800863e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008646:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800864a:	d033      	beq.n	80086b4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800864c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008650:	d82c      	bhi.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008652:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008656:	d02f      	beq.n	80086b8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8008658:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800865c:	d826      	bhi.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800865e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008662:	d02b      	beq.n	80086bc <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8008664:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008668:	d820      	bhi.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800866a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800866e:	d012      	beq.n	8008696 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008670:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008674:	d81a      	bhi.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008676:	2b00      	cmp	r3, #0
 8008678:	d022      	beq.n	80086c0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800867a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800867e:	d115      	bne.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008680:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008684:	3308      	adds	r3, #8
 8008686:	2100      	movs	r1, #0
 8008688:	4618      	mov	r0, r3
 800868a:	f001 fd8f 	bl	800a1ac <RCCEx_PLL2_Config>
 800868e:	4603      	mov	r3, r0
 8008690:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008694:	e015      	b.n	80086c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008696:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800869a:	3328      	adds	r3, #40	; 0x28
 800869c:	2102      	movs	r1, #2
 800869e:	4618      	mov	r0, r3
 80086a0:	f001 fe36 	bl	800a310 <RCCEx_PLL3_Config>
 80086a4:	4603      	mov	r3, r0
 80086a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80086aa:	e00a      	b.n	80086c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80086ac:	2301      	movs	r3, #1
 80086ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80086b2:	e006      	b.n	80086c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80086b4:	bf00      	nop
 80086b6:	e004      	b.n	80086c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80086b8:	bf00      	nop
 80086ba:	e002      	b.n	80086c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80086bc:	bf00      	nop
 80086be:	e000      	b.n	80086c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80086c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80086c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d10b      	bne.n	80086e2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80086ca:	4b39      	ldr	r3, [pc, #228]	; (80087b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80086cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086ce:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80086d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086da:	4a35      	ldr	r2, [pc, #212]	; (80087b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80086dc:	430b      	orrs	r3, r1
 80086de:	6553      	str	r3, [r2, #84]	; 0x54
 80086e0:	e003      	b.n	80086ea <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80086e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80086ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80086f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80086fa:	2300      	movs	r3, #0
 80086fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008700:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8008704:	460b      	mov	r3, r1
 8008706:	4313      	orrs	r3, r2
 8008708:	d058      	beq.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800870a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800870e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008712:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008716:	d033      	beq.n	8008780 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8008718:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800871c:	d82c      	bhi.n	8008778 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800871e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008722:	d02f      	beq.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8008724:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008728:	d826      	bhi.n	8008778 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800872a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800872e:	d02b      	beq.n	8008788 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8008730:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008734:	d820      	bhi.n	8008778 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008736:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800873a:	d012      	beq.n	8008762 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800873c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008740:	d81a      	bhi.n	8008778 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008742:	2b00      	cmp	r3, #0
 8008744:	d022      	beq.n	800878c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008746:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800874a:	d115      	bne.n	8008778 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800874c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008750:	3308      	adds	r3, #8
 8008752:	2100      	movs	r1, #0
 8008754:	4618      	mov	r0, r3
 8008756:	f001 fd29 	bl	800a1ac <RCCEx_PLL2_Config>
 800875a:	4603      	mov	r3, r0
 800875c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008760:	e015      	b.n	800878e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008762:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008766:	3328      	adds	r3, #40	; 0x28
 8008768:	2102      	movs	r1, #2
 800876a:	4618      	mov	r0, r3
 800876c:	f001 fdd0 	bl	800a310 <RCCEx_PLL3_Config>
 8008770:	4603      	mov	r3, r0
 8008772:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008776:	e00a      	b.n	800878e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008778:	2301      	movs	r3, #1
 800877a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800877e:	e006      	b.n	800878e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008780:	bf00      	nop
 8008782:	e004      	b.n	800878e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008784:	bf00      	nop
 8008786:	e002      	b.n	800878e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008788:	bf00      	nop
 800878a:	e000      	b.n	800878e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800878c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800878e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008792:	2b00      	cmp	r3, #0
 8008794:	d10e      	bne.n	80087b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008796:	4b06      	ldr	r3, [pc, #24]	; (80087b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800879a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800879e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80087a6:	4a02      	ldr	r2, [pc, #8]	; (80087b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80087a8:	430b      	orrs	r3, r1
 80087aa:	6593      	str	r3, [r2, #88]	; 0x58
 80087ac:	e006      	b.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80087ae:	bf00      	nop
 80087b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80087b8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80087bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80087c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80087cc:	2300      	movs	r3, #0
 80087ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80087d2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80087d6:	460b      	mov	r3, r1
 80087d8:	4313      	orrs	r3, r2
 80087da:	d055      	beq.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80087dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80087e4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80087e8:	d033      	beq.n	8008852 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80087ea:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80087ee:	d82c      	bhi.n	800884a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80087f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087f4:	d02f      	beq.n	8008856 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80087f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087fa:	d826      	bhi.n	800884a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80087fc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008800:	d02b      	beq.n	800885a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8008802:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008806:	d820      	bhi.n	800884a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008808:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800880c:	d012      	beq.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800880e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008812:	d81a      	bhi.n	800884a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008814:	2b00      	cmp	r3, #0
 8008816:	d022      	beq.n	800885e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8008818:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800881c:	d115      	bne.n	800884a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800881e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008822:	3308      	adds	r3, #8
 8008824:	2100      	movs	r1, #0
 8008826:	4618      	mov	r0, r3
 8008828:	f001 fcc0 	bl	800a1ac <RCCEx_PLL2_Config>
 800882c:	4603      	mov	r3, r0
 800882e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008832:	e015      	b.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008834:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008838:	3328      	adds	r3, #40	; 0x28
 800883a:	2102      	movs	r1, #2
 800883c:	4618      	mov	r0, r3
 800883e:	f001 fd67 	bl	800a310 <RCCEx_PLL3_Config>
 8008842:	4603      	mov	r3, r0
 8008844:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008848:	e00a      	b.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800884a:	2301      	movs	r3, #1
 800884c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008850:	e006      	b.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008852:	bf00      	nop
 8008854:	e004      	b.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008856:	bf00      	nop
 8008858:	e002      	b.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800885a:	bf00      	nop
 800885c:	e000      	b.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800885e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008860:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008864:	2b00      	cmp	r3, #0
 8008866:	d10b      	bne.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008868:	4ba1      	ldr	r3, [pc, #644]	; (8008af0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800886a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800886c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8008870:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008874:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008878:	4a9d      	ldr	r2, [pc, #628]	; (8008af0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800887a:	430b      	orrs	r3, r1
 800887c:	6593      	str	r3, [r2, #88]	; 0x58
 800887e:	e003      	b.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008880:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008884:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008888:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800888c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008890:	f002 0308 	and.w	r3, r2, #8
 8008894:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008898:	2300      	movs	r3, #0
 800889a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800889e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80088a2:	460b      	mov	r3, r1
 80088a4:	4313      	orrs	r3, r2
 80088a6:	d01e      	beq.n	80088e6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80088a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088b4:	d10c      	bne.n	80088d0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80088b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088ba:	3328      	adds	r3, #40	; 0x28
 80088bc:	2102      	movs	r1, #2
 80088be:	4618      	mov	r0, r3
 80088c0:	f001 fd26 	bl	800a310 <RCCEx_PLL3_Config>
 80088c4:	4603      	mov	r3, r0
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d002      	beq.n	80088d0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80088ca:	2301      	movs	r3, #1
 80088cc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80088d0:	4b87      	ldr	r3, [pc, #540]	; (8008af0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80088d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088d4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80088d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088e0:	4a83      	ldr	r2, [pc, #524]	; (8008af0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80088e2:	430b      	orrs	r3, r1
 80088e4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80088e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ee:	f002 0310 	and.w	r3, r2, #16
 80088f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80088f6:	2300      	movs	r3, #0
 80088f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80088fc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8008900:	460b      	mov	r3, r1
 8008902:	4313      	orrs	r3, r2
 8008904:	d01e      	beq.n	8008944 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008906:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800890a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800890e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008912:	d10c      	bne.n	800892e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008914:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008918:	3328      	adds	r3, #40	; 0x28
 800891a:	2102      	movs	r1, #2
 800891c:	4618      	mov	r0, r3
 800891e:	f001 fcf7 	bl	800a310 <RCCEx_PLL3_Config>
 8008922:	4603      	mov	r3, r0
 8008924:	2b00      	cmp	r3, #0
 8008926:	d002      	beq.n	800892e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8008928:	2301      	movs	r3, #1
 800892a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800892e:	4b70      	ldr	r3, [pc, #448]	; (8008af0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008932:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008936:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800893a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800893e:	4a6c      	ldr	r2, [pc, #432]	; (8008af0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008940:	430b      	orrs	r3, r1
 8008942:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008944:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800894c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8008950:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008954:	2300      	movs	r3, #0
 8008956:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800895a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800895e:	460b      	mov	r3, r1
 8008960:	4313      	orrs	r3, r2
 8008962:	d03e      	beq.n	80089e2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008964:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008968:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800896c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008970:	d022      	beq.n	80089b8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8008972:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008976:	d81b      	bhi.n	80089b0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8008978:	2b00      	cmp	r3, #0
 800897a:	d003      	beq.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800897c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008980:	d00b      	beq.n	800899a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8008982:	e015      	b.n	80089b0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008984:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008988:	3308      	adds	r3, #8
 800898a:	2100      	movs	r1, #0
 800898c:	4618      	mov	r0, r3
 800898e:	f001 fc0d 	bl	800a1ac <RCCEx_PLL2_Config>
 8008992:	4603      	mov	r3, r0
 8008994:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008998:	e00f      	b.n	80089ba <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800899a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800899e:	3328      	adds	r3, #40	; 0x28
 80089a0:	2102      	movs	r1, #2
 80089a2:	4618      	mov	r0, r3
 80089a4:	f001 fcb4 	bl	800a310 <RCCEx_PLL3_Config>
 80089a8:	4603      	mov	r3, r0
 80089aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80089ae:	e004      	b.n	80089ba <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80089b0:	2301      	movs	r3, #1
 80089b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80089b6:	e000      	b.n	80089ba <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80089b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d10b      	bne.n	80089da <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80089c2:	4b4b      	ldr	r3, [pc, #300]	; (8008af0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80089c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089c6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80089ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80089d2:	4a47      	ldr	r2, [pc, #284]	; (8008af0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80089d4:	430b      	orrs	r3, r1
 80089d6:	6593      	str	r3, [r2, #88]	; 0x58
 80089d8:	e003      	b.n	80089e2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80089de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80089e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ea:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80089ee:	67bb      	str	r3, [r7, #120]	; 0x78
 80089f0:	2300      	movs	r3, #0
 80089f2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80089f4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80089f8:	460b      	mov	r3, r1
 80089fa:	4313      	orrs	r3, r2
 80089fc:	d03b      	beq.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80089fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a06:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008a0a:	d01f      	beq.n	8008a4c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008a0c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008a10:	d818      	bhi.n	8008a44 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8008a12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a16:	d003      	beq.n	8008a20 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8008a18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008a1c:	d007      	beq.n	8008a2e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8008a1e:	e011      	b.n	8008a44 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a20:	4b33      	ldr	r3, [pc, #204]	; (8008af0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a24:	4a32      	ldr	r2, [pc, #200]	; (8008af0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008a26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a2a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008a2c:	e00f      	b.n	8008a4e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a32:	3328      	adds	r3, #40	; 0x28
 8008a34:	2101      	movs	r1, #1
 8008a36:	4618      	mov	r0, r3
 8008a38:	f001 fc6a 	bl	800a310 <RCCEx_PLL3_Config>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8008a42:	e004      	b.n	8008a4e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a44:	2301      	movs	r3, #1
 8008a46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008a4a:	e000      	b.n	8008a4e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8008a4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d10b      	bne.n	8008a6e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008a56:	4b26      	ldr	r3, [pc, #152]	; (8008af0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a5a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a66:	4a22      	ldr	r2, [pc, #136]	; (8008af0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008a68:	430b      	orrs	r3, r1
 8008a6a:	6553      	str	r3, [r2, #84]	; 0x54
 8008a6c:	e003      	b.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a72:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a7e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8008a82:	673b      	str	r3, [r7, #112]	; 0x70
 8008a84:	2300      	movs	r3, #0
 8008a86:	677b      	str	r3, [r7, #116]	; 0x74
 8008a88:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8008a8c:	460b      	mov	r3, r1
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	d034      	beq.n	8008afc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008a92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d003      	beq.n	8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008aa0:	d007      	beq.n	8008ab2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8008aa2:	e011      	b.n	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008aa4:	4b12      	ldr	r3, [pc, #72]	; (8008af0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aa8:	4a11      	ldr	r2, [pc, #68]	; (8008af0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008aaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008aae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008ab0:	e00e      	b.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ab6:	3308      	adds	r3, #8
 8008ab8:	2102      	movs	r1, #2
 8008aba:	4618      	mov	r0, r3
 8008abc:	f001 fb76 	bl	800a1ac <RCCEx_PLL2_Config>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008ac6:	e003      	b.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8008ac8:	2301      	movs	r3, #1
 8008aca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008ace:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ad0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d10d      	bne.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008ad8:	4b05      	ldr	r3, [pc, #20]	; (8008af0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008ada:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008adc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ae6:	4a02      	ldr	r2, [pc, #8]	; (8008af0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008ae8:	430b      	orrs	r3, r1
 8008aea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008aec:	e006      	b.n	8008afc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8008aee:	bf00      	nop
 8008af0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008af4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008af8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b04:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8008b08:	66bb      	str	r3, [r7, #104]	; 0x68
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008b0e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8008b12:	460b      	mov	r3, r1
 8008b14:	4313      	orrs	r3, r2
 8008b16:	d00c      	beq.n	8008b32 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b1c:	3328      	adds	r3, #40	; 0x28
 8008b1e:	2102      	movs	r1, #2
 8008b20:	4618      	mov	r0, r3
 8008b22:	f001 fbf5 	bl	800a310 <RCCEx_PLL3_Config>
 8008b26:	4603      	mov	r3, r0
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d002      	beq.n	8008b32 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b3a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8008b3e:	663b      	str	r3, [r7, #96]	; 0x60
 8008b40:	2300      	movs	r3, #0
 8008b42:	667b      	str	r3, [r7, #100]	; 0x64
 8008b44:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8008b48:	460b      	mov	r3, r1
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	d038      	beq.n	8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b5a:	d018      	beq.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008b5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b60:	d811      	bhi.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008b62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b66:	d014      	beq.n	8008b92 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008b68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b6c:	d80b      	bhi.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d011      	beq.n	8008b96 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8008b72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b76:	d106      	bne.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b78:	4bc3      	ldr	r3, [pc, #780]	; (8008e88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b7c:	4ac2      	ldr	r2, [pc, #776]	; (8008e88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008b84:	e008      	b.n	8008b98 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b86:	2301      	movs	r3, #1
 8008b88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008b8c:	e004      	b.n	8008b98 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008b8e:	bf00      	nop
 8008b90:	e002      	b.n	8008b98 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008b92:	bf00      	nop
 8008b94:	e000      	b.n	8008b98 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008b96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b98:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d10b      	bne.n	8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008ba0:	4bb9      	ldr	r3, [pc, #740]	; (8008e88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ba4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008bb0:	4ab5      	ldr	r2, [pc, #724]	; (8008e88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008bb2:	430b      	orrs	r3, r1
 8008bb4:	6553      	str	r3, [r2, #84]	; 0x54
 8008bb6:	e003      	b.n	8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bb8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008bbc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8008bcc:	65bb      	str	r3, [r7, #88]	; 0x58
 8008bce:	2300      	movs	r3, #0
 8008bd0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008bd2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8008bd6:	460b      	mov	r3, r1
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	d009      	beq.n	8008bf0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008bdc:	4baa      	ldr	r3, [pc, #680]	; (8008e88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008bde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008be0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008be8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bea:	4aa7      	ldr	r2, [pc, #668]	; (8008e88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008bec:	430b      	orrs	r3, r1
 8008bee:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bf8:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8008bfc:	653b      	str	r3, [r7, #80]	; 0x50
 8008bfe:	2300      	movs	r3, #0
 8008c00:	657b      	str	r3, [r7, #84]	; 0x54
 8008c02:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8008c06:	460b      	mov	r3, r1
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	d00a      	beq.n	8008c22 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008c0c:	4b9e      	ldr	r3, [pc, #632]	; (8008e88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c0e:	691b      	ldr	r3, [r3, #16]
 8008c10:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8008c14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c18:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008c1c:	4a9a      	ldr	r2, [pc, #616]	; (8008e88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c1e:	430b      	orrs	r3, r1
 8008c20:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c2a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8008c2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008c30:	2300      	movs	r3, #0
 8008c32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c34:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8008c38:	460b      	mov	r3, r1
 8008c3a:	4313      	orrs	r3, r2
 8008c3c:	d009      	beq.n	8008c52 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008c3e:	4b92      	ldr	r3, [pc, #584]	; (8008e88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c42:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8008c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c4c:	4a8e      	ldr	r2, [pc, #568]	; (8008e88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c4e:	430b      	orrs	r3, r1
 8008c50:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c5a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8008c5e:	643b      	str	r3, [r7, #64]	; 0x40
 8008c60:	2300      	movs	r3, #0
 8008c62:	647b      	str	r3, [r7, #68]	; 0x44
 8008c64:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8008c68:	460b      	mov	r3, r1
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	d00e      	beq.n	8008c8c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008c6e:	4b86      	ldr	r3, [pc, #536]	; (8008e88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c70:	691b      	ldr	r3, [r3, #16]
 8008c72:	4a85      	ldr	r2, [pc, #532]	; (8008e88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c74:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008c78:	6113      	str	r3, [r2, #16]
 8008c7a:	4b83      	ldr	r3, [pc, #524]	; (8008e88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c7c:	6919      	ldr	r1, [r3, #16]
 8008c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c82:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008c86:	4a80      	ldr	r2, [pc, #512]	; (8008e88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c88:	430b      	orrs	r3, r1
 8008c8a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c94:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8008c98:	63bb      	str	r3, [r7, #56]	; 0x38
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c9e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8008ca2:	460b      	mov	r3, r1
 8008ca4:	4313      	orrs	r3, r2
 8008ca6:	d009      	beq.n	8008cbc <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008ca8:	4b77      	ldr	r3, [pc, #476]	; (8008e88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cac:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8008cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cb6:	4a74      	ldr	r2, [pc, #464]	; (8008e88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008cb8:	430b      	orrs	r3, r1
 8008cba:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008cbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cc4:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8008cc8:	633b      	str	r3, [r7, #48]	; 0x30
 8008cca:	2300      	movs	r3, #0
 8008ccc:	637b      	str	r3, [r7, #52]	; 0x34
 8008cce:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8008cd2:	460b      	mov	r3, r1
 8008cd4:	4313      	orrs	r3, r2
 8008cd6:	d00a      	beq.n	8008cee <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008cd8:	4b6b      	ldr	r3, [pc, #428]	; (8008e88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cdc:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8008ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ce4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ce8:	4a67      	ldr	r2, [pc, #412]	; (8008e88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008cea:	430b      	orrs	r3, r1
 8008cec:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf6:	2100      	movs	r1, #0
 8008cf8:	62b9      	str	r1, [r7, #40]	; 0x28
 8008cfa:	f003 0301 	and.w	r3, r3, #1
 8008cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d00:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8008d04:	460b      	mov	r3, r1
 8008d06:	4313      	orrs	r3, r2
 8008d08:	d011      	beq.n	8008d2e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d0e:	3308      	adds	r3, #8
 8008d10:	2100      	movs	r1, #0
 8008d12:	4618      	mov	r0, r3
 8008d14:	f001 fa4a 	bl	800a1ac <RCCEx_PLL2_Config>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008d1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d003      	beq.n	8008d2e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d2a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d36:	2100      	movs	r1, #0
 8008d38:	6239      	str	r1, [r7, #32]
 8008d3a:	f003 0302 	and.w	r3, r3, #2
 8008d3e:	627b      	str	r3, [r7, #36]	; 0x24
 8008d40:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008d44:	460b      	mov	r3, r1
 8008d46:	4313      	orrs	r3, r2
 8008d48:	d011      	beq.n	8008d6e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d4e:	3308      	adds	r3, #8
 8008d50:	2101      	movs	r1, #1
 8008d52:	4618      	mov	r0, r3
 8008d54:	f001 fa2a 	bl	800a1ac <RCCEx_PLL2_Config>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008d5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d003      	beq.n	8008d6e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d6a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d76:	2100      	movs	r1, #0
 8008d78:	61b9      	str	r1, [r7, #24]
 8008d7a:	f003 0304 	and.w	r3, r3, #4
 8008d7e:	61fb      	str	r3, [r7, #28]
 8008d80:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008d84:	460b      	mov	r3, r1
 8008d86:	4313      	orrs	r3, r2
 8008d88:	d011      	beq.n	8008dae <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d8e:	3308      	adds	r3, #8
 8008d90:	2102      	movs	r1, #2
 8008d92:	4618      	mov	r0, r3
 8008d94:	f001 fa0a 	bl	800a1ac <RCCEx_PLL2_Config>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008d9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d003      	beq.n	8008dae <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008da6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008daa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db6:	2100      	movs	r1, #0
 8008db8:	6139      	str	r1, [r7, #16]
 8008dba:	f003 0308 	and.w	r3, r3, #8
 8008dbe:	617b      	str	r3, [r7, #20]
 8008dc0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008dc4:	460b      	mov	r3, r1
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	d011      	beq.n	8008dee <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008dce:	3328      	adds	r3, #40	; 0x28
 8008dd0:	2100      	movs	r1, #0
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f001 fa9c 	bl	800a310 <RCCEx_PLL3_Config>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8008dde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d003      	beq.n	8008dee <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008de6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008dea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df6:	2100      	movs	r1, #0
 8008df8:	60b9      	str	r1, [r7, #8]
 8008dfa:	f003 0310 	and.w	r3, r3, #16
 8008dfe:	60fb      	str	r3, [r7, #12]
 8008e00:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008e04:	460b      	mov	r3, r1
 8008e06:	4313      	orrs	r3, r2
 8008e08:	d011      	beq.n	8008e2e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e0e:	3328      	adds	r3, #40	; 0x28
 8008e10:	2101      	movs	r1, #1
 8008e12:	4618      	mov	r0, r3
 8008e14:	f001 fa7c 	bl	800a310 <RCCEx_PLL3_Config>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008e1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d003      	beq.n	8008e2e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e2a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e36:	2100      	movs	r1, #0
 8008e38:	6039      	str	r1, [r7, #0]
 8008e3a:	f003 0320 	and.w	r3, r3, #32
 8008e3e:	607b      	str	r3, [r7, #4]
 8008e40:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008e44:	460b      	mov	r3, r1
 8008e46:	4313      	orrs	r3, r2
 8008e48:	d011      	beq.n	8008e6e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e4e:	3328      	adds	r3, #40	; 0x28
 8008e50:	2102      	movs	r1, #2
 8008e52:	4618      	mov	r0, r3
 8008e54:	f001 fa5c 	bl	800a310 <RCCEx_PLL3_Config>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008e5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d003      	beq.n	8008e6e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e6a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8008e6e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d101      	bne.n	8008e7a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8008e76:	2300      	movs	r3, #0
 8008e78:	e000      	b.n	8008e7c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008e7a:	2301      	movs	r3, #1
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8008e82:	46bd      	mov	sp, r7
 8008e84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008e88:	58024400 	.word	0x58024400

08008e8c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b090      	sub	sp, #64	; 0x40
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008e96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e9a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8008e9e:	430b      	orrs	r3, r1
 8008ea0:	f040 8094 	bne.w	8008fcc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008ea4:	4b9e      	ldr	r3, [pc, #632]	; (8009120 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ea6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ea8:	f003 0307 	and.w	r3, r3, #7
 8008eac:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb0:	2b04      	cmp	r3, #4
 8008eb2:	f200 8087 	bhi.w	8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008eb6:	a201      	add	r2, pc, #4	; (adr r2, 8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ebc:	08008ed1 	.word	0x08008ed1
 8008ec0:	08008ef9 	.word	0x08008ef9
 8008ec4:	08008f21 	.word	0x08008f21
 8008ec8:	08008fbd 	.word	0x08008fbd
 8008ecc:	08008f49 	.word	0x08008f49
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008ed0:	4b93      	ldr	r3, [pc, #588]	; (8009120 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ed8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008edc:	d108      	bne.n	8008ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008ede:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f001 f810 	bl	8009f08 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008eec:	f000 bd45 	b.w	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ef4:	f000 bd41 	b.w	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008ef8:	4b89      	ldr	r3, [pc, #548]	; (8009120 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008f04:	d108      	bne.n	8008f18 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f06:	f107 0318 	add.w	r3, r7, #24
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f000 fd54 	bl	80099b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008f10:	69bb      	ldr	r3, [r7, #24]
 8008f12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f14:	f000 bd31 	b.w	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f1c:	f000 bd2d 	b.w	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008f20:	4b7f      	ldr	r3, [pc, #508]	; (8009120 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f2c:	d108      	bne.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f2e:	f107 030c 	add.w	r3, r7, #12
 8008f32:	4618      	mov	r0, r3
 8008f34:	f000 fe94 	bl	8009c60 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f3c:	f000 bd1d 	b.w	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f40:	2300      	movs	r3, #0
 8008f42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f44:	f000 bd19 	b.w	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008f48:	4b75      	ldr	r3, [pc, #468]	; (8009120 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f4c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008f50:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008f52:	4b73      	ldr	r3, [pc, #460]	; (8009120 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f003 0304 	and.w	r3, r3, #4
 8008f5a:	2b04      	cmp	r3, #4
 8008f5c:	d10c      	bne.n	8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d109      	bne.n	8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008f64:	4b6e      	ldr	r3, [pc, #440]	; (8009120 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	08db      	lsrs	r3, r3, #3
 8008f6a:	f003 0303 	and.w	r3, r3, #3
 8008f6e:	4a6d      	ldr	r2, [pc, #436]	; (8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008f70:	fa22 f303 	lsr.w	r3, r2, r3
 8008f74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f76:	e01f      	b.n	8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008f78:	4b69      	ldr	r3, [pc, #420]	; (8009120 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f84:	d106      	bne.n	8008f94 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8008f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f8c:	d102      	bne.n	8008f94 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008f8e:	4b66      	ldr	r3, [pc, #408]	; (8009128 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008f90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f92:	e011      	b.n	8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008f94:	4b62      	ldr	r3, [pc, #392]	; (8009120 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008fa0:	d106      	bne.n	8008fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fa4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fa8:	d102      	bne.n	8008fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008faa:	4b60      	ldr	r3, [pc, #384]	; (800912c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008fac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fae:	e003      	b.n	8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008fb4:	f000 bce1 	b.w	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008fb8:	f000 bcdf 	b.w	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008fbc:	4b5c      	ldr	r3, [pc, #368]	; (8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008fc0:	f000 bcdb 	b.w	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008fc8:	f000 bcd7 	b.w	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008fcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fd0:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8008fd4:	430b      	orrs	r3, r1
 8008fd6:	f040 80ad 	bne.w	8009134 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8008fda:	4b51      	ldr	r3, [pc, #324]	; (8009120 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008fdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fde:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8008fe2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fea:	d056      	beq.n	800909a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8008fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ff2:	f200 8090 	bhi.w	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff8:	2bc0      	cmp	r3, #192	; 0xc0
 8008ffa:	f000 8088 	beq.w	800910e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8008ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009000:	2bc0      	cmp	r3, #192	; 0xc0
 8009002:	f200 8088 	bhi.w	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009008:	2b80      	cmp	r3, #128	; 0x80
 800900a:	d032      	beq.n	8009072 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800900c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800900e:	2b80      	cmp	r3, #128	; 0x80
 8009010:	f200 8081 	bhi.w	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009016:	2b00      	cmp	r3, #0
 8009018:	d003      	beq.n	8009022 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800901a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800901c:	2b40      	cmp	r3, #64	; 0x40
 800901e:	d014      	beq.n	800904a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8009020:	e079      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009022:	4b3f      	ldr	r3, [pc, #252]	; (8009120 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800902a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800902e:	d108      	bne.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009030:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009034:	4618      	mov	r0, r3
 8009036:	f000 ff67 	bl	8009f08 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800903a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800903c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800903e:	f000 bc9c 	b.w	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009042:	2300      	movs	r3, #0
 8009044:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009046:	f000 bc98 	b.w	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800904a:	4b35      	ldr	r3, [pc, #212]	; (8009120 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009052:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009056:	d108      	bne.n	800906a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009058:	f107 0318 	add.w	r3, r7, #24
 800905c:	4618      	mov	r0, r3
 800905e:	f000 fcab 	bl	80099b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009062:	69bb      	ldr	r3, [r7, #24]
 8009064:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009066:	f000 bc88 	b.w	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800906a:	2300      	movs	r3, #0
 800906c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800906e:	f000 bc84 	b.w	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009072:	4b2b      	ldr	r3, [pc, #172]	; (8009120 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800907a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800907e:	d108      	bne.n	8009092 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009080:	f107 030c 	add.w	r3, r7, #12
 8009084:	4618      	mov	r0, r3
 8009086:	f000 fdeb 	bl	8009c60 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800908e:	f000 bc74 	b.w	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009092:	2300      	movs	r3, #0
 8009094:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009096:	f000 bc70 	b.w	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800909a:	4b21      	ldr	r3, [pc, #132]	; (8009120 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800909c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800909e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80090a2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80090a4:	4b1e      	ldr	r3, [pc, #120]	; (8009120 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f003 0304 	and.w	r3, r3, #4
 80090ac:	2b04      	cmp	r3, #4
 80090ae:	d10c      	bne.n	80090ca <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80090b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d109      	bne.n	80090ca <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80090b6:	4b1a      	ldr	r3, [pc, #104]	; (8009120 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	08db      	lsrs	r3, r3, #3
 80090bc:	f003 0303 	and.w	r3, r3, #3
 80090c0:	4a18      	ldr	r2, [pc, #96]	; (8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80090c2:	fa22 f303 	lsr.w	r3, r2, r3
 80090c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090c8:	e01f      	b.n	800910a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80090ca:	4b15      	ldr	r3, [pc, #84]	; (8009120 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090d6:	d106      	bne.n	80090e6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80090d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80090de:	d102      	bne.n	80090e6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80090e0:	4b11      	ldr	r3, [pc, #68]	; (8009128 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80090e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090e4:	e011      	b.n	800910a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80090e6:	4b0e      	ldr	r3, [pc, #56]	; (8009120 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80090f2:	d106      	bne.n	8009102 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80090f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090fa:	d102      	bne.n	8009102 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80090fc:	4b0b      	ldr	r3, [pc, #44]	; (800912c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80090fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009100:	e003      	b.n	800910a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009102:	2300      	movs	r3, #0
 8009104:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009106:	f000 bc38 	b.w	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800910a:	f000 bc36 	b.w	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800910e:	4b08      	ldr	r3, [pc, #32]	; (8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009110:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009112:	f000 bc32 	b.w	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009116:	2300      	movs	r3, #0
 8009118:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800911a:	f000 bc2e 	b.w	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800911e:	bf00      	nop
 8009120:	58024400 	.word	0x58024400
 8009124:	03d09000 	.word	0x03d09000
 8009128:	003d0900 	.word	0x003d0900
 800912c:	017d7840 	.word	0x017d7840
 8009130:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009134:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009138:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800913c:	430b      	orrs	r3, r1
 800913e:	f040 809c 	bne.w	800927a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8009142:	4b9e      	ldr	r3, [pc, #632]	; (80093bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009146:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800914a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800914c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800914e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009152:	d054      	beq.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8009154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009156:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800915a:	f200 808b 	bhi.w	8009274 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800915e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009160:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009164:	f000 8083 	beq.w	800926e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8009168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800916a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800916e:	f200 8081 	bhi.w	8009274 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009174:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009178:	d02f      	beq.n	80091da <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800917a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800917c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009180:	d878      	bhi.n	8009274 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009184:	2b00      	cmp	r3, #0
 8009186:	d004      	beq.n	8009192 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8009188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800918a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800918e:	d012      	beq.n	80091b6 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8009190:	e070      	b.n	8009274 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009192:	4b8a      	ldr	r3, [pc, #552]	; (80093bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800919a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800919e:	d107      	bne.n	80091b0 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80091a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80091a4:	4618      	mov	r0, r3
 80091a6:	f000 feaf 	bl	8009f08 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80091aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091ae:	e3e4      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80091b0:	2300      	movs	r3, #0
 80091b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091b4:	e3e1      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80091b6:	4b81      	ldr	r3, [pc, #516]	; (80093bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80091be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80091c2:	d107      	bne.n	80091d4 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091c4:	f107 0318 	add.w	r3, r7, #24
 80091c8:	4618      	mov	r0, r3
 80091ca:	f000 fbf5 	bl	80099b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80091ce:	69bb      	ldr	r3, [r7, #24]
 80091d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091d2:	e3d2      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80091d4:	2300      	movs	r3, #0
 80091d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091d8:	e3cf      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80091da:	4b78      	ldr	r3, [pc, #480]	; (80093bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80091e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091e6:	d107      	bne.n	80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091e8:	f107 030c 	add.w	r3, r7, #12
 80091ec:	4618      	mov	r0, r3
 80091ee:	f000 fd37 	bl	8009c60 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091f6:	e3c0      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80091f8:	2300      	movs	r3, #0
 80091fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091fc:	e3bd      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80091fe:	4b6f      	ldr	r3, [pc, #444]	; (80093bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009202:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009206:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009208:	4b6c      	ldr	r3, [pc, #432]	; (80093bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f003 0304 	and.w	r3, r3, #4
 8009210:	2b04      	cmp	r3, #4
 8009212:	d10c      	bne.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8009214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009216:	2b00      	cmp	r3, #0
 8009218:	d109      	bne.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800921a:	4b68      	ldr	r3, [pc, #416]	; (80093bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	08db      	lsrs	r3, r3, #3
 8009220:	f003 0303 	and.w	r3, r3, #3
 8009224:	4a66      	ldr	r2, [pc, #408]	; (80093c0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009226:	fa22 f303 	lsr.w	r3, r2, r3
 800922a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800922c:	e01e      	b.n	800926c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800922e:	4b63      	ldr	r3, [pc, #396]	; (80093bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009236:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800923a:	d106      	bne.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800923c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800923e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009242:	d102      	bne.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009244:	4b5f      	ldr	r3, [pc, #380]	; (80093c4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8009246:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009248:	e010      	b.n	800926c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800924a:	4b5c      	ldr	r3, [pc, #368]	; (80093bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009252:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009256:	d106      	bne.n	8009266 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8009258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800925a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800925e:	d102      	bne.n	8009266 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009260:	4b59      	ldr	r3, [pc, #356]	; (80093c8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8009262:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009264:	e002      	b.n	800926c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009266:	2300      	movs	r3, #0
 8009268:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800926a:	e386      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800926c:	e385      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800926e:	4b57      	ldr	r3, [pc, #348]	; (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009270:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009272:	e382      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009274:	2300      	movs	r3, #0
 8009276:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009278:	e37f      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800927a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800927e:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8009282:	430b      	orrs	r3, r1
 8009284:	f040 80a7 	bne.w	80093d6 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8009288:	4b4c      	ldr	r3, [pc, #304]	; (80093bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800928a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800928c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8009290:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8009292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009294:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009298:	d055      	beq.n	8009346 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800929a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800929c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80092a0:	f200 8096 	bhi.w	80093d0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80092a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80092aa:	f000 8084 	beq.w	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80092ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092b0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80092b4:	f200 808c 	bhi.w	80093d0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80092b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80092be:	d030      	beq.n	8009322 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80092c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80092c6:	f200 8083 	bhi.w	80093d0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80092ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d004      	beq.n	80092da <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80092d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80092d6:	d012      	beq.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80092d8:	e07a      	b.n	80093d0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80092da:	4b38      	ldr	r3, [pc, #224]	; (80093bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80092e6:	d107      	bne.n	80092f8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80092e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80092ec:	4618      	mov	r0, r3
 80092ee:	f000 fe0b 	bl	8009f08 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80092f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092f6:	e340      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80092f8:	2300      	movs	r3, #0
 80092fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092fc:	e33d      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80092fe:	4b2f      	ldr	r3, [pc, #188]	; (80093bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009306:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800930a:	d107      	bne.n	800931c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800930c:	f107 0318 	add.w	r3, r7, #24
 8009310:	4618      	mov	r0, r3
 8009312:	f000 fb51 	bl	80099b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009316:	69bb      	ldr	r3, [r7, #24]
 8009318:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800931a:	e32e      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800931c:	2300      	movs	r3, #0
 800931e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009320:	e32b      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009322:	4b26      	ldr	r3, [pc, #152]	; (80093bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800932a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800932e:	d107      	bne.n	8009340 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009330:	f107 030c 	add.w	r3, r7, #12
 8009334:	4618      	mov	r0, r3
 8009336:	f000 fc93 	bl	8009c60 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800933e:	e31c      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009340:	2300      	movs	r3, #0
 8009342:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009344:	e319      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009346:	4b1d      	ldr	r3, [pc, #116]	; (80093bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800934a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800934e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009350:	4b1a      	ldr	r3, [pc, #104]	; (80093bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f003 0304 	and.w	r3, r3, #4
 8009358:	2b04      	cmp	r3, #4
 800935a:	d10c      	bne.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800935c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800935e:	2b00      	cmp	r3, #0
 8009360:	d109      	bne.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009362:	4b16      	ldr	r3, [pc, #88]	; (80093bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	08db      	lsrs	r3, r3, #3
 8009368:	f003 0303 	and.w	r3, r3, #3
 800936c:	4a14      	ldr	r2, [pc, #80]	; (80093c0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800936e:	fa22 f303 	lsr.w	r3, r2, r3
 8009372:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009374:	e01e      	b.n	80093b4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009376:	4b11      	ldr	r3, [pc, #68]	; (80093bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800937e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009382:	d106      	bne.n	8009392 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8009384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009386:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800938a:	d102      	bne.n	8009392 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800938c:	4b0d      	ldr	r3, [pc, #52]	; (80093c4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800938e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009390:	e010      	b.n	80093b4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009392:	4b0a      	ldr	r3, [pc, #40]	; (80093bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800939a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800939e:	d106      	bne.n	80093ae <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80093a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093a6:	d102      	bne.n	80093ae <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80093a8:	4b07      	ldr	r3, [pc, #28]	; (80093c8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80093aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093ac:	e002      	b.n	80093b4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80093ae:	2300      	movs	r3, #0
 80093b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80093b2:	e2e2      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80093b4:	e2e1      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80093b6:	4b05      	ldr	r3, [pc, #20]	; (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80093b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093ba:	e2de      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80093bc:	58024400 	.word	0x58024400
 80093c0:	03d09000 	.word	0x03d09000
 80093c4:	003d0900 	.word	0x003d0900
 80093c8:	017d7840 	.word	0x017d7840
 80093cc:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80093d0:	2300      	movs	r3, #0
 80093d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093d4:	e2d1      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80093d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093da:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80093de:	430b      	orrs	r3, r1
 80093e0:	f040 809c 	bne.w	800951c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80093e4:	4b93      	ldr	r3, [pc, #588]	; (8009634 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80093e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093e8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80093ec:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80093ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80093f4:	d054      	beq.n	80094a0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80093f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80093fc:	f200 808b 	bhi.w	8009516 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009402:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009406:	f000 8083 	beq.w	8009510 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800940a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800940c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009410:	f200 8081 	bhi.w	8009516 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009416:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800941a:	d02f      	beq.n	800947c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800941c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800941e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009422:	d878      	bhi.n	8009516 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009426:	2b00      	cmp	r3, #0
 8009428:	d004      	beq.n	8009434 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800942a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800942c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009430:	d012      	beq.n	8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8009432:	e070      	b.n	8009516 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009434:	4b7f      	ldr	r3, [pc, #508]	; (8009634 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800943c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009440:	d107      	bne.n	8009452 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009442:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009446:	4618      	mov	r0, r3
 8009448:	f000 fd5e 	bl	8009f08 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800944c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800944e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009450:	e293      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009452:	2300      	movs	r3, #0
 8009454:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009456:	e290      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009458:	4b76      	ldr	r3, [pc, #472]	; (8009634 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009460:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009464:	d107      	bne.n	8009476 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009466:	f107 0318 	add.w	r3, r7, #24
 800946a:	4618      	mov	r0, r3
 800946c:	f000 faa4 	bl	80099b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009470:	69bb      	ldr	r3, [r7, #24]
 8009472:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009474:	e281      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009476:	2300      	movs	r3, #0
 8009478:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800947a:	e27e      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800947c:	4b6d      	ldr	r3, [pc, #436]	; (8009634 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009484:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009488:	d107      	bne.n	800949a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800948a:	f107 030c 	add.w	r3, r7, #12
 800948e:	4618      	mov	r0, r3
 8009490:	f000 fbe6 	bl	8009c60 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009498:	e26f      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800949a:	2300      	movs	r3, #0
 800949c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800949e:	e26c      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80094a0:	4b64      	ldr	r3, [pc, #400]	; (8009634 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80094a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80094a8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80094aa:	4b62      	ldr	r3, [pc, #392]	; (8009634 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f003 0304 	and.w	r3, r3, #4
 80094b2:	2b04      	cmp	r3, #4
 80094b4:	d10c      	bne.n	80094d0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80094b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d109      	bne.n	80094d0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80094bc:	4b5d      	ldr	r3, [pc, #372]	; (8009634 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	08db      	lsrs	r3, r3, #3
 80094c2:	f003 0303 	and.w	r3, r3, #3
 80094c6:	4a5c      	ldr	r2, [pc, #368]	; (8009638 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80094c8:	fa22 f303 	lsr.w	r3, r2, r3
 80094cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094ce:	e01e      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80094d0:	4b58      	ldr	r3, [pc, #352]	; (8009634 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094dc:	d106      	bne.n	80094ec <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80094de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80094e4:	d102      	bne.n	80094ec <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80094e6:	4b55      	ldr	r3, [pc, #340]	; (800963c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80094e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094ea:	e010      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80094ec:	4b51      	ldr	r3, [pc, #324]	; (8009634 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80094f8:	d106      	bne.n	8009508 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80094fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009500:	d102      	bne.n	8009508 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009502:	4b4f      	ldr	r3, [pc, #316]	; (8009640 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009504:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009506:	e002      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009508:	2300      	movs	r3, #0
 800950a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800950c:	e235      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800950e:	e234      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009510:	4b4c      	ldr	r3, [pc, #304]	; (8009644 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8009512:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009514:	e231      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009516:	2300      	movs	r3, #0
 8009518:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800951a:	e22e      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800951c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009520:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8009524:	430b      	orrs	r3, r1
 8009526:	f040 808f 	bne.w	8009648 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800952a:	4b42      	ldr	r3, [pc, #264]	; (8009634 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800952c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800952e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8009532:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8009534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009536:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800953a:	d06b      	beq.n	8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800953c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800953e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009542:	d874      	bhi.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009546:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800954a:	d056      	beq.n	80095fa <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800954c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800954e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009552:	d86c      	bhi.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009556:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800955a:	d03b      	beq.n	80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800955c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800955e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009562:	d864      	bhi.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009566:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800956a:	d021      	beq.n	80095b0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800956c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800956e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009572:	d85c      	bhi.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009576:	2b00      	cmp	r3, #0
 8009578:	d004      	beq.n	8009584 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800957a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800957c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009580:	d004      	beq.n	800958c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8009582:	e054      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8009584:	f7fe fa4c 	bl	8007a20 <HAL_RCC_GetPCLK1Freq>
 8009588:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800958a:	e1f6      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800958c:	4b29      	ldr	r3, [pc, #164]	; (8009634 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009594:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009598:	d107      	bne.n	80095aa <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800959a:	f107 0318 	add.w	r3, r7, #24
 800959e:	4618      	mov	r0, r3
 80095a0:	f000 fa0a 	bl	80099b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80095a4:	69fb      	ldr	r3, [r7, #28]
 80095a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095a8:	e1e7      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80095aa:	2300      	movs	r3, #0
 80095ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095ae:	e1e4      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80095b0:	4b20      	ldr	r3, [pc, #128]	; (8009634 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80095b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80095bc:	d107      	bne.n	80095ce <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095be:	f107 030c 	add.w	r3, r7, #12
 80095c2:	4618      	mov	r0, r3
 80095c4:	f000 fb4c 	bl	8009c60 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80095c8:	693b      	ldr	r3, [r7, #16]
 80095ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095cc:	e1d5      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80095ce:	2300      	movs	r3, #0
 80095d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095d2:	e1d2      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80095d4:	4b17      	ldr	r3, [pc, #92]	; (8009634 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f003 0304 	and.w	r3, r3, #4
 80095dc:	2b04      	cmp	r3, #4
 80095de:	d109      	bne.n	80095f4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80095e0:	4b14      	ldr	r3, [pc, #80]	; (8009634 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	08db      	lsrs	r3, r3, #3
 80095e6:	f003 0303 	and.w	r3, r3, #3
 80095ea:	4a13      	ldr	r2, [pc, #76]	; (8009638 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80095ec:	fa22 f303 	lsr.w	r3, r2, r3
 80095f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095f2:	e1c2      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80095f4:	2300      	movs	r3, #0
 80095f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095f8:	e1bf      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80095fa:	4b0e      	ldr	r3, [pc, #56]	; (8009634 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009602:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009606:	d102      	bne.n	800960e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8009608:	4b0c      	ldr	r3, [pc, #48]	; (800963c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800960a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800960c:	e1b5      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800960e:	2300      	movs	r3, #0
 8009610:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009612:	e1b2      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009614:	4b07      	ldr	r3, [pc, #28]	; (8009634 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800961c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009620:	d102      	bne.n	8009628 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8009622:	4b07      	ldr	r3, [pc, #28]	; (8009640 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009624:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009626:	e1a8      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009628:	2300      	movs	r3, #0
 800962a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800962c:	e1a5      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800962e:	2300      	movs	r3, #0
 8009630:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009632:	e1a2      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009634:	58024400 	.word	0x58024400
 8009638:	03d09000 	.word	0x03d09000
 800963c:	003d0900 	.word	0x003d0900
 8009640:	017d7840 	.word	0x017d7840
 8009644:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009648:	e9d7 2300 	ldrd	r2, r3, [r7]
 800964c:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8009650:	430b      	orrs	r3, r1
 8009652:	d173      	bne.n	800973c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8009654:	4b9c      	ldr	r3, [pc, #624]	; (80098c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009658:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800965c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800965e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009660:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009664:	d02f      	beq.n	80096c6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8009666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009668:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800966c:	d863      	bhi.n	8009736 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800966e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009670:	2b00      	cmp	r3, #0
 8009672:	d004      	beq.n	800967e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8009674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009676:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800967a:	d012      	beq.n	80096a2 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800967c:	e05b      	b.n	8009736 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800967e:	4b92      	ldr	r3, [pc, #584]	; (80098c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009686:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800968a:	d107      	bne.n	800969c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800968c:	f107 0318 	add.w	r3, r7, #24
 8009690:	4618      	mov	r0, r3
 8009692:	f000 f991 	bl	80099b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009696:	69bb      	ldr	r3, [r7, #24]
 8009698:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800969a:	e16e      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800969c:	2300      	movs	r3, #0
 800969e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80096a0:	e16b      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80096a2:	4b89      	ldr	r3, [pc, #548]	; (80098c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80096aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096ae:	d107      	bne.n	80096c0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80096b0:	f107 030c 	add.w	r3, r7, #12
 80096b4:	4618      	mov	r0, r3
 80096b6:	f000 fad3 	bl	8009c60 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80096ba:	697b      	ldr	r3, [r7, #20]
 80096bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096be:	e15c      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80096c0:	2300      	movs	r3, #0
 80096c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80096c4:	e159      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80096c6:	4b80      	ldr	r3, [pc, #512]	; (80098c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80096c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80096ce:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80096d0:	4b7d      	ldr	r3, [pc, #500]	; (80098c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f003 0304 	and.w	r3, r3, #4
 80096d8:	2b04      	cmp	r3, #4
 80096da:	d10c      	bne.n	80096f6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80096dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d109      	bne.n	80096f6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80096e2:	4b79      	ldr	r3, [pc, #484]	; (80098c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	08db      	lsrs	r3, r3, #3
 80096e8:	f003 0303 	and.w	r3, r3, #3
 80096ec:	4a77      	ldr	r2, [pc, #476]	; (80098cc <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80096ee:	fa22 f303 	lsr.w	r3, r2, r3
 80096f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80096f4:	e01e      	b.n	8009734 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80096f6:	4b74      	ldr	r3, [pc, #464]	; (80098c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009702:	d106      	bne.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8009704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009706:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800970a:	d102      	bne.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800970c:	4b70      	ldr	r3, [pc, #448]	; (80098d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800970e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009710:	e010      	b.n	8009734 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009712:	4b6d      	ldr	r3, [pc, #436]	; (80098c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800971a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800971e:	d106      	bne.n	800972e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8009720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009722:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009726:	d102      	bne.n	800972e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009728:	4b6a      	ldr	r3, [pc, #424]	; (80098d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800972a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800972c:	e002      	b.n	8009734 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800972e:	2300      	movs	r3, #0
 8009730:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009732:	e122      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009734:	e121      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009736:	2300      	movs	r3, #0
 8009738:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800973a:	e11e      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800973c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009740:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8009744:	430b      	orrs	r3, r1
 8009746:	d133      	bne.n	80097b0 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8009748:	4b5f      	ldr	r3, [pc, #380]	; (80098c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800974a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800974c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009750:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009754:	2b00      	cmp	r3, #0
 8009756:	d004      	beq.n	8009762 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8009758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800975a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800975e:	d012      	beq.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8009760:	e023      	b.n	80097aa <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009762:	4b59      	ldr	r3, [pc, #356]	; (80098c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800976a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800976e:	d107      	bne.n	8009780 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009770:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009774:	4618      	mov	r0, r3
 8009776:	f000 fbc7 	bl	8009f08 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800977a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800977c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800977e:	e0fc      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009780:	2300      	movs	r3, #0
 8009782:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009784:	e0f9      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009786:	4b50      	ldr	r3, [pc, #320]	; (80098c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800978e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009792:	d107      	bne.n	80097a4 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009794:	f107 0318 	add.w	r3, r7, #24
 8009798:	4618      	mov	r0, r3
 800979a:	f000 f90d 	bl	80099b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800979e:	6a3b      	ldr	r3, [r7, #32]
 80097a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80097a2:	e0ea      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80097a4:	2300      	movs	r3, #0
 80097a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80097a8:	e0e7      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80097aa:	2300      	movs	r3, #0
 80097ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80097ae:	e0e4      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80097b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097b4:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 80097b8:	430b      	orrs	r3, r1
 80097ba:	f040 808d 	bne.w	80098d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80097be:	4b42      	ldr	r3, [pc, #264]	; (80098c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80097c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097c2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80097c6:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80097c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80097ce:	d06b      	beq.n	80098a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80097d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80097d6:	d874      	bhi.n	80098c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80097d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097de:	d056      	beq.n	800988e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80097e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097e6:	d86c      	bhi.n	80098c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80097e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80097ee:	d03b      	beq.n	8009868 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80097f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097f2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80097f6:	d864      	bhi.n	80098c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80097f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097fe:	d021      	beq.n	8009844 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8009800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009802:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009806:	d85c      	bhi.n	80098c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800980a:	2b00      	cmp	r3, #0
 800980c:	d004      	beq.n	8009818 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800980e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009810:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009814:	d004      	beq.n	8009820 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8009816:	e054      	b.n	80098c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009818:	f000 f8b8 	bl	800998c <HAL_RCCEx_GetD3PCLK1Freq>
 800981c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800981e:	e0ac      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009820:	4b29      	ldr	r3, [pc, #164]	; (80098c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009828:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800982c:	d107      	bne.n	800983e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800982e:	f107 0318 	add.w	r3, r7, #24
 8009832:	4618      	mov	r0, r3
 8009834:	f000 f8c0 	bl	80099b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009838:	69fb      	ldr	r3, [r7, #28]
 800983a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800983c:	e09d      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800983e:	2300      	movs	r3, #0
 8009840:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009842:	e09a      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009844:	4b20      	ldr	r3, [pc, #128]	; (80098c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800984c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009850:	d107      	bne.n	8009862 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009852:	f107 030c 	add.w	r3, r7, #12
 8009856:	4618      	mov	r0, r3
 8009858:	f000 fa02 	bl	8009c60 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800985c:	693b      	ldr	r3, [r7, #16]
 800985e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009860:	e08b      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009862:	2300      	movs	r3, #0
 8009864:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009866:	e088      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009868:	4b17      	ldr	r3, [pc, #92]	; (80098c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f003 0304 	and.w	r3, r3, #4
 8009870:	2b04      	cmp	r3, #4
 8009872:	d109      	bne.n	8009888 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009874:	4b14      	ldr	r3, [pc, #80]	; (80098c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	08db      	lsrs	r3, r3, #3
 800987a:	f003 0303 	and.w	r3, r3, #3
 800987e:	4a13      	ldr	r2, [pc, #76]	; (80098cc <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009880:	fa22 f303 	lsr.w	r3, r2, r3
 8009884:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009886:	e078      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009888:	2300      	movs	r3, #0
 800988a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800988c:	e075      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800988e:	4b0e      	ldr	r3, [pc, #56]	; (80098c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009896:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800989a:	d102      	bne.n	80098a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800989c:	4b0c      	ldr	r3, [pc, #48]	; (80098d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800989e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098a0:	e06b      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80098a2:	2300      	movs	r3, #0
 80098a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80098a6:	e068      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80098a8:	4b07      	ldr	r3, [pc, #28]	; (80098c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80098b4:	d102      	bne.n	80098bc <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 80098b6:	4b07      	ldr	r3, [pc, #28]	; (80098d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80098b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098ba:	e05e      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80098bc:	2300      	movs	r3, #0
 80098be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80098c0:	e05b      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80098c2:	2300      	movs	r3, #0
 80098c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80098c6:	e058      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80098c8:	58024400 	.word	0x58024400
 80098cc:	03d09000 	.word	0x03d09000
 80098d0:	003d0900 	.word	0x003d0900
 80098d4:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80098d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80098dc:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80098e0:	430b      	orrs	r3, r1
 80098e2:	d148      	bne.n	8009976 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80098e4:	4b27      	ldr	r3, [pc, #156]	; (8009984 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80098e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80098ec:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80098ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098f4:	d02a      	beq.n	800994c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80098f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098fc:	d838      	bhi.n	8009970 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80098fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009900:	2b00      	cmp	r3, #0
 8009902:	d004      	beq.n	800990e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8009904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009906:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800990a:	d00d      	beq.n	8009928 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800990c:	e030      	b.n	8009970 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800990e:	4b1d      	ldr	r3, [pc, #116]	; (8009984 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009916:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800991a:	d102      	bne.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800991c:	4b1a      	ldr	r3, [pc, #104]	; (8009988 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800991e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009920:	e02b      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009922:	2300      	movs	r3, #0
 8009924:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009926:	e028      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009928:	4b16      	ldr	r3, [pc, #88]	; (8009984 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009930:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009934:	d107      	bne.n	8009946 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009936:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800993a:	4618      	mov	r0, r3
 800993c:	f000 fae4 	bl	8009f08 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009942:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009944:	e019      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009946:	2300      	movs	r3, #0
 8009948:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800994a:	e016      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800994c:	4b0d      	ldr	r3, [pc, #52]	; (8009984 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009954:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009958:	d107      	bne.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800995a:	f107 0318 	add.w	r3, r7, #24
 800995e:	4618      	mov	r0, r3
 8009960:	f000 f82a 	bl	80099b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009964:	69fb      	ldr	r3, [r7, #28]
 8009966:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009968:	e007      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800996a:	2300      	movs	r3, #0
 800996c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800996e:	e004      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009970:	2300      	movs	r3, #0
 8009972:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009974:	e001      	b.n	800997a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8009976:	2300      	movs	r3, #0
 8009978:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800997a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800997c:	4618      	mov	r0, r3
 800997e:	3740      	adds	r7, #64	; 0x40
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}
 8009984:	58024400 	.word	0x58024400
 8009988:	017d7840 	.word	0x017d7840

0800998c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009990:	f7fe f816 	bl	80079c0 <HAL_RCC_GetHCLKFreq>
 8009994:	4602      	mov	r2, r0
 8009996:	4b06      	ldr	r3, [pc, #24]	; (80099b0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009998:	6a1b      	ldr	r3, [r3, #32]
 800999a:	091b      	lsrs	r3, r3, #4
 800999c:	f003 0307 	and.w	r3, r3, #7
 80099a0:	4904      	ldr	r1, [pc, #16]	; (80099b4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80099a2:	5ccb      	ldrb	r3, [r1, r3]
 80099a4:	f003 031f 	and.w	r3, r3, #31
 80099a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80099ac:	4618      	mov	r0, r3
 80099ae:	bd80      	pop	{r7, pc}
 80099b0:	58024400 	.word	0x58024400
 80099b4:	0800f520 	.word	0x0800f520

080099b8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80099b8:	b480      	push	{r7}
 80099ba:	b089      	sub	sp, #36	; 0x24
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80099c0:	4ba1      	ldr	r3, [pc, #644]	; (8009c48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099c4:	f003 0303 	and.w	r3, r3, #3
 80099c8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80099ca:	4b9f      	ldr	r3, [pc, #636]	; (8009c48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099ce:	0b1b      	lsrs	r3, r3, #12
 80099d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80099d4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80099d6:	4b9c      	ldr	r3, [pc, #624]	; (8009c48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099da:	091b      	lsrs	r3, r3, #4
 80099dc:	f003 0301 	and.w	r3, r3, #1
 80099e0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80099e2:	4b99      	ldr	r3, [pc, #612]	; (8009c48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099e6:	08db      	lsrs	r3, r3, #3
 80099e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80099ec:	693a      	ldr	r2, [r7, #16]
 80099ee:	fb02 f303 	mul.w	r3, r2, r3
 80099f2:	ee07 3a90 	vmov	s15, r3
 80099f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099fa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80099fe:	697b      	ldr	r3, [r7, #20]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	f000 8111 	beq.w	8009c28 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009a06:	69bb      	ldr	r3, [r7, #24]
 8009a08:	2b02      	cmp	r3, #2
 8009a0a:	f000 8083 	beq.w	8009b14 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009a0e:	69bb      	ldr	r3, [r7, #24]
 8009a10:	2b02      	cmp	r3, #2
 8009a12:	f200 80a1 	bhi.w	8009b58 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009a16:	69bb      	ldr	r3, [r7, #24]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d003      	beq.n	8009a24 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009a1c:	69bb      	ldr	r3, [r7, #24]
 8009a1e:	2b01      	cmp	r3, #1
 8009a20:	d056      	beq.n	8009ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009a22:	e099      	b.n	8009b58 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a24:	4b88      	ldr	r3, [pc, #544]	; (8009c48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f003 0320 	and.w	r3, r3, #32
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d02d      	beq.n	8009a8c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009a30:	4b85      	ldr	r3, [pc, #532]	; (8009c48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	08db      	lsrs	r3, r3, #3
 8009a36:	f003 0303 	and.w	r3, r3, #3
 8009a3a:	4a84      	ldr	r2, [pc, #528]	; (8009c4c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009a3c:	fa22 f303 	lsr.w	r3, r2, r3
 8009a40:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009a42:	68bb      	ldr	r3, [r7, #8]
 8009a44:	ee07 3a90 	vmov	s15, r3
 8009a48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	ee07 3a90 	vmov	s15, r3
 8009a52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a5a:	4b7b      	ldr	r3, [pc, #492]	; (8009c48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a62:	ee07 3a90 	vmov	s15, r3
 8009a66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a6e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009c50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009a72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a86:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009a8a:	e087      	b.n	8009b9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009a8c:	697b      	ldr	r3, [r7, #20]
 8009a8e:	ee07 3a90 	vmov	s15, r3
 8009a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a96:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009c54 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009a9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a9e:	4b6a      	ldr	r3, [pc, #424]	; (8009c48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009aa6:	ee07 3a90 	vmov	s15, r3
 8009aaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009aae:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ab2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009c50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009ab6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009aba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009abe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ac2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009aca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009ace:	e065      	b.n	8009b9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009ad0:	697b      	ldr	r3, [r7, #20]
 8009ad2:	ee07 3a90 	vmov	s15, r3
 8009ad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ada:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009c58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009ade:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ae2:	4b59      	ldr	r3, [pc, #356]	; (8009c48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ae6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009aea:	ee07 3a90 	vmov	s15, r3
 8009aee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009af2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009af6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009c50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009afa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009afe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009b12:	e043      	b.n	8009b9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009b14:	697b      	ldr	r3, [r7, #20]
 8009b16:	ee07 3a90 	vmov	s15, r3
 8009b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b1e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009c5c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009b22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b26:	4b48      	ldr	r3, [pc, #288]	; (8009c48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b2e:	ee07 3a90 	vmov	s15, r3
 8009b32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b36:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b3a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009c50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009b3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009b56:	e021      	b.n	8009b9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009b58:	697b      	ldr	r3, [r7, #20]
 8009b5a:	ee07 3a90 	vmov	s15, r3
 8009b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b62:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009c58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009b66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b6a:	4b37      	ldr	r3, [pc, #220]	; (8009c48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b72:	ee07 3a90 	vmov	s15, r3
 8009b76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b7e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009c50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009b82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009b9a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009b9c:	4b2a      	ldr	r3, [pc, #168]	; (8009c48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ba0:	0a5b      	lsrs	r3, r3, #9
 8009ba2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ba6:	ee07 3a90 	vmov	s15, r3
 8009baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009bb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009bb6:	edd7 6a07 	vldr	s13, [r7, #28]
 8009bba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009bbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009bc2:	ee17 2a90 	vmov	r2, s15
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009bca:	4b1f      	ldr	r3, [pc, #124]	; (8009c48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bce:	0c1b      	lsrs	r3, r3, #16
 8009bd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bd4:	ee07 3a90 	vmov	s15, r3
 8009bd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bdc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009be0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009be4:	edd7 6a07 	vldr	s13, [r7, #28]
 8009be8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009bec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009bf0:	ee17 2a90 	vmov	r2, s15
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009bf8:	4b13      	ldr	r3, [pc, #76]	; (8009c48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bfc:	0e1b      	lsrs	r3, r3, #24
 8009bfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c02:	ee07 3a90 	vmov	s15, r3
 8009c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c12:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c1e:	ee17 2a90 	vmov	r2, s15
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009c26:	e008      	b.n	8009c3a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2200      	movs	r2, #0
 8009c32:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2200      	movs	r2, #0
 8009c38:	609a      	str	r2, [r3, #8]
}
 8009c3a:	bf00      	nop
 8009c3c:	3724      	adds	r7, #36	; 0x24
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c44:	4770      	bx	lr
 8009c46:	bf00      	nop
 8009c48:	58024400 	.word	0x58024400
 8009c4c:	03d09000 	.word	0x03d09000
 8009c50:	46000000 	.word	0x46000000
 8009c54:	4c742400 	.word	0x4c742400
 8009c58:	4a742400 	.word	0x4a742400
 8009c5c:	4bbebc20 	.word	0x4bbebc20

08009c60 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009c60:	b480      	push	{r7}
 8009c62:	b089      	sub	sp, #36	; 0x24
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009c68:	4ba1      	ldr	r3, [pc, #644]	; (8009ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c6c:	f003 0303 	and.w	r3, r3, #3
 8009c70:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009c72:	4b9f      	ldr	r3, [pc, #636]	; (8009ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c76:	0d1b      	lsrs	r3, r3, #20
 8009c78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009c7c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009c7e:	4b9c      	ldr	r3, [pc, #624]	; (8009ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c82:	0a1b      	lsrs	r3, r3, #8
 8009c84:	f003 0301 	and.w	r3, r3, #1
 8009c88:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009c8a:	4b99      	ldr	r3, [pc, #612]	; (8009ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c8e:	08db      	lsrs	r3, r3, #3
 8009c90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009c94:	693a      	ldr	r2, [r7, #16]
 8009c96:	fb02 f303 	mul.w	r3, r2, r3
 8009c9a:	ee07 3a90 	vmov	s15, r3
 8009c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ca2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	f000 8111 	beq.w	8009ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009cae:	69bb      	ldr	r3, [r7, #24]
 8009cb0:	2b02      	cmp	r3, #2
 8009cb2:	f000 8083 	beq.w	8009dbc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009cb6:	69bb      	ldr	r3, [r7, #24]
 8009cb8:	2b02      	cmp	r3, #2
 8009cba:	f200 80a1 	bhi.w	8009e00 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009cbe:	69bb      	ldr	r3, [r7, #24]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d003      	beq.n	8009ccc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009cc4:	69bb      	ldr	r3, [r7, #24]
 8009cc6:	2b01      	cmp	r3, #1
 8009cc8:	d056      	beq.n	8009d78 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009cca:	e099      	b.n	8009e00 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ccc:	4b88      	ldr	r3, [pc, #544]	; (8009ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f003 0320 	and.w	r3, r3, #32
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d02d      	beq.n	8009d34 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009cd8:	4b85      	ldr	r3, [pc, #532]	; (8009ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	08db      	lsrs	r3, r3, #3
 8009cde:	f003 0303 	and.w	r3, r3, #3
 8009ce2:	4a84      	ldr	r2, [pc, #528]	; (8009ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009ce4:	fa22 f303 	lsr.w	r3, r2, r3
 8009ce8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	ee07 3a90 	vmov	s15, r3
 8009cf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cf4:	697b      	ldr	r3, [r7, #20]
 8009cf6:	ee07 3a90 	vmov	s15, r3
 8009cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d02:	4b7b      	ldr	r3, [pc, #492]	; (8009ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d0a:	ee07 3a90 	vmov	s15, r3
 8009d0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d12:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d16:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009d1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d2e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009d32:	e087      	b.n	8009e44 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009d34:	697b      	ldr	r3, [r7, #20]
 8009d36:	ee07 3a90 	vmov	s15, r3
 8009d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d3e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009efc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009d42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d46:	4b6a      	ldr	r3, [pc, #424]	; (8009ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d4e:	ee07 3a90 	vmov	s15, r3
 8009d52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d56:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d5a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009d5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009d76:	e065      	b.n	8009e44 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009d78:	697b      	ldr	r3, [r7, #20]
 8009d7a:	ee07 3a90 	vmov	s15, r3
 8009d7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d82:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009f00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009d86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d8a:	4b59      	ldr	r3, [pc, #356]	; (8009ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d92:	ee07 3a90 	vmov	s15, r3
 8009d96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d9e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009da2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009da6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009daa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009dae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009db2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009db6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009dba:	e043      	b.n	8009e44 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009dbc:	697b      	ldr	r3, [r7, #20]
 8009dbe:	ee07 3a90 	vmov	s15, r3
 8009dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dc6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009f04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009dca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dce:	4b48      	ldr	r3, [pc, #288]	; (8009ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dd6:	ee07 3a90 	vmov	s15, r3
 8009dda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dde:	ed97 6a03 	vldr	s12, [r7, #12]
 8009de2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009de6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009dea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009dee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009df2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009df6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009dfe:	e021      	b.n	8009e44 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009e00:	697b      	ldr	r3, [r7, #20]
 8009e02:	ee07 3a90 	vmov	s15, r3
 8009e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e0a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009f00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009e0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e12:	4b37      	ldr	r3, [pc, #220]	; (8009ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e1a:	ee07 3a90 	vmov	s15, r3
 8009e1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e22:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e26:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009e2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e42:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009e44:	4b2a      	ldr	r3, [pc, #168]	; (8009ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e48:	0a5b      	lsrs	r3, r3, #9
 8009e4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e4e:	ee07 3a90 	vmov	s15, r3
 8009e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009e5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e6a:	ee17 2a90 	vmov	r2, s15
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009e72:	4b1f      	ldr	r3, [pc, #124]	; (8009ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e76:	0c1b      	lsrs	r3, r3, #16
 8009e78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e7c:	ee07 3a90 	vmov	s15, r3
 8009e80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009e88:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e8c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e98:	ee17 2a90 	vmov	r2, s15
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009ea0:	4b13      	ldr	r3, [pc, #76]	; (8009ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ea4:	0e1b      	lsrs	r3, r3, #24
 8009ea6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009eaa:	ee07 3a90 	vmov	s15, r3
 8009eae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009eb2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009eb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009eba:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ebe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ec2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ec6:	ee17 2a90 	vmov	r2, s15
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009ece:	e008      	b.n	8009ee2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2200      	movs	r2, #0
 8009eda:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2200      	movs	r2, #0
 8009ee0:	609a      	str	r2, [r3, #8]
}
 8009ee2:	bf00      	nop
 8009ee4:	3724      	adds	r7, #36	; 0x24
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eec:	4770      	bx	lr
 8009eee:	bf00      	nop
 8009ef0:	58024400 	.word	0x58024400
 8009ef4:	03d09000 	.word	0x03d09000
 8009ef8:	46000000 	.word	0x46000000
 8009efc:	4c742400 	.word	0x4c742400
 8009f00:	4a742400 	.word	0x4a742400
 8009f04:	4bbebc20 	.word	0x4bbebc20

08009f08 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b089      	sub	sp, #36	; 0x24
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009f10:	4ba0      	ldr	r3, [pc, #640]	; (800a194 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f14:	f003 0303 	and.w	r3, r3, #3
 8009f18:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009f1a:	4b9e      	ldr	r3, [pc, #632]	; (800a194 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f1e:	091b      	lsrs	r3, r3, #4
 8009f20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009f24:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009f26:	4b9b      	ldr	r3, [pc, #620]	; (800a194 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f2a:	f003 0301 	and.w	r3, r3, #1
 8009f2e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009f30:	4b98      	ldr	r3, [pc, #608]	; (800a194 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f34:	08db      	lsrs	r3, r3, #3
 8009f36:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009f3a:	693a      	ldr	r2, [r7, #16]
 8009f3c:	fb02 f303 	mul.w	r3, r2, r3
 8009f40:	ee07 3a90 	vmov	s15, r3
 8009f44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f48:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009f4c:	697b      	ldr	r3, [r7, #20]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	f000 8111 	beq.w	800a176 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009f54:	69bb      	ldr	r3, [r7, #24]
 8009f56:	2b02      	cmp	r3, #2
 8009f58:	f000 8083 	beq.w	800a062 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009f5c:	69bb      	ldr	r3, [r7, #24]
 8009f5e:	2b02      	cmp	r3, #2
 8009f60:	f200 80a1 	bhi.w	800a0a6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009f64:	69bb      	ldr	r3, [r7, #24]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d003      	beq.n	8009f72 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009f6a:	69bb      	ldr	r3, [r7, #24]
 8009f6c:	2b01      	cmp	r3, #1
 8009f6e:	d056      	beq.n	800a01e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009f70:	e099      	b.n	800a0a6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f72:	4b88      	ldr	r3, [pc, #544]	; (800a194 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f003 0320 	and.w	r3, r3, #32
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d02d      	beq.n	8009fda <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009f7e:	4b85      	ldr	r3, [pc, #532]	; (800a194 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	08db      	lsrs	r3, r3, #3
 8009f84:	f003 0303 	and.w	r3, r3, #3
 8009f88:	4a83      	ldr	r2, [pc, #524]	; (800a198 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009f8a:	fa22 f303 	lsr.w	r3, r2, r3
 8009f8e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	ee07 3a90 	vmov	s15, r3
 8009f96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f9a:	697b      	ldr	r3, [r7, #20]
 8009f9c:	ee07 3a90 	vmov	s15, r3
 8009fa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fa4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fa8:	4b7a      	ldr	r3, [pc, #488]	; (800a194 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fb0:	ee07 3a90 	vmov	s15, r3
 8009fb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fb8:	ed97 6a03 	vldr	s12, [r7, #12]
 8009fbc:	eddf 5a77 	vldr	s11, [pc, #476]	; 800a19c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009fc0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fc8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009fcc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fd4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009fd8:	e087      	b.n	800a0ea <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009fda:	697b      	ldr	r3, [r7, #20]
 8009fdc:	ee07 3a90 	vmov	s15, r3
 8009fe0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fe4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800a1a0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009fe8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fec:	4b69      	ldr	r3, [pc, #420]	; (800a194 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ff0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ff4:	ee07 3a90 	vmov	s15, r3
 8009ff8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ffc:	ed97 6a03 	vldr	s12, [r7, #12]
 800a000:	eddf 5a66 	vldr	s11, [pc, #408]	; 800a19c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a004:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a008:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a00c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a010:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a014:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a018:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a01c:	e065      	b.n	800a0ea <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	ee07 3a90 	vmov	s15, r3
 800a024:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a028:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800a1a4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a02c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a030:	4b58      	ldr	r3, [pc, #352]	; (800a194 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a034:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a038:	ee07 3a90 	vmov	s15, r3
 800a03c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a040:	ed97 6a03 	vldr	s12, [r7, #12]
 800a044:	eddf 5a55 	vldr	s11, [pc, #340]	; 800a19c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a048:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a04c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a050:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a054:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a058:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a05c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a060:	e043      	b.n	800a0ea <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a062:	697b      	ldr	r3, [r7, #20]
 800a064:	ee07 3a90 	vmov	s15, r3
 800a068:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a06c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800a1a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a070:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a074:	4b47      	ldr	r3, [pc, #284]	; (800a194 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a078:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a07c:	ee07 3a90 	vmov	s15, r3
 800a080:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a084:	ed97 6a03 	vldr	s12, [r7, #12]
 800a088:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a19c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a08c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a090:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a094:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a098:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a09c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0a0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a0a4:	e021      	b.n	800a0ea <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a0a6:	697b      	ldr	r3, [r7, #20]
 800a0a8:	ee07 3a90 	vmov	s15, r3
 800a0ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0b0:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800a1a0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a0b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0b8:	4b36      	ldr	r3, [pc, #216]	; (800a194 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a0ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0c0:	ee07 3a90 	vmov	s15, r3
 800a0c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0c8:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0cc:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a19c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a0d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0e4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a0e8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800a0ea:	4b2a      	ldr	r3, [pc, #168]	; (800a194 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a0ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0ee:	0a5b      	lsrs	r3, r3, #9
 800a0f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0f4:	ee07 3a90 	vmov	s15, r3
 800a0f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a100:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a104:	edd7 6a07 	vldr	s13, [r7, #28]
 800a108:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a10c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a110:	ee17 2a90 	vmov	r2, s15
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800a118:	4b1e      	ldr	r3, [pc, #120]	; (800a194 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a11a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a11c:	0c1b      	lsrs	r3, r3, #16
 800a11e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a122:	ee07 3a90 	vmov	s15, r3
 800a126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a12a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a12e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a132:	edd7 6a07 	vldr	s13, [r7, #28]
 800a136:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a13a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a13e:	ee17 2a90 	vmov	r2, s15
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800a146:	4b13      	ldr	r3, [pc, #76]	; (800a194 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a14a:	0e1b      	lsrs	r3, r3, #24
 800a14c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a150:	ee07 3a90 	vmov	s15, r3
 800a154:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a158:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a15c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a160:	edd7 6a07 	vldr	s13, [r7, #28]
 800a164:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a168:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a16c:	ee17 2a90 	vmov	r2, s15
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a174:	e008      	b.n	800a188 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	2200      	movs	r2, #0
 800a17a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2200      	movs	r2, #0
 800a180:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2200      	movs	r2, #0
 800a186:	609a      	str	r2, [r3, #8]
}
 800a188:	bf00      	nop
 800a18a:	3724      	adds	r7, #36	; 0x24
 800a18c:	46bd      	mov	sp, r7
 800a18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a192:	4770      	bx	lr
 800a194:	58024400 	.word	0x58024400
 800a198:	03d09000 	.word	0x03d09000
 800a19c:	46000000 	.word	0x46000000
 800a1a0:	4c742400 	.word	0x4c742400
 800a1a4:	4a742400 	.word	0x4a742400
 800a1a8:	4bbebc20 	.word	0x4bbebc20

0800a1ac <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b084      	sub	sp, #16
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
 800a1b4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a1ba:	4b53      	ldr	r3, [pc, #332]	; (800a308 <RCCEx_PLL2_Config+0x15c>)
 800a1bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1be:	f003 0303 	and.w	r3, r3, #3
 800a1c2:	2b03      	cmp	r3, #3
 800a1c4:	d101      	bne.n	800a1ca <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	e099      	b.n	800a2fe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a1ca:	4b4f      	ldr	r3, [pc, #316]	; (800a308 <RCCEx_PLL2_Config+0x15c>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	4a4e      	ldr	r2, [pc, #312]	; (800a308 <RCCEx_PLL2_Config+0x15c>)
 800a1d0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a1d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a1d6:	f7f8 ff75 	bl	80030c4 <HAL_GetTick>
 800a1da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a1dc:	e008      	b.n	800a1f0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a1de:	f7f8 ff71 	bl	80030c4 <HAL_GetTick>
 800a1e2:	4602      	mov	r2, r0
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	1ad3      	subs	r3, r2, r3
 800a1e8:	2b02      	cmp	r3, #2
 800a1ea:	d901      	bls.n	800a1f0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a1ec:	2303      	movs	r3, #3
 800a1ee:	e086      	b.n	800a2fe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a1f0:	4b45      	ldr	r3, [pc, #276]	; (800a308 <RCCEx_PLL2_Config+0x15c>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d1f0      	bne.n	800a1de <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a1fc:	4b42      	ldr	r3, [pc, #264]	; (800a308 <RCCEx_PLL2_Config+0x15c>)
 800a1fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a200:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	031b      	lsls	r3, r3, #12
 800a20a:	493f      	ldr	r1, [pc, #252]	; (800a308 <RCCEx_PLL2_Config+0x15c>)
 800a20c:	4313      	orrs	r3, r2
 800a20e:	628b      	str	r3, [r1, #40]	; 0x28
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	685b      	ldr	r3, [r3, #4]
 800a214:	3b01      	subs	r3, #1
 800a216:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	689b      	ldr	r3, [r3, #8]
 800a21e:	3b01      	subs	r3, #1
 800a220:	025b      	lsls	r3, r3, #9
 800a222:	b29b      	uxth	r3, r3
 800a224:	431a      	orrs	r2, r3
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	68db      	ldr	r3, [r3, #12]
 800a22a:	3b01      	subs	r3, #1
 800a22c:	041b      	lsls	r3, r3, #16
 800a22e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a232:	431a      	orrs	r2, r3
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	691b      	ldr	r3, [r3, #16]
 800a238:	3b01      	subs	r3, #1
 800a23a:	061b      	lsls	r3, r3, #24
 800a23c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a240:	4931      	ldr	r1, [pc, #196]	; (800a308 <RCCEx_PLL2_Config+0x15c>)
 800a242:	4313      	orrs	r3, r2
 800a244:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a246:	4b30      	ldr	r3, [pc, #192]	; (800a308 <RCCEx_PLL2_Config+0x15c>)
 800a248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a24a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	695b      	ldr	r3, [r3, #20]
 800a252:	492d      	ldr	r1, [pc, #180]	; (800a308 <RCCEx_PLL2_Config+0x15c>)
 800a254:	4313      	orrs	r3, r2
 800a256:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a258:	4b2b      	ldr	r3, [pc, #172]	; (800a308 <RCCEx_PLL2_Config+0x15c>)
 800a25a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a25c:	f023 0220 	bic.w	r2, r3, #32
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	699b      	ldr	r3, [r3, #24]
 800a264:	4928      	ldr	r1, [pc, #160]	; (800a308 <RCCEx_PLL2_Config+0x15c>)
 800a266:	4313      	orrs	r3, r2
 800a268:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a26a:	4b27      	ldr	r3, [pc, #156]	; (800a308 <RCCEx_PLL2_Config+0x15c>)
 800a26c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a26e:	4a26      	ldr	r2, [pc, #152]	; (800a308 <RCCEx_PLL2_Config+0x15c>)
 800a270:	f023 0310 	bic.w	r3, r3, #16
 800a274:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a276:	4b24      	ldr	r3, [pc, #144]	; (800a308 <RCCEx_PLL2_Config+0x15c>)
 800a278:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a27a:	4b24      	ldr	r3, [pc, #144]	; (800a30c <RCCEx_PLL2_Config+0x160>)
 800a27c:	4013      	ands	r3, r2
 800a27e:	687a      	ldr	r2, [r7, #4]
 800a280:	69d2      	ldr	r2, [r2, #28]
 800a282:	00d2      	lsls	r2, r2, #3
 800a284:	4920      	ldr	r1, [pc, #128]	; (800a308 <RCCEx_PLL2_Config+0x15c>)
 800a286:	4313      	orrs	r3, r2
 800a288:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a28a:	4b1f      	ldr	r3, [pc, #124]	; (800a308 <RCCEx_PLL2_Config+0x15c>)
 800a28c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a28e:	4a1e      	ldr	r2, [pc, #120]	; (800a308 <RCCEx_PLL2_Config+0x15c>)
 800a290:	f043 0310 	orr.w	r3, r3, #16
 800a294:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d106      	bne.n	800a2aa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a29c:	4b1a      	ldr	r3, [pc, #104]	; (800a308 <RCCEx_PLL2_Config+0x15c>)
 800a29e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2a0:	4a19      	ldr	r2, [pc, #100]	; (800a308 <RCCEx_PLL2_Config+0x15c>)
 800a2a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a2a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a2a8:	e00f      	b.n	800a2ca <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	2b01      	cmp	r3, #1
 800a2ae:	d106      	bne.n	800a2be <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a2b0:	4b15      	ldr	r3, [pc, #84]	; (800a308 <RCCEx_PLL2_Config+0x15c>)
 800a2b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2b4:	4a14      	ldr	r2, [pc, #80]	; (800a308 <RCCEx_PLL2_Config+0x15c>)
 800a2b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a2ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a2bc:	e005      	b.n	800a2ca <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a2be:	4b12      	ldr	r3, [pc, #72]	; (800a308 <RCCEx_PLL2_Config+0x15c>)
 800a2c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2c2:	4a11      	ldr	r2, [pc, #68]	; (800a308 <RCCEx_PLL2_Config+0x15c>)
 800a2c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a2c8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a2ca:	4b0f      	ldr	r3, [pc, #60]	; (800a308 <RCCEx_PLL2_Config+0x15c>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	4a0e      	ldr	r2, [pc, #56]	; (800a308 <RCCEx_PLL2_Config+0x15c>)
 800a2d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a2d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a2d6:	f7f8 fef5 	bl	80030c4 <HAL_GetTick>
 800a2da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a2dc:	e008      	b.n	800a2f0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a2de:	f7f8 fef1 	bl	80030c4 <HAL_GetTick>
 800a2e2:	4602      	mov	r2, r0
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	1ad3      	subs	r3, r2, r3
 800a2e8:	2b02      	cmp	r3, #2
 800a2ea:	d901      	bls.n	800a2f0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a2ec:	2303      	movs	r3, #3
 800a2ee:	e006      	b.n	800a2fe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a2f0:	4b05      	ldr	r3, [pc, #20]	; (800a308 <RCCEx_PLL2_Config+0x15c>)
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d0f0      	beq.n	800a2de <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a2fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2fe:	4618      	mov	r0, r3
 800a300:	3710      	adds	r7, #16
 800a302:	46bd      	mov	sp, r7
 800a304:	bd80      	pop	{r7, pc}
 800a306:	bf00      	nop
 800a308:	58024400 	.word	0x58024400
 800a30c:	ffff0007 	.word	0xffff0007

0800a310 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b084      	sub	sp, #16
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
 800a318:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a31a:	2300      	movs	r3, #0
 800a31c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a31e:	4b53      	ldr	r3, [pc, #332]	; (800a46c <RCCEx_PLL3_Config+0x15c>)
 800a320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a322:	f003 0303 	and.w	r3, r3, #3
 800a326:	2b03      	cmp	r3, #3
 800a328:	d101      	bne.n	800a32e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a32a:	2301      	movs	r3, #1
 800a32c:	e099      	b.n	800a462 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a32e:	4b4f      	ldr	r3, [pc, #316]	; (800a46c <RCCEx_PLL3_Config+0x15c>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	4a4e      	ldr	r2, [pc, #312]	; (800a46c <RCCEx_PLL3_Config+0x15c>)
 800a334:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a338:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a33a:	f7f8 fec3 	bl	80030c4 <HAL_GetTick>
 800a33e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a340:	e008      	b.n	800a354 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a342:	f7f8 febf 	bl	80030c4 <HAL_GetTick>
 800a346:	4602      	mov	r2, r0
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	1ad3      	subs	r3, r2, r3
 800a34c:	2b02      	cmp	r3, #2
 800a34e:	d901      	bls.n	800a354 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a350:	2303      	movs	r3, #3
 800a352:	e086      	b.n	800a462 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a354:	4b45      	ldr	r3, [pc, #276]	; (800a46c <RCCEx_PLL3_Config+0x15c>)
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d1f0      	bne.n	800a342 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a360:	4b42      	ldr	r3, [pc, #264]	; (800a46c <RCCEx_PLL3_Config+0x15c>)
 800a362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a364:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	051b      	lsls	r3, r3, #20
 800a36e:	493f      	ldr	r1, [pc, #252]	; (800a46c <RCCEx_PLL3_Config+0x15c>)
 800a370:	4313      	orrs	r3, r2
 800a372:	628b      	str	r3, [r1, #40]	; 0x28
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	685b      	ldr	r3, [r3, #4]
 800a378:	3b01      	subs	r3, #1
 800a37a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	689b      	ldr	r3, [r3, #8]
 800a382:	3b01      	subs	r3, #1
 800a384:	025b      	lsls	r3, r3, #9
 800a386:	b29b      	uxth	r3, r3
 800a388:	431a      	orrs	r2, r3
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	68db      	ldr	r3, [r3, #12]
 800a38e:	3b01      	subs	r3, #1
 800a390:	041b      	lsls	r3, r3, #16
 800a392:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a396:	431a      	orrs	r2, r3
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	691b      	ldr	r3, [r3, #16]
 800a39c:	3b01      	subs	r3, #1
 800a39e:	061b      	lsls	r3, r3, #24
 800a3a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a3a4:	4931      	ldr	r1, [pc, #196]	; (800a46c <RCCEx_PLL3_Config+0x15c>)
 800a3a6:	4313      	orrs	r3, r2
 800a3a8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a3aa:	4b30      	ldr	r3, [pc, #192]	; (800a46c <RCCEx_PLL3_Config+0x15c>)
 800a3ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	695b      	ldr	r3, [r3, #20]
 800a3b6:	492d      	ldr	r1, [pc, #180]	; (800a46c <RCCEx_PLL3_Config+0x15c>)
 800a3b8:	4313      	orrs	r3, r2
 800a3ba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a3bc:	4b2b      	ldr	r3, [pc, #172]	; (800a46c <RCCEx_PLL3_Config+0x15c>)
 800a3be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3c0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	699b      	ldr	r3, [r3, #24]
 800a3c8:	4928      	ldr	r1, [pc, #160]	; (800a46c <RCCEx_PLL3_Config+0x15c>)
 800a3ca:	4313      	orrs	r3, r2
 800a3cc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a3ce:	4b27      	ldr	r3, [pc, #156]	; (800a46c <RCCEx_PLL3_Config+0x15c>)
 800a3d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3d2:	4a26      	ldr	r2, [pc, #152]	; (800a46c <RCCEx_PLL3_Config+0x15c>)
 800a3d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a3d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a3da:	4b24      	ldr	r3, [pc, #144]	; (800a46c <RCCEx_PLL3_Config+0x15c>)
 800a3dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a3de:	4b24      	ldr	r3, [pc, #144]	; (800a470 <RCCEx_PLL3_Config+0x160>)
 800a3e0:	4013      	ands	r3, r2
 800a3e2:	687a      	ldr	r2, [r7, #4]
 800a3e4:	69d2      	ldr	r2, [r2, #28]
 800a3e6:	00d2      	lsls	r2, r2, #3
 800a3e8:	4920      	ldr	r1, [pc, #128]	; (800a46c <RCCEx_PLL3_Config+0x15c>)
 800a3ea:	4313      	orrs	r3, r2
 800a3ec:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a3ee:	4b1f      	ldr	r3, [pc, #124]	; (800a46c <RCCEx_PLL3_Config+0x15c>)
 800a3f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3f2:	4a1e      	ldr	r2, [pc, #120]	; (800a46c <RCCEx_PLL3_Config+0x15c>)
 800a3f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a3f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d106      	bne.n	800a40e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a400:	4b1a      	ldr	r3, [pc, #104]	; (800a46c <RCCEx_PLL3_Config+0x15c>)
 800a402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a404:	4a19      	ldr	r2, [pc, #100]	; (800a46c <RCCEx_PLL3_Config+0x15c>)
 800a406:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a40a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a40c:	e00f      	b.n	800a42e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	2b01      	cmp	r3, #1
 800a412:	d106      	bne.n	800a422 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a414:	4b15      	ldr	r3, [pc, #84]	; (800a46c <RCCEx_PLL3_Config+0x15c>)
 800a416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a418:	4a14      	ldr	r2, [pc, #80]	; (800a46c <RCCEx_PLL3_Config+0x15c>)
 800a41a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a41e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a420:	e005      	b.n	800a42e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a422:	4b12      	ldr	r3, [pc, #72]	; (800a46c <RCCEx_PLL3_Config+0x15c>)
 800a424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a426:	4a11      	ldr	r2, [pc, #68]	; (800a46c <RCCEx_PLL3_Config+0x15c>)
 800a428:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a42c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a42e:	4b0f      	ldr	r3, [pc, #60]	; (800a46c <RCCEx_PLL3_Config+0x15c>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	4a0e      	ldr	r2, [pc, #56]	; (800a46c <RCCEx_PLL3_Config+0x15c>)
 800a434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a438:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a43a:	f7f8 fe43 	bl	80030c4 <HAL_GetTick>
 800a43e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a440:	e008      	b.n	800a454 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a442:	f7f8 fe3f 	bl	80030c4 <HAL_GetTick>
 800a446:	4602      	mov	r2, r0
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	1ad3      	subs	r3, r2, r3
 800a44c:	2b02      	cmp	r3, #2
 800a44e:	d901      	bls.n	800a454 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a450:	2303      	movs	r3, #3
 800a452:	e006      	b.n	800a462 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a454:	4b05      	ldr	r3, [pc, #20]	; (800a46c <RCCEx_PLL3_Config+0x15c>)
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d0f0      	beq.n	800a442 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a460:	7bfb      	ldrb	r3, [r7, #15]
}
 800a462:	4618      	mov	r0, r3
 800a464:	3710      	adds	r7, #16
 800a466:	46bd      	mov	sp, r7
 800a468:	bd80      	pop	{r7, pc}
 800a46a:	bf00      	nop
 800a46c:	58024400 	.word	0x58024400
 800a470:	ffff0007 	.word	0xffff0007

0800a474 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b084      	sub	sp, #16
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a47c:	2301      	movs	r3, #1
 800a47e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d071      	beq.n	800a56a <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a48c:	b2db      	uxtb	r3, r3
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d106      	bne.n	800a4a0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	2200      	movs	r2, #0
 800a496:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	f7f8 f8fa 	bl	8002694 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2202      	movs	r2, #2
 800a4a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	68db      	ldr	r3, [r3, #12]
 800a4ae:	f003 0310 	and.w	r3, r3, #16
 800a4b2:	2b10      	cmp	r3, #16
 800a4b4:	d050      	beq.n	800a558 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	22ca      	movs	r2, #202	; 0xca
 800a4bc:	625a      	str	r2, [r3, #36]	; 0x24
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	2253      	movs	r2, #83	; 0x53
 800a4c4:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	f000 fa4a 	bl	800a960 <RTC_EnterInitMode>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800a4d0:	7bfb      	ldrb	r3, [r7, #15]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d124      	bne.n	800a520 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	6899      	ldr	r1, [r3, #8]
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681a      	ldr	r2, [r3, #0]
 800a4e0:	4b24      	ldr	r3, [pc, #144]	; (800a574 <HAL_RTC_Init+0x100>)
 800a4e2:	400b      	ands	r3, r1
 800a4e4:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	6899      	ldr	r1, [r3, #8]
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	685a      	ldr	r2, [r3, #4]
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	691b      	ldr	r3, [r3, #16]
 800a4f4:	431a      	orrs	r2, r3
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	699b      	ldr	r3, [r3, #24]
 800a4fa:	431a      	orrs	r2, r3
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	430a      	orrs	r2, r1
 800a502:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	689b      	ldr	r3, [r3, #8]
 800a508:	0419      	lsls	r1, r3, #16
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	68da      	ldr	r2, [r3, #12]
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	430a      	orrs	r2, r1
 800a514:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	f000 fa56 	bl	800a9c8 <RTC_ExitInitMode>
 800a51c:	4603      	mov	r3, r0
 800a51e:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800a520:	7bfb      	ldrb	r3, [r7, #15]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d113      	bne.n	800a54e <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f022 0203 	bic.w	r2, r2, #3
 800a534:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	69da      	ldr	r2, [r3, #28]
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	695b      	ldr	r3, [r3, #20]
 800a544:	431a      	orrs	r2, r3
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	430a      	orrs	r2, r1
 800a54c:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	22ff      	movs	r2, #255	; 0xff
 800a554:	625a      	str	r2, [r3, #36]	; 0x24
 800a556:	e001      	b.n	800a55c <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800a558:	2300      	movs	r3, #0
 800a55a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800a55c:	7bfb      	ldrb	r3, [r7, #15]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d103      	bne.n	800a56a <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2201      	movs	r2, #1
 800a566:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800a56a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a56c:	4618      	mov	r0, r3
 800a56e:	3710      	adds	r7, #16
 800a570:	46bd      	mov	sp, r7
 800a572:	bd80      	pop	{r7, pc}
 800a574:	ff8fffbf 	.word	0xff8fffbf

0800a578 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a578:	b590      	push	{r4, r7, lr}
 800a57a:	b087      	sub	sp, #28
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	60f8      	str	r0, [r7, #12]
 800a580:	60b9      	str	r1, [r7, #8]
 800a582:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a58a:	2b01      	cmp	r3, #1
 800a58c:	d101      	bne.n	800a592 <HAL_RTC_SetTime+0x1a>
 800a58e:	2302      	movs	r3, #2
 800a590:	e089      	b.n	800a6a6 <HAL_RTC_SetTime+0x12e>
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	2201      	movs	r2, #1
 800a596:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	2202      	movs	r2, #2
 800a59e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	22ca      	movs	r2, #202	; 0xca
 800a5a8:	625a      	str	r2, [r3, #36]	; 0x24
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	2253      	movs	r2, #83	; 0x53
 800a5b0:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a5b2:	68f8      	ldr	r0, [r7, #12]
 800a5b4:	f000 f9d4 	bl	800a960 <RTC_EnterInitMode>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800a5bc:	7cfb      	ldrb	r3, [r7, #19]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d161      	bne.n	800a686 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d126      	bne.n	800a616 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	689b      	ldr	r3, [r3, #8]
 800a5ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d102      	bne.n	800a5dc <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800a5d6:	68bb      	ldr	r3, [r7, #8]
 800a5d8:	2200      	movs	r2, #0
 800a5da:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	781b      	ldrb	r3, [r3, #0]
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	f000 fa2f 	bl	800aa44 <RTC_ByteToBcd2>
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	785b      	ldrb	r3, [r3, #1]
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	f000 fa28 	bl	800aa44 <RTC_ByteToBcd2>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a5f8:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800a5fa:	68bb      	ldr	r3, [r7, #8]
 800a5fc:	789b      	ldrb	r3, [r3, #2]
 800a5fe:	4618      	mov	r0, r3
 800a600:	f000 fa20 	bl	800aa44 <RTC_ByteToBcd2>
 800a604:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a606:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	78db      	ldrb	r3, [r3, #3]
 800a60e:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a610:	4313      	orrs	r3, r2
 800a612:	617b      	str	r3, [r7, #20]
 800a614:	e018      	b.n	800a648 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	689b      	ldr	r3, [r3, #8]
 800a61c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a620:	2b00      	cmp	r3, #0
 800a622:	d102      	bne.n	800a62a <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	2200      	movs	r2, #0
 800a628:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a62a:	68bb      	ldr	r3, [r7, #8]
 800a62c:	781b      	ldrb	r3, [r3, #0]
 800a62e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	785b      	ldrb	r3, [r3, #1]
 800a634:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a636:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800a638:	68ba      	ldr	r2, [r7, #8]
 800a63a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a63c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800a63e:	68bb      	ldr	r3, [r7, #8]
 800a640:	78db      	ldrb	r3, [r3, #3]
 800a642:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a644:	4313      	orrs	r3, r2
 800a646:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	681a      	ldr	r2, [r3, #0]
 800a64c:	6979      	ldr	r1, [r7, #20]
 800a64e:	4b18      	ldr	r3, [pc, #96]	; (800a6b0 <HAL_RTC_SetTime+0x138>)
 800a650:	400b      	ands	r3, r1
 800a652:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	689a      	ldr	r2, [r3, #8]
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a662:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	6899      	ldr	r1, [r3, #8]
 800a66a:	68bb      	ldr	r3, [r7, #8]
 800a66c:	68da      	ldr	r2, [r3, #12]
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	691b      	ldr	r3, [r3, #16]
 800a672:	431a      	orrs	r2, r3
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	430a      	orrs	r2, r1
 800a67a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a67c:	68f8      	ldr	r0, [r7, #12]
 800a67e:	f000 f9a3 	bl	800a9c8 <RTC_ExitInitMode>
 800a682:	4603      	mov	r3, r0
 800a684:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	22ff      	movs	r2, #255	; 0xff
 800a68c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800a68e:	7cfb      	ldrb	r3, [r7, #19]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d103      	bne.n	800a69c <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	2201      	movs	r2, #1
 800a698:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	2200      	movs	r2, #0
 800a6a0:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800a6a4:	7cfb      	ldrb	r3, [r7, #19]
}
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	371c      	adds	r7, #28
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd90      	pop	{r4, r7, pc}
 800a6ae:	bf00      	nop
 800a6b0:	007f7f7f 	.word	0x007f7f7f

0800a6b4 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b086      	sub	sp, #24
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	60f8      	str	r0, [r7, #12]
 800a6bc:	60b9      	str	r1, [r7, #8]
 800a6be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a6c6:	68bb      	ldr	r3, [r7, #8]
 800a6c8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	691b      	ldr	r3, [r3, #16]
 800a6d0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800a6d4:	68bb      	ldr	r3, [r7, #8]
 800a6d6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	681a      	ldr	r2, [r3, #0]
 800a6de:	4b22      	ldr	r3, [pc, #136]	; (800a768 <HAL_RTC_GetTime+0xb4>)
 800a6e0:	4013      	ands	r3, r2
 800a6e2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800a6e4:	697b      	ldr	r3, [r7, #20]
 800a6e6:	0c1b      	lsrs	r3, r3, #16
 800a6e8:	b2db      	uxtb	r3, r3
 800a6ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a6ee:	b2da      	uxtb	r2, r3
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800a6f4:	697b      	ldr	r3, [r7, #20]
 800a6f6:	0a1b      	lsrs	r3, r3, #8
 800a6f8:	b2db      	uxtb	r3, r3
 800a6fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6fe:	b2da      	uxtb	r2, r3
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800a704:	697b      	ldr	r3, [r7, #20]
 800a706:	b2db      	uxtb	r3, r3
 800a708:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a70c:	b2da      	uxtb	r2, r3
 800a70e:	68bb      	ldr	r3, [r7, #8]
 800a710:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	0d9b      	lsrs	r3, r3, #22
 800a716:	b2db      	uxtb	r3, r3
 800a718:	f003 0301 	and.w	r3, r3, #1
 800a71c:	b2da      	uxtb	r2, r3
 800a71e:	68bb      	ldr	r3, [r7, #8]
 800a720:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d11a      	bne.n	800a75e <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800a728:	68bb      	ldr	r3, [r7, #8]
 800a72a:	781b      	ldrb	r3, [r3, #0]
 800a72c:	4618      	mov	r0, r3
 800a72e:	f000 f9a9 	bl	800aa84 <RTC_Bcd2ToByte>
 800a732:	4603      	mov	r3, r0
 800a734:	461a      	mov	r2, r3
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800a73a:	68bb      	ldr	r3, [r7, #8]
 800a73c:	785b      	ldrb	r3, [r3, #1]
 800a73e:	4618      	mov	r0, r3
 800a740:	f000 f9a0 	bl	800aa84 <RTC_Bcd2ToByte>
 800a744:	4603      	mov	r3, r0
 800a746:	461a      	mov	r2, r3
 800a748:	68bb      	ldr	r3, [r7, #8]
 800a74a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	789b      	ldrb	r3, [r3, #2]
 800a750:	4618      	mov	r0, r3
 800a752:	f000 f997 	bl	800aa84 <RTC_Bcd2ToByte>
 800a756:	4603      	mov	r3, r0
 800a758:	461a      	mov	r2, r3
 800a75a:	68bb      	ldr	r3, [r7, #8]
 800a75c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800a75e:	2300      	movs	r3, #0
}
 800a760:	4618      	mov	r0, r3
 800a762:	3718      	adds	r7, #24
 800a764:	46bd      	mov	sp, r7
 800a766:	bd80      	pop	{r7, pc}
 800a768:	007f7f7f 	.word	0x007f7f7f

0800a76c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a76c:	b590      	push	{r4, r7, lr}
 800a76e:	b087      	sub	sp, #28
 800a770:	af00      	add	r7, sp, #0
 800a772:	60f8      	str	r0, [r7, #12]
 800a774:	60b9      	str	r1, [r7, #8]
 800a776:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a77e:	2b01      	cmp	r3, #1
 800a780:	d101      	bne.n	800a786 <HAL_RTC_SetDate+0x1a>
 800a782:	2302      	movs	r3, #2
 800a784:	e073      	b.n	800a86e <HAL_RTC_SetDate+0x102>
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	2201      	movs	r2, #1
 800a78a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	2202      	movs	r2, #2
 800a792:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d10e      	bne.n	800a7ba <HAL_RTC_SetDate+0x4e>
 800a79c:	68bb      	ldr	r3, [r7, #8]
 800a79e:	785b      	ldrb	r3, [r3, #1]
 800a7a0:	f003 0310 	and.w	r3, r3, #16
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d008      	beq.n	800a7ba <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	785b      	ldrb	r3, [r3, #1]
 800a7ac:	f023 0310 	bic.w	r3, r3, #16
 800a7b0:	b2db      	uxtb	r3, r3
 800a7b2:	330a      	adds	r3, #10
 800a7b4:	b2da      	uxtb	r2, r3
 800a7b6:	68bb      	ldr	r3, [r7, #8]
 800a7b8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d11c      	bne.n	800a7fa <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	78db      	ldrb	r3, [r3, #3]
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f000 f93d 	bl	800aa44 <RTC_ByteToBcd2>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	785b      	ldrb	r3, [r3, #1]
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	f000 f936 	bl	800aa44 <RTC_ByteToBcd2>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800a7dc:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	789b      	ldrb	r3, [r3, #2]
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f000 f92e 	bl	800aa44 <RTC_ByteToBcd2>
 800a7e8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a7ea:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	781b      	ldrb	r3, [r3, #0]
 800a7f2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800a7f4:	4313      	orrs	r3, r2
 800a7f6:	617b      	str	r3, [r7, #20]
 800a7f8:	e00e      	b.n	800a818 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800a7fa:	68bb      	ldr	r3, [r7, #8]
 800a7fc:	78db      	ldrb	r3, [r3, #3]
 800a7fe:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800a800:	68bb      	ldr	r3, [r7, #8]
 800a802:	785b      	ldrb	r3, [r3, #1]
 800a804:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800a806:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800a808:	68ba      	ldr	r2, [r7, #8]
 800a80a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800a80c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800a80e:	68bb      	ldr	r3, [r7, #8]
 800a810:	781b      	ldrb	r3, [r3, #0]
 800a812:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800a814:	4313      	orrs	r3, r2
 800a816:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	22ca      	movs	r2, #202	; 0xca
 800a81e:	625a      	str	r2, [r3, #36]	; 0x24
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	2253      	movs	r2, #83	; 0x53
 800a826:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a828:	68f8      	ldr	r0, [r7, #12]
 800a82a:	f000 f899 	bl	800a960 <RTC_EnterInitMode>
 800a82e:	4603      	mov	r3, r0
 800a830:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800a832:	7cfb      	ldrb	r3, [r7, #19]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d10a      	bne.n	800a84e <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	681a      	ldr	r2, [r3, #0]
 800a83c:	6979      	ldr	r1, [r7, #20]
 800a83e:	4b0e      	ldr	r3, [pc, #56]	; (800a878 <HAL_RTC_SetDate+0x10c>)
 800a840:	400b      	ands	r3, r1
 800a842:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a844:	68f8      	ldr	r0, [r7, #12]
 800a846:	f000 f8bf 	bl	800a9c8 <RTC_ExitInitMode>
 800a84a:	4603      	mov	r3, r0
 800a84c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	22ff      	movs	r2, #255	; 0xff
 800a854:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800a856:	7cfb      	ldrb	r3, [r7, #19]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d103      	bne.n	800a864 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	2201      	movs	r2, #1
 800a860:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	2200      	movs	r2, #0
 800a868:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800a86c:	7cfb      	ldrb	r3, [r7, #19]


}
 800a86e:	4618      	mov	r0, r3
 800a870:	371c      	adds	r7, #28
 800a872:	46bd      	mov	sp, r7
 800a874:	bd90      	pop	{r4, r7, pc}
 800a876:	bf00      	nop
 800a878:	00ffff3f 	.word	0x00ffff3f

0800a87c <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b086      	sub	sp, #24
 800a880:	af00      	add	r7, sp, #0
 800a882:	60f8      	str	r0, [r7, #12]
 800a884:	60b9      	str	r1, [r7, #8]
 800a886:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	685a      	ldr	r2, [r3, #4]
 800a88e:	4b21      	ldr	r3, [pc, #132]	; (800a914 <HAL_RTC_GetDate+0x98>)
 800a890:	4013      	ands	r3, r2
 800a892:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800a894:	697b      	ldr	r3, [r7, #20]
 800a896:	0c1b      	lsrs	r3, r3, #16
 800a898:	b2da      	uxtb	r2, r3
 800a89a:	68bb      	ldr	r3, [r7, #8]
 800a89c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800a89e:	697b      	ldr	r3, [r7, #20]
 800a8a0:	0a1b      	lsrs	r3, r3, #8
 800a8a2:	b2db      	uxtb	r3, r3
 800a8a4:	f003 031f 	and.w	r3, r3, #31
 800a8a8:	b2da      	uxtb	r2, r3
 800a8aa:	68bb      	ldr	r3, [r7, #8]
 800a8ac:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800a8ae:	697b      	ldr	r3, [r7, #20]
 800a8b0:	b2db      	uxtb	r3, r3
 800a8b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a8b6:	b2da      	uxtb	r2, r3
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800a8bc:	697b      	ldr	r3, [r7, #20]
 800a8be:	0b5b      	lsrs	r3, r3, #13
 800a8c0:	b2db      	uxtb	r3, r3
 800a8c2:	f003 0307 	and.w	r3, r3, #7
 800a8c6:	b2da      	uxtb	r2, r3
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d11a      	bne.n	800a908 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800a8d2:	68bb      	ldr	r3, [r7, #8]
 800a8d4:	78db      	ldrb	r3, [r3, #3]
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	f000 f8d4 	bl	800aa84 <RTC_Bcd2ToByte>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	461a      	mov	r2, r3
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	785b      	ldrb	r3, [r3, #1]
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	f000 f8cb 	bl	800aa84 <RTC_Bcd2ToByte>
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	461a      	mov	r2, r3
 800a8f2:	68bb      	ldr	r3, [r7, #8]
 800a8f4:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800a8f6:	68bb      	ldr	r3, [r7, #8]
 800a8f8:	789b      	ldrb	r3, [r3, #2]
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	f000 f8c2 	bl	800aa84 <RTC_Bcd2ToByte>
 800a900:	4603      	mov	r3, r0
 800a902:	461a      	mov	r2, r3
 800a904:	68bb      	ldr	r3, [r7, #8]
 800a906:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800a908:	2300      	movs	r3, #0
}
 800a90a:	4618      	mov	r0, r3
 800a90c:	3718      	adds	r7, #24
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd80      	pop	{r7, pc}
 800a912:	bf00      	nop
 800a914:	00ffff3f 	.word	0x00ffff3f

0800a918 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b084      	sub	sp, #16
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	4a0d      	ldr	r2, [pc, #52]	; (800a95c <HAL_RTC_WaitForSynchro+0x44>)
 800a926:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800a928:	f7f8 fbcc 	bl	80030c4 <HAL_GetTick>
 800a92c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a92e:	e009      	b.n	800a944 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a930:	f7f8 fbc8 	bl	80030c4 <HAL_GetTick>
 800a934:	4602      	mov	r2, r0
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	1ad3      	subs	r3, r2, r3
 800a93a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a93e:	d901      	bls.n	800a944 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800a940:	2303      	movs	r3, #3
 800a942:	e007      	b.n	800a954 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	68db      	ldr	r3, [r3, #12]
 800a94a:	f003 0320 	and.w	r3, r3, #32
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d0ee      	beq.n	800a930 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800a952:	2300      	movs	r3, #0
}
 800a954:	4618      	mov	r0, r3
 800a956:	3710      	adds	r7, #16
 800a958:	46bd      	mov	sp, r7
 800a95a:	bd80      	pop	{r7, pc}
 800a95c:	0003ff5f 	.word	0x0003ff5f

0800a960 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b084      	sub	sp, #16
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a968:	2300      	movs	r3, #0
 800a96a:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	68db      	ldr	r3, [r3, #12]
 800a972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a976:	2b00      	cmp	r3, #0
 800a978:	d120      	bne.n	800a9bc <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	f04f 32ff 	mov.w	r2, #4294967295
 800a982:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800a984:	f7f8 fb9e 	bl	80030c4 <HAL_GetTick>
 800a988:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a98a:	e00d      	b.n	800a9a8 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800a98c:	f7f8 fb9a 	bl	80030c4 <HAL_GetTick>
 800a990:	4602      	mov	r2, r0
 800a992:	68bb      	ldr	r3, [r7, #8]
 800a994:	1ad3      	subs	r3, r2, r3
 800a996:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a99a:	d905      	bls.n	800a9a8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800a99c:	2303      	movs	r3, #3
 800a99e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2203      	movs	r2, #3
 800a9a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	68db      	ldr	r3, [r3, #12]
 800a9ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d102      	bne.n	800a9bc <RTC_EnterInitMode+0x5c>
 800a9b6:	7bfb      	ldrb	r3, [r7, #15]
 800a9b8:	2b03      	cmp	r3, #3
 800a9ba:	d1e7      	bne.n	800a98c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800a9bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9be:	4618      	mov	r0, r3
 800a9c0:	3710      	adds	r7, #16
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	bd80      	pop	{r7, pc}
	...

0800a9c8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b084      	sub	sp, #16
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 800a9d4:	4b1a      	ldr	r3, [pc, #104]	; (800aa40 <RTC_ExitInitMode+0x78>)
 800a9d6:	68db      	ldr	r3, [r3, #12]
 800a9d8:	4a19      	ldr	r2, [pc, #100]	; (800aa40 <RTC_ExitInitMode+0x78>)
 800a9da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a9de:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800a9e0:	4b17      	ldr	r3, [pc, #92]	; (800aa40 <RTC_ExitInitMode+0x78>)
 800a9e2:	689b      	ldr	r3, [r3, #8]
 800a9e4:	f003 0320 	and.w	r3, r3, #32
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d10c      	bne.n	800aa06 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a9ec:	6878      	ldr	r0, [r7, #4]
 800a9ee:	f7ff ff93 	bl	800a918 <HAL_RTC_WaitForSynchro>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d01e      	beq.n	800aa36 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2203      	movs	r2, #3
 800a9fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800aa00:	2303      	movs	r3, #3
 800aa02:	73fb      	strb	r3, [r7, #15]
 800aa04:	e017      	b.n	800aa36 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800aa06:	4b0e      	ldr	r3, [pc, #56]	; (800aa40 <RTC_ExitInitMode+0x78>)
 800aa08:	689b      	ldr	r3, [r3, #8]
 800aa0a:	4a0d      	ldr	r2, [pc, #52]	; (800aa40 <RTC_ExitInitMode+0x78>)
 800aa0c:	f023 0320 	bic.w	r3, r3, #32
 800aa10:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	f7ff ff80 	bl	800a918 <HAL_RTC_WaitForSynchro>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d005      	beq.n	800aa2a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	2203      	movs	r2, #3
 800aa22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800aa26:	2303      	movs	r3, #3
 800aa28:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800aa2a:	4b05      	ldr	r3, [pc, #20]	; (800aa40 <RTC_ExitInitMode+0x78>)
 800aa2c:	689b      	ldr	r3, [r3, #8]
 800aa2e:	4a04      	ldr	r2, [pc, #16]	; (800aa40 <RTC_ExitInitMode+0x78>)
 800aa30:	f043 0320 	orr.w	r3, r3, #32
 800aa34:	6093      	str	r3, [r2, #8]
  }

  return status;
 800aa36:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa38:	4618      	mov	r0, r3
 800aa3a:	3710      	adds	r7, #16
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	bd80      	pop	{r7, pc}
 800aa40:	58004000 	.word	0x58004000

0800aa44 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800aa44:	b480      	push	{r7}
 800aa46:	b085      	sub	sp, #20
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800aa4e:	2300      	movs	r3, #0
 800aa50:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800aa52:	79fb      	ldrb	r3, [r7, #7]
 800aa54:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800aa56:	e005      	b.n	800aa64 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	3301      	adds	r3, #1
 800aa5c:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800aa5e:	7afb      	ldrb	r3, [r7, #11]
 800aa60:	3b0a      	subs	r3, #10
 800aa62:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800aa64:	7afb      	ldrb	r3, [r7, #11]
 800aa66:	2b09      	cmp	r3, #9
 800aa68:	d8f6      	bhi.n	800aa58 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	b2db      	uxtb	r3, r3
 800aa6e:	011b      	lsls	r3, r3, #4
 800aa70:	b2da      	uxtb	r2, r3
 800aa72:	7afb      	ldrb	r3, [r7, #11]
 800aa74:	4313      	orrs	r3, r2
 800aa76:	b2db      	uxtb	r3, r3
}
 800aa78:	4618      	mov	r0, r3
 800aa7a:	3714      	adds	r7, #20
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa82:	4770      	bx	lr

0800aa84 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800aa84:	b480      	push	{r7}
 800aa86:	b085      	sub	sp, #20
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800aa8e:	79fb      	ldrb	r3, [r7, #7]
 800aa90:	091b      	lsrs	r3, r3, #4
 800aa92:	b2db      	uxtb	r3, r3
 800aa94:	461a      	mov	r2, r3
 800aa96:	0092      	lsls	r2, r2, #2
 800aa98:	4413      	add	r3, r2
 800aa9a:	005b      	lsls	r3, r3, #1
 800aa9c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800aa9e:	79fb      	ldrb	r3, [r7, #7]
 800aaa0:	f003 030f 	and.w	r3, r3, #15
 800aaa4:	b2da      	uxtb	r2, r3
 800aaa6:	7bfb      	ldrb	r3, [r7, #15]
 800aaa8:	4413      	add	r3, r2
 800aaaa:	b2db      	uxtb	r3, r3
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	3714      	adds	r7, #20
 800aab0:	46bd      	mov	sp, r7
 800aab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab6:	4770      	bx	lr

0800aab8 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b08a      	sub	sp, #40	; 0x28
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d101      	bne.n	800aaca <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800aac6:	2301      	movs	r3, #1
 800aac8:	e28e      	b.n	800afe8 <HAL_SAI_Init+0x530>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800aaca:	f7f8 fb2b 	bl	8003124 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800aad4:	2b01      	cmp	r3, #1
 800aad6:	d113      	bne.n	800ab00 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	4a96      	ldr	r2, [pc, #600]	; (800ad38 <HAL_SAI_Init+0x280>)
 800aade:	4293      	cmp	r3, r2
 800aae0:	d004      	beq.n	800aaec <HAL_SAI_Init+0x34>
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	4a95      	ldr	r2, [pc, #596]	; (800ad3c <HAL_SAI_Init+0x284>)
 800aae8:	4293      	cmp	r3, r2
 800aaea:	d107      	bne.n	800aafc <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800aaf0:	2b01      	cmp	r3, #1
 800aaf2:	d103      	bne.n	800aafc <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d001      	beq.n	800ab00 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 800aafc:	2301      	movs	r3, #1
 800aafe:	e273      	b.n	800afe8 <HAL_SAI_Init+0x530>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	4a8c      	ldr	r2, [pc, #560]	; (800ad38 <HAL_SAI_Init+0x280>)
 800ab06:	4293      	cmp	r3, r2
 800ab08:	d004      	beq.n	800ab14 <HAL_SAI_Init+0x5c>
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	4a8c      	ldr	r2, [pc, #560]	; (800ad40 <HAL_SAI_Init+0x288>)
 800ab10:	4293      	cmp	r3, r2
 800ab12:	d102      	bne.n	800ab1a <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 800ab14:	4b8b      	ldr	r3, [pc, #556]	; (800ad44 <HAL_SAI_Init+0x28c>)
 800ab16:	61bb      	str	r3, [r7, #24]
 800ab18:	e028      	b.n	800ab6c <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	4a8a      	ldr	r2, [pc, #552]	; (800ad48 <HAL_SAI_Init+0x290>)
 800ab20:	4293      	cmp	r3, r2
 800ab22:	d004      	beq.n	800ab2e <HAL_SAI_Init+0x76>
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	4a88      	ldr	r2, [pc, #544]	; (800ad4c <HAL_SAI_Init+0x294>)
 800ab2a:	4293      	cmp	r3, r2
 800ab2c:	d102      	bne.n	800ab34 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 800ab2e:	4b88      	ldr	r3, [pc, #544]	; (800ad50 <HAL_SAI_Init+0x298>)
 800ab30:	61bb      	str	r3, [r7, #24]
 800ab32:	e01b      	b.n	800ab6c <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	4a86      	ldr	r2, [pc, #536]	; (800ad54 <HAL_SAI_Init+0x29c>)
 800ab3a:	4293      	cmp	r3, r2
 800ab3c:	d004      	beq.n	800ab48 <HAL_SAI_Init+0x90>
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	4a85      	ldr	r2, [pc, #532]	; (800ad58 <HAL_SAI_Init+0x2a0>)
 800ab44:	4293      	cmp	r3, r2
 800ab46:	d102      	bne.n	800ab4e <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 800ab48:	4b84      	ldr	r3, [pc, #528]	; (800ad5c <HAL_SAI_Init+0x2a4>)
 800ab4a:	61bb      	str	r3, [r7, #24]
 800ab4c:	e00e      	b.n	800ab6c <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	4a7a      	ldr	r2, [pc, #488]	; (800ad3c <HAL_SAI_Init+0x284>)
 800ab54:	4293      	cmp	r3, r2
 800ab56:	d004      	beq.n	800ab62 <HAL_SAI_Init+0xaa>
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	4a80      	ldr	r2, [pc, #512]	; (800ad60 <HAL_SAI_Init+0x2a8>)
 800ab5e:	4293      	cmp	r3, r2
 800ab60:	d102      	bne.n	800ab68 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 800ab62:	4b80      	ldr	r3, [pc, #512]	; (800ad64 <HAL_SAI_Init+0x2ac>)
 800ab64:	61bb      	str	r3, [r7, #24]
 800ab66:	e001      	b.n	800ab6c <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800ab68:	2301      	movs	r3, #1
 800ab6a:	e23d      	b.n	800afe8 <HAL_SAI_Init+0x530>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800ab72:	b2db      	uxtb	r3, r3
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d106      	bne.n	800ab86 <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800ab80:	6878      	ldr	r0, [r7, #4]
 800ab82:	f7f8 f859 	bl	8002c38 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800ab86:	6878      	ldr	r0, [r7, #4]
 800ab88:	f000 fa40 	bl	800b00c <SAI_Disable>
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d001      	beq.n	800ab96 <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 800ab92:	2301      	movs	r3, #1
 800ab94:	e228      	b.n	800afe8 <HAL_SAI_Init+0x530>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	2202      	movs	r2, #2
 800ab9a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	68db      	ldr	r3, [r3, #12]
 800aba2:	2b02      	cmp	r3, #2
 800aba4:	d00c      	beq.n	800abc0 <HAL_SAI_Init+0x108>
 800aba6:	2b02      	cmp	r3, #2
 800aba8:	d80d      	bhi.n	800abc6 <HAL_SAI_Init+0x10e>
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d002      	beq.n	800abb4 <HAL_SAI_Init+0xfc>
 800abae:	2b01      	cmp	r3, #1
 800abb0:	d003      	beq.n	800abba <HAL_SAI_Init+0x102>
 800abb2:	e008      	b.n	800abc6 <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800abb4:	2300      	movs	r3, #0
 800abb6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800abb8:	e008      	b.n	800abcc <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800abba:	2310      	movs	r3, #16
 800abbc:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800abbe:	e005      	b.n	800abcc <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800abc0:	2320      	movs	r3, #32
 800abc2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800abc4:	e002      	b.n	800abcc <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 800abc6:	2300      	movs	r3, #0
 800abc8:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800abca:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	689b      	ldr	r3, [r3, #8]
 800abd0:	2b05      	cmp	r3, #5
 800abd2:	d832      	bhi.n	800ac3a <HAL_SAI_Init+0x182>
 800abd4:	a201      	add	r2, pc, #4	; (adr r2, 800abdc <HAL_SAI_Init+0x124>)
 800abd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abda:	bf00      	nop
 800abdc:	0800abf5 	.word	0x0800abf5
 800abe0:	0800abfb 	.word	0x0800abfb
 800abe4:	0800ac03 	.word	0x0800ac03
 800abe8:	0800ac0b 	.word	0x0800ac0b
 800abec:	0800ac1b 	.word	0x0800ac1b
 800abf0:	0800ac2b 	.word	0x0800ac2b
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800abf4:	2300      	movs	r3, #0
 800abf6:	61fb      	str	r3, [r7, #28]
      break;
 800abf8:	e022      	b.n	800ac40 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800abfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800abfe:	61fb      	str	r3, [r7, #28]
      break;
 800ac00:	e01e      	b.n	800ac40 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800ac02:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ac06:	61fb      	str	r3, [r7, #28]
      break;
 800ac08:	e01a      	b.n	800ac40 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800ac0a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ac0e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800ac10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac12:	f043 0301 	orr.w	r3, r3, #1
 800ac16:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800ac18:	e012      	b.n	800ac40 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800ac1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ac1e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 800ac20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac22:	f043 0302 	orr.w	r3, r3, #2
 800ac26:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800ac28:	e00a      	b.n	800ac40 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800ac2a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ac2e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800ac30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac32:	f043 0303 	orr.w	r3, r3, #3
 800ac36:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800ac38:	e002      	b.n	800ac40 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	61fb      	str	r3, [r7, #28]
      break;
 800ac3e:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 800ac40:	69bb      	ldr	r3, [r7, #24]
 800ac42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac44:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6a1b      	ldr	r3, [r3, #32]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	f000 80c5 	beq.w	800adda <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 800ac50:	2300      	movs	r3, #0
 800ac52:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	4a37      	ldr	r2, [pc, #220]	; (800ad38 <HAL_SAI_Init+0x280>)
 800ac5a:	4293      	cmp	r3, r2
 800ac5c:	d004      	beq.n	800ac68 <HAL_SAI_Init+0x1b0>
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	4a37      	ldr	r2, [pc, #220]	; (800ad40 <HAL_SAI_Init+0x288>)
 800ac64:	4293      	cmp	r3, r2
 800ac66:	d106      	bne.n	800ac76 <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800ac68:	f44f 7080 	mov.w	r0, #256	; 0x100
 800ac6c:	f04f 0100 	mov.w	r1, #0
 800ac70:	f7fe f90c 	bl	8008e8c <HAL_RCCEx_GetPeriphCLKFreq>
 800ac74:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	4a33      	ldr	r2, [pc, #204]	; (800ad48 <HAL_SAI_Init+0x290>)
 800ac7c:	4293      	cmp	r3, r2
 800ac7e:	d004      	beq.n	800ac8a <HAL_SAI_Init+0x1d2>
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	4a31      	ldr	r2, [pc, #196]	; (800ad4c <HAL_SAI_Init+0x294>)
 800ac86:	4293      	cmp	r3, r2
 800ac88:	d106      	bne.n	800ac98 <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800ac8a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800ac8e:	f04f 0100 	mov.w	r1, #0
 800ac92:	f7fe f8fb 	bl	8008e8c <HAL_RCCEx_GetPeriphCLKFreq>
 800ac96:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	4a2d      	ldr	r2, [pc, #180]	; (800ad54 <HAL_SAI_Init+0x29c>)
 800ac9e:	4293      	cmp	r3, r2
 800aca0:	d004      	beq.n	800acac <HAL_SAI_Init+0x1f4>
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	4a2c      	ldr	r2, [pc, #176]	; (800ad58 <HAL_SAI_Init+0x2a0>)
 800aca8:	4293      	cmp	r3, r2
 800acaa:	d106      	bne.n	800acba <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 800acac:	f44f 7000 	mov.w	r0, #512	; 0x200
 800acb0:	f04f 0100 	mov.w	r1, #0
 800acb4:	f7fe f8ea 	bl	8008e8c <HAL_RCCEx_GetPeriphCLKFreq>
 800acb8:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	4a1f      	ldr	r2, [pc, #124]	; (800ad3c <HAL_SAI_Init+0x284>)
 800acc0:	4293      	cmp	r3, r2
 800acc2:	d106      	bne.n	800acd2 <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800acc4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800acc8:	f04f 0100 	mov.w	r1, #0
 800accc:	f7fe f8de 	bl	8008e8c <HAL_RCCEx_GetPeriphCLKFreq>
 800acd0:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	4a22      	ldr	r2, [pc, #136]	; (800ad60 <HAL_SAI_Init+0x2a8>)
 800acd8:	4293      	cmp	r3, r2
 800acda:	d106      	bne.n	800acea <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800acdc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800ace0:	f04f 0100 	mov.w	r1, #0
 800ace4:	f7fe f8d2 	bl	8008e8c <HAL_RCCEx_GetPeriphCLKFreq>
 800ace8:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	699b      	ldr	r3, [r3, #24]
 800acee:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800acf2:	d139      	bne.n	800ad68 <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acf8:	2b04      	cmp	r3, #4
 800acfa:	d102      	bne.n	800ad02 <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800acfc:	2340      	movs	r3, #64	; 0x40
 800acfe:	60fb      	str	r3, [r7, #12]
 800ad00:	e00a      	b.n	800ad18 <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad06:	2b08      	cmp	r3, #8
 800ad08:	d103      	bne.n	800ad12 <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800ad0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ad0e:	60fb      	str	r3, [r7, #12]
 800ad10:	e002      	b.n	800ad18 <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad16:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800ad18:	697a      	ldr	r2, [r7, #20]
 800ad1a:	4613      	mov	r3, r2
 800ad1c:	009b      	lsls	r3, r3, #2
 800ad1e:	4413      	add	r3, r2
 800ad20:	005b      	lsls	r3, r3, #1
 800ad22:	4619      	mov	r1, r3
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	6a1b      	ldr	r3, [r3, #32]
 800ad28:	68fa      	ldr	r2, [r7, #12]
 800ad2a:	fb02 f303 	mul.w	r3, r2, r3
 800ad2e:	fbb1 f3f3 	udiv	r3, r1, r3
 800ad32:	613b      	str	r3, [r7, #16]
 800ad34:	e030      	b.n	800ad98 <HAL_SAI_Init+0x2e0>
 800ad36:	bf00      	nop
 800ad38:	40015804 	.word	0x40015804
 800ad3c:	58005404 	.word	0x58005404
 800ad40:	40015824 	.word	0x40015824
 800ad44:	40015800 	.word	0x40015800
 800ad48:	40015c04 	.word	0x40015c04
 800ad4c:	40015c24 	.word	0x40015c24
 800ad50:	40015c00 	.word	0x40015c00
 800ad54:	40016004 	.word	0x40016004
 800ad58:	40016024 	.word	0x40016024
 800ad5c:	40016000 	.word	0x40016000
 800ad60:	58005424 	.word	0x58005424
 800ad64:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad6c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ad70:	d101      	bne.n	800ad76 <HAL_SAI_Init+0x2be>
 800ad72:	2302      	movs	r3, #2
 800ad74:	e000      	b.n	800ad78 <HAL_SAI_Init+0x2c0>
 800ad76:	2301      	movs	r3, #1
 800ad78:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800ad7a:	697a      	ldr	r2, [r7, #20]
 800ad7c:	4613      	mov	r3, r2
 800ad7e:	009b      	lsls	r3, r3, #2
 800ad80:	4413      	add	r3, r2
 800ad82:	005b      	lsls	r3, r3, #1
 800ad84:	4619      	mov	r1, r3
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6a1b      	ldr	r3, [r3, #32]
 800ad8a:	68ba      	ldr	r2, [r7, #8]
 800ad8c:	fb02 f303 	mul.w	r3, r2, r3
 800ad90:	021b      	lsls	r3, r3, #8
 800ad92:	fbb1 f3f3 	udiv	r3, r1, r3
 800ad96:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800ad98:	693b      	ldr	r3, [r7, #16]
 800ad9a:	4a95      	ldr	r2, [pc, #596]	; (800aff0 <HAL_SAI_Init+0x538>)
 800ad9c:	fba2 2303 	umull	r2, r3, r2, r3
 800ada0:	08da      	lsrs	r2, r3, #3
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800ada6:	6939      	ldr	r1, [r7, #16]
 800ada8:	4b91      	ldr	r3, [pc, #580]	; (800aff0 <HAL_SAI_Init+0x538>)
 800adaa:	fba3 2301 	umull	r2, r3, r3, r1
 800adae:	08da      	lsrs	r2, r3, #3
 800adb0:	4613      	mov	r3, r2
 800adb2:	009b      	lsls	r3, r3, #2
 800adb4:	4413      	add	r3, r2
 800adb6:	005b      	lsls	r3, r3, #1
 800adb8:	1aca      	subs	r2, r1, r3
 800adba:	2a08      	cmp	r2, #8
 800adbc:	d904      	bls.n	800adc8 <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adc2:	1c5a      	adds	r2, r3, #1
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adcc:	2b04      	cmp	r3, #4
 800adce:	d104      	bne.n	800adda <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800add4:	085a      	lsrs	r2, r3, #1
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	685b      	ldr	r3, [r3, #4]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d003      	beq.n	800adea <HAL_SAI_Init+0x332>
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	685b      	ldr	r3, [r3, #4]
 800ade6:	2b02      	cmp	r3, #2
 800ade8:	d109      	bne.n	800adfe <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adee:	2b01      	cmp	r3, #1
 800adf0:	d101      	bne.n	800adf6 <HAL_SAI_Init+0x33e>
 800adf2:	2300      	movs	r3, #0
 800adf4:	e001      	b.n	800adfa <HAL_SAI_Init+0x342>
 800adf6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800adfa:	623b      	str	r3, [r7, #32]
 800adfc:	e008      	b.n	800ae10 <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae02:	2b01      	cmp	r3, #1
 800ae04:	d102      	bne.n	800ae0c <HAL_SAI_Init+0x354>
 800ae06:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ae0a:	e000      	b.n	800ae0e <HAL_SAI_Init+0x356>
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800ae10:	f7f8 f988 	bl	8003124 <HAL_GetREVID>
 800ae14:	4603      	mov	r3, r0
 800ae16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae1a:	d331      	bcc.n	800ae80 <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	6819      	ldr	r1, [r3, #0]
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681a      	ldr	r2, [r3, #0]
 800ae26:	4b73      	ldr	r3, [pc, #460]	; (800aff4 <HAL_SAI_Init+0x53c>)
 800ae28:	400b      	ands	r3, r1
 800ae2a:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	6819      	ldr	r1, [r3, #0]
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	685a      	ldr	r2, [r3, #4]
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae3a:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ae40:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae46:	431a      	orrs	r2, r3
 800ae48:	6a3b      	ldr	r3, [r7, #32]
 800ae4a:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800ae4c:	69fb      	ldr	r3, [r7, #28]
 800ae4e:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800ae54:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	695b      	ldr	r3, [r3, #20]
 800ae5a:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ae60:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae66:	051b      	lsls	r3, r3, #20
 800ae68:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800ae6e:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	691b      	ldr	r3, [r3, #16]
 800ae74:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	430a      	orrs	r2, r1
 800ae7c:	601a      	str	r2, [r3, #0]
 800ae7e:	e02d      	b.n	800aedc <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	6819      	ldr	r1, [r3, #0]
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681a      	ldr	r2, [r3, #0]
 800ae8a:	4b5b      	ldr	r3, [pc, #364]	; (800aff8 <HAL_SAI_Init+0x540>)
 800ae8c:	400b      	ands	r3, r1
 800ae8e:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	6819      	ldr	r1, [r3, #0]
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	685a      	ldr	r2, [r3, #4]
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae9e:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800aea4:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aeaa:	431a      	orrs	r2, r3
 800aeac:	6a3b      	ldr	r3, [r7, #32]
 800aeae:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800aeb0:	69fb      	ldr	r3, [r7, #28]
 800aeb2:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800aeb8:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	695b      	ldr	r3, [r3, #20]
 800aebe:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800aec4:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeca:	051b      	lsls	r3, r3, #20
 800aecc:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800aed2:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	430a      	orrs	r2, r1
 800aeda:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	6859      	ldr	r1, [r3, #4]
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681a      	ldr	r2, [r3, #0]
 800aee6:	4b45      	ldr	r3, [pc, #276]	; (800affc <HAL_SAI_Init+0x544>)
 800aee8:	400b      	ands	r3, r1
 800aeea:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	6859      	ldr	r1, [r3, #4]
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	69da      	ldr	r2, [r3, #28]
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aefa:	431a      	orrs	r2, r3
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af00:	431a      	orrs	r2, r3
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	430a      	orrs	r2, r1
 800af08:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	6899      	ldr	r1, [r3, #8]
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681a      	ldr	r2, [r3, #0]
 800af14:	4b3a      	ldr	r3, [pc, #232]	; (800b000 <HAL_SAI_Init+0x548>)
 800af16:	400b      	ands	r3, r1
 800af18:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	6899      	ldr	r1, [r3, #8]
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af24:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800af2a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 800af30:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 800af36:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af3c:	3b01      	subs	r3, #1
 800af3e:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800af40:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	430a      	orrs	r2, r1
 800af48:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	68d9      	ldr	r1, [r3, #12]
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681a      	ldr	r2, [r3, #0]
 800af54:	f24f 0320 	movw	r3, #61472	; 0xf020
 800af58:	400b      	ands	r3, r1
 800af5a:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	68d9      	ldr	r1, [r3, #12]
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af6a:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af70:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800af72:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af78:	3b01      	subs	r3, #1
 800af7a:	021b      	lsls	r3, r3, #8
 800af7c:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	430a      	orrs	r2, r1
 800af84:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	4a1e      	ldr	r2, [pc, #120]	; (800b004 <HAL_SAI_Init+0x54c>)
 800af8c:	4293      	cmp	r3, r2
 800af8e:	d004      	beq.n	800af9a <HAL_SAI_Init+0x4e2>
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	4a1c      	ldr	r2, [pc, #112]	; (800b008 <HAL_SAI_Init+0x550>)
 800af96:	4293      	cmp	r3, r2
 800af98:	d119      	bne.n	800afce <HAL_SAI_Init+0x516>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800af9a:	69bb      	ldr	r3, [r7, #24]
 800af9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af9e:	f023 0201 	bic.w	r2, r3, #1
 800afa2:	69bb      	ldr	r3, [r7, #24]
 800afa4:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800afac:	2b01      	cmp	r3, #1
 800afae:	d10e      	bne.n	800afce <HAL_SAI_Init+0x516>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afb8:	3b01      	subs	r3, #1
 800afba:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800afbc:	431a      	orrs	r2, r3
 800afbe:	69bb      	ldr	r3, [r7, #24]
 800afc0:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800afc2:	69bb      	ldr	r3, [r7, #24]
 800afc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afc6:	f043 0201 	orr.w	r2, r3, #1
 800afca:	69bb      	ldr	r3, [r7, #24]
 800afcc:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	2200      	movs	r2, #0
 800afd2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	2201      	movs	r2, #1
 800afda:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	2200      	movs	r2, #0
 800afe2:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 800afe6:	2300      	movs	r3, #0
}
 800afe8:	4618      	mov	r0, r3
 800afea:	3728      	adds	r7, #40	; 0x28
 800afec:	46bd      	mov	sp, r7
 800afee:	bd80      	pop	{r7, pc}
 800aff0:	cccccccd 	.word	0xcccccccd
 800aff4:	f005c010 	.word	0xf005c010
 800aff8:	f805c010 	.word	0xf805c010
 800affc:	ffff1ff0 	.word	0xffff1ff0
 800b000:	fff88000 	.word	0xfff88000
 800b004:	40015804 	.word	0x40015804
 800b008:	58005404 	.word	0x58005404

0800b00c <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800b00c:	b480      	push	{r7}
 800b00e:	b085      	sub	sp, #20
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800b014:	4b18      	ldr	r3, [pc, #96]	; (800b078 <SAI_Disable+0x6c>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	4a18      	ldr	r2, [pc, #96]	; (800b07c <SAI_Disable+0x70>)
 800b01a:	fba2 2303 	umull	r2, r3, r2, r3
 800b01e:	0b1b      	lsrs	r3, r3, #12
 800b020:	009b      	lsls	r3, r3, #2
 800b022:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800b024:	2300      	movs	r3, #0
 800b026:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	681a      	ldr	r2, [r3, #0]
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800b036:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d10a      	bne.n	800b054 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b044:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 800b04e:	2303      	movs	r3, #3
 800b050:	72fb      	strb	r3, [r7, #11]
      break;
 800b052:	e009      	b.n	800b068 <SAI_Disable+0x5c>
    }
    count--;
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	3b01      	subs	r3, #1
 800b058:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b064:	2b00      	cmp	r3, #0
 800b066:	d1e7      	bne.n	800b038 <SAI_Disable+0x2c>

  return status;
 800b068:	7afb      	ldrb	r3, [r7, #11]
}
 800b06a:	4618      	mov	r0, r3
 800b06c:	3714      	adds	r7, #20
 800b06e:	46bd      	mov	sp, r7
 800b070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b074:	4770      	bx	lr
 800b076:	bf00      	nop
 800b078:	2400002c 	.word	0x2400002c
 800b07c:	95cbec1b 	.word	0x95cbec1b

0800b080 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b082      	sub	sp, #8
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
 800b088:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d101      	bne.n	800b094 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800b090:	2301      	movs	r3, #1
 800b092:	e02b      	b.n	800b0ec <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b09a:	b2db      	uxtb	r3, r3
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d106      	bne.n	800b0ae <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800b0a8:	6878      	ldr	r0, [r7, #4]
 800b0aa:	f7f7 fdbb 	bl	8002c24 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	2202      	movs	r2, #2
 800b0b2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681a      	ldr	r2, [r3, #0]
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	3304      	adds	r3, #4
 800b0be:	4619      	mov	r1, r3
 800b0c0:	4610      	mov	r0, r2
 800b0c2:	f003 f905 	bl	800e2d0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6818      	ldr	r0, [r3, #0]
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	685b      	ldr	r3, [r3, #4]
 800b0ce:	461a      	mov	r2, r3
 800b0d0:	6839      	ldr	r1, [r7, #0]
 800b0d2:	f003 f959 	bl	800e388 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800b0d6:	4b07      	ldr	r3, [pc, #28]	; (800b0f4 <HAL_SDRAM_Init+0x74>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	4a06      	ldr	r2, [pc, #24]	; (800b0f4 <HAL_SDRAM_Init+0x74>)
 800b0dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b0e0:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	2201      	movs	r2, #1
 800b0e6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b0ea:	2300      	movs	r3, #0
}
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	3708      	adds	r7, #8
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	bd80      	pop	{r7, pc}
 800b0f4:	52004000 	.word	0x52004000

0800b0f8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b084      	sub	sp, #16
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d101      	bne.n	800b10a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b106:	2301      	movs	r3, #1
 800b108:	e10f      	b.n	800b32a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	2200      	movs	r2, #0
 800b10e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	4a87      	ldr	r2, [pc, #540]	; (800b334 <HAL_SPI_Init+0x23c>)
 800b116:	4293      	cmp	r3, r2
 800b118:	d00f      	beq.n	800b13a <HAL_SPI_Init+0x42>
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	4a86      	ldr	r2, [pc, #536]	; (800b338 <HAL_SPI_Init+0x240>)
 800b120:	4293      	cmp	r3, r2
 800b122:	d00a      	beq.n	800b13a <HAL_SPI_Init+0x42>
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	4a84      	ldr	r2, [pc, #528]	; (800b33c <HAL_SPI_Init+0x244>)
 800b12a:	4293      	cmp	r3, r2
 800b12c:	d005      	beq.n	800b13a <HAL_SPI_Init+0x42>
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	68db      	ldr	r3, [r3, #12]
 800b132:	2b0f      	cmp	r3, #15
 800b134:	d901      	bls.n	800b13a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b136:	2301      	movs	r3, #1
 800b138:	e0f7      	b.n	800b32a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	f000 f900 	bl	800b340 <SPI_GetPacketSize>
 800b140:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	4a7b      	ldr	r2, [pc, #492]	; (800b334 <HAL_SPI_Init+0x23c>)
 800b148:	4293      	cmp	r3, r2
 800b14a:	d00c      	beq.n	800b166 <HAL_SPI_Init+0x6e>
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	4a79      	ldr	r2, [pc, #484]	; (800b338 <HAL_SPI_Init+0x240>)
 800b152:	4293      	cmp	r3, r2
 800b154:	d007      	beq.n	800b166 <HAL_SPI_Init+0x6e>
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	4a78      	ldr	r2, [pc, #480]	; (800b33c <HAL_SPI_Init+0x244>)
 800b15c:	4293      	cmp	r3, r2
 800b15e:	d002      	beq.n	800b166 <HAL_SPI_Init+0x6e>
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	2b08      	cmp	r3, #8
 800b164:	d811      	bhi.n	800b18a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b16a:	4a72      	ldr	r2, [pc, #456]	; (800b334 <HAL_SPI_Init+0x23c>)
 800b16c:	4293      	cmp	r3, r2
 800b16e:	d009      	beq.n	800b184 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	4a70      	ldr	r2, [pc, #448]	; (800b338 <HAL_SPI_Init+0x240>)
 800b176:	4293      	cmp	r3, r2
 800b178:	d004      	beq.n	800b184 <HAL_SPI_Init+0x8c>
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	4a6f      	ldr	r2, [pc, #444]	; (800b33c <HAL_SPI_Init+0x244>)
 800b180:	4293      	cmp	r3, r2
 800b182:	d104      	bne.n	800b18e <HAL_SPI_Init+0x96>
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	2b10      	cmp	r3, #16
 800b188:	d901      	bls.n	800b18e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b18a:	2301      	movs	r3, #1
 800b18c:	e0cd      	b.n	800b32a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b194:	b2db      	uxtb	r3, r3
 800b196:	2b00      	cmp	r3, #0
 800b198:	d106      	bne.n	800b1a8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2200      	movs	r2, #0
 800b19e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b1a2:	6878      	ldr	r0, [r7, #4]
 800b1a4:	f7f7 faa8 	bl	80026f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2202      	movs	r2, #2
 800b1ac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	681a      	ldr	r2, [r3, #0]
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	f022 0201 	bic.w	r2, r2, #1
 800b1be:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	689b      	ldr	r3, [r3, #8]
 800b1c6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800b1ca:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	699b      	ldr	r3, [r3, #24]
 800b1d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b1d4:	d119      	bne.n	800b20a <HAL_SPI_Init+0x112>
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	685b      	ldr	r3, [r3, #4]
 800b1da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b1de:	d103      	bne.n	800b1e8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d008      	beq.n	800b1fa <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d10c      	bne.n	800b20a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b1f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b1f8:	d107      	bne.n	800b20a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	681a      	ldr	r2, [r3, #0]
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b208:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	685b      	ldr	r3, [r3, #4]
 800b20e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b212:	2b00      	cmp	r3, #0
 800b214:	d00f      	beq.n	800b236 <HAL_SPI_Init+0x13e>
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	68db      	ldr	r3, [r3, #12]
 800b21a:	2b06      	cmp	r3, #6
 800b21c:	d90b      	bls.n	800b236 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	430a      	orrs	r2, r1
 800b232:	601a      	str	r2, [r3, #0]
 800b234:	e007      	b.n	800b246 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	681a      	ldr	r2, [r3, #0]
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b244:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	69da      	ldr	r2, [r3, #28]
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b24e:	431a      	orrs	r2, r3
 800b250:	68bb      	ldr	r3, [r7, #8]
 800b252:	431a      	orrs	r2, r3
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b258:	ea42 0103 	orr.w	r1, r2, r3
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	68da      	ldr	r2, [r3, #12]
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	430a      	orrs	r2, r1
 800b266:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b270:	431a      	orrs	r2, r3
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b276:	431a      	orrs	r2, r3
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	699b      	ldr	r3, [r3, #24]
 800b27c:	431a      	orrs	r2, r3
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	691b      	ldr	r3, [r3, #16]
 800b282:	431a      	orrs	r2, r3
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	695b      	ldr	r3, [r3, #20]
 800b288:	431a      	orrs	r2, r3
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	6a1b      	ldr	r3, [r3, #32]
 800b28e:	431a      	orrs	r2, r3
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	685b      	ldr	r3, [r3, #4]
 800b294:	431a      	orrs	r2, r3
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b29a:	431a      	orrs	r2, r3
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	689b      	ldr	r3, [r3, #8]
 800b2a0:	431a      	orrs	r2, r3
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b2a6:	ea42 0103 	orr.w	r1, r2, r3
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	430a      	orrs	r2, r1
 800b2b4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	685b      	ldr	r3, [r3, #4]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d113      	bne.n	800b2e6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	689b      	ldr	r3, [r3, #8]
 800b2c4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b2d0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	689b      	ldr	r3, [r3, #8]
 800b2d8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b2e4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	f022 0201 	bic.w	r2, r2, #1
 800b2f4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	685b      	ldr	r3, [r3, #4]
 800b2fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d00a      	beq.n	800b318 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	68db      	ldr	r3, [r3, #12]
 800b308:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	430a      	orrs	r2, r1
 800b316:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2200      	movs	r2, #0
 800b31c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	2201      	movs	r2, #1
 800b324:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800b328:	2300      	movs	r3, #0
}
 800b32a:	4618      	mov	r0, r3
 800b32c:	3710      	adds	r7, #16
 800b32e:	46bd      	mov	sp, r7
 800b330:	bd80      	pop	{r7, pc}
 800b332:	bf00      	nop
 800b334:	40013000 	.word	0x40013000
 800b338:	40003800 	.word	0x40003800
 800b33c:	40003c00 	.word	0x40003c00

0800b340 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800b340:	b480      	push	{r7}
 800b342:	b085      	sub	sp, #20
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b34c:	095b      	lsrs	r3, r3, #5
 800b34e:	3301      	adds	r3, #1
 800b350:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	68db      	ldr	r3, [r3, #12]
 800b356:	3301      	adds	r3, #1
 800b358:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b35a:	68bb      	ldr	r3, [r7, #8]
 800b35c:	3307      	adds	r3, #7
 800b35e:	08db      	lsrs	r3, r3, #3
 800b360:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b362:	68bb      	ldr	r3, [r7, #8]
 800b364:	68fa      	ldr	r2, [r7, #12]
 800b366:	fb02 f303 	mul.w	r3, r2, r3
}
 800b36a:	4618      	mov	r0, r3
 800b36c:	3714      	adds	r7, #20
 800b36e:	46bd      	mov	sp, r7
 800b370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b374:	4770      	bx	lr

0800b376 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b376:	b580      	push	{r7, lr}
 800b378:	b082      	sub	sp, #8
 800b37a:	af00      	add	r7, sp, #0
 800b37c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d101      	bne.n	800b388 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b384:	2301      	movs	r3, #1
 800b386:	e049      	b.n	800b41c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b38e:	b2db      	uxtb	r3, r3
 800b390:	2b00      	cmp	r3, #0
 800b392:	d106      	bne.n	800b3a2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2200      	movs	r2, #0
 800b398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b39c:	6878      	ldr	r0, [r7, #4]
 800b39e:	f7f7 fa75 	bl	800288c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	2202      	movs	r2, #2
 800b3a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681a      	ldr	r2, [r3, #0]
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	3304      	adds	r3, #4
 800b3b2:	4619      	mov	r1, r3
 800b3b4:	4610      	mov	r0, r2
 800b3b6:	f000 f99d 	bl	800b6f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	2201      	movs	r2, #1
 800b3be:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	2201      	movs	r2, #1
 800b3c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	2201      	movs	r2, #1
 800b3ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2201      	movs	r2, #1
 800b3d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	2201      	movs	r2, #1
 800b3de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	2201      	movs	r2, #1
 800b3e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	2201      	movs	r2, #1
 800b3ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	2201      	movs	r2, #1
 800b3f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	2201      	movs	r2, #1
 800b3fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	2201      	movs	r2, #1
 800b406:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	2201      	movs	r2, #1
 800b40e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	2201      	movs	r2, #1
 800b416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b41a:	2300      	movs	r3, #0
}
 800b41c:	4618      	mov	r0, r3
 800b41e:	3708      	adds	r7, #8
 800b420:	46bd      	mov	sp, r7
 800b422:	bd80      	pop	{r7, pc}

0800b424 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b424:	b480      	push	{r7}
 800b426:	b085      	sub	sp, #20
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b432:	b2db      	uxtb	r3, r3
 800b434:	2b01      	cmp	r3, #1
 800b436:	d001      	beq.n	800b43c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800b438:	2301      	movs	r3, #1
 800b43a:	e04c      	b.n	800b4d6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	2202      	movs	r2, #2
 800b440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	4a26      	ldr	r2, [pc, #152]	; (800b4e4 <HAL_TIM_Base_Start+0xc0>)
 800b44a:	4293      	cmp	r3, r2
 800b44c:	d022      	beq.n	800b494 <HAL_TIM_Base_Start+0x70>
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b456:	d01d      	beq.n	800b494 <HAL_TIM_Base_Start+0x70>
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	4a22      	ldr	r2, [pc, #136]	; (800b4e8 <HAL_TIM_Base_Start+0xc4>)
 800b45e:	4293      	cmp	r3, r2
 800b460:	d018      	beq.n	800b494 <HAL_TIM_Base_Start+0x70>
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	4a21      	ldr	r2, [pc, #132]	; (800b4ec <HAL_TIM_Base_Start+0xc8>)
 800b468:	4293      	cmp	r3, r2
 800b46a:	d013      	beq.n	800b494 <HAL_TIM_Base_Start+0x70>
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	4a1f      	ldr	r2, [pc, #124]	; (800b4f0 <HAL_TIM_Base_Start+0xcc>)
 800b472:	4293      	cmp	r3, r2
 800b474:	d00e      	beq.n	800b494 <HAL_TIM_Base_Start+0x70>
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	4a1e      	ldr	r2, [pc, #120]	; (800b4f4 <HAL_TIM_Base_Start+0xd0>)
 800b47c:	4293      	cmp	r3, r2
 800b47e:	d009      	beq.n	800b494 <HAL_TIM_Base_Start+0x70>
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	4a1c      	ldr	r2, [pc, #112]	; (800b4f8 <HAL_TIM_Base_Start+0xd4>)
 800b486:	4293      	cmp	r3, r2
 800b488:	d004      	beq.n	800b494 <HAL_TIM_Base_Start+0x70>
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	4a1b      	ldr	r2, [pc, #108]	; (800b4fc <HAL_TIM_Base_Start+0xd8>)
 800b490:	4293      	cmp	r3, r2
 800b492:	d115      	bne.n	800b4c0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	689a      	ldr	r2, [r3, #8]
 800b49a:	4b19      	ldr	r3, [pc, #100]	; (800b500 <HAL_TIM_Base_Start+0xdc>)
 800b49c:	4013      	ands	r3, r2
 800b49e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	2b06      	cmp	r3, #6
 800b4a4:	d015      	beq.n	800b4d2 <HAL_TIM_Base_Start+0xae>
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b4ac:	d011      	beq.n	800b4d2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	681a      	ldr	r2, [r3, #0]
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	f042 0201 	orr.w	r2, r2, #1
 800b4bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b4be:	e008      	b.n	800b4d2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	681a      	ldr	r2, [r3, #0]
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	f042 0201 	orr.w	r2, r2, #1
 800b4ce:	601a      	str	r2, [r3, #0]
 800b4d0:	e000      	b.n	800b4d4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b4d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b4d4:	2300      	movs	r3, #0
}
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	3714      	adds	r7, #20
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e0:	4770      	bx	lr
 800b4e2:	bf00      	nop
 800b4e4:	40010000 	.word	0x40010000
 800b4e8:	40000400 	.word	0x40000400
 800b4ec:	40000800 	.word	0x40000800
 800b4f0:	40000c00 	.word	0x40000c00
 800b4f4:	40010400 	.word	0x40010400
 800b4f8:	40001800 	.word	0x40001800
 800b4fc:	40014000 	.word	0x40014000
 800b500:	00010007 	.word	0x00010007

0800b504 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b084      	sub	sp, #16
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
 800b50c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b50e:	2300      	movs	r3, #0
 800b510:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b518:	2b01      	cmp	r3, #1
 800b51a:	d101      	bne.n	800b520 <HAL_TIM_ConfigClockSource+0x1c>
 800b51c:	2302      	movs	r3, #2
 800b51e:	e0dc      	b.n	800b6da <HAL_TIM_ConfigClockSource+0x1d6>
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2201      	movs	r2, #1
 800b524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2202      	movs	r2, #2
 800b52c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	689b      	ldr	r3, [r3, #8]
 800b536:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b538:	68ba      	ldr	r2, [r7, #8]
 800b53a:	4b6a      	ldr	r3, [pc, #424]	; (800b6e4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800b53c:	4013      	ands	r3, r2
 800b53e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b540:	68bb      	ldr	r3, [r7, #8]
 800b542:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b546:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	68ba      	ldr	r2, [r7, #8]
 800b54e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b550:	683b      	ldr	r3, [r7, #0]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	4a64      	ldr	r2, [pc, #400]	; (800b6e8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b556:	4293      	cmp	r3, r2
 800b558:	f000 80a9 	beq.w	800b6ae <HAL_TIM_ConfigClockSource+0x1aa>
 800b55c:	4a62      	ldr	r2, [pc, #392]	; (800b6e8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b55e:	4293      	cmp	r3, r2
 800b560:	f200 80ae 	bhi.w	800b6c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800b564:	4a61      	ldr	r2, [pc, #388]	; (800b6ec <HAL_TIM_ConfigClockSource+0x1e8>)
 800b566:	4293      	cmp	r3, r2
 800b568:	f000 80a1 	beq.w	800b6ae <HAL_TIM_ConfigClockSource+0x1aa>
 800b56c:	4a5f      	ldr	r2, [pc, #380]	; (800b6ec <HAL_TIM_ConfigClockSource+0x1e8>)
 800b56e:	4293      	cmp	r3, r2
 800b570:	f200 80a6 	bhi.w	800b6c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800b574:	4a5e      	ldr	r2, [pc, #376]	; (800b6f0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b576:	4293      	cmp	r3, r2
 800b578:	f000 8099 	beq.w	800b6ae <HAL_TIM_ConfigClockSource+0x1aa>
 800b57c:	4a5c      	ldr	r2, [pc, #368]	; (800b6f0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b57e:	4293      	cmp	r3, r2
 800b580:	f200 809e 	bhi.w	800b6c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800b584:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b588:	f000 8091 	beq.w	800b6ae <HAL_TIM_ConfigClockSource+0x1aa>
 800b58c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b590:	f200 8096 	bhi.w	800b6c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800b594:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b598:	f000 8089 	beq.w	800b6ae <HAL_TIM_ConfigClockSource+0x1aa>
 800b59c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b5a0:	f200 808e 	bhi.w	800b6c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800b5a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b5a8:	d03e      	beq.n	800b628 <HAL_TIM_ConfigClockSource+0x124>
 800b5aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b5ae:	f200 8087 	bhi.w	800b6c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800b5b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5b6:	f000 8086 	beq.w	800b6c6 <HAL_TIM_ConfigClockSource+0x1c2>
 800b5ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5be:	d87f      	bhi.n	800b6c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800b5c0:	2b70      	cmp	r3, #112	; 0x70
 800b5c2:	d01a      	beq.n	800b5fa <HAL_TIM_ConfigClockSource+0xf6>
 800b5c4:	2b70      	cmp	r3, #112	; 0x70
 800b5c6:	d87b      	bhi.n	800b6c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800b5c8:	2b60      	cmp	r3, #96	; 0x60
 800b5ca:	d050      	beq.n	800b66e <HAL_TIM_ConfigClockSource+0x16a>
 800b5cc:	2b60      	cmp	r3, #96	; 0x60
 800b5ce:	d877      	bhi.n	800b6c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800b5d0:	2b50      	cmp	r3, #80	; 0x50
 800b5d2:	d03c      	beq.n	800b64e <HAL_TIM_ConfigClockSource+0x14a>
 800b5d4:	2b50      	cmp	r3, #80	; 0x50
 800b5d6:	d873      	bhi.n	800b6c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800b5d8:	2b40      	cmp	r3, #64	; 0x40
 800b5da:	d058      	beq.n	800b68e <HAL_TIM_ConfigClockSource+0x18a>
 800b5dc:	2b40      	cmp	r3, #64	; 0x40
 800b5de:	d86f      	bhi.n	800b6c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800b5e0:	2b30      	cmp	r3, #48	; 0x30
 800b5e2:	d064      	beq.n	800b6ae <HAL_TIM_ConfigClockSource+0x1aa>
 800b5e4:	2b30      	cmp	r3, #48	; 0x30
 800b5e6:	d86b      	bhi.n	800b6c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800b5e8:	2b20      	cmp	r3, #32
 800b5ea:	d060      	beq.n	800b6ae <HAL_TIM_ConfigClockSource+0x1aa>
 800b5ec:	2b20      	cmp	r3, #32
 800b5ee:	d867      	bhi.n	800b6c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d05c      	beq.n	800b6ae <HAL_TIM_ConfigClockSource+0x1aa>
 800b5f4:	2b10      	cmp	r3, #16
 800b5f6:	d05a      	beq.n	800b6ae <HAL_TIM_ConfigClockSource+0x1aa>
 800b5f8:	e062      	b.n	800b6c0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	6818      	ldr	r0, [r3, #0]
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	6899      	ldr	r1, [r3, #8]
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	685a      	ldr	r2, [r3, #4]
 800b606:	683b      	ldr	r3, [r7, #0]
 800b608:	68db      	ldr	r3, [r3, #12]
 800b60a:	f000 f98b 	bl	800b924 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	689b      	ldr	r3, [r3, #8]
 800b614:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b616:	68bb      	ldr	r3, [r7, #8]
 800b618:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b61c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	68ba      	ldr	r2, [r7, #8]
 800b624:	609a      	str	r2, [r3, #8]
      break;
 800b626:	e04f      	b.n	800b6c8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	6818      	ldr	r0, [r3, #0]
 800b62c:	683b      	ldr	r3, [r7, #0]
 800b62e:	6899      	ldr	r1, [r3, #8]
 800b630:	683b      	ldr	r3, [r7, #0]
 800b632:	685a      	ldr	r2, [r3, #4]
 800b634:	683b      	ldr	r3, [r7, #0]
 800b636:	68db      	ldr	r3, [r3, #12]
 800b638:	f000 f974 	bl	800b924 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	689a      	ldr	r2, [r3, #8]
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b64a:	609a      	str	r2, [r3, #8]
      break;
 800b64c:	e03c      	b.n	800b6c8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	6818      	ldr	r0, [r3, #0]
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	6859      	ldr	r1, [r3, #4]
 800b656:	683b      	ldr	r3, [r7, #0]
 800b658:	68db      	ldr	r3, [r3, #12]
 800b65a:	461a      	mov	r2, r3
 800b65c:	f000 f8e4 	bl	800b828 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	2150      	movs	r1, #80	; 0x50
 800b666:	4618      	mov	r0, r3
 800b668:	f000 f93e 	bl	800b8e8 <TIM_ITRx_SetConfig>
      break;
 800b66c:	e02c      	b.n	800b6c8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	6818      	ldr	r0, [r3, #0]
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	6859      	ldr	r1, [r3, #4]
 800b676:	683b      	ldr	r3, [r7, #0]
 800b678:	68db      	ldr	r3, [r3, #12]
 800b67a:	461a      	mov	r2, r3
 800b67c:	f000 f903 	bl	800b886 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	2160      	movs	r1, #96	; 0x60
 800b686:	4618      	mov	r0, r3
 800b688:	f000 f92e 	bl	800b8e8 <TIM_ITRx_SetConfig>
      break;
 800b68c:	e01c      	b.n	800b6c8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	6818      	ldr	r0, [r3, #0]
 800b692:	683b      	ldr	r3, [r7, #0]
 800b694:	6859      	ldr	r1, [r3, #4]
 800b696:	683b      	ldr	r3, [r7, #0]
 800b698:	68db      	ldr	r3, [r3, #12]
 800b69a:	461a      	mov	r2, r3
 800b69c:	f000 f8c4 	bl	800b828 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	2140      	movs	r1, #64	; 0x40
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	f000 f91e 	bl	800b8e8 <TIM_ITRx_SetConfig>
      break;
 800b6ac:	e00c      	b.n	800b6c8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681a      	ldr	r2, [r3, #0]
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	4619      	mov	r1, r3
 800b6b8:	4610      	mov	r0, r2
 800b6ba:	f000 f915 	bl	800b8e8 <TIM_ITRx_SetConfig>
      break;
 800b6be:	e003      	b.n	800b6c8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b6c0:	2301      	movs	r3, #1
 800b6c2:	73fb      	strb	r3, [r7, #15]
      break;
 800b6c4:	e000      	b.n	800b6c8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800b6c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	2201      	movs	r2, #1
 800b6cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b6d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6da:	4618      	mov	r0, r3
 800b6dc:	3710      	adds	r7, #16
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	bd80      	pop	{r7, pc}
 800b6e2:	bf00      	nop
 800b6e4:	ffceff88 	.word	0xffceff88
 800b6e8:	00100040 	.word	0x00100040
 800b6ec:	00100030 	.word	0x00100030
 800b6f0:	00100020 	.word	0x00100020

0800b6f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b6f4:	b480      	push	{r7}
 800b6f6:	b085      	sub	sp, #20
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
 800b6fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	4a40      	ldr	r2, [pc, #256]	; (800b808 <TIM_Base_SetConfig+0x114>)
 800b708:	4293      	cmp	r3, r2
 800b70a:	d013      	beq.n	800b734 <TIM_Base_SetConfig+0x40>
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b712:	d00f      	beq.n	800b734 <TIM_Base_SetConfig+0x40>
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	4a3d      	ldr	r2, [pc, #244]	; (800b80c <TIM_Base_SetConfig+0x118>)
 800b718:	4293      	cmp	r3, r2
 800b71a:	d00b      	beq.n	800b734 <TIM_Base_SetConfig+0x40>
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	4a3c      	ldr	r2, [pc, #240]	; (800b810 <TIM_Base_SetConfig+0x11c>)
 800b720:	4293      	cmp	r3, r2
 800b722:	d007      	beq.n	800b734 <TIM_Base_SetConfig+0x40>
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	4a3b      	ldr	r2, [pc, #236]	; (800b814 <TIM_Base_SetConfig+0x120>)
 800b728:	4293      	cmp	r3, r2
 800b72a:	d003      	beq.n	800b734 <TIM_Base_SetConfig+0x40>
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	4a3a      	ldr	r2, [pc, #232]	; (800b818 <TIM_Base_SetConfig+0x124>)
 800b730:	4293      	cmp	r3, r2
 800b732:	d108      	bne.n	800b746 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b73a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b73c:	683b      	ldr	r3, [r7, #0]
 800b73e:	685b      	ldr	r3, [r3, #4]
 800b740:	68fa      	ldr	r2, [r7, #12]
 800b742:	4313      	orrs	r3, r2
 800b744:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	4a2f      	ldr	r2, [pc, #188]	; (800b808 <TIM_Base_SetConfig+0x114>)
 800b74a:	4293      	cmp	r3, r2
 800b74c:	d01f      	beq.n	800b78e <TIM_Base_SetConfig+0x9a>
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b754:	d01b      	beq.n	800b78e <TIM_Base_SetConfig+0x9a>
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	4a2c      	ldr	r2, [pc, #176]	; (800b80c <TIM_Base_SetConfig+0x118>)
 800b75a:	4293      	cmp	r3, r2
 800b75c:	d017      	beq.n	800b78e <TIM_Base_SetConfig+0x9a>
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	4a2b      	ldr	r2, [pc, #172]	; (800b810 <TIM_Base_SetConfig+0x11c>)
 800b762:	4293      	cmp	r3, r2
 800b764:	d013      	beq.n	800b78e <TIM_Base_SetConfig+0x9a>
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	4a2a      	ldr	r2, [pc, #168]	; (800b814 <TIM_Base_SetConfig+0x120>)
 800b76a:	4293      	cmp	r3, r2
 800b76c:	d00f      	beq.n	800b78e <TIM_Base_SetConfig+0x9a>
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	4a29      	ldr	r2, [pc, #164]	; (800b818 <TIM_Base_SetConfig+0x124>)
 800b772:	4293      	cmp	r3, r2
 800b774:	d00b      	beq.n	800b78e <TIM_Base_SetConfig+0x9a>
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	4a28      	ldr	r2, [pc, #160]	; (800b81c <TIM_Base_SetConfig+0x128>)
 800b77a:	4293      	cmp	r3, r2
 800b77c:	d007      	beq.n	800b78e <TIM_Base_SetConfig+0x9a>
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	4a27      	ldr	r2, [pc, #156]	; (800b820 <TIM_Base_SetConfig+0x12c>)
 800b782:	4293      	cmp	r3, r2
 800b784:	d003      	beq.n	800b78e <TIM_Base_SetConfig+0x9a>
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	4a26      	ldr	r2, [pc, #152]	; (800b824 <TIM_Base_SetConfig+0x130>)
 800b78a:	4293      	cmp	r3, r2
 800b78c:	d108      	bne.n	800b7a0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b794:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b796:	683b      	ldr	r3, [r7, #0]
 800b798:	68db      	ldr	r3, [r3, #12]
 800b79a:	68fa      	ldr	r2, [r7, #12]
 800b79c:	4313      	orrs	r3, r2
 800b79e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	695b      	ldr	r3, [r3, #20]
 800b7aa:	4313      	orrs	r3, r2
 800b7ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	68fa      	ldr	r2, [r7, #12]
 800b7b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b7b4:	683b      	ldr	r3, [r7, #0]
 800b7b6:	689a      	ldr	r2, [r3, #8]
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b7bc:	683b      	ldr	r3, [r7, #0]
 800b7be:	681a      	ldr	r2, [r3, #0]
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	4a10      	ldr	r2, [pc, #64]	; (800b808 <TIM_Base_SetConfig+0x114>)
 800b7c8:	4293      	cmp	r3, r2
 800b7ca:	d00f      	beq.n	800b7ec <TIM_Base_SetConfig+0xf8>
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	4a12      	ldr	r2, [pc, #72]	; (800b818 <TIM_Base_SetConfig+0x124>)
 800b7d0:	4293      	cmp	r3, r2
 800b7d2:	d00b      	beq.n	800b7ec <TIM_Base_SetConfig+0xf8>
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	4a11      	ldr	r2, [pc, #68]	; (800b81c <TIM_Base_SetConfig+0x128>)
 800b7d8:	4293      	cmp	r3, r2
 800b7da:	d007      	beq.n	800b7ec <TIM_Base_SetConfig+0xf8>
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	4a10      	ldr	r2, [pc, #64]	; (800b820 <TIM_Base_SetConfig+0x12c>)
 800b7e0:	4293      	cmp	r3, r2
 800b7e2:	d003      	beq.n	800b7ec <TIM_Base_SetConfig+0xf8>
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	4a0f      	ldr	r2, [pc, #60]	; (800b824 <TIM_Base_SetConfig+0x130>)
 800b7e8:	4293      	cmp	r3, r2
 800b7ea:	d103      	bne.n	800b7f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b7ec:	683b      	ldr	r3, [r7, #0]
 800b7ee:	691a      	ldr	r2, [r3, #16]
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2201      	movs	r2, #1
 800b7f8:	615a      	str	r2, [r3, #20]
}
 800b7fa:	bf00      	nop
 800b7fc:	3714      	adds	r7, #20
 800b7fe:	46bd      	mov	sp, r7
 800b800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b804:	4770      	bx	lr
 800b806:	bf00      	nop
 800b808:	40010000 	.word	0x40010000
 800b80c:	40000400 	.word	0x40000400
 800b810:	40000800 	.word	0x40000800
 800b814:	40000c00 	.word	0x40000c00
 800b818:	40010400 	.word	0x40010400
 800b81c:	40014000 	.word	0x40014000
 800b820:	40014400 	.word	0x40014400
 800b824:	40014800 	.word	0x40014800

0800b828 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b828:	b480      	push	{r7}
 800b82a:	b087      	sub	sp, #28
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	60f8      	str	r0, [r7, #12]
 800b830:	60b9      	str	r1, [r7, #8]
 800b832:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	6a1b      	ldr	r3, [r3, #32]
 800b838:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	6a1b      	ldr	r3, [r3, #32]
 800b83e:	f023 0201 	bic.w	r2, r3, #1
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	699b      	ldr	r3, [r3, #24]
 800b84a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b84c:	693b      	ldr	r3, [r7, #16]
 800b84e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b852:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	011b      	lsls	r3, r3, #4
 800b858:	693a      	ldr	r2, [r7, #16]
 800b85a:	4313      	orrs	r3, r2
 800b85c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b85e:	697b      	ldr	r3, [r7, #20]
 800b860:	f023 030a 	bic.w	r3, r3, #10
 800b864:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b866:	697a      	ldr	r2, [r7, #20]
 800b868:	68bb      	ldr	r3, [r7, #8]
 800b86a:	4313      	orrs	r3, r2
 800b86c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	693a      	ldr	r2, [r7, #16]
 800b872:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	697a      	ldr	r2, [r7, #20]
 800b878:	621a      	str	r2, [r3, #32]
}
 800b87a:	bf00      	nop
 800b87c:	371c      	adds	r7, #28
 800b87e:	46bd      	mov	sp, r7
 800b880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b884:	4770      	bx	lr

0800b886 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b886:	b480      	push	{r7}
 800b888:	b087      	sub	sp, #28
 800b88a:	af00      	add	r7, sp, #0
 800b88c:	60f8      	str	r0, [r7, #12]
 800b88e:	60b9      	str	r1, [r7, #8]
 800b890:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	6a1b      	ldr	r3, [r3, #32]
 800b896:	f023 0210 	bic.w	r2, r3, #16
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	699b      	ldr	r3, [r3, #24]
 800b8a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	6a1b      	ldr	r3, [r3, #32]
 800b8a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b8aa:	697b      	ldr	r3, [r7, #20]
 800b8ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b8b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	031b      	lsls	r3, r3, #12
 800b8b6:	697a      	ldr	r2, [r7, #20]
 800b8b8:	4313      	orrs	r3, r2
 800b8ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b8bc:	693b      	ldr	r3, [r7, #16]
 800b8be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b8c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b8c4:	68bb      	ldr	r3, [r7, #8]
 800b8c6:	011b      	lsls	r3, r3, #4
 800b8c8:	693a      	ldr	r2, [r7, #16]
 800b8ca:	4313      	orrs	r3, r2
 800b8cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	697a      	ldr	r2, [r7, #20]
 800b8d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	693a      	ldr	r2, [r7, #16]
 800b8d8:	621a      	str	r2, [r3, #32]
}
 800b8da:	bf00      	nop
 800b8dc:	371c      	adds	r7, #28
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e4:	4770      	bx	lr
	...

0800b8e8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b8e8:	b480      	push	{r7}
 800b8ea:	b085      	sub	sp, #20
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
 800b8f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	689b      	ldr	r3, [r3, #8]
 800b8f6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b8f8:	68fa      	ldr	r2, [r7, #12]
 800b8fa:	4b09      	ldr	r3, [pc, #36]	; (800b920 <TIM_ITRx_SetConfig+0x38>)
 800b8fc:	4013      	ands	r3, r2
 800b8fe:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b900:	683a      	ldr	r2, [r7, #0]
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	4313      	orrs	r3, r2
 800b906:	f043 0307 	orr.w	r3, r3, #7
 800b90a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	68fa      	ldr	r2, [r7, #12]
 800b910:	609a      	str	r2, [r3, #8]
}
 800b912:	bf00      	nop
 800b914:	3714      	adds	r7, #20
 800b916:	46bd      	mov	sp, r7
 800b918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91c:	4770      	bx	lr
 800b91e:	bf00      	nop
 800b920:	ffcfff8f 	.word	0xffcfff8f

0800b924 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b924:	b480      	push	{r7}
 800b926:	b087      	sub	sp, #28
 800b928:	af00      	add	r7, sp, #0
 800b92a:	60f8      	str	r0, [r7, #12]
 800b92c:	60b9      	str	r1, [r7, #8]
 800b92e:	607a      	str	r2, [r7, #4]
 800b930:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	689b      	ldr	r3, [r3, #8]
 800b936:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b938:	697b      	ldr	r3, [r7, #20]
 800b93a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b93e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	021a      	lsls	r2, r3, #8
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	431a      	orrs	r2, r3
 800b948:	68bb      	ldr	r3, [r7, #8]
 800b94a:	4313      	orrs	r3, r2
 800b94c:	697a      	ldr	r2, [r7, #20]
 800b94e:	4313      	orrs	r3, r2
 800b950:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	697a      	ldr	r2, [r7, #20]
 800b956:	609a      	str	r2, [r3, #8]
}
 800b958:	bf00      	nop
 800b95a:	371c      	adds	r7, #28
 800b95c:	46bd      	mov	sp, r7
 800b95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b962:	4770      	bx	lr

0800b964 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b964:	b480      	push	{r7}
 800b966:	b085      	sub	sp, #20
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
 800b96c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b974:	2b01      	cmp	r3, #1
 800b976:	d101      	bne.n	800b97c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b978:	2302      	movs	r3, #2
 800b97a:	e06d      	b.n	800ba58 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2201      	movs	r2, #1
 800b980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	2202      	movs	r2, #2
 800b988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	685b      	ldr	r3, [r3, #4]
 800b992:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	689b      	ldr	r3, [r3, #8]
 800b99a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	4a30      	ldr	r2, [pc, #192]	; (800ba64 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b9a2:	4293      	cmp	r3, r2
 800b9a4:	d004      	beq.n	800b9b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	4a2f      	ldr	r2, [pc, #188]	; (800ba68 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b9ac:	4293      	cmp	r3, r2
 800b9ae:	d108      	bne.n	800b9c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b9b6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	685b      	ldr	r3, [r3, #4]
 800b9bc:	68fa      	ldr	r2, [r7, #12]
 800b9be:	4313      	orrs	r3, r2
 800b9c0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b9c8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b9ca:	683b      	ldr	r3, [r7, #0]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	68fa      	ldr	r2, [r7, #12]
 800b9d0:	4313      	orrs	r3, r2
 800b9d2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	68fa      	ldr	r2, [r7, #12]
 800b9da:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	4a20      	ldr	r2, [pc, #128]	; (800ba64 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b9e2:	4293      	cmp	r3, r2
 800b9e4:	d022      	beq.n	800ba2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9ee:	d01d      	beq.n	800ba2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	4a1d      	ldr	r2, [pc, #116]	; (800ba6c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b9f6:	4293      	cmp	r3, r2
 800b9f8:	d018      	beq.n	800ba2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	4a1c      	ldr	r2, [pc, #112]	; (800ba70 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ba00:	4293      	cmp	r3, r2
 800ba02:	d013      	beq.n	800ba2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	4a1a      	ldr	r2, [pc, #104]	; (800ba74 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ba0a:	4293      	cmp	r3, r2
 800ba0c:	d00e      	beq.n	800ba2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	4a15      	ldr	r2, [pc, #84]	; (800ba68 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ba14:	4293      	cmp	r3, r2
 800ba16:	d009      	beq.n	800ba2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	4a16      	ldr	r2, [pc, #88]	; (800ba78 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ba1e:	4293      	cmp	r3, r2
 800ba20:	d004      	beq.n	800ba2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	4a15      	ldr	r2, [pc, #84]	; (800ba7c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ba28:	4293      	cmp	r3, r2
 800ba2a:	d10c      	bne.n	800ba46 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ba2c:	68bb      	ldr	r3, [r7, #8]
 800ba2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ba32:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	689b      	ldr	r3, [r3, #8]
 800ba38:	68ba      	ldr	r2, [r7, #8]
 800ba3a:	4313      	orrs	r3, r2
 800ba3c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	68ba      	ldr	r2, [r7, #8]
 800ba44:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	2201      	movs	r2, #1
 800ba4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	2200      	movs	r2, #0
 800ba52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ba56:	2300      	movs	r3, #0
}
 800ba58:	4618      	mov	r0, r3
 800ba5a:	3714      	adds	r7, #20
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba62:	4770      	bx	lr
 800ba64:	40010000 	.word	0x40010000
 800ba68:	40010400 	.word	0x40010400
 800ba6c:	40000400 	.word	0x40000400
 800ba70:	40000800 	.word	0x40000800
 800ba74:	40000c00 	.word	0x40000c00
 800ba78:	40001800 	.word	0x40001800
 800ba7c:	40014000 	.word	0x40014000

0800ba80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b082      	sub	sp, #8
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d101      	bne.n	800ba92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ba8e:	2301      	movs	r3, #1
 800ba90:	e042      	b.n	800bb18 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d106      	bne.n	800baaa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	2200      	movs	r2, #0
 800baa0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800baa4:	6878      	ldr	r0, [r7, #4]
 800baa6:	f7f6 ff13 	bl	80028d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	2224      	movs	r2, #36	; 0x24
 800baae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	681a      	ldr	r2, [r3, #0]
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	f022 0201 	bic.w	r2, r2, #1
 800bac0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bac2:	6878      	ldr	r0, [r7, #4]
 800bac4:	f000 fce0 	bl	800c488 <UART_SetConfig>
 800bac8:	4603      	mov	r3, r0
 800baca:	2b01      	cmp	r3, #1
 800bacc:	d101      	bne.n	800bad2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800bace:	2301      	movs	r3, #1
 800bad0:	e022      	b.n	800bb18 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d002      	beq.n	800bae0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800bada:	6878      	ldr	r0, [r7, #4]
 800badc:	f001 fa3c 	bl	800cf58 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	685a      	ldr	r2, [r3, #4]
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800baee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	689a      	ldr	r2, [r3, #8]
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bafe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	681a      	ldr	r2, [r3, #0]
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	f042 0201 	orr.w	r2, r2, #1
 800bb0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bb10:	6878      	ldr	r0, [r7, #4]
 800bb12:	f001 fac3 	bl	800d09c <UART_CheckIdleState>
 800bb16:	4603      	mov	r3, r0
}
 800bb18:	4618      	mov	r0, r3
 800bb1a:	3708      	adds	r7, #8
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	bd80      	pop	{r7, pc}

0800bb20 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b08a      	sub	sp, #40	; 0x28
 800bb24:	af02      	add	r7, sp, #8
 800bb26:	60f8      	str	r0, [r7, #12]
 800bb28:	60b9      	str	r1, [r7, #8]
 800bb2a:	603b      	str	r3, [r7, #0]
 800bb2c:	4613      	mov	r3, r2
 800bb2e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb36:	2b20      	cmp	r3, #32
 800bb38:	d17b      	bne.n	800bc32 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800bb3a:	68bb      	ldr	r3, [r7, #8]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d002      	beq.n	800bb46 <HAL_UART_Transmit+0x26>
 800bb40:	88fb      	ldrh	r3, [r7, #6]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d101      	bne.n	800bb4a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800bb46:	2301      	movs	r3, #1
 800bb48:	e074      	b.n	800bc34 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	2221      	movs	r2, #33	; 0x21
 800bb56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bb5a:	f7f7 fab3 	bl	80030c4 <HAL_GetTick>
 800bb5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	88fa      	ldrh	r2, [r7, #6]
 800bb64:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	88fa      	ldrh	r2, [r7, #6]
 800bb6c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	689b      	ldr	r3, [r3, #8]
 800bb74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb78:	d108      	bne.n	800bb8c <HAL_UART_Transmit+0x6c>
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	691b      	ldr	r3, [r3, #16]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d104      	bne.n	800bb8c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800bb82:	2300      	movs	r3, #0
 800bb84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bb86:	68bb      	ldr	r3, [r7, #8]
 800bb88:	61bb      	str	r3, [r7, #24]
 800bb8a:	e003      	b.n	800bb94 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800bb8c:	68bb      	ldr	r3, [r7, #8]
 800bb8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bb90:	2300      	movs	r3, #0
 800bb92:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800bb94:	e030      	b.n	800bbf8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	9300      	str	r3, [sp, #0]
 800bb9a:	697b      	ldr	r3, [r7, #20]
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	2180      	movs	r1, #128	; 0x80
 800bba0:	68f8      	ldr	r0, [r7, #12]
 800bba2:	f001 fb25 	bl	800d1f0 <UART_WaitOnFlagUntilTimeout>
 800bba6:	4603      	mov	r3, r0
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d005      	beq.n	800bbb8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	2220      	movs	r2, #32
 800bbb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800bbb4:	2303      	movs	r3, #3
 800bbb6:	e03d      	b.n	800bc34 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800bbb8:	69fb      	ldr	r3, [r7, #28]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d10b      	bne.n	800bbd6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bbbe:	69bb      	ldr	r3, [r7, #24]
 800bbc0:	881b      	ldrh	r3, [r3, #0]
 800bbc2:	461a      	mov	r2, r3
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bbcc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800bbce:	69bb      	ldr	r3, [r7, #24]
 800bbd0:	3302      	adds	r3, #2
 800bbd2:	61bb      	str	r3, [r7, #24]
 800bbd4:	e007      	b.n	800bbe6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800bbd6:	69fb      	ldr	r3, [r7, #28]
 800bbd8:	781a      	ldrb	r2, [r3, #0]
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800bbe0:	69fb      	ldr	r3, [r7, #28]
 800bbe2:	3301      	adds	r3, #1
 800bbe4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bbec:	b29b      	uxth	r3, r3
 800bbee:	3b01      	subs	r3, #1
 800bbf0:	b29a      	uxth	r2, r3
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bbfe:	b29b      	uxth	r3, r3
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d1c8      	bne.n	800bb96 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	9300      	str	r3, [sp, #0]
 800bc08:	697b      	ldr	r3, [r7, #20]
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	2140      	movs	r1, #64	; 0x40
 800bc0e:	68f8      	ldr	r0, [r7, #12]
 800bc10:	f001 faee 	bl	800d1f0 <UART_WaitOnFlagUntilTimeout>
 800bc14:	4603      	mov	r3, r0
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d005      	beq.n	800bc26 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	2220      	movs	r2, #32
 800bc1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800bc22:	2303      	movs	r3, #3
 800bc24:	e006      	b.n	800bc34 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	2220      	movs	r2, #32
 800bc2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800bc2e:	2300      	movs	r3, #0
 800bc30:	e000      	b.n	800bc34 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800bc32:	2302      	movs	r3, #2
  }
}
 800bc34:	4618      	mov	r0, r3
 800bc36:	3720      	adds	r7, #32
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bd80      	pop	{r7, pc}

0800bc3c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b08a      	sub	sp, #40	; 0x28
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	60f8      	str	r0, [r7, #12]
 800bc44:	60b9      	str	r1, [r7, #8]
 800bc46:	4613      	mov	r3, r2
 800bc48:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc50:	2b20      	cmp	r3, #32
 800bc52:	d137      	bne.n	800bcc4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800bc54:	68bb      	ldr	r3, [r7, #8]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d002      	beq.n	800bc60 <HAL_UART_Receive_IT+0x24>
 800bc5a:	88fb      	ldrh	r3, [r7, #6]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d101      	bne.n	800bc64 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800bc60:	2301      	movs	r3, #1
 800bc62:	e030      	b.n	800bcc6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	2200      	movs	r2, #0
 800bc68:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	4a18      	ldr	r2, [pc, #96]	; (800bcd0 <HAL_UART_Receive_IT+0x94>)
 800bc70:	4293      	cmp	r3, r2
 800bc72:	d01f      	beq.n	800bcb4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	685b      	ldr	r3, [r3, #4]
 800bc7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d018      	beq.n	800bcb4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc88:	697b      	ldr	r3, [r7, #20]
 800bc8a:	e853 3f00 	ldrex	r3, [r3]
 800bc8e:	613b      	str	r3, [r7, #16]
   return(result);
 800bc90:	693b      	ldr	r3, [r7, #16]
 800bc92:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bc96:	627b      	str	r3, [r7, #36]	; 0x24
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	461a      	mov	r2, r3
 800bc9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bca0:	623b      	str	r3, [r7, #32]
 800bca2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bca4:	69f9      	ldr	r1, [r7, #28]
 800bca6:	6a3a      	ldr	r2, [r7, #32]
 800bca8:	e841 2300 	strex	r3, r2, [r1]
 800bcac:	61bb      	str	r3, [r7, #24]
   return(result);
 800bcae:	69bb      	ldr	r3, [r7, #24]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d1e6      	bne.n	800bc82 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800bcb4:	88fb      	ldrh	r3, [r7, #6]
 800bcb6:	461a      	mov	r2, r3
 800bcb8:	68b9      	ldr	r1, [r7, #8]
 800bcba:	68f8      	ldr	r0, [r7, #12]
 800bcbc:	f001 fb00 	bl	800d2c0 <UART_Start_Receive_IT>
 800bcc0:	4603      	mov	r3, r0
 800bcc2:	e000      	b.n	800bcc6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800bcc4:	2302      	movs	r3, #2
  }
}
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	3728      	adds	r7, #40	; 0x28
 800bcca:	46bd      	mov	sp, r7
 800bccc:	bd80      	pop	{r7, pc}
 800bcce:	bf00      	nop
 800bcd0:	58000c00 	.word	0x58000c00

0800bcd4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b0ba      	sub	sp, #232	; 0xe8
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	69db      	ldr	r3, [r3, #28]
 800bce2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	689b      	ldr	r3, [r3, #8]
 800bcf6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800bcfa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800bcfe:	f640 030f 	movw	r3, #2063	; 0x80f
 800bd02:	4013      	ands	r3, r2
 800bd04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800bd08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d11b      	bne.n	800bd48 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bd10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd14:	f003 0320 	and.w	r3, r3, #32
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d015      	beq.n	800bd48 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bd1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd20:	f003 0320 	and.w	r3, r3, #32
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d105      	bne.n	800bd34 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bd28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bd2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d009      	beq.n	800bd48 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	f000 8377 	beq.w	800c42c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd42:	6878      	ldr	r0, [r7, #4]
 800bd44:	4798      	blx	r3
      }
      return;
 800bd46:	e371      	b.n	800c42c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800bd48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	f000 8123 	beq.w	800bf98 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800bd52:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800bd56:	4b8d      	ldr	r3, [pc, #564]	; (800bf8c <HAL_UART_IRQHandler+0x2b8>)
 800bd58:	4013      	ands	r3, r2
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d106      	bne.n	800bd6c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800bd5e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800bd62:	4b8b      	ldr	r3, [pc, #556]	; (800bf90 <HAL_UART_IRQHandler+0x2bc>)
 800bd64:	4013      	ands	r3, r2
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	f000 8116 	beq.w	800bf98 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bd6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd70:	f003 0301 	and.w	r3, r3, #1
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d011      	beq.n	800bd9c <HAL_UART_IRQHandler+0xc8>
 800bd78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d00b      	beq.n	800bd9c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	2201      	movs	r2, #1
 800bd8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd92:	f043 0201 	orr.w	r2, r3, #1
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bd9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bda0:	f003 0302 	and.w	r3, r3, #2
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d011      	beq.n	800bdcc <HAL_UART_IRQHandler+0xf8>
 800bda8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bdac:	f003 0301 	and.w	r3, r3, #1
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d00b      	beq.n	800bdcc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	2202      	movs	r2, #2
 800bdba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bdc2:	f043 0204 	orr.w	r2, r3, #4
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bdcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bdd0:	f003 0304 	and.w	r3, r3, #4
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d011      	beq.n	800bdfc <HAL_UART_IRQHandler+0x128>
 800bdd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bddc:	f003 0301 	and.w	r3, r3, #1
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d00b      	beq.n	800bdfc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	2204      	movs	r2, #4
 800bdea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bdf2:	f043 0202 	orr.w	r2, r3, #2
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bdfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be00:	f003 0308 	and.w	r3, r3, #8
 800be04:	2b00      	cmp	r3, #0
 800be06:	d017      	beq.n	800be38 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800be08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be0c:	f003 0320 	and.w	r3, r3, #32
 800be10:	2b00      	cmp	r3, #0
 800be12:	d105      	bne.n	800be20 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800be14:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800be18:	4b5c      	ldr	r3, [pc, #368]	; (800bf8c <HAL_UART_IRQHandler+0x2b8>)
 800be1a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d00b      	beq.n	800be38 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	2208      	movs	r2, #8
 800be26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be2e:	f043 0208 	orr.w	r2, r3, #8
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800be38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800be40:	2b00      	cmp	r3, #0
 800be42:	d012      	beq.n	800be6a <HAL_UART_IRQHandler+0x196>
 800be44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d00c      	beq.n	800be6a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800be58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be60:	f043 0220 	orr.w	r2, r3, #32
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be70:	2b00      	cmp	r3, #0
 800be72:	f000 82dd 	beq.w	800c430 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800be76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be7a:	f003 0320 	and.w	r3, r3, #32
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d013      	beq.n	800beaa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800be82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be86:	f003 0320 	and.w	r3, r3, #32
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d105      	bne.n	800be9a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800be8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800be92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800be96:	2b00      	cmp	r3, #0
 800be98:	d007      	beq.n	800beaa <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d003      	beq.n	800beaa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bea6:	6878      	ldr	r0, [r7, #4]
 800bea8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800beb0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	689b      	ldr	r3, [r3, #8]
 800beba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bebe:	2b40      	cmp	r3, #64	; 0x40
 800bec0:	d005      	beq.n	800bece <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bec2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bec6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800beca:	2b00      	cmp	r3, #0
 800becc:	d054      	beq.n	800bf78 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bece:	6878      	ldr	r0, [r7, #4]
 800bed0:	f001 fb18 	bl	800d504 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	689b      	ldr	r3, [r3, #8]
 800beda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bede:	2b40      	cmp	r3, #64	; 0x40
 800bee0:	d146      	bne.n	800bf70 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	3308      	adds	r3, #8
 800bee8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bef0:	e853 3f00 	ldrex	r3, [r3]
 800bef4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bef8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800befc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bf00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	3308      	adds	r3, #8
 800bf0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bf0e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bf12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bf1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bf1e:	e841 2300 	strex	r3, r2, [r1]
 800bf22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bf26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d1d9      	bne.n	800bee2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d017      	beq.n	800bf68 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf3e:	4a15      	ldr	r2, [pc, #84]	; (800bf94 <HAL_UART_IRQHandler+0x2c0>)
 800bf40:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf48:	4618      	mov	r0, r3
 800bf4a:	f7f8 fddd 	bl	8004b08 <HAL_DMA_Abort_IT>
 800bf4e:	4603      	mov	r3, r0
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d019      	beq.n	800bf88 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf5c:	687a      	ldr	r2, [r7, #4]
 800bf5e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800bf62:	4610      	mov	r0, r2
 800bf64:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf66:	e00f      	b.n	800bf88 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bf68:	6878      	ldr	r0, [r7, #4]
 800bf6a:	f000 fa77 	bl	800c45c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf6e:	e00b      	b.n	800bf88 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bf70:	6878      	ldr	r0, [r7, #4]
 800bf72:	f000 fa73 	bl	800c45c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf76:	e007      	b.n	800bf88 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bf78:	6878      	ldr	r0, [r7, #4]
 800bf7a:	f000 fa6f 	bl	800c45c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	2200      	movs	r2, #0
 800bf82:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800bf86:	e253      	b.n	800c430 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf88:	bf00      	nop
    return;
 800bf8a:	e251      	b.n	800c430 <HAL_UART_IRQHandler+0x75c>
 800bf8c:	10000001 	.word	0x10000001
 800bf90:	04000120 	.word	0x04000120
 800bf94:	0800d5d1 	.word	0x0800d5d1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf9c:	2b01      	cmp	r3, #1
 800bf9e:	f040 81e7 	bne.w	800c370 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800bfa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bfa6:	f003 0310 	and.w	r3, r3, #16
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	f000 81e0 	beq.w	800c370 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800bfb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bfb4:	f003 0310 	and.w	r3, r3, #16
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	f000 81d9 	beq.w	800c370 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	2210      	movs	r2, #16
 800bfc4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	689b      	ldr	r3, [r3, #8]
 800bfcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfd0:	2b40      	cmp	r3, #64	; 0x40
 800bfd2:	f040 8151 	bne.w	800c278 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	4a96      	ldr	r2, [pc, #600]	; (800c238 <HAL_UART_IRQHandler+0x564>)
 800bfe0:	4293      	cmp	r3, r2
 800bfe2:	d068      	beq.n	800c0b6 <HAL_UART_IRQHandler+0x3e2>
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	4a93      	ldr	r2, [pc, #588]	; (800c23c <HAL_UART_IRQHandler+0x568>)
 800bfee:	4293      	cmp	r3, r2
 800bff0:	d061      	beq.n	800c0b6 <HAL_UART_IRQHandler+0x3e2>
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	4a91      	ldr	r2, [pc, #580]	; (800c240 <HAL_UART_IRQHandler+0x56c>)
 800bffc:	4293      	cmp	r3, r2
 800bffe:	d05a      	beq.n	800c0b6 <HAL_UART_IRQHandler+0x3e2>
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	4a8e      	ldr	r2, [pc, #568]	; (800c244 <HAL_UART_IRQHandler+0x570>)
 800c00a:	4293      	cmp	r3, r2
 800c00c:	d053      	beq.n	800c0b6 <HAL_UART_IRQHandler+0x3e2>
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	4a8c      	ldr	r2, [pc, #560]	; (800c248 <HAL_UART_IRQHandler+0x574>)
 800c018:	4293      	cmp	r3, r2
 800c01a:	d04c      	beq.n	800c0b6 <HAL_UART_IRQHandler+0x3e2>
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	4a89      	ldr	r2, [pc, #548]	; (800c24c <HAL_UART_IRQHandler+0x578>)
 800c026:	4293      	cmp	r3, r2
 800c028:	d045      	beq.n	800c0b6 <HAL_UART_IRQHandler+0x3e2>
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	4a87      	ldr	r2, [pc, #540]	; (800c250 <HAL_UART_IRQHandler+0x57c>)
 800c034:	4293      	cmp	r3, r2
 800c036:	d03e      	beq.n	800c0b6 <HAL_UART_IRQHandler+0x3e2>
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	4a84      	ldr	r2, [pc, #528]	; (800c254 <HAL_UART_IRQHandler+0x580>)
 800c042:	4293      	cmp	r3, r2
 800c044:	d037      	beq.n	800c0b6 <HAL_UART_IRQHandler+0x3e2>
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	4a82      	ldr	r2, [pc, #520]	; (800c258 <HAL_UART_IRQHandler+0x584>)
 800c050:	4293      	cmp	r3, r2
 800c052:	d030      	beq.n	800c0b6 <HAL_UART_IRQHandler+0x3e2>
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	4a7f      	ldr	r2, [pc, #508]	; (800c25c <HAL_UART_IRQHandler+0x588>)
 800c05e:	4293      	cmp	r3, r2
 800c060:	d029      	beq.n	800c0b6 <HAL_UART_IRQHandler+0x3e2>
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	4a7d      	ldr	r2, [pc, #500]	; (800c260 <HAL_UART_IRQHandler+0x58c>)
 800c06c:	4293      	cmp	r3, r2
 800c06e:	d022      	beq.n	800c0b6 <HAL_UART_IRQHandler+0x3e2>
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	4a7a      	ldr	r2, [pc, #488]	; (800c264 <HAL_UART_IRQHandler+0x590>)
 800c07a:	4293      	cmp	r3, r2
 800c07c:	d01b      	beq.n	800c0b6 <HAL_UART_IRQHandler+0x3e2>
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	4a78      	ldr	r2, [pc, #480]	; (800c268 <HAL_UART_IRQHandler+0x594>)
 800c088:	4293      	cmp	r3, r2
 800c08a:	d014      	beq.n	800c0b6 <HAL_UART_IRQHandler+0x3e2>
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	4a75      	ldr	r2, [pc, #468]	; (800c26c <HAL_UART_IRQHandler+0x598>)
 800c096:	4293      	cmp	r3, r2
 800c098:	d00d      	beq.n	800c0b6 <HAL_UART_IRQHandler+0x3e2>
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	4a73      	ldr	r2, [pc, #460]	; (800c270 <HAL_UART_IRQHandler+0x59c>)
 800c0a4:	4293      	cmp	r3, r2
 800c0a6:	d006      	beq.n	800c0b6 <HAL_UART_IRQHandler+0x3e2>
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	4a70      	ldr	r2, [pc, #448]	; (800c274 <HAL_UART_IRQHandler+0x5a0>)
 800c0b2:	4293      	cmp	r3, r2
 800c0b4:	d106      	bne.n	800c0c4 <HAL_UART_IRQHandler+0x3f0>
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	685b      	ldr	r3, [r3, #4]
 800c0c0:	b29b      	uxth	r3, r3
 800c0c2:	e005      	b.n	800c0d0 <HAL_UART_IRQHandler+0x3fc>
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	685b      	ldr	r3, [r3, #4]
 800c0ce:	b29b      	uxth	r3, r3
 800c0d0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c0d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	f000 81ab 	beq.w	800c434 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c0e4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c0e8:	429a      	cmp	r2, r3
 800c0ea:	f080 81a3 	bcs.w	800c434 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c0f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c0fe:	69db      	ldr	r3, [r3, #28]
 800c100:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c104:	f000 8087 	beq.w	800c216 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c110:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c114:	e853 3f00 	ldrex	r3, [r3]
 800c118:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c11c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c120:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c124:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	461a      	mov	r2, r3
 800c12e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c132:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c136:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c13a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c13e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c142:	e841 2300 	strex	r3, r2, [r1]
 800c146:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c14a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d1da      	bne.n	800c108 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	3308      	adds	r3, #8
 800c158:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c15a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c15c:	e853 3f00 	ldrex	r3, [r3]
 800c160:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c162:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c164:	f023 0301 	bic.w	r3, r3, #1
 800c168:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	3308      	adds	r3, #8
 800c172:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c176:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c17a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c17c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c17e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c182:	e841 2300 	strex	r3, r2, [r1]
 800c186:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c188:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d1e1      	bne.n	800c152 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	3308      	adds	r3, #8
 800c194:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c196:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c198:	e853 3f00 	ldrex	r3, [r3]
 800c19c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c19e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c1a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c1a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	3308      	adds	r3, #8
 800c1ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c1b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c1b4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c1b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c1ba:	e841 2300 	strex	r3, r2, [r1]
 800c1be:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c1c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d1e3      	bne.n	800c18e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	2220      	movs	r2, #32
 800c1ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c1dc:	e853 3f00 	ldrex	r3, [r3]
 800c1e0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c1e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c1e4:	f023 0310 	bic.w	r3, r3, #16
 800c1e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	461a      	mov	r2, r3
 800c1f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c1f6:	65bb      	str	r3, [r7, #88]	; 0x58
 800c1f8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c1fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c1fe:	e841 2300 	strex	r3, r2, [r1]
 800c202:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c204:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c206:	2b00      	cmp	r3, #0
 800c208:	d1e4      	bne.n	800c1d4 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c210:	4618      	mov	r0, r3
 800c212:	f7f8 f95b 	bl	80044cc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	2202      	movs	r2, #2
 800c21a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c228:	b29b      	uxth	r3, r3
 800c22a:	1ad3      	subs	r3, r2, r3
 800c22c:	b29b      	uxth	r3, r3
 800c22e:	4619      	mov	r1, r3
 800c230:	6878      	ldr	r0, [r7, #4]
 800c232:	f000 f91d 	bl	800c470 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c236:	e0fd      	b.n	800c434 <HAL_UART_IRQHandler+0x760>
 800c238:	40020010 	.word	0x40020010
 800c23c:	40020028 	.word	0x40020028
 800c240:	40020040 	.word	0x40020040
 800c244:	40020058 	.word	0x40020058
 800c248:	40020070 	.word	0x40020070
 800c24c:	40020088 	.word	0x40020088
 800c250:	400200a0 	.word	0x400200a0
 800c254:	400200b8 	.word	0x400200b8
 800c258:	40020410 	.word	0x40020410
 800c25c:	40020428 	.word	0x40020428
 800c260:	40020440 	.word	0x40020440
 800c264:	40020458 	.word	0x40020458
 800c268:	40020470 	.word	0x40020470
 800c26c:	40020488 	.word	0x40020488
 800c270:	400204a0 	.word	0x400204a0
 800c274:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c284:	b29b      	uxth	r3, r3
 800c286:	1ad3      	subs	r3, r2, r3
 800c288:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c292:	b29b      	uxth	r3, r3
 800c294:	2b00      	cmp	r3, #0
 800c296:	f000 80cf 	beq.w	800c438 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800c29a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	f000 80ca 	beq.w	800c438 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2ac:	e853 3f00 	ldrex	r3, [r3]
 800c2b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c2b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c2b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	461a      	mov	r2, r3
 800c2c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c2c6:	647b      	str	r3, [r7, #68]	; 0x44
 800c2c8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c2cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c2ce:	e841 2300 	strex	r3, r2, [r1]
 800c2d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c2d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d1e4      	bne.n	800c2a4 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	3308      	adds	r3, #8
 800c2e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2e4:	e853 3f00 	ldrex	r3, [r3]
 800c2e8:	623b      	str	r3, [r7, #32]
   return(result);
 800c2ea:	6a3a      	ldr	r2, [r7, #32]
 800c2ec:	4b55      	ldr	r3, [pc, #340]	; (800c444 <HAL_UART_IRQHandler+0x770>)
 800c2ee:	4013      	ands	r3, r2
 800c2f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	3308      	adds	r3, #8
 800c2fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c2fe:	633a      	str	r2, [r7, #48]	; 0x30
 800c300:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c302:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c304:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c306:	e841 2300 	strex	r3, r2, [r1]
 800c30a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c30c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d1e3      	bne.n	800c2da <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	2220      	movs	r2, #32
 800c316:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	2200      	movs	r2, #0
 800c31e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	2200      	movs	r2, #0
 800c324:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c32c:	693b      	ldr	r3, [r7, #16]
 800c32e:	e853 3f00 	ldrex	r3, [r3]
 800c332:	60fb      	str	r3, [r7, #12]
   return(result);
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	f023 0310 	bic.w	r3, r3, #16
 800c33a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	461a      	mov	r2, r3
 800c344:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c348:	61fb      	str	r3, [r7, #28]
 800c34a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c34c:	69b9      	ldr	r1, [r7, #24]
 800c34e:	69fa      	ldr	r2, [r7, #28]
 800c350:	e841 2300 	strex	r3, r2, [r1]
 800c354:	617b      	str	r3, [r7, #20]
   return(result);
 800c356:	697b      	ldr	r3, [r7, #20]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d1e4      	bne.n	800c326 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	2202      	movs	r2, #2
 800c360:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c362:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c366:	4619      	mov	r1, r3
 800c368:	6878      	ldr	r0, [r7, #4]
 800c36a:	f000 f881 	bl	800c470 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c36e:	e063      	b.n	800c438 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c374:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d00e      	beq.n	800c39a <HAL_UART_IRQHandler+0x6c6>
 800c37c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c380:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c384:	2b00      	cmp	r3, #0
 800c386:	d008      	beq.n	800c39a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c390:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c392:	6878      	ldr	r0, [r7, #4]
 800c394:	f001 fe7a 	bl	800e08c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c398:	e051      	b.n	800c43e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c39a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c39e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d014      	beq.n	800c3d0 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c3a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c3aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d105      	bne.n	800c3be <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c3b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c3b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d008      	beq.n	800c3d0 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d03a      	beq.n	800c43c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c3ca:	6878      	ldr	r0, [r7, #4]
 800c3cc:	4798      	blx	r3
    }
    return;
 800c3ce:	e035      	b.n	800c43c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c3d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c3d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d009      	beq.n	800c3f0 <HAL_UART_IRQHandler+0x71c>
 800c3dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c3e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d003      	beq.n	800c3f0 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800c3e8:	6878      	ldr	r0, [r7, #4]
 800c3ea:	f001 f907 	bl	800d5fc <UART_EndTransmit_IT>
    return;
 800c3ee:	e026      	b.n	800c43e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c3f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c3f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d009      	beq.n	800c410 <HAL_UART_IRQHandler+0x73c>
 800c3fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c400:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c404:	2b00      	cmp	r3, #0
 800c406:	d003      	beq.n	800c410 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c408:	6878      	ldr	r0, [r7, #4]
 800c40a:	f001 fe53 	bl	800e0b4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c40e:	e016      	b.n	800c43e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c410:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c414:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d010      	beq.n	800c43e <HAL_UART_IRQHandler+0x76a>
 800c41c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c420:	2b00      	cmp	r3, #0
 800c422:	da0c      	bge.n	800c43e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c424:	6878      	ldr	r0, [r7, #4]
 800c426:	f001 fe3b 	bl	800e0a0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c42a:	e008      	b.n	800c43e <HAL_UART_IRQHandler+0x76a>
      return;
 800c42c:	bf00      	nop
 800c42e:	e006      	b.n	800c43e <HAL_UART_IRQHandler+0x76a>
    return;
 800c430:	bf00      	nop
 800c432:	e004      	b.n	800c43e <HAL_UART_IRQHandler+0x76a>
      return;
 800c434:	bf00      	nop
 800c436:	e002      	b.n	800c43e <HAL_UART_IRQHandler+0x76a>
      return;
 800c438:	bf00      	nop
 800c43a:	e000      	b.n	800c43e <HAL_UART_IRQHandler+0x76a>
    return;
 800c43c:	bf00      	nop
  }
}
 800c43e:	37e8      	adds	r7, #232	; 0xe8
 800c440:	46bd      	mov	sp, r7
 800c442:	bd80      	pop	{r7, pc}
 800c444:	effffffe 	.word	0xeffffffe

0800c448 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c448:	b480      	push	{r7}
 800c44a:	b083      	sub	sp, #12
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c450:	bf00      	nop
 800c452:	370c      	adds	r7, #12
 800c454:	46bd      	mov	sp, r7
 800c456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c45a:	4770      	bx	lr

0800c45c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c45c:	b480      	push	{r7}
 800c45e:	b083      	sub	sp, #12
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c464:	bf00      	nop
 800c466:	370c      	adds	r7, #12
 800c468:	46bd      	mov	sp, r7
 800c46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46e:	4770      	bx	lr

0800c470 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c470:	b480      	push	{r7}
 800c472:	b083      	sub	sp, #12
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
 800c478:	460b      	mov	r3, r1
 800c47a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c47c:	bf00      	nop
 800c47e:	370c      	adds	r7, #12
 800c480:	46bd      	mov	sp, r7
 800c482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c486:	4770      	bx	lr

0800c488 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c488:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c48c:	b092      	sub	sp, #72	; 0x48
 800c48e:	af00      	add	r7, sp, #0
 800c490:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c492:	2300      	movs	r3, #0
 800c494:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c498:	697b      	ldr	r3, [r7, #20]
 800c49a:	689a      	ldr	r2, [r3, #8]
 800c49c:	697b      	ldr	r3, [r7, #20]
 800c49e:	691b      	ldr	r3, [r3, #16]
 800c4a0:	431a      	orrs	r2, r3
 800c4a2:	697b      	ldr	r3, [r7, #20]
 800c4a4:	695b      	ldr	r3, [r3, #20]
 800c4a6:	431a      	orrs	r2, r3
 800c4a8:	697b      	ldr	r3, [r7, #20]
 800c4aa:	69db      	ldr	r3, [r3, #28]
 800c4ac:	4313      	orrs	r3, r2
 800c4ae:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c4b0:	697b      	ldr	r3, [r7, #20]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	681a      	ldr	r2, [r3, #0]
 800c4b6:	4bbe      	ldr	r3, [pc, #760]	; (800c7b0 <UART_SetConfig+0x328>)
 800c4b8:	4013      	ands	r3, r2
 800c4ba:	697a      	ldr	r2, [r7, #20]
 800c4bc:	6812      	ldr	r2, [r2, #0]
 800c4be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c4c0:	430b      	orrs	r3, r1
 800c4c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c4c4:	697b      	ldr	r3, [r7, #20]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	685b      	ldr	r3, [r3, #4]
 800c4ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c4ce:	697b      	ldr	r3, [r7, #20]
 800c4d0:	68da      	ldr	r2, [r3, #12]
 800c4d2:	697b      	ldr	r3, [r7, #20]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	430a      	orrs	r2, r1
 800c4d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c4da:	697b      	ldr	r3, [r7, #20]
 800c4dc:	699b      	ldr	r3, [r3, #24]
 800c4de:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c4e0:	697b      	ldr	r3, [r7, #20]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	4ab3      	ldr	r2, [pc, #716]	; (800c7b4 <UART_SetConfig+0x32c>)
 800c4e6:	4293      	cmp	r3, r2
 800c4e8:	d004      	beq.n	800c4f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c4ea:	697b      	ldr	r3, [r7, #20]
 800c4ec:	6a1b      	ldr	r3, [r3, #32]
 800c4ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c4f0:	4313      	orrs	r3, r2
 800c4f2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c4f4:	697b      	ldr	r3, [r7, #20]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	689a      	ldr	r2, [r3, #8]
 800c4fa:	4baf      	ldr	r3, [pc, #700]	; (800c7b8 <UART_SetConfig+0x330>)
 800c4fc:	4013      	ands	r3, r2
 800c4fe:	697a      	ldr	r2, [r7, #20]
 800c500:	6812      	ldr	r2, [r2, #0]
 800c502:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c504:	430b      	orrs	r3, r1
 800c506:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c508:	697b      	ldr	r3, [r7, #20]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c50e:	f023 010f 	bic.w	r1, r3, #15
 800c512:	697b      	ldr	r3, [r7, #20]
 800c514:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c516:	697b      	ldr	r3, [r7, #20]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	430a      	orrs	r2, r1
 800c51c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c51e:	697b      	ldr	r3, [r7, #20]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	4aa6      	ldr	r2, [pc, #664]	; (800c7bc <UART_SetConfig+0x334>)
 800c524:	4293      	cmp	r3, r2
 800c526:	d177      	bne.n	800c618 <UART_SetConfig+0x190>
 800c528:	4ba5      	ldr	r3, [pc, #660]	; (800c7c0 <UART_SetConfig+0x338>)
 800c52a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c52c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c530:	2b28      	cmp	r3, #40	; 0x28
 800c532:	d86d      	bhi.n	800c610 <UART_SetConfig+0x188>
 800c534:	a201      	add	r2, pc, #4	; (adr r2, 800c53c <UART_SetConfig+0xb4>)
 800c536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c53a:	bf00      	nop
 800c53c:	0800c5e1 	.word	0x0800c5e1
 800c540:	0800c611 	.word	0x0800c611
 800c544:	0800c611 	.word	0x0800c611
 800c548:	0800c611 	.word	0x0800c611
 800c54c:	0800c611 	.word	0x0800c611
 800c550:	0800c611 	.word	0x0800c611
 800c554:	0800c611 	.word	0x0800c611
 800c558:	0800c611 	.word	0x0800c611
 800c55c:	0800c5e9 	.word	0x0800c5e9
 800c560:	0800c611 	.word	0x0800c611
 800c564:	0800c611 	.word	0x0800c611
 800c568:	0800c611 	.word	0x0800c611
 800c56c:	0800c611 	.word	0x0800c611
 800c570:	0800c611 	.word	0x0800c611
 800c574:	0800c611 	.word	0x0800c611
 800c578:	0800c611 	.word	0x0800c611
 800c57c:	0800c5f1 	.word	0x0800c5f1
 800c580:	0800c611 	.word	0x0800c611
 800c584:	0800c611 	.word	0x0800c611
 800c588:	0800c611 	.word	0x0800c611
 800c58c:	0800c611 	.word	0x0800c611
 800c590:	0800c611 	.word	0x0800c611
 800c594:	0800c611 	.word	0x0800c611
 800c598:	0800c611 	.word	0x0800c611
 800c59c:	0800c5f9 	.word	0x0800c5f9
 800c5a0:	0800c611 	.word	0x0800c611
 800c5a4:	0800c611 	.word	0x0800c611
 800c5a8:	0800c611 	.word	0x0800c611
 800c5ac:	0800c611 	.word	0x0800c611
 800c5b0:	0800c611 	.word	0x0800c611
 800c5b4:	0800c611 	.word	0x0800c611
 800c5b8:	0800c611 	.word	0x0800c611
 800c5bc:	0800c601 	.word	0x0800c601
 800c5c0:	0800c611 	.word	0x0800c611
 800c5c4:	0800c611 	.word	0x0800c611
 800c5c8:	0800c611 	.word	0x0800c611
 800c5cc:	0800c611 	.word	0x0800c611
 800c5d0:	0800c611 	.word	0x0800c611
 800c5d4:	0800c611 	.word	0x0800c611
 800c5d8:	0800c611 	.word	0x0800c611
 800c5dc:	0800c609 	.word	0x0800c609
 800c5e0:	2301      	movs	r3, #1
 800c5e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5e6:	e222      	b.n	800ca2e <UART_SetConfig+0x5a6>
 800c5e8:	2304      	movs	r3, #4
 800c5ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5ee:	e21e      	b.n	800ca2e <UART_SetConfig+0x5a6>
 800c5f0:	2308      	movs	r3, #8
 800c5f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5f6:	e21a      	b.n	800ca2e <UART_SetConfig+0x5a6>
 800c5f8:	2310      	movs	r3, #16
 800c5fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5fe:	e216      	b.n	800ca2e <UART_SetConfig+0x5a6>
 800c600:	2320      	movs	r3, #32
 800c602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c606:	e212      	b.n	800ca2e <UART_SetConfig+0x5a6>
 800c608:	2340      	movs	r3, #64	; 0x40
 800c60a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c60e:	e20e      	b.n	800ca2e <UART_SetConfig+0x5a6>
 800c610:	2380      	movs	r3, #128	; 0x80
 800c612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c616:	e20a      	b.n	800ca2e <UART_SetConfig+0x5a6>
 800c618:	697b      	ldr	r3, [r7, #20]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	4a69      	ldr	r2, [pc, #420]	; (800c7c4 <UART_SetConfig+0x33c>)
 800c61e:	4293      	cmp	r3, r2
 800c620:	d130      	bne.n	800c684 <UART_SetConfig+0x1fc>
 800c622:	4b67      	ldr	r3, [pc, #412]	; (800c7c0 <UART_SetConfig+0x338>)
 800c624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c626:	f003 0307 	and.w	r3, r3, #7
 800c62a:	2b05      	cmp	r3, #5
 800c62c:	d826      	bhi.n	800c67c <UART_SetConfig+0x1f4>
 800c62e:	a201      	add	r2, pc, #4	; (adr r2, 800c634 <UART_SetConfig+0x1ac>)
 800c630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c634:	0800c64d 	.word	0x0800c64d
 800c638:	0800c655 	.word	0x0800c655
 800c63c:	0800c65d 	.word	0x0800c65d
 800c640:	0800c665 	.word	0x0800c665
 800c644:	0800c66d 	.word	0x0800c66d
 800c648:	0800c675 	.word	0x0800c675
 800c64c:	2300      	movs	r3, #0
 800c64e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c652:	e1ec      	b.n	800ca2e <UART_SetConfig+0x5a6>
 800c654:	2304      	movs	r3, #4
 800c656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c65a:	e1e8      	b.n	800ca2e <UART_SetConfig+0x5a6>
 800c65c:	2308      	movs	r3, #8
 800c65e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c662:	e1e4      	b.n	800ca2e <UART_SetConfig+0x5a6>
 800c664:	2310      	movs	r3, #16
 800c666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c66a:	e1e0      	b.n	800ca2e <UART_SetConfig+0x5a6>
 800c66c:	2320      	movs	r3, #32
 800c66e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c672:	e1dc      	b.n	800ca2e <UART_SetConfig+0x5a6>
 800c674:	2340      	movs	r3, #64	; 0x40
 800c676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c67a:	e1d8      	b.n	800ca2e <UART_SetConfig+0x5a6>
 800c67c:	2380      	movs	r3, #128	; 0x80
 800c67e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c682:	e1d4      	b.n	800ca2e <UART_SetConfig+0x5a6>
 800c684:	697b      	ldr	r3, [r7, #20]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	4a4f      	ldr	r2, [pc, #316]	; (800c7c8 <UART_SetConfig+0x340>)
 800c68a:	4293      	cmp	r3, r2
 800c68c:	d130      	bne.n	800c6f0 <UART_SetConfig+0x268>
 800c68e:	4b4c      	ldr	r3, [pc, #304]	; (800c7c0 <UART_SetConfig+0x338>)
 800c690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c692:	f003 0307 	and.w	r3, r3, #7
 800c696:	2b05      	cmp	r3, #5
 800c698:	d826      	bhi.n	800c6e8 <UART_SetConfig+0x260>
 800c69a:	a201      	add	r2, pc, #4	; (adr r2, 800c6a0 <UART_SetConfig+0x218>)
 800c69c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6a0:	0800c6b9 	.word	0x0800c6b9
 800c6a4:	0800c6c1 	.word	0x0800c6c1
 800c6a8:	0800c6c9 	.word	0x0800c6c9
 800c6ac:	0800c6d1 	.word	0x0800c6d1
 800c6b0:	0800c6d9 	.word	0x0800c6d9
 800c6b4:	0800c6e1 	.word	0x0800c6e1
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6be:	e1b6      	b.n	800ca2e <UART_SetConfig+0x5a6>
 800c6c0:	2304      	movs	r3, #4
 800c6c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6c6:	e1b2      	b.n	800ca2e <UART_SetConfig+0x5a6>
 800c6c8:	2308      	movs	r3, #8
 800c6ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6ce:	e1ae      	b.n	800ca2e <UART_SetConfig+0x5a6>
 800c6d0:	2310      	movs	r3, #16
 800c6d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6d6:	e1aa      	b.n	800ca2e <UART_SetConfig+0x5a6>
 800c6d8:	2320      	movs	r3, #32
 800c6da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6de:	e1a6      	b.n	800ca2e <UART_SetConfig+0x5a6>
 800c6e0:	2340      	movs	r3, #64	; 0x40
 800c6e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6e6:	e1a2      	b.n	800ca2e <UART_SetConfig+0x5a6>
 800c6e8:	2380      	movs	r3, #128	; 0x80
 800c6ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6ee:	e19e      	b.n	800ca2e <UART_SetConfig+0x5a6>
 800c6f0:	697b      	ldr	r3, [r7, #20]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	4a35      	ldr	r2, [pc, #212]	; (800c7cc <UART_SetConfig+0x344>)
 800c6f6:	4293      	cmp	r3, r2
 800c6f8:	d130      	bne.n	800c75c <UART_SetConfig+0x2d4>
 800c6fa:	4b31      	ldr	r3, [pc, #196]	; (800c7c0 <UART_SetConfig+0x338>)
 800c6fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6fe:	f003 0307 	and.w	r3, r3, #7
 800c702:	2b05      	cmp	r3, #5
 800c704:	d826      	bhi.n	800c754 <UART_SetConfig+0x2cc>
 800c706:	a201      	add	r2, pc, #4	; (adr r2, 800c70c <UART_SetConfig+0x284>)
 800c708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c70c:	0800c725 	.word	0x0800c725
 800c710:	0800c72d 	.word	0x0800c72d
 800c714:	0800c735 	.word	0x0800c735
 800c718:	0800c73d 	.word	0x0800c73d
 800c71c:	0800c745 	.word	0x0800c745
 800c720:	0800c74d 	.word	0x0800c74d
 800c724:	2300      	movs	r3, #0
 800c726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c72a:	e180      	b.n	800ca2e <UART_SetConfig+0x5a6>
 800c72c:	2304      	movs	r3, #4
 800c72e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c732:	e17c      	b.n	800ca2e <UART_SetConfig+0x5a6>
 800c734:	2308      	movs	r3, #8
 800c736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c73a:	e178      	b.n	800ca2e <UART_SetConfig+0x5a6>
 800c73c:	2310      	movs	r3, #16
 800c73e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c742:	e174      	b.n	800ca2e <UART_SetConfig+0x5a6>
 800c744:	2320      	movs	r3, #32
 800c746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c74a:	e170      	b.n	800ca2e <UART_SetConfig+0x5a6>
 800c74c:	2340      	movs	r3, #64	; 0x40
 800c74e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c752:	e16c      	b.n	800ca2e <UART_SetConfig+0x5a6>
 800c754:	2380      	movs	r3, #128	; 0x80
 800c756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c75a:	e168      	b.n	800ca2e <UART_SetConfig+0x5a6>
 800c75c:	697b      	ldr	r3, [r7, #20]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	4a1b      	ldr	r2, [pc, #108]	; (800c7d0 <UART_SetConfig+0x348>)
 800c762:	4293      	cmp	r3, r2
 800c764:	d142      	bne.n	800c7ec <UART_SetConfig+0x364>
 800c766:	4b16      	ldr	r3, [pc, #88]	; (800c7c0 <UART_SetConfig+0x338>)
 800c768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c76a:	f003 0307 	and.w	r3, r3, #7
 800c76e:	2b05      	cmp	r3, #5
 800c770:	d838      	bhi.n	800c7e4 <UART_SetConfig+0x35c>
 800c772:	a201      	add	r2, pc, #4	; (adr r2, 800c778 <UART_SetConfig+0x2f0>)
 800c774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c778:	0800c791 	.word	0x0800c791
 800c77c:	0800c799 	.word	0x0800c799
 800c780:	0800c7a1 	.word	0x0800c7a1
 800c784:	0800c7a9 	.word	0x0800c7a9
 800c788:	0800c7d5 	.word	0x0800c7d5
 800c78c:	0800c7dd 	.word	0x0800c7dd
 800c790:	2300      	movs	r3, #0
 800c792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c796:	e14a      	b.n	800ca2e <UART_SetConfig+0x5a6>
 800c798:	2304      	movs	r3, #4
 800c79a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c79e:	e146      	b.n	800ca2e <UART_SetConfig+0x5a6>
 800c7a0:	2308      	movs	r3, #8
 800c7a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7a6:	e142      	b.n	800ca2e <UART_SetConfig+0x5a6>
 800c7a8:	2310      	movs	r3, #16
 800c7aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7ae:	e13e      	b.n	800ca2e <UART_SetConfig+0x5a6>
 800c7b0:	cfff69f3 	.word	0xcfff69f3
 800c7b4:	58000c00 	.word	0x58000c00
 800c7b8:	11fff4ff 	.word	0x11fff4ff
 800c7bc:	40011000 	.word	0x40011000
 800c7c0:	58024400 	.word	0x58024400
 800c7c4:	40004400 	.word	0x40004400
 800c7c8:	40004800 	.word	0x40004800
 800c7cc:	40004c00 	.word	0x40004c00
 800c7d0:	40005000 	.word	0x40005000
 800c7d4:	2320      	movs	r3, #32
 800c7d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7da:	e128      	b.n	800ca2e <UART_SetConfig+0x5a6>
 800c7dc:	2340      	movs	r3, #64	; 0x40
 800c7de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7e2:	e124      	b.n	800ca2e <UART_SetConfig+0x5a6>
 800c7e4:	2380      	movs	r3, #128	; 0x80
 800c7e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7ea:	e120      	b.n	800ca2e <UART_SetConfig+0x5a6>
 800c7ec:	697b      	ldr	r3, [r7, #20]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	4acb      	ldr	r2, [pc, #812]	; (800cb20 <UART_SetConfig+0x698>)
 800c7f2:	4293      	cmp	r3, r2
 800c7f4:	d176      	bne.n	800c8e4 <UART_SetConfig+0x45c>
 800c7f6:	4bcb      	ldr	r3, [pc, #812]	; (800cb24 <UART_SetConfig+0x69c>)
 800c7f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c7fe:	2b28      	cmp	r3, #40	; 0x28
 800c800:	d86c      	bhi.n	800c8dc <UART_SetConfig+0x454>
 800c802:	a201      	add	r2, pc, #4	; (adr r2, 800c808 <UART_SetConfig+0x380>)
 800c804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c808:	0800c8ad 	.word	0x0800c8ad
 800c80c:	0800c8dd 	.word	0x0800c8dd
 800c810:	0800c8dd 	.word	0x0800c8dd
 800c814:	0800c8dd 	.word	0x0800c8dd
 800c818:	0800c8dd 	.word	0x0800c8dd
 800c81c:	0800c8dd 	.word	0x0800c8dd
 800c820:	0800c8dd 	.word	0x0800c8dd
 800c824:	0800c8dd 	.word	0x0800c8dd
 800c828:	0800c8b5 	.word	0x0800c8b5
 800c82c:	0800c8dd 	.word	0x0800c8dd
 800c830:	0800c8dd 	.word	0x0800c8dd
 800c834:	0800c8dd 	.word	0x0800c8dd
 800c838:	0800c8dd 	.word	0x0800c8dd
 800c83c:	0800c8dd 	.word	0x0800c8dd
 800c840:	0800c8dd 	.word	0x0800c8dd
 800c844:	0800c8dd 	.word	0x0800c8dd
 800c848:	0800c8bd 	.word	0x0800c8bd
 800c84c:	0800c8dd 	.word	0x0800c8dd
 800c850:	0800c8dd 	.word	0x0800c8dd
 800c854:	0800c8dd 	.word	0x0800c8dd
 800c858:	0800c8dd 	.word	0x0800c8dd
 800c85c:	0800c8dd 	.word	0x0800c8dd
 800c860:	0800c8dd 	.word	0x0800c8dd
 800c864:	0800c8dd 	.word	0x0800c8dd
 800c868:	0800c8c5 	.word	0x0800c8c5
 800c86c:	0800c8dd 	.word	0x0800c8dd
 800c870:	0800c8dd 	.word	0x0800c8dd
 800c874:	0800c8dd 	.word	0x0800c8dd
 800c878:	0800c8dd 	.word	0x0800c8dd
 800c87c:	0800c8dd 	.word	0x0800c8dd
 800c880:	0800c8dd 	.word	0x0800c8dd
 800c884:	0800c8dd 	.word	0x0800c8dd
 800c888:	0800c8cd 	.word	0x0800c8cd
 800c88c:	0800c8dd 	.word	0x0800c8dd
 800c890:	0800c8dd 	.word	0x0800c8dd
 800c894:	0800c8dd 	.word	0x0800c8dd
 800c898:	0800c8dd 	.word	0x0800c8dd
 800c89c:	0800c8dd 	.word	0x0800c8dd
 800c8a0:	0800c8dd 	.word	0x0800c8dd
 800c8a4:	0800c8dd 	.word	0x0800c8dd
 800c8a8:	0800c8d5 	.word	0x0800c8d5
 800c8ac:	2301      	movs	r3, #1
 800c8ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8b2:	e0bc      	b.n	800ca2e <UART_SetConfig+0x5a6>
 800c8b4:	2304      	movs	r3, #4
 800c8b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8ba:	e0b8      	b.n	800ca2e <UART_SetConfig+0x5a6>
 800c8bc:	2308      	movs	r3, #8
 800c8be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8c2:	e0b4      	b.n	800ca2e <UART_SetConfig+0x5a6>
 800c8c4:	2310      	movs	r3, #16
 800c8c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8ca:	e0b0      	b.n	800ca2e <UART_SetConfig+0x5a6>
 800c8cc:	2320      	movs	r3, #32
 800c8ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8d2:	e0ac      	b.n	800ca2e <UART_SetConfig+0x5a6>
 800c8d4:	2340      	movs	r3, #64	; 0x40
 800c8d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8da:	e0a8      	b.n	800ca2e <UART_SetConfig+0x5a6>
 800c8dc:	2380      	movs	r3, #128	; 0x80
 800c8de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8e2:	e0a4      	b.n	800ca2e <UART_SetConfig+0x5a6>
 800c8e4:	697b      	ldr	r3, [r7, #20]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	4a8f      	ldr	r2, [pc, #572]	; (800cb28 <UART_SetConfig+0x6a0>)
 800c8ea:	4293      	cmp	r3, r2
 800c8ec:	d130      	bne.n	800c950 <UART_SetConfig+0x4c8>
 800c8ee:	4b8d      	ldr	r3, [pc, #564]	; (800cb24 <UART_SetConfig+0x69c>)
 800c8f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8f2:	f003 0307 	and.w	r3, r3, #7
 800c8f6:	2b05      	cmp	r3, #5
 800c8f8:	d826      	bhi.n	800c948 <UART_SetConfig+0x4c0>
 800c8fa:	a201      	add	r2, pc, #4	; (adr r2, 800c900 <UART_SetConfig+0x478>)
 800c8fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c900:	0800c919 	.word	0x0800c919
 800c904:	0800c921 	.word	0x0800c921
 800c908:	0800c929 	.word	0x0800c929
 800c90c:	0800c931 	.word	0x0800c931
 800c910:	0800c939 	.word	0x0800c939
 800c914:	0800c941 	.word	0x0800c941
 800c918:	2300      	movs	r3, #0
 800c91a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c91e:	e086      	b.n	800ca2e <UART_SetConfig+0x5a6>
 800c920:	2304      	movs	r3, #4
 800c922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c926:	e082      	b.n	800ca2e <UART_SetConfig+0x5a6>
 800c928:	2308      	movs	r3, #8
 800c92a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c92e:	e07e      	b.n	800ca2e <UART_SetConfig+0x5a6>
 800c930:	2310      	movs	r3, #16
 800c932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c936:	e07a      	b.n	800ca2e <UART_SetConfig+0x5a6>
 800c938:	2320      	movs	r3, #32
 800c93a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c93e:	e076      	b.n	800ca2e <UART_SetConfig+0x5a6>
 800c940:	2340      	movs	r3, #64	; 0x40
 800c942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c946:	e072      	b.n	800ca2e <UART_SetConfig+0x5a6>
 800c948:	2380      	movs	r3, #128	; 0x80
 800c94a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c94e:	e06e      	b.n	800ca2e <UART_SetConfig+0x5a6>
 800c950:	697b      	ldr	r3, [r7, #20]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	4a75      	ldr	r2, [pc, #468]	; (800cb2c <UART_SetConfig+0x6a4>)
 800c956:	4293      	cmp	r3, r2
 800c958:	d130      	bne.n	800c9bc <UART_SetConfig+0x534>
 800c95a:	4b72      	ldr	r3, [pc, #456]	; (800cb24 <UART_SetConfig+0x69c>)
 800c95c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c95e:	f003 0307 	and.w	r3, r3, #7
 800c962:	2b05      	cmp	r3, #5
 800c964:	d826      	bhi.n	800c9b4 <UART_SetConfig+0x52c>
 800c966:	a201      	add	r2, pc, #4	; (adr r2, 800c96c <UART_SetConfig+0x4e4>)
 800c968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c96c:	0800c985 	.word	0x0800c985
 800c970:	0800c98d 	.word	0x0800c98d
 800c974:	0800c995 	.word	0x0800c995
 800c978:	0800c99d 	.word	0x0800c99d
 800c97c:	0800c9a5 	.word	0x0800c9a5
 800c980:	0800c9ad 	.word	0x0800c9ad
 800c984:	2300      	movs	r3, #0
 800c986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c98a:	e050      	b.n	800ca2e <UART_SetConfig+0x5a6>
 800c98c:	2304      	movs	r3, #4
 800c98e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c992:	e04c      	b.n	800ca2e <UART_SetConfig+0x5a6>
 800c994:	2308      	movs	r3, #8
 800c996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c99a:	e048      	b.n	800ca2e <UART_SetConfig+0x5a6>
 800c99c:	2310      	movs	r3, #16
 800c99e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9a2:	e044      	b.n	800ca2e <UART_SetConfig+0x5a6>
 800c9a4:	2320      	movs	r3, #32
 800c9a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9aa:	e040      	b.n	800ca2e <UART_SetConfig+0x5a6>
 800c9ac:	2340      	movs	r3, #64	; 0x40
 800c9ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9b2:	e03c      	b.n	800ca2e <UART_SetConfig+0x5a6>
 800c9b4:	2380      	movs	r3, #128	; 0x80
 800c9b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9ba:	e038      	b.n	800ca2e <UART_SetConfig+0x5a6>
 800c9bc:	697b      	ldr	r3, [r7, #20]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	4a5b      	ldr	r2, [pc, #364]	; (800cb30 <UART_SetConfig+0x6a8>)
 800c9c2:	4293      	cmp	r3, r2
 800c9c4:	d130      	bne.n	800ca28 <UART_SetConfig+0x5a0>
 800c9c6:	4b57      	ldr	r3, [pc, #348]	; (800cb24 <UART_SetConfig+0x69c>)
 800c9c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c9ca:	f003 0307 	and.w	r3, r3, #7
 800c9ce:	2b05      	cmp	r3, #5
 800c9d0:	d826      	bhi.n	800ca20 <UART_SetConfig+0x598>
 800c9d2:	a201      	add	r2, pc, #4	; (adr r2, 800c9d8 <UART_SetConfig+0x550>)
 800c9d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9d8:	0800c9f1 	.word	0x0800c9f1
 800c9dc:	0800c9f9 	.word	0x0800c9f9
 800c9e0:	0800ca01 	.word	0x0800ca01
 800c9e4:	0800ca09 	.word	0x0800ca09
 800c9e8:	0800ca11 	.word	0x0800ca11
 800c9ec:	0800ca19 	.word	0x0800ca19
 800c9f0:	2302      	movs	r3, #2
 800c9f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9f6:	e01a      	b.n	800ca2e <UART_SetConfig+0x5a6>
 800c9f8:	2304      	movs	r3, #4
 800c9fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9fe:	e016      	b.n	800ca2e <UART_SetConfig+0x5a6>
 800ca00:	2308      	movs	r3, #8
 800ca02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca06:	e012      	b.n	800ca2e <UART_SetConfig+0x5a6>
 800ca08:	2310      	movs	r3, #16
 800ca0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca0e:	e00e      	b.n	800ca2e <UART_SetConfig+0x5a6>
 800ca10:	2320      	movs	r3, #32
 800ca12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca16:	e00a      	b.n	800ca2e <UART_SetConfig+0x5a6>
 800ca18:	2340      	movs	r3, #64	; 0x40
 800ca1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca1e:	e006      	b.n	800ca2e <UART_SetConfig+0x5a6>
 800ca20:	2380      	movs	r3, #128	; 0x80
 800ca22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca26:	e002      	b.n	800ca2e <UART_SetConfig+0x5a6>
 800ca28:	2380      	movs	r3, #128	; 0x80
 800ca2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ca2e:	697b      	ldr	r3, [r7, #20]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	4a3f      	ldr	r2, [pc, #252]	; (800cb30 <UART_SetConfig+0x6a8>)
 800ca34:	4293      	cmp	r3, r2
 800ca36:	f040 80f8 	bne.w	800cc2a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ca3a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ca3e:	2b20      	cmp	r3, #32
 800ca40:	dc46      	bgt.n	800cad0 <UART_SetConfig+0x648>
 800ca42:	2b02      	cmp	r3, #2
 800ca44:	f2c0 8082 	blt.w	800cb4c <UART_SetConfig+0x6c4>
 800ca48:	3b02      	subs	r3, #2
 800ca4a:	2b1e      	cmp	r3, #30
 800ca4c:	d87e      	bhi.n	800cb4c <UART_SetConfig+0x6c4>
 800ca4e:	a201      	add	r2, pc, #4	; (adr r2, 800ca54 <UART_SetConfig+0x5cc>)
 800ca50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca54:	0800cad7 	.word	0x0800cad7
 800ca58:	0800cb4d 	.word	0x0800cb4d
 800ca5c:	0800cadf 	.word	0x0800cadf
 800ca60:	0800cb4d 	.word	0x0800cb4d
 800ca64:	0800cb4d 	.word	0x0800cb4d
 800ca68:	0800cb4d 	.word	0x0800cb4d
 800ca6c:	0800caef 	.word	0x0800caef
 800ca70:	0800cb4d 	.word	0x0800cb4d
 800ca74:	0800cb4d 	.word	0x0800cb4d
 800ca78:	0800cb4d 	.word	0x0800cb4d
 800ca7c:	0800cb4d 	.word	0x0800cb4d
 800ca80:	0800cb4d 	.word	0x0800cb4d
 800ca84:	0800cb4d 	.word	0x0800cb4d
 800ca88:	0800cb4d 	.word	0x0800cb4d
 800ca8c:	0800caff 	.word	0x0800caff
 800ca90:	0800cb4d 	.word	0x0800cb4d
 800ca94:	0800cb4d 	.word	0x0800cb4d
 800ca98:	0800cb4d 	.word	0x0800cb4d
 800ca9c:	0800cb4d 	.word	0x0800cb4d
 800caa0:	0800cb4d 	.word	0x0800cb4d
 800caa4:	0800cb4d 	.word	0x0800cb4d
 800caa8:	0800cb4d 	.word	0x0800cb4d
 800caac:	0800cb4d 	.word	0x0800cb4d
 800cab0:	0800cb4d 	.word	0x0800cb4d
 800cab4:	0800cb4d 	.word	0x0800cb4d
 800cab8:	0800cb4d 	.word	0x0800cb4d
 800cabc:	0800cb4d 	.word	0x0800cb4d
 800cac0:	0800cb4d 	.word	0x0800cb4d
 800cac4:	0800cb4d 	.word	0x0800cb4d
 800cac8:	0800cb4d 	.word	0x0800cb4d
 800cacc:	0800cb3f 	.word	0x0800cb3f
 800cad0:	2b40      	cmp	r3, #64	; 0x40
 800cad2:	d037      	beq.n	800cb44 <UART_SetConfig+0x6bc>
 800cad4:	e03a      	b.n	800cb4c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800cad6:	f7fc ff59 	bl	800998c <HAL_RCCEx_GetD3PCLK1Freq>
 800cada:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cadc:	e03c      	b.n	800cb58 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cade:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cae2:	4618      	mov	r0, r3
 800cae4:	f7fc ff68 	bl	80099b8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800caec:	e034      	b.n	800cb58 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800caee:	f107 0318 	add.w	r3, r7, #24
 800caf2:	4618      	mov	r0, r3
 800caf4:	f7fd f8b4 	bl	8009c60 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800caf8:	69fb      	ldr	r3, [r7, #28]
 800cafa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cafc:	e02c      	b.n	800cb58 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cafe:	4b09      	ldr	r3, [pc, #36]	; (800cb24 <UART_SetConfig+0x69c>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	f003 0320 	and.w	r3, r3, #32
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d016      	beq.n	800cb38 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cb0a:	4b06      	ldr	r3, [pc, #24]	; (800cb24 <UART_SetConfig+0x69c>)
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	08db      	lsrs	r3, r3, #3
 800cb10:	f003 0303 	and.w	r3, r3, #3
 800cb14:	4a07      	ldr	r2, [pc, #28]	; (800cb34 <UART_SetConfig+0x6ac>)
 800cb16:	fa22 f303 	lsr.w	r3, r2, r3
 800cb1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cb1c:	e01c      	b.n	800cb58 <UART_SetConfig+0x6d0>
 800cb1e:	bf00      	nop
 800cb20:	40011400 	.word	0x40011400
 800cb24:	58024400 	.word	0x58024400
 800cb28:	40007800 	.word	0x40007800
 800cb2c:	40007c00 	.word	0x40007c00
 800cb30:	58000c00 	.word	0x58000c00
 800cb34:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800cb38:	4b9d      	ldr	r3, [pc, #628]	; (800cdb0 <UART_SetConfig+0x928>)
 800cb3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb3c:	e00c      	b.n	800cb58 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cb3e:	4b9d      	ldr	r3, [pc, #628]	; (800cdb4 <UART_SetConfig+0x92c>)
 800cb40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb42:	e009      	b.n	800cb58 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cb44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cb48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb4a:	e005      	b.n	800cb58 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800cb50:	2301      	movs	r3, #1
 800cb52:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800cb56:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800cb58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	f000 81de 	beq.w	800cf1c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800cb60:	697b      	ldr	r3, [r7, #20]
 800cb62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb64:	4a94      	ldr	r2, [pc, #592]	; (800cdb8 <UART_SetConfig+0x930>)
 800cb66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cb6a:	461a      	mov	r2, r3
 800cb6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb6e:	fbb3 f3f2 	udiv	r3, r3, r2
 800cb72:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cb74:	697b      	ldr	r3, [r7, #20]
 800cb76:	685a      	ldr	r2, [r3, #4]
 800cb78:	4613      	mov	r3, r2
 800cb7a:	005b      	lsls	r3, r3, #1
 800cb7c:	4413      	add	r3, r2
 800cb7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb80:	429a      	cmp	r2, r3
 800cb82:	d305      	bcc.n	800cb90 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800cb84:	697b      	ldr	r3, [r7, #20]
 800cb86:	685b      	ldr	r3, [r3, #4]
 800cb88:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cb8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb8c:	429a      	cmp	r2, r3
 800cb8e:	d903      	bls.n	800cb98 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800cb90:	2301      	movs	r3, #1
 800cb92:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800cb96:	e1c1      	b.n	800cf1c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cb98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	60bb      	str	r3, [r7, #8]
 800cb9e:	60fa      	str	r2, [r7, #12]
 800cba0:	697b      	ldr	r3, [r7, #20]
 800cba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cba4:	4a84      	ldr	r2, [pc, #528]	; (800cdb8 <UART_SetConfig+0x930>)
 800cba6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cbaa:	b29b      	uxth	r3, r3
 800cbac:	2200      	movs	r2, #0
 800cbae:	603b      	str	r3, [r7, #0]
 800cbb0:	607a      	str	r2, [r7, #4]
 800cbb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cbb6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cbba:	f7f3 fbe9 	bl	8000390 <__aeabi_uldivmod>
 800cbbe:	4602      	mov	r2, r0
 800cbc0:	460b      	mov	r3, r1
 800cbc2:	4610      	mov	r0, r2
 800cbc4:	4619      	mov	r1, r3
 800cbc6:	f04f 0200 	mov.w	r2, #0
 800cbca:	f04f 0300 	mov.w	r3, #0
 800cbce:	020b      	lsls	r3, r1, #8
 800cbd0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800cbd4:	0202      	lsls	r2, r0, #8
 800cbd6:	6979      	ldr	r1, [r7, #20]
 800cbd8:	6849      	ldr	r1, [r1, #4]
 800cbda:	0849      	lsrs	r1, r1, #1
 800cbdc:	2000      	movs	r0, #0
 800cbde:	460c      	mov	r4, r1
 800cbe0:	4605      	mov	r5, r0
 800cbe2:	eb12 0804 	adds.w	r8, r2, r4
 800cbe6:	eb43 0905 	adc.w	r9, r3, r5
 800cbea:	697b      	ldr	r3, [r7, #20]
 800cbec:	685b      	ldr	r3, [r3, #4]
 800cbee:	2200      	movs	r2, #0
 800cbf0:	469a      	mov	sl, r3
 800cbf2:	4693      	mov	fp, r2
 800cbf4:	4652      	mov	r2, sl
 800cbf6:	465b      	mov	r3, fp
 800cbf8:	4640      	mov	r0, r8
 800cbfa:	4649      	mov	r1, r9
 800cbfc:	f7f3 fbc8 	bl	8000390 <__aeabi_uldivmod>
 800cc00:	4602      	mov	r2, r0
 800cc02:	460b      	mov	r3, r1
 800cc04:	4613      	mov	r3, r2
 800cc06:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cc08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cc0e:	d308      	bcc.n	800cc22 <UART_SetConfig+0x79a>
 800cc10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cc16:	d204      	bcs.n	800cc22 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800cc18:	697b      	ldr	r3, [r7, #20]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cc1e:	60da      	str	r2, [r3, #12]
 800cc20:	e17c      	b.n	800cf1c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800cc22:	2301      	movs	r3, #1
 800cc24:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800cc28:	e178      	b.n	800cf1c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cc2a:	697b      	ldr	r3, [r7, #20]
 800cc2c:	69db      	ldr	r3, [r3, #28]
 800cc2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cc32:	f040 80c5 	bne.w	800cdc0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800cc36:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800cc3a:	2b20      	cmp	r3, #32
 800cc3c:	dc48      	bgt.n	800ccd0 <UART_SetConfig+0x848>
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	db7b      	blt.n	800cd3a <UART_SetConfig+0x8b2>
 800cc42:	2b20      	cmp	r3, #32
 800cc44:	d879      	bhi.n	800cd3a <UART_SetConfig+0x8b2>
 800cc46:	a201      	add	r2, pc, #4	; (adr r2, 800cc4c <UART_SetConfig+0x7c4>)
 800cc48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc4c:	0800ccd7 	.word	0x0800ccd7
 800cc50:	0800ccdf 	.word	0x0800ccdf
 800cc54:	0800cd3b 	.word	0x0800cd3b
 800cc58:	0800cd3b 	.word	0x0800cd3b
 800cc5c:	0800cce7 	.word	0x0800cce7
 800cc60:	0800cd3b 	.word	0x0800cd3b
 800cc64:	0800cd3b 	.word	0x0800cd3b
 800cc68:	0800cd3b 	.word	0x0800cd3b
 800cc6c:	0800ccf7 	.word	0x0800ccf7
 800cc70:	0800cd3b 	.word	0x0800cd3b
 800cc74:	0800cd3b 	.word	0x0800cd3b
 800cc78:	0800cd3b 	.word	0x0800cd3b
 800cc7c:	0800cd3b 	.word	0x0800cd3b
 800cc80:	0800cd3b 	.word	0x0800cd3b
 800cc84:	0800cd3b 	.word	0x0800cd3b
 800cc88:	0800cd3b 	.word	0x0800cd3b
 800cc8c:	0800cd07 	.word	0x0800cd07
 800cc90:	0800cd3b 	.word	0x0800cd3b
 800cc94:	0800cd3b 	.word	0x0800cd3b
 800cc98:	0800cd3b 	.word	0x0800cd3b
 800cc9c:	0800cd3b 	.word	0x0800cd3b
 800cca0:	0800cd3b 	.word	0x0800cd3b
 800cca4:	0800cd3b 	.word	0x0800cd3b
 800cca8:	0800cd3b 	.word	0x0800cd3b
 800ccac:	0800cd3b 	.word	0x0800cd3b
 800ccb0:	0800cd3b 	.word	0x0800cd3b
 800ccb4:	0800cd3b 	.word	0x0800cd3b
 800ccb8:	0800cd3b 	.word	0x0800cd3b
 800ccbc:	0800cd3b 	.word	0x0800cd3b
 800ccc0:	0800cd3b 	.word	0x0800cd3b
 800ccc4:	0800cd3b 	.word	0x0800cd3b
 800ccc8:	0800cd3b 	.word	0x0800cd3b
 800cccc:	0800cd2d 	.word	0x0800cd2d
 800ccd0:	2b40      	cmp	r3, #64	; 0x40
 800ccd2:	d02e      	beq.n	800cd32 <UART_SetConfig+0x8aa>
 800ccd4:	e031      	b.n	800cd3a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ccd6:	f7fa fea3 	bl	8007a20 <HAL_RCC_GetPCLK1Freq>
 800ccda:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ccdc:	e033      	b.n	800cd46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ccde:	f7fa feb5 	bl	8007a4c <HAL_RCC_GetPCLK2Freq>
 800cce2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cce4:	e02f      	b.n	800cd46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cce6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ccea:	4618      	mov	r0, r3
 800ccec:	f7fc fe64 	bl	80099b8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ccf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ccf4:	e027      	b.n	800cd46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ccf6:	f107 0318 	add.w	r3, r7, #24
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	f7fc ffb0 	bl	8009c60 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cd00:	69fb      	ldr	r3, [r7, #28]
 800cd02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd04:	e01f      	b.n	800cd46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cd06:	4b2d      	ldr	r3, [pc, #180]	; (800cdbc <UART_SetConfig+0x934>)
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	f003 0320 	and.w	r3, r3, #32
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d009      	beq.n	800cd26 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cd12:	4b2a      	ldr	r3, [pc, #168]	; (800cdbc <UART_SetConfig+0x934>)
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	08db      	lsrs	r3, r3, #3
 800cd18:	f003 0303 	and.w	r3, r3, #3
 800cd1c:	4a24      	ldr	r2, [pc, #144]	; (800cdb0 <UART_SetConfig+0x928>)
 800cd1e:	fa22 f303 	lsr.w	r3, r2, r3
 800cd22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cd24:	e00f      	b.n	800cd46 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800cd26:	4b22      	ldr	r3, [pc, #136]	; (800cdb0 <UART_SetConfig+0x928>)
 800cd28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd2a:	e00c      	b.n	800cd46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cd2c:	4b21      	ldr	r3, [pc, #132]	; (800cdb4 <UART_SetConfig+0x92c>)
 800cd2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd30:	e009      	b.n	800cd46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cd32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cd36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd38:	e005      	b.n	800cd46 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800cd3e:	2301      	movs	r3, #1
 800cd40:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800cd44:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cd46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	f000 80e7 	beq.w	800cf1c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cd4e:	697b      	ldr	r3, [r7, #20]
 800cd50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd52:	4a19      	ldr	r2, [pc, #100]	; (800cdb8 <UART_SetConfig+0x930>)
 800cd54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cd58:	461a      	mov	r2, r3
 800cd5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd5c:	fbb3 f3f2 	udiv	r3, r3, r2
 800cd60:	005a      	lsls	r2, r3, #1
 800cd62:	697b      	ldr	r3, [r7, #20]
 800cd64:	685b      	ldr	r3, [r3, #4]
 800cd66:	085b      	lsrs	r3, r3, #1
 800cd68:	441a      	add	r2, r3
 800cd6a:	697b      	ldr	r3, [r7, #20]
 800cd6c:	685b      	ldr	r3, [r3, #4]
 800cd6e:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd72:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cd74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd76:	2b0f      	cmp	r3, #15
 800cd78:	d916      	bls.n	800cda8 <UART_SetConfig+0x920>
 800cd7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd80:	d212      	bcs.n	800cda8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cd82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd84:	b29b      	uxth	r3, r3
 800cd86:	f023 030f 	bic.w	r3, r3, #15
 800cd8a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cd8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd8e:	085b      	lsrs	r3, r3, #1
 800cd90:	b29b      	uxth	r3, r3
 800cd92:	f003 0307 	and.w	r3, r3, #7
 800cd96:	b29a      	uxth	r2, r3
 800cd98:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cd9a:	4313      	orrs	r3, r2
 800cd9c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800cd9e:	697b      	ldr	r3, [r7, #20]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800cda4:	60da      	str	r2, [r3, #12]
 800cda6:	e0b9      	b.n	800cf1c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800cda8:	2301      	movs	r3, #1
 800cdaa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800cdae:	e0b5      	b.n	800cf1c <UART_SetConfig+0xa94>
 800cdb0:	03d09000 	.word	0x03d09000
 800cdb4:	003d0900 	.word	0x003d0900
 800cdb8:	0800f530 	.word	0x0800f530
 800cdbc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800cdc0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800cdc4:	2b20      	cmp	r3, #32
 800cdc6:	dc49      	bgt.n	800ce5c <UART_SetConfig+0x9d4>
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	db7c      	blt.n	800cec6 <UART_SetConfig+0xa3e>
 800cdcc:	2b20      	cmp	r3, #32
 800cdce:	d87a      	bhi.n	800cec6 <UART_SetConfig+0xa3e>
 800cdd0:	a201      	add	r2, pc, #4	; (adr r2, 800cdd8 <UART_SetConfig+0x950>)
 800cdd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdd6:	bf00      	nop
 800cdd8:	0800ce63 	.word	0x0800ce63
 800cddc:	0800ce6b 	.word	0x0800ce6b
 800cde0:	0800cec7 	.word	0x0800cec7
 800cde4:	0800cec7 	.word	0x0800cec7
 800cde8:	0800ce73 	.word	0x0800ce73
 800cdec:	0800cec7 	.word	0x0800cec7
 800cdf0:	0800cec7 	.word	0x0800cec7
 800cdf4:	0800cec7 	.word	0x0800cec7
 800cdf8:	0800ce83 	.word	0x0800ce83
 800cdfc:	0800cec7 	.word	0x0800cec7
 800ce00:	0800cec7 	.word	0x0800cec7
 800ce04:	0800cec7 	.word	0x0800cec7
 800ce08:	0800cec7 	.word	0x0800cec7
 800ce0c:	0800cec7 	.word	0x0800cec7
 800ce10:	0800cec7 	.word	0x0800cec7
 800ce14:	0800cec7 	.word	0x0800cec7
 800ce18:	0800ce93 	.word	0x0800ce93
 800ce1c:	0800cec7 	.word	0x0800cec7
 800ce20:	0800cec7 	.word	0x0800cec7
 800ce24:	0800cec7 	.word	0x0800cec7
 800ce28:	0800cec7 	.word	0x0800cec7
 800ce2c:	0800cec7 	.word	0x0800cec7
 800ce30:	0800cec7 	.word	0x0800cec7
 800ce34:	0800cec7 	.word	0x0800cec7
 800ce38:	0800cec7 	.word	0x0800cec7
 800ce3c:	0800cec7 	.word	0x0800cec7
 800ce40:	0800cec7 	.word	0x0800cec7
 800ce44:	0800cec7 	.word	0x0800cec7
 800ce48:	0800cec7 	.word	0x0800cec7
 800ce4c:	0800cec7 	.word	0x0800cec7
 800ce50:	0800cec7 	.word	0x0800cec7
 800ce54:	0800cec7 	.word	0x0800cec7
 800ce58:	0800ceb9 	.word	0x0800ceb9
 800ce5c:	2b40      	cmp	r3, #64	; 0x40
 800ce5e:	d02e      	beq.n	800cebe <UART_SetConfig+0xa36>
 800ce60:	e031      	b.n	800cec6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ce62:	f7fa fddd 	bl	8007a20 <HAL_RCC_GetPCLK1Freq>
 800ce66:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ce68:	e033      	b.n	800ced2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ce6a:	f7fa fdef 	bl	8007a4c <HAL_RCC_GetPCLK2Freq>
 800ce6e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ce70:	e02f      	b.n	800ced2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ce72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ce76:	4618      	mov	r0, r3
 800ce78:	f7fc fd9e 	bl	80099b8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ce7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce80:	e027      	b.n	800ced2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ce82:	f107 0318 	add.w	r3, r7, #24
 800ce86:	4618      	mov	r0, r3
 800ce88:	f7fc feea 	bl	8009c60 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ce8c:	69fb      	ldr	r3, [r7, #28]
 800ce8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce90:	e01f      	b.n	800ced2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ce92:	4b2d      	ldr	r3, [pc, #180]	; (800cf48 <UART_SetConfig+0xac0>)
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	f003 0320 	and.w	r3, r3, #32
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d009      	beq.n	800ceb2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ce9e:	4b2a      	ldr	r3, [pc, #168]	; (800cf48 <UART_SetConfig+0xac0>)
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	08db      	lsrs	r3, r3, #3
 800cea4:	f003 0303 	and.w	r3, r3, #3
 800cea8:	4a28      	ldr	r2, [pc, #160]	; (800cf4c <UART_SetConfig+0xac4>)
 800ceaa:	fa22 f303 	lsr.w	r3, r2, r3
 800ceae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ceb0:	e00f      	b.n	800ced2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800ceb2:	4b26      	ldr	r3, [pc, #152]	; (800cf4c <UART_SetConfig+0xac4>)
 800ceb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ceb6:	e00c      	b.n	800ced2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ceb8:	4b25      	ldr	r3, [pc, #148]	; (800cf50 <UART_SetConfig+0xac8>)
 800ceba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cebc:	e009      	b.n	800ced2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cebe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cec2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cec4:	e005      	b.n	800ced2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800cec6:	2300      	movs	r3, #0
 800cec8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ceca:	2301      	movs	r3, #1
 800cecc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ced0:	bf00      	nop
    }

    if (pclk != 0U)
 800ced2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d021      	beq.n	800cf1c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ced8:	697b      	ldr	r3, [r7, #20]
 800ceda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cedc:	4a1d      	ldr	r2, [pc, #116]	; (800cf54 <UART_SetConfig+0xacc>)
 800cede:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cee2:	461a      	mov	r2, r3
 800cee4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cee6:	fbb3 f2f2 	udiv	r2, r3, r2
 800ceea:	697b      	ldr	r3, [r7, #20]
 800ceec:	685b      	ldr	r3, [r3, #4]
 800ceee:	085b      	lsrs	r3, r3, #1
 800cef0:	441a      	add	r2, r3
 800cef2:	697b      	ldr	r3, [r7, #20]
 800cef4:	685b      	ldr	r3, [r3, #4]
 800cef6:	fbb2 f3f3 	udiv	r3, r2, r3
 800cefa:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cefc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cefe:	2b0f      	cmp	r3, #15
 800cf00:	d909      	bls.n	800cf16 <UART_SetConfig+0xa8e>
 800cf02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf08:	d205      	bcs.n	800cf16 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cf0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf0c:	b29a      	uxth	r2, r3
 800cf0e:	697b      	ldr	r3, [r7, #20]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	60da      	str	r2, [r3, #12]
 800cf14:	e002      	b.n	800cf1c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800cf16:	2301      	movs	r3, #1
 800cf18:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cf1c:	697b      	ldr	r3, [r7, #20]
 800cf1e:	2201      	movs	r2, #1
 800cf20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800cf24:	697b      	ldr	r3, [r7, #20]
 800cf26:	2201      	movs	r2, #1
 800cf28:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cf2c:	697b      	ldr	r3, [r7, #20]
 800cf2e:	2200      	movs	r2, #0
 800cf30:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800cf32:	697b      	ldr	r3, [r7, #20]
 800cf34:	2200      	movs	r2, #0
 800cf36:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800cf38:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	3748      	adds	r7, #72	; 0x48
 800cf40:	46bd      	mov	sp, r7
 800cf42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cf46:	bf00      	nop
 800cf48:	58024400 	.word	0x58024400
 800cf4c:	03d09000 	.word	0x03d09000
 800cf50:	003d0900 	.word	0x003d0900
 800cf54:	0800f530 	.word	0x0800f530

0800cf58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cf58:	b480      	push	{r7}
 800cf5a:	b083      	sub	sp, #12
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf64:	f003 0301 	and.w	r3, r3, #1
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d00a      	beq.n	800cf82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	685b      	ldr	r3, [r3, #4]
 800cf72:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	430a      	orrs	r2, r1
 800cf80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf86:	f003 0302 	and.w	r3, r3, #2
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d00a      	beq.n	800cfa4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	685b      	ldr	r3, [r3, #4]
 800cf94:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	430a      	orrs	r2, r1
 800cfa2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfa8:	f003 0304 	and.w	r3, r3, #4
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d00a      	beq.n	800cfc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	685b      	ldr	r3, [r3, #4]
 800cfb6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	430a      	orrs	r2, r1
 800cfc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfca:	f003 0308 	and.w	r3, r3, #8
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d00a      	beq.n	800cfe8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	685b      	ldr	r3, [r3, #4]
 800cfd8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	430a      	orrs	r2, r1
 800cfe6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfec:	f003 0310 	and.w	r3, r3, #16
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d00a      	beq.n	800d00a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	689b      	ldr	r3, [r3, #8]
 800cffa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	430a      	orrs	r2, r1
 800d008:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d00e:	f003 0320 	and.w	r3, r3, #32
 800d012:	2b00      	cmp	r3, #0
 800d014:	d00a      	beq.n	800d02c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	689b      	ldr	r3, [r3, #8]
 800d01c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	430a      	orrs	r2, r1
 800d02a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d034:	2b00      	cmp	r3, #0
 800d036:	d01a      	beq.n	800d06e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	685b      	ldr	r3, [r3, #4]
 800d03e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	430a      	orrs	r2, r1
 800d04c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d052:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d056:	d10a      	bne.n	800d06e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	685b      	ldr	r3, [r3, #4]
 800d05e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	430a      	orrs	r2, r1
 800d06c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d076:	2b00      	cmp	r3, #0
 800d078:	d00a      	beq.n	800d090 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	685b      	ldr	r3, [r3, #4]
 800d080:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	430a      	orrs	r2, r1
 800d08e:	605a      	str	r2, [r3, #4]
  }
}
 800d090:	bf00      	nop
 800d092:	370c      	adds	r7, #12
 800d094:	46bd      	mov	sp, r7
 800d096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09a:	4770      	bx	lr

0800d09c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d09c:	b580      	push	{r7, lr}
 800d09e:	b098      	sub	sp, #96	; 0x60
 800d0a0:	af02      	add	r7, sp, #8
 800d0a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	2200      	movs	r2, #0
 800d0a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d0ac:	f7f6 f80a 	bl	80030c4 <HAL_GetTick>
 800d0b0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	f003 0308 	and.w	r3, r3, #8
 800d0bc:	2b08      	cmp	r3, #8
 800d0be:	d12f      	bne.n	800d120 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d0c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d0c4:	9300      	str	r3, [sp, #0]
 800d0c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d0c8:	2200      	movs	r2, #0
 800d0ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d0ce:	6878      	ldr	r0, [r7, #4]
 800d0d0:	f000 f88e 	bl	800d1f0 <UART_WaitOnFlagUntilTimeout>
 800d0d4:	4603      	mov	r3, r0
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d022      	beq.n	800d120 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0e2:	e853 3f00 	ldrex	r3, [r3]
 800d0e6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d0e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d0ee:	653b      	str	r3, [r7, #80]	; 0x50
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	461a      	mov	r2, r3
 800d0f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d0f8:	647b      	str	r3, [r7, #68]	; 0x44
 800d0fa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0fc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d0fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d100:	e841 2300 	strex	r3, r2, [r1]
 800d104:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d1e6      	bne.n	800d0da <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	2220      	movs	r2, #32
 800d110:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	2200      	movs	r2, #0
 800d118:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d11c:	2303      	movs	r3, #3
 800d11e:	e063      	b.n	800d1e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	f003 0304 	and.w	r3, r3, #4
 800d12a:	2b04      	cmp	r3, #4
 800d12c:	d149      	bne.n	800d1c2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d12e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d132:	9300      	str	r3, [sp, #0]
 800d134:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d136:	2200      	movs	r2, #0
 800d138:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d13c:	6878      	ldr	r0, [r7, #4]
 800d13e:	f000 f857 	bl	800d1f0 <UART_WaitOnFlagUntilTimeout>
 800d142:	4603      	mov	r3, r0
 800d144:	2b00      	cmp	r3, #0
 800d146:	d03c      	beq.n	800d1c2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d14e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d150:	e853 3f00 	ldrex	r3, [r3]
 800d154:	623b      	str	r3, [r7, #32]
   return(result);
 800d156:	6a3b      	ldr	r3, [r7, #32]
 800d158:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d15c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	461a      	mov	r2, r3
 800d164:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d166:	633b      	str	r3, [r7, #48]	; 0x30
 800d168:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d16a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d16c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d16e:	e841 2300 	strex	r3, r2, [r1]
 800d172:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d176:	2b00      	cmp	r3, #0
 800d178:	d1e6      	bne.n	800d148 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	3308      	adds	r3, #8
 800d180:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d182:	693b      	ldr	r3, [r7, #16]
 800d184:	e853 3f00 	ldrex	r3, [r3]
 800d188:	60fb      	str	r3, [r7, #12]
   return(result);
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	f023 0301 	bic.w	r3, r3, #1
 800d190:	64bb      	str	r3, [r7, #72]	; 0x48
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	3308      	adds	r3, #8
 800d198:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d19a:	61fa      	str	r2, [r7, #28]
 800d19c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d19e:	69b9      	ldr	r1, [r7, #24]
 800d1a0:	69fa      	ldr	r2, [r7, #28]
 800d1a2:	e841 2300 	strex	r3, r2, [r1]
 800d1a6:	617b      	str	r3, [r7, #20]
   return(result);
 800d1a8:	697b      	ldr	r3, [r7, #20]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d1e5      	bne.n	800d17a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	2220      	movs	r2, #32
 800d1b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d1be:	2303      	movs	r3, #3
 800d1c0:	e012      	b.n	800d1e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	2220      	movs	r2, #32
 800d1c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	2220      	movs	r2, #32
 800d1ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	2200      	movs	r2, #0
 800d1dc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	2200      	movs	r2, #0
 800d1e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d1e6:	2300      	movs	r3, #0
}
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	3758      	adds	r7, #88	; 0x58
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	bd80      	pop	{r7, pc}

0800d1f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b084      	sub	sp, #16
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	60f8      	str	r0, [r7, #12]
 800d1f8:	60b9      	str	r1, [r7, #8]
 800d1fa:	603b      	str	r3, [r7, #0]
 800d1fc:	4613      	mov	r3, r2
 800d1fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d200:	e049      	b.n	800d296 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d202:	69bb      	ldr	r3, [r7, #24]
 800d204:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d208:	d045      	beq.n	800d296 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d20a:	f7f5 ff5b 	bl	80030c4 <HAL_GetTick>
 800d20e:	4602      	mov	r2, r0
 800d210:	683b      	ldr	r3, [r7, #0]
 800d212:	1ad3      	subs	r3, r2, r3
 800d214:	69ba      	ldr	r2, [r7, #24]
 800d216:	429a      	cmp	r2, r3
 800d218:	d302      	bcc.n	800d220 <UART_WaitOnFlagUntilTimeout+0x30>
 800d21a:	69bb      	ldr	r3, [r7, #24]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d101      	bne.n	800d224 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d220:	2303      	movs	r3, #3
 800d222:	e048      	b.n	800d2b6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	f003 0304 	and.w	r3, r3, #4
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d031      	beq.n	800d296 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	69db      	ldr	r3, [r3, #28]
 800d238:	f003 0308 	and.w	r3, r3, #8
 800d23c:	2b08      	cmp	r3, #8
 800d23e:	d110      	bne.n	800d262 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	2208      	movs	r2, #8
 800d246:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800d248:	68f8      	ldr	r0, [r7, #12]
 800d24a:	f000 f95b 	bl	800d504 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	2208      	movs	r2, #8
 800d252:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	2200      	movs	r2, #0
 800d25a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800d25e:	2301      	movs	r3, #1
 800d260:	e029      	b.n	800d2b6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	69db      	ldr	r3, [r3, #28]
 800d268:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d26c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d270:	d111      	bne.n	800d296 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d27a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d27c:	68f8      	ldr	r0, [r7, #12]
 800d27e:	f000 f941 	bl	800d504 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	2220      	movs	r2, #32
 800d286:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	2200      	movs	r2, #0
 800d28e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800d292:	2303      	movs	r3, #3
 800d294:	e00f      	b.n	800d2b6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	69da      	ldr	r2, [r3, #28]
 800d29c:	68bb      	ldr	r3, [r7, #8]
 800d29e:	4013      	ands	r3, r2
 800d2a0:	68ba      	ldr	r2, [r7, #8]
 800d2a2:	429a      	cmp	r2, r3
 800d2a4:	bf0c      	ite	eq
 800d2a6:	2301      	moveq	r3, #1
 800d2a8:	2300      	movne	r3, #0
 800d2aa:	b2db      	uxtb	r3, r3
 800d2ac:	461a      	mov	r2, r3
 800d2ae:	79fb      	ldrb	r3, [r7, #7]
 800d2b0:	429a      	cmp	r2, r3
 800d2b2:	d0a6      	beq.n	800d202 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d2b4:	2300      	movs	r3, #0
}
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	3710      	adds	r7, #16
 800d2ba:	46bd      	mov	sp, r7
 800d2bc:	bd80      	pop	{r7, pc}
	...

0800d2c0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d2c0:	b480      	push	{r7}
 800d2c2:	b0a3      	sub	sp, #140	; 0x8c
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	60f8      	str	r0, [r7, #12]
 800d2c8:	60b9      	str	r1, [r7, #8]
 800d2ca:	4613      	mov	r3, r2
 800d2cc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	68ba      	ldr	r2, [r7, #8]
 800d2d2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	88fa      	ldrh	r2, [r7, #6]
 800d2d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	88fa      	ldrh	r2, [r7, #6]
 800d2e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	2200      	movs	r2, #0
 800d2e8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	689b      	ldr	r3, [r3, #8]
 800d2ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d2f2:	d10e      	bne.n	800d312 <UART_Start_Receive_IT+0x52>
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	691b      	ldr	r3, [r3, #16]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d105      	bne.n	800d308 <UART_Start_Receive_IT+0x48>
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	f240 12ff 	movw	r2, #511	; 0x1ff
 800d302:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d306:	e02d      	b.n	800d364 <UART_Start_Receive_IT+0xa4>
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	22ff      	movs	r2, #255	; 0xff
 800d30c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d310:	e028      	b.n	800d364 <UART_Start_Receive_IT+0xa4>
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	689b      	ldr	r3, [r3, #8]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d10d      	bne.n	800d336 <UART_Start_Receive_IT+0x76>
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	691b      	ldr	r3, [r3, #16]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d104      	bne.n	800d32c <UART_Start_Receive_IT+0x6c>
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	22ff      	movs	r2, #255	; 0xff
 800d326:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d32a:	e01b      	b.n	800d364 <UART_Start_Receive_IT+0xa4>
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	227f      	movs	r2, #127	; 0x7f
 800d330:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d334:	e016      	b.n	800d364 <UART_Start_Receive_IT+0xa4>
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	689b      	ldr	r3, [r3, #8]
 800d33a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d33e:	d10d      	bne.n	800d35c <UART_Start_Receive_IT+0x9c>
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	691b      	ldr	r3, [r3, #16]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d104      	bne.n	800d352 <UART_Start_Receive_IT+0x92>
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	227f      	movs	r2, #127	; 0x7f
 800d34c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d350:	e008      	b.n	800d364 <UART_Start_Receive_IT+0xa4>
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	223f      	movs	r2, #63	; 0x3f
 800d356:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d35a:	e003      	b.n	800d364 <UART_Start_Receive_IT+0xa4>
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	2200      	movs	r2, #0
 800d360:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	2200      	movs	r2, #0
 800d368:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	2222      	movs	r2, #34	; 0x22
 800d370:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	3308      	adds	r3, #8
 800d37a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d37c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d37e:	e853 3f00 	ldrex	r3, [r3]
 800d382:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800d384:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d386:	f043 0301 	orr.w	r3, r3, #1
 800d38a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	3308      	adds	r3, #8
 800d394:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800d398:	673a      	str	r2, [r7, #112]	; 0x70
 800d39a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d39c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800d39e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d3a0:	e841 2300 	strex	r3, r2, [r1]
 800d3a4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800d3a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d1e3      	bne.n	800d374 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d3b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d3b4:	d14f      	bne.n	800d456 <UART_Start_Receive_IT+0x196>
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d3bc:	88fa      	ldrh	r2, [r7, #6]
 800d3be:	429a      	cmp	r2, r3
 800d3c0:	d349      	bcc.n	800d456 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	689b      	ldr	r3, [r3, #8]
 800d3c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d3ca:	d107      	bne.n	800d3dc <UART_Start_Receive_IT+0x11c>
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	691b      	ldr	r3, [r3, #16]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d103      	bne.n	800d3dc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	4a47      	ldr	r2, [pc, #284]	; (800d4f4 <UART_Start_Receive_IT+0x234>)
 800d3d8:	675a      	str	r2, [r3, #116]	; 0x74
 800d3da:	e002      	b.n	800d3e2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	4a46      	ldr	r2, [pc, #280]	; (800d4f8 <UART_Start_Receive_IT+0x238>)
 800d3e0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	691b      	ldr	r3, [r3, #16]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d01a      	beq.n	800d420 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d3f2:	e853 3f00 	ldrex	r3, [r3]
 800d3f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d3f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d3fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	461a      	mov	r2, r3
 800d408:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d40c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d40e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d410:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d412:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d414:	e841 2300 	strex	r3, r2, [r1]
 800d418:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d41a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d1e4      	bne.n	800d3ea <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	3308      	adds	r3, #8
 800d426:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d42a:	e853 3f00 	ldrex	r3, [r3]
 800d42e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d432:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d436:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	3308      	adds	r3, #8
 800d43e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800d440:	64ba      	str	r2, [r7, #72]	; 0x48
 800d442:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d444:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d446:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d448:	e841 2300 	strex	r3, r2, [r1]
 800d44c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d44e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d450:	2b00      	cmp	r3, #0
 800d452:	d1e5      	bne.n	800d420 <UART_Start_Receive_IT+0x160>
 800d454:	e046      	b.n	800d4e4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	689b      	ldr	r3, [r3, #8]
 800d45a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d45e:	d107      	bne.n	800d470 <UART_Start_Receive_IT+0x1b0>
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	691b      	ldr	r3, [r3, #16]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d103      	bne.n	800d470 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	4a24      	ldr	r2, [pc, #144]	; (800d4fc <UART_Start_Receive_IT+0x23c>)
 800d46c:	675a      	str	r2, [r3, #116]	; 0x74
 800d46e:	e002      	b.n	800d476 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	4a23      	ldr	r2, [pc, #140]	; (800d500 <UART_Start_Receive_IT+0x240>)
 800d474:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	691b      	ldr	r3, [r3, #16]
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d019      	beq.n	800d4b2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d486:	e853 3f00 	ldrex	r3, [r3]
 800d48a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d48e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800d492:	677b      	str	r3, [r7, #116]	; 0x74
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	461a      	mov	r2, r3
 800d49a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d49c:	637b      	str	r3, [r7, #52]	; 0x34
 800d49e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d4a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d4a4:	e841 2300 	strex	r3, r2, [r1]
 800d4a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d4aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d1e6      	bne.n	800d47e <UART_Start_Receive_IT+0x1be>
 800d4b0:	e018      	b.n	800d4e4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4b8:	697b      	ldr	r3, [r7, #20]
 800d4ba:	e853 3f00 	ldrex	r3, [r3]
 800d4be:	613b      	str	r3, [r7, #16]
   return(result);
 800d4c0:	693b      	ldr	r3, [r7, #16]
 800d4c2:	f043 0320 	orr.w	r3, r3, #32
 800d4c6:	67bb      	str	r3, [r7, #120]	; 0x78
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	461a      	mov	r2, r3
 800d4ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d4d0:	623b      	str	r3, [r7, #32]
 800d4d2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4d4:	69f9      	ldr	r1, [r7, #28]
 800d4d6:	6a3a      	ldr	r2, [r7, #32]
 800d4d8:	e841 2300 	strex	r3, r2, [r1]
 800d4dc:	61bb      	str	r3, [r7, #24]
   return(result);
 800d4de:	69bb      	ldr	r3, [r7, #24]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d1e6      	bne.n	800d4b2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800d4e4:	2300      	movs	r3, #0
}
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	378c      	adds	r7, #140	; 0x8c
 800d4ea:	46bd      	mov	sp, r7
 800d4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f0:	4770      	bx	lr
 800d4f2:	bf00      	nop
 800d4f4:	0800dd25 	.word	0x0800dd25
 800d4f8:	0800d9c5 	.word	0x0800d9c5
 800d4fc:	0800d80d 	.word	0x0800d80d
 800d500:	0800d655 	.word	0x0800d655

0800d504 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d504:	b480      	push	{r7}
 800d506:	b095      	sub	sp, #84	; 0x54
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d514:	e853 3f00 	ldrex	r3, [r3]
 800d518:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d51a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d51c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d520:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	461a      	mov	r2, r3
 800d528:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d52a:	643b      	str	r3, [r7, #64]	; 0x40
 800d52c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d52e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d530:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d532:	e841 2300 	strex	r3, r2, [r1]
 800d536:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d1e6      	bne.n	800d50c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	3308      	adds	r3, #8
 800d544:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d546:	6a3b      	ldr	r3, [r7, #32]
 800d548:	e853 3f00 	ldrex	r3, [r3]
 800d54c:	61fb      	str	r3, [r7, #28]
   return(result);
 800d54e:	69fa      	ldr	r2, [r7, #28]
 800d550:	4b1e      	ldr	r3, [pc, #120]	; (800d5cc <UART_EndRxTransfer+0xc8>)
 800d552:	4013      	ands	r3, r2
 800d554:	64bb      	str	r3, [r7, #72]	; 0x48
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	3308      	adds	r3, #8
 800d55c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d55e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d560:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d562:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d564:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d566:	e841 2300 	strex	r3, r2, [r1]
 800d56a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d56c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d1e5      	bne.n	800d53e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d576:	2b01      	cmp	r3, #1
 800d578:	d118      	bne.n	800d5ac <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	e853 3f00 	ldrex	r3, [r3]
 800d586:	60bb      	str	r3, [r7, #8]
   return(result);
 800d588:	68bb      	ldr	r3, [r7, #8]
 800d58a:	f023 0310 	bic.w	r3, r3, #16
 800d58e:	647b      	str	r3, [r7, #68]	; 0x44
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	461a      	mov	r2, r3
 800d596:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d598:	61bb      	str	r3, [r7, #24]
 800d59a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d59c:	6979      	ldr	r1, [r7, #20]
 800d59e:	69ba      	ldr	r2, [r7, #24]
 800d5a0:	e841 2300 	strex	r3, r2, [r1]
 800d5a4:	613b      	str	r3, [r7, #16]
   return(result);
 800d5a6:	693b      	ldr	r3, [r7, #16]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d1e6      	bne.n	800d57a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	2220      	movs	r2, #32
 800d5b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	2200      	movs	r2, #0
 800d5be:	675a      	str	r2, [r3, #116]	; 0x74
}
 800d5c0:	bf00      	nop
 800d5c2:	3754      	adds	r7, #84	; 0x54
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ca:	4770      	bx	lr
 800d5cc:	effffffe 	.word	0xeffffffe

0800d5d0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b084      	sub	sp, #16
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	2200      	movs	r2, #0
 800d5e2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	2200      	movs	r2, #0
 800d5ea:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d5ee:	68f8      	ldr	r0, [r7, #12]
 800d5f0:	f7fe ff34 	bl	800c45c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d5f4:	bf00      	nop
 800d5f6:	3710      	adds	r7, #16
 800d5f8:	46bd      	mov	sp, r7
 800d5fa:	bd80      	pop	{r7, pc}

0800d5fc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	b088      	sub	sp, #32
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	e853 3f00 	ldrex	r3, [r3]
 800d610:	60bb      	str	r3, [r7, #8]
   return(result);
 800d612:	68bb      	ldr	r3, [r7, #8]
 800d614:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d618:	61fb      	str	r3, [r7, #28]
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	461a      	mov	r2, r3
 800d620:	69fb      	ldr	r3, [r7, #28]
 800d622:	61bb      	str	r3, [r7, #24]
 800d624:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d626:	6979      	ldr	r1, [r7, #20]
 800d628:	69ba      	ldr	r2, [r7, #24]
 800d62a:	e841 2300 	strex	r3, r2, [r1]
 800d62e:	613b      	str	r3, [r7, #16]
   return(result);
 800d630:	693b      	ldr	r3, [r7, #16]
 800d632:	2b00      	cmp	r3, #0
 800d634:	d1e6      	bne.n	800d604 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	2220      	movs	r2, #32
 800d63a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	2200      	movs	r2, #0
 800d642:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d644:	6878      	ldr	r0, [r7, #4]
 800d646:	f7fe feff 	bl	800c448 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d64a:	bf00      	nop
 800d64c:	3720      	adds	r7, #32
 800d64e:	46bd      	mov	sp, r7
 800d650:	bd80      	pop	{r7, pc}
	...

0800d654 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d654:	b580      	push	{r7, lr}
 800d656:	b09c      	sub	sp, #112	; 0x70
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d662:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d66c:	2b22      	cmp	r3, #34	; 0x22
 800d66e:	f040 80be 	bne.w	800d7ee <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d678:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d67c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800d680:	b2d9      	uxtb	r1, r3
 800d682:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800d686:	b2da      	uxtb	r2, r3
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d68c:	400a      	ands	r2, r1
 800d68e:	b2d2      	uxtb	r2, r2
 800d690:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d696:	1c5a      	adds	r2, r3, #1
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d6a2:	b29b      	uxth	r3, r3
 800d6a4:	3b01      	subs	r3, #1
 800d6a6:	b29a      	uxth	r2, r3
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d6b4:	b29b      	uxth	r3, r3
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	f040 80a1 	bne.w	800d7fe <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d6c4:	e853 3f00 	ldrex	r3, [r3]
 800d6c8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d6ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d6cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d6d0:	66bb      	str	r3, [r7, #104]	; 0x68
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	461a      	mov	r2, r3
 800d6d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d6da:	65bb      	str	r3, [r7, #88]	; 0x58
 800d6dc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6de:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d6e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d6e2:	e841 2300 	strex	r3, r2, [r1]
 800d6e6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d6e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d1e6      	bne.n	800d6bc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	3308      	adds	r3, #8
 800d6f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6f8:	e853 3f00 	ldrex	r3, [r3]
 800d6fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d6fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d700:	f023 0301 	bic.w	r3, r3, #1
 800d704:	667b      	str	r3, [r7, #100]	; 0x64
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	3308      	adds	r3, #8
 800d70c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d70e:	647a      	str	r2, [r7, #68]	; 0x44
 800d710:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d712:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d714:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d716:	e841 2300 	strex	r3, r2, [r1]
 800d71a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d71c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d1e5      	bne.n	800d6ee <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	2220      	movs	r2, #32
 800d726:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	2200      	movs	r2, #0
 800d72e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	2200      	movs	r2, #0
 800d734:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	4a33      	ldr	r2, [pc, #204]	; (800d808 <UART_RxISR_8BIT+0x1b4>)
 800d73c:	4293      	cmp	r3, r2
 800d73e:	d01f      	beq.n	800d780 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	685b      	ldr	r3, [r3, #4]
 800d746:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d018      	beq.n	800d780 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d756:	e853 3f00 	ldrex	r3, [r3]
 800d75a:	623b      	str	r3, [r7, #32]
   return(result);
 800d75c:	6a3b      	ldr	r3, [r7, #32]
 800d75e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d762:	663b      	str	r3, [r7, #96]	; 0x60
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	461a      	mov	r2, r3
 800d76a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d76c:	633b      	str	r3, [r7, #48]	; 0x30
 800d76e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d770:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d772:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d774:	e841 2300 	strex	r3, r2, [r1]
 800d778:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d77a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d1e6      	bne.n	800d74e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d784:	2b01      	cmp	r3, #1
 800d786:	d12e      	bne.n	800d7e6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	2200      	movs	r2, #0
 800d78c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d794:	693b      	ldr	r3, [r7, #16]
 800d796:	e853 3f00 	ldrex	r3, [r3]
 800d79a:	60fb      	str	r3, [r7, #12]
   return(result);
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	f023 0310 	bic.w	r3, r3, #16
 800d7a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	461a      	mov	r2, r3
 800d7aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d7ac:	61fb      	str	r3, [r7, #28]
 800d7ae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7b0:	69b9      	ldr	r1, [r7, #24]
 800d7b2:	69fa      	ldr	r2, [r7, #28]
 800d7b4:	e841 2300 	strex	r3, r2, [r1]
 800d7b8:	617b      	str	r3, [r7, #20]
   return(result);
 800d7ba:	697b      	ldr	r3, [r7, #20]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d1e6      	bne.n	800d78e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	69db      	ldr	r3, [r3, #28]
 800d7c6:	f003 0310 	and.w	r3, r3, #16
 800d7ca:	2b10      	cmp	r3, #16
 800d7cc:	d103      	bne.n	800d7d6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	2210      	movs	r2, #16
 800d7d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d7dc:	4619      	mov	r1, r3
 800d7de:	6878      	ldr	r0, [r7, #4]
 800d7e0:	f7fe fe46 	bl	800c470 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d7e4:	e00b      	b.n	800d7fe <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800d7e6:	6878      	ldr	r0, [r7, #4]
 800d7e8:	f7f4 f9be 	bl	8001b68 <HAL_UART_RxCpltCallback>
}
 800d7ec:	e007      	b.n	800d7fe <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	699a      	ldr	r2, [r3, #24]
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	f042 0208 	orr.w	r2, r2, #8
 800d7fc:	619a      	str	r2, [r3, #24]
}
 800d7fe:	bf00      	nop
 800d800:	3770      	adds	r7, #112	; 0x70
 800d802:	46bd      	mov	sp, r7
 800d804:	bd80      	pop	{r7, pc}
 800d806:	bf00      	nop
 800d808:	58000c00 	.word	0x58000c00

0800d80c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d80c:	b580      	push	{r7, lr}
 800d80e:	b09c      	sub	sp, #112	; 0x70
 800d810:	af00      	add	r7, sp, #0
 800d812:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d81a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d824:	2b22      	cmp	r3, #34	; 0x22
 800d826:	f040 80be 	bne.w	800d9a6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d830:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d838:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800d83a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800d83e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800d842:	4013      	ands	r3, r2
 800d844:	b29a      	uxth	r2, r3
 800d846:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d848:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d84e:	1c9a      	adds	r2, r3, #2
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d85a:	b29b      	uxth	r3, r3
 800d85c:	3b01      	subs	r3, #1
 800d85e:	b29a      	uxth	r2, r3
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d86c:	b29b      	uxth	r3, r3
 800d86e:	2b00      	cmp	r3, #0
 800d870:	f040 80a1 	bne.w	800d9b6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d87a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d87c:	e853 3f00 	ldrex	r3, [r3]
 800d880:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800d882:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d884:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d888:	667b      	str	r3, [r7, #100]	; 0x64
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	461a      	mov	r2, r3
 800d890:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d892:	657b      	str	r3, [r7, #84]	; 0x54
 800d894:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d896:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d898:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d89a:	e841 2300 	strex	r3, r2, [r1]
 800d89e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d8a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d1e6      	bne.n	800d874 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	3308      	adds	r3, #8
 800d8ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8b0:	e853 3f00 	ldrex	r3, [r3]
 800d8b4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d8b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8b8:	f023 0301 	bic.w	r3, r3, #1
 800d8bc:	663b      	str	r3, [r7, #96]	; 0x60
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	3308      	adds	r3, #8
 800d8c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d8c6:	643a      	str	r2, [r7, #64]	; 0x40
 800d8c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d8cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d8ce:	e841 2300 	strex	r3, r2, [r1]
 800d8d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d8d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d1e5      	bne.n	800d8a6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	2220      	movs	r2, #32
 800d8de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	2200      	movs	r2, #0
 800d8e6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	2200      	movs	r2, #0
 800d8ec:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	4a33      	ldr	r2, [pc, #204]	; (800d9c0 <UART_RxISR_16BIT+0x1b4>)
 800d8f4:	4293      	cmp	r3, r2
 800d8f6:	d01f      	beq.n	800d938 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	685b      	ldr	r3, [r3, #4]
 800d8fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d902:	2b00      	cmp	r3, #0
 800d904:	d018      	beq.n	800d938 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d90c:	6a3b      	ldr	r3, [r7, #32]
 800d90e:	e853 3f00 	ldrex	r3, [r3]
 800d912:	61fb      	str	r3, [r7, #28]
   return(result);
 800d914:	69fb      	ldr	r3, [r7, #28]
 800d916:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d91a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	461a      	mov	r2, r3
 800d922:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d924:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d926:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d928:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d92a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d92c:	e841 2300 	strex	r3, r2, [r1]
 800d930:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d934:	2b00      	cmp	r3, #0
 800d936:	d1e6      	bne.n	800d906 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d93c:	2b01      	cmp	r3, #1
 800d93e:	d12e      	bne.n	800d99e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	2200      	movs	r2, #0
 800d944:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	e853 3f00 	ldrex	r3, [r3]
 800d952:	60bb      	str	r3, [r7, #8]
   return(result);
 800d954:	68bb      	ldr	r3, [r7, #8]
 800d956:	f023 0310 	bic.w	r3, r3, #16
 800d95a:	65bb      	str	r3, [r7, #88]	; 0x58
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	461a      	mov	r2, r3
 800d962:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d964:	61bb      	str	r3, [r7, #24]
 800d966:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d968:	6979      	ldr	r1, [r7, #20]
 800d96a:	69ba      	ldr	r2, [r7, #24]
 800d96c:	e841 2300 	strex	r3, r2, [r1]
 800d970:	613b      	str	r3, [r7, #16]
   return(result);
 800d972:	693b      	ldr	r3, [r7, #16]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d1e6      	bne.n	800d946 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	69db      	ldr	r3, [r3, #28]
 800d97e:	f003 0310 	and.w	r3, r3, #16
 800d982:	2b10      	cmp	r3, #16
 800d984:	d103      	bne.n	800d98e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	2210      	movs	r2, #16
 800d98c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d994:	4619      	mov	r1, r3
 800d996:	6878      	ldr	r0, [r7, #4]
 800d998:	f7fe fd6a 	bl	800c470 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d99c:	e00b      	b.n	800d9b6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800d99e:	6878      	ldr	r0, [r7, #4]
 800d9a0:	f7f4 f8e2 	bl	8001b68 <HAL_UART_RxCpltCallback>
}
 800d9a4:	e007      	b.n	800d9b6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	699a      	ldr	r2, [r3, #24]
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	f042 0208 	orr.w	r2, r2, #8
 800d9b4:	619a      	str	r2, [r3, #24]
}
 800d9b6:	bf00      	nop
 800d9b8:	3770      	adds	r7, #112	; 0x70
 800d9ba:	46bd      	mov	sp, r7
 800d9bc:	bd80      	pop	{r7, pc}
 800d9be:	bf00      	nop
 800d9c0:	58000c00 	.word	0x58000c00

0800d9c4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b0ac      	sub	sp, #176	; 0xb0
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d9d2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	69db      	ldr	r3, [r3, #28]
 800d9dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	689b      	ldr	r3, [r3, #8]
 800d9f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d9fa:	2b22      	cmp	r3, #34	; 0x22
 800d9fc:	f040 8180 	bne.w	800dd00 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800da06:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800da0a:	e123      	b.n	800dc54 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da12:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800da16:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800da1a:	b2d9      	uxtb	r1, r3
 800da1c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800da20:	b2da      	uxtb	r2, r3
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800da26:	400a      	ands	r2, r1
 800da28:	b2d2      	uxtb	r2, r2
 800da2a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800da30:	1c5a      	adds	r2, r3, #1
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800da3c:	b29b      	uxth	r3, r3
 800da3e:	3b01      	subs	r3, #1
 800da40:	b29a      	uxth	r2, r3
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	69db      	ldr	r3, [r3, #28]
 800da4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800da52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800da56:	f003 0307 	and.w	r3, r3, #7
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d053      	beq.n	800db06 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800da5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800da62:	f003 0301 	and.w	r3, r3, #1
 800da66:	2b00      	cmp	r3, #0
 800da68:	d011      	beq.n	800da8e <UART_RxISR_8BIT_FIFOEN+0xca>
 800da6a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800da6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800da72:	2b00      	cmp	r3, #0
 800da74:	d00b      	beq.n	800da8e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	2201      	movs	r2, #1
 800da7c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da84:	f043 0201 	orr.w	r2, r3, #1
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800da8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800da92:	f003 0302 	and.w	r3, r3, #2
 800da96:	2b00      	cmp	r3, #0
 800da98:	d011      	beq.n	800dabe <UART_RxISR_8BIT_FIFOEN+0xfa>
 800da9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800da9e:	f003 0301 	and.w	r3, r3, #1
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d00b      	beq.n	800dabe <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	2202      	movs	r2, #2
 800daac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dab4:	f043 0204 	orr.w	r2, r3, #4
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dabe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800dac2:	f003 0304 	and.w	r3, r3, #4
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d011      	beq.n	800daee <UART_RxISR_8BIT_FIFOEN+0x12a>
 800daca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800dace:	f003 0301 	and.w	r3, r3, #1
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d00b      	beq.n	800daee <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	2204      	movs	r2, #4
 800dadc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dae4:	f043 0202 	orr.w	r2, r3, #2
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d006      	beq.n	800db06 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800daf8:	6878      	ldr	r0, [r7, #4]
 800dafa:	f7fe fcaf 	bl	800c45c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	2200      	movs	r2, #0
 800db02:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800db0c:	b29b      	uxth	r3, r3
 800db0e:	2b00      	cmp	r3, #0
 800db10:	f040 80a0 	bne.w	800dc54 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800db1c:	e853 3f00 	ldrex	r3, [r3]
 800db20:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800db22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800db24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800db28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	461a      	mov	r2, r3
 800db32:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800db36:	67fb      	str	r3, [r7, #124]	; 0x7c
 800db38:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db3a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800db3c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800db3e:	e841 2300 	strex	r3, r2, [r1]
 800db42:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800db44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800db46:	2b00      	cmp	r3, #0
 800db48:	d1e4      	bne.n	800db14 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	3308      	adds	r3, #8
 800db50:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800db54:	e853 3f00 	ldrex	r3, [r3]
 800db58:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800db5a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800db5c:	4b6e      	ldr	r3, [pc, #440]	; (800dd18 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800db5e:	4013      	ands	r3, r2
 800db60:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	3308      	adds	r3, #8
 800db6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800db6e:	66ba      	str	r2, [r7, #104]	; 0x68
 800db70:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db72:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800db74:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800db76:	e841 2300 	strex	r3, r2, [r1]
 800db7a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800db7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d1e3      	bne.n	800db4a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	2220      	movs	r2, #32
 800db86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	2200      	movs	r2, #0
 800db8e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	2200      	movs	r2, #0
 800db94:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	4a60      	ldr	r2, [pc, #384]	; (800dd1c <UART_RxISR_8BIT_FIFOEN+0x358>)
 800db9c:	4293      	cmp	r3, r2
 800db9e:	d021      	beq.n	800dbe4 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	685b      	ldr	r3, [r3, #4]
 800dba6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d01a      	beq.n	800dbe4 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dbb6:	e853 3f00 	ldrex	r3, [r3]
 800dbba:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800dbbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dbbe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800dbc2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	461a      	mov	r2, r3
 800dbcc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dbd0:	657b      	str	r3, [r7, #84]	; 0x54
 800dbd2:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbd4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dbd6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dbd8:	e841 2300 	strex	r3, r2, [r1]
 800dbdc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800dbde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d1e4      	bne.n	800dbae <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbe8:	2b01      	cmp	r3, #1
 800dbea:	d130      	bne.n	800dc4e <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	2200      	movs	r2, #0
 800dbf0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbfa:	e853 3f00 	ldrex	r3, [r3]
 800dbfe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800dc00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc02:	f023 0310 	bic.w	r3, r3, #16
 800dc06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	461a      	mov	r2, r3
 800dc10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dc14:	643b      	str	r3, [r7, #64]	; 0x40
 800dc16:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc18:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800dc1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dc1c:	e841 2300 	strex	r3, r2, [r1]
 800dc20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800dc22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d1e4      	bne.n	800dbf2 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	69db      	ldr	r3, [r3, #28]
 800dc2e:	f003 0310 	and.w	r3, r3, #16
 800dc32:	2b10      	cmp	r3, #16
 800dc34:	d103      	bne.n	800dc3e <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	2210      	movs	r2, #16
 800dc3c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800dc44:	4619      	mov	r1, r3
 800dc46:	6878      	ldr	r0, [r7, #4]
 800dc48:	f7fe fc12 	bl	800c470 <HAL_UARTEx_RxEventCallback>
 800dc4c:	e002      	b.n	800dc54 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800dc4e:	6878      	ldr	r0, [r7, #4]
 800dc50:	f7f3 ff8a 	bl	8001b68 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800dc54:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d006      	beq.n	800dc6a <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800dc5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800dc60:	f003 0320 	and.w	r3, r3, #32
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	f47f aed1 	bne.w	800da0c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dc70:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800dc74:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d049      	beq.n	800dd10 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800dc82:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800dc86:	429a      	cmp	r2, r3
 800dc88:	d242      	bcs.n	800dd10 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	3308      	adds	r3, #8
 800dc90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc92:	6a3b      	ldr	r3, [r7, #32]
 800dc94:	e853 3f00 	ldrex	r3, [r3]
 800dc98:	61fb      	str	r3, [r7, #28]
   return(result);
 800dc9a:	69fb      	ldr	r3, [r7, #28]
 800dc9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dca0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	3308      	adds	r3, #8
 800dcaa:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800dcae:	62fa      	str	r2, [r7, #44]	; 0x2c
 800dcb0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dcb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dcb6:	e841 2300 	strex	r3, r2, [r1]
 800dcba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dcbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d1e3      	bne.n	800dc8a <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	4a16      	ldr	r2, [pc, #88]	; (800dd20 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800dcc6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	e853 3f00 	ldrex	r3, [r3]
 800dcd4:	60bb      	str	r3, [r7, #8]
   return(result);
 800dcd6:	68bb      	ldr	r3, [r7, #8]
 800dcd8:	f043 0320 	orr.w	r3, r3, #32
 800dcdc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	461a      	mov	r2, r3
 800dce6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800dcea:	61bb      	str	r3, [r7, #24]
 800dcec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcee:	6979      	ldr	r1, [r7, #20]
 800dcf0:	69ba      	ldr	r2, [r7, #24]
 800dcf2:	e841 2300 	strex	r3, r2, [r1]
 800dcf6:	613b      	str	r3, [r7, #16]
   return(result);
 800dcf8:	693b      	ldr	r3, [r7, #16]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d1e4      	bne.n	800dcc8 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800dcfe:	e007      	b.n	800dd10 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	699a      	ldr	r2, [r3, #24]
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	f042 0208 	orr.w	r2, r2, #8
 800dd0e:	619a      	str	r2, [r3, #24]
}
 800dd10:	bf00      	nop
 800dd12:	37b0      	adds	r7, #176	; 0xb0
 800dd14:	46bd      	mov	sp, r7
 800dd16:	bd80      	pop	{r7, pc}
 800dd18:	effffffe 	.word	0xeffffffe
 800dd1c:	58000c00 	.word	0x58000c00
 800dd20:	0800d655 	.word	0x0800d655

0800dd24 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800dd24:	b580      	push	{r7, lr}
 800dd26:	b0ae      	sub	sp, #184	; 0xb8
 800dd28:	af00      	add	r7, sp, #0
 800dd2a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dd32:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	69db      	ldr	r3, [r3, #28]
 800dd3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	689b      	ldr	r3, [r3, #8]
 800dd50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dd5a:	2b22      	cmp	r3, #34	; 0x22
 800dd5c:	f040 8184 	bne.w	800e068 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800dd66:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800dd6a:	e127      	b.n	800dfbc <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd72:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dd7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800dd7e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800dd82:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800dd86:	4013      	ands	r3, r2
 800dd88:	b29a      	uxth	r2, r3
 800dd8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800dd8e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dd94:	1c9a      	adds	r2, r3, #2
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dda0:	b29b      	uxth	r3, r3
 800dda2:	3b01      	subs	r3, #1
 800dda4:	b29a      	uxth	r2, r3
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	69db      	ldr	r3, [r3, #28]
 800ddb2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ddb6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ddba:	f003 0307 	and.w	r3, r3, #7
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d053      	beq.n	800de6a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ddc2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ddc6:	f003 0301 	and.w	r3, r3, #1
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d011      	beq.n	800ddf2 <UART_RxISR_16BIT_FIFOEN+0xce>
 800ddce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ddd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d00b      	beq.n	800ddf2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	2201      	movs	r2, #1
 800dde0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dde8:	f043 0201 	orr.w	r2, r3, #1
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ddf2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ddf6:	f003 0302 	and.w	r3, r3, #2
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d011      	beq.n	800de22 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800ddfe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800de02:	f003 0301 	and.w	r3, r3, #1
 800de06:	2b00      	cmp	r3, #0
 800de08:	d00b      	beq.n	800de22 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	2202      	movs	r2, #2
 800de10:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800de18:	f043 0204 	orr.w	r2, r3, #4
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800de22:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800de26:	f003 0304 	and.w	r3, r3, #4
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d011      	beq.n	800de52 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800de2e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800de32:	f003 0301 	and.w	r3, r3, #1
 800de36:	2b00      	cmp	r3, #0
 800de38:	d00b      	beq.n	800de52 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	2204      	movs	r2, #4
 800de40:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800de48:	f043 0202 	orr.w	r2, r3, #2
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d006      	beq.n	800de6a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800de5c:	6878      	ldr	r0, [r7, #4]
 800de5e:	f7fe fafd 	bl	800c45c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	2200      	movs	r2, #0
 800de66:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800de70:	b29b      	uxth	r3, r3
 800de72:	2b00      	cmp	r3, #0
 800de74:	f040 80a2 	bne.w	800dfbc <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800de80:	e853 3f00 	ldrex	r3, [r3]
 800de84:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800de86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800de88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800de8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	461a      	mov	r2, r3
 800de96:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800de9a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800de9e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dea0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800dea2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800dea6:	e841 2300 	strex	r3, r2, [r1]
 800deaa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800deac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d1e2      	bne.n	800de78 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	3308      	adds	r3, #8
 800deb8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800deba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800debc:	e853 3f00 	ldrex	r3, [r3]
 800dec0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800dec2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800dec4:	4b6e      	ldr	r3, [pc, #440]	; (800e080 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800dec6:	4013      	ands	r3, r2
 800dec8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	3308      	adds	r3, #8
 800ded2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800ded6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ded8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800deda:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800dedc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800dede:	e841 2300 	strex	r3, r2, [r1]
 800dee2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800dee4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d1e3      	bne.n	800deb2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	2220      	movs	r2, #32
 800deee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	2200      	movs	r2, #0
 800def6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	2200      	movs	r2, #0
 800defc:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	4a60      	ldr	r2, [pc, #384]	; (800e084 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800df04:	4293      	cmp	r3, r2
 800df06:	d021      	beq.n	800df4c <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	685b      	ldr	r3, [r3, #4]
 800df0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800df12:	2b00      	cmp	r3, #0
 800df14:	d01a      	beq.n	800df4c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df1e:	e853 3f00 	ldrex	r3, [r3]
 800df22:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800df24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800df26:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800df2a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	461a      	mov	r2, r3
 800df34:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800df38:	65bb      	str	r3, [r7, #88]	; 0x58
 800df3a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df3c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800df3e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800df40:	e841 2300 	strex	r3, r2, [r1]
 800df44:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800df46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d1e4      	bne.n	800df16 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df50:	2b01      	cmp	r3, #1
 800df52:	d130      	bne.n	800dfb6 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	2200      	movs	r2, #0
 800df58:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df62:	e853 3f00 	ldrex	r3, [r3]
 800df66:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800df68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df6a:	f023 0310 	bic.w	r3, r3, #16
 800df6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	461a      	mov	r2, r3
 800df78:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800df7c:	647b      	str	r3, [r7, #68]	; 0x44
 800df7e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df80:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800df82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800df84:	e841 2300 	strex	r3, r2, [r1]
 800df88:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800df8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d1e4      	bne.n	800df5a <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	69db      	ldr	r3, [r3, #28]
 800df96:	f003 0310 	and.w	r3, r3, #16
 800df9a:	2b10      	cmp	r3, #16
 800df9c:	d103      	bne.n	800dfa6 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	2210      	movs	r2, #16
 800dfa4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800dfac:	4619      	mov	r1, r3
 800dfae:	6878      	ldr	r0, [r7, #4]
 800dfb0:	f7fe fa5e 	bl	800c470 <HAL_UARTEx_RxEventCallback>
 800dfb4:	e002      	b.n	800dfbc <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800dfb6:	6878      	ldr	r0, [r7, #4]
 800dfb8:	f7f3 fdd6 	bl	8001b68 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800dfbc:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d006      	beq.n	800dfd2 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800dfc4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dfc8:	f003 0320 	and.w	r3, r3, #32
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	f47f aecd 	bne.w	800dd6c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dfd8:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800dfdc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d049      	beq.n	800e078 <UART_RxISR_16BIT_FIFOEN+0x354>
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800dfea:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800dfee:	429a      	cmp	r2, r3
 800dff0:	d242      	bcs.n	800e078 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	3308      	adds	r3, #8
 800dff8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dffc:	e853 3f00 	ldrex	r3, [r3]
 800e000:	623b      	str	r3, [r7, #32]
   return(result);
 800e002:	6a3b      	ldr	r3, [r7, #32]
 800e004:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e008:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	3308      	adds	r3, #8
 800e012:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e016:	633a      	str	r2, [r7, #48]	; 0x30
 800e018:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e01a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e01c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e01e:	e841 2300 	strex	r3, r2, [r1]
 800e022:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e026:	2b00      	cmp	r3, #0
 800e028:	d1e3      	bne.n	800dff2 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	4a16      	ldr	r2, [pc, #88]	; (800e088 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800e02e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e036:	693b      	ldr	r3, [r7, #16]
 800e038:	e853 3f00 	ldrex	r3, [r3]
 800e03c:	60fb      	str	r3, [r7, #12]
   return(result);
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	f043 0320 	orr.w	r3, r3, #32
 800e044:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	461a      	mov	r2, r3
 800e04e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e052:	61fb      	str	r3, [r7, #28]
 800e054:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e056:	69b9      	ldr	r1, [r7, #24]
 800e058:	69fa      	ldr	r2, [r7, #28]
 800e05a:	e841 2300 	strex	r3, r2, [r1]
 800e05e:	617b      	str	r3, [r7, #20]
   return(result);
 800e060:	697b      	ldr	r3, [r7, #20]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d1e4      	bne.n	800e030 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e066:	e007      	b.n	800e078 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	699a      	ldr	r2, [r3, #24]
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	f042 0208 	orr.w	r2, r2, #8
 800e076:	619a      	str	r2, [r3, #24]
}
 800e078:	bf00      	nop
 800e07a:	37b8      	adds	r7, #184	; 0xb8
 800e07c:	46bd      	mov	sp, r7
 800e07e:	bd80      	pop	{r7, pc}
 800e080:	effffffe 	.word	0xeffffffe
 800e084:	58000c00 	.word	0x58000c00
 800e088:	0800d80d 	.word	0x0800d80d

0800e08c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e08c:	b480      	push	{r7}
 800e08e:	b083      	sub	sp, #12
 800e090:	af00      	add	r7, sp, #0
 800e092:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e094:	bf00      	nop
 800e096:	370c      	adds	r7, #12
 800e098:	46bd      	mov	sp, r7
 800e09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e09e:	4770      	bx	lr

0800e0a0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e0a0:	b480      	push	{r7}
 800e0a2:	b083      	sub	sp, #12
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e0a8:	bf00      	nop
 800e0aa:	370c      	adds	r7, #12
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b2:	4770      	bx	lr

0800e0b4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e0b4:	b480      	push	{r7}
 800e0b6:	b083      	sub	sp, #12
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e0bc:	bf00      	nop
 800e0be:	370c      	adds	r7, #12
 800e0c0:	46bd      	mov	sp, r7
 800e0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c6:	4770      	bx	lr

0800e0c8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e0c8:	b480      	push	{r7}
 800e0ca:	b085      	sub	sp, #20
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e0d6:	2b01      	cmp	r3, #1
 800e0d8:	d101      	bne.n	800e0de <HAL_UARTEx_DisableFifoMode+0x16>
 800e0da:	2302      	movs	r3, #2
 800e0dc:	e027      	b.n	800e12e <HAL_UARTEx_DisableFifoMode+0x66>
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	2201      	movs	r2, #1
 800e0e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	2224      	movs	r2, #36	; 0x24
 800e0ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	681a      	ldr	r2, [r3, #0]
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	f022 0201 	bic.w	r2, r2, #1
 800e104:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e10c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	2200      	movs	r2, #0
 800e112:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	68fa      	ldr	r2, [r7, #12]
 800e11a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	2220      	movs	r2, #32
 800e120:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	2200      	movs	r2, #0
 800e128:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e12c:	2300      	movs	r3, #0
}
 800e12e:	4618      	mov	r0, r3
 800e130:	3714      	adds	r7, #20
 800e132:	46bd      	mov	sp, r7
 800e134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e138:	4770      	bx	lr

0800e13a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e13a:	b580      	push	{r7, lr}
 800e13c:	b084      	sub	sp, #16
 800e13e:	af00      	add	r7, sp, #0
 800e140:	6078      	str	r0, [r7, #4]
 800e142:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e14a:	2b01      	cmp	r3, #1
 800e14c:	d101      	bne.n	800e152 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e14e:	2302      	movs	r3, #2
 800e150:	e02d      	b.n	800e1ae <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	2201      	movs	r2, #1
 800e156:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	2224      	movs	r2, #36	; 0x24
 800e15e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	681a      	ldr	r2, [r3, #0]
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	f022 0201 	bic.w	r2, r2, #1
 800e178:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	689b      	ldr	r3, [r3, #8]
 800e180:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	683a      	ldr	r2, [r7, #0]
 800e18a:	430a      	orrs	r2, r1
 800e18c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e18e:	6878      	ldr	r0, [r7, #4]
 800e190:	f000 f850 	bl	800e234 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	68fa      	ldr	r2, [r7, #12]
 800e19a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	2220      	movs	r2, #32
 800e1a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	2200      	movs	r2, #0
 800e1a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e1ac:	2300      	movs	r3, #0
}
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	3710      	adds	r7, #16
 800e1b2:	46bd      	mov	sp, r7
 800e1b4:	bd80      	pop	{r7, pc}

0800e1b6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e1b6:	b580      	push	{r7, lr}
 800e1b8:	b084      	sub	sp, #16
 800e1ba:	af00      	add	r7, sp, #0
 800e1bc:	6078      	str	r0, [r7, #4]
 800e1be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e1c6:	2b01      	cmp	r3, #1
 800e1c8:	d101      	bne.n	800e1ce <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e1ca:	2302      	movs	r3, #2
 800e1cc:	e02d      	b.n	800e22a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	2201      	movs	r2, #1
 800e1d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	2224      	movs	r2, #36	; 0x24
 800e1da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	681a      	ldr	r2, [r3, #0]
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	f022 0201 	bic.w	r2, r2, #1
 800e1f4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	689b      	ldr	r3, [r3, #8]
 800e1fc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	683a      	ldr	r2, [r7, #0]
 800e206:	430a      	orrs	r2, r1
 800e208:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e20a:	6878      	ldr	r0, [r7, #4]
 800e20c:	f000 f812 	bl	800e234 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	68fa      	ldr	r2, [r7, #12]
 800e216:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	2220      	movs	r2, #32
 800e21c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	2200      	movs	r2, #0
 800e224:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e228:	2300      	movs	r3, #0
}
 800e22a:	4618      	mov	r0, r3
 800e22c:	3710      	adds	r7, #16
 800e22e:	46bd      	mov	sp, r7
 800e230:	bd80      	pop	{r7, pc}
	...

0800e234 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e234:	b480      	push	{r7}
 800e236:	b085      	sub	sp, #20
 800e238:	af00      	add	r7, sp, #0
 800e23a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e240:	2b00      	cmp	r3, #0
 800e242:	d108      	bne.n	800e256 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	2201      	movs	r2, #1
 800e248:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	2201      	movs	r2, #1
 800e250:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e254:	e031      	b.n	800e2ba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e256:	2310      	movs	r3, #16
 800e258:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e25a:	2310      	movs	r3, #16
 800e25c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	689b      	ldr	r3, [r3, #8]
 800e264:	0e5b      	lsrs	r3, r3, #25
 800e266:	b2db      	uxtb	r3, r3
 800e268:	f003 0307 	and.w	r3, r3, #7
 800e26c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	689b      	ldr	r3, [r3, #8]
 800e274:	0f5b      	lsrs	r3, r3, #29
 800e276:	b2db      	uxtb	r3, r3
 800e278:	f003 0307 	and.w	r3, r3, #7
 800e27c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e27e:	7bbb      	ldrb	r3, [r7, #14]
 800e280:	7b3a      	ldrb	r2, [r7, #12]
 800e282:	4911      	ldr	r1, [pc, #68]	; (800e2c8 <UARTEx_SetNbDataToProcess+0x94>)
 800e284:	5c8a      	ldrb	r2, [r1, r2]
 800e286:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e28a:	7b3a      	ldrb	r2, [r7, #12]
 800e28c:	490f      	ldr	r1, [pc, #60]	; (800e2cc <UARTEx_SetNbDataToProcess+0x98>)
 800e28e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e290:	fb93 f3f2 	sdiv	r3, r3, r2
 800e294:	b29a      	uxth	r2, r3
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e29c:	7bfb      	ldrb	r3, [r7, #15]
 800e29e:	7b7a      	ldrb	r2, [r7, #13]
 800e2a0:	4909      	ldr	r1, [pc, #36]	; (800e2c8 <UARTEx_SetNbDataToProcess+0x94>)
 800e2a2:	5c8a      	ldrb	r2, [r1, r2]
 800e2a4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e2a8:	7b7a      	ldrb	r2, [r7, #13]
 800e2aa:	4908      	ldr	r1, [pc, #32]	; (800e2cc <UARTEx_SetNbDataToProcess+0x98>)
 800e2ac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e2ae:	fb93 f3f2 	sdiv	r3, r3, r2
 800e2b2:	b29a      	uxth	r2, r3
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800e2ba:	bf00      	nop
 800e2bc:	3714      	adds	r7, #20
 800e2be:	46bd      	mov	sp, r7
 800e2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c4:	4770      	bx	lr
 800e2c6:	bf00      	nop
 800e2c8:	0800f548 	.word	0x0800f548
 800e2cc:	0800f550 	.word	0x0800f550

0800e2d0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800e2d0:	b480      	push	{r7}
 800e2d2:	b083      	sub	sp, #12
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	6078      	str	r0, [r7, #4]
 800e2d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800e2da:	683b      	ldr	r3, [r7, #0]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d121      	bne.n	800e326 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	681a      	ldr	r2, [r3, #0]
 800e2e6:	4b27      	ldr	r3, [pc, #156]	; (800e384 <FMC_SDRAM_Init+0xb4>)
 800e2e8:	4013      	ands	r3, r2
 800e2ea:	683a      	ldr	r2, [r7, #0]
 800e2ec:	6851      	ldr	r1, [r2, #4]
 800e2ee:	683a      	ldr	r2, [r7, #0]
 800e2f0:	6892      	ldr	r2, [r2, #8]
 800e2f2:	4311      	orrs	r1, r2
 800e2f4:	683a      	ldr	r2, [r7, #0]
 800e2f6:	68d2      	ldr	r2, [r2, #12]
 800e2f8:	4311      	orrs	r1, r2
 800e2fa:	683a      	ldr	r2, [r7, #0]
 800e2fc:	6912      	ldr	r2, [r2, #16]
 800e2fe:	4311      	orrs	r1, r2
 800e300:	683a      	ldr	r2, [r7, #0]
 800e302:	6952      	ldr	r2, [r2, #20]
 800e304:	4311      	orrs	r1, r2
 800e306:	683a      	ldr	r2, [r7, #0]
 800e308:	6992      	ldr	r2, [r2, #24]
 800e30a:	4311      	orrs	r1, r2
 800e30c:	683a      	ldr	r2, [r7, #0]
 800e30e:	69d2      	ldr	r2, [r2, #28]
 800e310:	4311      	orrs	r1, r2
 800e312:	683a      	ldr	r2, [r7, #0]
 800e314:	6a12      	ldr	r2, [r2, #32]
 800e316:	4311      	orrs	r1, r2
 800e318:	683a      	ldr	r2, [r7, #0]
 800e31a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800e31c:	430a      	orrs	r2, r1
 800e31e:	431a      	orrs	r2, r3
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	601a      	str	r2, [r3, #0]
 800e324:	e026      	b.n	800e374 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800e32e:	683b      	ldr	r3, [r7, #0]
 800e330:	69d9      	ldr	r1, [r3, #28]
 800e332:	683b      	ldr	r3, [r7, #0]
 800e334:	6a1b      	ldr	r3, [r3, #32]
 800e336:	4319      	orrs	r1, r3
 800e338:	683b      	ldr	r3, [r7, #0]
 800e33a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e33c:	430b      	orrs	r3, r1
 800e33e:	431a      	orrs	r2, r3
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	685a      	ldr	r2, [r3, #4]
 800e348:	4b0e      	ldr	r3, [pc, #56]	; (800e384 <FMC_SDRAM_Init+0xb4>)
 800e34a:	4013      	ands	r3, r2
 800e34c:	683a      	ldr	r2, [r7, #0]
 800e34e:	6851      	ldr	r1, [r2, #4]
 800e350:	683a      	ldr	r2, [r7, #0]
 800e352:	6892      	ldr	r2, [r2, #8]
 800e354:	4311      	orrs	r1, r2
 800e356:	683a      	ldr	r2, [r7, #0]
 800e358:	68d2      	ldr	r2, [r2, #12]
 800e35a:	4311      	orrs	r1, r2
 800e35c:	683a      	ldr	r2, [r7, #0]
 800e35e:	6912      	ldr	r2, [r2, #16]
 800e360:	4311      	orrs	r1, r2
 800e362:	683a      	ldr	r2, [r7, #0]
 800e364:	6952      	ldr	r2, [r2, #20]
 800e366:	4311      	orrs	r1, r2
 800e368:	683a      	ldr	r2, [r7, #0]
 800e36a:	6992      	ldr	r2, [r2, #24]
 800e36c:	430a      	orrs	r2, r1
 800e36e:	431a      	orrs	r2, r3
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800e374:	2300      	movs	r3, #0
}
 800e376:	4618      	mov	r0, r3
 800e378:	370c      	adds	r7, #12
 800e37a:	46bd      	mov	sp, r7
 800e37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e380:	4770      	bx	lr
 800e382:	bf00      	nop
 800e384:	ffff8000 	.word	0xffff8000

0800e388 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800e388:	b480      	push	{r7}
 800e38a:	b085      	sub	sp, #20
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	60f8      	str	r0, [r7, #12]
 800e390:	60b9      	str	r1, [r7, #8]
 800e392:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	2b00      	cmp	r3, #0
 800e398:	d128      	bne.n	800e3ec <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	689b      	ldr	r3, [r3, #8]
 800e39e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800e3a2:	68bb      	ldr	r3, [r7, #8]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	1e59      	subs	r1, r3, #1
 800e3a8:	68bb      	ldr	r3, [r7, #8]
 800e3aa:	685b      	ldr	r3, [r3, #4]
 800e3ac:	3b01      	subs	r3, #1
 800e3ae:	011b      	lsls	r3, r3, #4
 800e3b0:	4319      	orrs	r1, r3
 800e3b2:	68bb      	ldr	r3, [r7, #8]
 800e3b4:	689b      	ldr	r3, [r3, #8]
 800e3b6:	3b01      	subs	r3, #1
 800e3b8:	021b      	lsls	r3, r3, #8
 800e3ba:	4319      	orrs	r1, r3
 800e3bc:	68bb      	ldr	r3, [r7, #8]
 800e3be:	68db      	ldr	r3, [r3, #12]
 800e3c0:	3b01      	subs	r3, #1
 800e3c2:	031b      	lsls	r3, r3, #12
 800e3c4:	4319      	orrs	r1, r3
 800e3c6:	68bb      	ldr	r3, [r7, #8]
 800e3c8:	691b      	ldr	r3, [r3, #16]
 800e3ca:	3b01      	subs	r3, #1
 800e3cc:	041b      	lsls	r3, r3, #16
 800e3ce:	4319      	orrs	r1, r3
 800e3d0:	68bb      	ldr	r3, [r7, #8]
 800e3d2:	695b      	ldr	r3, [r3, #20]
 800e3d4:	3b01      	subs	r3, #1
 800e3d6:	051b      	lsls	r3, r3, #20
 800e3d8:	4319      	orrs	r1, r3
 800e3da:	68bb      	ldr	r3, [r7, #8]
 800e3dc:	699b      	ldr	r3, [r3, #24]
 800e3de:	3b01      	subs	r3, #1
 800e3e0:	061b      	lsls	r3, r3, #24
 800e3e2:	430b      	orrs	r3, r1
 800e3e4:	431a      	orrs	r2, r3
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	609a      	str	r2, [r3, #8]
 800e3ea:	e02d      	b.n	800e448 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	689a      	ldr	r2, [r3, #8]
 800e3f0:	4b19      	ldr	r3, [pc, #100]	; (800e458 <FMC_SDRAM_Timing_Init+0xd0>)
 800e3f2:	4013      	ands	r3, r2
 800e3f4:	68ba      	ldr	r2, [r7, #8]
 800e3f6:	68d2      	ldr	r2, [r2, #12]
 800e3f8:	3a01      	subs	r2, #1
 800e3fa:	0311      	lsls	r1, r2, #12
 800e3fc:	68ba      	ldr	r2, [r7, #8]
 800e3fe:	6952      	ldr	r2, [r2, #20]
 800e400:	3a01      	subs	r2, #1
 800e402:	0512      	lsls	r2, r2, #20
 800e404:	430a      	orrs	r2, r1
 800e406:	431a      	orrs	r2, r3
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	68db      	ldr	r3, [r3, #12]
 800e410:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800e414:	68bb      	ldr	r3, [r7, #8]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	1e59      	subs	r1, r3, #1
 800e41a:	68bb      	ldr	r3, [r7, #8]
 800e41c:	685b      	ldr	r3, [r3, #4]
 800e41e:	3b01      	subs	r3, #1
 800e420:	011b      	lsls	r3, r3, #4
 800e422:	4319      	orrs	r1, r3
 800e424:	68bb      	ldr	r3, [r7, #8]
 800e426:	689b      	ldr	r3, [r3, #8]
 800e428:	3b01      	subs	r3, #1
 800e42a:	021b      	lsls	r3, r3, #8
 800e42c:	4319      	orrs	r1, r3
 800e42e:	68bb      	ldr	r3, [r7, #8]
 800e430:	691b      	ldr	r3, [r3, #16]
 800e432:	3b01      	subs	r3, #1
 800e434:	041b      	lsls	r3, r3, #16
 800e436:	4319      	orrs	r1, r3
 800e438:	68bb      	ldr	r3, [r7, #8]
 800e43a:	699b      	ldr	r3, [r3, #24]
 800e43c:	3b01      	subs	r3, #1
 800e43e:	061b      	lsls	r3, r3, #24
 800e440:	430b      	orrs	r3, r1
 800e442:	431a      	orrs	r2, r3
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800e448:	2300      	movs	r3, #0
}
 800e44a:	4618      	mov	r0, r3
 800e44c:	3714      	adds	r7, #20
 800e44e:	46bd      	mov	sp, r7
 800e450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e454:	4770      	bx	lr
 800e456:	bf00      	nop
 800e458:	ff0f0fff 	.word	0xff0f0fff

0800e45c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e45c:	b084      	sub	sp, #16
 800e45e:	b580      	push	{r7, lr}
 800e460:	b084      	sub	sp, #16
 800e462:	af00      	add	r7, sp, #0
 800e464:	6078      	str	r0, [r7, #4]
 800e466:	f107 001c 	add.w	r0, r7, #28
 800e46a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e470:	2b01      	cmp	r3, #1
 800e472:	d120      	bne.n	800e4b6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e478:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	68da      	ldr	r2, [r3, #12]
 800e484:	4b2a      	ldr	r3, [pc, #168]	; (800e530 <USB_CoreInit+0xd4>)
 800e486:	4013      	ands	r3, r2
 800e488:	687a      	ldr	r2, [r7, #4]
 800e48a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	68db      	ldr	r3, [r3, #12]
 800e490:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800e498:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e49a:	2b01      	cmp	r3, #1
 800e49c:	d105      	bne.n	800e4aa <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	68db      	ldr	r3, [r3, #12]
 800e4a2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e4aa:	6878      	ldr	r0, [r7, #4]
 800e4ac:	f000 faac 	bl	800ea08 <USB_CoreReset>
 800e4b0:	4603      	mov	r3, r0
 800e4b2:	73fb      	strb	r3, [r7, #15]
 800e4b4:	e01a      	b.n	800e4ec <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	68db      	ldr	r3, [r3, #12]
 800e4ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e4c2:	6878      	ldr	r0, [r7, #4]
 800e4c4:	f000 faa0 	bl	800ea08 <USB_CoreReset>
 800e4c8:	4603      	mov	r3, r0
 800e4ca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800e4cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d106      	bne.n	800e4e0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4d6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	639a      	str	r2, [r3, #56]	; 0x38
 800e4de:	e005      	b.n	800e4ec <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800e4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ee:	2b01      	cmp	r3, #1
 800e4f0:	d116      	bne.n	800e520 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e4f6:	b29a      	uxth	r2, r3
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e500:	4b0c      	ldr	r3, [pc, #48]	; (800e534 <USB_CoreInit+0xd8>)
 800e502:	4313      	orrs	r3, r2
 800e504:	687a      	ldr	r2, [r7, #4]
 800e506:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	689b      	ldr	r3, [r3, #8]
 800e50c:	f043 0206 	orr.w	r2, r3, #6
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	689b      	ldr	r3, [r3, #8]
 800e518:	f043 0220 	orr.w	r2, r3, #32
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800e520:	7bfb      	ldrb	r3, [r7, #15]
}
 800e522:	4618      	mov	r0, r3
 800e524:	3710      	adds	r7, #16
 800e526:	46bd      	mov	sp, r7
 800e528:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e52c:	b004      	add	sp, #16
 800e52e:	4770      	bx	lr
 800e530:	ffbdffbf 	.word	0xffbdffbf
 800e534:	03ee0000 	.word	0x03ee0000

0800e538 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e538:	b480      	push	{r7}
 800e53a:	b083      	sub	sp, #12
 800e53c:	af00      	add	r7, sp, #0
 800e53e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	689b      	ldr	r3, [r3, #8]
 800e544:	f023 0201 	bic.w	r2, r3, #1
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e54c:	2300      	movs	r3, #0
}
 800e54e:	4618      	mov	r0, r3
 800e550:	370c      	adds	r7, #12
 800e552:	46bd      	mov	sp, r7
 800e554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e558:	4770      	bx	lr

0800e55a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800e55a:	b580      	push	{r7, lr}
 800e55c:	b084      	sub	sp, #16
 800e55e:	af00      	add	r7, sp, #0
 800e560:	6078      	str	r0, [r7, #4]
 800e562:	460b      	mov	r3, r1
 800e564:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800e566:	2300      	movs	r3, #0
 800e568:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	68db      	ldr	r3, [r3, #12]
 800e56e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800e576:	78fb      	ldrb	r3, [r7, #3]
 800e578:	2b01      	cmp	r3, #1
 800e57a:	d115      	bne.n	800e5a8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	68db      	ldr	r3, [r3, #12]
 800e580:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800e588:	2001      	movs	r0, #1
 800e58a:	f7f4 fda7 	bl	80030dc <HAL_Delay>
      ms++;
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	3301      	adds	r3, #1
 800e592:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800e594:	6878      	ldr	r0, [r7, #4]
 800e596:	f000 fa29 	bl	800e9ec <USB_GetMode>
 800e59a:	4603      	mov	r3, r0
 800e59c:	2b01      	cmp	r3, #1
 800e59e:	d01e      	beq.n	800e5de <USB_SetCurrentMode+0x84>
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	2b31      	cmp	r3, #49	; 0x31
 800e5a4:	d9f0      	bls.n	800e588 <USB_SetCurrentMode+0x2e>
 800e5a6:	e01a      	b.n	800e5de <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800e5a8:	78fb      	ldrb	r3, [r7, #3]
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d115      	bne.n	800e5da <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	68db      	ldr	r3, [r3, #12]
 800e5b2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800e5ba:	2001      	movs	r0, #1
 800e5bc:	f7f4 fd8e 	bl	80030dc <HAL_Delay>
      ms++;
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	3301      	adds	r3, #1
 800e5c4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800e5c6:	6878      	ldr	r0, [r7, #4]
 800e5c8:	f000 fa10 	bl	800e9ec <USB_GetMode>
 800e5cc:	4603      	mov	r3, r0
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d005      	beq.n	800e5de <USB_SetCurrentMode+0x84>
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	2b31      	cmp	r3, #49	; 0x31
 800e5d6:	d9f0      	bls.n	800e5ba <USB_SetCurrentMode+0x60>
 800e5d8:	e001      	b.n	800e5de <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800e5da:	2301      	movs	r3, #1
 800e5dc:	e005      	b.n	800e5ea <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	2b32      	cmp	r3, #50	; 0x32
 800e5e2:	d101      	bne.n	800e5e8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800e5e4:	2301      	movs	r3, #1
 800e5e6:	e000      	b.n	800e5ea <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800e5e8:	2300      	movs	r3, #0
}
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	3710      	adds	r7, #16
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	bd80      	pop	{r7, pc}
	...

0800e5f4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e5f4:	b084      	sub	sp, #16
 800e5f6:	b580      	push	{r7, lr}
 800e5f8:	b086      	sub	sp, #24
 800e5fa:	af00      	add	r7, sp, #0
 800e5fc:	6078      	str	r0, [r7, #4]
 800e5fe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800e602:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800e606:	2300      	movs	r3, #0
 800e608:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800e60e:	2300      	movs	r3, #0
 800e610:	613b      	str	r3, [r7, #16]
 800e612:	e009      	b.n	800e628 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800e614:	687a      	ldr	r2, [r7, #4]
 800e616:	693b      	ldr	r3, [r7, #16]
 800e618:	3340      	adds	r3, #64	; 0x40
 800e61a:	009b      	lsls	r3, r3, #2
 800e61c:	4413      	add	r3, r2
 800e61e:	2200      	movs	r2, #0
 800e620:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800e622:	693b      	ldr	r3, [r7, #16]
 800e624:	3301      	adds	r3, #1
 800e626:	613b      	str	r3, [r7, #16]
 800e628:	693b      	ldr	r3, [r7, #16]
 800e62a:	2b0e      	cmp	r3, #14
 800e62c:	d9f2      	bls.n	800e614 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800e62e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e630:	2b00      	cmp	r3, #0
 800e632:	d11c      	bne.n	800e66e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e63a:	685b      	ldr	r3, [r3, #4]
 800e63c:	68fa      	ldr	r2, [r7, #12]
 800e63e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e642:	f043 0302 	orr.w	r3, r3, #2
 800e646:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e64c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	601a      	str	r2, [r3, #0]
 800e66c:	e005      	b.n	800e67a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e672:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e680:	461a      	mov	r2, r3
 800e682:	2300      	movs	r3, #0
 800e684:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e68c:	4619      	mov	r1, r3
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e694:	461a      	mov	r2, r3
 800e696:	680b      	ldr	r3, [r1, #0]
 800e698:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e69a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e69c:	2b01      	cmp	r3, #1
 800e69e:	d10c      	bne.n	800e6ba <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800e6a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d104      	bne.n	800e6b0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800e6a6:	2100      	movs	r1, #0
 800e6a8:	6878      	ldr	r0, [r7, #4]
 800e6aa:	f000 f965 	bl	800e978 <USB_SetDevSpeed>
 800e6ae:	e008      	b.n	800e6c2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800e6b0:	2101      	movs	r1, #1
 800e6b2:	6878      	ldr	r0, [r7, #4]
 800e6b4:	f000 f960 	bl	800e978 <USB_SetDevSpeed>
 800e6b8:	e003      	b.n	800e6c2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800e6ba:	2103      	movs	r1, #3
 800e6bc:	6878      	ldr	r0, [r7, #4]
 800e6be:	f000 f95b 	bl	800e978 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e6c2:	2110      	movs	r1, #16
 800e6c4:	6878      	ldr	r0, [r7, #4]
 800e6c6:	f000 f8f3 	bl	800e8b0 <USB_FlushTxFifo>
 800e6ca:	4603      	mov	r3, r0
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d001      	beq.n	800e6d4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800e6d0:	2301      	movs	r3, #1
 800e6d2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e6d4:	6878      	ldr	r0, [r7, #4]
 800e6d6:	f000 f91f 	bl	800e918 <USB_FlushRxFifo>
 800e6da:	4603      	mov	r3, r0
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d001      	beq.n	800e6e4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800e6e0:	2301      	movs	r3, #1
 800e6e2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e6ea:	461a      	mov	r2, r3
 800e6ec:	2300      	movs	r3, #0
 800e6ee:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e6f6:	461a      	mov	r2, r3
 800e6f8:	2300      	movs	r3, #0
 800e6fa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e702:	461a      	mov	r2, r3
 800e704:	2300      	movs	r3, #0
 800e706:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e708:	2300      	movs	r3, #0
 800e70a:	613b      	str	r3, [r7, #16]
 800e70c:	e043      	b.n	800e796 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e70e:	693b      	ldr	r3, [r7, #16]
 800e710:	015a      	lsls	r2, r3, #5
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	4413      	add	r3, r2
 800e716:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e720:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e724:	d118      	bne.n	800e758 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800e726:	693b      	ldr	r3, [r7, #16]
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d10a      	bne.n	800e742 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800e72c:	693b      	ldr	r3, [r7, #16]
 800e72e:	015a      	lsls	r2, r3, #5
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	4413      	add	r3, r2
 800e734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e738:	461a      	mov	r2, r3
 800e73a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e73e:	6013      	str	r3, [r2, #0]
 800e740:	e013      	b.n	800e76a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800e742:	693b      	ldr	r3, [r7, #16]
 800e744:	015a      	lsls	r2, r3, #5
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	4413      	add	r3, r2
 800e74a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e74e:	461a      	mov	r2, r3
 800e750:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e754:	6013      	str	r3, [r2, #0]
 800e756:	e008      	b.n	800e76a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800e758:	693b      	ldr	r3, [r7, #16]
 800e75a:	015a      	lsls	r2, r3, #5
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	4413      	add	r3, r2
 800e760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e764:	461a      	mov	r2, r3
 800e766:	2300      	movs	r3, #0
 800e768:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800e76a:	693b      	ldr	r3, [r7, #16]
 800e76c:	015a      	lsls	r2, r3, #5
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	4413      	add	r3, r2
 800e772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e776:	461a      	mov	r2, r3
 800e778:	2300      	movs	r3, #0
 800e77a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800e77c:	693b      	ldr	r3, [r7, #16]
 800e77e:	015a      	lsls	r2, r3, #5
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	4413      	add	r3, r2
 800e784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e788:	461a      	mov	r2, r3
 800e78a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e78e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e790:	693b      	ldr	r3, [r7, #16]
 800e792:	3301      	adds	r3, #1
 800e794:	613b      	str	r3, [r7, #16]
 800e796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e798:	693a      	ldr	r2, [r7, #16]
 800e79a:	429a      	cmp	r2, r3
 800e79c:	d3b7      	bcc.n	800e70e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e79e:	2300      	movs	r3, #0
 800e7a0:	613b      	str	r3, [r7, #16]
 800e7a2:	e043      	b.n	800e82c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e7a4:	693b      	ldr	r3, [r7, #16]
 800e7a6:	015a      	lsls	r2, r3, #5
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	4413      	add	r3, r2
 800e7ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e7b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e7ba:	d118      	bne.n	800e7ee <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800e7bc:	693b      	ldr	r3, [r7, #16]
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d10a      	bne.n	800e7d8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800e7c2:	693b      	ldr	r3, [r7, #16]
 800e7c4:	015a      	lsls	r2, r3, #5
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	4413      	add	r3, r2
 800e7ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e7ce:	461a      	mov	r2, r3
 800e7d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e7d4:	6013      	str	r3, [r2, #0]
 800e7d6:	e013      	b.n	800e800 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e7d8:	693b      	ldr	r3, [r7, #16]
 800e7da:	015a      	lsls	r2, r3, #5
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	4413      	add	r3, r2
 800e7e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e7e4:	461a      	mov	r2, r3
 800e7e6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e7ea:	6013      	str	r3, [r2, #0]
 800e7ec:	e008      	b.n	800e800 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e7ee:	693b      	ldr	r3, [r7, #16]
 800e7f0:	015a      	lsls	r2, r3, #5
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	4413      	add	r3, r2
 800e7f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e7fa:	461a      	mov	r2, r3
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800e800:	693b      	ldr	r3, [r7, #16]
 800e802:	015a      	lsls	r2, r3, #5
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	4413      	add	r3, r2
 800e808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e80c:	461a      	mov	r2, r3
 800e80e:	2300      	movs	r3, #0
 800e810:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e812:	693b      	ldr	r3, [r7, #16]
 800e814:	015a      	lsls	r2, r3, #5
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	4413      	add	r3, r2
 800e81a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e81e:	461a      	mov	r2, r3
 800e820:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e824:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e826:	693b      	ldr	r3, [r7, #16]
 800e828:	3301      	adds	r3, #1
 800e82a:	613b      	str	r3, [r7, #16]
 800e82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e82e:	693a      	ldr	r2, [r7, #16]
 800e830:	429a      	cmp	r2, r3
 800e832:	d3b7      	bcc.n	800e7a4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e83a:	691b      	ldr	r3, [r3, #16]
 800e83c:	68fa      	ldr	r2, [r7, #12]
 800e83e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e842:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e846:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	2200      	movs	r2, #0
 800e84c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800e854:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d105      	bne.n	800e868 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	699b      	ldr	r3, [r3, #24]
 800e860:	f043 0210 	orr.w	r2, r3, #16
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	699a      	ldr	r2, [r3, #24]
 800e86c:	4b0e      	ldr	r3, [pc, #56]	; (800e8a8 <USB_DevInit+0x2b4>)
 800e86e:	4313      	orrs	r3, r2
 800e870:	687a      	ldr	r2, [r7, #4]
 800e872:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800e874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e876:	2b00      	cmp	r3, #0
 800e878:	d005      	beq.n	800e886 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	699b      	ldr	r3, [r3, #24]
 800e87e:	f043 0208 	orr.w	r2, r3, #8
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800e886:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e888:	2b01      	cmp	r3, #1
 800e88a:	d105      	bne.n	800e898 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	699a      	ldr	r2, [r3, #24]
 800e890:	4b06      	ldr	r3, [pc, #24]	; (800e8ac <USB_DevInit+0x2b8>)
 800e892:	4313      	orrs	r3, r2
 800e894:	687a      	ldr	r2, [r7, #4]
 800e896:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800e898:	7dfb      	ldrb	r3, [r7, #23]
}
 800e89a:	4618      	mov	r0, r3
 800e89c:	3718      	adds	r7, #24
 800e89e:	46bd      	mov	sp, r7
 800e8a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e8a4:	b004      	add	sp, #16
 800e8a6:	4770      	bx	lr
 800e8a8:	803c3800 	.word	0x803c3800
 800e8ac:	40000004 	.word	0x40000004

0800e8b0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e8b0:	b480      	push	{r7}
 800e8b2:	b085      	sub	sp, #20
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	6078      	str	r0, [r7, #4]
 800e8b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e8ba:	2300      	movs	r3, #0
 800e8bc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	3301      	adds	r3, #1
 800e8c2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	4a13      	ldr	r2, [pc, #76]	; (800e914 <USB_FlushTxFifo+0x64>)
 800e8c8:	4293      	cmp	r3, r2
 800e8ca:	d901      	bls.n	800e8d0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800e8cc:	2303      	movs	r3, #3
 800e8ce:	e01b      	b.n	800e908 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	691b      	ldr	r3, [r3, #16]
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	daf2      	bge.n	800e8be <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800e8d8:	2300      	movs	r3, #0
 800e8da:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e8dc:	683b      	ldr	r3, [r7, #0]
 800e8de:	019b      	lsls	r3, r3, #6
 800e8e0:	f043 0220 	orr.w	r2, r3, #32
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	3301      	adds	r3, #1
 800e8ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	4a08      	ldr	r2, [pc, #32]	; (800e914 <USB_FlushTxFifo+0x64>)
 800e8f2:	4293      	cmp	r3, r2
 800e8f4:	d901      	bls.n	800e8fa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800e8f6:	2303      	movs	r3, #3
 800e8f8:	e006      	b.n	800e908 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	691b      	ldr	r3, [r3, #16]
 800e8fe:	f003 0320 	and.w	r3, r3, #32
 800e902:	2b20      	cmp	r3, #32
 800e904:	d0f0      	beq.n	800e8e8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800e906:	2300      	movs	r3, #0
}
 800e908:	4618      	mov	r0, r3
 800e90a:	3714      	adds	r7, #20
 800e90c:	46bd      	mov	sp, r7
 800e90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e912:	4770      	bx	lr
 800e914:	00030d40 	.word	0x00030d40

0800e918 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e918:	b480      	push	{r7}
 800e91a:	b085      	sub	sp, #20
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e920:	2300      	movs	r3, #0
 800e922:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	3301      	adds	r3, #1
 800e928:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	4a11      	ldr	r2, [pc, #68]	; (800e974 <USB_FlushRxFifo+0x5c>)
 800e92e:	4293      	cmp	r3, r2
 800e930:	d901      	bls.n	800e936 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800e932:	2303      	movs	r3, #3
 800e934:	e018      	b.n	800e968 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	691b      	ldr	r3, [r3, #16]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	daf2      	bge.n	800e924 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800e93e:	2300      	movs	r3, #0
 800e940:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	2210      	movs	r2, #16
 800e946:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	3301      	adds	r3, #1
 800e94c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	4a08      	ldr	r2, [pc, #32]	; (800e974 <USB_FlushRxFifo+0x5c>)
 800e952:	4293      	cmp	r3, r2
 800e954:	d901      	bls.n	800e95a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800e956:	2303      	movs	r3, #3
 800e958:	e006      	b.n	800e968 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	691b      	ldr	r3, [r3, #16]
 800e95e:	f003 0310 	and.w	r3, r3, #16
 800e962:	2b10      	cmp	r3, #16
 800e964:	d0f0      	beq.n	800e948 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800e966:	2300      	movs	r3, #0
}
 800e968:	4618      	mov	r0, r3
 800e96a:	3714      	adds	r7, #20
 800e96c:	46bd      	mov	sp, r7
 800e96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e972:	4770      	bx	lr
 800e974:	00030d40 	.word	0x00030d40

0800e978 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800e978:	b480      	push	{r7}
 800e97a:	b085      	sub	sp, #20
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	6078      	str	r0, [r7, #4]
 800e980:	460b      	mov	r3, r1
 800e982:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e98e:	681a      	ldr	r2, [r3, #0]
 800e990:	78fb      	ldrb	r3, [r7, #3]
 800e992:	68f9      	ldr	r1, [r7, #12]
 800e994:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e998:	4313      	orrs	r3, r2
 800e99a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800e99c:	2300      	movs	r3, #0
}
 800e99e:	4618      	mov	r0, r3
 800e9a0:	3714      	adds	r7, #20
 800e9a2:	46bd      	mov	sp, r7
 800e9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a8:	4770      	bx	lr

0800e9aa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e9aa:	b480      	push	{r7}
 800e9ac:	b085      	sub	sp, #20
 800e9ae:	af00      	add	r7, sp, #0
 800e9b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	68fa      	ldr	r2, [r7, #12]
 800e9c0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e9c4:	f023 0303 	bic.w	r3, r3, #3
 800e9c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e9d0:	685b      	ldr	r3, [r3, #4]
 800e9d2:	68fa      	ldr	r2, [r7, #12]
 800e9d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e9d8:	f043 0302 	orr.w	r3, r3, #2
 800e9dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e9de:	2300      	movs	r3, #0
}
 800e9e0:	4618      	mov	r0, r3
 800e9e2:	3714      	adds	r7, #20
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ea:	4770      	bx	lr

0800e9ec <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800e9ec:	b480      	push	{r7}
 800e9ee:	b083      	sub	sp, #12
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	695b      	ldr	r3, [r3, #20]
 800e9f8:	f003 0301 	and.w	r3, r3, #1
}
 800e9fc:	4618      	mov	r0, r3
 800e9fe:	370c      	adds	r7, #12
 800ea00:	46bd      	mov	sp, r7
 800ea02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea06:	4770      	bx	lr

0800ea08 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ea08:	b480      	push	{r7}
 800ea0a:	b085      	sub	sp, #20
 800ea0c:	af00      	add	r7, sp, #0
 800ea0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ea10:	2300      	movs	r3, #0
 800ea12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	3301      	adds	r3, #1
 800ea18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	4a13      	ldr	r2, [pc, #76]	; (800ea6c <USB_CoreReset+0x64>)
 800ea1e:	4293      	cmp	r3, r2
 800ea20:	d901      	bls.n	800ea26 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ea22:	2303      	movs	r3, #3
 800ea24:	e01b      	b.n	800ea5e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	691b      	ldr	r3, [r3, #16]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	daf2      	bge.n	800ea14 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ea2e:	2300      	movs	r3, #0
 800ea30:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	691b      	ldr	r3, [r3, #16]
 800ea36:	f043 0201 	orr.w	r2, r3, #1
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	3301      	adds	r3, #1
 800ea42:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	4a09      	ldr	r2, [pc, #36]	; (800ea6c <USB_CoreReset+0x64>)
 800ea48:	4293      	cmp	r3, r2
 800ea4a:	d901      	bls.n	800ea50 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ea4c:	2303      	movs	r3, #3
 800ea4e:	e006      	b.n	800ea5e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	691b      	ldr	r3, [r3, #16]
 800ea54:	f003 0301 	and.w	r3, r3, #1
 800ea58:	2b01      	cmp	r3, #1
 800ea5a:	d0f0      	beq.n	800ea3e <USB_CoreReset+0x36>

  return HAL_OK;
 800ea5c:	2300      	movs	r3, #0
}
 800ea5e:	4618      	mov	r0, r3
 800ea60:	3714      	adds	r7, #20
 800ea62:	46bd      	mov	sp, r7
 800ea64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea68:	4770      	bx	lr
 800ea6a:	bf00      	nop
 800ea6c:	00030d40 	.word	0x00030d40

0800ea70 <__errno>:
 800ea70:	4b01      	ldr	r3, [pc, #4]	; (800ea78 <__errno+0x8>)
 800ea72:	6818      	ldr	r0, [r3, #0]
 800ea74:	4770      	bx	lr
 800ea76:	bf00      	nop
 800ea78:	2400003c 	.word	0x2400003c

0800ea7c <__libc_init_array>:
 800ea7c:	b570      	push	{r4, r5, r6, lr}
 800ea7e:	4d0d      	ldr	r5, [pc, #52]	; (800eab4 <__libc_init_array+0x38>)
 800ea80:	4c0d      	ldr	r4, [pc, #52]	; (800eab8 <__libc_init_array+0x3c>)
 800ea82:	1b64      	subs	r4, r4, r5
 800ea84:	10a4      	asrs	r4, r4, #2
 800ea86:	2600      	movs	r6, #0
 800ea88:	42a6      	cmp	r6, r4
 800ea8a:	d109      	bne.n	800eaa0 <__libc_init_array+0x24>
 800ea8c:	4d0b      	ldr	r5, [pc, #44]	; (800eabc <__libc_init_array+0x40>)
 800ea8e:	4c0c      	ldr	r4, [pc, #48]	; (800eac0 <__libc_init_array+0x44>)
 800ea90:	f000 fc8e 	bl	800f3b0 <_init>
 800ea94:	1b64      	subs	r4, r4, r5
 800ea96:	10a4      	asrs	r4, r4, #2
 800ea98:	2600      	movs	r6, #0
 800ea9a:	42a6      	cmp	r6, r4
 800ea9c:	d105      	bne.n	800eaaa <__libc_init_array+0x2e>
 800ea9e:	bd70      	pop	{r4, r5, r6, pc}
 800eaa0:	f855 3b04 	ldr.w	r3, [r5], #4
 800eaa4:	4798      	blx	r3
 800eaa6:	3601      	adds	r6, #1
 800eaa8:	e7ee      	b.n	800ea88 <__libc_init_array+0xc>
 800eaaa:	f855 3b04 	ldr.w	r3, [r5], #4
 800eaae:	4798      	blx	r3
 800eab0:	3601      	adds	r6, #1
 800eab2:	e7f2      	b.n	800ea9a <__libc_init_array+0x1e>
 800eab4:	0800f594 	.word	0x0800f594
 800eab8:	0800f594 	.word	0x0800f594
 800eabc:	0800f594 	.word	0x0800f594
 800eac0:	0800f598 	.word	0x0800f598

0800eac4 <memcpy>:
 800eac4:	440a      	add	r2, r1
 800eac6:	4291      	cmp	r1, r2
 800eac8:	f100 33ff 	add.w	r3, r0, #4294967295
 800eacc:	d100      	bne.n	800ead0 <memcpy+0xc>
 800eace:	4770      	bx	lr
 800ead0:	b510      	push	{r4, lr}
 800ead2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ead6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eada:	4291      	cmp	r1, r2
 800eadc:	d1f9      	bne.n	800ead2 <memcpy+0xe>
 800eade:	bd10      	pop	{r4, pc}

0800eae0 <memset>:
 800eae0:	4402      	add	r2, r0
 800eae2:	4603      	mov	r3, r0
 800eae4:	4293      	cmp	r3, r2
 800eae6:	d100      	bne.n	800eaea <memset+0xa>
 800eae8:	4770      	bx	lr
 800eaea:	f803 1b01 	strb.w	r1, [r3], #1
 800eaee:	e7f9      	b.n	800eae4 <memset+0x4>

0800eaf0 <siprintf>:
 800eaf0:	b40e      	push	{r1, r2, r3}
 800eaf2:	b500      	push	{lr}
 800eaf4:	b09c      	sub	sp, #112	; 0x70
 800eaf6:	ab1d      	add	r3, sp, #116	; 0x74
 800eaf8:	9002      	str	r0, [sp, #8]
 800eafa:	9006      	str	r0, [sp, #24]
 800eafc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800eb00:	4809      	ldr	r0, [pc, #36]	; (800eb28 <siprintf+0x38>)
 800eb02:	9107      	str	r1, [sp, #28]
 800eb04:	9104      	str	r1, [sp, #16]
 800eb06:	4909      	ldr	r1, [pc, #36]	; (800eb2c <siprintf+0x3c>)
 800eb08:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb0c:	9105      	str	r1, [sp, #20]
 800eb0e:	6800      	ldr	r0, [r0, #0]
 800eb10:	9301      	str	r3, [sp, #4]
 800eb12:	a902      	add	r1, sp, #8
 800eb14:	f000 f868 	bl	800ebe8 <_svfiprintf_r>
 800eb18:	9b02      	ldr	r3, [sp, #8]
 800eb1a:	2200      	movs	r2, #0
 800eb1c:	701a      	strb	r2, [r3, #0]
 800eb1e:	b01c      	add	sp, #112	; 0x70
 800eb20:	f85d eb04 	ldr.w	lr, [sp], #4
 800eb24:	b003      	add	sp, #12
 800eb26:	4770      	bx	lr
 800eb28:	2400003c 	.word	0x2400003c
 800eb2c:	ffff0208 	.word	0xffff0208

0800eb30 <__ssputs_r>:
 800eb30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb34:	688e      	ldr	r6, [r1, #8]
 800eb36:	429e      	cmp	r6, r3
 800eb38:	4682      	mov	sl, r0
 800eb3a:	460c      	mov	r4, r1
 800eb3c:	4690      	mov	r8, r2
 800eb3e:	461f      	mov	r7, r3
 800eb40:	d838      	bhi.n	800ebb4 <__ssputs_r+0x84>
 800eb42:	898a      	ldrh	r2, [r1, #12]
 800eb44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800eb48:	d032      	beq.n	800ebb0 <__ssputs_r+0x80>
 800eb4a:	6825      	ldr	r5, [r4, #0]
 800eb4c:	6909      	ldr	r1, [r1, #16]
 800eb4e:	eba5 0901 	sub.w	r9, r5, r1
 800eb52:	6965      	ldr	r5, [r4, #20]
 800eb54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800eb58:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800eb5c:	3301      	adds	r3, #1
 800eb5e:	444b      	add	r3, r9
 800eb60:	106d      	asrs	r5, r5, #1
 800eb62:	429d      	cmp	r5, r3
 800eb64:	bf38      	it	cc
 800eb66:	461d      	movcc	r5, r3
 800eb68:	0553      	lsls	r3, r2, #21
 800eb6a:	d531      	bpl.n	800ebd0 <__ssputs_r+0xa0>
 800eb6c:	4629      	mov	r1, r5
 800eb6e:	f000 fb55 	bl	800f21c <_malloc_r>
 800eb72:	4606      	mov	r6, r0
 800eb74:	b950      	cbnz	r0, 800eb8c <__ssputs_r+0x5c>
 800eb76:	230c      	movs	r3, #12
 800eb78:	f8ca 3000 	str.w	r3, [sl]
 800eb7c:	89a3      	ldrh	r3, [r4, #12]
 800eb7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb82:	81a3      	strh	r3, [r4, #12]
 800eb84:	f04f 30ff 	mov.w	r0, #4294967295
 800eb88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb8c:	6921      	ldr	r1, [r4, #16]
 800eb8e:	464a      	mov	r2, r9
 800eb90:	f7ff ff98 	bl	800eac4 <memcpy>
 800eb94:	89a3      	ldrh	r3, [r4, #12]
 800eb96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800eb9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eb9e:	81a3      	strh	r3, [r4, #12]
 800eba0:	6126      	str	r6, [r4, #16]
 800eba2:	6165      	str	r5, [r4, #20]
 800eba4:	444e      	add	r6, r9
 800eba6:	eba5 0509 	sub.w	r5, r5, r9
 800ebaa:	6026      	str	r6, [r4, #0]
 800ebac:	60a5      	str	r5, [r4, #8]
 800ebae:	463e      	mov	r6, r7
 800ebb0:	42be      	cmp	r6, r7
 800ebb2:	d900      	bls.n	800ebb6 <__ssputs_r+0x86>
 800ebb4:	463e      	mov	r6, r7
 800ebb6:	6820      	ldr	r0, [r4, #0]
 800ebb8:	4632      	mov	r2, r6
 800ebba:	4641      	mov	r1, r8
 800ebbc:	f000 faa8 	bl	800f110 <memmove>
 800ebc0:	68a3      	ldr	r3, [r4, #8]
 800ebc2:	1b9b      	subs	r3, r3, r6
 800ebc4:	60a3      	str	r3, [r4, #8]
 800ebc6:	6823      	ldr	r3, [r4, #0]
 800ebc8:	4433      	add	r3, r6
 800ebca:	6023      	str	r3, [r4, #0]
 800ebcc:	2000      	movs	r0, #0
 800ebce:	e7db      	b.n	800eb88 <__ssputs_r+0x58>
 800ebd0:	462a      	mov	r2, r5
 800ebd2:	f000 fb97 	bl	800f304 <_realloc_r>
 800ebd6:	4606      	mov	r6, r0
 800ebd8:	2800      	cmp	r0, #0
 800ebda:	d1e1      	bne.n	800eba0 <__ssputs_r+0x70>
 800ebdc:	6921      	ldr	r1, [r4, #16]
 800ebde:	4650      	mov	r0, sl
 800ebe0:	f000 fab0 	bl	800f144 <_free_r>
 800ebe4:	e7c7      	b.n	800eb76 <__ssputs_r+0x46>
	...

0800ebe8 <_svfiprintf_r>:
 800ebe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebec:	4698      	mov	r8, r3
 800ebee:	898b      	ldrh	r3, [r1, #12]
 800ebf0:	061b      	lsls	r3, r3, #24
 800ebf2:	b09d      	sub	sp, #116	; 0x74
 800ebf4:	4607      	mov	r7, r0
 800ebf6:	460d      	mov	r5, r1
 800ebf8:	4614      	mov	r4, r2
 800ebfa:	d50e      	bpl.n	800ec1a <_svfiprintf_r+0x32>
 800ebfc:	690b      	ldr	r3, [r1, #16]
 800ebfe:	b963      	cbnz	r3, 800ec1a <_svfiprintf_r+0x32>
 800ec00:	2140      	movs	r1, #64	; 0x40
 800ec02:	f000 fb0b 	bl	800f21c <_malloc_r>
 800ec06:	6028      	str	r0, [r5, #0]
 800ec08:	6128      	str	r0, [r5, #16]
 800ec0a:	b920      	cbnz	r0, 800ec16 <_svfiprintf_r+0x2e>
 800ec0c:	230c      	movs	r3, #12
 800ec0e:	603b      	str	r3, [r7, #0]
 800ec10:	f04f 30ff 	mov.w	r0, #4294967295
 800ec14:	e0d1      	b.n	800edba <_svfiprintf_r+0x1d2>
 800ec16:	2340      	movs	r3, #64	; 0x40
 800ec18:	616b      	str	r3, [r5, #20]
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	9309      	str	r3, [sp, #36]	; 0x24
 800ec1e:	2320      	movs	r3, #32
 800ec20:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ec24:	f8cd 800c 	str.w	r8, [sp, #12]
 800ec28:	2330      	movs	r3, #48	; 0x30
 800ec2a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800edd4 <_svfiprintf_r+0x1ec>
 800ec2e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ec32:	f04f 0901 	mov.w	r9, #1
 800ec36:	4623      	mov	r3, r4
 800ec38:	469a      	mov	sl, r3
 800ec3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ec3e:	b10a      	cbz	r2, 800ec44 <_svfiprintf_r+0x5c>
 800ec40:	2a25      	cmp	r2, #37	; 0x25
 800ec42:	d1f9      	bne.n	800ec38 <_svfiprintf_r+0x50>
 800ec44:	ebba 0b04 	subs.w	fp, sl, r4
 800ec48:	d00b      	beq.n	800ec62 <_svfiprintf_r+0x7a>
 800ec4a:	465b      	mov	r3, fp
 800ec4c:	4622      	mov	r2, r4
 800ec4e:	4629      	mov	r1, r5
 800ec50:	4638      	mov	r0, r7
 800ec52:	f7ff ff6d 	bl	800eb30 <__ssputs_r>
 800ec56:	3001      	adds	r0, #1
 800ec58:	f000 80aa 	beq.w	800edb0 <_svfiprintf_r+0x1c8>
 800ec5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ec5e:	445a      	add	r2, fp
 800ec60:	9209      	str	r2, [sp, #36]	; 0x24
 800ec62:	f89a 3000 	ldrb.w	r3, [sl]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	f000 80a2 	beq.w	800edb0 <_svfiprintf_r+0x1c8>
 800ec6c:	2300      	movs	r3, #0
 800ec6e:	f04f 32ff 	mov.w	r2, #4294967295
 800ec72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ec76:	f10a 0a01 	add.w	sl, sl, #1
 800ec7a:	9304      	str	r3, [sp, #16]
 800ec7c:	9307      	str	r3, [sp, #28]
 800ec7e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ec82:	931a      	str	r3, [sp, #104]	; 0x68
 800ec84:	4654      	mov	r4, sl
 800ec86:	2205      	movs	r2, #5
 800ec88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec8c:	4851      	ldr	r0, [pc, #324]	; (800edd4 <_svfiprintf_r+0x1ec>)
 800ec8e:	f7f1 fb2f 	bl	80002f0 <memchr>
 800ec92:	9a04      	ldr	r2, [sp, #16]
 800ec94:	b9d8      	cbnz	r0, 800ecce <_svfiprintf_r+0xe6>
 800ec96:	06d0      	lsls	r0, r2, #27
 800ec98:	bf44      	itt	mi
 800ec9a:	2320      	movmi	r3, #32
 800ec9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eca0:	0711      	lsls	r1, r2, #28
 800eca2:	bf44      	itt	mi
 800eca4:	232b      	movmi	r3, #43	; 0x2b
 800eca6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ecaa:	f89a 3000 	ldrb.w	r3, [sl]
 800ecae:	2b2a      	cmp	r3, #42	; 0x2a
 800ecb0:	d015      	beq.n	800ecde <_svfiprintf_r+0xf6>
 800ecb2:	9a07      	ldr	r2, [sp, #28]
 800ecb4:	4654      	mov	r4, sl
 800ecb6:	2000      	movs	r0, #0
 800ecb8:	f04f 0c0a 	mov.w	ip, #10
 800ecbc:	4621      	mov	r1, r4
 800ecbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ecc2:	3b30      	subs	r3, #48	; 0x30
 800ecc4:	2b09      	cmp	r3, #9
 800ecc6:	d94e      	bls.n	800ed66 <_svfiprintf_r+0x17e>
 800ecc8:	b1b0      	cbz	r0, 800ecf8 <_svfiprintf_r+0x110>
 800ecca:	9207      	str	r2, [sp, #28]
 800eccc:	e014      	b.n	800ecf8 <_svfiprintf_r+0x110>
 800ecce:	eba0 0308 	sub.w	r3, r0, r8
 800ecd2:	fa09 f303 	lsl.w	r3, r9, r3
 800ecd6:	4313      	orrs	r3, r2
 800ecd8:	9304      	str	r3, [sp, #16]
 800ecda:	46a2      	mov	sl, r4
 800ecdc:	e7d2      	b.n	800ec84 <_svfiprintf_r+0x9c>
 800ecde:	9b03      	ldr	r3, [sp, #12]
 800ece0:	1d19      	adds	r1, r3, #4
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	9103      	str	r1, [sp, #12]
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	bfbb      	ittet	lt
 800ecea:	425b      	neglt	r3, r3
 800ecec:	f042 0202 	orrlt.w	r2, r2, #2
 800ecf0:	9307      	strge	r3, [sp, #28]
 800ecf2:	9307      	strlt	r3, [sp, #28]
 800ecf4:	bfb8      	it	lt
 800ecf6:	9204      	strlt	r2, [sp, #16]
 800ecf8:	7823      	ldrb	r3, [r4, #0]
 800ecfa:	2b2e      	cmp	r3, #46	; 0x2e
 800ecfc:	d10c      	bne.n	800ed18 <_svfiprintf_r+0x130>
 800ecfe:	7863      	ldrb	r3, [r4, #1]
 800ed00:	2b2a      	cmp	r3, #42	; 0x2a
 800ed02:	d135      	bne.n	800ed70 <_svfiprintf_r+0x188>
 800ed04:	9b03      	ldr	r3, [sp, #12]
 800ed06:	1d1a      	adds	r2, r3, #4
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	9203      	str	r2, [sp, #12]
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	bfb8      	it	lt
 800ed10:	f04f 33ff 	movlt.w	r3, #4294967295
 800ed14:	3402      	adds	r4, #2
 800ed16:	9305      	str	r3, [sp, #20]
 800ed18:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ede4 <_svfiprintf_r+0x1fc>
 800ed1c:	7821      	ldrb	r1, [r4, #0]
 800ed1e:	2203      	movs	r2, #3
 800ed20:	4650      	mov	r0, sl
 800ed22:	f7f1 fae5 	bl	80002f0 <memchr>
 800ed26:	b140      	cbz	r0, 800ed3a <_svfiprintf_r+0x152>
 800ed28:	2340      	movs	r3, #64	; 0x40
 800ed2a:	eba0 000a 	sub.w	r0, r0, sl
 800ed2e:	fa03 f000 	lsl.w	r0, r3, r0
 800ed32:	9b04      	ldr	r3, [sp, #16]
 800ed34:	4303      	orrs	r3, r0
 800ed36:	3401      	adds	r4, #1
 800ed38:	9304      	str	r3, [sp, #16]
 800ed3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed3e:	4826      	ldr	r0, [pc, #152]	; (800edd8 <_svfiprintf_r+0x1f0>)
 800ed40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ed44:	2206      	movs	r2, #6
 800ed46:	f7f1 fad3 	bl	80002f0 <memchr>
 800ed4a:	2800      	cmp	r0, #0
 800ed4c:	d038      	beq.n	800edc0 <_svfiprintf_r+0x1d8>
 800ed4e:	4b23      	ldr	r3, [pc, #140]	; (800eddc <_svfiprintf_r+0x1f4>)
 800ed50:	bb1b      	cbnz	r3, 800ed9a <_svfiprintf_r+0x1b2>
 800ed52:	9b03      	ldr	r3, [sp, #12]
 800ed54:	3307      	adds	r3, #7
 800ed56:	f023 0307 	bic.w	r3, r3, #7
 800ed5a:	3308      	adds	r3, #8
 800ed5c:	9303      	str	r3, [sp, #12]
 800ed5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed60:	4433      	add	r3, r6
 800ed62:	9309      	str	r3, [sp, #36]	; 0x24
 800ed64:	e767      	b.n	800ec36 <_svfiprintf_r+0x4e>
 800ed66:	fb0c 3202 	mla	r2, ip, r2, r3
 800ed6a:	460c      	mov	r4, r1
 800ed6c:	2001      	movs	r0, #1
 800ed6e:	e7a5      	b.n	800ecbc <_svfiprintf_r+0xd4>
 800ed70:	2300      	movs	r3, #0
 800ed72:	3401      	adds	r4, #1
 800ed74:	9305      	str	r3, [sp, #20]
 800ed76:	4619      	mov	r1, r3
 800ed78:	f04f 0c0a 	mov.w	ip, #10
 800ed7c:	4620      	mov	r0, r4
 800ed7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ed82:	3a30      	subs	r2, #48	; 0x30
 800ed84:	2a09      	cmp	r2, #9
 800ed86:	d903      	bls.n	800ed90 <_svfiprintf_r+0x1a8>
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d0c5      	beq.n	800ed18 <_svfiprintf_r+0x130>
 800ed8c:	9105      	str	r1, [sp, #20]
 800ed8e:	e7c3      	b.n	800ed18 <_svfiprintf_r+0x130>
 800ed90:	fb0c 2101 	mla	r1, ip, r1, r2
 800ed94:	4604      	mov	r4, r0
 800ed96:	2301      	movs	r3, #1
 800ed98:	e7f0      	b.n	800ed7c <_svfiprintf_r+0x194>
 800ed9a:	ab03      	add	r3, sp, #12
 800ed9c:	9300      	str	r3, [sp, #0]
 800ed9e:	462a      	mov	r2, r5
 800eda0:	4b0f      	ldr	r3, [pc, #60]	; (800ede0 <_svfiprintf_r+0x1f8>)
 800eda2:	a904      	add	r1, sp, #16
 800eda4:	4638      	mov	r0, r7
 800eda6:	f3af 8000 	nop.w
 800edaa:	1c42      	adds	r2, r0, #1
 800edac:	4606      	mov	r6, r0
 800edae:	d1d6      	bne.n	800ed5e <_svfiprintf_r+0x176>
 800edb0:	89ab      	ldrh	r3, [r5, #12]
 800edb2:	065b      	lsls	r3, r3, #25
 800edb4:	f53f af2c 	bmi.w	800ec10 <_svfiprintf_r+0x28>
 800edb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800edba:	b01d      	add	sp, #116	; 0x74
 800edbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edc0:	ab03      	add	r3, sp, #12
 800edc2:	9300      	str	r3, [sp, #0]
 800edc4:	462a      	mov	r2, r5
 800edc6:	4b06      	ldr	r3, [pc, #24]	; (800ede0 <_svfiprintf_r+0x1f8>)
 800edc8:	a904      	add	r1, sp, #16
 800edca:	4638      	mov	r0, r7
 800edcc:	f000 f87a 	bl	800eec4 <_printf_i>
 800edd0:	e7eb      	b.n	800edaa <_svfiprintf_r+0x1c2>
 800edd2:	bf00      	nop
 800edd4:	0800f558 	.word	0x0800f558
 800edd8:	0800f562 	.word	0x0800f562
 800eddc:	00000000 	.word	0x00000000
 800ede0:	0800eb31 	.word	0x0800eb31
 800ede4:	0800f55e 	.word	0x0800f55e

0800ede8 <_printf_common>:
 800ede8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800edec:	4616      	mov	r6, r2
 800edee:	4699      	mov	r9, r3
 800edf0:	688a      	ldr	r2, [r1, #8]
 800edf2:	690b      	ldr	r3, [r1, #16]
 800edf4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800edf8:	4293      	cmp	r3, r2
 800edfa:	bfb8      	it	lt
 800edfc:	4613      	movlt	r3, r2
 800edfe:	6033      	str	r3, [r6, #0]
 800ee00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ee04:	4607      	mov	r7, r0
 800ee06:	460c      	mov	r4, r1
 800ee08:	b10a      	cbz	r2, 800ee0e <_printf_common+0x26>
 800ee0a:	3301      	adds	r3, #1
 800ee0c:	6033      	str	r3, [r6, #0]
 800ee0e:	6823      	ldr	r3, [r4, #0]
 800ee10:	0699      	lsls	r1, r3, #26
 800ee12:	bf42      	ittt	mi
 800ee14:	6833      	ldrmi	r3, [r6, #0]
 800ee16:	3302      	addmi	r3, #2
 800ee18:	6033      	strmi	r3, [r6, #0]
 800ee1a:	6825      	ldr	r5, [r4, #0]
 800ee1c:	f015 0506 	ands.w	r5, r5, #6
 800ee20:	d106      	bne.n	800ee30 <_printf_common+0x48>
 800ee22:	f104 0a19 	add.w	sl, r4, #25
 800ee26:	68e3      	ldr	r3, [r4, #12]
 800ee28:	6832      	ldr	r2, [r6, #0]
 800ee2a:	1a9b      	subs	r3, r3, r2
 800ee2c:	42ab      	cmp	r3, r5
 800ee2e:	dc26      	bgt.n	800ee7e <_printf_common+0x96>
 800ee30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ee34:	1e13      	subs	r3, r2, #0
 800ee36:	6822      	ldr	r2, [r4, #0]
 800ee38:	bf18      	it	ne
 800ee3a:	2301      	movne	r3, #1
 800ee3c:	0692      	lsls	r2, r2, #26
 800ee3e:	d42b      	bmi.n	800ee98 <_printf_common+0xb0>
 800ee40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ee44:	4649      	mov	r1, r9
 800ee46:	4638      	mov	r0, r7
 800ee48:	47c0      	blx	r8
 800ee4a:	3001      	adds	r0, #1
 800ee4c:	d01e      	beq.n	800ee8c <_printf_common+0xa4>
 800ee4e:	6823      	ldr	r3, [r4, #0]
 800ee50:	68e5      	ldr	r5, [r4, #12]
 800ee52:	6832      	ldr	r2, [r6, #0]
 800ee54:	f003 0306 	and.w	r3, r3, #6
 800ee58:	2b04      	cmp	r3, #4
 800ee5a:	bf08      	it	eq
 800ee5c:	1aad      	subeq	r5, r5, r2
 800ee5e:	68a3      	ldr	r3, [r4, #8]
 800ee60:	6922      	ldr	r2, [r4, #16]
 800ee62:	bf0c      	ite	eq
 800ee64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ee68:	2500      	movne	r5, #0
 800ee6a:	4293      	cmp	r3, r2
 800ee6c:	bfc4      	itt	gt
 800ee6e:	1a9b      	subgt	r3, r3, r2
 800ee70:	18ed      	addgt	r5, r5, r3
 800ee72:	2600      	movs	r6, #0
 800ee74:	341a      	adds	r4, #26
 800ee76:	42b5      	cmp	r5, r6
 800ee78:	d11a      	bne.n	800eeb0 <_printf_common+0xc8>
 800ee7a:	2000      	movs	r0, #0
 800ee7c:	e008      	b.n	800ee90 <_printf_common+0xa8>
 800ee7e:	2301      	movs	r3, #1
 800ee80:	4652      	mov	r2, sl
 800ee82:	4649      	mov	r1, r9
 800ee84:	4638      	mov	r0, r7
 800ee86:	47c0      	blx	r8
 800ee88:	3001      	adds	r0, #1
 800ee8a:	d103      	bne.n	800ee94 <_printf_common+0xac>
 800ee8c:	f04f 30ff 	mov.w	r0, #4294967295
 800ee90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee94:	3501      	adds	r5, #1
 800ee96:	e7c6      	b.n	800ee26 <_printf_common+0x3e>
 800ee98:	18e1      	adds	r1, r4, r3
 800ee9a:	1c5a      	adds	r2, r3, #1
 800ee9c:	2030      	movs	r0, #48	; 0x30
 800ee9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800eea2:	4422      	add	r2, r4
 800eea4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800eea8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800eeac:	3302      	adds	r3, #2
 800eeae:	e7c7      	b.n	800ee40 <_printf_common+0x58>
 800eeb0:	2301      	movs	r3, #1
 800eeb2:	4622      	mov	r2, r4
 800eeb4:	4649      	mov	r1, r9
 800eeb6:	4638      	mov	r0, r7
 800eeb8:	47c0      	blx	r8
 800eeba:	3001      	adds	r0, #1
 800eebc:	d0e6      	beq.n	800ee8c <_printf_common+0xa4>
 800eebe:	3601      	adds	r6, #1
 800eec0:	e7d9      	b.n	800ee76 <_printf_common+0x8e>
	...

0800eec4 <_printf_i>:
 800eec4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eec8:	7e0f      	ldrb	r7, [r1, #24]
 800eeca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800eecc:	2f78      	cmp	r7, #120	; 0x78
 800eece:	4691      	mov	r9, r2
 800eed0:	4680      	mov	r8, r0
 800eed2:	460c      	mov	r4, r1
 800eed4:	469a      	mov	sl, r3
 800eed6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800eeda:	d807      	bhi.n	800eeec <_printf_i+0x28>
 800eedc:	2f62      	cmp	r7, #98	; 0x62
 800eede:	d80a      	bhi.n	800eef6 <_printf_i+0x32>
 800eee0:	2f00      	cmp	r7, #0
 800eee2:	f000 80d8 	beq.w	800f096 <_printf_i+0x1d2>
 800eee6:	2f58      	cmp	r7, #88	; 0x58
 800eee8:	f000 80a3 	beq.w	800f032 <_printf_i+0x16e>
 800eeec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800eef0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800eef4:	e03a      	b.n	800ef6c <_printf_i+0xa8>
 800eef6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800eefa:	2b15      	cmp	r3, #21
 800eefc:	d8f6      	bhi.n	800eeec <_printf_i+0x28>
 800eefe:	a101      	add	r1, pc, #4	; (adr r1, 800ef04 <_printf_i+0x40>)
 800ef00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ef04:	0800ef5d 	.word	0x0800ef5d
 800ef08:	0800ef71 	.word	0x0800ef71
 800ef0c:	0800eeed 	.word	0x0800eeed
 800ef10:	0800eeed 	.word	0x0800eeed
 800ef14:	0800eeed 	.word	0x0800eeed
 800ef18:	0800eeed 	.word	0x0800eeed
 800ef1c:	0800ef71 	.word	0x0800ef71
 800ef20:	0800eeed 	.word	0x0800eeed
 800ef24:	0800eeed 	.word	0x0800eeed
 800ef28:	0800eeed 	.word	0x0800eeed
 800ef2c:	0800eeed 	.word	0x0800eeed
 800ef30:	0800f07d 	.word	0x0800f07d
 800ef34:	0800efa1 	.word	0x0800efa1
 800ef38:	0800f05f 	.word	0x0800f05f
 800ef3c:	0800eeed 	.word	0x0800eeed
 800ef40:	0800eeed 	.word	0x0800eeed
 800ef44:	0800f09f 	.word	0x0800f09f
 800ef48:	0800eeed 	.word	0x0800eeed
 800ef4c:	0800efa1 	.word	0x0800efa1
 800ef50:	0800eeed 	.word	0x0800eeed
 800ef54:	0800eeed 	.word	0x0800eeed
 800ef58:	0800f067 	.word	0x0800f067
 800ef5c:	682b      	ldr	r3, [r5, #0]
 800ef5e:	1d1a      	adds	r2, r3, #4
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	602a      	str	r2, [r5, #0]
 800ef64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ef68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ef6c:	2301      	movs	r3, #1
 800ef6e:	e0a3      	b.n	800f0b8 <_printf_i+0x1f4>
 800ef70:	6820      	ldr	r0, [r4, #0]
 800ef72:	6829      	ldr	r1, [r5, #0]
 800ef74:	0606      	lsls	r6, r0, #24
 800ef76:	f101 0304 	add.w	r3, r1, #4
 800ef7a:	d50a      	bpl.n	800ef92 <_printf_i+0xce>
 800ef7c:	680e      	ldr	r6, [r1, #0]
 800ef7e:	602b      	str	r3, [r5, #0]
 800ef80:	2e00      	cmp	r6, #0
 800ef82:	da03      	bge.n	800ef8c <_printf_i+0xc8>
 800ef84:	232d      	movs	r3, #45	; 0x2d
 800ef86:	4276      	negs	r6, r6
 800ef88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ef8c:	485e      	ldr	r0, [pc, #376]	; (800f108 <_printf_i+0x244>)
 800ef8e:	230a      	movs	r3, #10
 800ef90:	e019      	b.n	800efc6 <_printf_i+0x102>
 800ef92:	680e      	ldr	r6, [r1, #0]
 800ef94:	602b      	str	r3, [r5, #0]
 800ef96:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ef9a:	bf18      	it	ne
 800ef9c:	b236      	sxthne	r6, r6
 800ef9e:	e7ef      	b.n	800ef80 <_printf_i+0xbc>
 800efa0:	682b      	ldr	r3, [r5, #0]
 800efa2:	6820      	ldr	r0, [r4, #0]
 800efa4:	1d19      	adds	r1, r3, #4
 800efa6:	6029      	str	r1, [r5, #0]
 800efa8:	0601      	lsls	r1, r0, #24
 800efaa:	d501      	bpl.n	800efb0 <_printf_i+0xec>
 800efac:	681e      	ldr	r6, [r3, #0]
 800efae:	e002      	b.n	800efb6 <_printf_i+0xf2>
 800efb0:	0646      	lsls	r6, r0, #25
 800efb2:	d5fb      	bpl.n	800efac <_printf_i+0xe8>
 800efb4:	881e      	ldrh	r6, [r3, #0]
 800efb6:	4854      	ldr	r0, [pc, #336]	; (800f108 <_printf_i+0x244>)
 800efb8:	2f6f      	cmp	r7, #111	; 0x6f
 800efba:	bf0c      	ite	eq
 800efbc:	2308      	moveq	r3, #8
 800efbe:	230a      	movne	r3, #10
 800efc0:	2100      	movs	r1, #0
 800efc2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800efc6:	6865      	ldr	r5, [r4, #4]
 800efc8:	60a5      	str	r5, [r4, #8]
 800efca:	2d00      	cmp	r5, #0
 800efcc:	bfa2      	ittt	ge
 800efce:	6821      	ldrge	r1, [r4, #0]
 800efd0:	f021 0104 	bicge.w	r1, r1, #4
 800efd4:	6021      	strge	r1, [r4, #0]
 800efd6:	b90e      	cbnz	r6, 800efdc <_printf_i+0x118>
 800efd8:	2d00      	cmp	r5, #0
 800efda:	d04d      	beq.n	800f078 <_printf_i+0x1b4>
 800efdc:	4615      	mov	r5, r2
 800efde:	fbb6 f1f3 	udiv	r1, r6, r3
 800efe2:	fb03 6711 	mls	r7, r3, r1, r6
 800efe6:	5dc7      	ldrb	r7, [r0, r7]
 800efe8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800efec:	4637      	mov	r7, r6
 800efee:	42bb      	cmp	r3, r7
 800eff0:	460e      	mov	r6, r1
 800eff2:	d9f4      	bls.n	800efde <_printf_i+0x11a>
 800eff4:	2b08      	cmp	r3, #8
 800eff6:	d10b      	bne.n	800f010 <_printf_i+0x14c>
 800eff8:	6823      	ldr	r3, [r4, #0]
 800effa:	07de      	lsls	r6, r3, #31
 800effc:	d508      	bpl.n	800f010 <_printf_i+0x14c>
 800effe:	6923      	ldr	r3, [r4, #16]
 800f000:	6861      	ldr	r1, [r4, #4]
 800f002:	4299      	cmp	r1, r3
 800f004:	bfde      	ittt	le
 800f006:	2330      	movle	r3, #48	; 0x30
 800f008:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f00c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f010:	1b52      	subs	r2, r2, r5
 800f012:	6122      	str	r2, [r4, #16]
 800f014:	f8cd a000 	str.w	sl, [sp]
 800f018:	464b      	mov	r3, r9
 800f01a:	aa03      	add	r2, sp, #12
 800f01c:	4621      	mov	r1, r4
 800f01e:	4640      	mov	r0, r8
 800f020:	f7ff fee2 	bl	800ede8 <_printf_common>
 800f024:	3001      	adds	r0, #1
 800f026:	d14c      	bne.n	800f0c2 <_printf_i+0x1fe>
 800f028:	f04f 30ff 	mov.w	r0, #4294967295
 800f02c:	b004      	add	sp, #16
 800f02e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f032:	4835      	ldr	r0, [pc, #212]	; (800f108 <_printf_i+0x244>)
 800f034:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f038:	6829      	ldr	r1, [r5, #0]
 800f03a:	6823      	ldr	r3, [r4, #0]
 800f03c:	f851 6b04 	ldr.w	r6, [r1], #4
 800f040:	6029      	str	r1, [r5, #0]
 800f042:	061d      	lsls	r5, r3, #24
 800f044:	d514      	bpl.n	800f070 <_printf_i+0x1ac>
 800f046:	07df      	lsls	r7, r3, #31
 800f048:	bf44      	itt	mi
 800f04a:	f043 0320 	orrmi.w	r3, r3, #32
 800f04e:	6023      	strmi	r3, [r4, #0]
 800f050:	b91e      	cbnz	r6, 800f05a <_printf_i+0x196>
 800f052:	6823      	ldr	r3, [r4, #0]
 800f054:	f023 0320 	bic.w	r3, r3, #32
 800f058:	6023      	str	r3, [r4, #0]
 800f05a:	2310      	movs	r3, #16
 800f05c:	e7b0      	b.n	800efc0 <_printf_i+0xfc>
 800f05e:	6823      	ldr	r3, [r4, #0]
 800f060:	f043 0320 	orr.w	r3, r3, #32
 800f064:	6023      	str	r3, [r4, #0]
 800f066:	2378      	movs	r3, #120	; 0x78
 800f068:	4828      	ldr	r0, [pc, #160]	; (800f10c <_printf_i+0x248>)
 800f06a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f06e:	e7e3      	b.n	800f038 <_printf_i+0x174>
 800f070:	0659      	lsls	r1, r3, #25
 800f072:	bf48      	it	mi
 800f074:	b2b6      	uxthmi	r6, r6
 800f076:	e7e6      	b.n	800f046 <_printf_i+0x182>
 800f078:	4615      	mov	r5, r2
 800f07a:	e7bb      	b.n	800eff4 <_printf_i+0x130>
 800f07c:	682b      	ldr	r3, [r5, #0]
 800f07e:	6826      	ldr	r6, [r4, #0]
 800f080:	6961      	ldr	r1, [r4, #20]
 800f082:	1d18      	adds	r0, r3, #4
 800f084:	6028      	str	r0, [r5, #0]
 800f086:	0635      	lsls	r5, r6, #24
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	d501      	bpl.n	800f090 <_printf_i+0x1cc>
 800f08c:	6019      	str	r1, [r3, #0]
 800f08e:	e002      	b.n	800f096 <_printf_i+0x1d2>
 800f090:	0670      	lsls	r0, r6, #25
 800f092:	d5fb      	bpl.n	800f08c <_printf_i+0x1c8>
 800f094:	8019      	strh	r1, [r3, #0]
 800f096:	2300      	movs	r3, #0
 800f098:	6123      	str	r3, [r4, #16]
 800f09a:	4615      	mov	r5, r2
 800f09c:	e7ba      	b.n	800f014 <_printf_i+0x150>
 800f09e:	682b      	ldr	r3, [r5, #0]
 800f0a0:	1d1a      	adds	r2, r3, #4
 800f0a2:	602a      	str	r2, [r5, #0]
 800f0a4:	681d      	ldr	r5, [r3, #0]
 800f0a6:	6862      	ldr	r2, [r4, #4]
 800f0a8:	2100      	movs	r1, #0
 800f0aa:	4628      	mov	r0, r5
 800f0ac:	f7f1 f920 	bl	80002f0 <memchr>
 800f0b0:	b108      	cbz	r0, 800f0b6 <_printf_i+0x1f2>
 800f0b2:	1b40      	subs	r0, r0, r5
 800f0b4:	6060      	str	r0, [r4, #4]
 800f0b6:	6863      	ldr	r3, [r4, #4]
 800f0b8:	6123      	str	r3, [r4, #16]
 800f0ba:	2300      	movs	r3, #0
 800f0bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f0c0:	e7a8      	b.n	800f014 <_printf_i+0x150>
 800f0c2:	6923      	ldr	r3, [r4, #16]
 800f0c4:	462a      	mov	r2, r5
 800f0c6:	4649      	mov	r1, r9
 800f0c8:	4640      	mov	r0, r8
 800f0ca:	47d0      	blx	sl
 800f0cc:	3001      	adds	r0, #1
 800f0ce:	d0ab      	beq.n	800f028 <_printf_i+0x164>
 800f0d0:	6823      	ldr	r3, [r4, #0]
 800f0d2:	079b      	lsls	r3, r3, #30
 800f0d4:	d413      	bmi.n	800f0fe <_printf_i+0x23a>
 800f0d6:	68e0      	ldr	r0, [r4, #12]
 800f0d8:	9b03      	ldr	r3, [sp, #12]
 800f0da:	4298      	cmp	r0, r3
 800f0dc:	bfb8      	it	lt
 800f0de:	4618      	movlt	r0, r3
 800f0e0:	e7a4      	b.n	800f02c <_printf_i+0x168>
 800f0e2:	2301      	movs	r3, #1
 800f0e4:	4632      	mov	r2, r6
 800f0e6:	4649      	mov	r1, r9
 800f0e8:	4640      	mov	r0, r8
 800f0ea:	47d0      	blx	sl
 800f0ec:	3001      	adds	r0, #1
 800f0ee:	d09b      	beq.n	800f028 <_printf_i+0x164>
 800f0f0:	3501      	adds	r5, #1
 800f0f2:	68e3      	ldr	r3, [r4, #12]
 800f0f4:	9903      	ldr	r1, [sp, #12]
 800f0f6:	1a5b      	subs	r3, r3, r1
 800f0f8:	42ab      	cmp	r3, r5
 800f0fa:	dcf2      	bgt.n	800f0e2 <_printf_i+0x21e>
 800f0fc:	e7eb      	b.n	800f0d6 <_printf_i+0x212>
 800f0fe:	2500      	movs	r5, #0
 800f100:	f104 0619 	add.w	r6, r4, #25
 800f104:	e7f5      	b.n	800f0f2 <_printf_i+0x22e>
 800f106:	bf00      	nop
 800f108:	0800f569 	.word	0x0800f569
 800f10c:	0800f57a 	.word	0x0800f57a

0800f110 <memmove>:
 800f110:	4288      	cmp	r0, r1
 800f112:	b510      	push	{r4, lr}
 800f114:	eb01 0402 	add.w	r4, r1, r2
 800f118:	d902      	bls.n	800f120 <memmove+0x10>
 800f11a:	4284      	cmp	r4, r0
 800f11c:	4623      	mov	r3, r4
 800f11e:	d807      	bhi.n	800f130 <memmove+0x20>
 800f120:	1e43      	subs	r3, r0, #1
 800f122:	42a1      	cmp	r1, r4
 800f124:	d008      	beq.n	800f138 <memmove+0x28>
 800f126:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f12a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f12e:	e7f8      	b.n	800f122 <memmove+0x12>
 800f130:	4402      	add	r2, r0
 800f132:	4601      	mov	r1, r0
 800f134:	428a      	cmp	r2, r1
 800f136:	d100      	bne.n	800f13a <memmove+0x2a>
 800f138:	bd10      	pop	{r4, pc}
 800f13a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f13e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f142:	e7f7      	b.n	800f134 <memmove+0x24>

0800f144 <_free_r>:
 800f144:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f146:	2900      	cmp	r1, #0
 800f148:	d044      	beq.n	800f1d4 <_free_r+0x90>
 800f14a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f14e:	9001      	str	r0, [sp, #4]
 800f150:	2b00      	cmp	r3, #0
 800f152:	f1a1 0404 	sub.w	r4, r1, #4
 800f156:	bfb8      	it	lt
 800f158:	18e4      	addlt	r4, r4, r3
 800f15a:	f000 f913 	bl	800f384 <__malloc_lock>
 800f15e:	4a1e      	ldr	r2, [pc, #120]	; (800f1d8 <_free_r+0x94>)
 800f160:	9801      	ldr	r0, [sp, #4]
 800f162:	6813      	ldr	r3, [r2, #0]
 800f164:	b933      	cbnz	r3, 800f174 <_free_r+0x30>
 800f166:	6063      	str	r3, [r4, #4]
 800f168:	6014      	str	r4, [r2, #0]
 800f16a:	b003      	add	sp, #12
 800f16c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f170:	f000 b90e 	b.w	800f390 <__malloc_unlock>
 800f174:	42a3      	cmp	r3, r4
 800f176:	d908      	bls.n	800f18a <_free_r+0x46>
 800f178:	6825      	ldr	r5, [r4, #0]
 800f17a:	1961      	adds	r1, r4, r5
 800f17c:	428b      	cmp	r3, r1
 800f17e:	bf01      	itttt	eq
 800f180:	6819      	ldreq	r1, [r3, #0]
 800f182:	685b      	ldreq	r3, [r3, #4]
 800f184:	1949      	addeq	r1, r1, r5
 800f186:	6021      	streq	r1, [r4, #0]
 800f188:	e7ed      	b.n	800f166 <_free_r+0x22>
 800f18a:	461a      	mov	r2, r3
 800f18c:	685b      	ldr	r3, [r3, #4]
 800f18e:	b10b      	cbz	r3, 800f194 <_free_r+0x50>
 800f190:	42a3      	cmp	r3, r4
 800f192:	d9fa      	bls.n	800f18a <_free_r+0x46>
 800f194:	6811      	ldr	r1, [r2, #0]
 800f196:	1855      	adds	r5, r2, r1
 800f198:	42a5      	cmp	r5, r4
 800f19a:	d10b      	bne.n	800f1b4 <_free_r+0x70>
 800f19c:	6824      	ldr	r4, [r4, #0]
 800f19e:	4421      	add	r1, r4
 800f1a0:	1854      	adds	r4, r2, r1
 800f1a2:	42a3      	cmp	r3, r4
 800f1a4:	6011      	str	r1, [r2, #0]
 800f1a6:	d1e0      	bne.n	800f16a <_free_r+0x26>
 800f1a8:	681c      	ldr	r4, [r3, #0]
 800f1aa:	685b      	ldr	r3, [r3, #4]
 800f1ac:	6053      	str	r3, [r2, #4]
 800f1ae:	4421      	add	r1, r4
 800f1b0:	6011      	str	r1, [r2, #0]
 800f1b2:	e7da      	b.n	800f16a <_free_r+0x26>
 800f1b4:	d902      	bls.n	800f1bc <_free_r+0x78>
 800f1b6:	230c      	movs	r3, #12
 800f1b8:	6003      	str	r3, [r0, #0]
 800f1ba:	e7d6      	b.n	800f16a <_free_r+0x26>
 800f1bc:	6825      	ldr	r5, [r4, #0]
 800f1be:	1961      	adds	r1, r4, r5
 800f1c0:	428b      	cmp	r3, r1
 800f1c2:	bf04      	itt	eq
 800f1c4:	6819      	ldreq	r1, [r3, #0]
 800f1c6:	685b      	ldreq	r3, [r3, #4]
 800f1c8:	6063      	str	r3, [r4, #4]
 800f1ca:	bf04      	itt	eq
 800f1cc:	1949      	addeq	r1, r1, r5
 800f1ce:	6021      	streq	r1, [r4, #0]
 800f1d0:	6054      	str	r4, [r2, #4]
 800f1d2:	e7ca      	b.n	800f16a <_free_r+0x26>
 800f1d4:	b003      	add	sp, #12
 800f1d6:	bd30      	pop	{r4, r5, pc}
 800f1d8:	24000dd0 	.word	0x24000dd0

0800f1dc <sbrk_aligned>:
 800f1dc:	b570      	push	{r4, r5, r6, lr}
 800f1de:	4e0e      	ldr	r6, [pc, #56]	; (800f218 <sbrk_aligned+0x3c>)
 800f1e0:	460c      	mov	r4, r1
 800f1e2:	6831      	ldr	r1, [r6, #0]
 800f1e4:	4605      	mov	r5, r0
 800f1e6:	b911      	cbnz	r1, 800f1ee <sbrk_aligned+0x12>
 800f1e8:	f000 f8bc 	bl	800f364 <_sbrk_r>
 800f1ec:	6030      	str	r0, [r6, #0]
 800f1ee:	4621      	mov	r1, r4
 800f1f0:	4628      	mov	r0, r5
 800f1f2:	f000 f8b7 	bl	800f364 <_sbrk_r>
 800f1f6:	1c43      	adds	r3, r0, #1
 800f1f8:	d00a      	beq.n	800f210 <sbrk_aligned+0x34>
 800f1fa:	1cc4      	adds	r4, r0, #3
 800f1fc:	f024 0403 	bic.w	r4, r4, #3
 800f200:	42a0      	cmp	r0, r4
 800f202:	d007      	beq.n	800f214 <sbrk_aligned+0x38>
 800f204:	1a21      	subs	r1, r4, r0
 800f206:	4628      	mov	r0, r5
 800f208:	f000 f8ac 	bl	800f364 <_sbrk_r>
 800f20c:	3001      	adds	r0, #1
 800f20e:	d101      	bne.n	800f214 <sbrk_aligned+0x38>
 800f210:	f04f 34ff 	mov.w	r4, #4294967295
 800f214:	4620      	mov	r0, r4
 800f216:	bd70      	pop	{r4, r5, r6, pc}
 800f218:	24000dd4 	.word	0x24000dd4

0800f21c <_malloc_r>:
 800f21c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f220:	1ccd      	adds	r5, r1, #3
 800f222:	f025 0503 	bic.w	r5, r5, #3
 800f226:	3508      	adds	r5, #8
 800f228:	2d0c      	cmp	r5, #12
 800f22a:	bf38      	it	cc
 800f22c:	250c      	movcc	r5, #12
 800f22e:	2d00      	cmp	r5, #0
 800f230:	4607      	mov	r7, r0
 800f232:	db01      	blt.n	800f238 <_malloc_r+0x1c>
 800f234:	42a9      	cmp	r1, r5
 800f236:	d905      	bls.n	800f244 <_malloc_r+0x28>
 800f238:	230c      	movs	r3, #12
 800f23a:	603b      	str	r3, [r7, #0]
 800f23c:	2600      	movs	r6, #0
 800f23e:	4630      	mov	r0, r6
 800f240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f244:	4e2e      	ldr	r6, [pc, #184]	; (800f300 <_malloc_r+0xe4>)
 800f246:	f000 f89d 	bl	800f384 <__malloc_lock>
 800f24a:	6833      	ldr	r3, [r6, #0]
 800f24c:	461c      	mov	r4, r3
 800f24e:	bb34      	cbnz	r4, 800f29e <_malloc_r+0x82>
 800f250:	4629      	mov	r1, r5
 800f252:	4638      	mov	r0, r7
 800f254:	f7ff ffc2 	bl	800f1dc <sbrk_aligned>
 800f258:	1c43      	adds	r3, r0, #1
 800f25a:	4604      	mov	r4, r0
 800f25c:	d14d      	bne.n	800f2fa <_malloc_r+0xde>
 800f25e:	6834      	ldr	r4, [r6, #0]
 800f260:	4626      	mov	r6, r4
 800f262:	2e00      	cmp	r6, #0
 800f264:	d140      	bne.n	800f2e8 <_malloc_r+0xcc>
 800f266:	6823      	ldr	r3, [r4, #0]
 800f268:	4631      	mov	r1, r6
 800f26a:	4638      	mov	r0, r7
 800f26c:	eb04 0803 	add.w	r8, r4, r3
 800f270:	f000 f878 	bl	800f364 <_sbrk_r>
 800f274:	4580      	cmp	r8, r0
 800f276:	d13a      	bne.n	800f2ee <_malloc_r+0xd2>
 800f278:	6821      	ldr	r1, [r4, #0]
 800f27a:	3503      	adds	r5, #3
 800f27c:	1a6d      	subs	r5, r5, r1
 800f27e:	f025 0503 	bic.w	r5, r5, #3
 800f282:	3508      	adds	r5, #8
 800f284:	2d0c      	cmp	r5, #12
 800f286:	bf38      	it	cc
 800f288:	250c      	movcc	r5, #12
 800f28a:	4629      	mov	r1, r5
 800f28c:	4638      	mov	r0, r7
 800f28e:	f7ff ffa5 	bl	800f1dc <sbrk_aligned>
 800f292:	3001      	adds	r0, #1
 800f294:	d02b      	beq.n	800f2ee <_malloc_r+0xd2>
 800f296:	6823      	ldr	r3, [r4, #0]
 800f298:	442b      	add	r3, r5
 800f29a:	6023      	str	r3, [r4, #0]
 800f29c:	e00e      	b.n	800f2bc <_malloc_r+0xa0>
 800f29e:	6822      	ldr	r2, [r4, #0]
 800f2a0:	1b52      	subs	r2, r2, r5
 800f2a2:	d41e      	bmi.n	800f2e2 <_malloc_r+0xc6>
 800f2a4:	2a0b      	cmp	r2, #11
 800f2a6:	d916      	bls.n	800f2d6 <_malloc_r+0xba>
 800f2a8:	1961      	adds	r1, r4, r5
 800f2aa:	42a3      	cmp	r3, r4
 800f2ac:	6025      	str	r5, [r4, #0]
 800f2ae:	bf18      	it	ne
 800f2b0:	6059      	strne	r1, [r3, #4]
 800f2b2:	6863      	ldr	r3, [r4, #4]
 800f2b4:	bf08      	it	eq
 800f2b6:	6031      	streq	r1, [r6, #0]
 800f2b8:	5162      	str	r2, [r4, r5]
 800f2ba:	604b      	str	r3, [r1, #4]
 800f2bc:	4638      	mov	r0, r7
 800f2be:	f104 060b 	add.w	r6, r4, #11
 800f2c2:	f000 f865 	bl	800f390 <__malloc_unlock>
 800f2c6:	f026 0607 	bic.w	r6, r6, #7
 800f2ca:	1d23      	adds	r3, r4, #4
 800f2cc:	1af2      	subs	r2, r6, r3
 800f2ce:	d0b6      	beq.n	800f23e <_malloc_r+0x22>
 800f2d0:	1b9b      	subs	r3, r3, r6
 800f2d2:	50a3      	str	r3, [r4, r2]
 800f2d4:	e7b3      	b.n	800f23e <_malloc_r+0x22>
 800f2d6:	6862      	ldr	r2, [r4, #4]
 800f2d8:	42a3      	cmp	r3, r4
 800f2da:	bf0c      	ite	eq
 800f2dc:	6032      	streq	r2, [r6, #0]
 800f2de:	605a      	strne	r2, [r3, #4]
 800f2e0:	e7ec      	b.n	800f2bc <_malloc_r+0xa0>
 800f2e2:	4623      	mov	r3, r4
 800f2e4:	6864      	ldr	r4, [r4, #4]
 800f2e6:	e7b2      	b.n	800f24e <_malloc_r+0x32>
 800f2e8:	4634      	mov	r4, r6
 800f2ea:	6876      	ldr	r6, [r6, #4]
 800f2ec:	e7b9      	b.n	800f262 <_malloc_r+0x46>
 800f2ee:	230c      	movs	r3, #12
 800f2f0:	603b      	str	r3, [r7, #0]
 800f2f2:	4638      	mov	r0, r7
 800f2f4:	f000 f84c 	bl	800f390 <__malloc_unlock>
 800f2f8:	e7a1      	b.n	800f23e <_malloc_r+0x22>
 800f2fa:	6025      	str	r5, [r4, #0]
 800f2fc:	e7de      	b.n	800f2bc <_malloc_r+0xa0>
 800f2fe:	bf00      	nop
 800f300:	24000dd0 	.word	0x24000dd0

0800f304 <_realloc_r>:
 800f304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f308:	4680      	mov	r8, r0
 800f30a:	4614      	mov	r4, r2
 800f30c:	460e      	mov	r6, r1
 800f30e:	b921      	cbnz	r1, 800f31a <_realloc_r+0x16>
 800f310:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f314:	4611      	mov	r1, r2
 800f316:	f7ff bf81 	b.w	800f21c <_malloc_r>
 800f31a:	b92a      	cbnz	r2, 800f328 <_realloc_r+0x24>
 800f31c:	f7ff ff12 	bl	800f144 <_free_r>
 800f320:	4625      	mov	r5, r4
 800f322:	4628      	mov	r0, r5
 800f324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f328:	f000 f838 	bl	800f39c <_malloc_usable_size_r>
 800f32c:	4284      	cmp	r4, r0
 800f32e:	4607      	mov	r7, r0
 800f330:	d802      	bhi.n	800f338 <_realloc_r+0x34>
 800f332:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f336:	d812      	bhi.n	800f35e <_realloc_r+0x5a>
 800f338:	4621      	mov	r1, r4
 800f33a:	4640      	mov	r0, r8
 800f33c:	f7ff ff6e 	bl	800f21c <_malloc_r>
 800f340:	4605      	mov	r5, r0
 800f342:	2800      	cmp	r0, #0
 800f344:	d0ed      	beq.n	800f322 <_realloc_r+0x1e>
 800f346:	42bc      	cmp	r4, r7
 800f348:	4622      	mov	r2, r4
 800f34a:	4631      	mov	r1, r6
 800f34c:	bf28      	it	cs
 800f34e:	463a      	movcs	r2, r7
 800f350:	f7ff fbb8 	bl	800eac4 <memcpy>
 800f354:	4631      	mov	r1, r6
 800f356:	4640      	mov	r0, r8
 800f358:	f7ff fef4 	bl	800f144 <_free_r>
 800f35c:	e7e1      	b.n	800f322 <_realloc_r+0x1e>
 800f35e:	4635      	mov	r5, r6
 800f360:	e7df      	b.n	800f322 <_realloc_r+0x1e>
	...

0800f364 <_sbrk_r>:
 800f364:	b538      	push	{r3, r4, r5, lr}
 800f366:	4d06      	ldr	r5, [pc, #24]	; (800f380 <_sbrk_r+0x1c>)
 800f368:	2300      	movs	r3, #0
 800f36a:	4604      	mov	r4, r0
 800f36c:	4608      	mov	r0, r1
 800f36e:	602b      	str	r3, [r5, #0]
 800f370:	f7f3 fd3a 	bl	8002de8 <_sbrk>
 800f374:	1c43      	adds	r3, r0, #1
 800f376:	d102      	bne.n	800f37e <_sbrk_r+0x1a>
 800f378:	682b      	ldr	r3, [r5, #0]
 800f37a:	b103      	cbz	r3, 800f37e <_sbrk_r+0x1a>
 800f37c:	6023      	str	r3, [r4, #0]
 800f37e:	bd38      	pop	{r3, r4, r5, pc}
 800f380:	24000dd8 	.word	0x24000dd8

0800f384 <__malloc_lock>:
 800f384:	4801      	ldr	r0, [pc, #4]	; (800f38c <__malloc_lock+0x8>)
 800f386:	f000 b811 	b.w	800f3ac <__retarget_lock_acquire_recursive>
 800f38a:	bf00      	nop
 800f38c:	24000ddc 	.word	0x24000ddc

0800f390 <__malloc_unlock>:
 800f390:	4801      	ldr	r0, [pc, #4]	; (800f398 <__malloc_unlock+0x8>)
 800f392:	f000 b80c 	b.w	800f3ae <__retarget_lock_release_recursive>
 800f396:	bf00      	nop
 800f398:	24000ddc 	.word	0x24000ddc

0800f39c <_malloc_usable_size_r>:
 800f39c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f3a0:	1f18      	subs	r0, r3, #4
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	bfbc      	itt	lt
 800f3a6:	580b      	ldrlt	r3, [r1, r0]
 800f3a8:	18c0      	addlt	r0, r0, r3
 800f3aa:	4770      	bx	lr

0800f3ac <__retarget_lock_acquire_recursive>:
 800f3ac:	4770      	bx	lr

0800f3ae <__retarget_lock_release_recursive>:
 800f3ae:	4770      	bx	lr

0800f3b0 <_init>:
 800f3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3b2:	bf00      	nop
 800f3b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3b6:	bc08      	pop	{r3}
 800f3b8:	469e      	mov	lr, r3
 800f3ba:	4770      	bx	lr

0800f3bc <_fini>:
 800f3bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3be:	bf00      	nop
 800f3c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3c2:	bc08      	pop	{r3}
 800f3c4:	469e      	mov	lr, r3
 800f3c6:	4770      	bx	lr
