
LCD_Display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be88  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  0800c120  0800c120  0001c120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c288  0800c288  0001c288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c290  0800c290  0001c290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800c294  0800c294  0001c294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000038  24000000  0800c298  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000038  0800c2d0  00020038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000098  0800c330  00020098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c40  240000f8  0800c390  000200f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000d38  0800c390  00020d38  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030b0c  00000000  00000000  00020126  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004304  00000000  00000000  00050c32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002448  00000000  00000000  00054f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000022c8  00000000  00000000  00057380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000415fd  00000000  00000000  00059648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d3d4  00000000  00000000  0009ac45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001a420f  00000000  00000000  000c8019  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0026c228  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a170  00000000  00000000  0026c278  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000f8 	.word	0x240000f8
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800c108 	.word	0x0800c108

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000fc 	.word	0x240000fc
 80002d4:	0800c108 	.word	0x0800c108

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_uldivmod>:
 80002e8:	b953      	cbnz	r3, 8000300 <__aeabi_uldivmod+0x18>
 80002ea:	b94a      	cbnz	r2, 8000300 <__aeabi_uldivmod+0x18>
 80002ec:	2900      	cmp	r1, #0
 80002ee:	bf08      	it	eq
 80002f0:	2800      	cmpeq	r0, #0
 80002f2:	bf1c      	itt	ne
 80002f4:	f04f 31ff 	movne.w	r1, #4294967295
 80002f8:	f04f 30ff 	movne.w	r0, #4294967295
 80002fc:	f000 b974 	b.w	80005e8 <__aeabi_idiv0>
 8000300:	f1ad 0c08 	sub.w	ip, sp, #8
 8000304:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000308:	f000 f806 	bl	8000318 <__udivmoddi4>
 800030c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000314:	b004      	add	sp, #16
 8000316:	4770      	bx	lr

08000318 <__udivmoddi4>:
 8000318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800031c:	9d08      	ldr	r5, [sp, #32]
 800031e:	4604      	mov	r4, r0
 8000320:	468e      	mov	lr, r1
 8000322:	2b00      	cmp	r3, #0
 8000324:	d14d      	bne.n	80003c2 <__udivmoddi4+0xaa>
 8000326:	428a      	cmp	r2, r1
 8000328:	4694      	mov	ip, r2
 800032a:	d969      	bls.n	8000400 <__udivmoddi4+0xe8>
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	b152      	cbz	r2, 8000348 <__udivmoddi4+0x30>
 8000332:	fa01 f302 	lsl.w	r3, r1, r2
 8000336:	f1c2 0120 	rsb	r1, r2, #32
 800033a:	fa20 f101 	lsr.w	r1, r0, r1
 800033e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000342:	ea41 0e03 	orr.w	lr, r1, r3
 8000346:	4094      	lsls	r4, r2
 8000348:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800034c:	0c21      	lsrs	r1, r4, #16
 800034e:	fbbe f6f8 	udiv	r6, lr, r8
 8000352:	fa1f f78c 	uxth.w	r7, ip
 8000356:	fb08 e316 	mls	r3, r8, r6, lr
 800035a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800035e:	fb06 f107 	mul.w	r1, r6, r7
 8000362:	4299      	cmp	r1, r3
 8000364:	d90a      	bls.n	800037c <__udivmoddi4+0x64>
 8000366:	eb1c 0303 	adds.w	r3, ip, r3
 800036a:	f106 30ff 	add.w	r0, r6, #4294967295
 800036e:	f080 811f 	bcs.w	80005b0 <__udivmoddi4+0x298>
 8000372:	4299      	cmp	r1, r3
 8000374:	f240 811c 	bls.w	80005b0 <__udivmoddi4+0x298>
 8000378:	3e02      	subs	r6, #2
 800037a:	4463      	add	r3, ip
 800037c:	1a5b      	subs	r3, r3, r1
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb3 f0f8 	udiv	r0, r3, r8
 8000384:	fb08 3310 	mls	r3, r8, r0, r3
 8000388:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800038c:	fb00 f707 	mul.w	r7, r0, r7
 8000390:	42a7      	cmp	r7, r4
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x92>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 33ff 	add.w	r3, r0, #4294967295
 800039c:	f080 810a 	bcs.w	80005b4 <__udivmoddi4+0x29c>
 80003a0:	42a7      	cmp	r7, r4
 80003a2:	f240 8107 	bls.w	80005b4 <__udivmoddi4+0x29c>
 80003a6:	4464      	add	r4, ip
 80003a8:	3802      	subs	r0, #2
 80003aa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ae:	1be4      	subs	r4, r4, r7
 80003b0:	2600      	movs	r6, #0
 80003b2:	b11d      	cbz	r5, 80003bc <__udivmoddi4+0xa4>
 80003b4:	40d4      	lsrs	r4, r2
 80003b6:	2300      	movs	r3, #0
 80003b8:	e9c5 4300 	strd	r4, r3, [r5]
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d909      	bls.n	80003da <__udivmoddi4+0xc2>
 80003c6:	2d00      	cmp	r5, #0
 80003c8:	f000 80ef 	beq.w	80005aa <__udivmoddi4+0x292>
 80003cc:	2600      	movs	r6, #0
 80003ce:	e9c5 0100 	strd	r0, r1, [r5]
 80003d2:	4630      	mov	r0, r6
 80003d4:	4631      	mov	r1, r6
 80003d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003da:	fab3 f683 	clz	r6, r3
 80003de:	2e00      	cmp	r6, #0
 80003e0:	d14a      	bne.n	8000478 <__udivmoddi4+0x160>
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xd4>
 80003e6:	4282      	cmp	r2, r0
 80003e8:	f200 80f9 	bhi.w	80005de <__udivmoddi4+0x2c6>
 80003ec:	1a84      	subs	r4, r0, r2
 80003ee:	eb61 0303 	sbc.w	r3, r1, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	469e      	mov	lr, r3
 80003f6:	2d00      	cmp	r5, #0
 80003f8:	d0e0      	beq.n	80003bc <__udivmoddi4+0xa4>
 80003fa:	e9c5 4e00 	strd	r4, lr, [r5]
 80003fe:	e7dd      	b.n	80003bc <__udivmoddi4+0xa4>
 8000400:	b902      	cbnz	r2, 8000404 <__udivmoddi4+0xec>
 8000402:	deff      	udf	#255	; 0xff
 8000404:	fab2 f282 	clz	r2, r2
 8000408:	2a00      	cmp	r2, #0
 800040a:	f040 8092 	bne.w	8000532 <__udivmoddi4+0x21a>
 800040e:	eba1 010c 	sub.w	r1, r1, ip
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2601      	movs	r6, #1
 800041c:	0c20      	lsrs	r0, r4, #16
 800041e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000422:	fb07 1113 	mls	r1, r7, r3, r1
 8000426:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800042a:	fb0e f003 	mul.w	r0, lr, r3
 800042e:	4288      	cmp	r0, r1
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x12c>
 8000432:	eb1c 0101 	adds.w	r1, ip, r1
 8000436:	f103 38ff 	add.w	r8, r3, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x12a>
 800043c:	4288      	cmp	r0, r1
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2c0>
 8000442:	4643      	mov	r3, r8
 8000444:	1a09      	subs	r1, r1, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb1 f0f7 	udiv	r0, r1, r7
 800044c:	fb07 1110 	mls	r1, r7, r0, r1
 8000450:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x156>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 31ff 	add.w	r1, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x154>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2ca>
 800046c:	4608      	mov	r0, r1
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000476:	e79c      	b.n	80003b2 <__udivmoddi4+0x9a>
 8000478:	f1c6 0720 	rsb	r7, r6, #32
 800047c:	40b3      	lsls	r3, r6
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa20 f407 	lsr.w	r4, r0, r7
 800048a:	fa01 f306 	lsl.w	r3, r1, r6
 800048e:	431c      	orrs	r4, r3
 8000490:	40f9      	lsrs	r1, r7
 8000492:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000496:	fa00 f306 	lsl.w	r3, r0, r6
 800049a:	fbb1 f8f9 	udiv	r8, r1, r9
 800049e:	0c20      	lsrs	r0, r4, #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fb09 1118 	mls	r1, r9, r8, r1
 80004a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004ac:	fb08 f00e 	mul.w	r0, r8, lr
 80004b0:	4288      	cmp	r0, r1
 80004b2:	fa02 f206 	lsl.w	r2, r2, r6
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b8>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2bc>
 80004c4:	4288      	cmp	r0, r1
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2bc>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4461      	add	r1, ip
 80004d0:	1a09      	subs	r1, r1, r0
 80004d2:	b2a4      	uxth	r4, r4
 80004d4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d8:	fb09 1110 	mls	r1, r9, r0, r1
 80004dc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004e4:	458e      	cmp	lr, r1
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1e2>
 80004e8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ec:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2b4>
 80004f2:	458e      	cmp	lr, r1
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2b4>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4461      	add	r1, ip
 80004fa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004fe:	fba0 9402 	umull	r9, r4, r0, r2
 8000502:	eba1 010e 	sub.w	r1, r1, lr
 8000506:	42a1      	cmp	r1, r4
 8000508:	46c8      	mov	r8, r9
 800050a:	46a6      	mov	lr, r4
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x2a4>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x2a0>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x212>
 8000512:	ebb3 0208 	subs.w	r2, r3, r8
 8000516:	eb61 010e 	sbc.w	r1, r1, lr
 800051a:	fa01 f707 	lsl.w	r7, r1, r7
 800051e:	fa22 f306 	lsr.w	r3, r2, r6
 8000522:	40f1      	lsrs	r1, r6
 8000524:	431f      	orrs	r7, r3
 8000526:	e9c5 7100 	strd	r7, r1, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	40d8      	lsrs	r0, r3
 8000538:	fa0c fc02 	lsl.w	ip, ip, r2
 800053c:	fa21 f303 	lsr.w	r3, r1, r3
 8000540:	4091      	lsls	r1, r2
 8000542:	4301      	orrs	r1, r0
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000550:	fb07 3610 	mls	r6, r7, r0, r3
 8000554:	0c0b      	lsrs	r3, r1, #16
 8000556:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800055a:	fb00 f60e 	mul.w	r6, r0, lr
 800055e:	429e      	cmp	r6, r3
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x260>
 8000566:	eb1c 0303 	adds.w	r3, ip, r3
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b8>
 8000570:	429e      	cmp	r6, r3
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b8>
 8000574:	3802      	subs	r0, #2
 8000576:	4463      	add	r3, ip
 8000578:	1b9b      	subs	r3, r3, r6
 800057a:	b289      	uxth	r1, r1
 800057c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000580:	fb07 3316 	mls	r3, r7, r6, r3
 8000584:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000588:	fb06 f30e 	mul.w	r3, r6, lr
 800058c:	428b      	cmp	r3, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x28a>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f106 38ff 	add.w	r8, r6, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2b0>
 800059a:	428b      	cmp	r3, r1
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2b0>
 800059e:	3e02      	subs	r6, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	1ac9      	subs	r1, r1, r3
 80005a4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0x104>
 80005aa:	462e      	mov	r6, r5
 80005ac:	4628      	mov	r0, r5
 80005ae:	e705      	b.n	80003bc <__udivmoddi4+0xa4>
 80005b0:	4606      	mov	r6, r0
 80005b2:	e6e3      	b.n	800037c <__udivmoddi4+0x64>
 80005b4:	4618      	mov	r0, r3
 80005b6:	e6f8      	b.n	80003aa <__udivmoddi4+0x92>
 80005b8:	454b      	cmp	r3, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f8>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005c4:	3801      	subs	r0, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f8>
 80005c8:	4646      	mov	r6, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x28a>
 80005cc:	4620      	mov	r0, r4
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1e2>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x260>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b8>
 80005d8:	3b02      	subs	r3, #2
 80005da:	4461      	add	r1, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x12c>
 80005de:	4630      	mov	r0, r6
 80005e0:	e709      	b.n	80003f6 <__udivmoddi4+0xde>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x156>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <__LCD_Delay>:
/*
 * @brief Function to delay in microseconds
 * @param delay: value in microseconds to delay
 * @retval None
 */
void __LCD_Delay(uint16_t delay) {
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	80fb      	strh	r3, [r7, #6]

	__HAL_TIM_SET_COUNTER(&timer, 0);
 80005f6:	4b09      	ldr	r3, [pc, #36]	; (800061c <__LCD_Delay+0x30>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	2200      	movs	r2, #0
 80005fc:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < delay);
 80005fe:	bf00      	nop
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <__LCD_Delay+0x30>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000606:	88fb      	ldrh	r3, [r7, #6]
 8000608:	429a      	cmp	r2, r3
 800060a:	d3f9      	bcc.n	8000600 <__LCD_Delay+0x14>

}
 800060c:	bf00      	nop
 800060e:	bf00      	nop
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	240006ec 	.word	0x240006ec

08000620 <__LCD_Write4Bits>:
/*
 * @brief Function to write individual bits to the pins
 * @param value: value to write
 * @retval None
 */
void __LCD_Write4Bits(uint8_t value) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(DATA4_PORT, DATA4_PIN, (value >> 3) & 0x01);
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	08db      	lsrs	r3, r3, #3
 800062e:	b2db      	uxtb	r3, r3
 8000630:	f003 0301 	and.w	r3, r3, #1
 8000634:	b2db      	uxtb	r3, r3
 8000636:	461a      	mov	r2, r3
 8000638:	f44f 7180 	mov.w	r1, #256	; 0x100
 800063c:	481a      	ldr	r0, [pc, #104]	; (80006a8 <__LCD_Write4Bits+0x88>)
 800063e:	f004 fdc1 	bl	80051c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DATA3_PORT, DATA3_PIN, (value >> 2) & 0x01);
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	089b      	lsrs	r3, r3, #2
 8000646:	b2db      	uxtb	r3, r3
 8000648:	f003 0301 	and.w	r3, r3, #1
 800064c:	b2db      	uxtb	r3, r3
 800064e:	461a      	mov	r2, r3
 8000650:	2102      	movs	r1, #2
 8000652:	4816      	ldr	r0, [pc, #88]	; (80006ac <__LCD_Write4Bits+0x8c>)
 8000654:	f004 fdb6 	bl	80051c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DATA2_PORT, DATA2_PIN, (value >> 1) & 0x01);
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	085b      	lsrs	r3, r3, #1
 800065c:	b2db      	uxtb	r3, r3
 800065e:	f003 0301 	and.w	r3, r3, #1
 8000662:	b2db      	uxtb	r3, r3
 8000664:	461a      	mov	r2, r3
 8000666:	2140      	movs	r1, #64	; 0x40
 8000668:	480f      	ldr	r0, [pc, #60]	; (80006a8 <__LCD_Write4Bits+0x88>)
 800066a:	f004 fdab 	bl	80051c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DATA1_PORT, DATA1_PIN, value & 0x01);
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	f003 0301 	and.w	r3, r3, #1
 8000674:	b2db      	uxtb	r3, r3
 8000676:	461a      	mov	r2, r3
 8000678:	2108      	movs	r1, #8
 800067a:	480d      	ldr	r0, [pc, #52]	; (80006b0 <__LCD_Write4Bits+0x90>)
 800067c:	f004 fda2 	bl	80051c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(E_PORT, E_PIN, 1);
 8000680:	2201      	movs	r2, #1
 8000682:	2140      	movs	r1, #64	; 0x40
 8000684:	480b      	ldr	r0, [pc, #44]	; (80006b4 <__LCD_Write4Bits+0x94>)
 8000686:	f004 fd9d 	bl	80051c4 <HAL_GPIO_WritePin>
	__LCD_Delay(120);
 800068a:	2078      	movs	r0, #120	; 0x78
 800068c:	f7ff ffae 	bl	80005ec <__LCD_Delay>
	HAL_GPIO_WritePin(E_PORT, E_PIN, 0);
 8000690:	2200      	movs	r2, #0
 8000692:	2140      	movs	r1, #64	; 0x40
 8000694:	4807      	ldr	r0, [pc, #28]	; (80006b4 <__LCD_Write4Bits+0x94>)
 8000696:	f004 fd95 	bl	80051c4 <HAL_GPIO_WritePin>
	__LCD_Delay(120);
 800069a:	2078      	movs	r0, #120	; 0x78
 800069c:	f7ff ffa6 	bl	80005ec <__LCD_Delay>

}
 80006a0:	bf00      	nop
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	58020000 	.word	0x58020000
 80006ac:	58022800 	.word	0x58022800
 80006b0:	58021800 	.word	0x58021800
 80006b4:	58020400 	.word	0x58020400

080006b8 <__LCD_Send>:
 * @brief Function to send data to the LCD and enable RS pin
 * @param value: value to send
 * @param state: state to set RS (register select) pin [0, 1]
 * @retval None
 */
void __LCD_Send(uint8_t value, int state) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	6039      	str	r1, [r7, #0]
 80006c2:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(RS_PORT, RS_PIN, state);
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	461a      	mov	r2, r3
 80006ca:	2180      	movs	r1, #128	; 0x80
 80006cc:	4808      	ldr	r0, [pc, #32]	; (80006f0 <__LCD_Send+0x38>)
 80006ce:	f004 fd79 	bl	80051c4 <HAL_GPIO_WritePin>
	__LCD_Write4Bits(value >> 4);
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	091b      	lsrs	r3, r3, #4
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	4618      	mov	r0, r3
 80006da:	f7ff ffa1 	bl	8000620 <__LCD_Write4Bits>
	__LCD_Write4Bits(value);
 80006de:	79fb      	ldrb	r3, [r7, #7]
 80006e0:	4618      	mov	r0, r3
 80006e2:	f7ff ff9d 	bl	8000620 <__LCD_Write4Bits>

}
 80006e6:	bf00      	nop
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	58020400 	.word	0x58020400

080006f4 <__LCD_Cmd>:
/*
 * @brief Function to send command to the LCD
 * @param value: command to send
 * @retval None
 */
void __LCD_Cmd(uint8_t value) {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	71fb      	strb	r3, [r7, #7]

	__LCD_Send(value, 0);
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f7ff ffd8 	bl	80006b8 <__LCD_Send>

}
 8000708:	bf00      	nop
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <__LCD_Data>:
/*
 * @brief Function to send data to the LCD
 * @param value: value to send
 * @retval None
 */
void __LCD_Data(uint8_t value) {
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	71fb      	strb	r3, [r7, #7]

	__LCD_Send(value, 1);
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	2101      	movs	r1, #1
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff ffca 	bl	80006b8 <__LCD_Send>

}
 8000724:	bf00      	nop
 8000726:	3708      	adds	r7, #8
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}

0800072c <LCD_Write>:
/*
 * @brief Function to write to the LCD
 * @param value: value to write to the LCD
 * @retval None
 */
void LCD_Write(char *value) {
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]

	while (*value) {
 8000734:	e00a      	b.n	800074c <LCD_Write+0x20>
		__LCD_Data(*value++);
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	1c5a      	adds	r2, r3, #1
 800073a:	607a      	str	r2, [r7, #4]
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	4618      	mov	r0, r3
 8000740:	f7ff ffe6 	bl	8000710 <__LCD_Data>
		__LCD_Delay(5000);
 8000744:	f241 3088 	movw	r0, #5000	; 0x1388
 8000748:	f7ff ff50 	bl	80005ec <__LCD_Delay>
	while (*value) {
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d1f0      	bne.n	8000736 <LCD_Write+0xa>
		// HAL_Delay(1000);
	}

}
 8000754:	bf00      	nop
 8000756:	bf00      	nop
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}

0800075e <LCD_Pos_Cursor>:
 * @brief Function to set the cursor position
 * @param row: row to set the cursor [0, 1]
 * @param col: column to set the cursor [0, 15]
 * @retval None
 */
void LCD_Pos_Cursor(uint8_t row, uint8_t col) {
 800075e:	b580      	push	{r7, lr}
 8000760:	b082      	sub	sp, #8
 8000762:	af00      	add	r7, sp, #0
 8000764:	4603      	mov	r3, r0
 8000766:	460a      	mov	r2, r1
 8000768:	71fb      	strb	r3, [r7, #7]
 800076a:	4613      	mov	r3, r2
 800076c:	71bb      	strb	r3, [r7, #6]

	switch (row) {
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d002      	beq.n	800077a <LCD_Pos_Cursor+0x1c>
 8000774:	2b01      	cmp	r3, #1
 8000776:	d005      	beq.n	8000784 <LCD_Pos_Cursor+0x26>
 8000778:	e009      	b.n	800078e <LCD_Pos_Cursor+0x30>
		case 0:
			col |= 0x80;
 800077a:	79bb      	ldrb	r3, [r7, #6]
 800077c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000780:	71bb      	strb	r3, [r7, #6]
	        break;
 8000782:	e009      	b.n	8000798 <LCD_Pos_Cursor+0x3a>
	    case 1:
	        col |= 0xC0;
 8000784:	79bb      	ldrb	r3, [r7, #6]
 8000786:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800078a:	71bb      	strb	r3, [r7, #6]
	        break;
 800078c:	e004      	b.n	8000798 <LCD_Pos_Cursor+0x3a>
	    default:
	    	row = 0;
 800078e:	2300      	movs	r3, #0
 8000790:	71fb      	strb	r3, [r7, #7]
	    	col = 0;
 8000792:	2300      	movs	r3, #0
 8000794:	71bb      	strb	r3, [r7, #6]
	    	break;
 8000796:	bf00      	nop
	}
	__LCD_Cmd(col);
 8000798:	79bb      	ldrb	r3, [r7, #6]
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff ffaa 	bl	80006f4 <__LCD_Cmd>

}
 80007a0:	bf00      	nop
 80007a2:	3708      	adds	r7, #8
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <LCD_Scroll_Display_Right>:
/*
 * @brief Function to scroll the display right
 * @param None
 * @retval None
 */
void LCD_Scroll_Display_Right(void) {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0

	__LCD_Cmd(SCROLL_DISPLAY_RIGHT);
 80007ac:	201c      	movs	r0, #28
 80007ae:	f7ff ffa1 	bl	80006f4 <__LCD_Cmd>

}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <LCD_Scroll_Display_Left>:
/*
 * @brief Function to scroll the display left
 * @param None
 * @retval None
 */
void LCD_Scroll_Display_Left(void) {
 80007b6:	b580      	push	{r7, lr}
 80007b8:	af00      	add	r7, sp, #0

	__LCD_Cmd(SCROLL_DISPLAY_LEFT);
 80007ba:	2018      	movs	r0, #24
 80007bc:	f7ff ff9a 	bl	80006f4 <__LCD_Cmd>

}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <LCD_Init>:
 * @brief Function to initialize the LCD
 * @param cursor: true/false to enable cursor
 * @param blinking: true/false to enable blinking
 * @retval None
 */
void LCD_Init(bool cursor, bool blinking) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4603      	mov	r3, r0
 80007cc:	460a      	mov	r2, r1
 80007ce:	71fb      	strb	r3, [r7, #7]
 80007d0:	4613      	mov	r3, r2
 80007d2:	71bb      	strb	r3, [r7, #6]

	// Init
	__LCD_Delay(50000);
 80007d4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80007d8:	f7ff ff08 	bl	80005ec <__LCD_Delay>
	__LCD_Cmd(0x30);
 80007dc:	2030      	movs	r0, #48	; 0x30
 80007de:	f7ff ff89 	bl	80006f4 <__LCD_Cmd>
	__LCD_Delay(4500);
 80007e2:	f241 1094 	movw	r0, #4500	; 0x1194
 80007e6:	f7ff ff01 	bl	80005ec <__LCD_Delay>
	__LCD_Cmd(0x30);
 80007ea:	2030      	movs	r0, #48	; 0x30
 80007ec:	f7ff ff82 	bl	80006f4 <__LCD_Cmd>
	__LCD_Delay(150);
 80007f0:	2096      	movs	r0, #150	; 0x96
 80007f2:	f7ff fefb 	bl	80005ec <__LCD_Delay>
	__LCD_Cmd(0x30);
 80007f6:	2030      	movs	r0, #48	; 0x30
 80007f8:	f7ff ff7c 	bl	80006f4 <__LCD_Cmd>

	// Go to 4 bit mode
	__LCD_Delay(10);
 80007fc:	200a      	movs	r0, #10
 80007fe:	f7ff fef5 	bl	80005ec <__LCD_Delay>
	__LCD_Cmd(0x20);
 8000802:	2020      	movs	r0, #32
 8000804:	f7ff ff76 	bl	80006f4 <__LCD_Cmd>
	__LCD_Delay(50);
 8000808:	2032      	movs	r0, #50	; 0x32
 800080a:	f7ff feef 	bl	80005ec <__LCD_Delay>

	// Set display lines and font
	__LCD_Cmd(0x28);
 800080e:	2028      	movs	r0, #40	; 0x28
 8000810:	f7ff ff70 	bl	80006f4 <__LCD_Cmd>
	__LCD_Delay(50);
 8000814:	2032      	movs	r0, #50	; 0x32
 8000816:	f7ff fee9 	bl	80005ec <__LCD_Delay>

	// Display on/off
	__LCD_Cmd(0x08);
 800081a:	2008      	movs	r0, #8
 800081c:	f7ff ff6a 	bl	80006f4 <__LCD_Cmd>
	__LCD_Delay(50);
 8000820:	2032      	movs	r0, #50	; 0x32
 8000822:	f7ff fee3 	bl	80005ec <__LCD_Delay>

	// Display clear
	__LCD_Cmd(0x01);
 8000826:	2001      	movs	r0, #1
 8000828:	f7ff ff64 	bl	80006f4 <__LCD_Cmd>
	__LCD_Delay(1500);
 800082c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000830:	f7ff fedc 	bl	80005ec <__LCD_Delay>

	// Entry mode set
	__LCD_Cmd(0x06);
 8000834:	2006      	movs	r0, #6
 8000836:	f7ff ff5d 	bl	80006f4 <__LCD_Cmd>
	__LCD_Delay(50);
 800083a:	2032      	movs	r0, #50	; 0x32
 800083c:	f7ff fed6 	bl	80005ec <__LCD_Delay>

	// Display on/off
	if (cursor && blinking) {
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d006      	beq.n	8000854 <LCD_Init+0x90>
 8000846:	79bb      	ldrb	r3, [r7, #6]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d003      	beq.n	8000854 <LCD_Init+0x90>
		__LCD_Cmd(CURSOR_BLINK);
 800084c:	200f      	movs	r0, #15
 800084e:	f7ff ff51 	bl	80006f4 <__LCD_Cmd>
 8000852:	e010      	b.n	8000876 <LCD_Init+0xb2>
	} else if (cursor) {
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d003      	beq.n	8000862 <LCD_Init+0x9e>
		__LCD_Cmd(CURSOR);
 800085a:	200e      	movs	r0, #14
 800085c:	f7ff ff4a 	bl	80006f4 <__LCD_Cmd>
 8000860:	e009      	b.n	8000876 <LCD_Init+0xb2>
	} else if (blinking) {
 8000862:	79bb      	ldrb	r3, [r7, #6]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d003      	beq.n	8000870 <LCD_Init+0xac>
		__LCD_Cmd(BLINK);
 8000868:	200d      	movs	r0, #13
 800086a:	f7ff ff43 	bl	80006f4 <__LCD_Cmd>
 800086e:	e002      	b.n	8000876 <LCD_Init+0xb2>
	} else {
		__LCD_Cmd(NO_BLINK_NO_CURSOR);
 8000870:	200c      	movs	r0, #12
 8000872:	f7ff ff3f 	bl	80006f4 <__LCD_Cmd>
	}

	__LCD_Delay(50000);
 8000876:	f24c 3050 	movw	r0, #50000	; 0xc350
 800087a:	f7ff feb7 	bl	80005ec <__LCD_Delay>
	LCD_Pos_Cursor(0, 0);
 800087e:	2100      	movs	r1, #0
 8000880:	2000      	movs	r0, #0
 8000882:	f7ff ff6c 	bl	800075e <LCD_Pos_Cursor>

}
 8000886:	bf00      	nop
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}

0800088e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800088e:	b580      	push	{r7, lr}
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000892:	f002 f901 	bl	8002a98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000896:	f000 f829 	bl	80008ec <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800089a:	f000 f8a9 	bl	80009f0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800089e:	f000 fe31 	bl	8001504 <MX_GPIO_Init>
  MX_ADC1_Init();
 80008a2:	f000 f8d5 	bl	8000a50 <MX_ADC1_Init>
  MX_ADC2_Init();
 80008a6:	f000 f949 	bl	8000b3c <MX_ADC2_Init>
  MX_ADC3_Init();
 80008aa:	f000 f9ab 	bl	8000c04 <MX_ADC3_Init>
  MX_ETH_Init();
 80008ae:	f000 fa0b 	bl	8000cc8 <MX_ETH_Init>
  MX_FDCAN1_Init();
 80008b2:	f000 fa55 	bl	8000d60 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 80008b6:	f000 fab7 	bl	8000e28 <MX_FDCAN2_Init>
  MX_FMC_Init();
 80008ba:	f000 fdd5 	bl	8001468 <MX_FMC_Init>
  MX_LTDC_Init();
 80008be:	f000 fb17 	bl	8000ef0 <MX_LTDC_Init>
  MX_RTC_Init();
 80008c2:	f000 fbc7 	bl	8001054 <MX_RTC_Init>
  MX_SAI2_Init();
 80008c6:	f000 fbed 	bl	80010a4 <MX_SAI2_Init>
  MX_SPI2_Init();
 80008ca:	f000 fca9 	bl	8001220 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 80008ce:	f000 fd4d 	bl	800136c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80008d2:	f000 fd97 	bl	8001404 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 80008d6:	f000 fcf7 	bl	80012c8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */


  LCD_Init(true, true);
 80008da:	2101      	movs	r1, #1
 80008dc:	2001      	movs	r0, #1
 80008de:	f7ff ff71 	bl	80007c4 <LCD_Init>
  printWelcomeText();
 80008e2:	f001 f80d 	bl	8001900 <printWelcomeText>
  moveTextLCD();
 80008e6:	f001 f833 	bl	8001950 <moveTextLCD>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008ea:	e7fe      	b.n	80008ea <main+0x5c>

080008ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b09c      	sub	sp, #112	; 0x70
 80008f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f6:	224c      	movs	r2, #76	; 0x4c
 80008f8:	2100      	movs	r1, #0
 80008fa:	4618      	mov	r0, r3
 80008fc:	f00b fbfc 	bl	800c0f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000900:	1d3b      	adds	r3, r7, #4
 8000902:	2220      	movs	r2, #32
 8000904:	2100      	movs	r1, #0
 8000906:	4618      	mov	r0, r3
 8000908:	f00b fbf6 	bl	800c0f8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800090c:	2002      	movs	r0, #2
 800090e:	f005 f863 	bl	80059d8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000912:	2300      	movs	r3, #0
 8000914:	603b      	str	r3, [r7, #0]
 8000916:	4b34      	ldr	r3, [pc, #208]	; (80009e8 <SystemClock_Config+0xfc>)
 8000918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800091a:	4a33      	ldr	r2, [pc, #204]	; (80009e8 <SystemClock_Config+0xfc>)
 800091c:	f023 0301 	bic.w	r3, r3, #1
 8000920:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000922:	4b31      	ldr	r3, [pc, #196]	; (80009e8 <SystemClock_Config+0xfc>)
 8000924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	603b      	str	r3, [r7, #0]
 800092c:	4b2f      	ldr	r3, [pc, #188]	; (80009ec <SystemClock_Config+0x100>)
 800092e:	699b      	ldr	r3, [r3, #24]
 8000930:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000934:	4a2d      	ldr	r2, [pc, #180]	; (80009ec <SystemClock_Config+0x100>)
 8000936:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800093a:	6193      	str	r3, [r2, #24]
 800093c:	4b2b      	ldr	r3, [pc, #172]	; (80009ec <SystemClock_Config+0x100>)
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000944:	603b      	str	r3, [r7, #0]
 8000946:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000948:	bf00      	nop
 800094a:	4b28      	ldr	r3, [pc, #160]	; (80009ec <SystemClock_Config+0x100>)
 800094c:	699b      	ldr	r3, [r3, #24]
 800094e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000952:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000956:	d1f8      	bne.n	800094a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000958:	230b      	movs	r3, #11
 800095a:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800095c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000960:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000962:	2301      	movs	r3, #1
 8000964:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000966:	2340      	movs	r3, #64	; 0x40
 8000968:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800096a:	2301      	movs	r3, #1
 800096c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800096e:	2302      	movs	r3, #2
 8000970:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000972:	2302      	movs	r3, #2
 8000974:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 22;
 8000976:	2316      	movs	r3, #22
 8000978:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 169;
 800097a:	23a9      	movs	r3, #169	; 0xa9
 800097c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800097e:	2302      	movs	r3, #2
 8000980:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000982:	2304      	movs	r3, #4
 8000984:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000986:	2302      	movs	r3, #2
 8000988:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 800098a:	2300      	movs	r3, #0
 800098c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800098e:	2300      	movs	r3, #0
 8000990:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000992:	2300      	movs	r3, #0
 8000994:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000996:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800099a:	4618      	mov	r0, r3
 800099c:	f005 f866 	bl	8005a6c <HAL_RCC_OscConfig>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80009a6:	f001 f81d 	bl	80019e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009aa:	233f      	movs	r3, #63	; 0x3f
 80009ac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009ae:	2300      	movs	r3, #0
 80009b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009b2:	2300      	movs	r3, #0
 80009b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80009b6:	2300      	movs	r3, #0
 80009b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80009ba:	2300      	movs	r3, #0
 80009bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80009be:	2300      	movs	r3, #0
 80009c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80009c2:	2300      	movs	r3, #0
 80009c4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80009c6:	2300      	movs	r3, #0
 80009c8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	2101      	movs	r1, #1
 80009ce:	4618      	mov	r0, r3
 80009d0:	f005 fca6 	bl	8006320 <HAL_RCC_ClockConfig>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80009da:	f001 f803 	bl	80019e4 <Error_Handler>
  }
}
 80009de:	bf00      	nop
 80009e0:	3770      	adds	r7, #112	; 0x70
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	58000400 	.word	0x58000400
 80009ec:	58024800 	.word	0x58024800

080009f0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b0b0      	sub	sp, #192	; 0xc0
 80009f4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009f6:	463b      	mov	r3, r7
 80009f8:	22c0      	movs	r2, #192	; 0xc0
 80009fa:	2100      	movs	r1, #0
 80009fc:	4618      	mov	r0, r3
 80009fe:	f00b fb7b 	bl	800c0f8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a02:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000a06:	f04f 0300 	mov.w	r3, #0
 8000a0a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000a12:	230c      	movs	r3, #12
 8000a14:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 8000a16:	2305      	movs	r3, #5
 8000a18:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000a22:	23c0      	movs	r3, #192	; 0xc0
 8000a24:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000a26:	2320      	movs	r3, #32
 8000a28:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a34:	463b      	mov	r3, r7
 8000a36:	4618      	mov	r0, r3
 8000a38:	f005 fffe 	bl	8006a38 <HAL_RCCEx_PeriphCLKConfig>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000a42:	f000 ffcf 	bl	80019e4 <Error_Handler>
  }
}
 8000a46:	bf00      	nop
 8000a48:	37c0      	adds	r7, #192	; 0xc0
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
	...

08000a50 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08a      	sub	sp, #40	; 0x28
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a56:	f107 031c 	add.w	r3, r7, #28
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	605a      	str	r2, [r3, #4]
 8000a60:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a62:	463b      	mov	r3, r7
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
 8000a70:	615a      	str	r2, [r3, #20]
 8000a72:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a74:	4b2f      	ldr	r3, [pc, #188]	; (8000b34 <MX_ADC1_Init+0xe4>)
 8000a76:	4a30      	ldr	r2, [pc, #192]	; (8000b38 <MX_ADC1_Init+0xe8>)
 8000a78:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a7a:	4b2e      	ldr	r3, [pc, #184]	; (8000b34 <MX_ADC1_Init+0xe4>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000a80:	4b2c      	ldr	r3, [pc, #176]	; (8000b34 <MX_ADC1_Init+0xe4>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a86:	4b2b      	ldr	r3, [pc, #172]	; (8000b34 <MX_ADC1_Init+0xe4>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a8c:	4b29      	ldr	r3, [pc, #164]	; (8000b34 <MX_ADC1_Init+0xe4>)
 8000a8e:	2204      	movs	r2, #4
 8000a90:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a92:	4b28      	ldr	r3, [pc, #160]	; (8000b34 <MX_ADC1_Init+0xe4>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a98:	4b26      	ldr	r3, [pc, #152]	; (8000b34 <MX_ADC1_Init+0xe4>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000a9e:	4b25      	ldr	r3, [pc, #148]	; (8000b34 <MX_ADC1_Init+0xe4>)
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000aa4:	4b23      	ldr	r3, [pc, #140]	; (8000b34 <MX_ADC1_Init+0xe4>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000aaa:	4b22      	ldr	r3, [pc, #136]	; (8000b34 <MX_ADC1_Init+0xe4>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ab0:	4b20      	ldr	r3, [pc, #128]	; (8000b34 <MX_ADC1_Init+0xe4>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000ab6:	4b1f      	ldr	r3, [pc, #124]	; (8000b34 <MX_ADC1_Init+0xe4>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000abc:	4b1d      	ldr	r3, [pc, #116]	; (8000b34 <MX_ADC1_Init+0xe4>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ac2:	4b1c      	ldr	r3, [pc, #112]	; (8000b34 <MX_ADC1_Init+0xe4>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000ac8:	4b1a      	ldr	r3, [pc, #104]	; (8000b34 <MX_ADC1_Init+0xe4>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ad0:	4818      	ldr	r0, [pc, #96]	; (8000b34 <MX_ADC1_Init+0xe4>)
 8000ad2:	f002 fa59 	bl	8002f88 <HAL_ADC_Init>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000adc:	f000 ff82 	bl	80019e4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ae4:	f107 031c 	add.w	r3, r7, #28
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4812      	ldr	r0, [pc, #72]	; (8000b34 <MX_ADC1_Init+0xe4>)
 8000aec:	f003 f870 	bl	8003bd0 <HAL_ADCEx_MultiModeConfigChannel>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000af6:	f000 ff75 	bl	80019e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000afa:	2301      	movs	r3, #1
 8000afc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000afe:	2306      	movs	r3, #6
 8000b00:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b02:	2300      	movs	r3, #0
 8000b04:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b06:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000b0a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b0c:	2304      	movs	r3, #4
 8000b0e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b14:	2300      	movs	r3, #0
 8000b16:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b18:	463b      	mov	r3, r7
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4805      	ldr	r0, [pc, #20]	; (8000b34 <MX_ADC1_Init+0xe4>)
 8000b1e:	f002 fbd5 	bl	80032cc <HAL_ADC_ConfigChannel>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000b28:	f000 ff5c 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b2c:	bf00      	nop
 8000b2e:	3728      	adds	r7, #40	; 0x28
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	2400014c 	.word	0x2400014c
 8000b38:	40022000 	.word	0x40022000

08000b3c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b088      	sub	sp, #32
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b42:	1d3b      	adds	r3, r7, #4
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]
 8000b50:	615a      	str	r2, [r3, #20]
 8000b52:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000b54:	4b29      	ldr	r3, [pc, #164]	; (8000bfc <MX_ADC2_Init+0xc0>)
 8000b56:	4a2a      	ldr	r2, [pc, #168]	; (8000c00 <MX_ADC2_Init+0xc4>)
 8000b58:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b5a:	4b28      	ldr	r3, [pc, #160]	; (8000bfc <MX_ADC2_Init+0xc0>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000b60:	4b26      	ldr	r3, [pc, #152]	; (8000bfc <MX_ADC2_Init+0xc0>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b66:	4b25      	ldr	r3, [pc, #148]	; (8000bfc <MX_ADC2_Init+0xc0>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b6c:	4b23      	ldr	r3, [pc, #140]	; (8000bfc <MX_ADC2_Init+0xc0>)
 8000b6e:	2204      	movs	r2, #4
 8000b70:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000b72:	4b22      	ldr	r3, [pc, #136]	; (8000bfc <MX_ADC2_Init+0xc0>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000b78:	4b20      	ldr	r3, [pc, #128]	; (8000bfc <MX_ADC2_Init+0xc0>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000b7e:	4b1f      	ldr	r3, [pc, #124]	; (8000bfc <MX_ADC2_Init+0xc0>)
 8000b80:	2201      	movs	r2, #1
 8000b82:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000b84:	4b1d      	ldr	r3, [pc, #116]	; (8000bfc <MX_ADC2_Init+0xc0>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b8a:	4b1c      	ldr	r3, [pc, #112]	; (8000bfc <MX_ADC2_Init+0xc0>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b90:	4b1a      	ldr	r3, [pc, #104]	; (8000bfc <MX_ADC2_Init+0xc0>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000b96:	4b19      	ldr	r3, [pc, #100]	; (8000bfc <MX_ADC2_Init+0xc0>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b9c:	4b17      	ldr	r3, [pc, #92]	; (8000bfc <MX_ADC2_Init+0xc0>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ba2:	4b16      	ldr	r3, [pc, #88]	; (8000bfc <MX_ADC2_Init+0xc0>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000ba8:	4b14      	ldr	r3, [pc, #80]	; (8000bfc <MX_ADC2_Init+0xc0>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000bb0:	4812      	ldr	r0, [pc, #72]	; (8000bfc <MX_ADC2_Init+0xc0>)
 8000bb2:	f002 f9e9 	bl	8002f88 <HAL_ADC_Init>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8000bbc:	f000 ff12 	bl	80019e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bc4:	2306      	movs	r3, #6
 8000bc6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000bcc:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000bd0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000bd2:	2304      	movs	r3, #4
 8000bd4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000bde:	1d3b      	adds	r3, r7, #4
 8000be0:	4619      	mov	r1, r3
 8000be2:	4806      	ldr	r0, [pc, #24]	; (8000bfc <MX_ADC2_Init+0xc0>)
 8000be4:	f002 fb72 	bl	80032cc <HAL_ADC_ConfigChannel>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000bee:	f000 fef9 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000bf2:	bf00      	nop
 8000bf4:	3720      	adds	r7, #32
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	240001b0 	.word	0x240001b0
 8000c00:	40022100 	.word	0x40022100

08000c04 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b088      	sub	sp, #32
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c0a:	1d3b      	adds	r3, r7, #4
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]
 8000c16:	611a      	str	r2, [r3, #16]
 8000c18:	615a      	str	r2, [r3, #20]
 8000c1a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000c1c:	4b27      	ldr	r3, [pc, #156]	; (8000cbc <MX_ADC3_Init+0xb8>)
 8000c1e:	4a28      	ldr	r2, [pc, #160]	; (8000cc0 <MX_ADC3_Init+0xbc>)
 8000c20:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000c22:	4b26      	ldr	r3, [pc, #152]	; (8000cbc <MX_ADC3_Init+0xb8>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c28:	4b24      	ldr	r3, [pc, #144]	; (8000cbc <MX_ADC3_Init+0xb8>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c2e:	4b23      	ldr	r3, [pc, #140]	; (8000cbc <MX_ADC3_Init+0xb8>)
 8000c30:	2204      	movs	r2, #4
 8000c32:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000c34:	4b21      	ldr	r3, [pc, #132]	; (8000cbc <MX_ADC3_Init+0xb8>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000c3a:	4b20      	ldr	r3, [pc, #128]	; (8000cbc <MX_ADC3_Init+0xb8>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000c40:	4b1e      	ldr	r3, [pc, #120]	; (8000cbc <MX_ADC3_Init+0xb8>)
 8000c42:	2201      	movs	r2, #1
 8000c44:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000c46:	4b1d      	ldr	r3, [pc, #116]	; (8000cbc <MX_ADC3_Init+0xb8>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c4c:	4b1b      	ldr	r3, [pc, #108]	; (8000cbc <MX_ADC3_Init+0xb8>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c52:	4b1a      	ldr	r3, [pc, #104]	; (8000cbc <MX_ADC3_Init+0xb8>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000c58:	4b18      	ldr	r3, [pc, #96]	; (8000cbc <MX_ADC3_Init+0xb8>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c5e:	4b17      	ldr	r3, [pc, #92]	; (8000cbc <MX_ADC3_Init+0xb8>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000c64:	4b15      	ldr	r3, [pc, #84]	; (8000cbc <MX_ADC3_Init+0xb8>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000c6a:	4b14      	ldr	r3, [pc, #80]	; (8000cbc <MX_ADC3_Init+0xb8>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000c72:	4812      	ldr	r0, [pc, #72]	; (8000cbc <MX_ADC3_Init+0xb8>)
 8000c74:	f002 f988 	bl	8002f88 <HAL_ADC_Init>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_ADC3_Init+0x7e>
  {
    Error_Handler();
 8000c7e:	f000 feb1 	bl	80019e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000c82:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <MX_ADC3_Init+0xc0>)
 8000c84:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c86:	2306      	movs	r3, #6
 8000c88:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c8e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000c92:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c94:	2304      	movs	r3, #4
 8000c96:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000ca0:	1d3b      	adds	r3, r7, #4
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4805      	ldr	r0, [pc, #20]	; (8000cbc <MX_ADC3_Init+0xb8>)
 8000ca6:	f002 fb11 	bl	80032cc <HAL_ADC_ConfigChannel>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8000cb0:	f000 fe98 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000cb4:	bf00      	nop
 8000cb6:	3720      	adds	r7, #32
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	24000214 	.word	0x24000214
 8000cc0:	58026000 	.word	0x58026000
 8000cc4:	1d500080 	.word	0x1d500080

08000cc8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000ccc:	4b1e      	ldr	r3, [pc, #120]	; (8000d48 <MX_ETH_Init+0x80>)
 8000cce:	4a1f      	ldr	r2, [pc, #124]	; (8000d4c <MX_ETH_Init+0x84>)
 8000cd0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000cd2:	4b1f      	ldr	r3, [pc, #124]	; (8000d50 <MX_ETH_Init+0x88>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000cd8:	4b1d      	ldr	r3, [pc, #116]	; (8000d50 <MX_ETH_Init+0x88>)
 8000cda:	2280      	movs	r2, #128	; 0x80
 8000cdc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000cde:	4b1c      	ldr	r3, [pc, #112]	; (8000d50 <MX_ETH_Init+0x88>)
 8000ce0:	22e1      	movs	r2, #225	; 0xe1
 8000ce2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000ce4:	4b1a      	ldr	r3, [pc, #104]	; (8000d50 <MX_ETH_Init+0x88>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000cea:	4b19      	ldr	r3, [pc, #100]	; (8000d50 <MX_ETH_Init+0x88>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000cf0:	4b17      	ldr	r3, [pc, #92]	; (8000d50 <MX_ETH_Init+0x88>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000cf6:	4b14      	ldr	r3, [pc, #80]	; (8000d48 <MX_ETH_Init+0x80>)
 8000cf8:	4a15      	ldr	r2, [pc, #84]	; (8000d50 <MX_ETH_Init+0x88>)
 8000cfa:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_MII_MODE;
 8000cfc:	4b12      	ldr	r3, [pc, #72]	; (8000d48 <MX_ETH_Init+0x80>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000d02:	4b11      	ldr	r3, [pc, #68]	; (8000d48 <MX_ETH_Init+0x80>)
 8000d04:	4a13      	ldr	r2, [pc, #76]	; (8000d54 <MX_ETH_Init+0x8c>)
 8000d06:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000d08:	4b0f      	ldr	r3, [pc, #60]	; (8000d48 <MX_ETH_Init+0x80>)
 8000d0a:	4a13      	ldr	r2, [pc, #76]	; (8000d58 <MX_ETH_Init+0x90>)
 8000d0c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000d0e:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <MX_ETH_Init+0x80>)
 8000d10:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000d14:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000d16:	480c      	ldr	r0, [pc, #48]	; (8000d48 <MX_ETH_Init+0x80>)
 8000d18:	f003 f91c 	bl	8003f54 <HAL_ETH_Init>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000d22:	f000 fe5f 	bl	80019e4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000d26:	2238      	movs	r2, #56	; 0x38
 8000d28:	2100      	movs	r1, #0
 8000d2a:	480c      	ldr	r0, [pc, #48]	; (8000d5c <MX_ETH_Init+0x94>)
 8000d2c:	f00b f9e4 	bl	800c0f8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000d30:	4b0a      	ldr	r3, [pc, #40]	; (8000d5c <MX_ETH_Init+0x94>)
 8000d32:	2221      	movs	r2, #33	; 0x21
 8000d34:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000d36:	4b09      	ldr	r3, [pc, #36]	; (8000d5c <MX_ETH_Init+0x94>)
 8000d38:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d3c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000d3e:	4b07      	ldr	r3, [pc, #28]	; (8000d5c <MX_ETH_Init+0x94>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000d44:	bf00      	nop
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	24000278 	.word	0x24000278
 8000d4c:	40028000 	.word	0x40028000
 8000d50:	24000d1c 	.word	0x24000d1c
 8000d54:	24000098 	.word	0x24000098
 8000d58:	24000038 	.word	0x24000038
 8000d5c:	24000114 	.word	0x24000114

08000d60 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000d64:	4b2e      	ldr	r3, [pc, #184]	; (8000e20 <MX_FDCAN1_Init+0xc0>)
 8000d66:	4a2f      	ldr	r2, [pc, #188]	; (8000e24 <MX_FDCAN1_Init+0xc4>)
 8000d68:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000d6a:	4b2d      	ldr	r3, [pc, #180]	; (8000e20 <MX_FDCAN1_Init+0xc0>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000d70:	4b2b      	ldr	r3, [pc, #172]	; (8000e20 <MX_FDCAN1_Init+0xc0>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000d76:	4b2a      	ldr	r3, [pc, #168]	; (8000e20 <MX_FDCAN1_Init+0xc0>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000d7c:	4b28      	ldr	r3, [pc, #160]	; (8000e20 <MX_FDCAN1_Init+0xc0>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000d82:	4b27      	ldr	r3, [pc, #156]	; (8000e20 <MX_FDCAN1_Init+0xc0>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000d88:	4b25      	ldr	r3, [pc, #148]	; (8000e20 <MX_FDCAN1_Init+0xc0>)
 8000d8a:	2210      	movs	r2, #16
 8000d8c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000d8e:	4b24      	ldr	r3, [pc, #144]	; (8000e20 <MX_FDCAN1_Init+0xc0>)
 8000d90:	2201      	movs	r2, #1
 8000d92:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000d94:	4b22      	ldr	r3, [pc, #136]	; (8000e20 <MX_FDCAN1_Init+0xc0>)
 8000d96:	2202      	movs	r2, #2
 8000d98:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000d9a:	4b21      	ldr	r3, [pc, #132]	; (8000e20 <MX_FDCAN1_Init+0xc0>)
 8000d9c:	2202      	movs	r2, #2
 8000d9e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000da0:	4b1f      	ldr	r3, [pc, #124]	; (8000e20 <MX_FDCAN1_Init+0xc0>)
 8000da2:	2201      	movs	r2, #1
 8000da4:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000da6:	4b1e      	ldr	r3, [pc, #120]	; (8000e20 <MX_FDCAN1_Init+0xc0>)
 8000da8:	2201      	movs	r2, #1
 8000daa:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000dac:	4b1c      	ldr	r3, [pc, #112]	; (8000e20 <MX_FDCAN1_Init+0xc0>)
 8000dae:	2201      	movs	r2, #1
 8000db0:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000db2:	4b1b      	ldr	r3, [pc, #108]	; (8000e20 <MX_FDCAN1_Init+0xc0>)
 8000db4:	2201      	movs	r2, #1
 8000db6:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000db8:	4b19      	ldr	r3, [pc, #100]	; (8000e20 <MX_FDCAN1_Init+0xc0>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000dbe:	4b18      	ldr	r3, [pc, #96]	; (8000e20 <MX_FDCAN1_Init+0xc0>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000dc4:	4b16      	ldr	r3, [pc, #88]	; (8000e20 <MX_FDCAN1_Init+0xc0>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000dca:	4b15      	ldr	r3, [pc, #84]	; (8000e20 <MX_FDCAN1_Init+0xc0>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000dd0:	4b13      	ldr	r3, [pc, #76]	; (8000e20 <MX_FDCAN1_Init+0xc0>)
 8000dd2:	2204      	movs	r2, #4
 8000dd4:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000dd6:	4b12      	ldr	r3, [pc, #72]	; (8000e20 <MX_FDCAN1_Init+0xc0>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000ddc:	4b10      	ldr	r3, [pc, #64]	; (8000e20 <MX_FDCAN1_Init+0xc0>)
 8000dde:	2204      	movs	r2, #4
 8000de0:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000de2:	4b0f      	ldr	r3, [pc, #60]	; (8000e20 <MX_FDCAN1_Init+0xc0>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000de8:	4b0d      	ldr	r3, [pc, #52]	; (8000e20 <MX_FDCAN1_Init+0xc0>)
 8000dea:	2204      	movs	r2, #4
 8000dec:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000dee:	4b0c      	ldr	r3, [pc, #48]	; (8000e20 <MX_FDCAN1_Init+0xc0>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000df4:	4b0a      	ldr	r3, [pc, #40]	; (8000e20 <MX_FDCAN1_Init+0xc0>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000dfa:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <MX_FDCAN1_Init+0xc0>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000e00:	4b07      	ldr	r3, [pc, #28]	; (8000e20 <MX_FDCAN1_Init+0xc0>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000e06:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <MX_FDCAN1_Init+0xc0>)
 8000e08:	2204      	movs	r2, #4
 8000e0a:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000e0c:	4804      	ldr	r0, [pc, #16]	; (8000e20 <MX_FDCAN1_Init+0xc0>)
 8000e0e:	f003 fcc5 	bl	800479c <HAL_FDCAN_Init>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000e18:	f000 fde4 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000e1c:	bf00      	nop
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	24000328 	.word	0x24000328
 8000e24:	4000a000 	.word	0x4000a000

08000e28 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000e2c:	4b2e      	ldr	r3, [pc, #184]	; (8000ee8 <MX_FDCAN2_Init+0xc0>)
 8000e2e:	4a2f      	ldr	r2, [pc, #188]	; (8000eec <MX_FDCAN2_Init+0xc4>)
 8000e30:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000e32:	4b2d      	ldr	r3, [pc, #180]	; (8000ee8 <MX_FDCAN2_Init+0xc0>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000e38:	4b2b      	ldr	r3, [pc, #172]	; (8000ee8 <MX_FDCAN2_Init+0xc0>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000e3e:	4b2a      	ldr	r3, [pc, #168]	; (8000ee8 <MX_FDCAN2_Init+0xc0>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000e44:	4b28      	ldr	r3, [pc, #160]	; (8000ee8 <MX_FDCAN2_Init+0xc0>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000e4a:	4b27      	ldr	r3, [pc, #156]	; (8000ee8 <MX_FDCAN2_Init+0xc0>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8000e50:	4b25      	ldr	r3, [pc, #148]	; (8000ee8 <MX_FDCAN2_Init+0xc0>)
 8000e52:	2210      	movs	r2, #16
 8000e54:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000e56:	4b24      	ldr	r3, [pc, #144]	; (8000ee8 <MX_FDCAN2_Init+0xc0>)
 8000e58:	2201      	movs	r2, #1
 8000e5a:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000e5c:	4b22      	ldr	r3, [pc, #136]	; (8000ee8 <MX_FDCAN2_Init+0xc0>)
 8000e5e:	2202      	movs	r2, #2
 8000e60:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000e62:	4b21      	ldr	r3, [pc, #132]	; (8000ee8 <MX_FDCAN2_Init+0xc0>)
 8000e64:	2202      	movs	r2, #2
 8000e66:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000e68:	4b1f      	ldr	r3, [pc, #124]	; (8000ee8 <MX_FDCAN2_Init+0xc0>)
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000e6e:	4b1e      	ldr	r3, [pc, #120]	; (8000ee8 <MX_FDCAN2_Init+0xc0>)
 8000e70:	2201      	movs	r2, #1
 8000e72:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000e74:	4b1c      	ldr	r3, [pc, #112]	; (8000ee8 <MX_FDCAN2_Init+0xc0>)
 8000e76:	2201      	movs	r2, #1
 8000e78:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000e7a:	4b1b      	ldr	r3, [pc, #108]	; (8000ee8 <MX_FDCAN2_Init+0xc0>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000e80:	4b19      	ldr	r3, [pc, #100]	; (8000ee8 <MX_FDCAN2_Init+0xc0>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000e86:	4b18      	ldr	r3, [pc, #96]	; (8000ee8 <MX_FDCAN2_Init+0xc0>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000e8c:	4b16      	ldr	r3, [pc, #88]	; (8000ee8 <MX_FDCAN2_Init+0xc0>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000e92:	4b15      	ldr	r3, [pc, #84]	; (8000ee8 <MX_FDCAN2_Init+0xc0>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000e98:	4b13      	ldr	r3, [pc, #76]	; (8000ee8 <MX_FDCAN2_Init+0xc0>)
 8000e9a:	2204      	movs	r2, #4
 8000e9c:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000e9e:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <MX_FDCAN2_Init+0xc0>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000ea4:	4b10      	ldr	r3, [pc, #64]	; (8000ee8 <MX_FDCAN2_Init+0xc0>)
 8000ea6:	2204      	movs	r2, #4
 8000ea8:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000eaa:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <MX_FDCAN2_Init+0xc0>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000eb0:	4b0d      	ldr	r3, [pc, #52]	; (8000ee8 <MX_FDCAN2_Init+0xc0>)
 8000eb2:	2204      	movs	r2, #4
 8000eb4:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000eb6:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <MX_FDCAN2_Init+0xc0>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000ebc:	4b0a      	ldr	r3, [pc, #40]	; (8000ee8 <MX_FDCAN2_Init+0xc0>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000ec2:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <MX_FDCAN2_Init+0xc0>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000ec8:	4b07      	ldr	r3, [pc, #28]	; (8000ee8 <MX_FDCAN2_Init+0xc0>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000ece:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <MX_FDCAN2_Init+0xc0>)
 8000ed0:	2204      	movs	r2, #4
 8000ed2:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000ed4:	4804      	ldr	r0, [pc, #16]	; (8000ee8 <MX_FDCAN2_Init+0xc0>)
 8000ed6:	f003 fc61 	bl	800479c <HAL_FDCAN_Init>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000ee0:	f000 fd80 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	240003c8 	.word	0x240003c8
 8000eec:	4000a400 	.word	0x4000a400

08000ef0 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b09a      	sub	sp, #104	; 0x68
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000ef6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000efa:	2234      	movs	r2, #52	; 0x34
 8000efc:	2100      	movs	r1, #0
 8000efe:	4618      	mov	r0, r3
 8000f00:	f00b f8fa 	bl	800c0f8 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000f04:	463b      	mov	r3, r7
 8000f06:	2234      	movs	r2, #52	; 0x34
 8000f08:	2100      	movs	r1, #0
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f00b f8f4 	bl	800c0f8 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000f10:	4b4e      	ldr	r3, [pc, #312]	; (800104c <MX_LTDC_Init+0x15c>)
 8000f12:	4a4f      	ldr	r2, [pc, #316]	; (8001050 <MX_LTDC_Init+0x160>)
 8000f14:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000f16:	4b4d      	ldr	r3, [pc, #308]	; (800104c <MX_LTDC_Init+0x15c>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000f1c:	4b4b      	ldr	r3, [pc, #300]	; (800104c <MX_LTDC_Init+0x15c>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000f22:	4b4a      	ldr	r3, [pc, #296]	; (800104c <MX_LTDC_Init+0x15c>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000f28:	4b48      	ldr	r3, [pc, #288]	; (800104c <MX_LTDC_Init+0x15c>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8000f2e:	4b47      	ldr	r3, [pc, #284]	; (800104c <MX_LTDC_Init+0x15c>)
 8000f30:	2207      	movs	r2, #7
 8000f32:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8000f34:	4b45      	ldr	r3, [pc, #276]	; (800104c <MX_LTDC_Init+0x15c>)
 8000f36:	2203      	movs	r2, #3
 8000f38:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8000f3a:	4b44      	ldr	r3, [pc, #272]	; (800104c <MX_LTDC_Init+0x15c>)
 8000f3c:	220e      	movs	r2, #14
 8000f3e:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8000f40:	4b42      	ldr	r3, [pc, #264]	; (800104c <MX_LTDC_Init+0x15c>)
 8000f42:	2205      	movs	r2, #5
 8000f44:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8000f46:	4b41      	ldr	r3, [pc, #260]	; (800104c <MX_LTDC_Init+0x15c>)
 8000f48:	f240 228e 	movw	r2, #654	; 0x28e
 8000f4c:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8000f4e:	4b3f      	ldr	r3, [pc, #252]	; (800104c <MX_LTDC_Init+0x15c>)
 8000f50:	f240 12e5 	movw	r2, #485	; 0x1e5
 8000f54:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 8000f56:	4b3d      	ldr	r3, [pc, #244]	; (800104c <MX_LTDC_Init+0x15c>)
 8000f58:	f44f 7225 	mov.w	r2, #660	; 0x294
 8000f5c:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 8000f5e:	4b3b      	ldr	r3, [pc, #236]	; (800104c <MX_LTDC_Init+0x15c>)
 8000f60:	f240 12e7 	movw	r2, #487	; 0x1e7
 8000f64:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000f66:	4b39      	ldr	r3, [pc, #228]	; (800104c <MX_LTDC_Init+0x15c>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000f6e:	4b37      	ldr	r3, [pc, #220]	; (800104c <MX_LTDC_Init+0x15c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000f76:	4b35      	ldr	r3, [pc, #212]	; (800104c <MX_LTDC_Init+0x15c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000f7e:	4833      	ldr	r0, [pc, #204]	; (800104c <MX_LTDC_Init+0x15c>)
 8000f80:	f004 f93a 	bl	80051f8 <HAL_LTDC_Init>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8000f8a:	f000 fd2b 	bl	80019e4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8000f92:	2300      	movs	r3, #0
 8000f94:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000faa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fae:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000fb0:	2305      	movs	r3, #5
 8000fb2:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000fd2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	4619      	mov	r1, r3
 8000fda:	481c      	ldr	r0, [pc, #112]	; (800104c <MX_LTDC_Init+0x15c>)
 8000fdc:	f004 f9dc 	bl	8005398 <HAL_LTDC_ConfigLayer>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8000fe6:	f000 fcfd 	bl	80019e4 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8001002:	2300      	movs	r3, #0
 8001004:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001006:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800100a:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800100c:	2305      	movs	r3, #5
 800100e:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8001018:	2300      	movs	r3, #0
 800101a:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 800101c:	2300      	movs	r3, #0
 800101e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8001022:	2300      	movs	r3, #0
 8001024:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800102e:	463b      	mov	r3, r7
 8001030:	2201      	movs	r2, #1
 8001032:	4619      	mov	r1, r3
 8001034:	4805      	ldr	r0, [pc, #20]	; (800104c <MX_LTDC_Init+0x15c>)
 8001036:	f004 f9af 	bl	8005398 <HAL_LTDC_ConfigLayer>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8001040:	f000 fcd0 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001044:	bf00      	nop
 8001046:	3768      	adds	r7, #104	; 0x68
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	24000468 	.word	0x24000468
 8001050:	50001000 	.word	0x50001000

08001054 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001058:	4b10      	ldr	r3, [pc, #64]	; (800109c <MX_RTC_Init+0x48>)
 800105a:	4a11      	ldr	r2, [pc, #68]	; (80010a0 <MX_RTC_Init+0x4c>)
 800105c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800105e:	4b0f      	ldr	r3, [pc, #60]	; (800109c <MX_RTC_Init+0x48>)
 8001060:	2200      	movs	r2, #0
 8001062:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001064:	4b0d      	ldr	r3, [pc, #52]	; (800109c <MX_RTC_Init+0x48>)
 8001066:	227f      	movs	r2, #127	; 0x7f
 8001068:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800106a:	4b0c      	ldr	r3, [pc, #48]	; (800109c <MX_RTC_Init+0x48>)
 800106c:	22ff      	movs	r2, #255	; 0xff
 800106e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001070:	4b0a      	ldr	r3, [pc, #40]	; (800109c <MX_RTC_Init+0x48>)
 8001072:	2200      	movs	r2, #0
 8001074:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001076:	4b09      	ldr	r3, [pc, #36]	; (800109c <MX_RTC_Init+0x48>)
 8001078:	2200      	movs	r2, #0
 800107a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800107c:	4b07      	ldr	r3, [pc, #28]	; (800109c <MX_RTC_Init+0x48>)
 800107e:	2200      	movs	r2, #0
 8001080:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001082:	4b06      	ldr	r3, [pc, #24]	; (800109c <MX_RTC_Init+0x48>)
 8001084:	2200      	movs	r2, #0
 8001086:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001088:	4804      	ldr	r0, [pc, #16]	; (800109c <MX_RTC_Init+0x48>)
 800108a:	f008 f9d3 	bl	8009434 <HAL_RTC_Init>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8001094:	f000 fca6 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	24000510 	.word	0x24000510
 80010a0:	58004000 	.word	0x58004000

080010a4 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 80010a8:	4b58      	ldr	r3, [pc, #352]	; (800120c <MX_SAI2_Init+0x168>)
 80010aa:	4a59      	ldr	r2, [pc, #356]	; (8001210 <MX_SAI2_Init+0x16c>)
 80010ac:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 80010ae:	4b57      	ldr	r3, [pc, #348]	; (800120c <MX_SAI2_Init+0x168>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 80010b4:	4b55      	ldr	r3, [pc, #340]	; (800120c <MX_SAI2_Init+0x168>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 80010ba:	4b54      	ldr	r3, [pc, #336]	; (800120c <MX_SAI2_Init+0x168>)
 80010bc:	2240      	movs	r2, #64	; 0x40
 80010be:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80010c0:	4b52      	ldr	r3, [pc, #328]	; (800120c <MX_SAI2_Init+0x168>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80010c6:	4b51      	ldr	r3, [pc, #324]	; (800120c <MX_SAI2_Init+0x168>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80010cc:	4b4f      	ldr	r3, [pc, #316]	; (800120c <MX_SAI2_Init+0x168>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80010d2:	4b4e      	ldr	r3, [pc, #312]	; (800120c <MX_SAI2_Init+0x168>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80010d8:	4b4c      	ldr	r3, [pc, #304]	; (800120c <MX_SAI2_Init+0x168>)
 80010da:	2200      	movs	r2, #0
 80010dc:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80010de:	4b4b      	ldr	r3, [pc, #300]	; (800120c <MX_SAI2_Init+0x168>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80010e4:	4b49      	ldr	r3, [pc, #292]	; (800120c <MX_SAI2_Init+0x168>)
 80010e6:	4a4b      	ldr	r2, [pc, #300]	; (8001214 <MX_SAI2_Init+0x170>)
 80010e8:	621a      	str	r2, [r3, #32]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80010ea:	4b48      	ldr	r3, [pc, #288]	; (800120c <MX_SAI2_Init+0x168>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80010f0:	4b46      	ldr	r3, [pc, #280]	; (800120c <MX_SAI2_Init+0x168>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80010f6:	4b45      	ldr	r3, [pc, #276]	; (800120c <MX_SAI2_Init+0x168>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80010fc:	4b43      	ldr	r3, [pc, #268]	; (800120c <MX_SAI2_Init+0x168>)
 80010fe:	2200      	movs	r2, #0
 8001100:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.PdmInit.Activation = DISABLE;
 8001102:	4b42      	ldr	r3, [pc, #264]	; (800120c <MX_SAI2_Init+0x168>)
 8001104:	2200      	movs	r2, #0
 8001106:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.PdmInit.MicPairsNbr = 1;
 800110a:	4b40      	ldr	r3, [pc, #256]	; (800120c <MX_SAI2_Init+0x168>)
 800110c:	2201      	movs	r2, #1
 800110e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8001110:	4b3e      	ldr	r3, [pc, #248]	; (800120c <MX_SAI2_Init+0x168>)
 8001112:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001116:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001118:	4b3c      	ldr	r3, [pc, #240]	; (800120c <MX_SAI2_Init+0x168>)
 800111a:	2208      	movs	r2, #8
 800111c:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 800111e:	4b3b      	ldr	r3, [pc, #236]	; (800120c <MX_SAI2_Init+0x168>)
 8001120:	2201      	movs	r2, #1
 8001122:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001124:	4b39      	ldr	r3, [pc, #228]	; (800120c <MX_SAI2_Init+0x168>)
 8001126:	2200      	movs	r2, #0
 8001128:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800112a:	4b38      	ldr	r3, [pc, #224]	; (800120c <MX_SAI2_Init+0x168>)
 800112c:	2200      	movs	r2, #0
 800112e:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001130:	4b36      	ldr	r3, [pc, #216]	; (800120c <MX_SAI2_Init+0x168>)
 8001132:	2200      	movs	r2, #0
 8001134:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001136:	4b35      	ldr	r3, [pc, #212]	; (800120c <MX_SAI2_Init+0x168>)
 8001138:	2200      	movs	r2, #0
 800113a:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800113c:	4b33      	ldr	r3, [pc, #204]	; (800120c <MX_SAI2_Init+0x168>)
 800113e:	2200      	movs	r2, #0
 8001140:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8001142:	4b32      	ldr	r3, [pc, #200]	; (800120c <MX_SAI2_Init+0x168>)
 8001144:	2201      	movs	r2, #1
 8001146:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001148:	4b30      	ldr	r3, [pc, #192]	; (800120c <MX_SAI2_Init+0x168>)
 800114a:	2200      	movs	r2, #0
 800114c:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 800114e:	482f      	ldr	r0, [pc, #188]	; (800120c <MX_SAI2_Init+0x168>)
 8001150:	f008 fa88 	bl	8009664 <HAL_SAI_Init>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_SAI2_Init+0xba>
  {
    Error_Handler();
 800115a:	f000 fc43 	bl	80019e4 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 800115e:	4b2e      	ldr	r3, [pc, #184]	; (8001218 <MX_SAI2_Init+0x174>)
 8001160:	4a2e      	ldr	r2, [pc, #184]	; (800121c <MX_SAI2_Init+0x178>)
 8001162:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001164:	4b2c      	ldr	r3, [pc, #176]	; (8001218 <MX_SAI2_Init+0x174>)
 8001166:	2200      	movs	r2, #0
 8001168:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 800116a:	4b2b      	ldr	r3, [pc, #172]	; (8001218 <MX_SAI2_Init+0x174>)
 800116c:	2203      	movs	r2, #3
 800116e:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8001170:	4b29      	ldr	r3, [pc, #164]	; (8001218 <MX_SAI2_Init+0x174>)
 8001172:	2240      	movs	r2, #64	; 0x40
 8001174:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001176:	4b28      	ldr	r3, [pc, #160]	; (8001218 <MX_SAI2_Init+0x174>)
 8001178:	2200      	movs	r2, #0
 800117a:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800117c:	4b26      	ldr	r3, [pc, #152]	; (8001218 <MX_SAI2_Init+0x174>)
 800117e:	2200      	movs	r2, #0
 8001180:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001182:	4b25      	ldr	r3, [pc, #148]	; (8001218 <MX_SAI2_Init+0x174>)
 8001184:	2201      	movs	r2, #1
 8001186:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001188:	4b23      	ldr	r3, [pc, #140]	; (8001218 <MX_SAI2_Init+0x174>)
 800118a:	2200      	movs	r2, #0
 800118c:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800118e:	4b22      	ldr	r3, [pc, #136]	; (8001218 <MX_SAI2_Init+0x174>)
 8001190:	2200      	movs	r2, #0
 8001192:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001194:	4b20      	ldr	r3, [pc, #128]	; (8001218 <MX_SAI2_Init+0x174>)
 8001196:	2200      	movs	r2, #0
 8001198:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 800119a:	4b1f      	ldr	r3, [pc, #124]	; (8001218 <MX_SAI2_Init+0x174>)
 800119c:	2200      	movs	r2, #0
 800119e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 80011a0:	4b1d      	ldr	r3, [pc, #116]	; (8001218 <MX_SAI2_Init+0x174>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80011a6:	4b1c      	ldr	r3, [pc, #112]	; (8001218 <MX_SAI2_Init+0x174>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.PdmInit.Activation = DISABLE;
 80011ac:	4b1a      	ldr	r3, [pc, #104]	; (8001218 <MX_SAI2_Init+0x174>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.PdmInit.MicPairsNbr = 1;
 80011b4:	4b18      	ldr	r3, [pc, #96]	; (8001218 <MX_SAI2_Init+0x174>)
 80011b6:	2201      	movs	r2, #1
 80011b8:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 80011ba:	4b17      	ldr	r3, [pc, #92]	; (8001218 <MX_SAI2_Init+0x174>)
 80011bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011c0:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.FrameLength = 8;
 80011c2:	4b15      	ldr	r3, [pc, #84]	; (8001218 <MX_SAI2_Init+0x174>)
 80011c4:	2208      	movs	r2, #8
 80011c6:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 80011c8:	4b13      	ldr	r3, [pc, #76]	; (8001218 <MX_SAI2_Init+0x174>)
 80011ca:	2201      	movs	r2, #1
 80011cc:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80011ce:	4b12      	ldr	r3, [pc, #72]	; (8001218 <MX_SAI2_Init+0x174>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80011d4:	4b10      	ldr	r3, [pc, #64]	; (8001218 <MX_SAI2_Init+0x174>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80011da:	4b0f      	ldr	r3, [pc, #60]	; (8001218 <MX_SAI2_Init+0x174>)
 80011dc:	2200      	movs	r2, #0
 80011de:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 80011e0:	4b0d      	ldr	r3, [pc, #52]	; (8001218 <MX_SAI2_Init+0x174>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80011e6:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <MX_SAI2_Init+0x174>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 80011ec:	4b0a      	ldr	r3, [pc, #40]	; (8001218 <MX_SAI2_Init+0x174>)
 80011ee:	2201      	movs	r2, #1
 80011f0:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 80011f2:	4b09      	ldr	r3, [pc, #36]	; (8001218 <MX_SAI2_Init+0x174>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 80011f8:	4807      	ldr	r0, [pc, #28]	; (8001218 <MX_SAI2_Init+0x174>)
 80011fa:	f008 fa33 	bl	8009664 <HAL_SAI_Init>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_SAI2_Init+0x164>
  {
    Error_Handler();
 8001204:	f000 fbee 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001208:	bf00      	nop
 800120a:	bd80      	pop	{r7, pc}
 800120c:	24000534 	.word	0x24000534
 8001210:	40015c04 	.word	0x40015c04
 8001214:	0002ee00 	.word	0x0002ee00
 8001218:	240005cc 	.word	0x240005cc
 800121c:	40015c24 	.word	0x40015c24

08001220 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001224:	4b26      	ldr	r3, [pc, #152]	; (80012c0 <MX_SPI2_Init+0xa0>)
 8001226:	4a27      	ldr	r2, [pc, #156]	; (80012c4 <MX_SPI2_Init+0xa4>)
 8001228:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800122a:	4b25      	ldr	r3, [pc, #148]	; (80012c0 <MX_SPI2_Init+0xa0>)
 800122c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001230:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001232:	4b23      	ldr	r3, [pc, #140]	; (80012c0 <MX_SPI2_Init+0xa0>)
 8001234:	2200      	movs	r2, #0
 8001236:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001238:	4b21      	ldr	r3, [pc, #132]	; (80012c0 <MX_SPI2_Init+0xa0>)
 800123a:	2203      	movs	r2, #3
 800123c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800123e:	4b20      	ldr	r3, [pc, #128]	; (80012c0 <MX_SPI2_Init+0xa0>)
 8001240:	2200      	movs	r2, #0
 8001242:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001244:	4b1e      	ldr	r3, [pc, #120]	; (80012c0 <MX_SPI2_Init+0xa0>)
 8001246:	2200      	movs	r2, #0
 8001248:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 800124a:	4b1d      	ldr	r3, [pc, #116]	; (80012c0 <MX_SPI2_Init+0xa0>)
 800124c:	2200      	movs	r2, #0
 800124e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001250:	4b1b      	ldr	r3, [pc, #108]	; (80012c0 <MX_SPI2_Init+0xa0>)
 8001252:	2200      	movs	r2, #0
 8001254:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001256:	4b1a      	ldr	r3, [pc, #104]	; (80012c0 <MX_SPI2_Init+0xa0>)
 8001258:	2200      	movs	r2, #0
 800125a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800125c:	4b18      	ldr	r3, [pc, #96]	; (80012c0 <MX_SPI2_Init+0xa0>)
 800125e:	2200      	movs	r2, #0
 8001260:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001262:	4b17      	ldr	r3, [pc, #92]	; (80012c0 <MX_SPI2_Init+0xa0>)
 8001264:	2200      	movs	r2, #0
 8001266:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001268:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <MX_SPI2_Init+0xa0>)
 800126a:	2200      	movs	r2, #0
 800126c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800126e:	4b14      	ldr	r3, [pc, #80]	; (80012c0 <MX_SPI2_Init+0xa0>)
 8001270:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001274:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001276:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <MX_SPI2_Init+0xa0>)
 8001278:	2200      	movs	r2, #0
 800127a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800127c:	4b10      	ldr	r3, [pc, #64]	; (80012c0 <MX_SPI2_Init+0xa0>)
 800127e:	2200      	movs	r2, #0
 8001280:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001282:	4b0f      	ldr	r3, [pc, #60]	; (80012c0 <MX_SPI2_Init+0xa0>)
 8001284:	2200      	movs	r2, #0
 8001286:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001288:	4b0d      	ldr	r3, [pc, #52]	; (80012c0 <MX_SPI2_Init+0xa0>)
 800128a:	2200      	movs	r2, #0
 800128c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800128e:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <MX_SPI2_Init+0xa0>)
 8001290:	2200      	movs	r2, #0
 8001292:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001294:	4b0a      	ldr	r3, [pc, #40]	; (80012c0 <MX_SPI2_Init+0xa0>)
 8001296:	2200      	movs	r2, #0
 8001298:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800129a:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <MX_SPI2_Init+0xa0>)
 800129c:	2200      	movs	r2, #0
 800129e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80012a0:	4b07      	ldr	r3, [pc, #28]	; (80012c0 <MX_SPI2_Init+0xa0>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80012a6:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <MX_SPI2_Init+0xa0>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80012ac:	4804      	ldr	r0, [pc, #16]	; (80012c0 <MX_SPI2_Init+0xa0>)
 80012ae:	f008 fcf9 	bl	8009ca4 <HAL_SPI_Init>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_SPI2_Init+0x9c>
  {
    Error_Handler();
 80012b8:	f000 fb94 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80012bc:	bf00      	nop
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	24000664 	.word	0x24000664
 80012c4:	40003800 	.word	0x40003800

080012c8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b088      	sub	sp, #32
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ce:	f107 0310 	add.w	r3, r7, #16
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	609a      	str	r2, [r3, #8]
 80012da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012dc:	1d3b      	adds	r3, r7, #4
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]
 80012e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012e6:	4b1f      	ldr	r3, [pc, #124]	; (8001364 <MX_TIM3_Init+0x9c>)
 80012e8:	4a1f      	ldr	r2, [pc, #124]	; (8001368 <MX_TIM3_Init+0xa0>)
 80012ea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 80012ec:	4b1d      	ldr	r3, [pc, #116]	; (8001364 <MX_TIM3_Init+0x9c>)
 80012ee:	223f      	movs	r2, #63	; 0x3f
 80012f0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f2:	4b1c      	ldr	r3, [pc, #112]	; (8001364 <MX_TIM3_Init+0x9c>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80012f8:	4b1a      	ldr	r3, [pc, #104]	; (8001364 <MX_TIM3_Init+0x9c>)
 80012fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012fe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001300:	4b18      	ldr	r3, [pc, #96]	; (8001364 <MX_TIM3_Init+0x9c>)
 8001302:	2200      	movs	r2, #0
 8001304:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001306:	4b17      	ldr	r3, [pc, #92]	; (8001364 <MX_TIM3_Init+0x9c>)
 8001308:	2200      	movs	r2, #0
 800130a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800130c:	4815      	ldr	r0, [pc, #84]	; (8001364 <MX_TIM3_Init+0x9c>)
 800130e:	f008 fe08 	bl	8009f22 <HAL_TIM_Base_Init>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001318:	f000 fb64 	bl	80019e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800131c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001320:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001322:	f107 0310 	add.w	r3, r7, #16
 8001326:	4619      	mov	r1, r3
 8001328:	480e      	ldr	r0, [pc, #56]	; (8001364 <MX_TIM3_Init+0x9c>)
 800132a:	f008 fec1 	bl	800a0b0 <HAL_TIM_ConfigClockSource>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001334:	f000 fb56 	bl	80019e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001338:	2300      	movs	r3, #0
 800133a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800133c:	2300      	movs	r3, #0
 800133e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001340:	1d3b      	adds	r3, r7, #4
 8001342:	4619      	mov	r1, r3
 8001344:	4807      	ldr	r0, [pc, #28]	; (8001364 <MX_TIM3_Init+0x9c>)
 8001346:	f009 f8e3 	bl	800a510 <HAL_TIMEx_MasterConfigSynchronization>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001350:	f000 fb48 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Base_Start(&htim3);
 8001354:	4803      	ldr	r0, [pc, #12]	; (8001364 <MX_TIM3_Init+0x9c>)
 8001356:	f008 fe3b 	bl	8009fd0 <HAL_TIM_Base_Start>

  /* USER CODE END TIM3_Init 2 */

}
 800135a:	bf00      	nop
 800135c:	3720      	adds	r7, #32
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	240006ec 	.word	0x240006ec
 8001368:	40000400 	.word	0x40000400

0800136c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001370:	4b22      	ldr	r3, [pc, #136]	; (80013fc <MX_USART3_UART_Init+0x90>)
 8001372:	4a23      	ldr	r2, [pc, #140]	; (8001400 <MX_USART3_UART_Init+0x94>)
 8001374:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001376:	4b21      	ldr	r3, [pc, #132]	; (80013fc <MX_USART3_UART_Init+0x90>)
 8001378:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800137c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800137e:	4b1f      	ldr	r3, [pc, #124]	; (80013fc <MX_USART3_UART_Init+0x90>)
 8001380:	2200      	movs	r2, #0
 8001382:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001384:	4b1d      	ldr	r3, [pc, #116]	; (80013fc <MX_USART3_UART_Init+0x90>)
 8001386:	2200      	movs	r2, #0
 8001388:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800138a:	4b1c      	ldr	r3, [pc, #112]	; (80013fc <MX_USART3_UART_Init+0x90>)
 800138c:	2200      	movs	r2, #0
 800138e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001390:	4b1a      	ldr	r3, [pc, #104]	; (80013fc <MX_USART3_UART_Init+0x90>)
 8001392:	220c      	movs	r2, #12
 8001394:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001396:	4b19      	ldr	r3, [pc, #100]	; (80013fc <MX_USART3_UART_Init+0x90>)
 8001398:	2200      	movs	r2, #0
 800139a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800139c:	4b17      	ldr	r3, [pc, #92]	; (80013fc <MX_USART3_UART_Init+0x90>)
 800139e:	2200      	movs	r2, #0
 80013a0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013a2:	4b16      	ldr	r3, [pc, #88]	; (80013fc <MX_USART3_UART_Init+0x90>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013a8:	4b14      	ldr	r3, [pc, #80]	; (80013fc <MX_USART3_UART_Init+0x90>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013ae:	4b13      	ldr	r3, [pc, #76]	; (80013fc <MX_USART3_UART_Init+0x90>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80013b4:	4811      	ldr	r0, [pc, #68]	; (80013fc <MX_USART3_UART_Init+0x90>)
 80013b6:	f009 f939 	bl	800a62c <HAL_UART_Init>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80013c0:	f000 fb10 	bl	80019e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013c4:	2100      	movs	r1, #0
 80013c6:	480d      	ldr	r0, [pc, #52]	; (80013fc <MX_USART3_UART_Init+0x90>)
 80013c8:	f00a f9c9 	bl	800b75e <HAL_UARTEx_SetTxFifoThreshold>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80013d2:	f000 fb07 	bl	80019e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013d6:	2100      	movs	r1, #0
 80013d8:	4808      	ldr	r0, [pc, #32]	; (80013fc <MX_USART3_UART_Init+0x90>)
 80013da:	f00a f9fe 	bl	800b7da <HAL_UARTEx_SetRxFifoThreshold>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80013e4:	f000 fafe 	bl	80019e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80013e8:	4804      	ldr	r0, [pc, #16]	; (80013fc <MX_USART3_UART_Init+0x90>)
 80013ea:	f00a f97f 	bl	800b6ec <HAL_UARTEx_DisableFifoMode>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80013f4:	f000 faf6 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80013f8:	bf00      	nop
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	24000738 	.word	0x24000738
 8001400:	40004800 	.word	0x40004800

08001404 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001408:	4b15      	ldr	r3, [pc, #84]	; (8001460 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800140a:	4a16      	ldr	r2, [pc, #88]	; (8001464 <MX_USB_OTG_FS_PCD_Init+0x60>)
 800140c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800140e:	4b14      	ldr	r3, [pc, #80]	; (8001460 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001410:	2209      	movs	r2, #9
 8001412:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001414:	4b12      	ldr	r3, [pc, #72]	; (8001460 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001416:	2202      	movs	r2, #2
 8001418:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800141a:	4b11      	ldr	r3, [pc, #68]	; (8001460 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800141c:	2200      	movs	r2, #0
 800141e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001420:	4b0f      	ldr	r3, [pc, #60]	; (8001460 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001422:	2202      	movs	r2, #2
 8001424:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001426:	4b0e      	ldr	r3, [pc, #56]	; (8001460 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001428:	2200      	movs	r2, #0
 800142a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800142c:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800142e:	2200      	movs	r2, #0
 8001430:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001432:	4b0b      	ldr	r3, [pc, #44]	; (8001460 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001434:	2200      	movs	r2, #0
 8001436:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001438:	4b09      	ldr	r3, [pc, #36]	; (8001460 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800143a:	2201      	movs	r2, #1
 800143c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800143e:	4b08      	ldr	r3, [pc, #32]	; (8001460 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001440:	2201      	movs	r2, #1
 8001442:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001446:	2200      	movs	r2, #0
 8001448:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800144a:	4805      	ldr	r0, [pc, #20]	; (8001460 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800144c:	f004 f97c 	bl	8005748 <HAL_PCD_Init>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001456:	f000 fac5 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	240007cc 	.word	0x240007cc
 8001464:	40080000 	.word	0x40080000

08001468 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b088      	sub	sp, #32
 800146c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800146e:	1d3b      	adds	r3, r7, #4
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]
 800147a:	611a      	str	r2, [r3, #16]
 800147c:	615a      	str	r2, [r3, #20]
 800147e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001480:	4b1e      	ldr	r3, [pc, #120]	; (80014fc <MX_FMC_Init+0x94>)
 8001482:	4a1f      	ldr	r2, [pc, #124]	; (8001500 <MX_FMC_Init+0x98>)
 8001484:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8001486:	4b1d      	ldr	r3, [pc, #116]	; (80014fc <MX_FMC_Init+0x94>)
 8001488:	2201      	movs	r2, #1
 800148a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800148c:	4b1b      	ldr	r3, [pc, #108]	; (80014fc <MX_FMC_Init+0x94>)
 800148e:	2200      	movs	r2, #0
 8001490:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001492:	4b1a      	ldr	r3, [pc, #104]	; (80014fc <MX_FMC_Init+0x94>)
 8001494:	2204      	movs	r2, #4
 8001496:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001498:	4b18      	ldr	r3, [pc, #96]	; (80014fc <MX_FMC_Init+0x94>)
 800149a:	2210      	movs	r2, #16
 800149c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800149e:	4b17      	ldr	r3, [pc, #92]	; (80014fc <MX_FMC_Init+0x94>)
 80014a0:	2240      	movs	r2, #64	; 0x40
 80014a2:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 80014a4:	4b15      	ldr	r3, [pc, #84]	; (80014fc <MX_FMC_Init+0x94>)
 80014a6:	2280      	movs	r2, #128	; 0x80
 80014a8:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80014aa:	4b14      	ldr	r3, [pc, #80]	; (80014fc <MX_FMC_Init+0x94>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <MX_FMC_Init+0x94>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80014b6:	4b11      	ldr	r3, [pc, #68]	; (80014fc <MX_FMC_Init+0x94>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80014bc:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <MX_FMC_Init+0x94>)
 80014be:	2200      	movs	r2, #0
 80014c0:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 80014c2:	2310      	movs	r3, #16
 80014c4:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 80014c6:	2310      	movs	r3, #16
 80014c8:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 80014ca:	2310      	movs	r3, #16
 80014cc:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 80014ce:	2310      	movs	r3, #16
 80014d0:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 80014d2:	2310      	movs	r3, #16
 80014d4:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 80014d6:	2310      	movs	r3, #16
 80014d8:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 80014da:	2310      	movs	r3, #16
 80014dc:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80014de:	1d3b      	adds	r3, r7, #4
 80014e0:	4619      	mov	r1, r3
 80014e2:	4806      	ldr	r0, [pc, #24]	; (80014fc <MX_FMC_Init+0x94>)
 80014e4:	f008 fba2 	bl	8009c2c <HAL_SDRAM_Init>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 80014ee:	f000 fa79 	bl	80019e4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80014f2:	bf00      	nop
 80014f4:	3720      	adds	r7, #32
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	24000cd8 	.word	0x24000cd8
 8001500:	52004140 	.word	0x52004140

08001504 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b090      	sub	sp, #64	; 0x40
 8001508:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	609a      	str	r2, [r3, #8]
 8001516:	60da      	str	r2, [r3, #12]
 8001518:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800151a:	4bc0      	ldr	r3, [pc, #768]	; (800181c <MX_GPIO_Init+0x318>)
 800151c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001520:	4abe      	ldr	r2, [pc, #760]	; (800181c <MX_GPIO_Init+0x318>)
 8001522:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001526:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800152a:	4bbc      	ldr	r3, [pc, #752]	; (800181c <MX_GPIO_Init+0x318>)
 800152c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001534:	62bb      	str	r3, [r7, #40]	; 0x28
 8001536:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001538:	4bb8      	ldr	r3, [pc, #736]	; (800181c <MX_GPIO_Init+0x318>)
 800153a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800153e:	4ab7      	ldr	r2, [pc, #732]	; (800181c <MX_GPIO_Init+0x318>)
 8001540:	f043 0302 	orr.w	r3, r3, #2
 8001544:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001548:	4bb4      	ldr	r3, [pc, #720]	; (800181c <MX_GPIO_Init+0x318>)
 800154a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
 8001554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001556:	4bb1      	ldr	r3, [pc, #708]	; (800181c <MX_GPIO_Init+0x318>)
 8001558:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800155c:	4aaf      	ldr	r2, [pc, #700]	; (800181c <MX_GPIO_Init+0x318>)
 800155e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001562:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001566:	4bad      	ldr	r3, [pc, #692]	; (800181c <MX_GPIO_Init+0x318>)
 8001568:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800156c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001570:	623b      	str	r3, [r7, #32]
 8001572:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001574:	4ba9      	ldr	r3, [pc, #676]	; (800181c <MX_GPIO_Init+0x318>)
 8001576:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800157a:	4aa8      	ldr	r2, [pc, #672]	; (800181c <MX_GPIO_Init+0x318>)
 800157c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001580:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001584:	4ba5      	ldr	r3, [pc, #660]	; (800181c <MX_GPIO_Init+0x318>)
 8001586:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800158a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800158e:	61fb      	str	r3, [r7, #28]
 8001590:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001592:	4ba2      	ldr	r3, [pc, #648]	; (800181c <MX_GPIO_Init+0x318>)
 8001594:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001598:	4aa0      	ldr	r2, [pc, #640]	; (800181c <MX_GPIO_Init+0x318>)
 800159a:	f043 0304 	orr.w	r3, r3, #4
 800159e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015a2:	4b9e      	ldr	r3, [pc, #632]	; (800181c <MX_GPIO_Init+0x318>)
 80015a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015a8:	f003 0304 	and.w	r3, r3, #4
 80015ac:	61bb      	str	r3, [r7, #24]
 80015ae:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b0:	4b9a      	ldr	r3, [pc, #616]	; (800181c <MX_GPIO_Init+0x318>)
 80015b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015b6:	4a99      	ldr	r2, [pc, #612]	; (800181c <MX_GPIO_Init+0x318>)
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015c0:	4b96      	ldr	r3, [pc, #600]	; (800181c <MX_GPIO_Init+0x318>)
 80015c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	617b      	str	r3, [r7, #20]
 80015cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015ce:	4b93      	ldr	r3, [pc, #588]	; (800181c <MX_GPIO_Init+0x318>)
 80015d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015d4:	4a91      	ldr	r2, [pc, #580]	; (800181c <MX_GPIO_Init+0x318>)
 80015d6:	f043 0310 	orr.w	r3, r3, #16
 80015da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015de:	4b8f      	ldr	r3, [pc, #572]	; (800181c <MX_GPIO_Init+0x318>)
 80015e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015e4:	f003 0310 	and.w	r3, r3, #16
 80015e8:	613b      	str	r3, [r7, #16]
 80015ea:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80015ec:	4b8b      	ldr	r3, [pc, #556]	; (800181c <MX_GPIO_Init+0x318>)
 80015ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015f2:	4a8a      	ldr	r2, [pc, #552]	; (800181c <MX_GPIO_Init+0x318>)
 80015f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015fc:	4b87      	ldr	r3, [pc, #540]	; (800181c <MX_GPIO_Init+0x318>)
 80015fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001602:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800160a:	4b84      	ldr	r3, [pc, #528]	; (800181c <MX_GPIO_Init+0x318>)
 800160c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001610:	4a82      	ldr	r2, [pc, #520]	; (800181c <MX_GPIO_Init+0x318>)
 8001612:	f043 0308 	orr.w	r3, r3, #8
 8001616:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800161a:	4b80      	ldr	r3, [pc, #512]	; (800181c <MX_GPIO_Init+0x318>)
 800161c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001620:	f003 0308 	and.w	r3, r3, #8
 8001624:	60bb      	str	r3, [r7, #8]
 8001626:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001628:	4b7c      	ldr	r3, [pc, #496]	; (800181c <MX_GPIO_Init+0x318>)
 800162a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800162e:	4a7b      	ldr	r2, [pc, #492]	; (800181c <MX_GPIO_Init+0x318>)
 8001630:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001634:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001638:	4b78      	ldr	r3, [pc, #480]	; (800181c <MX_GPIO_Init+0x318>)
 800163a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800163e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001642:	607b      	str	r3, [r7, #4]
 8001644:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001646:	4b75      	ldr	r3, [pc, #468]	; (800181c <MX_GPIO_Init+0x318>)
 8001648:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800164c:	4a73      	ldr	r2, [pc, #460]	; (800181c <MX_GPIO_Init+0x318>)
 800164e:	f043 0320 	orr.w	r3, r3, #32
 8001652:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001656:	4b71      	ldr	r3, [pc, #452]	; (800181c <MX_GPIO_Init+0x318>)
 8001658:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800165c:	f003 0320 	and.w	r3, r3, #32
 8001660:	603b      	str	r3, [r7, #0]
 8001662:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7|MII_TX_ER_nINT_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8001664:	2200      	movs	r2, #0
 8001666:	f241 01c4 	movw	r1, #4292	; 0x10c4
 800166a:	486d      	ldr	r0, [pc, #436]	; (8001820 <MX_GPIO_Init+0x31c>)
 800166c:	f003 fdaa 	bl	80051c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_6, GPIO_PIN_RESET);
 8001670:	2200      	movs	r2, #0
 8001672:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8001676:	486b      	ldr	r0, [pc, #428]	; (8001824 <MX_GPIO_Init+0x320>)
 8001678:	f003 fda4 	bl	80051c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800167c:	2200      	movs	r2, #0
 800167e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001682:	4869      	ldr	r0, [pc, #420]	; (8001828 <MX_GPIO_Init+0x324>)
 8001684:	f003 fd9e 	bl	80051c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, GPIO_PIN_RESET);
 8001688:	2200      	movs	r2, #0
 800168a:	2108      	movs	r1, #8
 800168c:	4867      	ldr	r0, [pc, #412]	; (800182c <MX_GPIO_Init+0x328>)
 800168e:	f003 fd99 	bl	80051c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_1, GPIO_PIN_RESET);
 8001692:	2200      	movs	r2, #0
 8001694:	2102      	movs	r1, #2
 8001696:	4866      	ldr	r0, [pc, #408]	; (8001830 <MX_GPIO_Init+0x32c>)
 8001698:	f003 fd94 	bl	80051c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 800169c:	2200      	movs	r2, #0
 800169e:	2104      	movs	r1, #4
 80016a0:	4864      	ldr	r0, [pc, #400]	; (8001834 <MX_GPIO_Init+0x330>)
 80016a2:	f003 fd8f 	bl	80051c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB6 PB7 MII_TX_ER_nINT_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|MII_TX_ER_nINT_Pin|LCD_RST_Pin;
 80016a6:	f241 03c4 	movw	r3, #4292	; 0x10c4
 80016aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ac:	2301      	movs	r3, #1
 80016ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b4:	2300      	movs	r3, #0
 80016b6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016bc:	4619      	mov	r1, r3
 80016be:	4858      	ldr	r0, [pc, #352]	; (8001820 <MX_GPIO_Init+0x31c>)
 80016c0:	f003 fbd0 	bl	8004e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80016c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ca:	2302      	movs	r3, #2
 80016cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d2:	2300      	movs	r3, #0
 80016d4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80016d6:	2303      	movs	r3, #3
 80016d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80016da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016de:	4619      	mov	r1, r3
 80016e0:	4855      	ldr	r0, [pc, #340]	; (8001838 <MX_GPIO_Init+0x334>)
 80016e2:	f003 fbbf 	bl	8004e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISPD7_Pin */
  GPIO_InitStruct.Pin = LCD_DISPD7_Pin;
 80016e6:	2380      	movs	r3, #128	; 0x80
 80016e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016ea:	2300      	movs	r3, #0
 80016ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_DISPD7_GPIO_Port, &GPIO_InitStruct);
 80016f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016f6:	4619      	mov	r1, r3
 80016f8:	4850      	ldr	r0, [pc, #320]	; (800183c <MX_GPIO_Init+0x338>)
 80016fa:	f003 fbb3 	bl	8004e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE5 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 80016fe:	2330      	movs	r3, #48	; 0x30
 8001700:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001702:	2302      	movs	r3, #2
 8001704:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001706:	2300      	movs	r3, #0
 8001708:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170a:	2300      	movs	r3, #0
 800170c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 800170e:	230a      	movs	r3, #10
 8001710:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001712:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001716:	4619      	mov	r1, r3
 8001718:	4849      	ldr	r0, [pc, #292]	; (8001840 <MX_GPIO_Init+0x33c>)
 800171a:	f003 fba3 	bl	8004e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS2_ID_Pin OTG_FS2_PSO_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS2_ID_Pin|OTG_FS2_PSO_Pin;
 800171e:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8001722:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001724:	2300      	movs	r3, #0
 8001726:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001730:	4619      	mov	r1, r3
 8001732:	483c      	ldr	r0, [pc, #240]	; (8001824 <MX_GPIO_Init+0x320>)
 8001734:	f003 fb96 	bl	8004e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001738:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800173c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800173e:	2300      	movs	r3, #0
 8001740:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	2300      	movs	r3, #0
 8001744:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001746:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800174a:	4619      	mov	r1, r3
 800174c:	483d      	ldr	r0, [pc, #244]	; (8001844 <MX_GPIO_Init+0x340>)
 800174e:	f003 fb89 	bl	8004e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_6;
 8001752:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001756:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001758:	2301      	movs	r3, #1
 800175a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175c:	2300      	movs	r3, #0
 800175e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001760:	2300      	movs	r3, #0
 8001762:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001764:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001768:	4619      	mov	r1, r3
 800176a:	482e      	ldr	r0, [pc, #184]	; (8001824 <MX_GPIO_Init+0x320>)
 800176c:	f003 fb7a 	bl	8004e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : audio_Int_Pin */
  GPIO_InitStruct.Pin = audio_Int_Pin;
 8001770:	2380      	movs	r3, #128	; 0x80
 8001772:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001774:	2302      	movs	r3, #2
 8001776:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177c:	2300      	movs	r3, #0
 800177e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001780:	2306      	movs	r3, #6
 8001782:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(audio_Int_GPIO_Port, &GPIO_InitStruct);
 8001784:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001788:	4619      	mov	r1, r3
 800178a:	4828      	ldr	r0, [pc, #160]	; (800182c <MX_GPIO_Init+0x328>)
 800178c:	f003 fb6a 	bl	8004e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001790:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001794:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001796:	2301      	movs	r3, #1
 8001798:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179e:	2300      	movs	r3, #0
 80017a0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80017a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017a6:	4619      	mov	r1, r3
 80017a8:	481f      	ldr	r0, [pc, #124]	; (8001828 <MX_GPIO_Init+0x324>)
 80017aa:	f003 fb5b 	bl	8004e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017ae:	2308      	movs	r3, #8
 80017b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b2:	2301      	movs	r3, #1
 80017b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ba:	2300      	movs	r3, #0
 80017bc:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017c2:	4619      	mov	r1, r3
 80017c4:	4819      	ldr	r0, [pc, #100]	; (800182c <MX_GPIO_Init+0x328>)
 80017c6:	f003 fb4d 	bl	8004e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80017ca:	2304      	movs	r3, #4
 80017cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017ce:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80017d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d4:	2300      	movs	r3, #0
 80017d6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80017d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017dc:	4619      	mov	r1, r3
 80017de:	4813      	ldr	r0, [pc, #76]	; (800182c <MX_GPIO_Init+0x328>)
 80017e0:	f003 fb40 	bl	8004e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 80017e4:	2301      	movs	r3, #1
 80017e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017e8:	2300      	movs	r3, #0
 80017ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 80017f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017f4:	4619      	mov	r1, r3
 80017f6:	480e      	ldr	r0, [pc, #56]	; (8001830 <MX_GPIO_Init+0x32c>)
 80017f8:	f003 fb34 	bl	8004e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PK1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80017fc:	2302      	movs	r3, #2
 80017fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001800:	2301      	movs	r3, #1
 8001802:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001804:	2300      	movs	r3, #0
 8001806:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001808:	2300      	movs	r3, #0
 800180a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800180c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001810:	4619      	mov	r1, r3
 8001812:	4807      	ldr	r0, [pc, #28]	; (8001830 <MX_GPIO_Init+0x32c>)
 8001814:	f003 fb26 	bl	8004e64 <HAL_GPIO_Init>
 8001818:	e016      	b.n	8001848 <MX_GPIO_Init+0x344>
 800181a:	bf00      	nop
 800181c:	58024400 	.word	0x58024400
 8001820:	58020400 	.word	0x58020400
 8001824:	58020000 	.word	0x58020000
 8001828:	58022000 	.word	0x58022000
 800182c:	58021800 	.word	0x58021800
 8001830:	58022800 	.word	0x58022800
 8001834:	58022400 	.word	0x58022400
 8001838:	58021c00 	.word	0x58021c00
 800183c:	58020c00 	.word	0x58020c00
 8001840:	58021000 	.word	0x58021000
 8001844:	58020800 	.word	0x58020800

  /*Configure GPIO pins : PF6 PF7 PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8001848:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800184c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184e:	2302      	movs	r3, #2
 8001850:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2300      	movs	r3, #0
 8001854:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001856:	2300      	movs	r3, #0
 8001858:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800185a:	2309      	movs	r3, #9
 800185c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800185e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001862:	4619      	mov	r1, r3
 8001864:	4822      	ldr	r0, [pc, #136]	; (80018f0 <MX_GPIO_Init+0x3ec>)
 8001866:	f003 fafd 	bl	8004e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800186a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800186e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001870:	2302      	movs	r3, #2
 8001872:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001874:	2300      	movs	r3, #0
 8001876:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001878:	2300      	movs	r3, #0
 800187a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800187c:	230a      	movs	r3, #10
 800187e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001880:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001884:	4619      	mov	r1, r3
 8001886:	481a      	ldr	r0, [pc, #104]	; (80018f0 <MX_GPIO_Init+0x3ec>)
 8001888:	f003 faec 	bl	8004e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS2_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS2_OverCurrent_Pin;
 800188c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001890:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001892:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001896:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001898:	2300      	movs	r3, #0
 800189a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS2_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800189c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018a0:	4619      	mov	r1, r3
 80018a2:	4814      	ldr	r0, [pc, #80]	; (80018f4 <MX_GPIO_Init+0x3f0>)
 80018a4:	f003 fade 	bl	8004e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80018a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80018ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ae:	2302      	movs	r3, #2
 80018b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b6:	2300      	movs	r3, #0
 80018b8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80018ba:	2309      	movs	r3, #9
 80018bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018c2:	4619      	mov	r1, r3
 80018c4:	480c      	ldr	r0, [pc, #48]	; (80018f8 <MX_GPIO_Init+0x3f4>)
 80018c6:	f003 facd 	bl	8004e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 80018ca:	2304      	movs	r3, #4
 80018cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ce:	2301      	movs	r3, #1
 80018d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d2:	2300      	movs	r3, #0
 80018d4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d6:	2300      	movs	r3, #0
 80018d8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 80018da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018de:	4619      	mov	r1, r3
 80018e0:	4806      	ldr	r0, [pc, #24]	; (80018fc <MX_GPIO_Init+0x3f8>)
 80018e2:	f003 fabf 	bl	8004e64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018e6:	bf00      	nop
 80018e8:	3740      	adds	r7, #64	; 0x40
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	58021400 	.word	0x58021400
 80018f4:	58021c00 	.word	0x58021c00
 80018f8:	58020c00 	.word	0x58020c00
 80018fc:	58022400 	.word	0x58022400

08001900 <printWelcomeText>:

/* USER CODE BEGIN 4 */

void printWelcomeText(void) {
 8001900:	b590      	push	{r4, r7, lr}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0

	for (int i = 0; i<WELCOME_STRINGS; i++) {
 8001906:	2300      	movs	r3, #0
 8001908:	607b      	str	r3, [r7, #4]
 800190a:	e015      	b.n	8001938 <printWelcomeText+0x38>
		HAL_UART_Transmit(&huart3, (const uint8_t *) welcomeStrings[i], strlen(welcomeStrings[i]), 6000);
 800190c:	4a0e      	ldr	r2, [pc, #56]	; (8001948 <printWelcomeText+0x48>)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8001914:	4a0c      	ldr	r2, [pc, #48]	; (8001948 <printWelcomeText+0x48>)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800191c:	4618      	mov	r0, r3
 800191e:	f7fe fcdb 	bl	80002d8 <strlen>
 8001922:	4603      	mov	r3, r0
 8001924:	b29a      	uxth	r2, r3
 8001926:	f241 7370 	movw	r3, #6000	; 0x1770
 800192a:	4621      	mov	r1, r4
 800192c:	4807      	ldr	r0, [pc, #28]	; (800194c <printWelcomeText+0x4c>)
 800192e:	f008 fecd 	bl	800a6cc <HAL_UART_Transmit>
	for (int i = 0; i<WELCOME_STRINGS; i++) {
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	3301      	adds	r3, #1
 8001936:	607b      	str	r3, [r7, #4]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2b09      	cmp	r3, #9
 800193c:	dde6      	ble.n	800190c <printWelcomeText+0xc>
	}

}
 800193e:	bf00      	nop
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	bd90      	pop	{r4, r7, pc}
 8001948:	24000000 	.word	0x24000000
 800194c:	24000738 	.word	0x24000738

08001950 <moveTextLCD>:
	LCD_Clear();
	LCD_Write(rxBuffer);

}

void moveTextLCD(void) {
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0

	strcpy(rxBuffer, "Hello"); // remove later
 8001956:	4b21      	ldr	r3, [pc, #132]	; (80019dc <moveTextLCD+0x8c>)
 8001958:	4a21      	ldr	r2, [pc, #132]	; (80019e0 <moveTextLCD+0x90>)
 800195a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800195e:	6018      	str	r0, [r3, #0]
 8001960:	3304      	adds	r3, #4
 8001962:	8019      	strh	r1, [r3, #0]
	LCD_Write(rxBuffer);
 8001964:	481d      	ldr	r0, [pc, #116]	; (80019dc <moveTextLCD+0x8c>)
 8001966:	f7fe fee1 	bl	800072c <LCD_Write>
	HAL_Delay(1000);
 800196a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800196e:	f001 f925 	bl	8002bbc <HAL_Delay>
	int i = 0, stringLength = strlen(rxBuffer);
 8001972:	2300      	movs	r3, #0
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	4819      	ldr	r0, [pc, #100]	; (80019dc <moveTextLCD+0x8c>)
 8001978:	f7fe fcae 	bl	80002d8 <strlen>
 800197c:	4603      	mov	r3, r0
 800197e:	607b      	str	r3, [r7, #4]
	bool edge = false;
 8001980:	2300      	movs	r3, #0
 8001982:	72fb      	strb	r3, [r7, #11]
	while (1) {
		if (i < (16 - stringLength) && !edge) {
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f1c3 0310 	rsb	r3, r3, #16
 800198a:	68fa      	ldr	r2, [r7, #12]
 800198c:	429a      	cmp	r2, r3
 800198e:	da13      	bge.n	80019b8 <moveTextLCD+0x68>
 8001990:	7afb      	ldrb	r3, [r7, #11]
 8001992:	f083 0301 	eor.w	r3, r3, #1
 8001996:	b2db      	uxtb	r3, r3
 8001998:	2b00      	cmp	r3, #0
 800199a:	d00d      	beq.n	80019b8 <moveTextLCD+0x68>
			LCD_Scroll_Display_Right();
 800199c:	f7fe ff04 	bl	80007a8 <LCD_Scroll_Display_Right>
			i++;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	3301      	adds	r3, #1
 80019a4:	60fb      	str	r3, [r7, #12]
			if (i == (16 - stringLength)) {
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f1c3 0310 	rsb	r3, r3, #16
 80019ac:	68fa      	ldr	r2, [r7, #12]
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d10f      	bne.n	80019d2 <moveTextLCD+0x82>
				edge = true;
 80019b2:	2301      	movs	r3, #1
 80019b4:	72fb      	strb	r3, [r7, #11]
			if (i == (16 - stringLength)) {
 80019b6:	e00c      	b.n	80019d2 <moveTextLCD+0x82>
			}
		} else if (edge) {
 80019b8:	7afb      	ldrb	r3, [r7, #11]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d009      	beq.n	80019d2 <moveTextLCD+0x82>
			LCD_Scroll_Display_Left();
 80019be:	f7fe fefa 	bl	80007b6 <LCD_Scroll_Display_Left>
			i--;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	3b01      	subs	r3, #1
 80019c6:	60fb      	str	r3, [r7, #12]
			if (i == 0) {
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d101      	bne.n	80019d2 <moveTextLCD+0x82>
				edge = false;
 80019ce:	2300      	movs	r3, #0
 80019d0:	72fb      	strb	r3, [r7, #11]
			}
		}
		HAL_Delay(1000);
 80019d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019d6:	f001 f8f1 	bl	8002bbc <HAL_Delay>
		if (i < (16 - stringLength) && !edge) {
 80019da:	e7d3      	b.n	8001984 <moveTextLCD+0x34>
 80019dc:	24000d0c 	.word	0x24000d0c
 80019e0:	0800c1fc 	.word	0x0800c1fc

080019e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019e8:	b672      	cpsid	i
}
 80019ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019ec:	e7fe      	b.n	80019ec <Error_Handler+0x8>
	...

080019f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019f6:	4b0a      	ldr	r3, [pc, #40]	; (8001a20 <HAL_MspInit+0x30>)
 80019f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80019fc:	4a08      	ldr	r2, [pc, #32]	; (8001a20 <HAL_MspInit+0x30>)
 80019fe:	f043 0302 	orr.w	r3, r3, #2
 8001a02:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001a06:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <HAL_MspInit+0x30>)
 8001a08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	607b      	str	r3, [r7, #4]
 8001a12:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a14:	bf00      	nop
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	58024400 	.word	0x58024400

08001a24 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b090      	sub	sp, #64	; 0x40
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	60da      	str	r2, [r3, #12]
 8001a3a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a72      	ldr	r2, [pc, #456]	; (8001c0c <HAL_ADC_MspInit+0x1e8>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d14e      	bne.n	8001ae4 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001a46:	4b72      	ldr	r3, [pc, #456]	; (8001c10 <HAL_ADC_MspInit+0x1ec>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	4a70      	ldr	r2, [pc, #448]	; (8001c10 <HAL_ADC_MspInit+0x1ec>)
 8001a4e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001a50:	4b6f      	ldr	r3, [pc, #444]	; (8001c10 <HAL_ADC_MspInit+0x1ec>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d10e      	bne.n	8001a76 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001a58:	4b6e      	ldr	r3, [pc, #440]	; (8001c14 <HAL_ADC_MspInit+0x1f0>)
 8001a5a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a5e:	4a6d      	ldr	r2, [pc, #436]	; (8001c14 <HAL_ADC_MspInit+0x1f0>)
 8001a60:	f043 0320 	orr.w	r3, r3, #32
 8001a64:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001a68:	4b6a      	ldr	r3, [pc, #424]	; (8001c14 <HAL_ADC_MspInit+0x1f0>)
 8001a6a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a6e:	f003 0320 	and.w	r3, r3, #32
 8001a72:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a76:	4b67      	ldr	r3, [pc, #412]	; (8001c14 <HAL_ADC_MspInit+0x1f0>)
 8001a78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a7c:	4a65      	ldr	r2, [pc, #404]	; (8001c14 <HAL_ADC_MspInit+0x1f0>)
 8001a7e:	f043 0304 	orr.w	r3, r3, #4
 8001a82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a86:	4b63      	ldr	r3, [pc, #396]	; (8001c14 <HAL_ADC_MspInit+0x1f0>)
 8001a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a8c:	f003 0304 	and.w	r3, r3, #4
 8001a90:	627b      	str	r3, [r7, #36]	; 0x24
 8001a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a94:	4b5f      	ldr	r3, [pc, #380]	; (8001c14 <HAL_ADC_MspInit+0x1f0>)
 8001a96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a9a:	4a5e      	ldr	r2, [pc, #376]	; (8001c14 <HAL_ADC_MspInit+0x1f0>)
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001aa4:	4b5b      	ldr	r3, [pc, #364]	; (8001c14 <HAL_ADC_MspInit+0x1f0>)
 8001aa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	623b      	str	r3, [r7, #32]
 8001ab0:	6a3b      	ldr	r3, [r7, #32]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    PA0_C     ------> ADC1_INP0
    PA1_C     ------> ADC1_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aba:	2300      	movs	r3, #0
 8001abc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001abe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4854      	ldr	r0, [pc, #336]	; (8001c18 <HAL_ADC_MspInit+0x1f4>)
 8001ac6:	f003 f9cd 	bl	8004e64 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8001aca:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8001ace:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8001ad2:	f001 f8b7 	bl	8002c44 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8001ad6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ada:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8001ade:	f001 f8b1 	bl	8002c44 <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001ae2:	e08f      	b.n	8001c04 <HAL_ADC_MspInit+0x1e0>
  else if(hadc->Instance==ADC2)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a4c      	ldr	r2, [pc, #304]	; (8001c1c <HAL_ADC_MspInit+0x1f8>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d133      	bne.n	8001b56 <HAL_ADC_MspInit+0x132>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001aee:	4b48      	ldr	r3, [pc, #288]	; (8001c10 <HAL_ADC_MspInit+0x1ec>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	3301      	adds	r3, #1
 8001af4:	4a46      	ldr	r2, [pc, #280]	; (8001c10 <HAL_ADC_MspInit+0x1ec>)
 8001af6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001af8:	4b45      	ldr	r3, [pc, #276]	; (8001c10 <HAL_ADC_MspInit+0x1ec>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d10e      	bne.n	8001b1e <HAL_ADC_MspInit+0xfa>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001b00:	4b44      	ldr	r3, [pc, #272]	; (8001c14 <HAL_ADC_MspInit+0x1f0>)
 8001b02:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b06:	4a43      	ldr	r2, [pc, #268]	; (8001c14 <HAL_ADC_MspInit+0x1f0>)
 8001b08:	f043 0320 	orr.w	r3, r3, #32
 8001b0c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001b10:	4b40      	ldr	r3, [pc, #256]	; (8001c14 <HAL_ADC_MspInit+0x1f0>)
 8001b12:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b16:	f003 0320 	and.w	r3, r3, #32
 8001b1a:	61fb      	str	r3, [r7, #28]
 8001b1c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1e:	4b3d      	ldr	r3, [pc, #244]	; (8001c14 <HAL_ADC_MspInit+0x1f0>)
 8001b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b24:	4a3b      	ldr	r2, [pc, #236]	; (8001c14 <HAL_ADC_MspInit+0x1f0>)
 8001b26:	f043 0301 	orr.w	r3, r3, #1
 8001b2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b2e:	4b39      	ldr	r3, [pc, #228]	; (8001c14 <HAL_ADC_MspInit+0x1f0>)
 8001b30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b34:	f003 0301 	and.w	r3, r3, #1
 8001b38:	61bb      	str	r3, [r7, #24]
 8001b3a:	69bb      	ldr	r3, [r7, #24]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8001b3c:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8001b40:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8001b44:	f001 f87e 	bl	8002c44 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8001b48:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b4c:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8001b50:	f001 f878 	bl	8002c44 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8001b54:	e056      	b.n	8001c04 <HAL_ADC_MspInit+0x1e0>
  else if(hadc->Instance==ADC3)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a31      	ldr	r2, [pc, #196]	; (8001c20 <HAL_ADC_MspInit+0x1fc>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d151      	bne.n	8001c04 <HAL_ADC_MspInit+0x1e0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001b60:	4b2c      	ldr	r3, [pc, #176]	; (8001c14 <HAL_ADC_MspInit+0x1f0>)
 8001b62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b66:	4a2b      	ldr	r2, [pc, #172]	; (8001c14 <HAL_ADC_MspInit+0x1f0>)
 8001b68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b70:	4b28      	ldr	r3, [pc, #160]	; (8001c14 <HAL_ADC_MspInit+0x1f0>)
 8001b72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b7a:	617b      	str	r3, [r7, #20]
 8001b7c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b7e:	4b25      	ldr	r3, [pc, #148]	; (8001c14 <HAL_ADC_MspInit+0x1f0>)
 8001b80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b84:	4a23      	ldr	r2, [pc, #140]	; (8001c14 <HAL_ADC_MspInit+0x1f0>)
 8001b86:	f043 0320 	orr.w	r3, r3, #32
 8001b8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b8e:	4b21      	ldr	r3, [pc, #132]	; (8001c14 <HAL_ADC_MspInit+0x1f0>)
 8001b90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b94:	f003 0320 	and.w	r3, r3, #32
 8001b98:	613b      	str	r3, [r7, #16]
 8001b9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b9c:	4b1d      	ldr	r3, [pc, #116]	; (8001c14 <HAL_ADC_MspInit+0x1f0>)
 8001b9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ba2:	4a1c      	ldr	r2, [pc, #112]	; (8001c14 <HAL_ADC_MspInit+0x1f0>)
 8001ba4:	f043 0304 	orr.w	r3, r3, #4
 8001ba8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bac:	4b19      	ldr	r3, [pc, #100]	; (8001c14 <HAL_ADC_MspInit+0x1f0>)
 8001bae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bb2:	f003 0304 	and.w	r3, r3, #4
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001bba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001bc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4815      	ldr	r0, [pc, #84]	; (8001c24 <HAL_ADC_MspInit+0x200>)
 8001bd0:	f003 f948 	bl	8004e64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001be0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001be4:	4619      	mov	r1, r3
 8001be6:	480c      	ldr	r0, [pc, #48]	; (8001c18 <HAL_ADC_MspInit+0x1f4>)
 8001be8:	f003 f93c 	bl	8004e64 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001bec:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001bf0:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001bf4:	f001 f826 	bl	8002c44 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001bf8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001bfc:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001c00:	f001 f820 	bl	8002c44 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8001c04:	bf00      	nop
 8001c06:	3740      	adds	r7, #64	; 0x40
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40022000 	.word	0x40022000
 8001c10:	24000d24 	.word	0x24000d24
 8001c14:	58024400 	.word	0x58024400
 8001c18:	58020800 	.word	0x58020800
 8001c1c:	40022100 	.word	0x40022100
 8001c20:	58026000 	.word	0x58026000
 8001c24:	58021400 	.word	0x58021400

08001c28 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b092      	sub	sp, #72	; 0x48
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c30:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
 8001c3c:	60da      	str	r2, [r3, #12]
 8001c3e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a87      	ldr	r2, [pc, #540]	; (8001e64 <HAL_ETH_MspInit+0x23c>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	f040 8108 	bne.w	8001e5c <HAL_ETH_MspInit+0x234>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001c4c:	4b86      	ldr	r3, [pc, #536]	; (8001e68 <HAL_ETH_MspInit+0x240>)
 8001c4e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c52:	4a85      	ldr	r2, [pc, #532]	; (8001e68 <HAL_ETH_MspInit+0x240>)
 8001c54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c58:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001c5c:	4b82      	ldr	r3, [pc, #520]	; (8001e68 <HAL_ETH_MspInit+0x240>)
 8001c5e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c66:	633b      	str	r3, [r7, #48]	; 0x30
 8001c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001c6a:	4b7f      	ldr	r3, [pc, #508]	; (8001e68 <HAL_ETH_MspInit+0x240>)
 8001c6c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c70:	4a7d      	ldr	r2, [pc, #500]	; (8001e68 <HAL_ETH_MspInit+0x240>)
 8001c72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c76:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001c7a:	4b7b      	ldr	r3, [pc, #492]	; (8001e68 <HAL_ETH_MspInit+0x240>)
 8001c7c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001c88:	4b77      	ldr	r3, [pc, #476]	; (8001e68 <HAL_ETH_MspInit+0x240>)
 8001c8a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c8e:	4a76      	ldr	r2, [pc, #472]	; (8001e68 <HAL_ETH_MspInit+0x240>)
 8001c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c94:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001c98:	4b73      	ldr	r3, [pc, #460]	; (8001e68 <HAL_ETH_MspInit+0x240>)
 8001c9a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ca6:	4b70      	ldr	r3, [pc, #448]	; (8001e68 <HAL_ETH_MspInit+0x240>)
 8001ca8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cac:	4a6e      	ldr	r2, [pc, #440]	; (8001e68 <HAL_ETH_MspInit+0x240>)
 8001cae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cb6:	4b6c      	ldr	r3, [pc, #432]	; (8001e68 <HAL_ETH_MspInit+0x240>)
 8001cb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cc0:	627b      	str	r3, [r7, #36]	; 0x24
 8001cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cc4:	4b68      	ldr	r3, [pc, #416]	; (8001e68 <HAL_ETH_MspInit+0x240>)
 8001cc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cca:	4a67      	ldr	r2, [pc, #412]	; (8001e68 <HAL_ETH_MspInit+0x240>)
 8001ccc:	f043 0310 	orr.w	r3, r3, #16
 8001cd0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cd4:	4b64      	ldr	r3, [pc, #400]	; (8001e68 <HAL_ETH_MspInit+0x240>)
 8001cd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cda:	f003 0310 	and.w	r3, r3, #16
 8001cde:	623b      	str	r3, [r7, #32]
 8001ce0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001ce2:	4b61      	ldr	r3, [pc, #388]	; (8001e68 <HAL_ETH_MspInit+0x240>)
 8001ce4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ce8:	4a5f      	ldr	r2, [pc, #380]	; (8001e68 <HAL_ETH_MspInit+0x240>)
 8001cea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cf2:	4b5d      	ldr	r3, [pc, #372]	; (8001e68 <HAL_ETH_MspInit+0x240>)
 8001cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cfc:	61fb      	str	r3, [r7, #28]
 8001cfe:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d00:	4b59      	ldr	r3, [pc, #356]	; (8001e68 <HAL_ETH_MspInit+0x240>)
 8001d02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d06:	4a58      	ldr	r2, [pc, #352]	; (8001e68 <HAL_ETH_MspInit+0x240>)
 8001d08:	f043 0304 	orr.w	r3, r3, #4
 8001d0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d10:	4b55      	ldr	r3, [pc, #340]	; (8001e68 <HAL_ETH_MspInit+0x240>)
 8001d12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d16:	f003 0304 	and.w	r3, r3, #4
 8001d1a:	61bb      	str	r3, [r7, #24]
 8001d1c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d1e:	4b52      	ldr	r3, [pc, #328]	; (8001e68 <HAL_ETH_MspInit+0x240>)
 8001d20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d24:	4a50      	ldr	r2, [pc, #320]	; (8001e68 <HAL_ETH_MspInit+0x240>)
 8001d26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d2e:	4b4e      	ldr	r3, [pc, #312]	; (8001e68 <HAL_ETH_MspInit+0x240>)
 8001d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d38:	617b      	str	r3, [r7, #20]
 8001d3a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d3c:	4b4a      	ldr	r3, [pc, #296]	; (8001e68 <HAL_ETH_MspInit+0x240>)
 8001d3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d42:	4a49      	ldr	r2, [pc, #292]	; (8001e68 <HAL_ETH_MspInit+0x240>)
 8001d44:	f043 0301 	orr.w	r3, r3, #1
 8001d48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d4c:	4b46      	ldr	r3, [pc, #280]	; (8001e68 <HAL_ETH_MspInit+0x240>)
 8001d4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	613b      	str	r3, [r7, #16]
 8001d58:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d5a:	4b43      	ldr	r3, [pc, #268]	; (8001e68 <HAL_ETH_MspInit+0x240>)
 8001d5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d60:	4a41      	ldr	r2, [pc, #260]	; (8001e68 <HAL_ETH_MspInit+0x240>)
 8001d62:	f043 0302 	orr.w	r3, r3, #2
 8001d66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d6a:	4b3f      	ldr	r3, [pc, #252]	; (8001e68 <HAL_ETH_MspInit+0x240>)
 8001d6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	60fb      	str	r3, [r7, #12]
 8001d76:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PB1     ------> ETH_RXD3
    PC5     ------> ETH_RXD1
    PB0     ------> ETH_RXD2
    */
    GPIO_InitStruct.Pin = MII_TX_EN_Pin|MII_TXD1_Pin|MII_TXD0_Pin;
 8001d78:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001d7c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7e:	2302      	movs	r3, #2
 8001d80:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d82:	2300      	movs	r3, #0
 8001d84:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d86:	2300      	movs	r3, #0
 8001d88:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d8a:	230b      	movs	r3, #11
 8001d8c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d8e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d92:	4619      	mov	r1, r3
 8001d94:	4835      	ldr	r0, [pc, #212]	; (8001e6c <HAL_ETH_MspInit+0x244>)
 8001d96:	f003 f865 	bl	8004e64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_TXD3_Pin;
 8001d9a:	2304      	movs	r3, #4
 8001d9c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9e:	2302      	movs	r3, #2
 8001da0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da2:	2300      	movs	r3, #0
 8001da4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da6:	2300      	movs	r3, #0
 8001da8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001daa:	230b      	movs	r3, #11
 8001dac:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(MII_TXD3_GPIO_Port, &GPIO_InitStruct);
 8001dae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001db2:	4619      	mov	r1, r3
 8001db4:	482e      	ldr	r0, [pc, #184]	; (8001e70 <HAL_ETH_MspInit+0x248>)
 8001db6:	f003 f855 	bl	8004e64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RX_ER_Pin;
 8001dba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dbe:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001dcc:	230b      	movs	r3, #11
 8001dce:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(MII_RX_ER_GPIO_Port, &GPIO_InitStruct);
 8001dd0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4827      	ldr	r0, [pc, #156]	; (8001e74 <HAL_ETH_MspInit+0x24c>)
 8001dd8:	f003 f844 	bl	8004e64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDC_Pin|MII_TXD2_Pin|MII_TX_CLK_Pin|MII_RXD0_Pin
 8001ddc:	233e      	movs	r3, #62	; 0x3e
 8001dde:	637b      	str	r3, [r7, #52]	; 0x34
                          |MII_RXD1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de0:	2302      	movs	r3, #2
 8001de2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de4:	2300      	movs	r3, #0
 8001de6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de8:	2300      	movs	r3, #0
 8001dea:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001dec:	230b      	movs	r3, #11
 8001dee:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001df0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001df4:	4619      	mov	r1, r3
 8001df6:	4820      	ldr	r0, [pc, #128]	; (8001e78 <HAL_ETH_MspInit+0x250>)
 8001df8:	f003 f834 	bl	8004e64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_CRS_Pin|MII_COL_Pin;
 8001dfc:	230c      	movs	r3, #12
 8001dfe:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e00:	2302      	movs	r3, #2
 8001e02:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e04:	2300      	movs	r3, #0
 8001e06:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e0c:	230b      	movs	r3, #11
 8001e0e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001e10:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e14:	4619      	mov	r1, r3
 8001e16:	4819      	ldr	r0, [pc, #100]	; (8001e7c <HAL_ETH_MspInit+0x254>)
 8001e18:	f003 f824 	bl	8004e64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDIO_Pin|MII_RX_CLK_Pin|MII_RX_DV_Pin;
 8001e1c:	2386      	movs	r3, #134	; 0x86
 8001e1e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e20:	2302      	movs	r3, #2
 8001e22:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e24:	2300      	movs	r3, #0
 8001e26:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e2c:	230b      	movs	r3, #11
 8001e2e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e30:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e34:	4619      	mov	r1, r3
 8001e36:	4812      	ldr	r0, [pc, #72]	; (8001e80 <HAL_ETH_MspInit+0x258>)
 8001e38:	f003 f814 	bl	8004e64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RX_D3_Pin|MII_RX_D2_Pin;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e40:	2302      	movs	r3, #2
 8001e42:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e44:	2300      	movs	r3, #0
 8001e46:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e4c:	230b      	movs	r3, #11
 8001e4e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e50:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e54:	4619      	mov	r1, r3
 8001e56:	480b      	ldr	r0, [pc, #44]	; (8001e84 <HAL_ETH_MspInit+0x25c>)
 8001e58:	f003 f804 	bl	8004e64 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001e5c:	bf00      	nop
 8001e5e:	3748      	adds	r7, #72	; 0x48
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	40028000 	.word	0x40028000
 8001e68:	58024400 	.word	0x58024400
 8001e6c:	58021800 	.word	0x58021800
 8001e70:	58021000 	.word	0x58021000
 8001e74:	58022000 	.word	0x58022000
 8001e78:	58020800 	.word	0x58020800
 8001e7c:	58021c00 	.word	0x58021c00
 8001e80:	58020000 	.word	0x58020000
 8001e84:	58020400 	.word	0x58020400

08001e88 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b0bc      	sub	sp, #240	; 0xf0
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e90:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	605a      	str	r2, [r3, #4]
 8001e9a:	609a      	str	r2, [r3, #8]
 8001e9c:	60da      	str	r2, [r3, #12]
 8001e9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ea0:	f107 0318 	add.w	r3, r7, #24
 8001ea4:	22c0      	movs	r2, #192	; 0xc0
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f00a f925 	bl	800c0f8 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a57      	ldr	r2, [pc, #348]	; (8002010 <HAL_FDCAN_MspInit+0x188>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d151      	bne.n	8001f5c <HAL_FDCAN_MspInit+0xd4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001eb8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001ebc:	f04f 0300 	mov.w	r3, #0
 8001ec0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001ec4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001ec8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ecc:	f107 0318 	add.w	r3, r7, #24
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f004 fdb1 	bl	8006a38 <HAL_RCCEx_PeriphCLKConfig>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8001edc:	f7ff fd82 	bl	80019e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001ee0:	4b4c      	ldr	r3, [pc, #304]	; (8002014 <HAL_FDCAN_MspInit+0x18c>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	4a4b      	ldr	r2, [pc, #300]	; (8002014 <HAL_FDCAN_MspInit+0x18c>)
 8001ee8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001eea:	4b4a      	ldr	r3, [pc, #296]	; (8002014 <HAL_FDCAN_MspInit+0x18c>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d10e      	bne.n	8001f10 <HAL_FDCAN_MspInit+0x88>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001ef2:	4b49      	ldr	r3, [pc, #292]	; (8002018 <HAL_FDCAN_MspInit+0x190>)
 8001ef4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001ef8:	4a47      	ldr	r2, [pc, #284]	; (8002018 <HAL_FDCAN_MspInit+0x190>)
 8001efa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001efe:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001f02:	4b45      	ldr	r3, [pc, #276]	; (8002018 <HAL_FDCAN_MspInit+0x190>)
 8001f04:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f0c:	617b      	str	r3, [r7, #20]
 8001f0e:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f10:	4b41      	ldr	r3, [pc, #260]	; (8002018 <HAL_FDCAN_MspInit+0x190>)
 8001f12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f16:	4a40      	ldr	r2, [pc, #256]	; (8002018 <HAL_FDCAN_MspInit+0x190>)
 8001f18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f20:	4b3d      	ldr	r3, [pc, #244]	; (8002018 <HAL_FDCAN_MspInit+0x190>)
 8001f22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f2a:	613b      	str	r3, [r7, #16]
 8001f2c:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PH14     ------> FDCAN1_RX
    PH13     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = FDCAN1_RX_Pin|FDCAN1_TX_Pin;
 8001f2e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001f32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f36:	2302      	movs	r3, #2
 8001f38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f42:	2300      	movs	r3, #0
 8001f44:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001f48:	2309      	movs	r3, #9
 8001f4a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001f4e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001f52:	4619      	mov	r1, r3
 8001f54:	4831      	ldr	r0, [pc, #196]	; (800201c <HAL_FDCAN_MspInit+0x194>)
 8001f56:	f002 ff85 	bl	8004e64 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8001f5a:	e055      	b.n	8002008 <HAL_FDCAN_MspInit+0x180>
  else if(hfdcan->Instance==FDCAN2)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a2f      	ldr	r2, [pc, #188]	; (8002020 <HAL_FDCAN_MspInit+0x198>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d150      	bne.n	8002008 <HAL_FDCAN_MspInit+0x180>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001f66:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001f6a:	f04f 0300 	mov.w	r3, #0
 8001f6e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001f72:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001f76:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f7a:	f107 0318 	add.w	r3, r7, #24
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f004 fd5a 	bl	8006a38 <HAL_RCCEx_PeriphCLKConfig>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <HAL_FDCAN_MspInit+0x106>
      Error_Handler();
 8001f8a:	f7ff fd2b 	bl	80019e4 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001f8e:	4b21      	ldr	r3, [pc, #132]	; (8002014 <HAL_FDCAN_MspInit+0x18c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	3301      	adds	r3, #1
 8001f94:	4a1f      	ldr	r2, [pc, #124]	; (8002014 <HAL_FDCAN_MspInit+0x18c>)
 8001f96:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001f98:	4b1e      	ldr	r3, [pc, #120]	; (8002014 <HAL_FDCAN_MspInit+0x18c>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d10e      	bne.n	8001fbe <HAL_FDCAN_MspInit+0x136>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001fa0:	4b1d      	ldr	r3, [pc, #116]	; (8002018 <HAL_FDCAN_MspInit+0x190>)
 8001fa2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001fa6:	4a1c      	ldr	r2, [pc, #112]	; (8002018 <HAL_FDCAN_MspInit+0x190>)
 8001fa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fac:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001fb0:	4b19      	ldr	r3, [pc, #100]	; (8002018 <HAL_FDCAN_MspInit+0x190>)
 8001fb2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fba:	60fb      	str	r3, [r7, #12]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fbe:	4b16      	ldr	r3, [pc, #88]	; (8002018 <HAL_FDCAN_MspInit+0x190>)
 8001fc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fc4:	4a14      	ldr	r2, [pc, #80]	; (8002018 <HAL_FDCAN_MspInit+0x190>)
 8001fc6:	f043 0302 	orr.w	r3, r3, #2
 8001fca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fce:	4b12      	ldr	r3, [pc, #72]	; (8002018 <HAL_FDCAN_MspInit+0x190>)
 8001fd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fd4:	f003 0302 	and.w	r3, r3, #2
 8001fd8:	60bb      	str	r3, [r7, #8]
 8001fda:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FDCAN2_RX_Pin|FDCAN2_TX_Pin;
 8001fdc:	f242 0320 	movw	r3, #8224	; 0x2020
 8001fe0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fea:	2300      	movs	r3, #0
 8001fec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001ff6:	2309      	movs	r3, #9
 8001ff8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ffc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002000:	4619      	mov	r1, r3
 8002002:	4808      	ldr	r0, [pc, #32]	; (8002024 <HAL_FDCAN_MspInit+0x19c>)
 8002004:	f002 ff2e 	bl	8004e64 <HAL_GPIO_Init>
}
 8002008:	bf00      	nop
 800200a:	37f0      	adds	r7, #240	; 0xf0
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	4000a000 	.word	0x4000a000
 8002014:	24000d28 	.word	0x24000d28
 8002018:	58024400 	.word	0x58024400
 800201c:	58021c00 	.word	0x58021c00
 8002020:	4000a400 	.word	0x4000a400
 8002024:	58020400 	.word	0x58020400

08002028 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b0be      	sub	sp, #248	; 0xf8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002030:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	605a      	str	r2, [r3, #4]
 800203a:	609a      	str	r2, [r3, #8]
 800203c:	60da      	str	r2, [r3, #12]
 800203e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002040:	f107 0320 	add.w	r3, r7, #32
 8002044:	22c0      	movs	r2, #192	; 0xc0
 8002046:	2100      	movs	r1, #0
 8002048:	4618      	mov	r0, r3
 800204a:	f00a f855 	bl	800c0f8 <memset>
  if(hltdc->Instance==LTDC)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a66      	ldr	r2, [pc, #408]	; (80021ec <HAL_LTDC_MspInit+0x1c4>)
 8002054:	4293      	cmp	r3, r2
 8002056:	f040 80c4 	bne.w	80021e2 <HAL_LTDC_MspInit+0x1ba>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800205a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800205e:	f04f 0300 	mov.w	r3, #0
 8002062:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.PLL3.PLL3M = 32;
 8002066:	2320      	movs	r3, #32
 8002068:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3N = 192;
 800206a:	23c0      	movs	r3, #192	; 0xc0
 800206c:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 800206e:	2302      	movs	r3, #2
 8002070:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8002072:	2302      	movs	r3, #2
 8002074:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8002076:	2302      	movs	r3, #2
 8002078:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 800207a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800207e:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8002080:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002084:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0.0;
 8002086:	2300      	movs	r3, #0
 8002088:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800208a:	f107 0320 	add.w	r3, r7, #32
 800208e:	4618      	mov	r0, r3
 8002090:	f004 fcd2 	bl	8006a38 <HAL_RCCEx_PeriphCLKConfig>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <HAL_LTDC_MspInit+0x76>
    {
      Error_Handler();
 800209a:	f7ff fca3 	bl	80019e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800209e:	4b54      	ldr	r3, [pc, #336]	; (80021f0 <HAL_LTDC_MspInit+0x1c8>)
 80020a0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80020a4:	4a52      	ldr	r2, [pc, #328]	; (80021f0 <HAL_LTDC_MspInit+0x1c8>)
 80020a6:	f043 0308 	orr.w	r3, r3, #8
 80020aa:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80020ae:	4b50      	ldr	r3, [pc, #320]	; (80021f0 <HAL_LTDC_MspInit+0x1c8>)
 80020b0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80020b4:	f003 0308 	and.w	r3, r3, #8
 80020b8:	61fb      	str	r3, [r7, #28]
 80020ba:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 80020bc:	4b4c      	ldr	r3, [pc, #304]	; (80021f0 <HAL_LTDC_MspInit+0x1c8>)
 80020be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020c2:	4a4b      	ldr	r2, [pc, #300]	; (80021f0 <HAL_LTDC_MspInit+0x1c8>)
 80020c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020cc:	4b48      	ldr	r3, [pc, #288]	; (80021f0 <HAL_LTDC_MspInit+0x1c8>)
 80020ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020d6:	61bb      	str	r3, [r7, #24]
 80020d8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80020da:	4b45      	ldr	r3, [pc, #276]	; (80021f0 <HAL_LTDC_MspInit+0x1c8>)
 80020dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020e0:	4a43      	ldr	r2, [pc, #268]	; (80021f0 <HAL_LTDC_MspInit+0x1c8>)
 80020e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020ea:	4b41      	ldr	r3, [pc, #260]	; (80021f0 <HAL_LTDC_MspInit+0x1c8>)
 80020ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f4:	617b      	str	r3, [r7, #20]
 80020f6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80020f8:	4b3d      	ldr	r3, [pc, #244]	; (80021f0 <HAL_LTDC_MspInit+0x1c8>)
 80020fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020fe:	4a3c      	ldr	r2, [pc, #240]	; (80021f0 <HAL_LTDC_MspInit+0x1c8>)
 8002100:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002104:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002108:	4b39      	ldr	r3, [pc, #228]	; (80021f0 <HAL_LTDC_MspInit+0x1c8>)
 800210a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800210e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002112:	613b      	str	r3, [r7, #16]
 8002114:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002116:	4b36      	ldr	r3, [pc, #216]	; (80021f0 <HAL_LTDC_MspInit+0x1c8>)
 8002118:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800211c:	4a34      	ldr	r2, [pc, #208]	; (80021f0 <HAL_LTDC_MspInit+0x1c8>)
 800211e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002122:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002126:	4b32      	ldr	r3, [pc, #200]	; (80021f0 <HAL_LTDC_MspInit+0x1c8>)
 8002128:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800212c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002130:	60fb      	str	r3, [r7, #12]
 8002132:	68fb      	ldr	r3, [r7, #12]
    PJ5     ------> LTDC_R6
    PH9     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    PJ4     ------> LTDC_R5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
 8002134:	23fc      	movs	r3, #252	; 0xfc
 8002136:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_7|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213a:	2302      	movs	r3, #2
 800213c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002140:	2300      	movs	r3, #0
 8002142:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002146:	2300      	movs	r3, #0
 8002148:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800214c:	230e      	movs	r3, #14
 800214e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002152:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002156:	4619      	mov	r1, r3
 8002158:	4826      	ldr	r0, [pc, #152]	; (80021f4 <HAL_LTDC_MspInit+0x1cc>)
 800215a:	f002 fe83 	bl	8004e64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
 800215e:	f24d 2303 	movw	r3, #53763	; 0xd203
 8002162:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002166:	2302      	movs	r3, #2
 8002168:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216c:	2300      	movs	r3, #0
 800216e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002172:	2300      	movs	r3, #0
 8002174:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002178:	230e      	movs	r3, #14
 800217a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800217e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002182:	4619      	mov	r1, r3
 8002184:	481c      	ldr	r0, [pc, #112]	; (80021f8 <HAL_LTDC_MspInit+0x1d0>)
 8002186:	f002 fe6d 	bl	8004e64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DISP_Pin|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
 800218a:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 800218e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002192:	2302      	movs	r3, #2
 8002194:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002198:	2300      	movs	r3, #0
 800219a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219e:	2300      	movs	r3, #0
 80021a0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80021a4:	230e      	movs	r3, #14
 80021a6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80021aa:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80021ae:	4619      	mov	r1, r3
 80021b0:	4812      	ldr	r0, [pc, #72]	; (80021fc <HAL_LTDC_MspInit+0x1d4>)
 80021b2:	f002 fe57 	bl	8004e64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80021b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021be:	2302      	movs	r3, #2
 80021c0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c4:	2300      	movs	r3, #0
 80021c6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ca:	2300      	movs	r3, #0
 80021cc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80021d0:	230e      	movs	r3, #14
 80021d2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80021d6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80021da:	4619      	mov	r1, r3
 80021dc:	4808      	ldr	r0, [pc, #32]	; (8002200 <HAL_LTDC_MspInit+0x1d8>)
 80021de:	f002 fe41 	bl	8004e64 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80021e2:	bf00      	nop
 80021e4:	37f8      	adds	r7, #248	; 0xf8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	50001000 	.word	0x50001000
 80021f0:	58024400 	.word	0x58024400
 80021f4:	58022800 	.word	0x58022800
 80021f8:	58022000 	.word	0x58022000
 80021fc:	58022400 	.word	0x58022400
 8002200:	58021c00 	.word	0x58021c00

08002204 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b0b2      	sub	sp, #200	; 0xc8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800220c:	f107 0308 	add.w	r3, r7, #8
 8002210:	22c0      	movs	r2, #192	; 0xc0
 8002212:	2100      	movs	r1, #0
 8002214:	4618      	mov	r0, r3
 8002216:	f009 ff6f 	bl	800c0f8 <memset>
  if(hrtc->Instance==RTC)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a10      	ldr	r2, [pc, #64]	; (8002260 <HAL_RTC_MspInit+0x5c>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d119      	bne.n	8002258 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002224:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002228:	f04f 0300 	mov.w	r3, #0
 800222c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002230:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002234:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002238:	f107 0308 	add.w	r3, r7, #8
 800223c:	4618      	mov	r0, r3
 800223e:	f004 fbfb 	bl	8006a38 <HAL_RCCEx_PeriphCLKConfig>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8002248:	f7ff fbcc 	bl	80019e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800224c:	4b05      	ldr	r3, [pc, #20]	; (8002264 <HAL_RTC_MspInit+0x60>)
 800224e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002250:	4a04      	ldr	r2, [pc, #16]	; (8002264 <HAL_RTC_MspInit+0x60>)
 8002252:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002256:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002258:	bf00      	nop
 800225a:	37c8      	adds	r7, #200	; 0xc8
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	58004000 	.word	0x58004000
 8002264:	58024400 	.word	0x58024400

08002268 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b0bc      	sub	sp, #240	; 0xf0
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002270:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]
 8002278:	605a      	str	r2, [r3, #4]
 800227a:	609a      	str	r2, [r3, #8]
 800227c:	60da      	str	r2, [r3, #12]
 800227e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002280:	f107 0318 	add.w	r3, r7, #24
 8002284:	22c0      	movs	r2, #192	; 0xc0
 8002286:	2100      	movs	r1, #0
 8002288:	4618      	mov	r0, r3
 800228a:	f009 ff35 	bl	800c0f8 <memset>
  if(hspi->Instance==SPI2)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a55      	ldr	r2, [pc, #340]	; (80023e8 <HAL_SPI_MspInit+0x180>)
 8002294:	4293      	cmp	r3, r2
 8002296:	f040 80a3 	bne.w	80023e0 <HAL_SPI_MspInit+0x178>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800229a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800229e:	f04f 0300 	mov.w	r3, #0
 80022a2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80022a6:	2300      	movs	r3, #0
 80022a8:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022aa:	f107 0318 	add.w	r3, r7, #24
 80022ae:	4618      	mov	r0, r3
 80022b0:	f004 fbc2 	bl	8006a38 <HAL_RCCEx_PeriphCLKConfig>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 80022ba:	f7ff fb93 	bl	80019e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80022be:	4b4b      	ldr	r3, [pc, #300]	; (80023ec <HAL_SPI_MspInit+0x184>)
 80022c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022c4:	4a49      	ldr	r2, [pc, #292]	; (80023ec <HAL_SPI_MspInit+0x184>)
 80022c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022ca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80022ce:	4b47      	ldr	r3, [pc, #284]	; (80023ec <HAL_SPI_MspInit+0x184>)
 80022d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022d8:	617b      	str	r3, [r7, #20]
 80022da:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022dc:	4b43      	ldr	r3, [pc, #268]	; (80023ec <HAL_SPI_MspInit+0x184>)
 80022de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022e2:	4a42      	ldr	r2, [pc, #264]	; (80023ec <HAL_SPI_MspInit+0x184>)
 80022e4:	f043 0302 	orr.w	r3, r3, #2
 80022e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022ec:	4b3f      	ldr	r3, [pc, #252]	; (80023ec <HAL_SPI_MspInit+0x184>)
 80022ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	613b      	str	r3, [r7, #16]
 80022f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022fa:	4b3c      	ldr	r3, [pc, #240]	; (80023ec <HAL_SPI_MspInit+0x184>)
 80022fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002300:	4a3a      	ldr	r2, [pc, #232]	; (80023ec <HAL_SPI_MspInit+0x184>)
 8002302:	f043 0308 	orr.w	r3, r3, #8
 8002306:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800230a:	4b38      	ldr	r3, [pc, #224]	; (80023ec <HAL_SPI_MspInit+0x184>)
 800230c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002310:	f003 0308 	and.w	r3, r3, #8
 8002314:	60fb      	str	r3, [r7, #12]
 8002316:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002318:	4b34      	ldr	r3, [pc, #208]	; (80023ec <HAL_SPI_MspInit+0x184>)
 800231a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800231e:	4a33      	ldr	r2, [pc, #204]	; (80023ec <HAL_SPI_MspInit+0x184>)
 8002320:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002324:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002328:	4b30      	ldr	r3, [pc, #192]	; (80023ec <HAL_SPI_MspInit+0x184>)
 800232a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800232e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002332:	60bb      	str	r3, [r7, #8]
 8002334:	68bb      	ldr	r3, [r7, #8]
    PB4 (NJTRST)     ------> SPI2_NSS
    PD3     ------> SPI2_SCK
    PI2     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002336:	2310      	movs	r3, #16
 8002338:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800233c:	2302      	movs	r3, #2
 800233e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002342:	2300      	movs	r3, #0
 8002344:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002348:	2300      	movs	r3, #0
 800234a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 800234e:	2307      	movs	r3, #7
 8002350:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002354:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002358:	4619      	mov	r1, r3
 800235a:	4825      	ldr	r0, [pc, #148]	; (80023f0 <HAL_SPI_MspInit+0x188>)
 800235c:	f002 fd82 	bl	8004e64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002360:	2308      	movs	r3, #8
 8002362:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002366:	2302      	movs	r3, #2
 8002368:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236c:	2300      	movs	r3, #0
 800236e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002372:	2300      	movs	r3, #0
 8002374:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002378:	2305      	movs	r3, #5
 800237a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800237e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002382:	4619      	mov	r1, r3
 8002384:	481b      	ldr	r0, [pc, #108]	; (80023f4 <HAL_SPI_MspInit+0x18c>)
 8002386:	f002 fd6d 	bl	8004e64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800238a:	2304      	movs	r3, #4
 800238c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002390:	2302      	movs	r3, #2
 8002392:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002396:	2300      	movs	r3, #0
 8002398:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800239c:	2300      	movs	r3, #0
 800239e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80023a2:	2305      	movs	r3, #5
 80023a4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80023a8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80023ac:	4619      	mov	r1, r3
 80023ae:	4812      	ldr	r0, [pc, #72]	; (80023f8 <HAL_SPI_MspInit+0x190>)
 80023b0:	f002 fd58 	bl	8004e64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80023b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023b8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023bc:	2302      	movs	r3, #2
 80023be:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c2:	2300      	movs	r3, #0
 80023c4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c8:	2300      	movs	r3, #0
 80023ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80023ce:	2305      	movs	r3, #5
 80023d0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023d4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80023d8:	4619      	mov	r1, r3
 80023da:	4805      	ldr	r0, [pc, #20]	; (80023f0 <HAL_SPI_MspInit+0x188>)
 80023dc:	f002 fd42 	bl	8004e64 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80023e0:	bf00      	nop
 80023e2:	37f0      	adds	r7, #240	; 0xf0
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	40003800 	.word	0x40003800
 80023ec:	58024400 	.word	0x58024400
 80023f0:	58020400 	.word	0x58020400
 80023f4:	58020c00 	.word	0x58020c00
 80023f8:	58022000 	.word	0x58022000

080023fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a0b      	ldr	r2, [pc, #44]	; (8002438 <HAL_TIM_Base_MspInit+0x3c>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d10e      	bne.n	800242c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800240e:	4b0b      	ldr	r3, [pc, #44]	; (800243c <HAL_TIM_Base_MspInit+0x40>)
 8002410:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002414:	4a09      	ldr	r2, [pc, #36]	; (800243c <HAL_TIM_Base_MspInit+0x40>)
 8002416:	f043 0302 	orr.w	r3, r3, #2
 800241a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800241e:	4b07      	ldr	r3, [pc, #28]	; (800243c <HAL_TIM_Base_MspInit+0x40>)
 8002420:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	60fb      	str	r3, [r7, #12]
 800242a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800242c:	bf00      	nop
 800242e:	3714      	adds	r7, #20
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr
 8002438:	40000400 	.word	0x40000400
 800243c:	58024400 	.word	0x58024400

08002440 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b0ba      	sub	sp, #232	; 0xe8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002448:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	605a      	str	r2, [r3, #4]
 8002452:	609a      	str	r2, [r3, #8]
 8002454:	60da      	str	r2, [r3, #12]
 8002456:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002458:	f107 0310 	add.w	r3, r7, #16
 800245c:	22c0      	movs	r2, #192	; 0xc0
 800245e:	2100      	movs	r1, #0
 8002460:	4618      	mov	r0, r3
 8002462:	f009 fe49 	bl	800c0f8 <memset>
  if(huart->Instance==USART3)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a27      	ldr	r2, [pc, #156]	; (8002508 <HAL_UART_MspInit+0xc8>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d146      	bne.n	80024fe <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002470:	f04f 0202 	mov.w	r2, #2
 8002474:	f04f 0300 	mov.w	r3, #0
 8002478:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800247c:	2300      	movs	r3, #0
 800247e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002482:	f107 0310 	add.w	r3, r7, #16
 8002486:	4618      	mov	r0, r3
 8002488:	f004 fad6 	bl	8006a38 <HAL_RCCEx_PeriphCLKConfig>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002492:	f7ff faa7 	bl	80019e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002496:	4b1d      	ldr	r3, [pc, #116]	; (800250c <HAL_UART_MspInit+0xcc>)
 8002498:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800249c:	4a1b      	ldr	r2, [pc, #108]	; (800250c <HAL_UART_MspInit+0xcc>)
 800249e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024a2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80024a6:	4b19      	ldr	r3, [pc, #100]	; (800250c <HAL_UART_MspInit+0xcc>)
 80024a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80024ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024b0:	60fb      	str	r3, [r7, #12]
 80024b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024b4:	4b15      	ldr	r3, [pc, #84]	; (800250c <HAL_UART_MspInit+0xcc>)
 80024b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024ba:	4a14      	ldr	r2, [pc, #80]	; (800250c <HAL_UART_MspInit+0xcc>)
 80024bc:	f043 0302 	orr.w	r3, r3, #2
 80024c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024c4:	4b11      	ldr	r3, [pc, #68]	; (800250c <HAL_UART_MspInit+0xcc>)
 80024c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	60bb      	str	r3, [r7, #8]
 80024d0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80024d2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80024d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024da:	2302      	movs	r3, #2
 80024dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e0:	2300      	movs	r3, #0
 80024e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e6:	2300      	movs	r3, #0
 80024e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80024ec:	2307      	movs	r3, #7
 80024ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024f2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80024f6:	4619      	mov	r1, r3
 80024f8:	4805      	ldr	r0, [pc, #20]	; (8002510 <HAL_UART_MspInit+0xd0>)
 80024fa:	f002 fcb3 	bl	8004e64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80024fe:	bf00      	nop
 8002500:	37e8      	adds	r7, #232	; 0xe8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	40004800 	.word	0x40004800
 800250c:	58024400 	.word	0x58024400
 8002510:	58020400 	.word	0x58020400

08002514 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b0ba      	sub	sp, #232	; 0xe8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800251c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	605a      	str	r2, [r3, #4]
 8002526:	609a      	str	r2, [r3, #8]
 8002528:	60da      	str	r2, [r3, #12]
 800252a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800252c:	f107 0310 	add.w	r3, r7, #16
 8002530:	22c0      	movs	r2, #192	; 0xc0
 8002532:	2100      	movs	r1, #0
 8002534:	4618      	mov	r0, r3
 8002536:	f009 fddf 	bl	800c0f8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a30      	ldr	r2, [pc, #192]	; (8002600 <HAL_PCD_MspInit+0xec>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d159      	bne.n	80025f8 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002544:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002548:	f04f 0300 	mov.w	r3, #0
 800254c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8002550:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002554:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002558:	f107 0310 	add.w	r3, r7, #16
 800255c:	4618      	mov	r0, r3
 800255e:	f004 fa6b 	bl	8006a38 <HAL_RCCEx_PeriphCLKConfig>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8002568:	f7ff fa3c 	bl	80019e4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800256c:	f003 fa6e 	bl	8005a4c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002570:	4b24      	ldr	r3, [pc, #144]	; (8002604 <HAL_PCD_MspInit+0xf0>)
 8002572:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002576:	4a23      	ldr	r2, [pc, #140]	; (8002604 <HAL_PCD_MspInit+0xf0>)
 8002578:	f043 0301 	orr.w	r3, r3, #1
 800257c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002580:	4b20      	ldr	r3, [pc, #128]	; (8002604 <HAL_PCD_MspInit+0xf0>)
 8002582:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	60fb      	str	r3, [r7, #12]
 800258c:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = VBUS_FS2_Pin;
 800258e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002592:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002596:	2300      	movs	r3, #0
 8002598:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259c:	2300      	movs	r3, #0
 800259e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(VBUS_FS2_GPIO_Port, &GPIO_InitStruct);
 80025a2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80025a6:	4619      	mov	r1, r3
 80025a8:	4817      	ldr	r0, [pc, #92]	; (8002608 <HAL_PCD_MspInit+0xf4>)
 80025aa:	f002 fc5b 	bl	8004e64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS2_P_Pin|USB_OTG_FS2_N_Pin;
 80025ae:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80025b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b6:	2302      	movs	r3, #2
 80025b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025bc:	2300      	movs	r3, #0
 80025be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c2:	2300      	movs	r3, #0
 80025c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80025c8:	230a      	movs	r3, #10
 80025ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ce:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80025d2:	4619      	mov	r1, r3
 80025d4:	480c      	ldr	r0, [pc, #48]	; (8002608 <HAL_PCD_MspInit+0xf4>)
 80025d6:	f002 fc45 	bl	8004e64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80025da:	4b0a      	ldr	r3, [pc, #40]	; (8002604 <HAL_PCD_MspInit+0xf0>)
 80025dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80025e0:	4a08      	ldr	r2, [pc, #32]	; (8002604 <HAL_PCD_MspInit+0xf0>)
 80025e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80025e6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80025ea:	4b06      	ldr	r3, [pc, #24]	; (8002604 <HAL_PCD_MspInit+0xf0>)
 80025ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80025f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025f4:	60bb      	str	r3, [r7, #8]
 80025f6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80025f8:	bf00      	nop
 80025fa:	37e8      	adds	r7, #232	; 0xe8
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40080000 	.word	0x40080000
 8002604:	58024400 	.word	0x58024400
 8002608:	58020000 	.word	0x58020000

0800260c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800260c:	b580      	push	{r7, lr}
 800260e:	b0b8      	sub	sp, #224	; 0xe0
 8002610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002612:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002616:	2200      	movs	r2, #0
 8002618:	601a      	str	r2, [r3, #0]
 800261a:	605a      	str	r2, [r3, #4]
 800261c:	609a      	str	r2, [r3, #8]
 800261e:	60da      	str	r2, [r3, #12]
 8002620:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002622:	4b51      	ldr	r3, [pc, #324]	; (8002768 <HAL_FMC_MspInit+0x15c>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2b00      	cmp	r3, #0
 8002628:	f040 8099 	bne.w	800275e <HAL_FMC_MspInit+0x152>
    return;
  }
  FMC_Initialized = 1;
 800262c:	4b4e      	ldr	r3, [pc, #312]	; (8002768 <HAL_FMC_MspInit+0x15c>)
 800262e:	2201      	movs	r2, #1
 8002630:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002632:	f107 0308 	add.w	r3, r7, #8
 8002636:	22c0      	movs	r2, #192	; 0xc0
 8002638:	2100      	movs	r1, #0
 800263a:	4618      	mov	r0, r3
 800263c:	f009 fd5c 	bl	800c0f8 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8002640:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002644:	f04f 0300 	mov.w	r3, #0
 8002648:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 800264c:	2300      	movs	r3, #0
 800264e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002650:	f107 0308 	add.w	r3, r7, #8
 8002654:	4618      	mov	r0, r3
 8002656:	f004 f9ef 	bl	8006a38 <HAL_RCCEx_PeriphCLKConfig>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d001      	beq.n	8002664 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 8002660:	f7ff f9c0 	bl	80019e4 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002664:	4b41      	ldr	r3, [pc, #260]	; (800276c <HAL_FMC_MspInit+0x160>)
 8002666:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800266a:	4a40      	ldr	r2, [pc, #256]	; (800276c <HAL_FMC_MspInit+0x160>)
 800266c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002670:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8002674:	4b3d      	ldr	r3, [pc, #244]	; (800276c <HAL_FMC_MspInit+0x160>)
 8002676:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800267a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800267e:	607b      	str	r3, [r7, #4]
 8002680:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8002682:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002686:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800268a:	2302      	movs	r3, #2
 800268c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002690:	2300      	movs	r3, #0
 8002692:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002696:	2303      	movs	r3, #3
 8002698:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800269c:	230c      	movs	r3, #12
 800269e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026a2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80026a6:	4619      	mov	r1, r3
 80026a8:	4831      	ldr	r0, [pc, #196]	; (8002770 <HAL_FMC_MspInit+0x164>)
 80026aa:	f002 fbdb 	bl	8004e64 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 80026ae:	f248 1333 	movw	r3, #33075	; 0x8133
 80026b2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b6:	2302      	movs	r3, #2
 80026b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026bc:	2300      	movs	r3, #0
 80026be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026c2:	2303      	movs	r3, #3
 80026c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80026c8:	230c      	movs	r3, #12
 80026ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80026ce:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80026d2:	4619      	mov	r1, r3
 80026d4:	4827      	ldr	r0, [pc, #156]	; (8002774 <HAL_FMC_MspInit+0x168>)
 80026d6:	f002 fbc5 	bl	8004e64 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 80026da:	f24c 7303 	movw	r3, #50947	; 0xc703
 80026de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e2:	2302      	movs	r3, #2
 80026e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e8:	2300      	movs	r3, #0
 80026ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ee:	2303      	movs	r3, #3
 80026f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80026f4:	230c      	movs	r3, #12
 80026f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026fa:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80026fe:	4619      	mov	r1, r3
 8002700:	481d      	ldr	r0, [pc, #116]	; (8002778 <HAL_FMC_MspInit+0x16c>)
 8002702:	f002 fbaf 	bl	8004e64 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8002706:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800270a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270e:	2302      	movs	r3, #2
 8002710:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002714:	2300      	movs	r3, #0
 8002716:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800271a:	2303      	movs	r3, #3
 800271c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002720:	230c      	movs	r3, #12
 8002722:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002726:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800272a:	4619      	mov	r1, r3
 800272c:	4813      	ldr	r0, [pc, #76]	; (800277c <HAL_FMC_MspInit+0x170>)
 800272e:	f002 fb99 	bl	8004e64 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002732:	23e0      	movs	r3, #224	; 0xe0
 8002734:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002738:	2302      	movs	r3, #2
 800273a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273e:	2300      	movs	r3, #0
 8002740:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002744:	2303      	movs	r3, #3
 8002746:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800274a:	230c      	movs	r3, #12
 800274c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002750:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002754:	4619      	mov	r1, r3
 8002756:	480a      	ldr	r0, [pc, #40]	; (8002780 <HAL_FMC_MspInit+0x174>)
 8002758:	f002 fb84 	bl	8004e64 <HAL_GPIO_Init>
 800275c:	e000      	b.n	8002760 <HAL_FMC_MspInit+0x154>
    return;
 800275e:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002760:	37e0      	adds	r7, #224	; 0xe0
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	24000d2c 	.word	0x24000d2c
 800276c:	58024400 	.word	0x58024400
 8002770:	58021000 	.word	0x58021000
 8002774:	58021800 	.word	0x58021800
 8002778:	58020c00 	.word	0x58020c00
 800277c:	58021400 	.word	0x58021400
 8002780:	58021c00 	.word	0x58021c00

08002784 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800278c:	f7ff ff3e 	bl	800260c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002790:	bf00      	nop
 8002792:	3708      	adds	r7, #8
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b0ba      	sub	sp, #232	; 0xe8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027a0:	f107 0310 	add.w	r3, r7, #16
 80027a4:	22c0      	movs	r2, #192	; 0xc0
 80027a6:	2100      	movs	r1, #0
 80027a8:	4618      	mov	r0, r3
 80027aa:	f009 fca5 	bl	800c0f8 <memset>
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a45      	ldr	r2, [pc, #276]	; (80028c8 <HAL_SAI_MspInit+0x130>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d13e      	bne.n	8002836 <HAL_SAI_MspInit+0x9e>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 80027b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027bc:	f04f 0300 	mov.w	r3, #0
 80027c0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 80027c4:	2300      	movs	r3, #0
 80027c6:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027c8:	f107 0310 	add.w	r3, r7, #16
 80027cc:	4618      	mov	r0, r3
 80027ce:	f004 f933 	bl	8006a38 <HAL_RCCEx_PeriphCLKConfig>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d001      	beq.n	80027dc <HAL_SAI_MspInit+0x44>
    {
      Error_Handler();
 80027d8:	f7ff f904 	bl	80019e4 <Error_Handler>
    }

    if (SAI2_client == 0)
 80027dc:	4b3b      	ldr	r3, [pc, #236]	; (80028cc <HAL_SAI_MspInit+0x134>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d10e      	bne.n	8002802 <HAL_SAI_MspInit+0x6a>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80027e4:	4b3a      	ldr	r3, [pc, #232]	; (80028d0 <HAL_SAI_MspInit+0x138>)
 80027e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80027ea:	4a39      	ldr	r2, [pc, #228]	; (80028d0 <HAL_SAI_MspInit+0x138>)
 80027ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80027f0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80027f4:	4b36      	ldr	r3, [pc, #216]	; (80028d0 <HAL_SAI_MspInit+0x138>)
 80027f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80027fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027fe:	60fb      	str	r3, [r7, #12]
 8002800:	68fb      	ldr	r3, [r7, #12]
    }
    SAI2_client ++;
 8002802:	4b32      	ldr	r3, [pc, #200]	; (80028cc <HAL_SAI_MspInit+0x134>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	3301      	adds	r3, #1
 8002808:	4a30      	ldr	r2, [pc, #192]	; (80028cc <HAL_SAI_MspInit+0x134>)
 800280a:	6013      	str	r3, [r2, #0]
    PI6     ------> SAI2_SD_A
    PI5     ------> SAI2_SCK_A
    PI4     ------> SAI2_MCLK_A
    PI7     ------> SAI2_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_7;
 800280c:	23f0      	movs	r3, #240	; 0xf0
 800280e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002812:	2302      	movs	r3, #2
 8002814:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002818:	2300      	movs	r3, #0
 800281a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800281e:	2300      	movs	r3, #0
 8002820:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002824:	230a      	movs	r3, #10
 8002826:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800282a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800282e:	4619      	mov	r1, r3
 8002830:	4828      	ldr	r0, [pc, #160]	; (80028d4 <HAL_SAI_MspInit+0x13c>)
 8002832:	f002 fb17 	bl	8004e64 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a27      	ldr	r2, [pc, #156]	; (80028d8 <HAL_SAI_MspInit+0x140>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d13f      	bne.n	80028c0 <HAL_SAI_MspInit+0x128>
    {
      /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8002840:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002844:	f04f 0300 	mov.w	r3, #0
 8002848:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 800284c:	2300      	movs	r3, #0
 800284e:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002850:	f107 0310 	add.w	r3, r7, #16
 8002854:	4618      	mov	r0, r3
 8002856:	f004 f8ef 	bl	8006a38 <HAL_RCCEx_PeriphCLKConfig>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d001      	beq.n	8002864 <HAL_SAI_MspInit+0xcc>
    {
      Error_Handler();
 8002860:	f7ff f8c0 	bl	80019e4 <Error_Handler>
    }

      if (SAI2_client == 0)
 8002864:	4b19      	ldr	r3, [pc, #100]	; (80028cc <HAL_SAI_MspInit+0x134>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d10e      	bne.n	800288a <HAL_SAI_MspInit+0xf2>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800286c:	4b18      	ldr	r3, [pc, #96]	; (80028d0 <HAL_SAI_MspInit+0x138>)
 800286e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002872:	4a17      	ldr	r2, [pc, #92]	; (80028d0 <HAL_SAI_MspInit+0x138>)
 8002874:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002878:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800287c:	4b14      	ldr	r3, [pc, #80]	; (80028d0 <HAL_SAI_MspInit+0x138>)
 800287e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002882:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002886:	60bb      	str	r3, [r7, #8]
 8002888:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 800288a:	4b10      	ldr	r3, [pc, #64]	; (80028cc <HAL_SAI_MspInit+0x134>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	3301      	adds	r3, #1
 8002890:	4a0e      	ldr	r2, [pc, #56]	; (80028cc <HAL_SAI_MspInit+0x134>)
 8002892:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002894:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002898:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800289c:	2302      	movs	r3, #2
 800289e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a2:	2300      	movs	r3, #0
 80028a4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a8:	2300      	movs	r3, #0
 80028aa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80028ae:	230a      	movs	r3, #10
 80028b0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80028b4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80028b8:	4619      	mov	r1, r3
 80028ba:	4808      	ldr	r0, [pc, #32]	; (80028dc <HAL_SAI_MspInit+0x144>)
 80028bc:	f002 fad2 	bl	8004e64 <HAL_GPIO_Init>

    }
}
 80028c0:	bf00      	nop
 80028c2:	37e8      	adds	r7, #232	; 0xe8
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	40015c04 	.word	0x40015c04
 80028cc:	24000d30 	.word	0x24000d30
 80028d0:	58024400 	.word	0x58024400
 80028d4:	58022000 	.word	0x58022000
 80028d8:	40015c24 	.word	0x40015c24
 80028dc:	58021800 	.word	0x58021800

080028e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028e4:	e7fe      	b.n	80028e4 <NMI_Handler+0x4>

080028e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028e6:	b480      	push	{r7}
 80028e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028ea:	e7fe      	b.n	80028ea <HardFault_Handler+0x4>

080028ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028f0:	e7fe      	b.n	80028f0 <MemManage_Handler+0x4>

080028f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028f2:	b480      	push	{r7}
 80028f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028f6:	e7fe      	b.n	80028f6 <BusFault_Handler+0x4>

080028f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028fc:	e7fe      	b.n	80028fc <UsageFault_Handler+0x4>

080028fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028fe:	b480      	push	{r7}
 8002900:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002902:	bf00      	nop
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002910:	bf00      	nop
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr

0800291a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800291a:	b480      	push	{r7}
 800291c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800291e:	bf00      	nop
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800292c:	f000 f926 	bl	8002b7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002930:	bf00      	nop
 8002932:	bd80      	pop	{r7, pc}

08002934 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002938:	4b37      	ldr	r3, [pc, #220]	; (8002a18 <SystemInit+0xe4>)
 800293a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800293e:	4a36      	ldr	r2, [pc, #216]	; (8002a18 <SystemInit+0xe4>)
 8002940:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002944:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002948:	4b34      	ldr	r3, [pc, #208]	; (8002a1c <SystemInit+0xe8>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 030f 	and.w	r3, r3, #15
 8002950:	2b06      	cmp	r3, #6
 8002952:	d807      	bhi.n	8002964 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002954:	4b31      	ldr	r3, [pc, #196]	; (8002a1c <SystemInit+0xe8>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f023 030f 	bic.w	r3, r3, #15
 800295c:	4a2f      	ldr	r2, [pc, #188]	; (8002a1c <SystemInit+0xe8>)
 800295e:	f043 0307 	orr.w	r3, r3, #7
 8002962:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002964:	4b2e      	ldr	r3, [pc, #184]	; (8002a20 <SystemInit+0xec>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a2d      	ldr	r2, [pc, #180]	; (8002a20 <SystemInit+0xec>)
 800296a:	f043 0301 	orr.w	r3, r3, #1
 800296e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002970:	4b2b      	ldr	r3, [pc, #172]	; (8002a20 <SystemInit+0xec>)
 8002972:	2200      	movs	r2, #0
 8002974:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002976:	4b2a      	ldr	r3, [pc, #168]	; (8002a20 <SystemInit+0xec>)
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	4929      	ldr	r1, [pc, #164]	; (8002a20 <SystemInit+0xec>)
 800297c:	4b29      	ldr	r3, [pc, #164]	; (8002a24 <SystemInit+0xf0>)
 800297e:	4013      	ands	r3, r2
 8002980:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002982:	4b26      	ldr	r3, [pc, #152]	; (8002a1c <SystemInit+0xe8>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0308 	and.w	r3, r3, #8
 800298a:	2b00      	cmp	r3, #0
 800298c:	d007      	beq.n	800299e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800298e:	4b23      	ldr	r3, [pc, #140]	; (8002a1c <SystemInit+0xe8>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f023 030f 	bic.w	r3, r3, #15
 8002996:	4a21      	ldr	r2, [pc, #132]	; (8002a1c <SystemInit+0xe8>)
 8002998:	f043 0307 	orr.w	r3, r3, #7
 800299c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800299e:	4b20      	ldr	r3, [pc, #128]	; (8002a20 <SystemInit+0xec>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80029a4:	4b1e      	ldr	r3, [pc, #120]	; (8002a20 <SystemInit+0xec>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80029aa:	4b1d      	ldr	r3, [pc, #116]	; (8002a20 <SystemInit+0xec>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80029b0:	4b1b      	ldr	r3, [pc, #108]	; (8002a20 <SystemInit+0xec>)
 80029b2:	4a1d      	ldr	r2, [pc, #116]	; (8002a28 <SystemInit+0xf4>)
 80029b4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80029b6:	4b1a      	ldr	r3, [pc, #104]	; (8002a20 <SystemInit+0xec>)
 80029b8:	4a1c      	ldr	r2, [pc, #112]	; (8002a2c <SystemInit+0xf8>)
 80029ba:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80029bc:	4b18      	ldr	r3, [pc, #96]	; (8002a20 <SystemInit+0xec>)
 80029be:	4a1c      	ldr	r2, [pc, #112]	; (8002a30 <SystemInit+0xfc>)
 80029c0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80029c2:	4b17      	ldr	r3, [pc, #92]	; (8002a20 <SystemInit+0xec>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80029c8:	4b15      	ldr	r3, [pc, #84]	; (8002a20 <SystemInit+0xec>)
 80029ca:	4a19      	ldr	r2, [pc, #100]	; (8002a30 <SystemInit+0xfc>)
 80029cc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80029ce:	4b14      	ldr	r3, [pc, #80]	; (8002a20 <SystemInit+0xec>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80029d4:	4b12      	ldr	r3, [pc, #72]	; (8002a20 <SystemInit+0xec>)
 80029d6:	4a16      	ldr	r2, [pc, #88]	; (8002a30 <SystemInit+0xfc>)
 80029d8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80029da:	4b11      	ldr	r3, [pc, #68]	; (8002a20 <SystemInit+0xec>)
 80029dc:	2200      	movs	r2, #0
 80029de:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80029e0:	4b0f      	ldr	r3, [pc, #60]	; (8002a20 <SystemInit+0xec>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a0e      	ldr	r2, [pc, #56]	; (8002a20 <SystemInit+0xec>)
 80029e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029ea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80029ec:	4b0c      	ldr	r3, [pc, #48]	; (8002a20 <SystemInit+0xec>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80029f2:	4b10      	ldr	r3, [pc, #64]	; (8002a34 <SystemInit+0x100>)
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	4b10      	ldr	r3, [pc, #64]	; (8002a38 <SystemInit+0x104>)
 80029f8:	4013      	ands	r3, r2
 80029fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029fe:	d202      	bcs.n	8002a06 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002a00:	4b0e      	ldr	r3, [pc, #56]	; (8002a3c <SystemInit+0x108>)
 8002a02:	2201      	movs	r2, #1
 8002a04:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002a06:	4b0e      	ldr	r3, [pc, #56]	; (8002a40 <SystemInit+0x10c>)
 8002a08:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002a0c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002a0e:	bf00      	nop
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr
 8002a18:	e000ed00 	.word	0xe000ed00
 8002a1c:	52002000 	.word	0x52002000
 8002a20:	58024400 	.word	0x58024400
 8002a24:	eaf6ed7f 	.word	0xeaf6ed7f
 8002a28:	02020200 	.word	0x02020200
 8002a2c:	01ff0000 	.word	0x01ff0000
 8002a30:	01010280 	.word	0x01010280
 8002a34:	5c001000 	.word	0x5c001000
 8002a38:	ffff0000 	.word	0xffff0000
 8002a3c:	51008108 	.word	0x51008108
 8002a40:	52004000 	.word	0x52004000

08002a44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002a44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a7c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002a48:	f7ff ff74 	bl	8002934 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a4c:	480c      	ldr	r0, [pc, #48]	; (8002a80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002a4e:	490d      	ldr	r1, [pc, #52]	; (8002a84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002a50:	4a0d      	ldr	r2, [pc, #52]	; (8002a88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002a52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a54:	e002      	b.n	8002a5c <LoopCopyDataInit>

08002a56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a5a:	3304      	adds	r3, #4

08002a5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a60:	d3f9      	bcc.n	8002a56 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a62:	4a0a      	ldr	r2, [pc, #40]	; (8002a8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002a64:	4c0a      	ldr	r4, [pc, #40]	; (8002a90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002a66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a68:	e001      	b.n	8002a6e <LoopFillZerobss>

08002a6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a6c:	3204      	adds	r2, #4

08002a6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a70:	d3fb      	bcc.n	8002a6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a72:	f009 fb0f 	bl	800c094 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a76:	f7fd ff0a 	bl	800088e <main>
  bx  lr
 8002a7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a7c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002a80:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002a84:	24000038 	.word	0x24000038
  ldr r2, =_sidata
 8002a88:	0800c298 	.word	0x0800c298
  ldr r2, =_sbss
 8002a8c:	240000f8 	.word	0x240000f8
  ldr r4, =_ebss
 8002a90:	24000d38 	.word	0x24000d38

08002a94 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a94:	e7fe      	b.n	8002a94 <ADC3_IRQHandler>
	...

08002a98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a9e:	2003      	movs	r0, #3
 8002aa0:	f001 fa26 	bl	8003ef0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002aa4:	f003 fdf2 	bl	800668c <HAL_RCC_GetSysClockFreq>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	4b15      	ldr	r3, [pc, #84]	; (8002b00 <HAL_Init+0x68>)
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	0a1b      	lsrs	r3, r3, #8
 8002ab0:	f003 030f 	and.w	r3, r3, #15
 8002ab4:	4913      	ldr	r1, [pc, #76]	; (8002b04 <HAL_Init+0x6c>)
 8002ab6:	5ccb      	ldrb	r3, [r1, r3]
 8002ab8:	f003 031f 	and.w	r3, r3, #31
 8002abc:	fa22 f303 	lsr.w	r3, r2, r3
 8002ac0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002ac2:	4b0f      	ldr	r3, [pc, #60]	; (8002b00 <HAL_Init+0x68>)
 8002ac4:	699b      	ldr	r3, [r3, #24]
 8002ac6:	f003 030f 	and.w	r3, r3, #15
 8002aca:	4a0e      	ldr	r2, [pc, #56]	; (8002b04 <HAL_Init+0x6c>)
 8002acc:	5cd3      	ldrb	r3, [r2, r3]
 8002ace:	f003 031f 	and.w	r3, r3, #31
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ad8:	4a0b      	ldr	r2, [pc, #44]	; (8002b08 <HAL_Init+0x70>)
 8002ada:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002adc:	4a0b      	ldr	r2, [pc, #44]	; (8002b0c <HAL_Init+0x74>)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ae2:	2000      	movs	r0, #0
 8002ae4:	f000 f814 	bl	8002b10 <HAL_InitTick>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e002      	b.n	8002af8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002af2:	f7fe ff7d 	bl	80019f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002af6:	2300      	movs	r3, #0
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3708      	adds	r7, #8
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	58024400 	.word	0x58024400
 8002b04:	0800c250 	.word	0x0800c250
 8002b08:	2400002c 	.word	0x2400002c
 8002b0c:	24000028 	.word	0x24000028

08002b10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002b18:	4b15      	ldr	r3, [pc, #84]	; (8002b70 <HAL_InitTick+0x60>)
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d101      	bne.n	8002b24 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e021      	b.n	8002b68 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002b24:	4b13      	ldr	r3, [pc, #76]	; (8002b74 <HAL_InitTick+0x64>)
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	4b11      	ldr	r3, [pc, #68]	; (8002b70 <HAL_InitTick+0x60>)
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b32:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f001 f9fd 	bl	8003f3a <HAL_SYSTICK_Config>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e00e      	b.n	8002b68 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2b0f      	cmp	r3, #15
 8002b4e:	d80a      	bhi.n	8002b66 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b50:	2200      	movs	r2, #0
 8002b52:	6879      	ldr	r1, [r7, #4]
 8002b54:	f04f 30ff 	mov.w	r0, #4294967295
 8002b58:	f001 f9d5 	bl	8003f06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b5c:	4a06      	ldr	r2, [pc, #24]	; (8002b78 <HAL_InitTick+0x68>)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b62:	2300      	movs	r3, #0
 8002b64:	e000      	b.n	8002b68 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3708      	adds	r7, #8
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	24000034 	.word	0x24000034
 8002b74:	24000028 	.word	0x24000028
 8002b78:	24000030 	.word	0x24000030

08002b7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002b80:	4b06      	ldr	r3, [pc, #24]	; (8002b9c <HAL_IncTick+0x20>)
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	461a      	mov	r2, r3
 8002b86:	4b06      	ldr	r3, [pc, #24]	; (8002ba0 <HAL_IncTick+0x24>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	4a04      	ldr	r2, [pc, #16]	; (8002ba0 <HAL_IncTick+0x24>)
 8002b8e:	6013      	str	r3, [r2, #0]
}
 8002b90:	bf00      	nop
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	24000034 	.word	0x24000034
 8002ba0:	24000d34 	.word	0x24000d34

08002ba4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ba8:	4b03      	ldr	r3, [pc, #12]	; (8002bb8 <HAL_GetTick+0x14>)
 8002baa:	681b      	ldr	r3, [r3, #0]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	24000d34 	.word	0x24000d34

08002bbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bc4:	f7ff ffee 	bl	8002ba4 <HAL_GetTick>
 8002bc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bd4:	d005      	beq.n	8002be2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bd6:	4b0a      	ldr	r3, [pc, #40]	; (8002c00 <HAL_Delay+0x44>)
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	461a      	mov	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	4413      	add	r3, r2
 8002be0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002be2:	bf00      	nop
 8002be4:	f7ff ffde 	bl	8002ba4 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d8f7      	bhi.n	8002be4 <HAL_Delay+0x28>
  {
  }
}
 8002bf4:	bf00      	nop
 8002bf6:	bf00      	nop
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	24000034 	.word	0x24000034

08002c04 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002c08:	4b03      	ldr	r3, [pc, #12]	; (8002c18 <HAL_GetREVID+0x14>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	0c1b      	lsrs	r3, r3, #16
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr
 8002c18:	5c001000 	.word	0x5c001000

08002c1c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002c24:	4b06      	ldr	r3, [pc, #24]	; (8002c40 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002c2c:	4904      	ldr	r1, [pc, #16]	; (8002c40 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	604b      	str	r3, [r1, #4]
}
 8002c34:	bf00      	nop
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr
 8002c40:	58000400 	.word	0x58000400

08002c44 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002c4e:	4b07      	ldr	r3, [pc, #28]	; (8002c6c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002c50:	685a      	ldr	r2, [r3, #4]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	43db      	mvns	r3, r3
 8002c56:	401a      	ands	r2, r3
 8002c58:	4904      	ldr	r1, [pc, #16]	; (8002c6c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	604b      	str	r3, [r1, #4]
}
 8002c60:	bf00      	nop
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr
 8002c6c:	58000400 	.word	0x58000400

08002c70 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	431a      	orrs	r2, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	609a      	str	r2, [r3, #8]
}
 8002c8a:	bf00      	nop
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr

08002c96 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002c96:	b480      	push	{r7}
 8002c98:	b083      	sub	sp, #12
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
 8002c9e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	431a      	orrs	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	609a      	str	r2, [r3, #8]
}
 8002cb0:	bf00      	nop
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b087      	sub	sp, #28
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	607a      	str	r2, [r7, #4]
 8002ce4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	3360      	adds	r3, #96	; 0x60
 8002cea:	461a      	mov	r2, r3
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	4413      	add	r3, r2
 8002cf2:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	430b      	orrs	r3, r1
 8002d06:	431a      	orrs	r2, r3
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002d0c:	bf00      	nop
 8002d0e:	371c      	adds	r7, #28
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr

08002d18 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b085      	sub	sp, #20
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	f003 031f 	and.w	r3, r3, #31
 8002d32:	6879      	ldr	r1, [r7, #4]
 8002d34:	fa01 f303 	lsl.w	r3, r1, r3
 8002d38:	431a      	orrs	r2, r3
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	611a      	str	r2, [r3, #16]
}
 8002d3e:	bf00      	nop
 8002d40:	3714      	adds	r7, #20
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr

08002d4a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	b087      	sub	sp, #28
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	60f8      	str	r0, [r7, #12]
 8002d52:	60b9      	str	r1, [r7, #8]
 8002d54:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	3360      	adds	r3, #96	; 0x60
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	4413      	add	r3, r2
 8002d62:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	601a      	str	r2, [r3, #0]
  }
}
 8002d74:	bf00      	nop
 8002d76:	371c      	adds	r7, #28
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b087      	sub	sp, #28
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	3330      	adds	r3, #48	; 0x30
 8002d90:	461a      	mov	r2, r3
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	0a1b      	lsrs	r3, r3, #8
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	f003 030c 	and.w	r3, r3, #12
 8002d9c:	4413      	add	r3, r2
 8002d9e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	f003 031f 	and.w	r3, r3, #31
 8002daa:	211f      	movs	r1, #31
 8002dac:	fa01 f303 	lsl.w	r3, r1, r3
 8002db0:	43db      	mvns	r3, r3
 8002db2:	401a      	ands	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	0e9b      	lsrs	r3, r3, #26
 8002db8:	f003 011f 	and.w	r1, r3, #31
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	f003 031f 	and.w	r3, r3, #31
 8002dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc6:	431a      	orrs	r2, r3
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002dcc:	bf00      	nop
 8002dce:	371c      	adds	r7, #28
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b087      	sub	sp, #28
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	3314      	adds	r3, #20
 8002de8:	461a      	mov	r2, r3
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	0e5b      	lsrs	r3, r3, #25
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	f003 0304 	and.w	r3, r3, #4
 8002df4:	4413      	add	r3, r2
 8002df6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	0d1b      	lsrs	r3, r3, #20
 8002e00:	f003 031f 	and.w	r3, r3, #31
 8002e04:	2107      	movs	r1, #7
 8002e06:	fa01 f303 	lsl.w	r3, r1, r3
 8002e0a:	43db      	mvns	r3, r3
 8002e0c:	401a      	ands	r2, r3
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	0d1b      	lsrs	r3, r3, #20
 8002e12:	f003 031f 	and.w	r3, r3, #31
 8002e16:	6879      	ldr	r1, [r7, #4]
 8002e18:	fa01 f303 	lsl.w	r3, r1, r3
 8002e1c:	431a      	orrs	r2, r3
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002e22:	bf00      	nop
 8002e24:	371c      	adds	r7, #28
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
	...

08002e30 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b085      	sub	sp, #20
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e48:	43db      	mvns	r3, r3
 8002e4a:	401a      	ands	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f003 0318 	and.w	r3, r3, #24
 8002e52:	4908      	ldr	r1, [pc, #32]	; (8002e74 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002e54:	40d9      	lsrs	r1, r3
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	400b      	ands	r3, r1
 8002e5a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e5e:	431a      	orrs	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002e66:	bf00      	nop
 8002e68:	3714      	adds	r7, #20
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	000fffff 	.word	0x000fffff

08002e78 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689a      	ldr	r2, [r3, #8]
 8002e84:	4b04      	ldr	r3, [pc, #16]	; (8002e98 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002e86:	4013      	ands	r3, r2
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	6093      	str	r3, [r2, #8]
}
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr
 8002e98:	5fffffc0 	.word	0x5fffffc0

08002e9c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002eac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002eb0:	d101      	bne.n	8002eb6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e000      	b.n	8002eb8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	689a      	ldr	r2, [r3, #8]
 8002ed0:	4b05      	ldr	r3, [pc, #20]	; (8002ee8 <LL_ADC_EnableInternalRegulator+0x24>)
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002edc:	bf00      	nop
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr
 8002ee8:	6fffffc0 	.word	0x6fffffc0

08002eec <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002efc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f00:	d101      	bne.n	8002f06 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002f02:	2301      	movs	r3, #1
 8002f04:	e000      	b.n	8002f08 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f003 0301 	and.w	r3, r3, #1
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d101      	bne.n	8002f2c <LL_ADC_IsEnabled+0x18>
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e000      	b.n	8002f2e <LL_ADC_IsEnabled+0x1a>
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr

08002f3a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	b083      	sub	sp, #12
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f003 0304 	and.w	r3, r3, #4
 8002f4a:	2b04      	cmp	r3, #4
 8002f4c:	d101      	bne.n	8002f52 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e000      	b.n	8002f54 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f52:	2300      	movs	r3, #0
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f003 0308 	and.w	r3, r3, #8
 8002f70:	2b08      	cmp	r3, #8
 8002f72:	d101      	bne.n	8002f78 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002f74:	2301      	movs	r3, #1
 8002f76:	e000      	b.n	8002f7a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	370c      	adds	r7, #12
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
	...

08002f88 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002f88:	b590      	push	{r4, r7, lr}
 8002f8a:	b089      	sub	sp, #36	; 0x24
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f90:	2300      	movs	r3, #0
 8002f92:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002f94:	2300      	movs	r3, #0
 8002f96:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d101      	bne.n	8002fa2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e18f      	b.n	80032c2 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d109      	bne.n	8002fc4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f7fe fd37 	bl	8001a24 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7ff ff67 	bl	8002e9c <LL_ADC_IsDeepPowerDownEnabled>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d004      	beq.n	8002fde <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7ff ff4d 	bl	8002e78 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7ff ff82 	bl	8002eec <LL_ADC_IsInternalRegulatorEnabled>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d114      	bne.n	8003018 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7ff ff66 	bl	8002ec4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ff8:	4b87      	ldr	r3, [pc, #540]	; (8003218 <HAL_ADC_Init+0x290>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	099b      	lsrs	r3, r3, #6
 8002ffe:	4a87      	ldr	r2, [pc, #540]	; (800321c <HAL_ADC_Init+0x294>)
 8003000:	fba2 2303 	umull	r2, r3, r2, r3
 8003004:	099b      	lsrs	r3, r3, #6
 8003006:	3301      	adds	r3, #1
 8003008:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800300a:	e002      	b.n	8003012 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	3b01      	subs	r3, #1
 8003010:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d1f9      	bne.n	800300c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4618      	mov	r0, r3
 800301e:	f7ff ff65 	bl	8002eec <LL_ADC_IsInternalRegulatorEnabled>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d10d      	bne.n	8003044 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800302c:	f043 0210 	orr.w	r2, r3, #16
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003038:	f043 0201 	orr.w	r2, r3, #1
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4618      	mov	r0, r3
 800304a:	f7ff ff76 	bl	8002f3a <LL_ADC_REG_IsConversionOngoing>
 800304e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003054:	f003 0310 	and.w	r3, r3, #16
 8003058:	2b00      	cmp	r3, #0
 800305a:	f040 8129 	bne.w	80032b0 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	2b00      	cmp	r3, #0
 8003062:	f040 8125 	bne.w	80032b0 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800306a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800306e:	f043 0202 	orr.w	r2, r3, #2
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4618      	mov	r0, r3
 800307c:	f7ff ff4a 	bl	8002f14 <LL_ADC_IsEnabled>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d136      	bne.n	80030f4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a65      	ldr	r2, [pc, #404]	; (8003220 <HAL_ADC_Init+0x298>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d004      	beq.n	800309a <HAL_ADC_Init+0x112>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a63      	ldr	r2, [pc, #396]	; (8003224 <HAL_ADC_Init+0x29c>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d10e      	bne.n	80030b8 <HAL_ADC_Init+0x130>
 800309a:	4861      	ldr	r0, [pc, #388]	; (8003220 <HAL_ADC_Init+0x298>)
 800309c:	f7ff ff3a 	bl	8002f14 <LL_ADC_IsEnabled>
 80030a0:	4604      	mov	r4, r0
 80030a2:	4860      	ldr	r0, [pc, #384]	; (8003224 <HAL_ADC_Init+0x29c>)
 80030a4:	f7ff ff36 	bl	8002f14 <LL_ADC_IsEnabled>
 80030a8:	4603      	mov	r3, r0
 80030aa:	4323      	orrs	r3, r4
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	bf0c      	ite	eq
 80030b0:	2301      	moveq	r3, #1
 80030b2:	2300      	movne	r3, #0
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	e008      	b.n	80030ca <HAL_ADC_Init+0x142>
 80030b8:	485b      	ldr	r0, [pc, #364]	; (8003228 <HAL_ADC_Init+0x2a0>)
 80030ba:	f7ff ff2b 	bl	8002f14 <LL_ADC_IsEnabled>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	bf0c      	ite	eq
 80030c4:	2301      	moveq	r3, #1
 80030c6:	2300      	movne	r3, #0
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d012      	beq.n	80030f4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a53      	ldr	r2, [pc, #332]	; (8003220 <HAL_ADC_Init+0x298>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d004      	beq.n	80030e2 <HAL_ADC_Init+0x15a>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a51      	ldr	r2, [pc, #324]	; (8003224 <HAL_ADC_Init+0x29c>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d101      	bne.n	80030e6 <HAL_ADC_Init+0x15e>
 80030e2:	4a52      	ldr	r2, [pc, #328]	; (800322c <HAL_ADC_Init+0x2a4>)
 80030e4:	e000      	b.n	80030e8 <HAL_ADC_Init+0x160>
 80030e6:	4a52      	ldr	r2, [pc, #328]	; (8003230 <HAL_ADC_Init+0x2a8>)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	4619      	mov	r1, r3
 80030ee:	4610      	mov	r0, r2
 80030f0:	f7ff fdbe 	bl	8002c70 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80030f4:	f7ff fd86 	bl	8002c04 <HAL_GetREVID>
 80030f8:	4603      	mov	r3, r0
 80030fa:	f241 0203 	movw	r2, #4099	; 0x1003
 80030fe:	4293      	cmp	r3, r2
 8003100:	d914      	bls.n	800312c <HAL_ADC_Init+0x1a4>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	2b10      	cmp	r3, #16
 8003108:	d110      	bne.n	800312c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	7d5b      	ldrb	r3, [r3, #21]
 800310e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003114:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800311a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	7f1b      	ldrb	r3, [r3, #28]
 8003120:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003122:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003124:	f043 030c 	orr.w	r3, r3, #12
 8003128:	61bb      	str	r3, [r7, #24]
 800312a:	e00d      	b.n	8003148 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	7d5b      	ldrb	r3, [r3, #21]
 8003130:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003136:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800313c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	7f1b      	ldrb	r3, [r3, #28]
 8003142:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003144:	4313      	orrs	r3, r2
 8003146:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	7f1b      	ldrb	r3, [r3, #28]
 800314c:	2b01      	cmp	r3, #1
 800314e:	d106      	bne.n	800315e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a1b      	ldr	r3, [r3, #32]
 8003154:	3b01      	subs	r3, #1
 8003156:	045b      	lsls	r3, r3, #17
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	4313      	orrs	r3, r2
 800315c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003162:	2b00      	cmp	r3, #0
 8003164:	d009      	beq.n	800317a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003172:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	4313      	orrs	r3, r2
 8003178:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68da      	ldr	r2, [r3, #12]
 8003180:	4b2c      	ldr	r3, [pc, #176]	; (8003234 <HAL_ADC_Init+0x2ac>)
 8003182:	4013      	ands	r3, r2
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	6812      	ldr	r2, [r2, #0]
 8003188:	69b9      	ldr	r1, [r7, #24]
 800318a:	430b      	orrs	r3, r1
 800318c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4618      	mov	r0, r3
 8003194:	f7ff fed1 	bl	8002f3a <LL_ADC_REG_IsConversionOngoing>
 8003198:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4618      	mov	r0, r3
 80031a0:	f7ff fede 	bl	8002f60 <LL_ADC_INJ_IsConversionOngoing>
 80031a4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d15f      	bne.n	800326c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d15c      	bne.n	800326c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	7d1b      	ldrb	r3, [r3, #20]
 80031b6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80031bc:	4313      	orrs	r3, r2
 80031be:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68da      	ldr	r2, [r3, #12]
 80031c6:	4b1c      	ldr	r3, [pc, #112]	; (8003238 <HAL_ADC_Init+0x2b0>)
 80031c8:	4013      	ands	r3, r2
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	6812      	ldr	r2, [r2, #0]
 80031ce:	69b9      	ldr	r1, [r7, #24]
 80031d0:	430b      	orrs	r3, r1
 80031d2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d130      	bne.n	8003240 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e2:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	691a      	ldr	r2, [r3, #16]
 80031ea:	4b14      	ldr	r3, [pc, #80]	; (800323c <HAL_ADC_Init+0x2b4>)
 80031ec:	4013      	ands	r3, r2
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80031f2:	3a01      	subs	r2, #1
 80031f4:	0411      	lsls	r1, r2, #16
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80031fa:	4311      	orrs	r1, r2
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003200:	4311      	orrs	r1, r2
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003206:	430a      	orrs	r2, r1
 8003208:	431a      	orrs	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f042 0201 	orr.w	r2, r2, #1
 8003212:	611a      	str	r2, [r3, #16]
 8003214:	e01c      	b.n	8003250 <HAL_ADC_Init+0x2c8>
 8003216:	bf00      	nop
 8003218:	24000028 	.word	0x24000028
 800321c:	053e2d63 	.word	0x053e2d63
 8003220:	40022000 	.word	0x40022000
 8003224:	40022100 	.word	0x40022100
 8003228:	58026000 	.word	0x58026000
 800322c:	40022300 	.word	0x40022300
 8003230:	58026300 	.word	0x58026300
 8003234:	fff0c003 	.word	0xfff0c003
 8003238:	ffffbffc 	.word	0xffffbffc
 800323c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	691a      	ldr	r2, [r3, #16]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f022 0201 	bic.w	r2, r2, #1
 800324e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	430a      	orrs	r2, r1
 8003264:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 fb80 	bl	800396c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	2b01      	cmp	r3, #1
 8003272:	d10c      	bne.n	800328e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327a:	f023 010f 	bic.w	r1, r3, #15
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	1e5a      	subs	r2, r3, #1
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	430a      	orrs	r2, r1
 800328a:	631a      	str	r2, [r3, #48]	; 0x30
 800328c:	e007      	b.n	800329e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f022 020f 	bic.w	r2, r2, #15
 800329c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a2:	f023 0303 	bic.w	r3, r3, #3
 80032a6:	f043 0201 	orr.w	r2, r3, #1
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	655a      	str	r2, [r3, #84]	; 0x54
 80032ae:	e007      	b.n	80032c0 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032b4:	f043 0210 	orr.w	r2, r3, #16
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80032c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3724      	adds	r7, #36	; 0x24
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd90      	pop	{r4, r7, pc}
 80032ca:	bf00      	nop

080032cc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80032cc:	b590      	push	{r4, r7, lr}
 80032ce:	b0a1      	sub	sp, #132	; 0x84
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032d6:	2300      	movs	r3, #0
 80032d8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80032dc:	2300      	movs	r3, #0
 80032de:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	4a9d      	ldr	r2, [pc, #628]	; (800355c <HAL_ADC_ConfigChannel+0x290>)
 80032e6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d101      	bne.n	80032f6 <HAL_ADC_ConfigChannel+0x2a>
 80032f2:	2302      	movs	r3, #2
 80032f4:	e321      	b.n	800393a <HAL_ADC_ConfigChannel+0x66e>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2201      	movs	r2, #1
 80032fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4618      	mov	r0, r3
 8003304:	f7ff fe19 	bl	8002f3a <LL_ADC_REG_IsConversionOngoing>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	f040 8306 	bne.w	800391c <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003318:	2b00      	cmp	r3, #0
 800331a:	d108      	bne.n	800332e <HAL_ADC_ConfigChannel+0x62>
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	0e9b      	lsrs	r3, r3, #26
 8003322:	f003 031f 	and.w	r3, r3, #31
 8003326:	2201      	movs	r2, #1
 8003328:	fa02 f303 	lsl.w	r3, r2, r3
 800332c:	e016      	b.n	800335c <HAL_ADC_ConfigChannel+0x90>
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003334:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003336:	fa93 f3a3 	rbit	r3, r3
 800333a:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800333c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800333e:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003340:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003342:	2b00      	cmp	r3, #0
 8003344:	d101      	bne.n	800334a <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8003346:	2320      	movs	r3, #32
 8003348:	e003      	b.n	8003352 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800334a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800334c:	fab3 f383 	clz	r3, r3
 8003350:	b2db      	uxtb	r3, r3
 8003352:	f003 031f 	and.w	r3, r3, #31
 8003356:	2201      	movs	r2, #1
 8003358:	fa02 f303 	lsl.w	r3, r2, r3
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	6812      	ldr	r2, [r2, #0]
 8003360:	69d1      	ldr	r1, [r2, #28]
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	6812      	ldr	r2, [r2, #0]
 8003366:	430b      	orrs	r3, r1
 8003368:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6818      	ldr	r0, [r3, #0]
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	6859      	ldr	r1, [r3, #4]
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	461a      	mov	r2, r3
 8003378:	f7ff fd02 	bl	8002d80 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4618      	mov	r0, r3
 8003382:	f7ff fdda 	bl	8002f3a <LL_ADC_REG_IsConversionOngoing>
 8003386:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4618      	mov	r0, r3
 800338e:	f7ff fde7 	bl	8002f60 <LL_ADC_INJ_IsConversionOngoing>
 8003392:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003394:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003396:	2b00      	cmp	r3, #0
 8003398:	f040 80b3 	bne.w	8003502 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800339c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f040 80af 	bne.w	8003502 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6818      	ldr	r0, [r3, #0]
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	6819      	ldr	r1, [r3, #0]
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	461a      	mov	r2, r3
 80033b2:	f7ff fd11 	bl	8002dd8 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80033b6:	4b6a      	ldr	r3, [pc, #424]	; (8003560 <HAL_ADC_ConfigChannel+0x294>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80033be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033c2:	d10b      	bne.n	80033dc <HAL_ADC_ConfigChannel+0x110>
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	695a      	ldr	r2, [r3, #20]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	089b      	lsrs	r3, r3, #2
 80033d0:	f003 0307 	and.w	r3, r3, #7
 80033d4:	005b      	lsls	r3, r3, #1
 80033d6:	fa02 f303 	lsl.w	r3, r2, r3
 80033da:	e01d      	b.n	8003418 <HAL_ADC_ConfigChannel+0x14c>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	f003 0310 	and.w	r3, r3, #16
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d10b      	bne.n	8003402 <HAL_ADC_ConfigChannel+0x136>
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	695a      	ldr	r2, [r3, #20]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	089b      	lsrs	r3, r3, #2
 80033f6:	f003 0307 	and.w	r3, r3, #7
 80033fa:	005b      	lsls	r3, r3, #1
 80033fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003400:	e00a      	b.n	8003418 <HAL_ADC_ConfigChannel+0x14c>
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	695a      	ldr	r2, [r3, #20]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	089b      	lsrs	r3, r3, #2
 800340e:	f003 0304 	and.w	r3, r3, #4
 8003412:	005b      	lsls	r3, r3, #1
 8003414:	fa02 f303 	lsl.w	r3, r2, r3
 8003418:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	2b04      	cmp	r3, #4
 8003420:	d027      	beq.n	8003472 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6818      	ldr	r0, [r3, #0]
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	6919      	ldr	r1, [r3, #16]
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003430:	f7ff fc52 	bl	8002cd8 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6818      	ldr	r0, [r3, #0]
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	6919      	ldr	r1, [r3, #16]
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	7e5b      	ldrb	r3, [r3, #25]
 8003440:	2b01      	cmp	r3, #1
 8003442:	d102      	bne.n	800344a <HAL_ADC_ConfigChannel+0x17e>
 8003444:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003448:	e000      	b.n	800344c <HAL_ADC_ConfigChannel+0x180>
 800344a:	2300      	movs	r3, #0
 800344c:	461a      	mov	r2, r3
 800344e:	f7ff fc7c 	bl	8002d4a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6818      	ldr	r0, [r3, #0]
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	6919      	ldr	r1, [r3, #16]
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	7e1b      	ldrb	r3, [r3, #24]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d102      	bne.n	8003468 <HAL_ADC_ConfigChannel+0x19c>
 8003462:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003466:	e000      	b.n	800346a <HAL_ADC_ConfigChannel+0x19e>
 8003468:	2300      	movs	r3, #0
 800346a:	461a      	mov	r2, r3
 800346c:	f7ff fc54 	bl	8002d18 <LL_ADC_SetDataRightShift>
 8003470:	e047      	b.n	8003502 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003478:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	069b      	lsls	r3, r3, #26
 8003482:	429a      	cmp	r2, r3
 8003484:	d107      	bne.n	8003496 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003494:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800349c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	069b      	lsls	r3, r3, #26
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d107      	bne.n	80034ba <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80034b8:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034c0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	069b      	lsls	r3, r3, #26
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d107      	bne.n	80034de <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80034dc:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034e4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	069b      	lsls	r3, r3, #26
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d107      	bne.n	8003502 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003500:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4618      	mov	r0, r3
 8003508:	f7ff fd04 	bl	8002f14 <LL_ADC_IsEnabled>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	f040 820d 	bne.w	800392e <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6818      	ldr	r0, [r3, #0]
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	6819      	ldr	r1, [r3, #0]
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	461a      	mov	r2, r3
 8003522:	f7ff fc85 	bl	8002e30 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	4a0c      	ldr	r2, [pc, #48]	; (800355c <HAL_ADC_ConfigChannel+0x290>)
 800352c:	4293      	cmp	r3, r2
 800352e:	f040 8133 	bne.w	8003798 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800353e:	2b00      	cmp	r3, #0
 8003540:	d110      	bne.n	8003564 <HAL_ADC_ConfigChannel+0x298>
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	0e9b      	lsrs	r3, r3, #26
 8003548:	3301      	adds	r3, #1
 800354a:	f003 031f 	and.w	r3, r3, #31
 800354e:	2b09      	cmp	r3, #9
 8003550:	bf94      	ite	ls
 8003552:	2301      	movls	r3, #1
 8003554:	2300      	movhi	r3, #0
 8003556:	b2db      	uxtb	r3, r3
 8003558:	e01e      	b.n	8003598 <HAL_ADC_ConfigChannel+0x2cc>
 800355a:	bf00      	nop
 800355c:	47ff0000 	.word	0x47ff0000
 8003560:	5c001000 	.word	0x5c001000
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800356a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800356c:	fa93 f3a3 	rbit	r3, r3
 8003570:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003572:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003574:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003576:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003578:	2b00      	cmp	r3, #0
 800357a:	d101      	bne.n	8003580 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 800357c:	2320      	movs	r3, #32
 800357e:	e003      	b.n	8003588 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003580:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003582:	fab3 f383 	clz	r3, r3
 8003586:	b2db      	uxtb	r3, r3
 8003588:	3301      	adds	r3, #1
 800358a:	f003 031f 	and.w	r3, r3, #31
 800358e:	2b09      	cmp	r3, #9
 8003590:	bf94      	ite	ls
 8003592:	2301      	movls	r3, #1
 8003594:	2300      	movhi	r3, #0
 8003596:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003598:	2b00      	cmp	r3, #0
 800359a:	d079      	beq.n	8003690 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d107      	bne.n	80035b8 <HAL_ADC_ConfigChannel+0x2ec>
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	0e9b      	lsrs	r3, r3, #26
 80035ae:	3301      	adds	r3, #1
 80035b0:	069b      	lsls	r3, r3, #26
 80035b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035b6:	e015      	b.n	80035e4 <HAL_ADC_ConfigChannel+0x318>
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035c0:	fa93 f3a3 	rbit	r3, r3
 80035c4:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80035c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035c8:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80035ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d101      	bne.n	80035d4 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80035d0:	2320      	movs	r3, #32
 80035d2:	e003      	b.n	80035dc <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80035d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035d6:	fab3 f383 	clz	r3, r3
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	3301      	adds	r3, #1
 80035de:	069b      	lsls	r3, r3, #26
 80035e0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d109      	bne.n	8003604 <HAL_ADC_ConfigChannel+0x338>
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	0e9b      	lsrs	r3, r3, #26
 80035f6:	3301      	adds	r3, #1
 80035f8:	f003 031f 	and.w	r3, r3, #31
 80035fc:	2101      	movs	r1, #1
 80035fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003602:	e017      	b.n	8003634 <HAL_ADC_ConfigChannel+0x368>
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800360a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800360c:	fa93 f3a3 	rbit	r3, r3
 8003610:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003614:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003616:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003618:	2b00      	cmp	r3, #0
 800361a:	d101      	bne.n	8003620 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 800361c:	2320      	movs	r3, #32
 800361e:	e003      	b.n	8003628 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8003620:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003622:	fab3 f383 	clz	r3, r3
 8003626:	b2db      	uxtb	r3, r3
 8003628:	3301      	adds	r3, #1
 800362a:	f003 031f 	and.w	r3, r3, #31
 800362e:	2101      	movs	r1, #1
 8003630:	fa01 f303 	lsl.w	r3, r1, r3
 8003634:	ea42 0103 	orr.w	r1, r2, r3
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003640:	2b00      	cmp	r3, #0
 8003642:	d10a      	bne.n	800365a <HAL_ADC_ConfigChannel+0x38e>
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	0e9b      	lsrs	r3, r3, #26
 800364a:	3301      	adds	r3, #1
 800364c:	f003 021f 	and.w	r2, r3, #31
 8003650:	4613      	mov	r3, r2
 8003652:	005b      	lsls	r3, r3, #1
 8003654:	4413      	add	r3, r2
 8003656:	051b      	lsls	r3, r3, #20
 8003658:	e018      	b.n	800368c <HAL_ADC_ConfigChannel+0x3c0>
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003662:	fa93 f3a3 	rbit	r3, r3
 8003666:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800366a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800366c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800366e:	2b00      	cmp	r3, #0
 8003670:	d101      	bne.n	8003676 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8003672:	2320      	movs	r3, #32
 8003674:	e003      	b.n	800367e <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8003676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003678:	fab3 f383 	clz	r3, r3
 800367c:	b2db      	uxtb	r3, r3
 800367e:	3301      	adds	r3, #1
 8003680:	f003 021f 	and.w	r2, r3, #31
 8003684:	4613      	mov	r3, r2
 8003686:	005b      	lsls	r3, r3, #1
 8003688:	4413      	add	r3, r2
 800368a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800368c:	430b      	orrs	r3, r1
 800368e:	e07e      	b.n	800378e <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003698:	2b00      	cmp	r3, #0
 800369a:	d107      	bne.n	80036ac <HAL_ADC_ConfigChannel+0x3e0>
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	0e9b      	lsrs	r3, r3, #26
 80036a2:	3301      	adds	r3, #1
 80036a4:	069b      	lsls	r3, r3, #26
 80036a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036aa:	e015      	b.n	80036d8 <HAL_ADC_ConfigChannel+0x40c>
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b4:	fa93 f3a3 	rbit	r3, r3
 80036b8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80036ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80036be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d101      	bne.n	80036c8 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80036c4:	2320      	movs	r3, #32
 80036c6:	e003      	b.n	80036d0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80036c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ca:	fab3 f383 	clz	r3, r3
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	3301      	adds	r3, #1
 80036d2:	069b      	lsls	r3, r3, #26
 80036d4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d109      	bne.n	80036f8 <HAL_ADC_ConfigChannel+0x42c>
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	0e9b      	lsrs	r3, r3, #26
 80036ea:	3301      	adds	r3, #1
 80036ec:	f003 031f 	and.w	r3, r3, #31
 80036f0:	2101      	movs	r1, #1
 80036f2:	fa01 f303 	lsl.w	r3, r1, r3
 80036f6:	e017      	b.n	8003728 <HAL_ADC_ConfigChannel+0x45c>
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	fa93 f3a3 	rbit	r3, r3
 8003704:	61bb      	str	r3, [r7, #24]
  return result;
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800370a:	6a3b      	ldr	r3, [r7, #32]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d101      	bne.n	8003714 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8003710:	2320      	movs	r3, #32
 8003712:	e003      	b.n	800371c <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8003714:	6a3b      	ldr	r3, [r7, #32]
 8003716:	fab3 f383 	clz	r3, r3
 800371a:	b2db      	uxtb	r3, r3
 800371c:	3301      	adds	r3, #1
 800371e:	f003 031f 	and.w	r3, r3, #31
 8003722:	2101      	movs	r1, #1
 8003724:	fa01 f303 	lsl.w	r3, r1, r3
 8003728:	ea42 0103 	orr.w	r1, r2, r3
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003734:	2b00      	cmp	r3, #0
 8003736:	d10d      	bne.n	8003754 <HAL_ADC_ConfigChannel+0x488>
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	0e9b      	lsrs	r3, r3, #26
 800373e:	3301      	adds	r3, #1
 8003740:	f003 021f 	and.w	r2, r3, #31
 8003744:	4613      	mov	r3, r2
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	4413      	add	r3, r2
 800374a:	3b1e      	subs	r3, #30
 800374c:	051b      	lsls	r3, r3, #20
 800374e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003752:	e01b      	b.n	800378c <HAL_ADC_ConfigChannel+0x4c0>
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	fa93 f3a3 	rbit	r3, r3
 8003760:	60fb      	str	r3, [r7, #12]
  return result;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d101      	bne.n	8003770 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 800376c:	2320      	movs	r3, #32
 800376e:	e003      	b.n	8003778 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	fab3 f383 	clz	r3, r3
 8003776:	b2db      	uxtb	r3, r3
 8003778:	3301      	adds	r3, #1
 800377a:	f003 021f 	and.w	r2, r3, #31
 800377e:	4613      	mov	r3, r2
 8003780:	005b      	lsls	r3, r3, #1
 8003782:	4413      	add	r3, r2
 8003784:	3b1e      	subs	r3, #30
 8003786:	051b      	lsls	r3, r3, #20
 8003788:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800378c:	430b      	orrs	r3, r1
 800378e:	683a      	ldr	r2, [r7, #0]
 8003790:	6892      	ldr	r2, [r2, #8]
 8003792:	4619      	mov	r1, r3
 8003794:	f7ff fb20 	bl	8002dd8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2b00      	cmp	r3, #0
 800379e:	f280 80c6 	bge.w	800392e <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a67      	ldr	r2, [pc, #412]	; (8003944 <HAL_ADC_ConfigChannel+0x678>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d004      	beq.n	80037b6 <HAL_ADC_ConfigChannel+0x4ea>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a65      	ldr	r2, [pc, #404]	; (8003948 <HAL_ADC_ConfigChannel+0x67c>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d101      	bne.n	80037ba <HAL_ADC_ConfigChannel+0x4ee>
 80037b6:	4b65      	ldr	r3, [pc, #404]	; (800394c <HAL_ADC_ConfigChannel+0x680>)
 80037b8:	e000      	b.n	80037bc <HAL_ADC_ConfigChannel+0x4f0>
 80037ba:	4b65      	ldr	r3, [pc, #404]	; (8003950 <HAL_ADC_ConfigChannel+0x684>)
 80037bc:	4618      	mov	r0, r3
 80037be:	f7ff fa7d 	bl	8002cbc <LL_ADC_GetCommonPathInternalCh>
 80037c2:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a5e      	ldr	r2, [pc, #376]	; (8003944 <HAL_ADC_ConfigChannel+0x678>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d004      	beq.n	80037d8 <HAL_ADC_ConfigChannel+0x50c>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a5d      	ldr	r2, [pc, #372]	; (8003948 <HAL_ADC_ConfigChannel+0x67c>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d10e      	bne.n	80037f6 <HAL_ADC_ConfigChannel+0x52a>
 80037d8:	485a      	ldr	r0, [pc, #360]	; (8003944 <HAL_ADC_ConfigChannel+0x678>)
 80037da:	f7ff fb9b 	bl	8002f14 <LL_ADC_IsEnabled>
 80037de:	4604      	mov	r4, r0
 80037e0:	4859      	ldr	r0, [pc, #356]	; (8003948 <HAL_ADC_ConfigChannel+0x67c>)
 80037e2:	f7ff fb97 	bl	8002f14 <LL_ADC_IsEnabled>
 80037e6:	4603      	mov	r3, r0
 80037e8:	4323      	orrs	r3, r4
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	bf0c      	ite	eq
 80037ee:	2301      	moveq	r3, #1
 80037f0:	2300      	movne	r3, #0
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	e008      	b.n	8003808 <HAL_ADC_ConfigChannel+0x53c>
 80037f6:	4857      	ldr	r0, [pc, #348]	; (8003954 <HAL_ADC_ConfigChannel+0x688>)
 80037f8:	f7ff fb8c 	bl	8002f14 <LL_ADC_IsEnabled>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	bf0c      	ite	eq
 8003802:	2301      	moveq	r3, #1
 8003804:	2300      	movne	r3, #0
 8003806:	b2db      	uxtb	r3, r3
 8003808:	2b00      	cmp	r3, #0
 800380a:	d07d      	beq.n	8003908 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a51      	ldr	r2, [pc, #324]	; (8003958 <HAL_ADC_ConfigChannel+0x68c>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d130      	bne.n	8003878 <HAL_ADC_ConfigChannel+0x5ac>
 8003816:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003818:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d12b      	bne.n	8003878 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a4b      	ldr	r2, [pc, #300]	; (8003954 <HAL_ADC_ConfigChannel+0x688>)
 8003826:	4293      	cmp	r3, r2
 8003828:	f040 8081 	bne.w	800392e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a44      	ldr	r2, [pc, #272]	; (8003944 <HAL_ADC_ConfigChannel+0x678>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d004      	beq.n	8003840 <HAL_ADC_ConfigChannel+0x574>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a43      	ldr	r2, [pc, #268]	; (8003948 <HAL_ADC_ConfigChannel+0x67c>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d101      	bne.n	8003844 <HAL_ADC_ConfigChannel+0x578>
 8003840:	4a42      	ldr	r2, [pc, #264]	; (800394c <HAL_ADC_ConfigChannel+0x680>)
 8003842:	e000      	b.n	8003846 <HAL_ADC_ConfigChannel+0x57a>
 8003844:	4a42      	ldr	r2, [pc, #264]	; (8003950 <HAL_ADC_ConfigChannel+0x684>)
 8003846:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003848:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800384c:	4619      	mov	r1, r3
 800384e:	4610      	mov	r0, r2
 8003850:	f7ff fa21 	bl	8002c96 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003854:	4b41      	ldr	r3, [pc, #260]	; (800395c <HAL_ADC_ConfigChannel+0x690>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	099b      	lsrs	r3, r3, #6
 800385a:	4a41      	ldr	r2, [pc, #260]	; (8003960 <HAL_ADC_ConfigChannel+0x694>)
 800385c:	fba2 2303 	umull	r2, r3, r2, r3
 8003860:	099b      	lsrs	r3, r3, #6
 8003862:	3301      	adds	r3, #1
 8003864:	005b      	lsls	r3, r3, #1
 8003866:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003868:	e002      	b.n	8003870 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	3b01      	subs	r3, #1
 800386e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1f9      	bne.n	800386a <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003876:	e05a      	b.n	800392e <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a39      	ldr	r2, [pc, #228]	; (8003964 <HAL_ADC_ConfigChannel+0x698>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d11e      	bne.n	80038c0 <HAL_ADC_ConfigChannel+0x5f4>
 8003882:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003884:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d119      	bne.n	80038c0 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a30      	ldr	r2, [pc, #192]	; (8003954 <HAL_ADC_ConfigChannel+0x688>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d14b      	bne.n	800392e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a2a      	ldr	r2, [pc, #168]	; (8003944 <HAL_ADC_ConfigChannel+0x678>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d004      	beq.n	80038aa <HAL_ADC_ConfigChannel+0x5de>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a28      	ldr	r2, [pc, #160]	; (8003948 <HAL_ADC_ConfigChannel+0x67c>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d101      	bne.n	80038ae <HAL_ADC_ConfigChannel+0x5e2>
 80038aa:	4a28      	ldr	r2, [pc, #160]	; (800394c <HAL_ADC_ConfigChannel+0x680>)
 80038ac:	e000      	b.n	80038b0 <HAL_ADC_ConfigChannel+0x5e4>
 80038ae:	4a28      	ldr	r2, [pc, #160]	; (8003950 <HAL_ADC_ConfigChannel+0x684>)
 80038b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038b6:	4619      	mov	r1, r3
 80038b8:	4610      	mov	r0, r2
 80038ba:	f7ff f9ec 	bl	8002c96 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80038be:	e036      	b.n	800392e <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a28      	ldr	r2, [pc, #160]	; (8003968 <HAL_ADC_ConfigChannel+0x69c>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d131      	bne.n	800392e <HAL_ADC_ConfigChannel+0x662>
 80038ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d12c      	bne.n	800392e <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a1e      	ldr	r2, [pc, #120]	; (8003954 <HAL_ADC_ConfigChannel+0x688>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d127      	bne.n	800392e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a18      	ldr	r2, [pc, #96]	; (8003944 <HAL_ADC_ConfigChannel+0x678>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d004      	beq.n	80038f2 <HAL_ADC_ConfigChannel+0x626>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a16      	ldr	r2, [pc, #88]	; (8003948 <HAL_ADC_ConfigChannel+0x67c>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d101      	bne.n	80038f6 <HAL_ADC_ConfigChannel+0x62a>
 80038f2:	4a16      	ldr	r2, [pc, #88]	; (800394c <HAL_ADC_ConfigChannel+0x680>)
 80038f4:	e000      	b.n	80038f8 <HAL_ADC_ConfigChannel+0x62c>
 80038f6:	4a16      	ldr	r2, [pc, #88]	; (8003950 <HAL_ADC_ConfigChannel+0x684>)
 80038f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80038fe:	4619      	mov	r1, r3
 8003900:	4610      	mov	r0, r2
 8003902:	f7ff f9c8 	bl	8002c96 <LL_ADC_SetCommonPathInternalCh>
 8003906:	e012      	b.n	800392e <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800390c:	f043 0220 	orr.w	r2, r3, #32
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800391a:	e008      	b.n	800392e <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003920:	f043 0220 	orr.w	r2, r3, #32
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003936:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800393a:	4618      	mov	r0, r3
 800393c:	3784      	adds	r7, #132	; 0x84
 800393e:	46bd      	mov	sp, r7
 8003940:	bd90      	pop	{r4, r7, pc}
 8003942:	bf00      	nop
 8003944:	40022000 	.word	0x40022000
 8003948:	40022100 	.word	0x40022100
 800394c:	40022300 	.word	0x40022300
 8003950:	58026300 	.word	0x58026300
 8003954:	58026000 	.word	0x58026000
 8003958:	cb840000 	.word	0xcb840000
 800395c:	24000028 	.word	0x24000028
 8003960:	053e2d63 	.word	0x053e2d63
 8003964:	c7520000 	.word	0xc7520000
 8003968:	cfb80000 	.word	0xcfb80000

0800396c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a7a      	ldr	r2, [pc, #488]	; (8003b64 <ADC_ConfigureBoostMode+0x1f8>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d004      	beq.n	8003988 <ADC_ConfigureBoostMode+0x1c>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a79      	ldr	r2, [pc, #484]	; (8003b68 <ADC_ConfigureBoostMode+0x1fc>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d109      	bne.n	800399c <ADC_ConfigureBoostMode+0x30>
 8003988:	4b78      	ldr	r3, [pc, #480]	; (8003b6c <ADC_ConfigureBoostMode+0x200>)
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003990:	2b00      	cmp	r3, #0
 8003992:	bf14      	ite	ne
 8003994:	2301      	movne	r3, #1
 8003996:	2300      	moveq	r3, #0
 8003998:	b2db      	uxtb	r3, r3
 800399a:	e008      	b.n	80039ae <ADC_ConfigureBoostMode+0x42>
 800399c:	4b74      	ldr	r3, [pc, #464]	; (8003b70 <ADC_ConfigureBoostMode+0x204>)
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	bf14      	ite	ne
 80039a8:	2301      	movne	r3, #1
 80039aa:	2300      	moveq	r3, #0
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d01c      	beq.n	80039ec <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80039b2:	f002 ffe5 	bl	8006980 <HAL_RCC_GetHCLKFreq>
 80039b6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80039c0:	d010      	beq.n	80039e4 <ADC_ConfigureBoostMode+0x78>
 80039c2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80039c6:	d873      	bhi.n	8003ab0 <ADC_ConfigureBoostMode+0x144>
 80039c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039cc:	d002      	beq.n	80039d4 <ADC_ConfigureBoostMode+0x68>
 80039ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039d2:	d16d      	bne.n	8003ab0 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	0c1b      	lsrs	r3, r3, #16
 80039da:	68fa      	ldr	r2, [r7, #12]
 80039dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e0:	60fb      	str	r3, [r7, #12]
        break;
 80039e2:	e068      	b.n	8003ab6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	089b      	lsrs	r3, r3, #2
 80039e8:	60fb      	str	r3, [r7, #12]
        break;
 80039ea:	e064      	b.n	8003ab6 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80039ec:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80039f0:	f04f 0100 	mov.w	r1, #0
 80039f4:	f004 fa2a 	bl	8007e4c <HAL_RCCEx_GetPeriphCLKFreq>
 80039f8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003a02:	d051      	beq.n	8003aa8 <ADC_ConfigureBoostMode+0x13c>
 8003a04:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003a08:	d854      	bhi.n	8003ab4 <ADC_ConfigureBoostMode+0x148>
 8003a0a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003a0e:	d047      	beq.n	8003aa0 <ADC_ConfigureBoostMode+0x134>
 8003a10:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003a14:	d84e      	bhi.n	8003ab4 <ADC_ConfigureBoostMode+0x148>
 8003a16:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003a1a:	d03d      	beq.n	8003a98 <ADC_ConfigureBoostMode+0x12c>
 8003a1c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003a20:	d848      	bhi.n	8003ab4 <ADC_ConfigureBoostMode+0x148>
 8003a22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a26:	d033      	beq.n	8003a90 <ADC_ConfigureBoostMode+0x124>
 8003a28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a2c:	d842      	bhi.n	8003ab4 <ADC_ConfigureBoostMode+0x148>
 8003a2e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003a32:	d029      	beq.n	8003a88 <ADC_ConfigureBoostMode+0x11c>
 8003a34:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003a38:	d83c      	bhi.n	8003ab4 <ADC_ConfigureBoostMode+0x148>
 8003a3a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003a3e:	d01a      	beq.n	8003a76 <ADC_ConfigureBoostMode+0x10a>
 8003a40:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003a44:	d836      	bhi.n	8003ab4 <ADC_ConfigureBoostMode+0x148>
 8003a46:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003a4a:	d014      	beq.n	8003a76 <ADC_ConfigureBoostMode+0x10a>
 8003a4c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003a50:	d830      	bhi.n	8003ab4 <ADC_ConfigureBoostMode+0x148>
 8003a52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a56:	d00e      	beq.n	8003a76 <ADC_ConfigureBoostMode+0x10a>
 8003a58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a5c:	d82a      	bhi.n	8003ab4 <ADC_ConfigureBoostMode+0x148>
 8003a5e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003a62:	d008      	beq.n	8003a76 <ADC_ConfigureBoostMode+0x10a>
 8003a64:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003a68:	d824      	bhi.n	8003ab4 <ADC_ConfigureBoostMode+0x148>
 8003a6a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a6e:	d002      	beq.n	8003a76 <ADC_ConfigureBoostMode+0x10a>
 8003a70:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003a74:	d11e      	bne.n	8003ab4 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	0c9b      	lsrs	r3, r3, #18
 8003a7c:	005b      	lsls	r3, r3, #1
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a84:	60fb      	str	r3, [r7, #12]
        break;
 8003a86:	e016      	b.n	8003ab6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	091b      	lsrs	r3, r3, #4
 8003a8c:	60fb      	str	r3, [r7, #12]
        break;
 8003a8e:	e012      	b.n	8003ab6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	095b      	lsrs	r3, r3, #5
 8003a94:	60fb      	str	r3, [r7, #12]
        break;
 8003a96:	e00e      	b.n	8003ab6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	099b      	lsrs	r3, r3, #6
 8003a9c:	60fb      	str	r3, [r7, #12]
        break;
 8003a9e:	e00a      	b.n	8003ab6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	09db      	lsrs	r3, r3, #7
 8003aa4:	60fb      	str	r3, [r7, #12]
        break;
 8003aa6:	e006      	b.n	8003ab6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	0a1b      	lsrs	r3, r3, #8
 8003aac:	60fb      	str	r3, [r7, #12]
        break;
 8003aae:	e002      	b.n	8003ab6 <ADC_ConfigureBoostMode+0x14a>
        break;
 8003ab0:	bf00      	nop
 8003ab2:	e000      	b.n	8003ab6 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003ab4:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003ab6:	f7ff f8a5 	bl	8002c04 <HAL_GetREVID>
 8003aba:	4603      	mov	r3, r0
 8003abc:	f241 0203 	movw	r2, #4099	; 0x1003
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d815      	bhi.n	8003af0 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	4a2b      	ldr	r2, [pc, #172]	; (8003b74 <ADC_ConfigureBoostMode+0x208>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d908      	bls.n	8003ade <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	689a      	ldr	r2, [r3, #8]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ada:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003adc:	e03e      	b.n	8003b5c <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	689a      	ldr	r2, [r3, #8]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003aec:	609a      	str	r2, [r3, #8]
}
 8003aee:	e035      	b.n	8003b5c <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	085b      	lsrs	r3, r3, #1
 8003af4:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	4a1f      	ldr	r2, [pc, #124]	; (8003b78 <ADC_ConfigureBoostMode+0x20c>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d808      	bhi.n	8003b10 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	689a      	ldr	r2, [r3, #8]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003b0c:	609a      	str	r2, [r3, #8]
}
 8003b0e:	e025      	b.n	8003b5c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	4a1a      	ldr	r2, [pc, #104]	; (8003b7c <ADC_ConfigureBoostMode+0x210>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d80a      	bhi.n	8003b2e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b2a:	609a      	str	r2, [r3, #8]
}
 8003b2c:	e016      	b.n	8003b5c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	4a13      	ldr	r2, [pc, #76]	; (8003b80 <ADC_ConfigureBoostMode+0x214>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d80a      	bhi.n	8003b4c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b48:	609a      	str	r2, [r3, #8]
}
 8003b4a:	e007      	b.n	8003b5c <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	689a      	ldr	r2, [r3, #8]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003b5a:	609a      	str	r2, [r3, #8]
}
 8003b5c:	bf00      	nop
 8003b5e:	3710      	adds	r7, #16
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	40022000 	.word	0x40022000
 8003b68:	40022100 	.word	0x40022100
 8003b6c:	40022300 	.word	0x40022300
 8003b70:	58026300 	.word	0x58026300
 8003b74:	01312d00 	.word	0x01312d00
 8003b78:	005f5e10 	.word	0x005f5e10
 8003b7c:	00bebc20 	.word	0x00bebc20
 8003b80:	017d7840 	.word	0x017d7840

08003b84 <LL_ADC_IsEnabled>:
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	f003 0301 	and.w	r3, r3, #1
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d101      	bne.n	8003b9c <LL_ADC_IsEnabled+0x18>
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e000      	b.n	8003b9e <LL_ADC_IsEnabled+0x1a>
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	370c      	adds	r7, #12
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr

08003baa <LL_ADC_REG_IsConversionOngoing>:
{
 8003baa:	b480      	push	{r7}
 8003bac:	b083      	sub	sp, #12
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f003 0304 	and.w	r3, r3, #4
 8003bba:	2b04      	cmp	r3, #4
 8003bbc:	d101      	bne.n	8003bc2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e000      	b.n	8003bc4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003bd0:	b590      	push	{r4, r7, lr}
 8003bd2:	b09f      	sub	sp, #124	; 0x7c
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d101      	bne.n	8003bee <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003bea:	2302      	movs	r3, #2
 8003bec:	e0be      	b.n	8003d6c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a5c      	ldr	r2, [pc, #368]	; (8003d74 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d102      	bne.n	8003c0e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003c08:	4b5b      	ldr	r3, [pc, #364]	; (8003d78 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003c0a:	60bb      	str	r3, [r7, #8]
 8003c0c:	e001      	b.n	8003c12 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003c0e:	2300      	movs	r3, #0
 8003c10:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d10b      	bne.n	8003c30 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c1c:	f043 0220 	orr.w	r2, r3, #32
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e09d      	b.n	8003d6c <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7ff ffb9 	bl	8003baa <LL_ADC_REG_IsConversionOngoing>
 8003c38:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7ff ffb3 	bl	8003baa <LL_ADC_REG_IsConversionOngoing>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d17f      	bne.n	8003d4a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003c4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d17c      	bne.n	8003d4a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a47      	ldr	r2, [pc, #284]	; (8003d74 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d004      	beq.n	8003c64 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a46      	ldr	r2, [pc, #280]	; (8003d78 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d101      	bne.n	8003c68 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003c64:	4b45      	ldr	r3, [pc, #276]	; (8003d7c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003c66:	e000      	b.n	8003c6a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003c68:	4b45      	ldr	r3, [pc, #276]	; (8003d80 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003c6a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d039      	beq.n	8003ce8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003c74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	431a      	orrs	r2, r3
 8003c82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c84:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a3a      	ldr	r2, [pc, #232]	; (8003d74 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d004      	beq.n	8003c9a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a38      	ldr	r2, [pc, #224]	; (8003d78 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d10e      	bne.n	8003cb8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003c9a:	4836      	ldr	r0, [pc, #216]	; (8003d74 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003c9c:	f7ff ff72 	bl	8003b84 <LL_ADC_IsEnabled>
 8003ca0:	4604      	mov	r4, r0
 8003ca2:	4835      	ldr	r0, [pc, #212]	; (8003d78 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003ca4:	f7ff ff6e 	bl	8003b84 <LL_ADC_IsEnabled>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	4323      	orrs	r3, r4
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	bf0c      	ite	eq
 8003cb0:	2301      	moveq	r3, #1
 8003cb2:	2300      	movne	r3, #0
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	e008      	b.n	8003cca <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003cb8:	4832      	ldr	r0, [pc, #200]	; (8003d84 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003cba:	f7ff ff63 	bl	8003b84 <LL_ADC_IsEnabled>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	bf0c      	ite	eq
 8003cc4:	2301      	moveq	r3, #1
 8003cc6:	2300      	movne	r3, #0
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d047      	beq.n	8003d5e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003cce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cd0:	689a      	ldr	r2, [r3, #8]
 8003cd2:	4b2d      	ldr	r3, [pc, #180]	; (8003d88 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	683a      	ldr	r2, [r7, #0]
 8003cd8:	6811      	ldr	r1, [r2, #0]
 8003cda:	683a      	ldr	r2, [r7, #0]
 8003cdc:	6892      	ldr	r2, [r2, #8]
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	431a      	orrs	r2, r3
 8003ce2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ce4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003ce6:	e03a      	b.n	8003d5e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003ce8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003cf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cf2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a1e      	ldr	r2, [pc, #120]	; (8003d74 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d004      	beq.n	8003d08 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a1d      	ldr	r2, [pc, #116]	; (8003d78 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d10e      	bne.n	8003d26 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003d08:	481a      	ldr	r0, [pc, #104]	; (8003d74 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003d0a:	f7ff ff3b 	bl	8003b84 <LL_ADC_IsEnabled>
 8003d0e:	4604      	mov	r4, r0
 8003d10:	4819      	ldr	r0, [pc, #100]	; (8003d78 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003d12:	f7ff ff37 	bl	8003b84 <LL_ADC_IsEnabled>
 8003d16:	4603      	mov	r3, r0
 8003d18:	4323      	orrs	r3, r4
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	bf0c      	ite	eq
 8003d1e:	2301      	moveq	r3, #1
 8003d20:	2300      	movne	r3, #0
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	e008      	b.n	8003d38 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003d26:	4817      	ldr	r0, [pc, #92]	; (8003d84 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003d28:	f7ff ff2c 	bl	8003b84 <LL_ADC_IsEnabled>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	bf0c      	ite	eq
 8003d32:	2301      	moveq	r3, #1
 8003d34:	2300      	movne	r3, #0
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d010      	beq.n	8003d5e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003d3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d3e:	689a      	ldr	r2, [r3, #8]
 8003d40:	4b11      	ldr	r3, [pc, #68]	; (8003d88 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003d42:	4013      	ands	r3, r2
 8003d44:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003d46:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d48:	e009      	b.n	8003d5e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d4e:	f043 0220 	orr.w	r2, r3, #32
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003d5c:	e000      	b.n	8003d60 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d5e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003d68:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	377c      	adds	r7, #124	; 0x7c
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd90      	pop	{r4, r7, pc}
 8003d74:	40022000 	.word	0x40022000
 8003d78:	40022100 	.word	0x40022100
 8003d7c:	40022300 	.word	0x40022300
 8003d80:	58026300 	.word	0x58026300
 8003d84:	58026000 	.word	0x58026000
 8003d88:	fffff0e0 	.word	0xfffff0e0

08003d8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b085      	sub	sp, #20
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f003 0307 	and.w	r3, r3, #7
 8003d9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d9c:	4b0b      	ldr	r3, [pc, #44]	; (8003dcc <__NVIC_SetPriorityGrouping+0x40>)
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003da2:	68ba      	ldr	r2, [r7, #8]
 8003da4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003da8:	4013      	ands	r3, r2
 8003daa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003db4:	4b06      	ldr	r3, [pc, #24]	; (8003dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dba:	4a04      	ldr	r2, [pc, #16]	; (8003dcc <__NVIC_SetPriorityGrouping+0x40>)
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	60d3      	str	r3, [r2, #12]
}
 8003dc0:	bf00      	nop
 8003dc2:	3714      	adds	r7, #20
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr
 8003dcc:	e000ed00 	.word	0xe000ed00
 8003dd0:	05fa0000 	.word	0x05fa0000

08003dd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003dd8:	4b04      	ldr	r3, [pc, #16]	; (8003dec <__NVIC_GetPriorityGrouping+0x18>)
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	0a1b      	lsrs	r3, r3, #8
 8003dde:	f003 0307 	and.w	r3, r3, #7
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr
 8003dec:	e000ed00 	.word	0xe000ed00

08003df0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	4603      	mov	r3, r0
 8003df8:	6039      	str	r1, [r7, #0]
 8003dfa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003dfc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	db0a      	blt.n	8003e1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	b2da      	uxtb	r2, r3
 8003e08:	490c      	ldr	r1, [pc, #48]	; (8003e3c <__NVIC_SetPriority+0x4c>)
 8003e0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e0e:	0112      	lsls	r2, r2, #4
 8003e10:	b2d2      	uxtb	r2, r2
 8003e12:	440b      	add	r3, r1
 8003e14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e18:	e00a      	b.n	8003e30 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	b2da      	uxtb	r2, r3
 8003e1e:	4908      	ldr	r1, [pc, #32]	; (8003e40 <__NVIC_SetPriority+0x50>)
 8003e20:	88fb      	ldrh	r3, [r7, #6]
 8003e22:	f003 030f 	and.w	r3, r3, #15
 8003e26:	3b04      	subs	r3, #4
 8003e28:	0112      	lsls	r2, r2, #4
 8003e2a:	b2d2      	uxtb	r2, r2
 8003e2c:	440b      	add	r3, r1
 8003e2e:	761a      	strb	r2, [r3, #24]
}
 8003e30:	bf00      	nop
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr
 8003e3c:	e000e100 	.word	0xe000e100
 8003e40:	e000ed00 	.word	0xe000ed00

08003e44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b089      	sub	sp, #36	; 0x24
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f003 0307 	and.w	r3, r3, #7
 8003e56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	f1c3 0307 	rsb	r3, r3, #7
 8003e5e:	2b04      	cmp	r3, #4
 8003e60:	bf28      	it	cs
 8003e62:	2304      	movcs	r3, #4
 8003e64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	3304      	adds	r3, #4
 8003e6a:	2b06      	cmp	r3, #6
 8003e6c:	d902      	bls.n	8003e74 <NVIC_EncodePriority+0x30>
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	3b03      	subs	r3, #3
 8003e72:	e000      	b.n	8003e76 <NVIC_EncodePriority+0x32>
 8003e74:	2300      	movs	r3, #0
 8003e76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e78:	f04f 32ff 	mov.w	r2, #4294967295
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e82:	43da      	mvns	r2, r3
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	401a      	ands	r2, r3
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e8c:	f04f 31ff 	mov.w	r1, #4294967295
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	fa01 f303 	lsl.w	r3, r1, r3
 8003e96:	43d9      	mvns	r1, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e9c:	4313      	orrs	r3, r2
         );
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3724      	adds	r7, #36	; 0x24
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
	...

08003eac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b082      	sub	sp, #8
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ebc:	d301      	bcc.n	8003ec2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e00f      	b.n	8003ee2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ec2:	4a0a      	ldr	r2, [pc, #40]	; (8003eec <SysTick_Config+0x40>)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003eca:	210f      	movs	r1, #15
 8003ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ed0:	f7ff ff8e 	bl	8003df0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ed4:	4b05      	ldr	r3, [pc, #20]	; (8003eec <SysTick_Config+0x40>)
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003eda:	4b04      	ldr	r3, [pc, #16]	; (8003eec <SysTick_Config+0x40>)
 8003edc:	2207      	movs	r2, #7
 8003ede:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3708      	adds	r7, #8
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	e000e010 	.word	0xe000e010

08003ef0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f7ff ff47 	bl	8003d8c <__NVIC_SetPriorityGrouping>
}
 8003efe:	bf00      	nop
 8003f00:	3708      	adds	r7, #8
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}

08003f06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f06:	b580      	push	{r7, lr}
 8003f08:	b086      	sub	sp, #24
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	60b9      	str	r1, [r7, #8]
 8003f10:	607a      	str	r2, [r7, #4]
 8003f12:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003f14:	f7ff ff5e 	bl	8003dd4 <__NVIC_GetPriorityGrouping>
 8003f18:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	68b9      	ldr	r1, [r7, #8]
 8003f1e:	6978      	ldr	r0, [r7, #20]
 8003f20:	f7ff ff90 	bl	8003e44 <NVIC_EncodePriority>
 8003f24:	4602      	mov	r2, r0
 8003f26:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003f2a:	4611      	mov	r1, r2
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f7ff ff5f 	bl	8003df0 <__NVIC_SetPriority>
}
 8003f32:	bf00      	nop
 8003f34:	3718      	adds	r7, #24
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}

08003f3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f3a:	b580      	push	{r7, lr}
 8003f3c:	b082      	sub	sp, #8
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f7ff ffb2 	bl	8003eac <SysTick_Config>
 8003f48:	4603      	mov	r3, r0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3708      	adds	r7, #8
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
	...

08003f54 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d101      	bne.n	8003f66 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e0cf      	b.n	8004106 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d106      	bne.n	8003f7e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2223      	movs	r2, #35	; 0x23
 8003f74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f7fd fe55 	bl	8001c28 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f7e:	4b64      	ldr	r3, [pc, #400]	; (8004110 <HAL_ETH_Init+0x1bc>)
 8003f80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003f84:	4a62      	ldr	r2, [pc, #392]	; (8004110 <HAL_ETH_Init+0x1bc>)
 8003f86:	f043 0302 	orr.w	r3, r3, #2
 8003f8a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003f8e:	4b60      	ldr	r3, [pc, #384]	; (8004110 <HAL_ETH_Init+0x1bc>)
 8003f90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003f94:	f003 0302 	and.w	r3, r3, #2
 8003f98:	60bb      	str	r3, [r7, #8]
 8003f9a:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	7a1b      	ldrb	r3, [r3, #8]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d103      	bne.n	8003fac <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8003fa4:	2000      	movs	r0, #0
 8003fa6:	f7fe fe39 	bl	8002c1c <HAL_SYSCFG_ETHInterfaceSelect>
 8003faa:	e003      	b.n	8003fb4 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8003fac:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003fb0:	f7fe fe34 	bl	8002c1c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8003fb4:	4b57      	ldr	r3, [pc, #348]	; (8004114 <HAL_ETH_Init+0x1c0>)
 8003fb6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	6812      	ldr	r2, [r2, #0]
 8003fc6:	f043 0301 	orr.w	r3, r3, #1
 8003fca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003fce:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003fd0:	f7fe fde8 	bl	8002ba4 <HAL_GetTick>
 8003fd4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003fd6:	e011      	b.n	8003ffc <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003fd8:	f7fe fde4 	bl	8002ba4 <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003fe6:	d909      	bls.n	8003ffc <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2204      	movs	r2, #4
 8003fec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	22e0      	movs	r2, #224	; 0xe0
 8003ff4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e084      	b.n	8004106 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	2b00      	cmp	r3, #0
 800400c:	d1e4      	bne.n	8003fd8 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f000 f886 	bl	8004120 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004014:	f002 fcb4 	bl	8006980 <HAL_RCC_GetHCLKFreq>
 8004018:	4603      	mov	r3, r0
 800401a:	4a3f      	ldr	r2, [pc, #252]	; (8004118 <HAL_ETH_Init+0x1c4>)
 800401c:	fba2 2303 	umull	r2, r3, r2, r3
 8004020:	0c9a      	lsrs	r2, r3, #18
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	3a01      	subs	r2, #1
 8004028:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f000 fa71 	bl	8004514 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800403a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800403e:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	6812      	ldr	r2, [r2, #0]
 8004046:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800404a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800404e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	695b      	ldr	r3, [r3, #20]
 8004056:	f003 0303 	and.w	r3, r3, #3
 800405a:	2b00      	cmp	r3, #0
 800405c:	d009      	beq.n	8004072 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2201      	movs	r2, #1
 8004062:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	22e0      	movs	r2, #224	; 0xe0
 800406a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e049      	b.n	8004106 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800407a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800407e:	4b27      	ldr	r3, [pc, #156]	; (800411c <HAL_ETH_Init+0x1c8>)
 8004080:	4013      	ands	r3, r2
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	6952      	ldr	r2, [r2, #20]
 8004086:	0051      	lsls	r1, r2, #1
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	6812      	ldr	r2, [r2, #0]
 800408c:	430b      	orrs	r3, r1
 800408e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004092:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 fad9 	bl	800464e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f000 fb1f 	bl	80046e0 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	3305      	adds	r3, #5
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	021a      	lsls	r2, r3, #8
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	3304      	adds	r3, #4
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	4619      	mov	r1, r3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	430a      	orrs	r2, r1
 80040bc:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	3303      	adds	r3, #3
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	061a      	lsls	r2, r3, #24
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	3302      	adds	r3, #2
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	041b      	lsls	r3, r3, #16
 80040d4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	3301      	adds	r3, #1
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80040e0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80040ee:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80040f0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2210      	movs	r2, #16
 8004100:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	3710      	adds	r7, #16
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	58024400 	.word	0x58024400
 8004114:	58000400 	.word	0x58000400
 8004118:	431bde83 	.word	0x431bde83
 800411c:	ffff8001 	.word	0xffff8001

08004120 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004130:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004138:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800413a:	f002 fc21 	bl	8006980 <HAL_RCC_GetHCLKFreq>
 800413e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	4a1e      	ldr	r2, [pc, #120]	; (80041bc <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d908      	bls.n	800415a <HAL_ETH_SetMDIOClockRange+0x3a>
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	4a1d      	ldr	r2, [pc, #116]	; (80041c0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d804      	bhi.n	800415a <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004156:	60fb      	str	r3, [r7, #12]
 8004158:	e027      	b.n	80041aa <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	4a18      	ldr	r2, [pc, #96]	; (80041c0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d908      	bls.n	8004174 <HAL_ETH_SetMDIOClockRange+0x54>
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	4a17      	ldr	r2, [pc, #92]	; (80041c4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d204      	bcs.n	8004174 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004170:	60fb      	str	r3, [r7, #12]
 8004172:	e01a      	b.n	80041aa <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	4a13      	ldr	r2, [pc, #76]	; (80041c4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d303      	bcc.n	8004184 <HAL_ETH_SetMDIOClockRange+0x64>
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	4a12      	ldr	r2, [pc, #72]	; (80041c8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d911      	bls.n	80041a8 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	4a10      	ldr	r2, [pc, #64]	; (80041c8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d908      	bls.n	800419e <HAL_ETH_SetMDIOClockRange+0x7e>
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	4a0f      	ldr	r2, [pc, #60]	; (80041cc <HAL_ETH_SetMDIOClockRange+0xac>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d804      	bhi.n	800419e <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800419a:	60fb      	str	r3, [r7, #12]
 800419c:	e005      	b.n	80041aa <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041a4:	60fb      	str	r3, [r7, #12]
 80041a6:	e000      	b.n	80041aa <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80041a8:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80041b4:	bf00      	nop
 80041b6:	3710      	adds	r7, #16
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	01312cff 	.word	0x01312cff
 80041c0:	02160ebf 	.word	0x02160ebf
 80041c4:	03938700 	.word	0x03938700
 80041c8:	05f5e0ff 	.word	0x05f5e0ff
 80041cc:	08f0d17f 	.word	0x08f0d17f

080041d0 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b085      	sub	sp, #20
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80041e2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	791b      	ldrb	r3, [r3, #4]
 80041e8:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80041ea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	7b1b      	ldrb	r3, [r3, #12]
 80041f0:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80041f2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	7b5b      	ldrb	r3, [r3, #13]
 80041f8:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80041fa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	7b9b      	ldrb	r3, [r3, #14]
 8004200:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004202:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	7bdb      	ldrb	r3, [r3, #15]
 8004208:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800420a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800420c:	683a      	ldr	r2, [r7, #0]
 800420e:	7c12      	ldrb	r2, [r2, #16]
 8004210:	2a00      	cmp	r2, #0
 8004212:	d102      	bne.n	800421a <ETH_SetMACConfig+0x4a>
 8004214:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004218:	e000      	b.n	800421c <ETH_SetMACConfig+0x4c>
 800421a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800421c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800421e:	683a      	ldr	r2, [r7, #0]
 8004220:	7c52      	ldrb	r2, [r2, #17]
 8004222:	2a00      	cmp	r2, #0
 8004224:	d102      	bne.n	800422c <ETH_SetMACConfig+0x5c>
 8004226:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800422a:	e000      	b.n	800422e <ETH_SetMACConfig+0x5e>
 800422c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800422e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	7c9b      	ldrb	r3, [r3, #18]
 8004234:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004236:	431a      	orrs	r2, r3
               macconf->Speed |
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800423c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8004242:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	7f1b      	ldrb	r3, [r3, #28]
 8004248:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800424a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	7f5b      	ldrb	r3, [r3, #29]
 8004250:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004252:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004254:	683a      	ldr	r2, [r7, #0]
 8004256:	7f92      	ldrb	r2, [r2, #30]
 8004258:	2a00      	cmp	r2, #0
 800425a:	d102      	bne.n	8004262 <ETH_SetMACConfig+0x92>
 800425c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004260:	e000      	b.n	8004264 <ETH_SetMACConfig+0x94>
 8004262:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004264:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	7fdb      	ldrb	r3, [r3, #31]
 800426a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800426c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800426e:	683a      	ldr	r2, [r7, #0]
 8004270:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004274:	2a00      	cmp	r2, #0
 8004276:	d102      	bne.n	800427e <ETH_SetMACConfig+0xae>
 8004278:	f44f 7280 	mov.w	r2, #256	; 0x100
 800427c:	e000      	b.n	8004280 <ETH_SetMACConfig+0xb0>
 800427e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004280:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004286:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800428e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8004290:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8004296:	4313      	orrs	r3, r2
 8004298:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	4b56      	ldr	r3, [pc, #344]	; (80043fc <ETH_SetMACConfig+0x22c>)
 80042a2:	4013      	ands	r3, r2
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	6812      	ldr	r2, [r2, #0]
 80042a8:	68f9      	ldr	r1, [r7, #12]
 80042aa:	430b      	orrs	r3, r1
 80042ac:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80042ba:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80042bc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80042c4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80042c6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80042ce:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80042d0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80042d2:	683a      	ldr	r2, [r7, #0]
 80042d4:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80042d8:	2a00      	cmp	r2, #0
 80042da:	d102      	bne.n	80042e2 <ETH_SetMACConfig+0x112>
 80042dc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80042e0:	e000      	b.n	80042e4 <ETH_SetMACConfig+0x114>
 80042e2:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80042e4:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80042ea:	4313      	orrs	r3, r2
 80042ec:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	685a      	ldr	r2, [r3, #4]
 80042f4:	4b42      	ldr	r3, [pc, #264]	; (8004400 <ETH_SetMACConfig+0x230>)
 80042f6:	4013      	ands	r3, r2
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	6812      	ldr	r2, [r2, #0]
 80042fc:	68f9      	ldr	r1, [r7, #12]
 80042fe:	430b      	orrs	r3, r1
 8004300:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004308:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800430e:	4313      	orrs	r3, r2
 8004310:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68da      	ldr	r2, [r3, #12]
 8004318:	4b3a      	ldr	r3, [pc, #232]	; (8004404 <ETH_SetMACConfig+0x234>)
 800431a:	4013      	ands	r3, r2
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	6812      	ldr	r2, [r2, #0]
 8004320:	68f9      	ldr	r1, [r7, #12]
 8004322:	430b      	orrs	r3, r1
 8004324:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800432c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004332:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8004334:	683a      	ldr	r2, [r7, #0]
 8004336:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800433a:	2a00      	cmp	r2, #0
 800433c:	d101      	bne.n	8004342 <ETH_SetMACConfig+0x172>
 800433e:	2280      	movs	r2, #128	; 0x80
 8004340:	e000      	b.n	8004344 <ETH_SetMACConfig+0x174>
 8004342:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8004344:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800434a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800434c:	4313      	orrs	r3, r2
 800434e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004356:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800435a:	4013      	ands	r3, r2
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	6812      	ldr	r2, [r2, #0]
 8004360:	68f9      	ldr	r1, [r7, #12]
 8004362:	430b      	orrs	r3, r1
 8004364:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800436c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8004374:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004376:	4313      	orrs	r3, r2
 8004378:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004382:	f023 0103 	bic.w	r1, r3, #3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	430a      	orrs	r2, r1
 800438e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800439a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	430a      	orrs	r2, r1
 80043a8:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80043b0:	683a      	ldr	r2, [r7, #0]
 80043b2:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80043b6:	2a00      	cmp	r2, #0
 80043b8:	d101      	bne.n	80043be <ETH_SetMACConfig+0x1ee>
 80043ba:	2240      	movs	r2, #64	; 0x40
 80043bc:	e000      	b.n	80043c0 <ETH_SetMACConfig+0x1f0>
 80043be:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80043c0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80043c8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80043ca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80043d2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80043d4:	4313      	orrs	r3, r2
 80043d6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80043e0:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	68fa      	ldr	r2, [r7, #12]
 80043ea:	430a      	orrs	r2, r1
 80043ec:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80043f0:	bf00      	nop
 80043f2:	3714      	adds	r7, #20
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr
 80043fc:	00048083 	.word	0x00048083
 8004400:	c0f88000 	.word	0xc0f88000
 8004404:	fffffef0 	.word	0xfffffef0

08004408 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004408:	b480      	push	{r7}
 800440a:	b085      	sub	sp, #20
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	4b38      	ldr	r3, [pc, #224]	; (8004500 <ETH_SetDMAConfig+0xf8>)
 800441e:	4013      	ands	r3, r2
 8004420:	683a      	ldr	r2, [r7, #0]
 8004422:	6811      	ldr	r1, [r2, #0]
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	6812      	ldr	r2, [r2, #0]
 8004428:	430b      	orrs	r3, r1
 800442a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800442e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	791b      	ldrb	r3, [r3, #4]
 8004434:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800443a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	7b1b      	ldrb	r3, [r3, #12]
 8004440:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004442:	4313      	orrs	r3, r2
 8004444:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800444e:	685a      	ldr	r2, [r3, #4]
 8004450:	4b2c      	ldr	r3, [pc, #176]	; (8004504 <ETH_SetDMAConfig+0xfc>)
 8004452:	4013      	ands	r3, r2
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	6812      	ldr	r2, [r2, #0]
 8004458:	68f9      	ldr	r1, [r7, #12]
 800445a:	430b      	orrs	r3, r1
 800445c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004460:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	7b5b      	ldrb	r3, [r3, #13]
 8004466:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800446c:	4313      	orrs	r3, r2
 800446e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004478:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 800447c:	4b22      	ldr	r3, [pc, #136]	; (8004508 <ETH_SetDMAConfig+0x100>)
 800447e:	4013      	ands	r3, r2
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	6812      	ldr	r2, [r2, #0]
 8004484:	68f9      	ldr	r1, [r7, #12]
 8004486:	430b      	orrs	r3, r1
 8004488:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800448c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	7d1b      	ldrb	r3, [r3, #20]
 8004498:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800449a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	7f5b      	ldrb	r3, [r3, #29]
 80044a0:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80044a2:	4313      	orrs	r3, r2
 80044a4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044ae:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80044b2:	4b16      	ldr	r3, [pc, #88]	; (800450c <ETH_SetDMAConfig+0x104>)
 80044b4:	4013      	ands	r3, r2
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	6812      	ldr	r2, [r2, #0]
 80044ba:	68f9      	ldr	r1, [r7, #12]
 80044bc:	430b      	orrs	r3, r1
 80044be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80044c2:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	7f1b      	ldrb	r3, [r3, #28]
 80044ca:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80044d0:	4313      	orrs	r3, r2
 80044d2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044dc:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80044e0:	4b0b      	ldr	r3, [pc, #44]	; (8004510 <ETH_SetDMAConfig+0x108>)
 80044e2:	4013      	ands	r3, r2
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	6812      	ldr	r2, [r2, #0]
 80044e8:	68f9      	ldr	r1, [r7, #12]
 80044ea:	430b      	orrs	r3, r1
 80044ec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80044f0:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80044f4:	bf00      	nop
 80044f6:	3714      	adds	r7, #20
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr
 8004500:	ffff87fd 	.word	0xffff87fd
 8004504:	ffff2ffe 	.word	0xffff2ffe
 8004508:	fffec000 	.word	0xfffec000
 800450c:	ffc0efef 	.word	0xffc0efef
 8004510:	7fc0ffff 	.word	0x7fc0ffff

08004514 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b0a4      	sub	sp, #144	; 0x90
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800451c:	2301      	movs	r3, #1
 800451e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004522:	2300      	movs	r3, #0
 8004524:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8004526:	2300      	movs	r3, #0
 8004528:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800452c:	2300      	movs	r3, #0
 800452e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8004532:	2301      	movs	r3, #1
 8004534:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8004538:	2301      	movs	r3, #1
 800453a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800453e:	2301      	movs	r3, #1
 8004540:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8004544:	2300      	movs	r3, #0
 8004546:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800454a:	2301      	movs	r3, #1
 800454c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004550:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004554:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8004556:	2300      	movs	r3, #0
 8004558:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 800455c:	2300      	movs	r3, #0
 800455e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8004560:	2300      	movs	r3, #0
 8004562:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8004566:	2300      	movs	r3, #0
 8004568:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 800456c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8004570:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8004572:	2300      	movs	r3, #0
 8004574:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8004578:	2300      	movs	r3, #0
 800457a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 800457c:	2301      	movs	r3, #1
 800457e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8004582:	2300      	movs	r3, #0
 8004584:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8004588:	2300      	movs	r3, #0
 800458a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800458e:	2300      	movs	r3, #0
 8004590:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8004592:	2300      	movs	r3, #0
 8004594:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8004596:	2300      	movs	r3, #0
 8004598:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800459a:	2300      	movs	r3, #0
 800459c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80045a0:	2300      	movs	r3, #0
 80045a2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80045a6:	2301      	movs	r3, #1
 80045a8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80045ac:	2320      	movs	r3, #32
 80045ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80045b2:	2301      	movs	r3, #1
 80045b4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80045b8:	2300      	movs	r3, #0
 80045ba:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80045be:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80045c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80045c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80045c8:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80045ca:	2300      	movs	r3, #0
 80045cc:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80045d0:	2302      	movs	r3, #2
 80045d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80045d6:	2300      	movs	r3, #0
 80045d8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80045dc:	2300      	movs	r3, #0
 80045de:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80045e2:	2300      	movs	r3, #0
 80045e4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80045e8:	2301      	movs	r3, #1
 80045ea:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80045ee:	2300      	movs	r3, #0
 80045f0:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80045f2:	2301      	movs	r3, #1
 80045f4:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80045f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80045fc:	4619      	mov	r1, r3
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f7ff fde6 	bl	80041d0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004604:	2301      	movs	r3, #1
 8004606:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004608:	2301      	movs	r3, #1
 800460a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800460c:	2300      	movs	r3, #0
 800460e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004610:	2300      	movs	r3, #0
 8004612:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8004616:	2300      	movs	r3, #0
 8004618:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800461a:	2300      	movs	r3, #0
 800461c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800461e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004622:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8004624:	2300      	movs	r3, #0
 8004626:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004628:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800462c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800462e:	2300      	movs	r3, #0
 8004630:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8004634:	f44f 7306 	mov.w	r3, #536	; 0x218
 8004638:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800463a:	f107 0308 	add.w	r3, r7, #8
 800463e:	4619      	mov	r1, r3
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f7ff fee1 	bl	8004408 <ETH_SetDMAConfig>
}
 8004646:	bf00      	nop
 8004648:	3790      	adds	r7, #144	; 0x90
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}

0800464e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800464e:	b480      	push	{r7}
 8004650:	b085      	sub	sp, #20
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004656:	2300      	movs	r3, #0
 8004658:	60fb      	str	r3, [r7, #12]
 800465a:	e01d      	b.n	8004698 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	68d9      	ldr	r1, [r3, #12]
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	4613      	mov	r3, r2
 8004664:	005b      	lsls	r3, r3, #1
 8004666:	4413      	add	r3, r2
 8004668:	00db      	lsls	r3, r3, #3
 800466a:	440b      	add	r3, r1
 800466c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	2200      	movs	r2, #0
 8004672:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	2200      	movs	r2, #0
 8004678:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	2200      	movs	r2, #0
 800467e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	2200      	movs	r2, #0
 8004684:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004686:	68b9      	ldr	r1, [r7, #8]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	68fa      	ldr	r2, [r7, #12]
 800468c:	3206      	adds	r2, #6
 800468e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	3301      	adds	r3, #1
 8004696:	60fb      	str	r3, [r7, #12]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2b03      	cmp	r3, #3
 800469c:	d9de      	bls.n	800465c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046ac:	461a      	mov	r2, r3
 80046ae:	2303      	movs	r3, #3
 80046b0:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	68da      	ldr	r2, [r3, #12]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046c0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	68da      	ldr	r2, [r3, #12]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046d0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 80046d4:	bf00      	nop
 80046d6:	3714      	adds	r7, #20
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b085      	sub	sp, #20
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80046e8:	2300      	movs	r3, #0
 80046ea:	60fb      	str	r3, [r7, #12]
 80046ec:	e023      	b.n	8004736 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6919      	ldr	r1, [r3, #16]
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	4613      	mov	r3, r2
 80046f6:	005b      	lsls	r3, r3, #1
 80046f8:	4413      	add	r3, r2
 80046fa:	00db      	lsls	r3, r3, #3
 80046fc:	440b      	add	r3, r1
 80046fe:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	2200      	movs	r2, #0
 8004704:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	2200      	movs	r2, #0
 800470a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	2200      	movs	r2, #0
 8004710:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	2200      	movs	r2, #0
 8004716:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	2200      	movs	r2, #0
 800471c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	2200      	movs	r2, #0
 8004722:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004724:	68b9      	ldr	r1, [r7, #8]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	3212      	adds	r2, #18
 800472c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	3301      	adds	r3, #1
 8004734:	60fb      	str	r3, [r7, #12]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2b03      	cmp	r3, #3
 800473a:	d9d8      	bls.n	80046ee <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004762:	461a      	mov	r2, r3
 8004764:	2303      	movs	r3, #3
 8004766:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	691a      	ldr	r2, [r3, #16]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004776:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800478a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 800478e:	bf00      	nop
 8004790:	3714      	adds	r7, #20
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr
	...

0800479c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b098      	sub	sp, #96	; 0x60
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80047a4:	4a84      	ldr	r2, [pc, #528]	; (80049b8 <HAL_FDCAN_Init+0x21c>)
 80047a6:	f107 030c 	add.w	r3, r7, #12
 80047aa:	4611      	mov	r1, r2
 80047ac:	224c      	movs	r2, #76	; 0x4c
 80047ae:	4618      	mov	r0, r3
 80047b0:	f007 fc94 	bl	800c0dc <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d101      	bne.n	80047be <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e1c6      	b.n	8004b4c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a7e      	ldr	r2, [pc, #504]	; (80049bc <HAL_FDCAN_Init+0x220>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d106      	bne.n	80047d6 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80047d0:	461a      	mov	r2, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d106      	bne.n	80047f0 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f7fd fb4c 	bl	8001e88 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	699a      	ldr	r2, [r3, #24]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f022 0210 	bic.w	r2, r2, #16
 80047fe:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004800:	f7fe f9d0 	bl	8002ba4 <HAL_GetTick>
 8004804:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004806:	e014      	b.n	8004832 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004808:	f7fe f9cc 	bl	8002ba4 <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	2b0a      	cmp	r3, #10
 8004814:	d90d      	bls.n	8004832 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800481c:	f043 0201 	orr.w	r2, r3, #1
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2203      	movs	r2, #3
 800482a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e18c      	b.n	8004b4c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	699b      	ldr	r3, [r3, #24]
 8004838:	f003 0308 	and.w	r3, r3, #8
 800483c:	2b08      	cmp	r3, #8
 800483e:	d0e3      	beq.n	8004808 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	699a      	ldr	r2, [r3, #24]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f042 0201 	orr.w	r2, r2, #1
 800484e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004850:	f7fe f9a8 	bl	8002ba4 <HAL_GetTick>
 8004854:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004856:	e014      	b.n	8004882 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004858:	f7fe f9a4 	bl	8002ba4 <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	2b0a      	cmp	r3, #10
 8004864:	d90d      	bls.n	8004882 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800486c:	f043 0201 	orr.w	r2, r3, #1
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2203      	movs	r2, #3
 800487a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e164      	b.n	8004b4c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	699b      	ldr	r3, [r3, #24]
 8004888:	f003 0301 	and.w	r3, r3, #1
 800488c:	2b00      	cmp	r3, #0
 800488e:	d0e3      	beq.n	8004858 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	699a      	ldr	r2, [r3, #24]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f042 0202 	orr.w	r2, r2, #2
 800489e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	7c1b      	ldrb	r3, [r3, #16]
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d108      	bne.n	80048ba <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	699a      	ldr	r2, [r3, #24]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048b6:	619a      	str	r2, [r3, #24]
 80048b8:	e007      	b.n	80048ca <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	699a      	ldr	r2, [r3, #24]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048c8:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	7c5b      	ldrb	r3, [r3, #17]
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d108      	bne.n	80048e4 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	699a      	ldr	r2, [r3, #24]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048e0:	619a      	str	r2, [r3, #24]
 80048e2:	e007      	b.n	80048f4 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	699a      	ldr	r2, [r3, #24]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80048f2:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	7c9b      	ldrb	r3, [r3, #18]
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d108      	bne.n	800490e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	699a      	ldr	r2, [r3, #24]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800490a:	619a      	str	r2, [r3, #24]
 800490c:	e007      	b.n	800491e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	699a      	ldr	r2, [r3, #24]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800491c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	699b      	ldr	r3, [r3, #24]
 8004924:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	689a      	ldr	r2, [r3, #8]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	430a      	orrs	r2, r1
 8004932:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	699a      	ldr	r2, [r3, #24]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8004942:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	691a      	ldr	r2, [r3, #16]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f022 0210 	bic.w	r2, r2, #16
 8004952:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	2b01      	cmp	r3, #1
 800495a:	d108      	bne.n	800496e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	699a      	ldr	r2, [r3, #24]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f042 0204 	orr.w	r2, r2, #4
 800496a:	619a      	str	r2, [r3, #24]
 800496c:	e030      	b.n	80049d0 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d02c      	beq.n	80049d0 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	2b02      	cmp	r3, #2
 800497c:	d020      	beq.n	80049c0 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	699a      	ldr	r2, [r3, #24]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800498c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	691a      	ldr	r2, [r3, #16]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f042 0210 	orr.w	r2, r2, #16
 800499c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	2b03      	cmp	r3, #3
 80049a4:	d114      	bne.n	80049d0 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	699a      	ldr	r2, [r3, #24]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f042 0220 	orr.w	r2, r2, #32
 80049b4:	619a      	str	r2, [r3, #24]
 80049b6:	e00b      	b.n	80049d0 <HAL_FDCAN_Init+0x234>
 80049b8:	0800c204 	.word	0x0800c204
 80049bc:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	699a      	ldr	r2, [r3, #24]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f042 0220 	orr.w	r2, r2, #32
 80049ce:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	699b      	ldr	r3, [r3, #24]
 80049d4:	3b01      	subs	r3, #1
 80049d6:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	69db      	ldr	r3, [r3, #28]
 80049dc:	3b01      	subs	r3, #1
 80049de:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80049e0:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a1b      	ldr	r3, [r3, #32]
 80049e6:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80049e8:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	695b      	ldr	r3, [r3, #20]
 80049f0:	3b01      	subs	r3, #1
 80049f2:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80049f8:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80049fa:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a04:	d115      	bne.n	8004a32 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a0a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a10:	3b01      	subs	r3, #1
 8004a12:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004a14:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004a1e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a26:	3b01      	subs	r3, #1
 8004a28:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004a2e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004a30:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00a      	beq.n	8004a50 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a58:	4413      	add	r3, r2
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d011      	beq.n	8004a82 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8004a66:	f023 0107 	bic.w	r1, r3, #7
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	3360      	adds	r3, #96	; 0x60
 8004a72:	443b      	add	r3, r7
 8004a74:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	430a      	orrs	r2, r1
 8004a7e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d011      	beq.n	8004aae <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004a92:	f023 0107 	bic.w	r1, r3, #7
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	3360      	adds	r3, #96	; 0x60
 8004a9e:	443b      	add	r3, r7
 8004aa0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	430a      	orrs	r2, r1
 8004aaa:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d012      	beq.n	8004adc <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004abe:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	3360      	adds	r3, #96	; 0x60
 8004aca:	443b      	add	r3, r7
 8004acc:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004ad0:	011a      	lsls	r2, r3, #4
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	430a      	orrs	r2, r1
 8004ad8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d012      	beq.n	8004b0a <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004aec:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	3360      	adds	r3, #96	; 0x60
 8004af8:	443b      	add	r3, r7
 8004afa:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004afe:	021a      	lsls	r2, r3, #8
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	430a      	orrs	r2, r1
 8004b06:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a11      	ldr	r2, [pc, #68]	; (8004b54 <HAL_FDCAN_Init+0x3b8>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d107      	bne.n	8004b24 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	689a      	ldr	r2, [r3, #8]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	f022 0203 	bic.w	r2, r2, #3
 8004b22:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 f80b 	bl	8004b58 <FDCAN_CalcultateRamBlockAddresses>
 8004b42:	4603      	mov	r3, r0
 8004b44:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8004b48:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3760      	adds	r7, #96	; 0x60
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	4000a000 	.word	0x4000a000

08004b58 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b085      	sub	sp, #20
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b64:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004b6e:	4ba7      	ldr	r3, [pc, #668]	; (8004e0c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004b70:	4013      	ands	r3, r2
 8004b72:	68ba      	ldr	r2, [r7, #8]
 8004b74:	0091      	lsls	r1, r2, #2
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	6812      	ldr	r2, [r2, #0]
 8004b7a:	430b      	orrs	r3, r1
 8004b7c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b88:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b90:	041a      	lsls	r2, r3, #16
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	430a      	orrs	r2, r1
 8004b98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba0:	68ba      	ldr	r2, [r7, #8]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004bae:	4b97      	ldr	r3, [pc, #604]	; (8004e0c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	68ba      	ldr	r2, [r7, #8]
 8004bb4:	0091      	lsls	r1, r2, #2
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	6812      	ldr	r2, [r2, #0]
 8004bba:	430b      	orrs	r3, r1
 8004bbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc8:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bd0:	041a      	lsls	r2, r3, #16
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	430a      	orrs	r2, r1
 8004bd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be0:	005b      	lsls	r3, r3, #1
 8004be2:	68ba      	ldr	r2, [r7, #8]
 8004be4:	4413      	add	r3, r2
 8004be6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004bf0:	4b86      	ldr	r3, [pc, #536]	; (8004e0c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	68ba      	ldr	r2, [r7, #8]
 8004bf6:	0091      	lsls	r1, r2, #2
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	6812      	ldr	r2, [r2, #0]
 8004bfc:	430b      	orrs	r3, r1
 8004bfe:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004c0a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c12:	041a      	lsls	r2, r3, #16
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	430a      	orrs	r2, r1
 8004c1a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004c26:	fb02 f303 	mul.w	r3, r2, r3
 8004c2a:	68ba      	ldr	r2, [r7, #8]
 8004c2c:	4413      	add	r3, r2
 8004c2e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004c38:	4b74      	ldr	r3, [pc, #464]	; (8004e0c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	68ba      	ldr	r2, [r7, #8]
 8004c3e:	0091      	lsls	r1, r2, #2
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	6812      	ldr	r2, [r2, #0]
 8004c44:	430b      	orrs	r3, r1
 8004c46:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004c52:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c5a:	041a      	lsls	r2, r3, #16
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	430a      	orrs	r2, r1
 8004c62:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004c6e:	fb02 f303 	mul.w	r3, r2, r3
 8004c72:	68ba      	ldr	r2, [r7, #8]
 8004c74:	4413      	add	r3, r2
 8004c76:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004c80:	4b62      	ldr	r3, [pc, #392]	; (8004e0c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004c82:	4013      	ands	r3, r2
 8004c84:	68ba      	ldr	r2, [r7, #8]
 8004c86:	0091      	lsls	r1, r2, #2
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	6812      	ldr	r2, [r2, #0]
 8004c8c:	430b      	orrs	r3, r1
 8004c8e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004c9a:	fb02 f303 	mul.w	r3, r2, r3
 8004c9e:	68ba      	ldr	r2, [r7, #8]
 8004ca0:	4413      	add	r3, r2
 8004ca2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8004cac:	4b57      	ldr	r3, [pc, #348]	; (8004e0c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004cae:	4013      	ands	r3, r2
 8004cb0:	68ba      	ldr	r2, [r7, #8]
 8004cb2:	0091      	lsls	r1, r2, #2
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	6812      	ldr	r2, [r2, #0]
 8004cb8:	430b      	orrs	r3, r1
 8004cba:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004cc6:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cce:	041a      	lsls	r2, r3, #16
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	430a      	orrs	r2, r1
 8004cd6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cde:	005b      	lsls	r3, r3, #1
 8004ce0:	68ba      	ldr	r2, [r7, #8]
 8004ce2:	4413      	add	r3, r2
 8004ce4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004cee:	4b47      	ldr	r3, [pc, #284]	; (8004e0c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	68ba      	ldr	r2, [r7, #8]
 8004cf4:	0091      	lsls	r1, r2, #2
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	6812      	ldr	r2, [r2, #0]
 8004cfa:	430b      	orrs	r3, r1
 8004cfc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004d08:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d10:	041a      	lsls	r2, r3, #16
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	430a      	orrs	r2, r1
 8004d18:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004d24:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d2c:	061a      	lsls	r2, r3, #24
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	430a      	orrs	r2, r1
 8004d34:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d3c:	4b34      	ldr	r3, [pc, #208]	; (8004e10 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8004d3e:	4413      	add	r3, r2
 8004d40:	009a      	lsls	r2, r3, #2
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	441a      	add	r2, r3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d5e:	00db      	lsls	r3, r3, #3
 8004d60:	441a      	add	r2, r3
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6e:	6879      	ldr	r1, [r7, #4]
 8004d70:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8004d72:	fb01 f303 	mul.w	r3, r1, r3
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	441a      	add	r2, r3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d86:	6879      	ldr	r1, [r7, #4]
 8004d88:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8004d8a:	fb01 f303 	mul.w	r3, r1, r3
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	441a      	add	r2, r3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d9e:	6879      	ldr	r1, [r7, #4]
 8004da0:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8004da2:	fb01 f303 	mul.w	r3, r1, r3
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	441a      	add	r2, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dba:	00db      	lsls	r3, r3, #3
 8004dbc:	441a      	add	r2, r3
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dce:	6879      	ldr	r1, [r7, #4]
 8004dd0:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8004dd2:	fb01 f303 	mul.w	r3, r1, r3
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	441a      	add	r2, r3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dea:	6879      	ldr	r1, [r7, #4]
 8004dec:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8004dee:	fb01 f303 	mul.w	r3, r1, r3
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	441a      	add	r2, r3
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e02:	4a04      	ldr	r2, [pc, #16]	; (8004e14 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d915      	bls.n	8004e34 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8004e08:	e006      	b.n	8004e18 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8004e0a:	bf00      	nop
 8004e0c:	ffff0003 	.word	0xffff0003
 8004e10:	10002b00 	.word	0x10002b00
 8004e14:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e1e:	f043 0220 	orr.w	r2, r3, #32
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2203      	movs	r2, #3
 8004e2c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	e010      	b.n	8004e56 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e38:	60fb      	str	r3, [r7, #12]
 8004e3a:	e005      	b.n	8004e48 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	3304      	adds	r3, #4
 8004e46:	60fb      	str	r3, [r7, #12]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e4e:	68fa      	ldr	r2, [r7, #12]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d3f3      	bcc.n	8004e3c <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3714      	adds	r7, #20
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop

08004e64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b089      	sub	sp, #36	; 0x24
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004e72:	4b89      	ldr	r3, [pc, #548]	; (8005098 <HAL_GPIO_Init+0x234>)
 8004e74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004e76:	e194      	b.n	80051a2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	2101      	movs	r1, #1
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	fa01 f303 	lsl.w	r3, r1, r3
 8004e84:	4013      	ands	r3, r2
 8004e86:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	f000 8186 	beq.w	800519c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	f003 0303 	and.w	r3, r3, #3
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d005      	beq.n	8004ea8 <HAL_GPIO_Init+0x44>
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	f003 0303 	and.w	r3, r3, #3
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d130      	bne.n	8004f0a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	005b      	lsls	r3, r3, #1
 8004eb2:	2203      	movs	r2, #3
 8004eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb8:	43db      	mvns	r3, r3
 8004eba:	69ba      	ldr	r2, [r7, #24]
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	68da      	ldr	r2, [r3, #12]
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	005b      	lsls	r3, r3, #1
 8004ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ecc:	69ba      	ldr	r2, [r7, #24]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	69ba      	ldr	r2, [r7, #24]
 8004ed6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004ede:	2201      	movs	r2, #1
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee6:	43db      	mvns	r3, r3
 8004ee8:	69ba      	ldr	r2, [r7, #24]
 8004eea:	4013      	ands	r3, r2
 8004eec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	091b      	lsrs	r3, r3, #4
 8004ef4:	f003 0201 	and.w	r2, r3, #1
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	fa02 f303 	lsl.w	r3, r2, r3
 8004efe:	69ba      	ldr	r2, [r7, #24]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	69ba      	ldr	r2, [r7, #24]
 8004f08:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	f003 0303 	and.w	r3, r3, #3
 8004f12:	2b03      	cmp	r3, #3
 8004f14:	d017      	beq.n	8004f46 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004f1c:	69fb      	ldr	r3, [r7, #28]
 8004f1e:	005b      	lsls	r3, r3, #1
 8004f20:	2203      	movs	r2, #3
 8004f22:	fa02 f303 	lsl.w	r3, r2, r3
 8004f26:	43db      	mvns	r3, r3
 8004f28:	69ba      	ldr	r2, [r7, #24]
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	689a      	ldr	r2, [r3, #8]
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	005b      	lsls	r3, r3, #1
 8004f36:	fa02 f303 	lsl.w	r3, r2, r3
 8004f3a:	69ba      	ldr	r2, [r7, #24]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	69ba      	ldr	r2, [r7, #24]
 8004f44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	f003 0303 	and.w	r3, r3, #3
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d123      	bne.n	8004f9a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	08da      	lsrs	r2, r3, #3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	3208      	adds	r2, #8
 8004f5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	f003 0307 	and.w	r3, r3, #7
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	220f      	movs	r2, #15
 8004f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f6e:	43db      	mvns	r3, r3
 8004f70:	69ba      	ldr	r2, [r7, #24]
 8004f72:	4013      	ands	r3, r2
 8004f74:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	691a      	ldr	r2, [r3, #16]
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	f003 0307 	and.w	r3, r3, #7
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	fa02 f303 	lsl.w	r3, r2, r3
 8004f86:	69ba      	ldr	r2, [r7, #24]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	08da      	lsrs	r2, r3, #3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	3208      	adds	r2, #8
 8004f94:	69b9      	ldr	r1, [r7, #24]
 8004f96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	005b      	lsls	r3, r3, #1
 8004fa4:	2203      	movs	r2, #3
 8004fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8004faa:	43db      	mvns	r3, r3
 8004fac:	69ba      	ldr	r2, [r7, #24]
 8004fae:	4013      	ands	r3, r2
 8004fb0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	f003 0203 	and.w	r2, r3, #3
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	005b      	lsls	r3, r3, #1
 8004fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc2:	69ba      	ldr	r2, [r7, #24]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	69ba      	ldr	r2, [r7, #24]
 8004fcc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	f000 80e0 	beq.w	800519c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fdc:	4b2f      	ldr	r3, [pc, #188]	; (800509c <HAL_GPIO_Init+0x238>)
 8004fde:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004fe2:	4a2e      	ldr	r2, [pc, #184]	; (800509c <HAL_GPIO_Init+0x238>)
 8004fe4:	f043 0302 	orr.w	r3, r3, #2
 8004fe8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004fec:	4b2b      	ldr	r3, [pc, #172]	; (800509c <HAL_GPIO_Init+0x238>)
 8004fee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004ff2:	f003 0302 	and.w	r3, r3, #2
 8004ff6:	60fb      	str	r3, [r7, #12]
 8004ff8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ffa:	4a29      	ldr	r2, [pc, #164]	; (80050a0 <HAL_GPIO_Init+0x23c>)
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	089b      	lsrs	r3, r3, #2
 8005000:	3302      	adds	r3, #2
 8005002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005006:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	f003 0303 	and.w	r3, r3, #3
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	220f      	movs	r2, #15
 8005012:	fa02 f303 	lsl.w	r3, r2, r3
 8005016:	43db      	mvns	r3, r3
 8005018:	69ba      	ldr	r2, [r7, #24]
 800501a:	4013      	ands	r3, r2
 800501c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a20      	ldr	r2, [pc, #128]	; (80050a4 <HAL_GPIO_Init+0x240>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d052      	beq.n	80050cc <HAL_GPIO_Init+0x268>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a1f      	ldr	r2, [pc, #124]	; (80050a8 <HAL_GPIO_Init+0x244>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d031      	beq.n	8005092 <HAL_GPIO_Init+0x22e>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a1e      	ldr	r2, [pc, #120]	; (80050ac <HAL_GPIO_Init+0x248>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d02b      	beq.n	800508e <HAL_GPIO_Init+0x22a>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a1d      	ldr	r2, [pc, #116]	; (80050b0 <HAL_GPIO_Init+0x24c>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d025      	beq.n	800508a <HAL_GPIO_Init+0x226>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a1c      	ldr	r2, [pc, #112]	; (80050b4 <HAL_GPIO_Init+0x250>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d01f      	beq.n	8005086 <HAL_GPIO_Init+0x222>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a1b      	ldr	r2, [pc, #108]	; (80050b8 <HAL_GPIO_Init+0x254>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d019      	beq.n	8005082 <HAL_GPIO_Init+0x21e>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a1a      	ldr	r2, [pc, #104]	; (80050bc <HAL_GPIO_Init+0x258>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d013      	beq.n	800507e <HAL_GPIO_Init+0x21a>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a19      	ldr	r2, [pc, #100]	; (80050c0 <HAL_GPIO_Init+0x25c>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d00d      	beq.n	800507a <HAL_GPIO_Init+0x216>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a18      	ldr	r2, [pc, #96]	; (80050c4 <HAL_GPIO_Init+0x260>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d007      	beq.n	8005076 <HAL_GPIO_Init+0x212>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a17      	ldr	r2, [pc, #92]	; (80050c8 <HAL_GPIO_Init+0x264>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d101      	bne.n	8005072 <HAL_GPIO_Init+0x20e>
 800506e:	2309      	movs	r3, #9
 8005070:	e02d      	b.n	80050ce <HAL_GPIO_Init+0x26a>
 8005072:	230a      	movs	r3, #10
 8005074:	e02b      	b.n	80050ce <HAL_GPIO_Init+0x26a>
 8005076:	2308      	movs	r3, #8
 8005078:	e029      	b.n	80050ce <HAL_GPIO_Init+0x26a>
 800507a:	2307      	movs	r3, #7
 800507c:	e027      	b.n	80050ce <HAL_GPIO_Init+0x26a>
 800507e:	2306      	movs	r3, #6
 8005080:	e025      	b.n	80050ce <HAL_GPIO_Init+0x26a>
 8005082:	2305      	movs	r3, #5
 8005084:	e023      	b.n	80050ce <HAL_GPIO_Init+0x26a>
 8005086:	2304      	movs	r3, #4
 8005088:	e021      	b.n	80050ce <HAL_GPIO_Init+0x26a>
 800508a:	2303      	movs	r3, #3
 800508c:	e01f      	b.n	80050ce <HAL_GPIO_Init+0x26a>
 800508e:	2302      	movs	r3, #2
 8005090:	e01d      	b.n	80050ce <HAL_GPIO_Init+0x26a>
 8005092:	2301      	movs	r3, #1
 8005094:	e01b      	b.n	80050ce <HAL_GPIO_Init+0x26a>
 8005096:	bf00      	nop
 8005098:	58000080 	.word	0x58000080
 800509c:	58024400 	.word	0x58024400
 80050a0:	58000400 	.word	0x58000400
 80050a4:	58020000 	.word	0x58020000
 80050a8:	58020400 	.word	0x58020400
 80050ac:	58020800 	.word	0x58020800
 80050b0:	58020c00 	.word	0x58020c00
 80050b4:	58021000 	.word	0x58021000
 80050b8:	58021400 	.word	0x58021400
 80050bc:	58021800 	.word	0x58021800
 80050c0:	58021c00 	.word	0x58021c00
 80050c4:	58022000 	.word	0x58022000
 80050c8:	58022400 	.word	0x58022400
 80050cc:	2300      	movs	r3, #0
 80050ce:	69fa      	ldr	r2, [r7, #28]
 80050d0:	f002 0203 	and.w	r2, r2, #3
 80050d4:	0092      	lsls	r2, r2, #2
 80050d6:	4093      	lsls	r3, r2
 80050d8:	69ba      	ldr	r2, [r7, #24]
 80050da:	4313      	orrs	r3, r2
 80050dc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80050de:	4938      	ldr	r1, [pc, #224]	; (80051c0 <HAL_GPIO_Init+0x35c>)
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	089b      	lsrs	r3, r3, #2
 80050e4:	3302      	adds	r3, #2
 80050e6:	69ba      	ldr	r2, [r7, #24]
 80050e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80050ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	43db      	mvns	r3, r3
 80050f8:	69ba      	ldr	r2, [r7, #24]
 80050fa:	4013      	ands	r3, r2
 80050fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d003      	beq.n	8005112 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800510a:	69ba      	ldr	r2, [r7, #24]
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	4313      	orrs	r3, r2
 8005110:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005112:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800511a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	43db      	mvns	r3, r3
 8005126:	69ba      	ldr	r2, [r7, #24]
 8005128:	4013      	ands	r3, r2
 800512a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005134:	2b00      	cmp	r3, #0
 8005136:	d003      	beq.n	8005140 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005138:	69ba      	ldr	r2, [r7, #24]
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	4313      	orrs	r3, r2
 800513e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005140:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005144:	69bb      	ldr	r3, [r7, #24]
 8005146:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	43db      	mvns	r3, r3
 8005152:	69ba      	ldr	r2, [r7, #24]
 8005154:	4013      	ands	r3, r2
 8005156:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005160:	2b00      	cmp	r3, #0
 8005162:	d003      	beq.n	800516c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005164:	69ba      	ldr	r2, [r7, #24]
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	4313      	orrs	r3, r2
 800516a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	69ba      	ldr	r2, [r7, #24]
 8005170:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	43db      	mvns	r3, r3
 800517c:	69ba      	ldr	r2, [r7, #24]
 800517e:	4013      	ands	r3, r2
 8005180:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d003      	beq.n	8005196 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800518e:	69ba      	ldr	r2, [r7, #24]
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	4313      	orrs	r3, r2
 8005194:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	69ba      	ldr	r2, [r7, #24]
 800519a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	3301      	adds	r3, #1
 80051a0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	fa22 f303 	lsr.w	r3, r2, r3
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f47f ae63 	bne.w	8004e78 <HAL_GPIO_Init+0x14>
  }
}
 80051b2:	bf00      	nop
 80051b4:	bf00      	nop
 80051b6:	3724      	adds	r7, #36	; 0x24
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr
 80051c0:	58000400 	.word	0x58000400

080051c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	460b      	mov	r3, r1
 80051ce:	807b      	strh	r3, [r7, #2]
 80051d0:	4613      	mov	r3, r2
 80051d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80051d4:	787b      	ldrb	r3, [r7, #1]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d003      	beq.n	80051e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80051da:	887a      	ldrh	r2, [r7, #2]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80051e0:	e003      	b.n	80051ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80051e2:	887b      	ldrh	r3, [r7, #2]
 80051e4:	041a      	lsls	r2, r3, #16
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	619a      	str	r2, [r3, #24]
}
 80051ea:	bf00      	nop
 80051ec:	370c      	adds	r7, #12
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr
	...

080051f8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d101      	bne.n	800520a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e0bf      	b.n	800538a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005210:	b2db      	uxtb	r3, r3
 8005212:	2b00      	cmp	r3, #0
 8005214:	d106      	bne.n	8005224 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f7fc ff02 	bl	8002028 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2202      	movs	r2, #2
 8005228:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	699a      	ldr	r2, [r3, #24]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800523a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	6999      	ldr	r1, [r3, #24]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	685a      	ldr	r2, [r3, #4]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005250:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	430a      	orrs	r2, r1
 800525e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	6899      	ldr	r1, [r3, #8]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	4b4a      	ldr	r3, [pc, #296]	; (8005394 <HAL_LTDC_Init+0x19c>)
 800526c:	400b      	ands	r3, r1
 800526e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	695b      	ldr	r3, [r3, #20]
 8005274:	041b      	lsls	r3, r3, #16
 8005276:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	6899      	ldr	r1, [r3, #8]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	699a      	ldr	r2, [r3, #24]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	431a      	orrs	r2, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	430a      	orrs	r2, r1
 800528c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68d9      	ldr	r1, [r3, #12]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	4b3e      	ldr	r3, [pc, #248]	; (8005394 <HAL_LTDC_Init+0x19c>)
 800529a:	400b      	ands	r3, r1
 800529c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	69db      	ldr	r3, [r3, #28]
 80052a2:	041b      	lsls	r3, r3, #16
 80052a4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	68d9      	ldr	r1, [r3, #12]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a1a      	ldr	r2, [r3, #32]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	431a      	orrs	r2, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	430a      	orrs	r2, r1
 80052ba:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	6919      	ldr	r1, [r3, #16]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	4b33      	ldr	r3, [pc, #204]	; (8005394 <HAL_LTDC_Init+0x19c>)
 80052c8:	400b      	ands	r3, r1
 80052ca:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d0:	041b      	lsls	r3, r3, #16
 80052d2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	6919      	ldr	r1, [r3, #16]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	431a      	orrs	r2, r3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	430a      	orrs	r2, r1
 80052e8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	6959      	ldr	r1, [r3, #20]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	4b27      	ldr	r3, [pc, #156]	; (8005394 <HAL_LTDC_Init+0x19c>)
 80052f6:	400b      	ands	r3, r1
 80052f8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052fe:	041b      	lsls	r3, r3, #16
 8005300:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	6959      	ldr	r1, [r3, #20]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	431a      	orrs	r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	430a      	orrs	r2, r1
 8005316:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800531e:	021b      	lsls	r3, r3, #8
 8005320:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005328:	041b      	lsls	r3, r3, #16
 800532a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800533a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005342:	68ba      	ldr	r2, [r7, #8]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	4313      	orrs	r3, r2
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800534e:	431a      	orrs	r2, r3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	430a      	orrs	r2, r1
 8005356:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f042 0206 	orr.w	r2, r2, #6
 8005366:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	699a      	ldr	r2, [r3, #24]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f042 0201 	orr.w	r2, r2, #1
 8005376:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005388:	2300      	movs	r3, #0
}
 800538a:	4618      	mov	r0, r3
 800538c:	3710      	adds	r7, #16
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
 8005392:	bf00      	nop
 8005394:	f000f800 	.word	0xf000f800

08005398 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005398:	b5b0      	push	{r4, r5, r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	60b9      	str	r1, [r7, #8]
 80053a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d101      	bne.n	80053b2 <HAL_LTDC_ConfigLayer+0x1a>
 80053ae:	2302      	movs	r3, #2
 80053b0:	e02c      	b.n	800540c <HAL_LTDC_ConfigLayer+0x74>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2201      	movs	r2, #1
 80053b6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2202      	movs	r2, #2
 80053be:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80053c2:	68fa      	ldr	r2, [r7, #12]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2134      	movs	r1, #52	; 0x34
 80053c8:	fb01 f303 	mul.w	r3, r1, r3
 80053cc:	4413      	add	r3, r2
 80053ce:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	4614      	mov	r4, r2
 80053d6:	461d      	mov	r5, r3
 80053d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053e4:	682b      	ldr	r3, [r5, #0]
 80053e6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	68b9      	ldr	r1, [r7, #8]
 80053ec:	68f8      	ldr	r0, [r7, #12]
 80053ee:	f000 f811 	bl	8005414 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2201      	movs	r2, #1
 80053f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2201      	movs	r2, #1
 80053fe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2200      	movs	r2, #0
 8005406:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800540a:	2300      	movs	r3, #0
}
 800540c:	4618      	mov	r0, r3
 800540e:	3710      	adds	r7, #16
 8005410:	46bd      	mov	sp, r7
 8005412:	bdb0      	pop	{r4, r5, r7, pc}

08005414 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005414:	b480      	push	{r7}
 8005416:	b089      	sub	sp, #36	; 0x24
 8005418:	af00      	add	r7, sp, #0
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	685a      	ldr	r2, [r3, #4]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	0c1b      	lsrs	r3, r3, #16
 800542c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005430:	4413      	add	r3, r2
 8005432:	041b      	lsls	r3, r3, #16
 8005434:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	461a      	mov	r2, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	01db      	lsls	r3, r3, #7
 8005440:	4413      	add	r3, r2
 8005442:	3384      	adds	r3, #132	; 0x84
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	6812      	ldr	r2, [r2, #0]
 800544a:	4611      	mov	r1, r2
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	01d2      	lsls	r2, r2, #7
 8005450:	440a      	add	r2, r1
 8005452:	3284      	adds	r2, #132	; 0x84
 8005454:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005458:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	0c1b      	lsrs	r3, r3, #16
 8005466:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800546a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800546c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4619      	mov	r1, r3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	01db      	lsls	r3, r3, #7
 8005478:	440b      	add	r3, r1
 800547a:	3384      	adds	r3, #132	; 0x84
 800547c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005482:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	68da      	ldr	r2, [r3, #12]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005492:	4413      	add	r3, r2
 8005494:	041b      	lsls	r3, r3, #16
 8005496:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	461a      	mov	r2, r3
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	01db      	lsls	r3, r3, #7
 80054a2:	4413      	add	r3, r2
 80054a4:	3384      	adds	r3, #132	; 0x84
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	6812      	ldr	r2, [r2, #0]
 80054ac:	4611      	mov	r1, r2
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	01d2      	lsls	r2, r2, #7
 80054b2:	440a      	add	r2, r1
 80054b4:	3284      	adds	r2, #132	; 0x84
 80054b6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80054ba:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	689a      	ldr	r2, [r3, #8]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80054ca:	4413      	add	r3, r2
 80054cc:	1c5a      	adds	r2, r3, #1
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4619      	mov	r1, r3
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	01db      	lsls	r3, r3, #7
 80054d8:	440b      	add	r3, r1
 80054da:	3384      	adds	r3, #132	; 0x84
 80054dc:	4619      	mov	r1, r3
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	461a      	mov	r2, r3
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	01db      	lsls	r3, r3, #7
 80054ee:	4413      	add	r3, r2
 80054f0:	3384      	adds	r3, #132	; 0x84
 80054f2:	691b      	ldr	r3, [r3, #16]
 80054f4:	68fa      	ldr	r2, [r7, #12]
 80054f6:	6812      	ldr	r2, [r2, #0]
 80054f8:	4611      	mov	r1, r2
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	01d2      	lsls	r2, r2, #7
 80054fe:	440a      	add	r2, r1
 8005500:	3284      	adds	r2, #132	; 0x84
 8005502:	f023 0307 	bic.w	r3, r3, #7
 8005506:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	461a      	mov	r2, r3
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	01db      	lsls	r3, r3, #7
 8005512:	4413      	add	r3, r2
 8005514:	3384      	adds	r3, #132	; 0x84
 8005516:	461a      	mov	r2, r3
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	691b      	ldr	r3, [r3, #16]
 800551c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005524:	021b      	lsls	r3, r3, #8
 8005526:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800552e:	041b      	lsls	r3, r3, #16
 8005530:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	699b      	ldr	r3, [r3, #24]
 8005536:	061b      	lsls	r3, r3, #24
 8005538:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	461a      	mov	r2, r3
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	01db      	lsls	r3, r3, #7
 8005544:	4413      	add	r3, r2
 8005546:	3384      	adds	r3, #132	; 0x84
 8005548:	699b      	ldr	r3, [r3, #24]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	461a      	mov	r2, r3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	01db      	lsls	r3, r3, #7
 8005554:	4413      	add	r3, r2
 8005556:	3384      	adds	r3, #132	; 0x84
 8005558:	461a      	mov	r2, r3
 800555a:	2300      	movs	r3, #0
 800555c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005564:	461a      	mov	r2, r3
 8005566:	69fb      	ldr	r3, [r7, #28]
 8005568:	431a      	orrs	r2, r3
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	431a      	orrs	r2, r3
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4619      	mov	r1, r3
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	01db      	lsls	r3, r3, #7
 8005578:	440b      	add	r3, r1
 800557a:	3384      	adds	r3, #132	; 0x84
 800557c:	4619      	mov	r1, r3
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	4313      	orrs	r3, r2
 8005582:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	461a      	mov	r2, r3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	01db      	lsls	r3, r3, #7
 800558e:	4413      	add	r3, r2
 8005590:	3384      	adds	r3, #132	; 0x84
 8005592:	695b      	ldr	r3, [r3, #20]
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	6812      	ldr	r2, [r2, #0]
 8005598:	4611      	mov	r1, r2
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	01d2      	lsls	r2, r2, #7
 800559e:	440a      	add	r2, r1
 80055a0:	3284      	adds	r2, #132	; 0x84
 80055a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80055a6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	461a      	mov	r2, r3
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	01db      	lsls	r3, r3, #7
 80055b2:	4413      	add	r3, r2
 80055b4:	3384      	adds	r3, #132	; 0x84
 80055b6:	461a      	mov	r2, r3
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	695b      	ldr	r3, [r3, #20]
 80055bc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	461a      	mov	r2, r3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	01db      	lsls	r3, r3, #7
 80055c8:	4413      	add	r3, r2
 80055ca:	3384      	adds	r3, #132	; 0x84
 80055cc:	69da      	ldr	r2, [r3, #28]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4619      	mov	r1, r3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	01db      	lsls	r3, r3, #7
 80055d8:	440b      	add	r3, r1
 80055da:	3384      	adds	r3, #132	; 0x84
 80055dc:	4619      	mov	r1, r3
 80055de:	4b58      	ldr	r3, [pc, #352]	; (8005740 <LTDC_SetConfig+0x32c>)
 80055e0:	4013      	ands	r3, r2
 80055e2:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	69da      	ldr	r2, [r3, #28]
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	6a1b      	ldr	r3, [r3, #32]
 80055ec:	68f9      	ldr	r1, [r7, #12]
 80055ee:	6809      	ldr	r1, [r1, #0]
 80055f0:	4608      	mov	r0, r1
 80055f2:	6879      	ldr	r1, [r7, #4]
 80055f4:	01c9      	lsls	r1, r1, #7
 80055f6:	4401      	add	r1, r0
 80055f8:	3184      	adds	r1, #132	; 0x84
 80055fa:	4313      	orrs	r3, r2
 80055fc:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	461a      	mov	r2, r3
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	01db      	lsls	r3, r3, #7
 8005608:	4413      	add	r3, r2
 800560a:	3384      	adds	r3, #132	; 0x84
 800560c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	461a      	mov	r2, r3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	01db      	lsls	r3, r3, #7
 8005618:	4413      	add	r3, r2
 800561a:	3384      	adds	r3, #132	; 0x84
 800561c:	461a      	mov	r2, r3
 800561e:	2300      	movs	r3, #0
 8005620:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	461a      	mov	r2, r3
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	01db      	lsls	r3, r3, #7
 800562c:	4413      	add	r3, r2
 800562e:	3384      	adds	r3, #132	; 0x84
 8005630:	461a      	mov	r2, r3
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005636:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	691b      	ldr	r3, [r3, #16]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d102      	bne.n	8005646 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8005640:	2304      	movs	r3, #4
 8005642:	61fb      	str	r3, [r7, #28]
 8005644:	e01b      	b.n	800567e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	2b01      	cmp	r3, #1
 800564c:	d102      	bne.n	8005654 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800564e:	2303      	movs	r3, #3
 8005650:	61fb      	str	r3, [r7, #28]
 8005652:	e014      	b.n	800567e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	691b      	ldr	r3, [r3, #16]
 8005658:	2b04      	cmp	r3, #4
 800565a:	d00b      	beq.n	8005674 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005660:	2b02      	cmp	r3, #2
 8005662:	d007      	beq.n	8005674 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005668:	2b03      	cmp	r3, #3
 800566a:	d003      	beq.n	8005674 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005670:	2b07      	cmp	r3, #7
 8005672:	d102      	bne.n	800567a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8005674:	2302      	movs	r3, #2
 8005676:	61fb      	str	r3, [r7, #28]
 8005678:	e001      	b.n	800567e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800567a:	2301      	movs	r3, #1
 800567c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	461a      	mov	r2, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	01db      	lsls	r3, r3, #7
 8005688:	4413      	add	r3, r2
 800568a:	3384      	adds	r3, #132	; 0x84
 800568c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	6812      	ldr	r2, [r2, #0]
 8005692:	4611      	mov	r1, r2
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	01d2      	lsls	r2, r2, #7
 8005698:	440a      	add	r2, r1
 800569a:	3284      	adds	r2, #132	; 0x84
 800569c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80056a0:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a6:	69fa      	ldr	r2, [r7, #28]
 80056a8:	fb02 f303 	mul.w	r3, r2, r3
 80056ac:	041a      	lsls	r2, r3, #16
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	6859      	ldr	r1, [r3, #4]
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	1acb      	subs	r3, r1, r3
 80056b8:	69f9      	ldr	r1, [r7, #28]
 80056ba:	fb01 f303 	mul.w	r3, r1, r3
 80056be:	3307      	adds	r3, #7
 80056c0:	68f9      	ldr	r1, [r7, #12]
 80056c2:	6809      	ldr	r1, [r1, #0]
 80056c4:	4608      	mov	r0, r1
 80056c6:	6879      	ldr	r1, [r7, #4]
 80056c8:	01c9      	lsls	r1, r1, #7
 80056ca:	4401      	add	r1, r0
 80056cc:	3184      	adds	r1, #132	; 0x84
 80056ce:	4313      	orrs	r3, r2
 80056d0:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	461a      	mov	r2, r3
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	01db      	lsls	r3, r3, #7
 80056dc:	4413      	add	r3, r2
 80056de:	3384      	adds	r3, #132	; 0x84
 80056e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4619      	mov	r1, r3
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	01db      	lsls	r3, r3, #7
 80056ec:	440b      	add	r3, r1
 80056ee:	3384      	adds	r3, #132	; 0x84
 80056f0:	4619      	mov	r1, r3
 80056f2:	4b14      	ldr	r3, [pc, #80]	; (8005744 <LTDC_SetConfig+0x330>)
 80056f4:	4013      	ands	r3, r2
 80056f6:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	461a      	mov	r2, r3
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	01db      	lsls	r3, r3, #7
 8005702:	4413      	add	r3, r2
 8005704:	3384      	adds	r3, #132	; 0x84
 8005706:	461a      	mov	r2, r3
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800570c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	461a      	mov	r2, r3
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	01db      	lsls	r3, r3, #7
 8005718:	4413      	add	r3, r2
 800571a:	3384      	adds	r3, #132	; 0x84
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	68fa      	ldr	r2, [r7, #12]
 8005720:	6812      	ldr	r2, [r2, #0]
 8005722:	4611      	mov	r1, r2
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	01d2      	lsls	r2, r2, #7
 8005728:	440a      	add	r2, r1
 800572a:	3284      	adds	r2, #132	; 0x84
 800572c:	f043 0301 	orr.w	r3, r3, #1
 8005730:	6013      	str	r3, [r2, #0]
}
 8005732:	bf00      	nop
 8005734:	3724      	adds	r7, #36	; 0x24
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr
 800573e:	bf00      	nop
 8005740:	fffff8f8 	.word	0xfffff8f8
 8005744:	fffff800 	.word	0xfffff800

08005748 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005748:	b5f0      	push	{r4, r5, r6, r7, lr}
 800574a:	b08f      	sub	sp, #60	; 0x3c
 800574c:	af0a      	add	r7, sp, #40	; 0x28
 800574e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d101      	bne.n	800575a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e116      	b.n	8005988 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005766:	b2db      	uxtb	r3, r3
 8005768:	2b00      	cmp	r3, #0
 800576a:	d106      	bne.n	800577a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f7fc fecd 	bl	8002514 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2203      	movs	r2, #3
 800577e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800578a:	2b00      	cmp	r3, #0
 800578c:	d102      	bne.n	8005794 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4618      	mov	r0, r3
 800579a:	f006 f9df 	bl	800bb5c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	603b      	str	r3, [r7, #0]
 80057a4:	687e      	ldr	r6, [r7, #4]
 80057a6:	466d      	mov	r5, sp
 80057a8:	f106 0410 	add.w	r4, r6, #16
 80057ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80057b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80057b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80057b8:	e885 0003 	stmia.w	r5, {r0, r1}
 80057bc:	1d33      	adds	r3, r6, #4
 80057be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80057c0:	6838      	ldr	r0, [r7, #0]
 80057c2:	f006 f95d 	bl	800ba80 <USB_CoreInit>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d005      	beq.n	80057d8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2202      	movs	r2, #2
 80057d0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e0d7      	b.n	8005988 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	2100      	movs	r1, #0
 80057de:	4618      	mov	r0, r3
 80057e0:	f006 f9cd 	bl	800bb7e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057e4:	2300      	movs	r3, #0
 80057e6:	73fb      	strb	r3, [r7, #15]
 80057e8:	e04a      	b.n	8005880 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80057ea:	7bfa      	ldrb	r2, [r7, #15]
 80057ec:	6879      	ldr	r1, [r7, #4]
 80057ee:	4613      	mov	r3, r2
 80057f0:	00db      	lsls	r3, r3, #3
 80057f2:	4413      	add	r3, r2
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	440b      	add	r3, r1
 80057f8:	333d      	adds	r3, #61	; 0x3d
 80057fa:	2201      	movs	r2, #1
 80057fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80057fe:	7bfa      	ldrb	r2, [r7, #15]
 8005800:	6879      	ldr	r1, [r7, #4]
 8005802:	4613      	mov	r3, r2
 8005804:	00db      	lsls	r3, r3, #3
 8005806:	4413      	add	r3, r2
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	440b      	add	r3, r1
 800580c:	333c      	adds	r3, #60	; 0x3c
 800580e:	7bfa      	ldrb	r2, [r7, #15]
 8005810:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005812:	7bfa      	ldrb	r2, [r7, #15]
 8005814:	7bfb      	ldrb	r3, [r7, #15]
 8005816:	b298      	uxth	r0, r3
 8005818:	6879      	ldr	r1, [r7, #4]
 800581a:	4613      	mov	r3, r2
 800581c:	00db      	lsls	r3, r3, #3
 800581e:	4413      	add	r3, r2
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	440b      	add	r3, r1
 8005824:	3356      	adds	r3, #86	; 0x56
 8005826:	4602      	mov	r2, r0
 8005828:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800582a:	7bfa      	ldrb	r2, [r7, #15]
 800582c:	6879      	ldr	r1, [r7, #4]
 800582e:	4613      	mov	r3, r2
 8005830:	00db      	lsls	r3, r3, #3
 8005832:	4413      	add	r3, r2
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	440b      	add	r3, r1
 8005838:	3340      	adds	r3, #64	; 0x40
 800583a:	2200      	movs	r2, #0
 800583c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800583e:	7bfa      	ldrb	r2, [r7, #15]
 8005840:	6879      	ldr	r1, [r7, #4]
 8005842:	4613      	mov	r3, r2
 8005844:	00db      	lsls	r3, r3, #3
 8005846:	4413      	add	r3, r2
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	440b      	add	r3, r1
 800584c:	3344      	adds	r3, #68	; 0x44
 800584e:	2200      	movs	r2, #0
 8005850:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005852:	7bfa      	ldrb	r2, [r7, #15]
 8005854:	6879      	ldr	r1, [r7, #4]
 8005856:	4613      	mov	r3, r2
 8005858:	00db      	lsls	r3, r3, #3
 800585a:	4413      	add	r3, r2
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	440b      	add	r3, r1
 8005860:	3348      	adds	r3, #72	; 0x48
 8005862:	2200      	movs	r2, #0
 8005864:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005866:	7bfa      	ldrb	r2, [r7, #15]
 8005868:	6879      	ldr	r1, [r7, #4]
 800586a:	4613      	mov	r3, r2
 800586c:	00db      	lsls	r3, r3, #3
 800586e:	4413      	add	r3, r2
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	440b      	add	r3, r1
 8005874:	334c      	adds	r3, #76	; 0x4c
 8005876:	2200      	movs	r2, #0
 8005878:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800587a:	7bfb      	ldrb	r3, [r7, #15]
 800587c:	3301      	adds	r3, #1
 800587e:	73fb      	strb	r3, [r7, #15]
 8005880:	7bfa      	ldrb	r2, [r7, #15]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	429a      	cmp	r2, r3
 8005888:	d3af      	bcc.n	80057ea <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800588a:	2300      	movs	r3, #0
 800588c:	73fb      	strb	r3, [r7, #15]
 800588e:	e044      	b.n	800591a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005890:	7bfa      	ldrb	r2, [r7, #15]
 8005892:	6879      	ldr	r1, [r7, #4]
 8005894:	4613      	mov	r3, r2
 8005896:	00db      	lsls	r3, r3, #3
 8005898:	4413      	add	r3, r2
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	440b      	add	r3, r1
 800589e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80058a2:	2200      	movs	r2, #0
 80058a4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80058a6:	7bfa      	ldrb	r2, [r7, #15]
 80058a8:	6879      	ldr	r1, [r7, #4]
 80058aa:	4613      	mov	r3, r2
 80058ac:	00db      	lsls	r3, r3, #3
 80058ae:	4413      	add	r3, r2
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	440b      	add	r3, r1
 80058b4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80058b8:	7bfa      	ldrb	r2, [r7, #15]
 80058ba:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80058bc:	7bfa      	ldrb	r2, [r7, #15]
 80058be:	6879      	ldr	r1, [r7, #4]
 80058c0:	4613      	mov	r3, r2
 80058c2:	00db      	lsls	r3, r3, #3
 80058c4:	4413      	add	r3, r2
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	440b      	add	r3, r1
 80058ca:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80058ce:	2200      	movs	r2, #0
 80058d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80058d2:	7bfa      	ldrb	r2, [r7, #15]
 80058d4:	6879      	ldr	r1, [r7, #4]
 80058d6:	4613      	mov	r3, r2
 80058d8:	00db      	lsls	r3, r3, #3
 80058da:	4413      	add	r3, r2
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	440b      	add	r3, r1
 80058e0:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80058e4:	2200      	movs	r2, #0
 80058e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80058e8:	7bfa      	ldrb	r2, [r7, #15]
 80058ea:	6879      	ldr	r1, [r7, #4]
 80058ec:	4613      	mov	r3, r2
 80058ee:	00db      	lsls	r3, r3, #3
 80058f0:	4413      	add	r3, r2
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	440b      	add	r3, r1
 80058f6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80058fa:	2200      	movs	r2, #0
 80058fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80058fe:	7bfa      	ldrb	r2, [r7, #15]
 8005900:	6879      	ldr	r1, [r7, #4]
 8005902:	4613      	mov	r3, r2
 8005904:	00db      	lsls	r3, r3, #3
 8005906:	4413      	add	r3, r2
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	440b      	add	r3, r1
 800590c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005910:	2200      	movs	r2, #0
 8005912:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005914:	7bfb      	ldrb	r3, [r7, #15]
 8005916:	3301      	adds	r3, #1
 8005918:	73fb      	strb	r3, [r7, #15]
 800591a:	7bfa      	ldrb	r2, [r7, #15]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	429a      	cmp	r2, r3
 8005922:	d3b5      	bcc.n	8005890 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	603b      	str	r3, [r7, #0]
 800592a:	687e      	ldr	r6, [r7, #4]
 800592c:	466d      	mov	r5, sp
 800592e:	f106 0410 	add.w	r4, r6, #16
 8005932:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005934:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005936:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005938:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800593a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800593e:	e885 0003 	stmia.w	r5, {r0, r1}
 8005942:	1d33      	adds	r3, r6, #4
 8005944:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005946:	6838      	ldr	r0, [r7, #0]
 8005948:	f006 f966 	bl	800bc18 <USB_DevInit>
 800594c:	4603      	mov	r3, r0
 800594e:	2b00      	cmp	r3, #0
 8005950:	d005      	beq.n	800595e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2202      	movs	r2, #2
 8005956:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e014      	b.n	8005988 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2201      	movs	r2, #1
 800596a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005972:	2b01      	cmp	r3, #1
 8005974:	d102      	bne.n	800597c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 f80a 	bl	8005990 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4618      	mov	r0, r3
 8005982:	f006 fb24 	bl	800bfce <USB_DevDisconnect>

  return HAL_OK;
 8005986:	2300      	movs	r3, #0
}
 8005988:	4618      	mov	r0, r3
 800598a:	3714      	adds	r7, #20
 800598c:	46bd      	mov	sp, r7
 800598e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005990 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005990:	b480      	push	{r7}
 8005992:	b085      	sub	sp, #20
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2201      	movs	r2, #1
 80059a2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	699b      	ldr	r3, [r3, #24]
 80059b2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80059be:	4b05      	ldr	r3, [pc, #20]	; (80059d4 <HAL_PCDEx_ActivateLPM+0x44>)
 80059c0:	4313      	orrs	r3, r2
 80059c2:	68fa      	ldr	r2, [r7, #12]
 80059c4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80059c6:	2300      	movs	r3, #0
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3714      	adds	r7, #20
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr
 80059d4:	10000003 	.word	0x10000003

080059d8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b084      	sub	sp, #16
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80059e0:	4b19      	ldr	r3, [pc, #100]	; (8005a48 <HAL_PWREx_ConfigSupply+0x70>)
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	f003 0304 	and.w	r3, r3, #4
 80059e8:	2b04      	cmp	r3, #4
 80059ea:	d00a      	beq.n	8005a02 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80059ec:	4b16      	ldr	r3, [pc, #88]	; (8005a48 <HAL_PWREx_ConfigSupply+0x70>)
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	f003 0307 	and.w	r3, r3, #7
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d001      	beq.n	80059fe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	e01f      	b.n	8005a3e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80059fe:	2300      	movs	r3, #0
 8005a00:	e01d      	b.n	8005a3e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005a02:	4b11      	ldr	r3, [pc, #68]	; (8005a48 <HAL_PWREx_ConfigSupply+0x70>)
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	f023 0207 	bic.w	r2, r3, #7
 8005a0a:	490f      	ldr	r1, [pc, #60]	; (8005a48 <HAL_PWREx_ConfigSupply+0x70>)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005a12:	f7fd f8c7 	bl	8002ba4 <HAL_GetTick>
 8005a16:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005a18:	e009      	b.n	8005a2e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005a1a:	f7fd f8c3 	bl	8002ba4 <HAL_GetTick>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	1ad3      	subs	r3, r2, r3
 8005a24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a28:	d901      	bls.n	8005a2e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e007      	b.n	8005a3e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005a2e:	4b06      	ldr	r3, [pc, #24]	; (8005a48 <HAL_PWREx_ConfigSupply+0x70>)
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a3a:	d1ee      	bne.n	8005a1a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005a3c:	2300      	movs	r3, #0
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3710      	adds	r7, #16
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
 8005a46:	bf00      	nop
 8005a48:	58024800 	.word	0x58024800

08005a4c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005a50:	4b05      	ldr	r3, [pc, #20]	; (8005a68 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	4a04      	ldr	r2, [pc, #16]	; (8005a68 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005a56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a5a:	60d3      	str	r3, [r2, #12]
}
 8005a5c:	bf00      	nop
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr
 8005a66:	bf00      	nop
 8005a68:	58024800 	.word	0x58024800

08005a6c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b08c      	sub	sp, #48	; 0x30
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d102      	bne.n	8005a80 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	f000 bc48 	b.w	8006310 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 0301 	and.w	r3, r3, #1
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	f000 8088 	beq.w	8005b9e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a8e:	4b99      	ldr	r3, [pc, #612]	; (8005cf4 <HAL_RCC_OscConfig+0x288>)
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a96:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005a98:	4b96      	ldr	r3, [pc, #600]	; (8005cf4 <HAL_RCC_OscConfig+0x288>)
 8005a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a9c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa0:	2b10      	cmp	r3, #16
 8005aa2:	d007      	beq.n	8005ab4 <HAL_RCC_OscConfig+0x48>
 8005aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa6:	2b18      	cmp	r3, #24
 8005aa8:	d111      	bne.n	8005ace <HAL_RCC_OscConfig+0x62>
 8005aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aac:	f003 0303 	and.w	r3, r3, #3
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	d10c      	bne.n	8005ace <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ab4:	4b8f      	ldr	r3, [pc, #572]	; (8005cf4 <HAL_RCC_OscConfig+0x288>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d06d      	beq.n	8005b9c <HAL_RCC_OscConfig+0x130>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d169      	bne.n	8005b9c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	f000 bc21 	b.w	8006310 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ad6:	d106      	bne.n	8005ae6 <HAL_RCC_OscConfig+0x7a>
 8005ad8:	4b86      	ldr	r3, [pc, #536]	; (8005cf4 <HAL_RCC_OscConfig+0x288>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a85      	ldr	r2, [pc, #532]	; (8005cf4 <HAL_RCC_OscConfig+0x288>)
 8005ade:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ae2:	6013      	str	r3, [r2, #0]
 8005ae4:	e02e      	b.n	8005b44 <HAL_RCC_OscConfig+0xd8>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d10c      	bne.n	8005b08 <HAL_RCC_OscConfig+0x9c>
 8005aee:	4b81      	ldr	r3, [pc, #516]	; (8005cf4 <HAL_RCC_OscConfig+0x288>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a80      	ldr	r2, [pc, #512]	; (8005cf4 <HAL_RCC_OscConfig+0x288>)
 8005af4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005af8:	6013      	str	r3, [r2, #0]
 8005afa:	4b7e      	ldr	r3, [pc, #504]	; (8005cf4 <HAL_RCC_OscConfig+0x288>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a7d      	ldr	r2, [pc, #500]	; (8005cf4 <HAL_RCC_OscConfig+0x288>)
 8005b00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b04:	6013      	str	r3, [r2, #0]
 8005b06:	e01d      	b.n	8005b44 <HAL_RCC_OscConfig+0xd8>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b10:	d10c      	bne.n	8005b2c <HAL_RCC_OscConfig+0xc0>
 8005b12:	4b78      	ldr	r3, [pc, #480]	; (8005cf4 <HAL_RCC_OscConfig+0x288>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a77      	ldr	r2, [pc, #476]	; (8005cf4 <HAL_RCC_OscConfig+0x288>)
 8005b18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b1c:	6013      	str	r3, [r2, #0]
 8005b1e:	4b75      	ldr	r3, [pc, #468]	; (8005cf4 <HAL_RCC_OscConfig+0x288>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a74      	ldr	r2, [pc, #464]	; (8005cf4 <HAL_RCC_OscConfig+0x288>)
 8005b24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b28:	6013      	str	r3, [r2, #0]
 8005b2a:	e00b      	b.n	8005b44 <HAL_RCC_OscConfig+0xd8>
 8005b2c:	4b71      	ldr	r3, [pc, #452]	; (8005cf4 <HAL_RCC_OscConfig+0x288>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a70      	ldr	r2, [pc, #448]	; (8005cf4 <HAL_RCC_OscConfig+0x288>)
 8005b32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b36:	6013      	str	r3, [r2, #0]
 8005b38:	4b6e      	ldr	r3, [pc, #440]	; (8005cf4 <HAL_RCC_OscConfig+0x288>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a6d      	ldr	r2, [pc, #436]	; (8005cf4 <HAL_RCC_OscConfig+0x288>)
 8005b3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d013      	beq.n	8005b74 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b4c:	f7fd f82a 	bl	8002ba4 <HAL_GetTick>
 8005b50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005b52:	e008      	b.n	8005b66 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b54:	f7fd f826 	bl	8002ba4 <HAL_GetTick>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5c:	1ad3      	subs	r3, r2, r3
 8005b5e:	2b64      	cmp	r3, #100	; 0x64
 8005b60:	d901      	bls.n	8005b66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005b62:	2303      	movs	r3, #3
 8005b64:	e3d4      	b.n	8006310 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005b66:	4b63      	ldr	r3, [pc, #396]	; (8005cf4 <HAL_RCC_OscConfig+0x288>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d0f0      	beq.n	8005b54 <HAL_RCC_OscConfig+0xe8>
 8005b72:	e014      	b.n	8005b9e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b74:	f7fd f816 	bl	8002ba4 <HAL_GetTick>
 8005b78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005b7a:	e008      	b.n	8005b8e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b7c:	f7fd f812 	bl	8002ba4 <HAL_GetTick>
 8005b80:	4602      	mov	r2, r0
 8005b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b84:	1ad3      	subs	r3, r2, r3
 8005b86:	2b64      	cmp	r3, #100	; 0x64
 8005b88:	d901      	bls.n	8005b8e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005b8a:	2303      	movs	r3, #3
 8005b8c:	e3c0      	b.n	8006310 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005b8e:	4b59      	ldr	r3, [pc, #356]	; (8005cf4 <HAL_RCC_OscConfig+0x288>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d1f0      	bne.n	8005b7c <HAL_RCC_OscConfig+0x110>
 8005b9a:	e000      	b.n	8005b9e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 0302 	and.w	r3, r3, #2
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	f000 80ca 	beq.w	8005d40 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005bac:	4b51      	ldr	r3, [pc, #324]	; (8005cf4 <HAL_RCC_OscConfig+0x288>)
 8005bae:	691b      	ldr	r3, [r3, #16]
 8005bb0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005bb4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005bb6:	4b4f      	ldr	r3, [pc, #316]	; (8005cf4 <HAL_RCC_OscConfig+0x288>)
 8005bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bba:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005bbc:	6a3b      	ldr	r3, [r7, #32]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d007      	beq.n	8005bd2 <HAL_RCC_OscConfig+0x166>
 8005bc2:	6a3b      	ldr	r3, [r7, #32]
 8005bc4:	2b18      	cmp	r3, #24
 8005bc6:	d156      	bne.n	8005c76 <HAL_RCC_OscConfig+0x20a>
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	f003 0303 	and.w	r3, r3, #3
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d151      	bne.n	8005c76 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005bd2:	4b48      	ldr	r3, [pc, #288]	; (8005cf4 <HAL_RCC_OscConfig+0x288>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 0304 	and.w	r3, r3, #4
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d005      	beq.n	8005bea <HAL_RCC_OscConfig+0x17e>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d101      	bne.n	8005bea <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	e392      	b.n	8006310 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005bea:	4b42      	ldr	r3, [pc, #264]	; (8005cf4 <HAL_RCC_OscConfig+0x288>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f023 0219 	bic.w	r2, r3, #25
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	68db      	ldr	r3, [r3, #12]
 8005bf6:	493f      	ldr	r1, [pc, #252]	; (8005cf4 <HAL_RCC_OscConfig+0x288>)
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bfc:	f7fc ffd2 	bl	8002ba4 <HAL_GetTick>
 8005c00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c02:	e008      	b.n	8005c16 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c04:	f7fc ffce 	bl	8002ba4 <HAL_GetTick>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0c:	1ad3      	subs	r3, r2, r3
 8005c0e:	2b02      	cmp	r3, #2
 8005c10:	d901      	bls.n	8005c16 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005c12:	2303      	movs	r3, #3
 8005c14:	e37c      	b.n	8006310 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c16:	4b37      	ldr	r3, [pc, #220]	; (8005cf4 <HAL_RCC_OscConfig+0x288>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 0304 	and.w	r3, r3, #4
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d0f0      	beq.n	8005c04 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c22:	f7fc ffef 	bl	8002c04 <HAL_GetREVID>
 8005c26:	4603      	mov	r3, r0
 8005c28:	f241 0203 	movw	r2, #4099	; 0x1003
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d817      	bhi.n	8005c60 <HAL_RCC_OscConfig+0x1f4>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	691b      	ldr	r3, [r3, #16]
 8005c34:	2b40      	cmp	r3, #64	; 0x40
 8005c36:	d108      	bne.n	8005c4a <HAL_RCC_OscConfig+0x1de>
 8005c38:	4b2e      	ldr	r3, [pc, #184]	; (8005cf4 <HAL_RCC_OscConfig+0x288>)
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005c40:	4a2c      	ldr	r2, [pc, #176]	; (8005cf4 <HAL_RCC_OscConfig+0x288>)
 8005c42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c46:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c48:	e07a      	b.n	8005d40 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c4a:	4b2a      	ldr	r3, [pc, #168]	; (8005cf4 <HAL_RCC_OscConfig+0x288>)
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	691b      	ldr	r3, [r3, #16]
 8005c56:	031b      	lsls	r3, r3, #12
 8005c58:	4926      	ldr	r1, [pc, #152]	; (8005cf4 <HAL_RCC_OscConfig+0x288>)
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c5e:	e06f      	b.n	8005d40 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c60:	4b24      	ldr	r3, [pc, #144]	; (8005cf4 <HAL_RCC_OscConfig+0x288>)
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	061b      	lsls	r3, r3, #24
 8005c6e:	4921      	ldr	r1, [pc, #132]	; (8005cf4 <HAL_RCC_OscConfig+0x288>)
 8005c70:	4313      	orrs	r3, r2
 8005c72:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c74:	e064      	b.n	8005d40 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d047      	beq.n	8005d0e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005c7e:	4b1d      	ldr	r3, [pc, #116]	; (8005cf4 <HAL_RCC_OscConfig+0x288>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f023 0219 	bic.w	r2, r3, #25
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	491a      	ldr	r1, [pc, #104]	; (8005cf4 <HAL_RCC_OscConfig+0x288>)
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c90:	f7fc ff88 	bl	8002ba4 <HAL_GetTick>
 8005c94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c96:	e008      	b.n	8005caa <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c98:	f7fc ff84 	bl	8002ba4 <HAL_GetTick>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	2b02      	cmp	r3, #2
 8005ca4:	d901      	bls.n	8005caa <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005ca6:	2303      	movs	r3, #3
 8005ca8:	e332      	b.n	8006310 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005caa:	4b12      	ldr	r3, [pc, #72]	; (8005cf4 <HAL_RCC_OscConfig+0x288>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 0304 	and.w	r3, r3, #4
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d0f0      	beq.n	8005c98 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cb6:	f7fc ffa5 	bl	8002c04 <HAL_GetREVID>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	f241 0203 	movw	r2, #4099	; 0x1003
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d819      	bhi.n	8005cf8 <HAL_RCC_OscConfig+0x28c>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	691b      	ldr	r3, [r3, #16]
 8005cc8:	2b40      	cmp	r3, #64	; 0x40
 8005cca:	d108      	bne.n	8005cde <HAL_RCC_OscConfig+0x272>
 8005ccc:	4b09      	ldr	r3, [pc, #36]	; (8005cf4 <HAL_RCC_OscConfig+0x288>)
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005cd4:	4a07      	ldr	r2, [pc, #28]	; (8005cf4 <HAL_RCC_OscConfig+0x288>)
 8005cd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cda:	6053      	str	r3, [r2, #4]
 8005cdc:	e030      	b.n	8005d40 <HAL_RCC_OscConfig+0x2d4>
 8005cde:	4b05      	ldr	r3, [pc, #20]	; (8005cf4 <HAL_RCC_OscConfig+0x288>)
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	691b      	ldr	r3, [r3, #16]
 8005cea:	031b      	lsls	r3, r3, #12
 8005cec:	4901      	ldr	r1, [pc, #4]	; (8005cf4 <HAL_RCC_OscConfig+0x288>)
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	604b      	str	r3, [r1, #4]
 8005cf2:	e025      	b.n	8005d40 <HAL_RCC_OscConfig+0x2d4>
 8005cf4:	58024400 	.word	0x58024400
 8005cf8:	4b9a      	ldr	r3, [pc, #616]	; (8005f64 <HAL_RCC_OscConfig+0x4f8>)
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	691b      	ldr	r3, [r3, #16]
 8005d04:	061b      	lsls	r3, r3, #24
 8005d06:	4997      	ldr	r1, [pc, #604]	; (8005f64 <HAL_RCC_OscConfig+0x4f8>)
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	604b      	str	r3, [r1, #4]
 8005d0c:	e018      	b.n	8005d40 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d0e:	4b95      	ldr	r3, [pc, #596]	; (8005f64 <HAL_RCC_OscConfig+0x4f8>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a94      	ldr	r2, [pc, #592]	; (8005f64 <HAL_RCC_OscConfig+0x4f8>)
 8005d14:	f023 0301 	bic.w	r3, r3, #1
 8005d18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d1a:	f7fc ff43 	bl	8002ba4 <HAL_GetTick>
 8005d1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005d20:	e008      	b.n	8005d34 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d22:	f7fc ff3f 	bl	8002ba4 <HAL_GetTick>
 8005d26:	4602      	mov	r2, r0
 8005d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2a:	1ad3      	subs	r3, r2, r3
 8005d2c:	2b02      	cmp	r3, #2
 8005d2e:	d901      	bls.n	8005d34 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005d30:	2303      	movs	r3, #3
 8005d32:	e2ed      	b.n	8006310 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005d34:	4b8b      	ldr	r3, [pc, #556]	; (8005f64 <HAL_RCC_OscConfig+0x4f8>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f003 0304 	and.w	r3, r3, #4
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d1f0      	bne.n	8005d22 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 0310 	and.w	r3, r3, #16
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	f000 80a9 	beq.w	8005ea0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d4e:	4b85      	ldr	r3, [pc, #532]	; (8005f64 <HAL_RCC_OscConfig+0x4f8>)
 8005d50:	691b      	ldr	r3, [r3, #16]
 8005d52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d56:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005d58:	4b82      	ldr	r3, [pc, #520]	; (8005f64 <HAL_RCC_OscConfig+0x4f8>)
 8005d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d5c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005d5e:	69bb      	ldr	r3, [r7, #24]
 8005d60:	2b08      	cmp	r3, #8
 8005d62:	d007      	beq.n	8005d74 <HAL_RCC_OscConfig+0x308>
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	2b18      	cmp	r3, #24
 8005d68:	d13a      	bne.n	8005de0 <HAL_RCC_OscConfig+0x374>
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	f003 0303 	and.w	r3, r3, #3
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d135      	bne.n	8005de0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005d74:	4b7b      	ldr	r3, [pc, #492]	; (8005f64 <HAL_RCC_OscConfig+0x4f8>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d005      	beq.n	8005d8c <HAL_RCC_OscConfig+0x320>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	69db      	ldr	r3, [r3, #28]
 8005d84:	2b80      	cmp	r3, #128	; 0x80
 8005d86:	d001      	beq.n	8005d8c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e2c1      	b.n	8006310 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005d8c:	f7fc ff3a 	bl	8002c04 <HAL_GetREVID>
 8005d90:	4603      	mov	r3, r0
 8005d92:	f241 0203 	movw	r2, #4099	; 0x1003
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d817      	bhi.n	8005dca <HAL_RCC_OscConfig+0x35e>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6a1b      	ldr	r3, [r3, #32]
 8005d9e:	2b20      	cmp	r3, #32
 8005da0:	d108      	bne.n	8005db4 <HAL_RCC_OscConfig+0x348>
 8005da2:	4b70      	ldr	r3, [pc, #448]	; (8005f64 <HAL_RCC_OscConfig+0x4f8>)
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005daa:	4a6e      	ldr	r2, [pc, #440]	; (8005f64 <HAL_RCC_OscConfig+0x4f8>)
 8005dac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005db0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005db2:	e075      	b.n	8005ea0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005db4:	4b6b      	ldr	r3, [pc, #428]	; (8005f64 <HAL_RCC_OscConfig+0x4f8>)
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6a1b      	ldr	r3, [r3, #32]
 8005dc0:	069b      	lsls	r3, r3, #26
 8005dc2:	4968      	ldr	r1, [pc, #416]	; (8005f64 <HAL_RCC_OscConfig+0x4f8>)
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005dc8:	e06a      	b.n	8005ea0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005dca:	4b66      	ldr	r3, [pc, #408]	; (8005f64 <HAL_RCC_OscConfig+0x4f8>)
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6a1b      	ldr	r3, [r3, #32]
 8005dd6:	061b      	lsls	r3, r3, #24
 8005dd8:	4962      	ldr	r1, [pc, #392]	; (8005f64 <HAL_RCC_OscConfig+0x4f8>)
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005dde:	e05f      	b.n	8005ea0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	69db      	ldr	r3, [r3, #28]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d042      	beq.n	8005e6e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005de8:	4b5e      	ldr	r3, [pc, #376]	; (8005f64 <HAL_RCC_OscConfig+0x4f8>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a5d      	ldr	r2, [pc, #372]	; (8005f64 <HAL_RCC_OscConfig+0x4f8>)
 8005dee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005df2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005df4:	f7fc fed6 	bl	8002ba4 <HAL_GetTick>
 8005df8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005dfa:	e008      	b.n	8005e0e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005dfc:	f7fc fed2 	bl	8002ba4 <HAL_GetTick>
 8005e00:	4602      	mov	r2, r0
 8005e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e04:	1ad3      	subs	r3, r2, r3
 8005e06:	2b02      	cmp	r3, #2
 8005e08:	d901      	bls.n	8005e0e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005e0a:	2303      	movs	r3, #3
 8005e0c:	e280      	b.n	8006310 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005e0e:	4b55      	ldr	r3, [pc, #340]	; (8005f64 <HAL_RCC_OscConfig+0x4f8>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d0f0      	beq.n	8005dfc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005e1a:	f7fc fef3 	bl	8002c04 <HAL_GetREVID>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	f241 0203 	movw	r2, #4099	; 0x1003
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d817      	bhi.n	8005e58 <HAL_RCC_OscConfig+0x3ec>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6a1b      	ldr	r3, [r3, #32]
 8005e2c:	2b20      	cmp	r3, #32
 8005e2e:	d108      	bne.n	8005e42 <HAL_RCC_OscConfig+0x3d6>
 8005e30:	4b4c      	ldr	r3, [pc, #304]	; (8005f64 <HAL_RCC_OscConfig+0x4f8>)
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005e38:	4a4a      	ldr	r2, [pc, #296]	; (8005f64 <HAL_RCC_OscConfig+0x4f8>)
 8005e3a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e3e:	6053      	str	r3, [r2, #4]
 8005e40:	e02e      	b.n	8005ea0 <HAL_RCC_OscConfig+0x434>
 8005e42:	4b48      	ldr	r3, [pc, #288]	; (8005f64 <HAL_RCC_OscConfig+0x4f8>)
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a1b      	ldr	r3, [r3, #32]
 8005e4e:	069b      	lsls	r3, r3, #26
 8005e50:	4944      	ldr	r1, [pc, #272]	; (8005f64 <HAL_RCC_OscConfig+0x4f8>)
 8005e52:	4313      	orrs	r3, r2
 8005e54:	604b      	str	r3, [r1, #4]
 8005e56:	e023      	b.n	8005ea0 <HAL_RCC_OscConfig+0x434>
 8005e58:	4b42      	ldr	r3, [pc, #264]	; (8005f64 <HAL_RCC_OscConfig+0x4f8>)
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6a1b      	ldr	r3, [r3, #32]
 8005e64:	061b      	lsls	r3, r3, #24
 8005e66:	493f      	ldr	r1, [pc, #252]	; (8005f64 <HAL_RCC_OscConfig+0x4f8>)
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	60cb      	str	r3, [r1, #12]
 8005e6c:	e018      	b.n	8005ea0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005e6e:	4b3d      	ldr	r3, [pc, #244]	; (8005f64 <HAL_RCC_OscConfig+0x4f8>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a3c      	ldr	r2, [pc, #240]	; (8005f64 <HAL_RCC_OscConfig+0x4f8>)
 8005e74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e7a:	f7fc fe93 	bl	8002ba4 <HAL_GetTick>
 8005e7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005e80:	e008      	b.n	8005e94 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005e82:	f7fc fe8f 	bl	8002ba4 <HAL_GetTick>
 8005e86:	4602      	mov	r2, r0
 8005e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8a:	1ad3      	subs	r3, r2, r3
 8005e8c:	2b02      	cmp	r3, #2
 8005e8e:	d901      	bls.n	8005e94 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005e90:	2303      	movs	r3, #3
 8005e92:	e23d      	b.n	8006310 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005e94:	4b33      	ldr	r3, [pc, #204]	; (8005f64 <HAL_RCC_OscConfig+0x4f8>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d1f0      	bne.n	8005e82 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 0308 	and.w	r3, r3, #8
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d036      	beq.n	8005f1a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	695b      	ldr	r3, [r3, #20]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d019      	beq.n	8005ee8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005eb4:	4b2b      	ldr	r3, [pc, #172]	; (8005f64 <HAL_RCC_OscConfig+0x4f8>)
 8005eb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005eb8:	4a2a      	ldr	r2, [pc, #168]	; (8005f64 <HAL_RCC_OscConfig+0x4f8>)
 8005eba:	f043 0301 	orr.w	r3, r3, #1
 8005ebe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ec0:	f7fc fe70 	bl	8002ba4 <HAL_GetTick>
 8005ec4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005ec6:	e008      	b.n	8005eda <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ec8:	f7fc fe6c 	bl	8002ba4 <HAL_GetTick>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed0:	1ad3      	subs	r3, r2, r3
 8005ed2:	2b02      	cmp	r3, #2
 8005ed4:	d901      	bls.n	8005eda <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005ed6:	2303      	movs	r3, #3
 8005ed8:	e21a      	b.n	8006310 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005eda:	4b22      	ldr	r3, [pc, #136]	; (8005f64 <HAL_RCC_OscConfig+0x4f8>)
 8005edc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ede:	f003 0302 	and.w	r3, r3, #2
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d0f0      	beq.n	8005ec8 <HAL_RCC_OscConfig+0x45c>
 8005ee6:	e018      	b.n	8005f1a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ee8:	4b1e      	ldr	r3, [pc, #120]	; (8005f64 <HAL_RCC_OscConfig+0x4f8>)
 8005eea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005eec:	4a1d      	ldr	r2, [pc, #116]	; (8005f64 <HAL_RCC_OscConfig+0x4f8>)
 8005eee:	f023 0301 	bic.w	r3, r3, #1
 8005ef2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ef4:	f7fc fe56 	bl	8002ba4 <HAL_GetTick>
 8005ef8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005efa:	e008      	b.n	8005f0e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005efc:	f7fc fe52 	bl	8002ba4 <HAL_GetTick>
 8005f00:	4602      	mov	r2, r0
 8005f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f04:	1ad3      	subs	r3, r2, r3
 8005f06:	2b02      	cmp	r3, #2
 8005f08:	d901      	bls.n	8005f0e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	e200      	b.n	8006310 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005f0e:	4b15      	ldr	r3, [pc, #84]	; (8005f64 <HAL_RCC_OscConfig+0x4f8>)
 8005f10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f12:	f003 0302 	and.w	r3, r3, #2
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d1f0      	bne.n	8005efc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f003 0320 	and.w	r3, r3, #32
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d039      	beq.n	8005f9a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	699b      	ldr	r3, [r3, #24]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d01c      	beq.n	8005f68 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005f2e:	4b0d      	ldr	r3, [pc, #52]	; (8005f64 <HAL_RCC_OscConfig+0x4f8>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a0c      	ldr	r2, [pc, #48]	; (8005f64 <HAL_RCC_OscConfig+0x4f8>)
 8005f34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005f38:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005f3a:	f7fc fe33 	bl	8002ba4 <HAL_GetTick>
 8005f3e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005f40:	e008      	b.n	8005f54 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f42:	f7fc fe2f 	bl	8002ba4 <HAL_GetTick>
 8005f46:	4602      	mov	r2, r0
 8005f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4a:	1ad3      	subs	r3, r2, r3
 8005f4c:	2b02      	cmp	r3, #2
 8005f4e:	d901      	bls.n	8005f54 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005f50:	2303      	movs	r3, #3
 8005f52:	e1dd      	b.n	8006310 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005f54:	4b03      	ldr	r3, [pc, #12]	; (8005f64 <HAL_RCC_OscConfig+0x4f8>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d0f0      	beq.n	8005f42 <HAL_RCC_OscConfig+0x4d6>
 8005f60:	e01b      	b.n	8005f9a <HAL_RCC_OscConfig+0x52e>
 8005f62:	bf00      	nop
 8005f64:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005f68:	4b9b      	ldr	r3, [pc, #620]	; (80061d8 <HAL_RCC_OscConfig+0x76c>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a9a      	ldr	r2, [pc, #616]	; (80061d8 <HAL_RCC_OscConfig+0x76c>)
 8005f6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f72:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005f74:	f7fc fe16 	bl	8002ba4 <HAL_GetTick>
 8005f78:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005f7a:	e008      	b.n	8005f8e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f7c:	f7fc fe12 	bl	8002ba4 <HAL_GetTick>
 8005f80:	4602      	mov	r2, r0
 8005f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f84:	1ad3      	subs	r3, r2, r3
 8005f86:	2b02      	cmp	r3, #2
 8005f88:	d901      	bls.n	8005f8e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005f8a:	2303      	movs	r3, #3
 8005f8c:	e1c0      	b.n	8006310 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005f8e:	4b92      	ldr	r3, [pc, #584]	; (80061d8 <HAL_RCC_OscConfig+0x76c>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d1f0      	bne.n	8005f7c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f003 0304 	and.w	r3, r3, #4
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	f000 8081 	beq.w	80060aa <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005fa8:	4b8c      	ldr	r3, [pc, #560]	; (80061dc <HAL_RCC_OscConfig+0x770>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a8b      	ldr	r2, [pc, #556]	; (80061dc <HAL_RCC_OscConfig+0x770>)
 8005fae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fb2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005fb4:	f7fc fdf6 	bl	8002ba4 <HAL_GetTick>
 8005fb8:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005fba:	e008      	b.n	8005fce <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fbc:	f7fc fdf2 	bl	8002ba4 <HAL_GetTick>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc4:	1ad3      	subs	r3, r2, r3
 8005fc6:	2b64      	cmp	r3, #100	; 0x64
 8005fc8:	d901      	bls.n	8005fce <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005fca:	2303      	movs	r3, #3
 8005fcc:	e1a0      	b.n	8006310 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005fce:	4b83      	ldr	r3, [pc, #524]	; (80061dc <HAL_RCC_OscConfig+0x770>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d0f0      	beq.n	8005fbc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d106      	bne.n	8005ff0 <HAL_RCC_OscConfig+0x584>
 8005fe2:	4b7d      	ldr	r3, [pc, #500]	; (80061d8 <HAL_RCC_OscConfig+0x76c>)
 8005fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fe6:	4a7c      	ldr	r2, [pc, #496]	; (80061d8 <HAL_RCC_OscConfig+0x76c>)
 8005fe8:	f043 0301 	orr.w	r3, r3, #1
 8005fec:	6713      	str	r3, [r2, #112]	; 0x70
 8005fee:	e02d      	b.n	800604c <HAL_RCC_OscConfig+0x5e0>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d10c      	bne.n	8006012 <HAL_RCC_OscConfig+0x5a6>
 8005ff8:	4b77      	ldr	r3, [pc, #476]	; (80061d8 <HAL_RCC_OscConfig+0x76c>)
 8005ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ffc:	4a76      	ldr	r2, [pc, #472]	; (80061d8 <HAL_RCC_OscConfig+0x76c>)
 8005ffe:	f023 0301 	bic.w	r3, r3, #1
 8006002:	6713      	str	r3, [r2, #112]	; 0x70
 8006004:	4b74      	ldr	r3, [pc, #464]	; (80061d8 <HAL_RCC_OscConfig+0x76c>)
 8006006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006008:	4a73      	ldr	r2, [pc, #460]	; (80061d8 <HAL_RCC_OscConfig+0x76c>)
 800600a:	f023 0304 	bic.w	r3, r3, #4
 800600e:	6713      	str	r3, [r2, #112]	; 0x70
 8006010:	e01c      	b.n	800604c <HAL_RCC_OscConfig+0x5e0>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	2b05      	cmp	r3, #5
 8006018:	d10c      	bne.n	8006034 <HAL_RCC_OscConfig+0x5c8>
 800601a:	4b6f      	ldr	r3, [pc, #444]	; (80061d8 <HAL_RCC_OscConfig+0x76c>)
 800601c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800601e:	4a6e      	ldr	r2, [pc, #440]	; (80061d8 <HAL_RCC_OscConfig+0x76c>)
 8006020:	f043 0304 	orr.w	r3, r3, #4
 8006024:	6713      	str	r3, [r2, #112]	; 0x70
 8006026:	4b6c      	ldr	r3, [pc, #432]	; (80061d8 <HAL_RCC_OscConfig+0x76c>)
 8006028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800602a:	4a6b      	ldr	r2, [pc, #428]	; (80061d8 <HAL_RCC_OscConfig+0x76c>)
 800602c:	f043 0301 	orr.w	r3, r3, #1
 8006030:	6713      	str	r3, [r2, #112]	; 0x70
 8006032:	e00b      	b.n	800604c <HAL_RCC_OscConfig+0x5e0>
 8006034:	4b68      	ldr	r3, [pc, #416]	; (80061d8 <HAL_RCC_OscConfig+0x76c>)
 8006036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006038:	4a67      	ldr	r2, [pc, #412]	; (80061d8 <HAL_RCC_OscConfig+0x76c>)
 800603a:	f023 0301 	bic.w	r3, r3, #1
 800603e:	6713      	str	r3, [r2, #112]	; 0x70
 8006040:	4b65      	ldr	r3, [pc, #404]	; (80061d8 <HAL_RCC_OscConfig+0x76c>)
 8006042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006044:	4a64      	ldr	r2, [pc, #400]	; (80061d8 <HAL_RCC_OscConfig+0x76c>)
 8006046:	f023 0304 	bic.w	r3, r3, #4
 800604a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d015      	beq.n	8006080 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006054:	f7fc fda6 	bl	8002ba4 <HAL_GetTick>
 8006058:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800605a:	e00a      	b.n	8006072 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800605c:	f7fc fda2 	bl	8002ba4 <HAL_GetTick>
 8006060:	4602      	mov	r2, r0
 8006062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006064:	1ad3      	subs	r3, r2, r3
 8006066:	f241 3288 	movw	r2, #5000	; 0x1388
 800606a:	4293      	cmp	r3, r2
 800606c:	d901      	bls.n	8006072 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800606e:	2303      	movs	r3, #3
 8006070:	e14e      	b.n	8006310 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006072:	4b59      	ldr	r3, [pc, #356]	; (80061d8 <HAL_RCC_OscConfig+0x76c>)
 8006074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006076:	f003 0302 	and.w	r3, r3, #2
 800607a:	2b00      	cmp	r3, #0
 800607c:	d0ee      	beq.n	800605c <HAL_RCC_OscConfig+0x5f0>
 800607e:	e014      	b.n	80060aa <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006080:	f7fc fd90 	bl	8002ba4 <HAL_GetTick>
 8006084:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006086:	e00a      	b.n	800609e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006088:	f7fc fd8c 	bl	8002ba4 <HAL_GetTick>
 800608c:	4602      	mov	r2, r0
 800608e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006090:	1ad3      	subs	r3, r2, r3
 8006092:	f241 3288 	movw	r2, #5000	; 0x1388
 8006096:	4293      	cmp	r3, r2
 8006098:	d901      	bls.n	800609e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800609a:	2303      	movs	r3, #3
 800609c:	e138      	b.n	8006310 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800609e:	4b4e      	ldr	r3, [pc, #312]	; (80061d8 <HAL_RCC_OscConfig+0x76c>)
 80060a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060a2:	f003 0302 	and.w	r3, r3, #2
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d1ee      	bne.n	8006088 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	f000 812d 	beq.w	800630e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80060b4:	4b48      	ldr	r3, [pc, #288]	; (80061d8 <HAL_RCC_OscConfig+0x76c>)
 80060b6:	691b      	ldr	r3, [r3, #16]
 80060b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80060bc:	2b18      	cmp	r3, #24
 80060be:	f000 80bd 	beq.w	800623c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c6:	2b02      	cmp	r3, #2
 80060c8:	f040 809e 	bne.w	8006208 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060cc:	4b42      	ldr	r3, [pc, #264]	; (80061d8 <HAL_RCC_OscConfig+0x76c>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a41      	ldr	r2, [pc, #260]	; (80061d8 <HAL_RCC_OscConfig+0x76c>)
 80060d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80060d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060d8:	f7fc fd64 	bl	8002ba4 <HAL_GetTick>
 80060dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80060de:	e008      	b.n	80060f2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060e0:	f7fc fd60 	bl	8002ba4 <HAL_GetTick>
 80060e4:	4602      	mov	r2, r0
 80060e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e8:	1ad3      	subs	r3, r2, r3
 80060ea:	2b02      	cmp	r3, #2
 80060ec:	d901      	bls.n	80060f2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80060ee:	2303      	movs	r3, #3
 80060f0:	e10e      	b.n	8006310 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80060f2:	4b39      	ldr	r3, [pc, #228]	; (80061d8 <HAL_RCC_OscConfig+0x76c>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d1f0      	bne.n	80060e0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80060fe:	4b36      	ldr	r3, [pc, #216]	; (80061d8 <HAL_RCC_OscConfig+0x76c>)
 8006100:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006102:	4b37      	ldr	r3, [pc, #220]	; (80061e0 <HAL_RCC_OscConfig+0x774>)
 8006104:	4013      	ands	r3, r2
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800610e:	0112      	lsls	r2, r2, #4
 8006110:	430a      	orrs	r2, r1
 8006112:	4931      	ldr	r1, [pc, #196]	; (80061d8 <HAL_RCC_OscConfig+0x76c>)
 8006114:	4313      	orrs	r3, r2
 8006116:	628b      	str	r3, [r1, #40]	; 0x28
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800611c:	3b01      	subs	r3, #1
 800611e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006126:	3b01      	subs	r3, #1
 8006128:	025b      	lsls	r3, r3, #9
 800612a:	b29b      	uxth	r3, r3
 800612c:	431a      	orrs	r2, r3
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006132:	3b01      	subs	r3, #1
 8006134:	041b      	lsls	r3, r3, #16
 8006136:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800613a:	431a      	orrs	r2, r3
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006140:	3b01      	subs	r3, #1
 8006142:	061b      	lsls	r3, r3, #24
 8006144:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006148:	4923      	ldr	r1, [pc, #140]	; (80061d8 <HAL_RCC_OscConfig+0x76c>)
 800614a:	4313      	orrs	r3, r2
 800614c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800614e:	4b22      	ldr	r3, [pc, #136]	; (80061d8 <HAL_RCC_OscConfig+0x76c>)
 8006150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006152:	4a21      	ldr	r2, [pc, #132]	; (80061d8 <HAL_RCC_OscConfig+0x76c>)
 8006154:	f023 0301 	bic.w	r3, r3, #1
 8006158:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800615a:	4b1f      	ldr	r3, [pc, #124]	; (80061d8 <HAL_RCC_OscConfig+0x76c>)
 800615c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800615e:	4b21      	ldr	r3, [pc, #132]	; (80061e4 <HAL_RCC_OscConfig+0x778>)
 8006160:	4013      	ands	r3, r2
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006166:	00d2      	lsls	r2, r2, #3
 8006168:	491b      	ldr	r1, [pc, #108]	; (80061d8 <HAL_RCC_OscConfig+0x76c>)
 800616a:	4313      	orrs	r3, r2
 800616c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800616e:	4b1a      	ldr	r3, [pc, #104]	; (80061d8 <HAL_RCC_OscConfig+0x76c>)
 8006170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006172:	f023 020c 	bic.w	r2, r3, #12
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617a:	4917      	ldr	r1, [pc, #92]	; (80061d8 <HAL_RCC_OscConfig+0x76c>)
 800617c:	4313      	orrs	r3, r2
 800617e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006180:	4b15      	ldr	r3, [pc, #84]	; (80061d8 <HAL_RCC_OscConfig+0x76c>)
 8006182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006184:	f023 0202 	bic.w	r2, r3, #2
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800618c:	4912      	ldr	r1, [pc, #72]	; (80061d8 <HAL_RCC_OscConfig+0x76c>)
 800618e:	4313      	orrs	r3, r2
 8006190:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006192:	4b11      	ldr	r3, [pc, #68]	; (80061d8 <HAL_RCC_OscConfig+0x76c>)
 8006194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006196:	4a10      	ldr	r2, [pc, #64]	; (80061d8 <HAL_RCC_OscConfig+0x76c>)
 8006198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800619c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800619e:	4b0e      	ldr	r3, [pc, #56]	; (80061d8 <HAL_RCC_OscConfig+0x76c>)
 80061a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a2:	4a0d      	ldr	r2, [pc, #52]	; (80061d8 <HAL_RCC_OscConfig+0x76c>)
 80061a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80061aa:	4b0b      	ldr	r3, [pc, #44]	; (80061d8 <HAL_RCC_OscConfig+0x76c>)
 80061ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ae:	4a0a      	ldr	r2, [pc, #40]	; (80061d8 <HAL_RCC_OscConfig+0x76c>)
 80061b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80061b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80061b6:	4b08      	ldr	r3, [pc, #32]	; (80061d8 <HAL_RCC_OscConfig+0x76c>)
 80061b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ba:	4a07      	ldr	r2, [pc, #28]	; (80061d8 <HAL_RCC_OscConfig+0x76c>)
 80061bc:	f043 0301 	orr.w	r3, r3, #1
 80061c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061c2:	4b05      	ldr	r3, [pc, #20]	; (80061d8 <HAL_RCC_OscConfig+0x76c>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a04      	ldr	r2, [pc, #16]	; (80061d8 <HAL_RCC_OscConfig+0x76c>)
 80061c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80061cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061ce:	f7fc fce9 	bl	8002ba4 <HAL_GetTick>
 80061d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80061d4:	e011      	b.n	80061fa <HAL_RCC_OscConfig+0x78e>
 80061d6:	bf00      	nop
 80061d8:	58024400 	.word	0x58024400
 80061dc:	58024800 	.word	0x58024800
 80061e0:	fffffc0c 	.word	0xfffffc0c
 80061e4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061e8:	f7fc fcdc 	bl	8002ba4 <HAL_GetTick>
 80061ec:	4602      	mov	r2, r0
 80061ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f0:	1ad3      	subs	r3, r2, r3
 80061f2:	2b02      	cmp	r3, #2
 80061f4:	d901      	bls.n	80061fa <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80061f6:	2303      	movs	r3, #3
 80061f8:	e08a      	b.n	8006310 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80061fa:	4b47      	ldr	r3, [pc, #284]	; (8006318 <HAL_RCC_OscConfig+0x8ac>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006202:	2b00      	cmp	r3, #0
 8006204:	d0f0      	beq.n	80061e8 <HAL_RCC_OscConfig+0x77c>
 8006206:	e082      	b.n	800630e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006208:	4b43      	ldr	r3, [pc, #268]	; (8006318 <HAL_RCC_OscConfig+0x8ac>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a42      	ldr	r2, [pc, #264]	; (8006318 <HAL_RCC_OscConfig+0x8ac>)
 800620e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006212:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006214:	f7fc fcc6 	bl	8002ba4 <HAL_GetTick>
 8006218:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800621a:	e008      	b.n	800622e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800621c:	f7fc fcc2 	bl	8002ba4 <HAL_GetTick>
 8006220:	4602      	mov	r2, r0
 8006222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006224:	1ad3      	subs	r3, r2, r3
 8006226:	2b02      	cmp	r3, #2
 8006228:	d901      	bls.n	800622e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800622a:	2303      	movs	r3, #3
 800622c:	e070      	b.n	8006310 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800622e:	4b3a      	ldr	r3, [pc, #232]	; (8006318 <HAL_RCC_OscConfig+0x8ac>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006236:	2b00      	cmp	r3, #0
 8006238:	d1f0      	bne.n	800621c <HAL_RCC_OscConfig+0x7b0>
 800623a:	e068      	b.n	800630e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800623c:	4b36      	ldr	r3, [pc, #216]	; (8006318 <HAL_RCC_OscConfig+0x8ac>)
 800623e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006240:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006242:	4b35      	ldr	r3, [pc, #212]	; (8006318 <HAL_RCC_OscConfig+0x8ac>)
 8006244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006246:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624c:	2b01      	cmp	r3, #1
 800624e:	d031      	beq.n	80062b4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	f003 0203 	and.w	r2, r3, #3
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800625a:	429a      	cmp	r2, r3
 800625c:	d12a      	bne.n	80062b4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	091b      	lsrs	r3, r3, #4
 8006262:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800626a:	429a      	cmp	r2, r3
 800626c:	d122      	bne.n	80062b4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006278:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800627a:	429a      	cmp	r2, r3
 800627c:	d11a      	bne.n	80062b4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	0a5b      	lsrs	r3, r3, #9
 8006282:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800628a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800628c:	429a      	cmp	r2, r3
 800628e:	d111      	bne.n	80062b4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	0c1b      	lsrs	r3, r3, #16
 8006294:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800629c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800629e:	429a      	cmp	r2, r3
 80062a0:	d108      	bne.n	80062b4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	0e1b      	lsrs	r3, r3, #24
 80062a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062ae:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d001      	beq.n	80062b8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	e02b      	b.n	8006310 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80062b8:	4b17      	ldr	r3, [pc, #92]	; (8006318 <HAL_RCC_OscConfig+0x8ac>)
 80062ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062bc:	08db      	lsrs	r3, r3, #3
 80062be:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80062c2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062c8:	693a      	ldr	r2, [r7, #16]
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d01f      	beq.n	800630e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80062ce:	4b12      	ldr	r3, [pc, #72]	; (8006318 <HAL_RCC_OscConfig+0x8ac>)
 80062d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d2:	4a11      	ldr	r2, [pc, #68]	; (8006318 <HAL_RCC_OscConfig+0x8ac>)
 80062d4:	f023 0301 	bic.w	r3, r3, #1
 80062d8:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80062da:	f7fc fc63 	bl	8002ba4 <HAL_GetTick>
 80062de:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80062e0:	bf00      	nop
 80062e2:	f7fc fc5f 	bl	8002ba4 <HAL_GetTick>
 80062e6:	4602      	mov	r2, r0
 80062e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d0f9      	beq.n	80062e2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80062ee:	4b0a      	ldr	r3, [pc, #40]	; (8006318 <HAL_RCC_OscConfig+0x8ac>)
 80062f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062f2:	4b0a      	ldr	r3, [pc, #40]	; (800631c <HAL_RCC_OscConfig+0x8b0>)
 80062f4:	4013      	ands	r3, r2
 80062f6:	687a      	ldr	r2, [r7, #4]
 80062f8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80062fa:	00d2      	lsls	r2, r2, #3
 80062fc:	4906      	ldr	r1, [pc, #24]	; (8006318 <HAL_RCC_OscConfig+0x8ac>)
 80062fe:	4313      	orrs	r3, r2
 8006300:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006302:	4b05      	ldr	r3, [pc, #20]	; (8006318 <HAL_RCC_OscConfig+0x8ac>)
 8006304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006306:	4a04      	ldr	r2, [pc, #16]	; (8006318 <HAL_RCC_OscConfig+0x8ac>)
 8006308:	f043 0301 	orr.w	r3, r3, #1
 800630c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800630e:	2300      	movs	r3, #0
}
 8006310:	4618      	mov	r0, r3
 8006312:	3730      	adds	r7, #48	; 0x30
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}
 8006318:	58024400 	.word	0x58024400
 800631c:	ffff0007 	.word	0xffff0007

08006320 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b086      	sub	sp, #24
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d101      	bne.n	8006334 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	e19c      	b.n	800666e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006334:	4b8a      	ldr	r3, [pc, #552]	; (8006560 <HAL_RCC_ClockConfig+0x240>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 030f 	and.w	r3, r3, #15
 800633c:	683a      	ldr	r2, [r7, #0]
 800633e:	429a      	cmp	r2, r3
 8006340:	d910      	bls.n	8006364 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006342:	4b87      	ldr	r3, [pc, #540]	; (8006560 <HAL_RCC_ClockConfig+0x240>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f023 020f 	bic.w	r2, r3, #15
 800634a:	4985      	ldr	r1, [pc, #532]	; (8006560 <HAL_RCC_ClockConfig+0x240>)
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	4313      	orrs	r3, r2
 8006350:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006352:	4b83      	ldr	r3, [pc, #524]	; (8006560 <HAL_RCC_ClockConfig+0x240>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f003 030f 	and.w	r3, r3, #15
 800635a:	683a      	ldr	r2, [r7, #0]
 800635c:	429a      	cmp	r2, r3
 800635e:	d001      	beq.n	8006364 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006360:	2301      	movs	r3, #1
 8006362:	e184      	b.n	800666e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f003 0304 	and.w	r3, r3, #4
 800636c:	2b00      	cmp	r3, #0
 800636e:	d010      	beq.n	8006392 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	691a      	ldr	r2, [r3, #16]
 8006374:	4b7b      	ldr	r3, [pc, #492]	; (8006564 <HAL_RCC_ClockConfig+0x244>)
 8006376:	699b      	ldr	r3, [r3, #24]
 8006378:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800637c:	429a      	cmp	r2, r3
 800637e:	d908      	bls.n	8006392 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006380:	4b78      	ldr	r3, [pc, #480]	; (8006564 <HAL_RCC_ClockConfig+0x244>)
 8006382:	699b      	ldr	r3, [r3, #24]
 8006384:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	691b      	ldr	r3, [r3, #16]
 800638c:	4975      	ldr	r1, [pc, #468]	; (8006564 <HAL_RCC_ClockConfig+0x244>)
 800638e:	4313      	orrs	r3, r2
 8006390:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f003 0308 	and.w	r3, r3, #8
 800639a:	2b00      	cmp	r3, #0
 800639c:	d010      	beq.n	80063c0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	695a      	ldr	r2, [r3, #20]
 80063a2:	4b70      	ldr	r3, [pc, #448]	; (8006564 <HAL_RCC_ClockConfig+0x244>)
 80063a4:	69db      	ldr	r3, [r3, #28]
 80063a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d908      	bls.n	80063c0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80063ae:	4b6d      	ldr	r3, [pc, #436]	; (8006564 <HAL_RCC_ClockConfig+0x244>)
 80063b0:	69db      	ldr	r3, [r3, #28]
 80063b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	695b      	ldr	r3, [r3, #20]
 80063ba:	496a      	ldr	r1, [pc, #424]	; (8006564 <HAL_RCC_ClockConfig+0x244>)
 80063bc:	4313      	orrs	r3, r2
 80063be:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f003 0310 	and.w	r3, r3, #16
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d010      	beq.n	80063ee <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	699a      	ldr	r2, [r3, #24]
 80063d0:	4b64      	ldr	r3, [pc, #400]	; (8006564 <HAL_RCC_ClockConfig+0x244>)
 80063d2:	69db      	ldr	r3, [r3, #28]
 80063d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80063d8:	429a      	cmp	r2, r3
 80063da:	d908      	bls.n	80063ee <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80063dc:	4b61      	ldr	r3, [pc, #388]	; (8006564 <HAL_RCC_ClockConfig+0x244>)
 80063de:	69db      	ldr	r3, [r3, #28]
 80063e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	699b      	ldr	r3, [r3, #24]
 80063e8:	495e      	ldr	r1, [pc, #376]	; (8006564 <HAL_RCC_ClockConfig+0x244>)
 80063ea:	4313      	orrs	r3, r2
 80063ec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f003 0320 	and.w	r3, r3, #32
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d010      	beq.n	800641c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	69da      	ldr	r2, [r3, #28]
 80063fe:	4b59      	ldr	r3, [pc, #356]	; (8006564 <HAL_RCC_ClockConfig+0x244>)
 8006400:	6a1b      	ldr	r3, [r3, #32]
 8006402:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006406:	429a      	cmp	r2, r3
 8006408:	d908      	bls.n	800641c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800640a:	4b56      	ldr	r3, [pc, #344]	; (8006564 <HAL_RCC_ClockConfig+0x244>)
 800640c:	6a1b      	ldr	r3, [r3, #32]
 800640e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	69db      	ldr	r3, [r3, #28]
 8006416:	4953      	ldr	r1, [pc, #332]	; (8006564 <HAL_RCC_ClockConfig+0x244>)
 8006418:	4313      	orrs	r3, r2
 800641a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f003 0302 	and.w	r3, r3, #2
 8006424:	2b00      	cmp	r3, #0
 8006426:	d010      	beq.n	800644a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	68da      	ldr	r2, [r3, #12]
 800642c:	4b4d      	ldr	r3, [pc, #308]	; (8006564 <HAL_RCC_ClockConfig+0x244>)
 800642e:	699b      	ldr	r3, [r3, #24]
 8006430:	f003 030f 	and.w	r3, r3, #15
 8006434:	429a      	cmp	r2, r3
 8006436:	d908      	bls.n	800644a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006438:	4b4a      	ldr	r3, [pc, #296]	; (8006564 <HAL_RCC_ClockConfig+0x244>)
 800643a:	699b      	ldr	r3, [r3, #24]
 800643c:	f023 020f 	bic.w	r2, r3, #15
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	68db      	ldr	r3, [r3, #12]
 8006444:	4947      	ldr	r1, [pc, #284]	; (8006564 <HAL_RCC_ClockConfig+0x244>)
 8006446:	4313      	orrs	r3, r2
 8006448:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f003 0301 	and.w	r3, r3, #1
 8006452:	2b00      	cmp	r3, #0
 8006454:	d055      	beq.n	8006502 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006456:	4b43      	ldr	r3, [pc, #268]	; (8006564 <HAL_RCC_ClockConfig+0x244>)
 8006458:	699b      	ldr	r3, [r3, #24]
 800645a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	4940      	ldr	r1, [pc, #256]	; (8006564 <HAL_RCC_ClockConfig+0x244>)
 8006464:	4313      	orrs	r3, r2
 8006466:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	2b02      	cmp	r3, #2
 800646e:	d107      	bne.n	8006480 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006470:	4b3c      	ldr	r3, [pc, #240]	; (8006564 <HAL_RCC_ClockConfig+0x244>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006478:	2b00      	cmp	r3, #0
 800647a:	d121      	bne.n	80064c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	e0f6      	b.n	800666e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	2b03      	cmp	r3, #3
 8006486:	d107      	bne.n	8006498 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006488:	4b36      	ldr	r3, [pc, #216]	; (8006564 <HAL_RCC_ClockConfig+0x244>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006490:	2b00      	cmp	r3, #0
 8006492:	d115      	bne.n	80064c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	e0ea      	b.n	800666e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	2b01      	cmp	r3, #1
 800649e:	d107      	bne.n	80064b0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80064a0:	4b30      	ldr	r3, [pc, #192]	; (8006564 <HAL_RCC_ClockConfig+0x244>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d109      	bne.n	80064c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	e0de      	b.n	800666e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80064b0:	4b2c      	ldr	r3, [pc, #176]	; (8006564 <HAL_RCC_ClockConfig+0x244>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f003 0304 	and.w	r3, r3, #4
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d101      	bne.n	80064c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80064bc:	2301      	movs	r3, #1
 80064be:	e0d6      	b.n	800666e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80064c0:	4b28      	ldr	r3, [pc, #160]	; (8006564 <HAL_RCC_ClockConfig+0x244>)
 80064c2:	691b      	ldr	r3, [r3, #16]
 80064c4:	f023 0207 	bic.w	r2, r3, #7
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	4925      	ldr	r1, [pc, #148]	; (8006564 <HAL_RCC_ClockConfig+0x244>)
 80064ce:	4313      	orrs	r3, r2
 80064d0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064d2:	f7fc fb67 	bl	8002ba4 <HAL_GetTick>
 80064d6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064d8:	e00a      	b.n	80064f0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064da:	f7fc fb63 	bl	8002ba4 <HAL_GetTick>
 80064de:	4602      	mov	r2, r0
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	1ad3      	subs	r3, r2, r3
 80064e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d901      	bls.n	80064f0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80064ec:	2303      	movs	r3, #3
 80064ee:	e0be      	b.n	800666e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064f0:	4b1c      	ldr	r3, [pc, #112]	; (8006564 <HAL_RCC_ClockConfig+0x244>)
 80064f2:	691b      	ldr	r3, [r3, #16]
 80064f4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	00db      	lsls	r3, r3, #3
 80064fe:	429a      	cmp	r2, r3
 8006500:	d1eb      	bne.n	80064da <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f003 0302 	and.w	r3, r3, #2
 800650a:	2b00      	cmp	r3, #0
 800650c:	d010      	beq.n	8006530 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	68da      	ldr	r2, [r3, #12]
 8006512:	4b14      	ldr	r3, [pc, #80]	; (8006564 <HAL_RCC_ClockConfig+0x244>)
 8006514:	699b      	ldr	r3, [r3, #24]
 8006516:	f003 030f 	and.w	r3, r3, #15
 800651a:	429a      	cmp	r2, r3
 800651c:	d208      	bcs.n	8006530 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800651e:	4b11      	ldr	r3, [pc, #68]	; (8006564 <HAL_RCC_ClockConfig+0x244>)
 8006520:	699b      	ldr	r3, [r3, #24]
 8006522:	f023 020f 	bic.w	r2, r3, #15
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	490e      	ldr	r1, [pc, #56]	; (8006564 <HAL_RCC_ClockConfig+0x244>)
 800652c:	4313      	orrs	r3, r2
 800652e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006530:	4b0b      	ldr	r3, [pc, #44]	; (8006560 <HAL_RCC_ClockConfig+0x240>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f003 030f 	and.w	r3, r3, #15
 8006538:	683a      	ldr	r2, [r7, #0]
 800653a:	429a      	cmp	r2, r3
 800653c:	d214      	bcs.n	8006568 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800653e:	4b08      	ldr	r3, [pc, #32]	; (8006560 <HAL_RCC_ClockConfig+0x240>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f023 020f 	bic.w	r2, r3, #15
 8006546:	4906      	ldr	r1, [pc, #24]	; (8006560 <HAL_RCC_ClockConfig+0x240>)
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	4313      	orrs	r3, r2
 800654c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800654e:	4b04      	ldr	r3, [pc, #16]	; (8006560 <HAL_RCC_ClockConfig+0x240>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f003 030f 	and.w	r3, r3, #15
 8006556:	683a      	ldr	r2, [r7, #0]
 8006558:	429a      	cmp	r2, r3
 800655a:	d005      	beq.n	8006568 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	e086      	b.n	800666e <HAL_RCC_ClockConfig+0x34e>
 8006560:	52002000 	.word	0x52002000
 8006564:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f003 0304 	and.w	r3, r3, #4
 8006570:	2b00      	cmp	r3, #0
 8006572:	d010      	beq.n	8006596 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	691a      	ldr	r2, [r3, #16]
 8006578:	4b3f      	ldr	r3, [pc, #252]	; (8006678 <HAL_RCC_ClockConfig+0x358>)
 800657a:	699b      	ldr	r3, [r3, #24]
 800657c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006580:	429a      	cmp	r2, r3
 8006582:	d208      	bcs.n	8006596 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006584:	4b3c      	ldr	r3, [pc, #240]	; (8006678 <HAL_RCC_ClockConfig+0x358>)
 8006586:	699b      	ldr	r3, [r3, #24]
 8006588:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	691b      	ldr	r3, [r3, #16]
 8006590:	4939      	ldr	r1, [pc, #228]	; (8006678 <HAL_RCC_ClockConfig+0x358>)
 8006592:	4313      	orrs	r3, r2
 8006594:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f003 0308 	and.w	r3, r3, #8
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d010      	beq.n	80065c4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	695a      	ldr	r2, [r3, #20]
 80065a6:	4b34      	ldr	r3, [pc, #208]	; (8006678 <HAL_RCC_ClockConfig+0x358>)
 80065a8:	69db      	ldr	r3, [r3, #28]
 80065aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d208      	bcs.n	80065c4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80065b2:	4b31      	ldr	r3, [pc, #196]	; (8006678 <HAL_RCC_ClockConfig+0x358>)
 80065b4:	69db      	ldr	r3, [r3, #28]
 80065b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	695b      	ldr	r3, [r3, #20]
 80065be:	492e      	ldr	r1, [pc, #184]	; (8006678 <HAL_RCC_ClockConfig+0x358>)
 80065c0:	4313      	orrs	r3, r2
 80065c2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f003 0310 	and.w	r3, r3, #16
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d010      	beq.n	80065f2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	699a      	ldr	r2, [r3, #24]
 80065d4:	4b28      	ldr	r3, [pc, #160]	; (8006678 <HAL_RCC_ClockConfig+0x358>)
 80065d6:	69db      	ldr	r3, [r3, #28]
 80065d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80065dc:	429a      	cmp	r2, r3
 80065de:	d208      	bcs.n	80065f2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80065e0:	4b25      	ldr	r3, [pc, #148]	; (8006678 <HAL_RCC_ClockConfig+0x358>)
 80065e2:	69db      	ldr	r3, [r3, #28]
 80065e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	699b      	ldr	r3, [r3, #24]
 80065ec:	4922      	ldr	r1, [pc, #136]	; (8006678 <HAL_RCC_ClockConfig+0x358>)
 80065ee:	4313      	orrs	r3, r2
 80065f0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f003 0320 	and.w	r3, r3, #32
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d010      	beq.n	8006620 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	69da      	ldr	r2, [r3, #28]
 8006602:	4b1d      	ldr	r3, [pc, #116]	; (8006678 <HAL_RCC_ClockConfig+0x358>)
 8006604:	6a1b      	ldr	r3, [r3, #32]
 8006606:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800660a:	429a      	cmp	r2, r3
 800660c:	d208      	bcs.n	8006620 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800660e:	4b1a      	ldr	r3, [pc, #104]	; (8006678 <HAL_RCC_ClockConfig+0x358>)
 8006610:	6a1b      	ldr	r3, [r3, #32]
 8006612:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	69db      	ldr	r3, [r3, #28]
 800661a:	4917      	ldr	r1, [pc, #92]	; (8006678 <HAL_RCC_ClockConfig+0x358>)
 800661c:	4313      	orrs	r3, r2
 800661e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006620:	f000 f834 	bl	800668c <HAL_RCC_GetSysClockFreq>
 8006624:	4602      	mov	r2, r0
 8006626:	4b14      	ldr	r3, [pc, #80]	; (8006678 <HAL_RCC_ClockConfig+0x358>)
 8006628:	699b      	ldr	r3, [r3, #24]
 800662a:	0a1b      	lsrs	r3, r3, #8
 800662c:	f003 030f 	and.w	r3, r3, #15
 8006630:	4912      	ldr	r1, [pc, #72]	; (800667c <HAL_RCC_ClockConfig+0x35c>)
 8006632:	5ccb      	ldrb	r3, [r1, r3]
 8006634:	f003 031f 	and.w	r3, r3, #31
 8006638:	fa22 f303 	lsr.w	r3, r2, r3
 800663c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800663e:	4b0e      	ldr	r3, [pc, #56]	; (8006678 <HAL_RCC_ClockConfig+0x358>)
 8006640:	699b      	ldr	r3, [r3, #24]
 8006642:	f003 030f 	and.w	r3, r3, #15
 8006646:	4a0d      	ldr	r2, [pc, #52]	; (800667c <HAL_RCC_ClockConfig+0x35c>)
 8006648:	5cd3      	ldrb	r3, [r2, r3]
 800664a:	f003 031f 	and.w	r3, r3, #31
 800664e:	693a      	ldr	r2, [r7, #16]
 8006650:	fa22 f303 	lsr.w	r3, r2, r3
 8006654:	4a0a      	ldr	r2, [pc, #40]	; (8006680 <HAL_RCC_ClockConfig+0x360>)
 8006656:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006658:	4a0a      	ldr	r2, [pc, #40]	; (8006684 <HAL_RCC_ClockConfig+0x364>)
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800665e:	4b0a      	ldr	r3, [pc, #40]	; (8006688 <HAL_RCC_ClockConfig+0x368>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4618      	mov	r0, r3
 8006664:	f7fc fa54 	bl	8002b10 <HAL_InitTick>
 8006668:	4603      	mov	r3, r0
 800666a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800666c:	7bfb      	ldrb	r3, [r7, #15]
}
 800666e:	4618      	mov	r0, r3
 8006670:	3718      	adds	r7, #24
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
 8006676:	bf00      	nop
 8006678:	58024400 	.word	0x58024400
 800667c:	0800c250 	.word	0x0800c250
 8006680:	2400002c 	.word	0x2400002c
 8006684:	24000028 	.word	0x24000028
 8006688:	24000030 	.word	0x24000030

0800668c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800668c:	b480      	push	{r7}
 800668e:	b089      	sub	sp, #36	; 0x24
 8006690:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006692:	4bb3      	ldr	r3, [pc, #716]	; (8006960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006694:	691b      	ldr	r3, [r3, #16]
 8006696:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800669a:	2b18      	cmp	r3, #24
 800669c:	f200 8155 	bhi.w	800694a <HAL_RCC_GetSysClockFreq+0x2be>
 80066a0:	a201      	add	r2, pc, #4	; (adr r2, 80066a8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80066a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066a6:	bf00      	nop
 80066a8:	0800670d 	.word	0x0800670d
 80066ac:	0800694b 	.word	0x0800694b
 80066b0:	0800694b 	.word	0x0800694b
 80066b4:	0800694b 	.word	0x0800694b
 80066b8:	0800694b 	.word	0x0800694b
 80066bc:	0800694b 	.word	0x0800694b
 80066c0:	0800694b 	.word	0x0800694b
 80066c4:	0800694b 	.word	0x0800694b
 80066c8:	08006733 	.word	0x08006733
 80066cc:	0800694b 	.word	0x0800694b
 80066d0:	0800694b 	.word	0x0800694b
 80066d4:	0800694b 	.word	0x0800694b
 80066d8:	0800694b 	.word	0x0800694b
 80066dc:	0800694b 	.word	0x0800694b
 80066e0:	0800694b 	.word	0x0800694b
 80066e4:	0800694b 	.word	0x0800694b
 80066e8:	08006739 	.word	0x08006739
 80066ec:	0800694b 	.word	0x0800694b
 80066f0:	0800694b 	.word	0x0800694b
 80066f4:	0800694b 	.word	0x0800694b
 80066f8:	0800694b 	.word	0x0800694b
 80066fc:	0800694b 	.word	0x0800694b
 8006700:	0800694b 	.word	0x0800694b
 8006704:	0800694b 	.word	0x0800694b
 8006708:	0800673f 	.word	0x0800673f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800670c:	4b94      	ldr	r3, [pc, #592]	; (8006960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f003 0320 	and.w	r3, r3, #32
 8006714:	2b00      	cmp	r3, #0
 8006716:	d009      	beq.n	800672c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006718:	4b91      	ldr	r3, [pc, #580]	; (8006960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	08db      	lsrs	r3, r3, #3
 800671e:	f003 0303 	and.w	r3, r3, #3
 8006722:	4a90      	ldr	r2, [pc, #576]	; (8006964 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006724:	fa22 f303 	lsr.w	r3, r2, r3
 8006728:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800672a:	e111      	b.n	8006950 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800672c:	4b8d      	ldr	r3, [pc, #564]	; (8006964 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800672e:	61bb      	str	r3, [r7, #24]
      break;
 8006730:	e10e      	b.n	8006950 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006732:	4b8d      	ldr	r3, [pc, #564]	; (8006968 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006734:	61bb      	str	r3, [r7, #24]
      break;
 8006736:	e10b      	b.n	8006950 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006738:	4b8c      	ldr	r3, [pc, #560]	; (800696c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800673a:	61bb      	str	r3, [r7, #24]
      break;
 800673c:	e108      	b.n	8006950 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800673e:	4b88      	ldr	r3, [pc, #544]	; (8006960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006742:	f003 0303 	and.w	r3, r3, #3
 8006746:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006748:	4b85      	ldr	r3, [pc, #532]	; (8006960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800674a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800674c:	091b      	lsrs	r3, r3, #4
 800674e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006752:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006754:	4b82      	ldr	r3, [pc, #520]	; (8006960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006758:	f003 0301 	and.w	r3, r3, #1
 800675c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800675e:	4b80      	ldr	r3, [pc, #512]	; (8006960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006762:	08db      	lsrs	r3, r3, #3
 8006764:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006768:	68fa      	ldr	r2, [r7, #12]
 800676a:	fb02 f303 	mul.w	r3, r2, r3
 800676e:	ee07 3a90 	vmov	s15, r3
 8006772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006776:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	2b00      	cmp	r3, #0
 800677e:	f000 80e1 	beq.w	8006944 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	2b02      	cmp	r3, #2
 8006786:	f000 8083 	beq.w	8006890 <HAL_RCC_GetSysClockFreq+0x204>
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	2b02      	cmp	r3, #2
 800678e:	f200 80a1 	bhi.w	80068d4 <HAL_RCC_GetSysClockFreq+0x248>
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d003      	beq.n	80067a0 <HAL_RCC_GetSysClockFreq+0x114>
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	2b01      	cmp	r3, #1
 800679c:	d056      	beq.n	800684c <HAL_RCC_GetSysClockFreq+0x1c0>
 800679e:	e099      	b.n	80068d4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80067a0:	4b6f      	ldr	r3, [pc, #444]	; (8006960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f003 0320 	and.w	r3, r3, #32
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d02d      	beq.n	8006808 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80067ac:	4b6c      	ldr	r3, [pc, #432]	; (8006960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	08db      	lsrs	r3, r3, #3
 80067b2:	f003 0303 	and.w	r3, r3, #3
 80067b6:	4a6b      	ldr	r2, [pc, #428]	; (8006964 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80067b8:	fa22 f303 	lsr.w	r3, r2, r3
 80067bc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	ee07 3a90 	vmov	s15, r3
 80067c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	ee07 3a90 	vmov	s15, r3
 80067ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067d6:	4b62      	ldr	r3, [pc, #392]	; (8006960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067de:	ee07 3a90 	vmov	s15, r3
 80067e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80067ea:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006970 <HAL_RCC_GetSysClockFreq+0x2e4>
 80067ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006802:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006806:	e087      	b.n	8006918 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	ee07 3a90 	vmov	s15, r3
 800680e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006812:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006974 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006816:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800681a:	4b51      	ldr	r3, [pc, #324]	; (8006960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800681c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800681e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006822:	ee07 3a90 	vmov	s15, r3
 8006826:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800682a:	ed97 6a02 	vldr	s12, [r7, #8]
 800682e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006970 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006832:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006836:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800683a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800683e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006846:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800684a:	e065      	b.n	8006918 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	ee07 3a90 	vmov	s15, r3
 8006852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006856:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006978 <HAL_RCC_GetSysClockFreq+0x2ec>
 800685a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800685e:	4b40      	ldr	r3, [pc, #256]	; (8006960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006866:	ee07 3a90 	vmov	s15, r3
 800686a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800686e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006872:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006970 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006876:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800687a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800687e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006882:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800688a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800688e:	e043      	b.n	8006918 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	ee07 3a90 	vmov	s15, r3
 8006896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800689a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800697c <HAL_RCC_GetSysClockFreq+0x2f0>
 800689e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068a2:	4b2f      	ldr	r3, [pc, #188]	; (8006960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068aa:	ee07 3a90 	vmov	s15, r3
 80068ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80068b6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006970 <HAL_RCC_GetSysClockFreq+0x2e4>
 80068ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80068d2:	e021      	b.n	8006918 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	ee07 3a90 	vmov	s15, r3
 80068da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068de:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006978 <HAL_RCC_GetSysClockFreq+0x2ec>
 80068e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068e6:	4b1e      	ldr	r3, [pc, #120]	; (8006960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068ee:	ee07 3a90 	vmov	s15, r3
 80068f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80068fa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006970 <HAL_RCC_GetSysClockFreq+0x2e4>
 80068fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006902:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006906:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800690a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800690e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006912:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006916:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006918:	4b11      	ldr	r3, [pc, #68]	; (8006960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800691a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800691c:	0a5b      	lsrs	r3, r3, #9
 800691e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006922:	3301      	adds	r3, #1
 8006924:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	ee07 3a90 	vmov	s15, r3
 800692c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006930:	edd7 6a07 	vldr	s13, [r7, #28]
 8006934:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006938:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800693c:	ee17 3a90 	vmov	r3, s15
 8006940:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006942:	e005      	b.n	8006950 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006944:	2300      	movs	r3, #0
 8006946:	61bb      	str	r3, [r7, #24]
      break;
 8006948:	e002      	b.n	8006950 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800694a:	4b07      	ldr	r3, [pc, #28]	; (8006968 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800694c:	61bb      	str	r3, [r7, #24]
      break;
 800694e:	bf00      	nop
  }

  return sysclockfreq;
 8006950:	69bb      	ldr	r3, [r7, #24]
}
 8006952:	4618      	mov	r0, r3
 8006954:	3724      	adds	r7, #36	; 0x24
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr
 800695e:	bf00      	nop
 8006960:	58024400 	.word	0x58024400
 8006964:	03d09000 	.word	0x03d09000
 8006968:	003d0900 	.word	0x003d0900
 800696c:	017d7840 	.word	0x017d7840
 8006970:	46000000 	.word	0x46000000
 8006974:	4c742400 	.word	0x4c742400
 8006978:	4a742400 	.word	0x4a742400
 800697c:	4bbebc20 	.word	0x4bbebc20

08006980 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b082      	sub	sp, #8
 8006984:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006986:	f7ff fe81 	bl	800668c <HAL_RCC_GetSysClockFreq>
 800698a:	4602      	mov	r2, r0
 800698c:	4b10      	ldr	r3, [pc, #64]	; (80069d0 <HAL_RCC_GetHCLKFreq+0x50>)
 800698e:	699b      	ldr	r3, [r3, #24]
 8006990:	0a1b      	lsrs	r3, r3, #8
 8006992:	f003 030f 	and.w	r3, r3, #15
 8006996:	490f      	ldr	r1, [pc, #60]	; (80069d4 <HAL_RCC_GetHCLKFreq+0x54>)
 8006998:	5ccb      	ldrb	r3, [r1, r3]
 800699a:	f003 031f 	and.w	r3, r3, #31
 800699e:	fa22 f303 	lsr.w	r3, r2, r3
 80069a2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80069a4:	4b0a      	ldr	r3, [pc, #40]	; (80069d0 <HAL_RCC_GetHCLKFreq+0x50>)
 80069a6:	699b      	ldr	r3, [r3, #24]
 80069a8:	f003 030f 	and.w	r3, r3, #15
 80069ac:	4a09      	ldr	r2, [pc, #36]	; (80069d4 <HAL_RCC_GetHCLKFreq+0x54>)
 80069ae:	5cd3      	ldrb	r3, [r2, r3]
 80069b0:	f003 031f 	and.w	r3, r3, #31
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	fa22 f303 	lsr.w	r3, r2, r3
 80069ba:	4a07      	ldr	r2, [pc, #28]	; (80069d8 <HAL_RCC_GetHCLKFreq+0x58>)
 80069bc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80069be:	4a07      	ldr	r2, [pc, #28]	; (80069dc <HAL_RCC_GetHCLKFreq+0x5c>)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80069c4:	4b04      	ldr	r3, [pc, #16]	; (80069d8 <HAL_RCC_GetHCLKFreq+0x58>)
 80069c6:	681b      	ldr	r3, [r3, #0]
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3708      	adds	r7, #8
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}
 80069d0:	58024400 	.word	0x58024400
 80069d4:	0800c250 	.word	0x0800c250
 80069d8:	2400002c 	.word	0x2400002c
 80069dc:	24000028 	.word	0x24000028

080069e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80069e4:	f7ff ffcc 	bl	8006980 <HAL_RCC_GetHCLKFreq>
 80069e8:	4602      	mov	r2, r0
 80069ea:	4b06      	ldr	r3, [pc, #24]	; (8006a04 <HAL_RCC_GetPCLK1Freq+0x24>)
 80069ec:	69db      	ldr	r3, [r3, #28]
 80069ee:	091b      	lsrs	r3, r3, #4
 80069f0:	f003 0307 	and.w	r3, r3, #7
 80069f4:	4904      	ldr	r1, [pc, #16]	; (8006a08 <HAL_RCC_GetPCLK1Freq+0x28>)
 80069f6:	5ccb      	ldrb	r3, [r1, r3]
 80069f8:	f003 031f 	and.w	r3, r3, #31
 80069fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	bd80      	pop	{r7, pc}
 8006a04:	58024400 	.word	0x58024400
 8006a08:	0800c250 	.word	0x0800c250

08006a0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006a10:	f7ff ffb6 	bl	8006980 <HAL_RCC_GetHCLKFreq>
 8006a14:	4602      	mov	r2, r0
 8006a16:	4b06      	ldr	r3, [pc, #24]	; (8006a30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a18:	69db      	ldr	r3, [r3, #28]
 8006a1a:	0a1b      	lsrs	r3, r3, #8
 8006a1c:	f003 0307 	and.w	r3, r3, #7
 8006a20:	4904      	ldr	r1, [pc, #16]	; (8006a34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006a22:	5ccb      	ldrb	r3, [r1, r3]
 8006a24:	f003 031f 	and.w	r3, r3, #31
 8006a28:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	bd80      	pop	{r7, pc}
 8006a30:	58024400 	.word	0x58024400
 8006a34:	0800c250 	.word	0x0800c250

08006a38 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a3c:	b0ca      	sub	sp, #296	; 0x128
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006a44:	2300      	movs	r3, #0
 8006a46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a58:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8006a5c:	2500      	movs	r5, #0
 8006a5e:	ea54 0305 	orrs.w	r3, r4, r5
 8006a62:	d049      	beq.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a6a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006a6e:	d02f      	beq.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006a70:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006a74:	d828      	bhi.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006a76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a7a:	d01a      	beq.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006a7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a80:	d822      	bhi.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d003      	beq.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006a86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a8a:	d007      	beq.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006a8c:	e01c      	b.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a8e:	4bb8      	ldr	r3, [pc, #736]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a92:	4ab7      	ldr	r2, [pc, #732]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a98:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006a9a:	e01a      	b.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006a9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006aa0:	3308      	adds	r3, #8
 8006aa2:	2102      	movs	r1, #2
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f002 fb61 	bl	800916c <RCCEx_PLL2_Config>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006ab0:	e00f      	b.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ab6:	3328      	adds	r3, #40	; 0x28
 8006ab8:	2102      	movs	r1, #2
 8006aba:	4618      	mov	r0, r3
 8006abc:	f002 fc08 	bl	80092d0 <RCCEx_PLL3_Config>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006ac6:	e004      	b.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006ace:	e000      	b.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006ad0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ad2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d10a      	bne.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006ada:	4ba5      	ldr	r3, [pc, #660]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006adc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ade:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ae6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ae8:	4aa1      	ldr	r2, [pc, #644]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006aea:	430b      	orrs	r3, r1
 8006aec:	6513      	str	r3, [r2, #80]	; 0x50
 8006aee:	e003      	b.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006af0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006af4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b00:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8006b04:	f04f 0900 	mov.w	r9, #0
 8006b08:	ea58 0309 	orrs.w	r3, r8, r9
 8006b0c:	d047      	beq.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b14:	2b04      	cmp	r3, #4
 8006b16:	d82a      	bhi.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006b18:	a201      	add	r2, pc, #4	; (adr r2, 8006b20 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b1e:	bf00      	nop
 8006b20:	08006b35 	.word	0x08006b35
 8006b24:	08006b43 	.word	0x08006b43
 8006b28:	08006b59 	.word	0x08006b59
 8006b2c:	08006b77 	.word	0x08006b77
 8006b30:	08006b77 	.word	0x08006b77
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b34:	4b8e      	ldr	r3, [pc, #568]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b38:	4a8d      	ldr	r2, [pc, #564]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006b40:	e01a      	b.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b46:	3308      	adds	r3, #8
 8006b48:	2100      	movs	r1, #0
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f002 fb0e 	bl	800916c <RCCEx_PLL2_Config>
 8006b50:	4603      	mov	r3, r0
 8006b52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006b56:	e00f      	b.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006b58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b5c:	3328      	adds	r3, #40	; 0x28
 8006b5e:	2100      	movs	r1, #0
 8006b60:	4618      	mov	r0, r3
 8006b62:	f002 fbb5 	bl	80092d0 <RCCEx_PLL3_Config>
 8006b66:	4603      	mov	r3, r0
 8006b68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006b6c:	e004      	b.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006b74:	e000      	b.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006b76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b78:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d10a      	bne.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006b80:	4b7b      	ldr	r3, [pc, #492]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b84:	f023 0107 	bic.w	r1, r3, #7
 8006b88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b8e:	4a78      	ldr	r2, [pc, #480]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b90:	430b      	orrs	r3, r1
 8006b92:	6513      	str	r3, [r2, #80]	; 0x50
 8006b94:	e003      	b.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b9a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba6:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8006baa:	f04f 0b00 	mov.w	fp, #0
 8006bae:	ea5a 030b 	orrs.w	r3, sl, fp
 8006bb2:	d04c      	beq.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bbe:	d030      	beq.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006bc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bc4:	d829      	bhi.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006bc6:	2bc0      	cmp	r3, #192	; 0xc0
 8006bc8:	d02d      	beq.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006bca:	2bc0      	cmp	r3, #192	; 0xc0
 8006bcc:	d825      	bhi.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006bce:	2b80      	cmp	r3, #128	; 0x80
 8006bd0:	d018      	beq.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006bd2:	2b80      	cmp	r3, #128	; 0x80
 8006bd4:	d821      	bhi.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d002      	beq.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006bda:	2b40      	cmp	r3, #64	; 0x40
 8006bdc:	d007      	beq.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006bde:	e01c      	b.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006be0:	4b63      	ldr	r3, [pc, #396]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be4:	4a62      	ldr	r2, [pc, #392]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006be6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006bec:	e01c      	b.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bf2:	3308      	adds	r3, #8
 8006bf4:	2100      	movs	r1, #0
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f002 fab8 	bl	800916c <RCCEx_PLL2_Config>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006c02:	e011      	b.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c08:	3328      	adds	r3, #40	; 0x28
 8006c0a:	2100      	movs	r1, #0
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f002 fb5f 	bl	80092d0 <RCCEx_PLL3_Config>
 8006c12:	4603      	mov	r3, r0
 8006c14:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006c18:	e006      	b.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006c20:	e002      	b.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006c22:	bf00      	nop
 8006c24:	e000      	b.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006c26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c28:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d10a      	bne.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006c30:	4b4f      	ldr	r3, [pc, #316]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c34:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8006c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c3e:	4a4c      	ldr	r2, [pc, #304]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c40:	430b      	orrs	r3, r1
 8006c42:	6513      	str	r3, [r2, #80]	; 0x50
 8006c44:	e003      	b.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c4a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c56:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8006c5a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006c5e:	2300      	movs	r3, #0
 8006c60:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006c64:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8006c68:	460b      	mov	r3, r1
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	d053      	beq.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c72:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006c76:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006c7a:	d035      	beq.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006c7c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006c80:	d82e      	bhi.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006c82:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006c86:	d031      	beq.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006c88:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006c8c:	d828      	bhi.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006c8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c92:	d01a      	beq.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006c94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c98:	d822      	bhi.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d003      	beq.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006c9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ca2:	d007      	beq.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006ca4:	e01c      	b.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ca6:	4b32      	ldr	r3, [pc, #200]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006caa:	4a31      	ldr	r2, [pc, #196]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006cac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cb0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006cb2:	e01c      	b.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006cb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cb8:	3308      	adds	r3, #8
 8006cba:	2100      	movs	r1, #0
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f002 fa55 	bl	800916c <RCCEx_PLL2_Config>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006cc8:	e011      	b.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cce:	3328      	adds	r3, #40	; 0x28
 8006cd0:	2100      	movs	r1, #0
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f002 fafc 	bl	80092d0 <RCCEx_PLL3_Config>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006cde:	e006      	b.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006ce6:	e002      	b.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006ce8:	bf00      	nop
 8006cea:	e000      	b.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006cec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d10b      	bne.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006cf6:	4b1e      	ldr	r3, [pc, #120]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cfa:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8006cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d02:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006d06:	4a1a      	ldr	r2, [pc, #104]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d08:	430b      	orrs	r3, r1
 8006d0a:	6593      	str	r3, [r2, #88]	; 0x58
 8006d0c:	e003      	b.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d12:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d1e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8006d22:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006d26:	2300      	movs	r3, #0
 8006d28:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006d2c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8006d30:	460b      	mov	r3, r1
 8006d32:	4313      	orrs	r3, r2
 8006d34:	d056      	beq.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d3a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006d3e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006d42:	d038      	beq.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006d44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006d48:	d831      	bhi.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006d4a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006d4e:	d034      	beq.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006d50:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006d54:	d82b      	bhi.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006d56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d5a:	d01d      	beq.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006d5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d60:	d825      	bhi.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d006      	beq.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006d66:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006d6a:	d00a      	beq.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006d6c:	e01f      	b.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006d6e:	bf00      	nop
 8006d70:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d74:	4ba2      	ldr	r3, [pc, #648]	; (8007000 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d78:	4aa1      	ldr	r2, [pc, #644]	; (8007000 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006d80:	e01c      	b.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d86:	3308      	adds	r3, #8
 8006d88:	2100      	movs	r1, #0
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f002 f9ee 	bl	800916c <RCCEx_PLL2_Config>
 8006d90:	4603      	mov	r3, r0
 8006d92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006d96:	e011      	b.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d9c:	3328      	adds	r3, #40	; 0x28
 8006d9e:	2100      	movs	r1, #0
 8006da0:	4618      	mov	r0, r3
 8006da2:	f002 fa95 	bl	80092d0 <RCCEx_PLL3_Config>
 8006da6:	4603      	mov	r3, r0
 8006da8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006dac:	e006      	b.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006dae:	2301      	movs	r3, #1
 8006db0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006db4:	e002      	b.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006db6:	bf00      	nop
 8006db8:	e000      	b.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006dba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dbc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d10b      	bne.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006dc4:	4b8e      	ldr	r3, [pc, #568]	; (8007000 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dc8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8006dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006dd0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006dd4:	4a8a      	ldr	r2, [pc, #552]	; (8007000 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006dd6:	430b      	orrs	r3, r1
 8006dd8:	6593      	str	r3, [r2, #88]	; 0x58
 8006dda:	e003      	b.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ddc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006de0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dec:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006df0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006df4:	2300      	movs	r3, #0
 8006df6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006dfa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8006dfe:	460b      	mov	r3, r1
 8006e00:	4313      	orrs	r3, r2
 8006e02:	d03a      	beq.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e0a:	2b30      	cmp	r3, #48	; 0x30
 8006e0c:	d01f      	beq.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006e0e:	2b30      	cmp	r3, #48	; 0x30
 8006e10:	d819      	bhi.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006e12:	2b20      	cmp	r3, #32
 8006e14:	d00c      	beq.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006e16:	2b20      	cmp	r3, #32
 8006e18:	d815      	bhi.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d019      	beq.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006e1e:	2b10      	cmp	r3, #16
 8006e20:	d111      	bne.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e22:	4b77      	ldr	r3, [pc, #476]	; (8007000 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e26:	4a76      	ldr	r2, [pc, #472]	; (8007000 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006e28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e2c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006e2e:	e011      	b.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e34:	3308      	adds	r3, #8
 8006e36:	2102      	movs	r1, #2
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f002 f997 	bl	800916c <RCCEx_PLL2_Config>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006e44:	e006      	b.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006e4c:	e002      	b.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006e4e:	bf00      	nop
 8006e50:	e000      	b.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006e52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d10a      	bne.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006e5c:	4b68      	ldr	r3, [pc, #416]	; (8007000 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006e5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e60:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8006e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e6a:	4a65      	ldr	r2, [pc, #404]	; (8007000 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006e6c:	430b      	orrs	r3, r1
 8006e6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006e70:	e003      	b.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e76:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e82:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8006e86:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006e90:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8006e94:	460b      	mov	r3, r1
 8006e96:	4313      	orrs	r3, r2
 8006e98:	d051      	beq.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ea0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ea4:	d035      	beq.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006ea6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006eaa:	d82e      	bhi.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006eac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006eb0:	d031      	beq.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006eb2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006eb6:	d828      	bhi.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006eb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ebc:	d01a      	beq.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006ebe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ec2:	d822      	bhi.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d003      	beq.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006ec8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ecc:	d007      	beq.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006ece:	e01c      	b.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ed0:	4b4b      	ldr	r3, [pc, #300]	; (8007000 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed4:	4a4a      	ldr	r2, [pc, #296]	; (8007000 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006ed6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006eda:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006edc:	e01c      	b.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ee2:	3308      	adds	r3, #8
 8006ee4:	2100      	movs	r1, #0
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f002 f940 	bl	800916c <RCCEx_PLL2_Config>
 8006eec:	4603      	mov	r3, r0
 8006eee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006ef2:	e011      	b.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ef4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ef8:	3328      	adds	r3, #40	; 0x28
 8006efa:	2100      	movs	r1, #0
 8006efc:	4618      	mov	r0, r3
 8006efe:	f002 f9e7 	bl	80092d0 <RCCEx_PLL3_Config>
 8006f02:	4603      	mov	r3, r0
 8006f04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006f08:	e006      	b.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006f10:	e002      	b.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006f12:	bf00      	nop
 8006f14:	e000      	b.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006f16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f18:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d10a      	bne.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006f20:	4b37      	ldr	r3, [pc, #220]	; (8007000 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f24:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f2e:	4a34      	ldr	r2, [pc, #208]	; (8007000 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f30:	430b      	orrs	r3, r1
 8006f32:	6513      	str	r3, [r2, #80]	; 0x50
 8006f34:	e003      	b.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f3a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f46:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8006f4a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006f4e:	2300      	movs	r3, #0
 8006f50:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006f54:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8006f58:	460b      	mov	r3, r1
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	d056      	beq.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f68:	d033      	beq.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006f6a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f6e:	d82c      	bhi.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006f70:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006f74:	d02f      	beq.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006f76:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006f7a:	d826      	bhi.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006f7c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006f80:	d02b      	beq.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8006f82:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006f86:	d820      	bhi.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006f88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f8c:	d012      	beq.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006f8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f92:	d81a      	bhi.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d022      	beq.n	8006fde <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006f98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f9c:	d115      	bne.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fa2:	3308      	adds	r3, #8
 8006fa4:	2101      	movs	r1, #1
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f002 f8e0 	bl	800916c <RCCEx_PLL2_Config>
 8006fac:	4603      	mov	r3, r0
 8006fae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006fb2:	e015      	b.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006fb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fb8:	3328      	adds	r3, #40	; 0x28
 8006fba:	2101      	movs	r1, #1
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f002 f987 	bl	80092d0 <RCCEx_PLL3_Config>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006fc8:	e00a      	b.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006fd0:	e006      	b.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006fd2:	bf00      	nop
 8006fd4:	e004      	b.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006fd6:	bf00      	nop
 8006fd8:	e002      	b.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006fda:	bf00      	nop
 8006fdc:	e000      	b.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006fde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fe0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d10d      	bne.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006fe8:	4b05      	ldr	r3, [pc, #20]	; (8007000 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006fea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fec:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006ff0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ff4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ff6:	4a02      	ldr	r2, [pc, #8]	; (8007000 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006ff8:	430b      	orrs	r3, r1
 8006ffa:	6513      	str	r3, [r2, #80]	; 0x50
 8006ffc:	e006      	b.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006ffe:	bf00      	nop
 8007000:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007004:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007008:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800700c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007014:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8007018:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800701c:	2300      	movs	r3, #0
 800701e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007022:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8007026:	460b      	mov	r3, r1
 8007028:	4313      	orrs	r3, r2
 800702a:	d055      	beq.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800702c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007030:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007034:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007038:	d033      	beq.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800703a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800703e:	d82c      	bhi.n	800709a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007040:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007044:	d02f      	beq.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007046:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800704a:	d826      	bhi.n	800709a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800704c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007050:	d02b      	beq.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007052:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007056:	d820      	bhi.n	800709a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007058:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800705c:	d012      	beq.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800705e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007062:	d81a      	bhi.n	800709a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007064:	2b00      	cmp	r3, #0
 8007066:	d022      	beq.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007068:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800706c:	d115      	bne.n	800709a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800706e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007072:	3308      	adds	r3, #8
 8007074:	2101      	movs	r1, #1
 8007076:	4618      	mov	r0, r3
 8007078:	f002 f878 	bl	800916c <RCCEx_PLL2_Config>
 800707c:	4603      	mov	r3, r0
 800707e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007082:	e015      	b.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007084:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007088:	3328      	adds	r3, #40	; 0x28
 800708a:	2101      	movs	r1, #1
 800708c:	4618      	mov	r0, r3
 800708e:	f002 f91f 	bl	80092d0 <RCCEx_PLL3_Config>
 8007092:	4603      	mov	r3, r0
 8007094:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007098:	e00a      	b.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80070a0:	e006      	b.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80070a2:	bf00      	nop
 80070a4:	e004      	b.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80070a6:	bf00      	nop
 80070a8:	e002      	b.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80070aa:	bf00      	nop
 80070ac:	e000      	b.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80070ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d10b      	bne.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80070b8:	4ba3      	ldr	r3, [pc, #652]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070bc:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80070c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80070c8:	4a9f      	ldr	r2, [pc, #636]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070ca:	430b      	orrs	r3, r1
 80070cc:	6593      	str	r3, [r2, #88]	; 0x58
 80070ce:	e003      	b.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80070d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80070d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80070e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80070e8:	2300      	movs	r3, #0
 80070ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80070ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80070f2:	460b      	mov	r3, r1
 80070f4:	4313      	orrs	r3, r2
 80070f6:	d037      	beq.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80070f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007102:	d00e      	beq.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007104:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007108:	d816      	bhi.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800710a:	2b00      	cmp	r3, #0
 800710c:	d018      	beq.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800710e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007112:	d111      	bne.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007114:	4b8c      	ldr	r3, [pc, #560]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007118:	4a8b      	ldr	r2, [pc, #556]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800711a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800711e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007120:	e00f      	b.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007122:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007126:	3308      	adds	r3, #8
 8007128:	2101      	movs	r1, #1
 800712a:	4618      	mov	r0, r3
 800712c:	f002 f81e 	bl	800916c <RCCEx_PLL2_Config>
 8007130:	4603      	mov	r3, r0
 8007132:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007136:	e004      	b.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007138:	2301      	movs	r3, #1
 800713a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800713e:	e000      	b.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007140:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007142:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007146:	2b00      	cmp	r3, #0
 8007148:	d10a      	bne.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800714a:	4b7f      	ldr	r3, [pc, #508]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800714c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800714e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007152:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007158:	4a7b      	ldr	r2, [pc, #492]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800715a:	430b      	orrs	r3, r1
 800715c:	6513      	str	r3, [r2, #80]	; 0x50
 800715e:	e003      	b.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007160:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007164:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007168:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800716c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007170:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8007174:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007178:	2300      	movs	r3, #0
 800717a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800717e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8007182:	460b      	mov	r3, r1
 8007184:	4313      	orrs	r3, r2
 8007186:	d039      	beq.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007188:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800718c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800718e:	2b03      	cmp	r3, #3
 8007190:	d81c      	bhi.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007192:	a201      	add	r2, pc, #4	; (adr r2, 8007198 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007198:	080071d5 	.word	0x080071d5
 800719c:	080071a9 	.word	0x080071a9
 80071a0:	080071b7 	.word	0x080071b7
 80071a4:	080071d5 	.word	0x080071d5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071a8:	4b67      	ldr	r3, [pc, #412]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ac:	4a66      	ldr	r2, [pc, #408]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80071b4:	e00f      	b.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80071b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071ba:	3308      	adds	r3, #8
 80071bc:	2102      	movs	r1, #2
 80071be:	4618      	mov	r0, r3
 80071c0:	f001 ffd4 	bl	800916c <RCCEx_PLL2_Config>
 80071c4:	4603      	mov	r3, r0
 80071c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80071ca:	e004      	b.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80071cc:	2301      	movs	r3, #1
 80071ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80071d2:	e000      	b.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80071d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d10a      	bne.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80071de:	4b5a      	ldr	r3, [pc, #360]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071e2:	f023 0103 	bic.w	r1, r3, #3
 80071e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071ec:	4a56      	ldr	r2, [pc, #344]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071ee:	430b      	orrs	r3, r1
 80071f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80071f2:	e003      	b.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80071f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80071fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007204:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8007208:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800720c:	2300      	movs	r3, #0
 800720e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007212:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8007216:	460b      	mov	r3, r1
 8007218:	4313      	orrs	r3, r2
 800721a:	f000 809f 	beq.w	800735c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800721e:	4b4b      	ldr	r3, [pc, #300]	; (800734c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a4a      	ldr	r2, [pc, #296]	; (800734c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007224:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007228:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800722a:	f7fb fcbb 	bl	8002ba4 <HAL_GetTick>
 800722e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007232:	e00b      	b.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007234:	f7fb fcb6 	bl	8002ba4 <HAL_GetTick>
 8007238:	4602      	mov	r2, r0
 800723a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800723e:	1ad3      	subs	r3, r2, r3
 8007240:	2b64      	cmp	r3, #100	; 0x64
 8007242:	d903      	bls.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007244:	2303      	movs	r3, #3
 8007246:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800724a:	e005      	b.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800724c:	4b3f      	ldr	r3, [pc, #252]	; (800734c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007254:	2b00      	cmp	r3, #0
 8007256:	d0ed      	beq.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007258:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800725c:	2b00      	cmp	r3, #0
 800725e:	d179      	bne.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007260:	4b39      	ldr	r3, [pc, #228]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007262:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007264:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007268:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800726c:	4053      	eors	r3, r2
 800726e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007272:	2b00      	cmp	r3, #0
 8007274:	d015      	beq.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007276:	4b34      	ldr	r3, [pc, #208]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800727a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800727e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007282:	4b31      	ldr	r3, [pc, #196]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007286:	4a30      	ldr	r2, [pc, #192]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007288:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800728c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800728e:	4b2e      	ldr	r3, [pc, #184]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007292:	4a2d      	ldr	r2, [pc, #180]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007294:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007298:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800729a:	4a2b      	ldr	r2, [pc, #172]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800729c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80072a0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80072a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80072aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072ae:	d118      	bne.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072b0:	f7fb fc78 	bl	8002ba4 <HAL_GetTick>
 80072b4:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80072b8:	e00d      	b.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072ba:	f7fb fc73 	bl	8002ba4 <HAL_GetTick>
 80072be:	4602      	mov	r2, r0
 80072c0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80072c4:	1ad2      	subs	r2, r2, r3
 80072c6:	f241 3388 	movw	r3, #5000	; 0x1388
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d903      	bls.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80072ce:	2303      	movs	r3, #3
 80072d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 80072d4:	e005      	b.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80072d6:	4b1c      	ldr	r3, [pc, #112]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80072d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072da:	f003 0302 	and.w	r3, r3, #2
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d0eb      	beq.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80072e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d129      	bne.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80072ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072ee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80072f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072fa:	d10e      	bne.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80072fc:	4b12      	ldr	r3, [pc, #72]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80072fe:	691b      	ldr	r3, [r3, #16]
 8007300:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8007304:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007308:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800730c:	091a      	lsrs	r2, r3, #4
 800730e:	4b10      	ldr	r3, [pc, #64]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007310:	4013      	ands	r3, r2
 8007312:	4a0d      	ldr	r2, [pc, #52]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007314:	430b      	orrs	r3, r1
 8007316:	6113      	str	r3, [r2, #16]
 8007318:	e005      	b.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800731a:	4b0b      	ldr	r3, [pc, #44]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800731c:	691b      	ldr	r3, [r3, #16]
 800731e:	4a0a      	ldr	r2, [pc, #40]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007320:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007324:	6113      	str	r3, [r2, #16]
 8007326:	4b08      	ldr	r3, [pc, #32]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007328:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800732a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800732e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007332:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007336:	4a04      	ldr	r2, [pc, #16]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007338:	430b      	orrs	r3, r1
 800733a:	6713      	str	r3, [r2, #112]	; 0x70
 800733c:	e00e      	b.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800733e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007342:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8007346:	e009      	b.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007348:	58024400 	.word	0x58024400
 800734c:	58024800 	.word	0x58024800
 8007350:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007354:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007358:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800735c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007364:	f002 0301 	and.w	r3, r2, #1
 8007368:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800736c:	2300      	movs	r3, #0
 800736e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007372:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007376:	460b      	mov	r3, r1
 8007378:	4313      	orrs	r3, r2
 800737a:	f000 8089 	beq.w	8007490 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800737e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007382:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007384:	2b28      	cmp	r3, #40	; 0x28
 8007386:	d86b      	bhi.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007388:	a201      	add	r2, pc, #4	; (adr r2, 8007390 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800738a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800738e:	bf00      	nop
 8007390:	08007469 	.word	0x08007469
 8007394:	08007461 	.word	0x08007461
 8007398:	08007461 	.word	0x08007461
 800739c:	08007461 	.word	0x08007461
 80073a0:	08007461 	.word	0x08007461
 80073a4:	08007461 	.word	0x08007461
 80073a8:	08007461 	.word	0x08007461
 80073ac:	08007461 	.word	0x08007461
 80073b0:	08007435 	.word	0x08007435
 80073b4:	08007461 	.word	0x08007461
 80073b8:	08007461 	.word	0x08007461
 80073bc:	08007461 	.word	0x08007461
 80073c0:	08007461 	.word	0x08007461
 80073c4:	08007461 	.word	0x08007461
 80073c8:	08007461 	.word	0x08007461
 80073cc:	08007461 	.word	0x08007461
 80073d0:	0800744b 	.word	0x0800744b
 80073d4:	08007461 	.word	0x08007461
 80073d8:	08007461 	.word	0x08007461
 80073dc:	08007461 	.word	0x08007461
 80073e0:	08007461 	.word	0x08007461
 80073e4:	08007461 	.word	0x08007461
 80073e8:	08007461 	.word	0x08007461
 80073ec:	08007461 	.word	0x08007461
 80073f0:	08007469 	.word	0x08007469
 80073f4:	08007461 	.word	0x08007461
 80073f8:	08007461 	.word	0x08007461
 80073fc:	08007461 	.word	0x08007461
 8007400:	08007461 	.word	0x08007461
 8007404:	08007461 	.word	0x08007461
 8007408:	08007461 	.word	0x08007461
 800740c:	08007461 	.word	0x08007461
 8007410:	08007469 	.word	0x08007469
 8007414:	08007461 	.word	0x08007461
 8007418:	08007461 	.word	0x08007461
 800741c:	08007461 	.word	0x08007461
 8007420:	08007461 	.word	0x08007461
 8007424:	08007461 	.word	0x08007461
 8007428:	08007461 	.word	0x08007461
 800742c:	08007461 	.word	0x08007461
 8007430:	08007469 	.word	0x08007469
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007434:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007438:	3308      	adds	r3, #8
 800743a:	2101      	movs	r1, #1
 800743c:	4618      	mov	r0, r3
 800743e:	f001 fe95 	bl	800916c <RCCEx_PLL2_Config>
 8007442:	4603      	mov	r3, r0
 8007444:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007448:	e00f      	b.n	800746a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800744a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800744e:	3328      	adds	r3, #40	; 0x28
 8007450:	2101      	movs	r1, #1
 8007452:	4618      	mov	r0, r3
 8007454:	f001 ff3c 	bl	80092d0 <RCCEx_PLL3_Config>
 8007458:	4603      	mov	r3, r0
 800745a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800745e:	e004      	b.n	800746a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007460:	2301      	movs	r3, #1
 8007462:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007466:	e000      	b.n	800746a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007468:	bf00      	nop
    }

    if (ret == HAL_OK)
 800746a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800746e:	2b00      	cmp	r3, #0
 8007470:	d10a      	bne.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007472:	4bbf      	ldr	r3, [pc, #764]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007476:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800747a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800747e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007480:	4abb      	ldr	r2, [pc, #748]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007482:	430b      	orrs	r3, r1
 8007484:	6553      	str	r3, [r2, #84]	; 0x54
 8007486:	e003      	b.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007488:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800748c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007490:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007498:	f002 0302 	and.w	r3, r2, #2
 800749c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80074a0:	2300      	movs	r3, #0
 80074a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80074a6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80074aa:	460b      	mov	r3, r1
 80074ac:	4313      	orrs	r3, r2
 80074ae:	d041      	beq.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80074b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80074b6:	2b05      	cmp	r3, #5
 80074b8:	d824      	bhi.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80074ba:	a201      	add	r2, pc, #4	; (adr r2, 80074c0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80074bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c0:	0800750d 	.word	0x0800750d
 80074c4:	080074d9 	.word	0x080074d9
 80074c8:	080074ef 	.word	0x080074ef
 80074cc:	0800750d 	.word	0x0800750d
 80074d0:	0800750d 	.word	0x0800750d
 80074d4:	0800750d 	.word	0x0800750d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80074d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074dc:	3308      	adds	r3, #8
 80074de:	2101      	movs	r1, #1
 80074e0:	4618      	mov	r0, r3
 80074e2:	f001 fe43 	bl	800916c <RCCEx_PLL2_Config>
 80074e6:	4603      	mov	r3, r0
 80074e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80074ec:	e00f      	b.n	800750e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80074ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074f2:	3328      	adds	r3, #40	; 0x28
 80074f4:	2101      	movs	r1, #1
 80074f6:	4618      	mov	r0, r3
 80074f8:	f001 feea 	bl	80092d0 <RCCEx_PLL3_Config>
 80074fc:	4603      	mov	r3, r0
 80074fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007502:	e004      	b.n	800750e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007504:	2301      	movs	r3, #1
 8007506:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800750a:	e000      	b.n	800750e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800750c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800750e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007512:	2b00      	cmp	r3, #0
 8007514:	d10a      	bne.n	800752c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007516:	4b96      	ldr	r3, [pc, #600]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800751a:	f023 0107 	bic.w	r1, r3, #7
 800751e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007522:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007524:	4a92      	ldr	r2, [pc, #584]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007526:	430b      	orrs	r3, r1
 8007528:	6553      	str	r3, [r2, #84]	; 0x54
 800752a:	e003      	b.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800752c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007530:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007534:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800753c:	f002 0304 	and.w	r3, r2, #4
 8007540:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007544:	2300      	movs	r3, #0
 8007546:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800754a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800754e:	460b      	mov	r3, r1
 8007550:	4313      	orrs	r3, r2
 8007552:	d044      	beq.n	80075de <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007554:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007558:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800755c:	2b05      	cmp	r3, #5
 800755e:	d825      	bhi.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007560:	a201      	add	r2, pc, #4	; (adr r2, 8007568 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007566:	bf00      	nop
 8007568:	080075b5 	.word	0x080075b5
 800756c:	08007581 	.word	0x08007581
 8007570:	08007597 	.word	0x08007597
 8007574:	080075b5 	.word	0x080075b5
 8007578:	080075b5 	.word	0x080075b5
 800757c:	080075b5 	.word	0x080075b5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007580:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007584:	3308      	adds	r3, #8
 8007586:	2101      	movs	r1, #1
 8007588:	4618      	mov	r0, r3
 800758a:	f001 fdef 	bl	800916c <RCCEx_PLL2_Config>
 800758e:	4603      	mov	r3, r0
 8007590:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007594:	e00f      	b.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007596:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800759a:	3328      	adds	r3, #40	; 0x28
 800759c:	2101      	movs	r1, #1
 800759e:	4618      	mov	r0, r3
 80075a0:	f001 fe96 	bl	80092d0 <RCCEx_PLL3_Config>
 80075a4:	4603      	mov	r3, r0
 80075a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80075aa:	e004      	b.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075ac:	2301      	movs	r3, #1
 80075ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80075b2:	e000      	b.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80075b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d10b      	bne.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80075be:	4b6c      	ldr	r3, [pc, #432]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80075c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075c2:	f023 0107 	bic.w	r1, r3, #7
 80075c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80075ce:	4a68      	ldr	r2, [pc, #416]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80075d0:	430b      	orrs	r3, r1
 80075d2:	6593      	str	r3, [r2, #88]	; 0x58
 80075d4:	e003      	b.n	80075de <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80075da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80075de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e6:	f002 0320 	and.w	r3, r2, #32
 80075ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80075ee:	2300      	movs	r3, #0
 80075f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80075f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80075f8:	460b      	mov	r3, r1
 80075fa:	4313      	orrs	r3, r2
 80075fc:	d055      	beq.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80075fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007606:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800760a:	d033      	beq.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800760c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007610:	d82c      	bhi.n	800766c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007612:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007616:	d02f      	beq.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007618:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800761c:	d826      	bhi.n	800766c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800761e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007622:	d02b      	beq.n	800767c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007624:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007628:	d820      	bhi.n	800766c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800762a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800762e:	d012      	beq.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007630:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007634:	d81a      	bhi.n	800766c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007636:	2b00      	cmp	r3, #0
 8007638:	d022      	beq.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800763a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800763e:	d115      	bne.n	800766c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007640:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007644:	3308      	adds	r3, #8
 8007646:	2100      	movs	r1, #0
 8007648:	4618      	mov	r0, r3
 800764a:	f001 fd8f 	bl	800916c <RCCEx_PLL2_Config>
 800764e:	4603      	mov	r3, r0
 8007650:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007654:	e015      	b.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007656:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800765a:	3328      	adds	r3, #40	; 0x28
 800765c:	2102      	movs	r1, #2
 800765e:	4618      	mov	r0, r3
 8007660:	f001 fe36 	bl	80092d0 <RCCEx_PLL3_Config>
 8007664:	4603      	mov	r3, r0
 8007666:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800766a:	e00a      	b.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800766c:	2301      	movs	r3, #1
 800766e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007672:	e006      	b.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007674:	bf00      	nop
 8007676:	e004      	b.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007678:	bf00      	nop
 800767a:	e002      	b.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800767c:	bf00      	nop
 800767e:	e000      	b.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007680:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007682:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007686:	2b00      	cmp	r3, #0
 8007688:	d10b      	bne.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800768a:	4b39      	ldr	r3, [pc, #228]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800768c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800768e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007692:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800769a:	4a35      	ldr	r2, [pc, #212]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800769c:	430b      	orrs	r3, r1
 800769e:	6553      	str	r3, [r2, #84]	; 0x54
 80076a0:	e003      	b.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80076a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80076aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076b2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80076b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80076ba:	2300      	movs	r3, #0
 80076bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80076c0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80076c4:	460b      	mov	r3, r1
 80076c6:	4313      	orrs	r3, r2
 80076c8:	d058      	beq.n	800777c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80076ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80076d2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80076d6:	d033      	beq.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80076d8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80076dc:	d82c      	bhi.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80076de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076e2:	d02f      	beq.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80076e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076e8:	d826      	bhi.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80076ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80076ee:	d02b      	beq.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80076f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80076f4:	d820      	bhi.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80076f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076fa:	d012      	beq.n	8007722 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80076fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007700:	d81a      	bhi.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007702:	2b00      	cmp	r3, #0
 8007704:	d022      	beq.n	800774c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007706:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800770a:	d115      	bne.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800770c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007710:	3308      	adds	r3, #8
 8007712:	2100      	movs	r1, #0
 8007714:	4618      	mov	r0, r3
 8007716:	f001 fd29 	bl	800916c <RCCEx_PLL2_Config>
 800771a:	4603      	mov	r3, r0
 800771c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007720:	e015      	b.n	800774e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007722:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007726:	3328      	adds	r3, #40	; 0x28
 8007728:	2102      	movs	r1, #2
 800772a:	4618      	mov	r0, r3
 800772c:	f001 fdd0 	bl	80092d0 <RCCEx_PLL3_Config>
 8007730:	4603      	mov	r3, r0
 8007732:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007736:	e00a      	b.n	800774e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007738:	2301      	movs	r3, #1
 800773a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800773e:	e006      	b.n	800774e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007740:	bf00      	nop
 8007742:	e004      	b.n	800774e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007744:	bf00      	nop
 8007746:	e002      	b.n	800774e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007748:	bf00      	nop
 800774a:	e000      	b.n	800774e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800774c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800774e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007752:	2b00      	cmp	r3, #0
 8007754:	d10e      	bne.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007756:	4b06      	ldr	r3, [pc, #24]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800775a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800775e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007762:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007766:	4a02      	ldr	r2, [pc, #8]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007768:	430b      	orrs	r3, r1
 800776a:	6593      	str	r3, [r2, #88]	; 0x58
 800776c:	e006      	b.n	800777c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800776e:	bf00      	nop
 8007770:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007774:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007778:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800777c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007784:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8007788:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800778c:	2300      	movs	r3, #0
 800778e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007792:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8007796:	460b      	mov	r3, r1
 8007798:	4313      	orrs	r3, r2
 800779a:	d055      	beq.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800779c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80077a4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80077a8:	d033      	beq.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80077aa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80077ae:	d82c      	bhi.n	800780a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80077b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077b4:	d02f      	beq.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80077b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077ba:	d826      	bhi.n	800780a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80077bc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80077c0:	d02b      	beq.n	800781a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80077c2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80077c6:	d820      	bhi.n	800780a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80077c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077cc:	d012      	beq.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80077ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077d2:	d81a      	bhi.n	800780a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d022      	beq.n	800781e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80077d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077dc:	d115      	bne.n	800780a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80077de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077e2:	3308      	adds	r3, #8
 80077e4:	2100      	movs	r1, #0
 80077e6:	4618      	mov	r0, r3
 80077e8:	f001 fcc0 	bl	800916c <RCCEx_PLL2_Config>
 80077ec:	4603      	mov	r3, r0
 80077ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80077f2:	e015      	b.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80077f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077f8:	3328      	adds	r3, #40	; 0x28
 80077fa:	2102      	movs	r1, #2
 80077fc:	4618      	mov	r0, r3
 80077fe:	f001 fd67 	bl	80092d0 <RCCEx_PLL3_Config>
 8007802:	4603      	mov	r3, r0
 8007804:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007808:	e00a      	b.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800780a:	2301      	movs	r3, #1
 800780c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007810:	e006      	b.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007812:	bf00      	nop
 8007814:	e004      	b.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007816:	bf00      	nop
 8007818:	e002      	b.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800781a:	bf00      	nop
 800781c:	e000      	b.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800781e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007820:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007824:	2b00      	cmp	r3, #0
 8007826:	d10b      	bne.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007828:	4ba1      	ldr	r3, [pc, #644]	; (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800782a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800782c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8007830:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007834:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007838:	4a9d      	ldr	r2, [pc, #628]	; (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800783a:	430b      	orrs	r3, r1
 800783c:	6593      	str	r3, [r2, #88]	; 0x58
 800783e:	e003      	b.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007840:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007844:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007848:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800784c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007850:	f002 0308 	and.w	r3, r2, #8
 8007854:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007858:	2300      	movs	r3, #0
 800785a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800785e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8007862:	460b      	mov	r3, r1
 8007864:	4313      	orrs	r3, r2
 8007866:	d01e      	beq.n	80078a6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007868:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800786c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007870:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007874:	d10c      	bne.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007876:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800787a:	3328      	adds	r3, #40	; 0x28
 800787c:	2102      	movs	r1, #2
 800787e:	4618      	mov	r0, r3
 8007880:	f001 fd26 	bl	80092d0 <RCCEx_PLL3_Config>
 8007884:	4603      	mov	r3, r0
 8007886:	2b00      	cmp	r3, #0
 8007888:	d002      	beq.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800788a:	2301      	movs	r3, #1
 800788c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007890:	4b87      	ldr	r3, [pc, #540]	; (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007894:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007898:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800789c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078a0:	4a83      	ldr	r2, [pc, #524]	; (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80078a2:	430b      	orrs	r3, r1
 80078a4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80078a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ae:	f002 0310 	and.w	r3, r2, #16
 80078b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80078b6:	2300      	movs	r3, #0
 80078b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80078bc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80078c0:	460b      	mov	r3, r1
 80078c2:	4313      	orrs	r3, r2
 80078c4:	d01e      	beq.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80078c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80078ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078d2:	d10c      	bne.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80078d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078d8:	3328      	adds	r3, #40	; 0x28
 80078da:	2102      	movs	r1, #2
 80078dc:	4618      	mov	r0, r3
 80078de:	f001 fcf7 	bl	80092d0 <RCCEx_PLL3_Config>
 80078e2:	4603      	mov	r3, r0
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d002      	beq.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80078e8:	2301      	movs	r3, #1
 80078ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80078ee:	4b70      	ldr	r3, [pc, #448]	; (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80078f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078f2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80078f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80078fe:	4a6c      	ldr	r2, [pc, #432]	; (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007900:	430b      	orrs	r3, r1
 8007902:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007904:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800790c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8007910:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007914:	2300      	movs	r3, #0
 8007916:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800791a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800791e:	460b      	mov	r3, r1
 8007920:	4313      	orrs	r3, r2
 8007922:	d03e      	beq.n	80079a2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007924:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007928:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800792c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007930:	d022      	beq.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007932:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007936:	d81b      	bhi.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007938:	2b00      	cmp	r3, #0
 800793a:	d003      	beq.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800793c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007940:	d00b      	beq.n	800795a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007942:	e015      	b.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007944:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007948:	3308      	adds	r3, #8
 800794a:	2100      	movs	r1, #0
 800794c:	4618      	mov	r0, r3
 800794e:	f001 fc0d 	bl	800916c <RCCEx_PLL2_Config>
 8007952:	4603      	mov	r3, r0
 8007954:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007958:	e00f      	b.n	800797a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800795a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800795e:	3328      	adds	r3, #40	; 0x28
 8007960:	2102      	movs	r1, #2
 8007962:	4618      	mov	r0, r3
 8007964:	f001 fcb4 	bl	80092d0 <RCCEx_PLL3_Config>
 8007968:	4603      	mov	r3, r0
 800796a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800796e:	e004      	b.n	800797a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007970:	2301      	movs	r3, #1
 8007972:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007976:	e000      	b.n	800797a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007978:	bf00      	nop
    }

    if (ret == HAL_OK)
 800797a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800797e:	2b00      	cmp	r3, #0
 8007980:	d10b      	bne.n	800799a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007982:	4b4b      	ldr	r3, [pc, #300]	; (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007986:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800798a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800798e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007992:	4a47      	ldr	r2, [pc, #284]	; (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007994:	430b      	orrs	r3, r1
 8007996:	6593      	str	r3, [r2, #88]	; 0x58
 8007998:	e003      	b.n	80079a2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800799a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800799e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80079a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079aa:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80079ae:	67bb      	str	r3, [r7, #120]	; 0x78
 80079b0:	2300      	movs	r3, #0
 80079b2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80079b4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80079b8:	460b      	mov	r3, r1
 80079ba:	4313      	orrs	r3, r2
 80079bc:	d03b      	beq.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80079be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079c6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80079ca:	d01f      	beq.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80079cc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80079d0:	d818      	bhi.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80079d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079d6:	d003      	beq.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80079d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80079dc:	d007      	beq.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80079de:	e011      	b.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079e0:	4b33      	ldr	r3, [pc, #204]	; (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80079e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e4:	4a32      	ldr	r2, [pc, #200]	; (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80079e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80079ec:	e00f      	b.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80079ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079f2:	3328      	adds	r3, #40	; 0x28
 80079f4:	2101      	movs	r1, #1
 80079f6:	4618      	mov	r0, r3
 80079f8:	f001 fc6a 	bl	80092d0 <RCCEx_PLL3_Config>
 80079fc:	4603      	mov	r3, r0
 80079fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007a02:	e004      	b.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a04:	2301      	movs	r3, #1
 8007a06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007a0a:	e000      	b.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007a0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d10b      	bne.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007a16:	4b26      	ldr	r3, [pc, #152]	; (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a1a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a26:	4a22      	ldr	r2, [pc, #136]	; (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a28:	430b      	orrs	r3, r1
 8007a2a:	6553      	str	r3, [r2, #84]	; 0x54
 8007a2c:	e003      	b.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a32:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a3e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8007a42:	673b      	str	r3, [r7, #112]	; 0x70
 8007a44:	2300      	movs	r3, #0
 8007a46:	677b      	str	r3, [r7, #116]	; 0x74
 8007a48:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8007a4c:	460b      	mov	r3, r1
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	d034      	beq.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d003      	beq.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007a5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a60:	d007      	beq.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007a62:	e011      	b.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a64:	4b12      	ldr	r3, [pc, #72]	; (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a68:	4a11      	ldr	r2, [pc, #68]	; (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007a70:	e00e      	b.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a76:	3308      	adds	r3, #8
 8007a78:	2102      	movs	r1, #2
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f001 fb76 	bl	800916c <RCCEx_PLL2_Config>
 8007a80:	4603      	mov	r3, r0
 8007a82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007a86:	e003      	b.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007a88:	2301      	movs	r3, #1
 8007a8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007a8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d10d      	bne.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007a98:	4b05      	ldr	r3, [pc, #20]	; (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a9c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007aa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007aa6:	4a02      	ldr	r2, [pc, #8]	; (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007aa8:	430b      	orrs	r3, r1
 8007aaa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007aac:	e006      	b.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007aae:	bf00      	nop
 8007ab0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ab4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ab8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007abc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8007ac8:	66bb      	str	r3, [r7, #104]	; 0x68
 8007aca:	2300      	movs	r3, #0
 8007acc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007ace:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8007ad2:	460b      	mov	r3, r1
 8007ad4:	4313      	orrs	r3, r2
 8007ad6:	d00c      	beq.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007adc:	3328      	adds	r3, #40	; 0x28
 8007ade:	2102      	movs	r1, #2
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f001 fbf5 	bl	80092d0 <RCCEx_PLL3_Config>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d002      	beq.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007aec:	2301      	movs	r3, #1
 8007aee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007afa:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8007afe:	663b      	str	r3, [r7, #96]	; 0x60
 8007b00:	2300      	movs	r3, #0
 8007b02:	667b      	str	r3, [r7, #100]	; 0x64
 8007b04:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8007b08:	460b      	mov	r3, r1
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	d038      	beq.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b1a:	d018      	beq.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007b1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b20:	d811      	bhi.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007b22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b26:	d014      	beq.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007b28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b2c:	d80b      	bhi.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d011      	beq.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007b32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b36:	d106      	bne.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b38:	4bc3      	ldr	r3, [pc, #780]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b3c:	4ac2      	ldr	r2, [pc, #776]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007b44:	e008      	b.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b46:	2301      	movs	r3, #1
 8007b48:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007b4c:	e004      	b.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007b4e:	bf00      	nop
 8007b50:	e002      	b.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007b52:	bf00      	nop
 8007b54:	e000      	b.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007b56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d10b      	bne.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007b60:	4bb9      	ldr	r3, [pc, #740]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b64:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b70:	4ab5      	ldr	r2, [pc, #724]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b72:	430b      	orrs	r3, r1
 8007b74:	6553      	str	r3, [r2, #84]	; 0x54
 8007b76:	e003      	b.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b78:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b7c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b88:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8007b8c:	65bb      	str	r3, [r7, #88]	; 0x58
 8007b8e:	2300      	movs	r3, #0
 8007b90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b92:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8007b96:	460b      	mov	r3, r1
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	d009      	beq.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007b9c:	4baa      	ldr	r3, [pc, #680]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ba0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ba8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007baa:	4aa7      	ldr	r2, [pc, #668]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007bac:	430b      	orrs	r3, r1
 8007bae:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007bb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb8:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8007bbc:	653b      	str	r3, [r7, #80]	; 0x50
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	657b      	str	r3, [r7, #84]	; 0x54
 8007bc2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8007bc6:	460b      	mov	r3, r1
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	d00a      	beq.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007bcc:	4b9e      	ldr	r3, [pc, #632]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007bce:	691b      	ldr	r3, [r3, #16]
 8007bd0:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8007bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bd8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007bdc:	4a9a      	ldr	r2, [pc, #616]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007bde:	430b      	orrs	r3, r1
 8007be0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bea:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8007bee:	64bb      	str	r3, [r7, #72]	; 0x48
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007bf4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8007bf8:	460b      	mov	r3, r1
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	d009      	beq.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007bfe:	4b92      	ldr	r3, [pc, #584]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c02:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8007c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c0c:	4a8e      	ldr	r2, [pc, #568]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c0e:	430b      	orrs	r3, r1
 8007c10:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c1a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8007c1e:	643b      	str	r3, [r7, #64]	; 0x40
 8007c20:	2300      	movs	r3, #0
 8007c22:	647b      	str	r3, [r7, #68]	; 0x44
 8007c24:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8007c28:	460b      	mov	r3, r1
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	d00e      	beq.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007c2e:	4b86      	ldr	r3, [pc, #536]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c30:	691b      	ldr	r3, [r3, #16]
 8007c32:	4a85      	ldr	r2, [pc, #532]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c34:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007c38:	6113      	str	r3, [r2, #16]
 8007c3a:	4b83      	ldr	r3, [pc, #524]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c3c:	6919      	ldr	r1, [r3, #16]
 8007c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c42:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007c46:	4a80      	ldr	r2, [pc, #512]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c48:	430b      	orrs	r3, r1
 8007c4a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007c4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c54:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8007c58:	63bb      	str	r3, [r7, #56]	; 0x38
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c5e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8007c62:	460b      	mov	r3, r1
 8007c64:	4313      	orrs	r3, r2
 8007c66:	d009      	beq.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007c68:	4b77      	ldr	r3, [pc, #476]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c6c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c76:	4a74      	ldr	r2, [pc, #464]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c78:	430b      	orrs	r3, r1
 8007c7a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c84:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8007c88:	633b      	str	r3, [r7, #48]	; 0x30
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	637b      	str	r3, [r7, #52]	; 0x34
 8007c8e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8007c92:	460b      	mov	r3, r1
 8007c94:	4313      	orrs	r3, r2
 8007c96:	d00a      	beq.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007c98:	4b6b      	ldr	r3, [pc, #428]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c9c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8007ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ca4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ca8:	4a67      	ldr	r2, [pc, #412]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007caa:	430b      	orrs	r3, r1
 8007cac:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb6:	2100      	movs	r1, #0
 8007cb8:	62b9      	str	r1, [r7, #40]	; 0x28
 8007cba:	f003 0301 	and.w	r3, r3, #1
 8007cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007cc0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007cc4:	460b      	mov	r3, r1
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	d011      	beq.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cce:	3308      	adds	r3, #8
 8007cd0:	2100      	movs	r1, #0
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f001 fa4a 	bl	800916c <RCCEx_PLL2_Config>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007cde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d003      	beq.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ce6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007cea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cf6:	2100      	movs	r1, #0
 8007cf8:	6239      	str	r1, [r7, #32]
 8007cfa:	f003 0302 	and.w	r3, r3, #2
 8007cfe:	627b      	str	r3, [r7, #36]	; 0x24
 8007d00:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007d04:	460b      	mov	r3, r1
 8007d06:	4313      	orrs	r3, r2
 8007d08:	d011      	beq.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d0e:	3308      	adds	r3, #8
 8007d10:	2101      	movs	r1, #1
 8007d12:	4618      	mov	r0, r3
 8007d14:	f001 fa2a 	bl	800916c <RCCEx_PLL2_Config>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007d1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d003      	beq.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d2a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d36:	2100      	movs	r1, #0
 8007d38:	61b9      	str	r1, [r7, #24]
 8007d3a:	f003 0304 	and.w	r3, r3, #4
 8007d3e:	61fb      	str	r3, [r7, #28]
 8007d40:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007d44:	460b      	mov	r3, r1
 8007d46:	4313      	orrs	r3, r2
 8007d48:	d011      	beq.n	8007d6e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d4e:	3308      	adds	r3, #8
 8007d50:	2102      	movs	r1, #2
 8007d52:	4618      	mov	r0, r3
 8007d54:	f001 fa0a 	bl	800916c <RCCEx_PLL2_Config>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007d5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d003      	beq.n	8007d6e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d6a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d76:	2100      	movs	r1, #0
 8007d78:	6139      	str	r1, [r7, #16]
 8007d7a:	f003 0308 	and.w	r3, r3, #8
 8007d7e:	617b      	str	r3, [r7, #20]
 8007d80:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007d84:	460b      	mov	r3, r1
 8007d86:	4313      	orrs	r3, r2
 8007d88:	d011      	beq.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d8e:	3328      	adds	r3, #40	; 0x28
 8007d90:	2100      	movs	r1, #0
 8007d92:	4618      	mov	r0, r3
 8007d94:	f001 fa9c 	bl	80092d0 <RCCEx_PLL3_Config>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8007d9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d003      	beq.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007da6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007daa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db6:	2100      	movs	r1, #0
 8007db8:	60b9      	str	r1, [r7, #8]
 8007dba:	f003 0310 	and.w	r3, r3, #16
 8007dbe:	60fb      	str	r3, [r7, #12]
 8007dc0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007dc4:	460b      	mov	r3, r1
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	d011      	beq.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dce:	3328      	adds	r3, #40	; 0x28
 8007dd0:	2101      	movs	r1, #1
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f001 fa7c 	bl	80092d0 <RCCEx_PLL3_Config>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007dde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d003      	beq.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007de6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007dea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df6:	2100      	movs	r1, #0
 8007df8:	6039      	str	r1, [r7, #0]
 8007dfa:	f003 0320 	and.w	r3, r3, #32
 8007dfe:	607b      	str	r3, [r7, #4]
 8007e00:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007e04:	460b      	mov	r3, r1
 8007e06:	4313      	orrs	r3, r2
 8007e08:	d011      	beq.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e0e:	3328      	adds	r3, #40	; 0x28
 8007e10:	2102      	movs	r1, #2
 8007e12:	4618      	mov	r0, r3
 8007e14:	f001 fa5c 	bl	80092d0 <RCCEx_PLL3_Config>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007e1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d003      	beq.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e2a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8007e2e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d101      	bne.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8007e36:	2300      	movs	r3, #0
 8007e38:	e000      	b.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8007e3a:	2301      	movs	r3, #1
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8007e42:	46bd      	mov	sp, r7
 8007e44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e48:	58024400 	.word	0x58024400

08007e4c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b090      	sub	sp, #64	; 0x40
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007e56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e5a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8007e5e:	430b      	orrs	r3, r1
 8007e60:	f040 8094 	bne.w	8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007e64:	4b9e      	ldr	r3, [pc, #632]	; (80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007e66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e68:	f003 0307 	and.w	r3, r3, #7
 8007e6c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e70:	2b04      	cmp	r3, #4
 8007e72:	f200 8087 	bhi.w	8007f84 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007e76:	a201      	add	r2, pc, #4	; (adr r2, 8007e7c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e7c:	08007e91 	.word	0x08007e91
 8007e80:	08007eb9 	.word	0x08007eb9
 8007e84:	08007ee1 	.word	0x08007ee1
 8007e88:	08007f7d 	.word	0x08007f7d
 8007e8c:	08007f09 	.word	0x08007f09
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007e90:	4b93      	ldr	r3, [pc, #588]	; (80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e9c:	d108      	bne.n	8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f001 f810 	bl	8008ec8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007eac:	f000 bd45 	b.w	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007eb4:	f000 bd41 	b.w	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007eb8:	4b89      	ldr	r3, [pc, #548]	; (80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ec0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ec4:	d108      	bne.n	8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ec6:	f107 0318 	add.w	r3, r7, #24
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f000 fd54 	bl	8008978 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007ed0:	69bb      	ldr	r3, [r7, #24]
 8007ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ed4:	f000 bd31 	b.w	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007edc:	f000 bd2d 	b.w	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007ee0:	4b7f      	ldr	r3, [pc, #508]	; (80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ee8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007eec:	d108      	bne.n	8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007eee:	f107 030c 	add.w	r3, r7, #12
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f000 fe94 	bl	8008c20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007efc:	f000 bd1d 	b.w	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f00:	2300      	movs	r3, #0
 8007f02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f04:	f000 bd19 	b.w	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007f08:	4b75      	ldr	r3, [pc, #468]	; (80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007f10:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007f12:	4b73      	ldr	r3, [pc, #460]	; (80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f003 0304 	and.w	r3, r3, #4
 8007f1a:	2b04      	cmp	r3, #4
 8007f1c:	d10c      	bne.n	8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d109      	bne.n	8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007f24:	4b6e      	ldr	r3, [pc, #440]	; (80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	08db      	lsrs	r3, r3, #3
 8007f2a:	f003 0303 	and.w	r3, r3, #3
 8007f2e:	4a6d      	ldr	r2, [pc, #436]	; (80080e4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007f30:	fa22 f303 	lsr.w	r3, r2, r3
 8007f34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f36:	e01f      	b.n	8007f78 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007f38:	4b69      	ldr	r3, [pc, #420]	; (80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f44:	d106      	bne.n	8007f54 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8007f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f4c:	d102      	bne.n	8007f54 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007f4e:	4b66      	ldr	r3, [pc, #408]	; (80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007f50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f52:	e011      	b.n	8007f78 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007f54:	4b62      	ldr	r3, [pc, #392]	; (80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f60:	d106      	bne.n	8007f70 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8007f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f68:	d102      	bne.n	8007f70 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007f6a:	4b60      	ldr	r3, [pc, #384]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f6e:	e003      	b.n	8007f78 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007f70:	2300      	movs	r3, #0
 8007f72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007f74:	f000 bce1 	b.w	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007f78:	f000 bcdf 	b.w	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007f7c:	4b5c      	ldr	r3, [pc, #368]	; (80080f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f80:	f000 bcdb 	b.w	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007f84:	2300      	movs	r3, #0
 8007f86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f88:	f000 bcd7 	b.w	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007f8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f90:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8007f94:	430b      	orrs	r3, r1
 8007f96:	f040 80ad 	bne.w	80080f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8007f9a:	4b51      	ldr	r3, [pc, #324]	; (80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f9e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007fa2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007faa:	d056      	beq.n	800805a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8007fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fb2:	f200 8090 	bhi.w	80080d6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb8:	2bc0      	cmp	r3, #192	; 0xc0
 8007fba:	f000 8088 	beq.w	80080ce <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8007fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc0:	2bc0      	cmp	r3, #192	; 0xc0
 8007fc2:	f200 8088 	bhi.w	80080d6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc8:	2b80      	cmp	r3, #128	; 0x80
 8007fca:	d032      	beq.n	8008032 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fce:	2b80      	cmp	r3, #128	; 0x80
 8007fd0:	f200 8081 	bhi.w	80080d6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d003      	beq.n	8007fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8007fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fdc:	2b40      	cmp	r3, #64	; 0x40
 8007fde:	d014      	beq.n	800800a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8007fe0:	e079      	b.n	80080d6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007fe2:	4b3f      	ldr	r3, [pc, #252]	; (80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007fee:	d108      	bne.n	8008002 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ff0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f000 ff67 	bl	8008ec8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ffe:	f000 bc9c 	b.w	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008002:	2300      	movs	r3, #0
 8008004:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008006:	f000 bc98 	b.w	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800800a:	4b35      	ldr	r3, [pc, #212]	; (80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008012:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008016:	d108      	bne.n	800802a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008018:	f107 0318 	add.w	r3, r7, #24
 800801c:	4618      	mov	r0, r3
 800801e:	f000 fcab 	bl	8008978 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008022:	69bb      	ldr	r3, [r7, #24]
 8008024:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008026:	f000 bc88 	b.w	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800802a:	2300      	movs	r3, #0
 800802c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800802e:	f000 bc84 	b.w	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008032:	4b2b      	ldr	r3, [pc, #172]	; (80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800803a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800803e:	d108      	bne.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008040:	f107 030c 	add.w	r3, r7, #12
 8008044:	4618      	mov	r0, r3
 8008046:	f000 fdeb 	bl	8008c20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800804e:	f000 bc74 	b.w	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008052:	2300      	movs	r3, #0
 8008054:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008056:	f000 bc70 	b.w	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800805a:	4b21      	ldr	r3, [pc, #132]	; (80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800805c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800805e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008062:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008064:	4b1e      	ldr	r3, [pc, #120]	; (80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f003 0304 	and.w	r3, r3, #4
 800806c:	2b04      	cmp	r3, #4
 800806e:	d10c      	bne.n	800808a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8008070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008072:	2b00      	cmp	r3, #0
 8008074:	d109      	bne.n	800808a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008076:	4b1a      	ldr	r3, [pc, #104]	; (80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	08db      	lsrs	r3, r3, #3
 800807c:	f003 0303 	and.w	r3, r3, #3
 8008080:	4a18      	ldr	r2, [pc, #96]	; (80080e4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008082:	fa22 f303 	lsr.w	r3, r2, r3
 8008086:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008088:	e01f      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800808a:	4b15      	ldr	r3, [pc, #84]	; (80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008092:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008096:	d106      	bne.n	80080a6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8008098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800809a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800809e:	d102      	bne.n	80080a6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80080a0:	4b11      	ldr	r3, [pc, #68]	; (80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80080a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080a4:	e011      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80080a6:	4b0e      	ldr	r3, [pc, #56]	; (80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80080b2:	d106      	bne.n	80080c2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80080b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080ba:	d102      	bne.n	80080c2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80080bc:	4b0b      	ldr	r3, [pc, #44]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80080be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080c0:	e003      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80080c2:	2300      	movs	r3, #0
 80080c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80080c6:	f000 bc38 	b.w	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80080ca:	f000 bc36 	b.w	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80080ce:	4b08      	ldr	r3, [pc, #32]	; (80080f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80080d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080d2:	f000 bc32 	b.w	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80080d6:	2300      	movs	r3, #0
 80080d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080da:	f000 bc2e 	b.w	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80080de:	bf00      	nop
 80080e0:	58024400 	.word	0x58024400
 80080e4:	03d09000 	.word	0x03d09000
 80080e8:	003d0900 	.word	0x003d0900
 80080ec:	017d7840 	.word	0x017d7840
 80080f0:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80080f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080f8:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80080fc:	430b      	orrs	r3, r1
 80080fe:	f040 809c 	bne.w	800823a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8008102:	4b9e      	ldr	r3, [pc, #632]	; (800837c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008106:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800810a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800810c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800810e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008112:	d054      	beq.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8008114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008116:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800811a:	f200 808b 	bhi.w	8008234 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800811e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008120:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008124:	f000 8083 	beq.w	800822e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8008128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800812a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800812e:	f200 8081 	bhi.w	8008234 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008134:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008138:	d02f      	beq.n	800819a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800813a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800813c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008140:	d878      	bhi.n	8008234 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008144:	2b00      	cmp	r3, #0
 8008146:	d004      	beq.n	8008152 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8008148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800814a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800814e:	d012      	beq.n	8008176 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8008150:	e070      	b.n	8008234 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008152:	4b8a      	ldr	r3, [pc, #552]	; (800837c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800815a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800815e:	d107      	bne.n	8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008160:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008164:	4618      	mov	r0, r3
 8008166:	f000 feaf 	bl	8008ec8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800816a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800816c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800816e:	e3e4      	b.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008170:	2300      	movs	r3, #0
 8008172:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008174:	e3e1      	b.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008176:	4b81      	ldr	r3, [pc, #516]	; (800837c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800817e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008182:	d107      	bne.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008184:	f107 0318 	add.w	r3, r7, #24
 8008188:	4618      	mov	r0, r3
 800818a:	f000 fbf5 	bl	8008978 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800818e:	69bb      	ldr	r3, [r7, #24]
 8008190:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008192:	e3d2      	b.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008194:	2300      	movs	r3, #0
 8008196:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008198:	e3cf      	b.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800819a:	4b78      	ldr	r3, [pc, #480]	; (800837c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80081a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081a6:	d107      	bne.n	80081b8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80081a8:	f107 030c 	add.w	r3, r7, #12
 80081ac:	4618      	mov	r0, r3
 80081ae:	f000 fd37 	bl	8008c20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081b6:	e3c0      	b.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80081b8:	2300      	movs	r3, #0
 80081ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081bc:	e3bd      	b.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80081be:	4b6f      	ldr	r3, [pc, #444]	; (800837c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80081c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80081c6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80081c8:	4b6c      	ldr	r3, [pc, #432]	; (800837c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f003 0304 	and.w	r3, r3, #4
 80081d0:	2b04      	cmp	r3, #4
 80081d2:	d10c      	bne.n	80081ee <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80081d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d109      	bne.n	80081ee <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80081da:	4b68      	ldr	r3, [pc, #416]	; (800837c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	08db      	lsrs	r3, r3, #3
 80081e0:	f003 0303 	and.w	r3, r3, #3
 80081e4:	4a66      	ldr	r2, [pc, #408]	; (8008380 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80081e6:	fa22 f303 	lsr.w	r3, r2, r3
 80081ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081ec:	e01e      	b.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80081ee:	4b63      	ldr	r3, [pc, #396]	; (800837c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081fa:	d106      	bne.n	800820a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80081fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008202:	d102      	bne.n	800820a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008204:	4b5f      	ldr	r3, [pc, #380]	; (8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008206:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008208:	e010      	b.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800820a:	4b5c      	ldr	r3, [pc, #368]	; (800837c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008212:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008216:	d106      	bne.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8008218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800821a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800821e:	d102      	bne.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008220:	4b59      	ldr	r3, [pc, #356]	; (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008222:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008224:	e002      	b.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008226:	2300      	movs	r3, #0
 8008228:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800822a:	e386      	b.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800822c:	e385      	b.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800822e:	4b57      	ldr	r3, [pc, #348]	; (800838c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008230:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008232:	e382      	b.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008234:	2300      	movs	r3, #0
 8008236:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008238:	e37f      	b.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800823a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800823e:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8008242:	430b      	orrs	r3, r1
 8008244:	f040 80a7 	bne.w	8008396 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008248:	4b4c      	ldr	r3, [pc, #304]	; (800837c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800824a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800824c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008250:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008254:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008258:	d055      	beq.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800825a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800825c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008260:	f200 8096 	bhi.w	8008390 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008266:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800826a:	f000 8084 	beq.w	8008376 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800826e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008270:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008274:	f200 808c 	bhi.w	8008390 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800827a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800827e:	d030      	beq.n	80082e2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8008280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008282:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008286:	f200 8083 	bhi.w	8008390 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800828a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800828c:	2b00      	cmp	r3, #0
 800828e:	d004      	beq.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8008290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008292:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008296:	d012      	beq.n	80082be <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8008298:	e07a      	b.n	8008390 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800829a:	4b38      	ldr	r3, [pc, #224]	; (800837c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80082a6:	d107      	bne.n	80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80082a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80082ac:	4618      	mov	r0, r3
 80082ae:	f000 fe0b 	bl	8008ec8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80082b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082b6:	e340      	b.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80082b8:	2300      	movs	r3, #0
 80082ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082bc:	e33d      	b.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80082be:	4b2f      	ldr	r3, [pc, #188]	; (800837c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80082c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80082ca:	d107      	bne.n	80082dc <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80082cc:	f107 0318 	add.w	r3, r7, #24
 80082d0:	4618      	mov	r0, r3
 80082d2:	f000 fb51 	bl	8008978 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80082d6:	69bb      	ldr	r3, [r7, #24]
 80082d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082da:	e32e      	b.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80082dc:	2300      	movs	r3, #0
 80082de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082e0:	e32b      	b.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80082e2:	4b26      	ldr	r3, [pc, #152]	; (800837c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80082ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082ee:	d107      	bne.n	8008300 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80082f0:	f107 030c 	add.w	r3, r7, #12
 80082f4:	4618      	mov	r0, r3
 80082f6:	f000 fc93 	bl	8008c20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082fe:	e31c      	b.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008300:	2300      	movs	r3, #0
 8008302:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008304:	e319      	b.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008306:	4b1d      	ldr	r3, [pc, #116]	; (800837c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800830a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800830e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008310:	4b1a      	ldr	r3, [pc, #104]	; (800837c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f003 0304 	and.w	r3, r3, #4
 8008318:	2b04      	cmp	r3, #4
 800831a:	d10c      	bne.n	8008336 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800831c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800831e:	2b00      	cmp	r3, #0
 8008320:	d109      	bne.n	8008336 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008322:	4b16      	ldr	r3, [pc, #88]	; (800837c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	08db      	lsrs	r3, r3, #3
 8008328:	f003 0303 	and.w	r3, r3, #3
 800832c:	4a14      	ldr	r2, [pc, #80]	; (8008380 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800832e:	fa22 f303 	lsr.w	r3, r2, r3
 8008332:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008334:	e01e      	b.n	8008374 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008336:	4b11      	ldr	r3, [pc, #68]	; (800837c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800833e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008342:	d106      	bne.n	8008352 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8008344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008346:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800834a:	d102      	bne.n	8008352 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800834c:	4b0d      	ldr	r3, [pc, #52]	; (8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800834e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008350:	e010      	b.n	8008374 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008352:	4b0a      	ldr	r3, [pc, #40]	; (800837c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800835a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800835e:	d106      	bne.n	800836e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8008360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008362:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008366:	d102      	bne.n	800836e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008368:	4b07      	ldr	r3, [pc, #28]	; (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800836a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800836c:	e002      	b.n	8008374 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800836e:	2300      	movs	r3, #0
 8008370:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008372:	e2e2      	b.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008374:	e2e1      	b.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008376:	4b05      	ldr	r3, [pc, #20]	; (800838c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008378:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800837a:	e2de      	b.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800837c:	58024400 	.word	0x58024400
 8008380:	03d09000 	.word	0x03d09000
 8008384:	003d0900 	.word	0x003d0900
 8008388:	017d7840 	.word	0x017d7840
 800838c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8008390:	2300      	movs	r3, #0
 8008392:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008394:	e2d1      	b.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008396:	e9d7 2300 	ldrd	r2, r3, [r7]
 800839a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800839e:	430b      	orrs	r3, r1
 80083a0:	f040 809c 	bne.w	80084dc <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80083a4:	4b93      	ldr	r3, [pc, #588]	; (80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80083a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083a8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80083ac:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80083ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80083b4:	d054      	beq.n	8008460 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80083b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80083bc:	f200 808b 	bhi.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80083c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083c2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80083c6:	f000 8083 	beq.w	80084d0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80083ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083cc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80083d0:	f200 8081 	bhi.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80083d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083da:	d02f      	beq.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80083dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083e2:	d878      	bhi.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80083e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d004      	beq.n	80083f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80083ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083f0:	d012      	beq.n	8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80083f2:	e070      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80083f4:	4b7f      	ldr	r3, [pc, #508]	; (80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008400:	d107      	bne.n	8008412 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008402:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008406:	4618      	mov	r0, r3
 8008408:	f000 fd5e 	bl	8008ec8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800840c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800840e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008410:	e293      	b.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008412:	2300      	movs	r3, #0
 8008414:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008416:	e290      	b.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008418:	4b76      	ldr	r3, [pc, #472]	; (80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008420:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008424:	d107      	bne.n	8008436 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008426:	f107 0318 	add.w	r3, r7, #24
 800842a:	4618      	mov	r0, r3
 800842c:	f000 faa4 	bl	8008978 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008430:	69bb      	ldr	r3, [r7, #24]
 8008432:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008434:	e281      	b.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008436:	2300      	movs	r3, #0
 8008438:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800843a:	e27e      	b.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800843c:	4b6d      	ldr	r3, [pc, #436]	; (80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008444:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008448:	d107      	bne.n	800845a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800844a:	f107 030c 	add.w	r3, r7, #12
 800844e:	4618      	mov	r0, r3
 8008450:	f000 fbe6 	bl	8008c20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008458:	e26f      	b.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800845a:	2300      	movs	r3, #0
 800845c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800845e:	e26c      	b.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008460:	4b64      	ldr	r3, [pc, #400]	; (80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008462:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008464:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008468:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800846a:	4b62      	ldr	r3, [pc, #392]	; (80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f003 0304 	and.w	r3, r3, #4
 8008472:	2b04      	cmp	r3, #4
 8008474:	d10c      	bne.n	8008490 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8008476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008478:	2b00      	cmp	r3, #0
 800847a:	d109      	bne.n	8008490 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800847c:	4b5d      	ldr	r3, [pc, #372]	; (80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	08db      	lsrs	r3, r3, #3
 8008482:	f003 0303 	and.w	r3, r3, #3
 8008486:	4a5c      	ldr	r2, [pc, #368]	; (80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008488:	fa22 f303 	lsr.w	r3, r2, r3
 800848c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800848e:	e01e      	b.n	80084ce <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008490:	4b58      	ldr	r3, [pc, #352]	; (80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008498:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800849c:	d106      	bne.n	80084ac <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800849e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80084a4:	d102      	bne.n	80084ac <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80084a6:	4b55      	ldr	r3, [pc, #340]	; (80085fc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80084a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084aa:	e010      	b.n	80084ce <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80084ac:	4b51      	ldr	r3, [pc, #324]	; (80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80084b8:	d106      	bne.n	80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80084ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084c0:	d102      	bne.n	80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80084c2:	4b4f      	ldr	r3, [pc, #316]	; (8008600 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80084c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084c6:	e002      	b.n	80084ce <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80084c8:	2300      	movs	r3, #0
 80084ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80084cc:	e235      	b.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80084ce:	e234      	b.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80084d0:	4b4c      	ldr	r3, [pc, #304]	; (8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80084d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084d4:	e231      	b.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80084d6:	2300      	movs	r3, #0
 80084d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084da:	e22e      	b.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80084dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084e0:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80084e4:	430b      	orrs	r3, r1
 80084e6:	f040 808f 	bne.w	8008608 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80084ea:	4b42      	ldr	r3, [pc, #264]	; (80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80084ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084ee:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80084f2:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 80084f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80084fa:	d06b      	beq.n	80085d4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80084fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008502:	d874      	bhi.n	80085ee <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008506:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800850a:	d056      	beq.n	80085ba <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800850c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800850e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008512:	d86c      	bhi.n	80085ee <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008516:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800851a:	d03b      	beq.n	8008594 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800851c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800851e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008522:	d864      	bhi.n	80085ee <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008526:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800852a:	d021      	beq.n	8008570 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800852c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800852e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008532:	d85c      	bhi.n	80085ee <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008536:	2b00      	cmp	r3, #0
 8008538:	d004      	beq.n	8008544 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800853a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800853c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008540:	d004      	beq.n	800854c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8008542:	e054      	b.n	80085ee <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008544:	f7fe fa4c 	bl	80069e0 <HAL_RCC_GetPCLK1Freq>
 8008548:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800854a:	e1f6      	b.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800854c:	4b29      	ldr	r3, [pc, #164]	; (80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008554:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008558:	d107      	bne.n	800856a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800855a:	f107 0318 	add.w	r3, r7, #24
 800855e:	4618      	mov	r0, r3
 8008560:	f000 fa0a 	bl	8008978 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008564:	69fb      	ldr	r3, [r7, #28]
 8008566:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008568:	e1e7      	b.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800856a:	2300      	movs	r3, #0
 800856c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800856e:	e1e4      	b.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008570:	4b20      	ldr	r3, [pc, #128]	; (80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008578:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800857c:	d107      	bne.n	800858e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800857e:	f107 030c 	add.w	r3, r7, #12
 8008582:	4618      	mov	r0, r3
 8008584:	f000 fb4c 	bl	8008c20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800858c:	e1d5      	b.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800858e:	2300      	movs	r3, #0
 8008590:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008592:	e1d2      	b.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008594:	4b17      	ldr	r3, [pc, #92]	; (80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f003 0304 	and.w	r3, r3, #4
 800859c:	2b04      	cmp	r3, #4
 800859e:	d109      	bne.n	80085b4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80085a0:	4b14      	ldr	r3, [pc, #80]	; (80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	08db      	lsrs	r3, r3, #3
 80085a6:	f003 0303 	and.w	r3, r3, #3
 80085aa:	4a13      	ldr	r2, [pc, #76]	; (80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80085ac:	fa22 f303 	lsr.w	r3, r2, r3
 80085b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085b2:	e1c2      	b.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80085b4:	2300      	movs	r3, #0
 80085b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085b8:	e1bf      	b.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80085ba:	4b0e      	ldr	r3, [pc, #56]	; (80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085c6:	d102      	bne.n	80085ce <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80085c8:	4b0c      	ldr	r3, [pc, #48]	; (80085fc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80085ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085cc:	e1b5      	b.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80085ce:	2300      	movs	r3, #0
 80085d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085d2:	e1b2      	b.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80085d4:	4b07      	ldr	r3, [pc, #28]	; (80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80085e0:	d102      	bne.n	80085e8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80085e2:	4b07      	ldr	r3, [pc, #28]	; (8008600 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80085e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085e6:	e1a8      	b.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80085e8:	2300      	movs	r3, #0
 80085ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085ec:	e1a5      	b.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80085ee:	2300      	movs	r3, #0
 80085f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085f2:	e1a2      	b.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80085f4:	58024400 	.word	0x58024400
 80085f8:	03d09000 	.word	0x03d09000
 80085fc:	003d0900 	.word	0x003d0900
 8008600:	017d7840 	.word	0x017d7840
 8008604:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008608:	e9d7 2300 	ldrd	r2, r3, [r7]
 800860c:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8008610:	430b      	orrs	r3, r1
 8008612:	d173      	bne.n	80086fc <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008614:	4b9c      	ldr	r3, [pc, #624]	; (8008888 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008618:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800861c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800861e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008620:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008624:	d02f      	beq.n	8008686 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8008626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008628:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800862c:	d863      	bhi.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800862e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008630:	2b00      	cmp	r3, #0
 8008632:	d004      	beq.n	800863e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8008634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008636:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800863a:	d012      	beq.n	8008662 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800863c:	e05b      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800863e:	4b92      	ldr	r3, [pc, #584]	; (8008888 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008646:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800864a:	d107      	bne.n	800865c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800864c:	f107 0318 	add.w	r3, r7, #24
 8008650:	4618      	mov	r0, r3
 8008652:	f000 f991 	bl	8008978 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008656:	69bb      	ldr	r3, [r7, #24]
 8008658:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800865a:	e16e      	b.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800865c:	2300      	movs	r3, #0
 800865e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008660:	e16b      	b.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008662:	4b89      	ldr	r3, [pc, #548]	; (8008888 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800866a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800866e:	d107      	bne.n	8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008670:	f107 030c 	add.w	r3, r7, #12
 8008674:	4618      	mov	r0, r3
 8008676:	f000 fad3 	bl	8008c20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800867e:	e15c      	b.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008680:	2300      	movs	r3, #0
 8008682:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008684:	e159      	b.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008686:	4b80      	ldr	r3, [pc, #512]	; (8008888 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800868a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800868e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008690:	4b7d      	ldr	r3, [pc, #500]	; (8008888 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f003 0304 	and.w	r3, r3, #4
 8008698:	2b04      	cmp	r3, #4
 800869a:	d10c      	bne.n	80086b6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800869c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d109      	bne.n	80086b6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80086a2:	4b79      	ldr	r3, [pc, #484]	; (8008888 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	08db      	lsrs	r3, r3, #3
 80086a8:	f003 0303 	and.w	r3, r3, #3
 80086ac:	4a77      	ldr	r2, [pc, #476]	; (800888c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80086ae:	fa22 f303 	lsr.w	r3, r2, r3
 80086b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086b4:	e01e      	b.n	80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80086b6:	4b74      	ldr	r3, [pc, #464]	; (8008888 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086c2:	d106      	bne.n	80086d2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80086c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80086ca:	d102      	bne.n	80086d2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80086cc:	4b70      	ldr	r3, [pc, #448]	; (8008890 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80086ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086d0:	e010      	b.n	80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80086d2:	4b6d      	ldr	r3, [pc, #436]	; (8008888 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80086de:	d106      	bne.n	80086ee <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80086e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086e6:	d102      	bne.n	80086ee <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80086e8:	4b6a      	ldr	r3, [pc, #424]	; (8008894 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80086ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086ec:	e002      	b.n	80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80086ee:	2300      	movs	r3, #0
 80086f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80086f2:	e122      	b.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80086f4:	e121      	b.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80086f6:	2300      	movs	r3, #0
 80086f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086fa:	e11e      	b.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80086fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008700:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8008704:	430b      	orrs	r3, r1
 8008706:	d133      	bne.n	8008770 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008708:	4b5f      	ldr	r3, [pc, #380]	; (8008888 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800870a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800870c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008710:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008714:	2b00      	cmp	r3, #0
 8008716:	d004      	beq.n	8008722 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8008718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800871a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800871e:	d012      	beq.n	8008746 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8008720:	e023      	b.n	800876a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008722:	4b59      	ldr	r3, [pc, #356]	; (8008888 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800872a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800872e:	d107      	bne.n	8008740 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008730:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008734:	4618      	mov	r0, r3
 8008736:	f000 fbc7 	bl	8008ec8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800873a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800873c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800873e:	e0fc      	b.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008740:	2300      	movs	r3, #0
 8008742:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008744:	e0f9      	b.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008746:	4b50      	ldr	r3, [pc, #320]	; (8008888 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800874e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008752:	d107      	bne.n	8008764 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008754:	f107 0318 	add.w	r3, r7, #24
 8008758:	4618      	mov	r0, r3
 800875a:	f000 f90d 	bl	8008978 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800875e:	6a3b      	ldr	r3, [r7, #32]
 8008760:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008762:	e0ea      	b.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008764:	2300      	movs	r3, #0
 8008766:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008768:	e0e7      	b.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800876a:	2300      	movs	r3, #0
 800876c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800876e:	e0e4      	b.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008770:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008774:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8008778:	430b      	orrs	r3, r1
 800877a:	f040 808d 	bne.w	8008898 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800877e:	4b42      	ldr	r3, [pc, #264]	; (8008888 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008782:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008786:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800878a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800878e:	d06b      	beq.n	8008868 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8008790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008792:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008796:	d874      	bhi.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800879a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800879e:	d056      	beq.n	800884e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80087a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087a6:	d86c      	bhi.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80087a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087aa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80087ae:	d03b      	beq.n	8008828 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80087b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087b2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80087b6:	d864      	bhi.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80087b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087be:	d021      	beq.n	8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80087c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087c6:	d85c      	bhi.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80087c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d004      	beq.n	80087d8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80087ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80087d4:	d004      	beq.n	80087e0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80087d6:	e054      	b.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80087d8:	f000 f8b8 	bl	800894c <HAL_RCCEx_GetD3PCLK1Freq>
 80087dc:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80087de:	e0ac      	b.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80087e0:	4b29      	ldr	r3, [pc, #164]	; (8008888 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80087e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80087ec:	d107      	bne.n	80087fe <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087ee:	f107 0318 	add.w	r3, r7, #24
 80087f2:	4618      	mov	r0, r3
 80087f4:	f000 f8c0 	bl	8008978 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80087f8:	69fb      	ldr	r3, [r7, #28]
 80087fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087fc:	e09d      	b.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087fe:	2300      	movs	r3, #0
 8008800:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008802:	e09a      	b.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008804:	4b20      	ldr	r3, [pc, #128]	; (8008888 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800880c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008810:	d107      	bne.n	8008822 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008812:	f107 030c 	add.w	r3, r7, #12
 8008816:	4618      	mov	r0, r3
 8008818:	f000 fa02 	bl	8008c20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800881c:	693b      	ldr	r3, [r7, #16]
 800881e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008820:	e08b      	b.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008822:	2300      	movs	r3, #0
 8008824:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008826:	e088      	b.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008828:	4b17      	ldr	r3, [pc, #92]	; (8008888 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f003 0304 	and.w	r3, r3, #4
 8008830:	2b04      	cmp	r3, #4
 8008832:	d109      	bne.n	8008848 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008834:	4b14      	ldr	r3, [pc, #80]	; (8008888 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	08db      	lsrs	r3, r3, #3
 800883a:	f003 0303 	and.w	r3, r3, #3
 800883e:	4a13      	ldr	r2, [pc, #76]	; (800888c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008840:	fa22 f303 	lsr.w	r3, r2, r3
 8008844:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008846:	e078      	b.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008848:	2300      	movs	r3, #0
 800884a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800884c:	e075      	b.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800884e:	4b0e      	ldr	r3, [pc, #56]	; (8008888 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008856:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800885a:	d102      	bne.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800885c:	4b0c      	ldr	r3, [pc, #48]	; (8008890 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800885e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008860:	e06b      	b.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008862:	2300      	movs	r3, #0
 8008864:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008866:	e068      	b.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008868:	4b07      	ldr	r3, [pc, #28]	; (8008888 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008870:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008874:	d102      	bne.n	800887c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8008876:	4b07      	ldr	r3, [pc, #28]	; (8008894 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008878:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800887a:	e05e      	b.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800887c:	2300      	movs	r3, #0
 800887e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008880:	e05b      	b.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008882:	2300      	movs	r3, #0
 8008884:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008886:	e058      	b.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008888:	58024400 	.word	0x58024400
 800888c:	03d09000 	.word	0x03d09000
 8008890:	003d0900 	.word	0x003d0900
 8008894:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008898:	e9d7 2300 	ldrd	r2, r3, [r7]
 800889c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80088a0:	430b      	orrs	r3, r1
 80088a2:	d148      	bne.n	8008936 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80088a4:	4b27      	ldr	r3, [pc, #156]	; (8008944 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80088a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80088ac:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80088ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088b4:	d02a      	beq.n	800890c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80088b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088bc:	d838      	bhi.n	8008930 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80088be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d004      	beq.n	80088ce <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80088c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80088ca:	d00d      	beq.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80088cc:	e030      	b.n	8008930 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80088ce:	4b1d      	ldr	r3, [pc, #116]	; (8008944 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80088da:	d102      	bne.n	80088e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80088dc:	4b1a      	ldr	r3, [pc, #104]	; (8008948 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80088de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088e0:	e02b      	b.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80088e2:	2300      	movs	r3, #0
 80088e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088e6:	e028      	b.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80088e8:	4b16      	ldr	r3, [pc, #88]	; (8008944 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80088f4:	d107      	bne.n	8008906 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80088f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80088fa:	4618      	mov	r0, r3
 80088fc:	f000 fae4 	bl	8008ec8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008902:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008904:	e019      	b.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008906:	2300      	movs	r3, #0
 8008908:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800890a:	e016      	b.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800890c:	4b0d      	ldr	r3, [pc, #52]	; (8008944 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008914:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008918:	d107      	bne.n	800892a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800891a:	f107 0318 	add.w	r3, r7, #24
 800891e:	4618      	mov	r0, r3
 8008920:	f000 f82a 	bl	8008978 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008924:	69fb      	ldr	r3, [r7, #28]
 8008926:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008928:	e007      	b.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800892a:	2300      	movs	r3, #0
 800892c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800892e:	e004      	b.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008930:	2300      	movs	r3, #0
 8008932:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008934:	e001      	b.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8008936:	2300      	movs	r3, #0
 8008938:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800893a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800893c:	4618      	mov	r0, r3
 800893e:	3740      	adds	r7, #64	; 0x40
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}
 8008944:	58024400 	.word	0x58024400
 8008948:	017d7840 	.word	0x017d7840

0800894c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008950:	f7fe f816 	bl	8006980 <HAL_RCC_GetHCLKFreq>
 8008954:	4602      	mov	r2, r0
 8008956:	4b06      	ldr	r3, [pc, #24]	; (8008970 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008958:	6a1b      	ldr	r3, [r3, #32]
 800895a:	091b      	lsrs	r3, r3, #4
 800895c:	f003 0307 	and.w	r3, r3, #7
 8008960:	4904      	ldr	r1, [pc, #16]	; (8008974 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008962:	5ccb      	ldrb	r3, [r1, r3]
 8008964:	f003 031f 	and.w	r3, r3, #31
 8008968:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800896c:	4618      	mov	r0, r3
 800896e:	bd80      	pop	{r7, pc}
 8008970:	58024400 	.word	0x58024400
 8008974:	0800c250 	.word	0x0800c250

08008978 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008978:	b480      	push	{r7}
 800897a:	b089      	sub	sp, #36	; 0x24
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008980:	4ba1      	ldr	r3, [pc, #644]	; (8008c08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008984:	f003 0303 	and.w	r3, r3, #3
 8008988:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800898a:	4b9f      	ldr	r3, [pc, #636]	; (8008c08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800898c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800898e:	0b1b      	lsrs	r3, r3, #12
 8008990:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008994:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008996:	4b9c      	ldr	r3, [pc, #624]	; (8008c08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800899a:	091b      	lsrs	r3, r3, #4
 800899c:	f003 0301 	and.w	r3, r3, #1
 80089a0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80089a2:	4b99      	ldr	r3, [pc, #612]	; (8008c08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089a6:	08db      	lsrs	r3, r3, #3
 80089a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80089ac:	693a      	ldr	r2, [r7, #16]
 80089ae:	fb02 f303 	mul.w	r3, r2, r3
 80089b2:	ee07 3a90 	vmov	s15, r3
 80089b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089ba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	f000 8111 	beq.w	8008be8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80089c6:	69bb      	ldr	r3, [r7, #24]
 80089c8:	2b02      	cmp	r3, #2
 80089ca:	f000 8083 	beq.w	8008ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80089ce:	69bb      	ldr	r3, [r7, #24]
 80089d0:	2b02      	cmp	r3, #2
 80089d2:	f200 80a1 	bhi.w	8008b18 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80089d6:	69bb      	ldr	r3, [r7, #24]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d003      	beq.n	80089e4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80089dc:	69bb      	ldr	r3, [r7, #24]
 80089de:	2b01      	cmp	r3, #1
 80089e0:	d056      	beq.n	8008a90 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80089e2:	e099      	b.n	8008b18 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80089e4:	4b88      	ldr	r3, [pc, #544]	; (8008c08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f003 0320 	and.w	r3, r3, #32
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d02d      	beq.n	8008a4c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80089f0:	4b85      	ldr	r3, [pc, #532]	; (8008c08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	08db      	lsrs	r3, r3, #3
 80089f6:	f003 0303 	and.w	r3, r3, #3
 80089fa:	4a84      	ldr	r2, [pc, #528]	; (8008c0c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80089fc:	fa22 f303 	lsr.w	r3, r2, r3
 8008a00:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	ee07 3a90 	vmov	s15, r3
 8008a08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	ee07 3a90 	vmov	s15, r3
 8008a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a1a:	4b7b      	ldr	r3, [pc, #492]	; (8008c08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a22:	ee07 3a90 	vmov	s15, r3
 8008a26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a2e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008c10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a46:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008a4a:	e087      	b.n	8008b5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	ee07 3a90 	vmov	s15, r3
 8008a52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a56:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008c14 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008a5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a5e:	4b6a      	ldr	r3, [pc, #424]	; (8008c08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a66:	ee07 3a90 	vmov	s15, r3
 8008a6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a72:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008c10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a8e:	e065      	b.n	8008b5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	ee07 3a90 	vmov	s15, r3
 8008a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a9a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008c18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008a9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008aa2:	4b59      	ldr	r3, [pc, #356]	; (8008c08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008aaa:	ee07 3a90 	vmov	s15, r3
 8008aae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ab2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ab6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008c10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008aba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008abe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ac2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ac6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008aca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ace:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ad2:	e043      	b.n	8008b5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	ee07 3a90 	vmov	s15, r3
 8008ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ade:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008c1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008ae2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ae6:	4b48      	ldr	r3, [pc, #288]	; (8008c08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008aee:	ee07 3a90 	vmov	s15, r3
 8008af2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008af6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008afa:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008c10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008afe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b16:	e021      	b.n	8008b5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	ee07 3a90 	vmov	s15, r3
 8008b1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b22:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008c18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008b26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b2a:	4b37      	ldr	r3, [pc, #220]	; (8008c08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b32:	ee07 3a90 	vmov	s15, r3
 8008b36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b3e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008c10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008b42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b5a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008b5c:	4b2a      	ldr	r3, [pc, #168]	; (8008c08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b60:	0a5b      	lsrs	r3, r3, #9
 8008b62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b66:	ee07 3a90 	vmov	s15, r3
 8008b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008b72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b76:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b82:	ee17 2a90 	vmov	r2, s15
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008b8a:	4b1f      	ldr	r3, [pc, #124]	; (8008c08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b8e:	0c1b      	lsrs	r3, r3, #16
 8008b90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b94:	ee07 3a90 	vmov	s15, r3
 8008b98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ba0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ba4:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ba8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008bac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bb0:	ee17 2a90 	vmov	r2, s15
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008bb8:	4b13      	ldr	r3, [pc, #76]	; (8008c08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bbc:	0e1b      	lsrs	r3, r3, #24
 8008bbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bc2:	ee07 3a90 	vmov	s15, r3
 8008bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008bce:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008bd2:	edd7 6a07 	vldr	s13, [r7, #28]
 8008bd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008bda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bde:	ee17 2a90 	vmov	r2, s15
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008be6:	e008      	b.n	8008bfa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2200      	movs	r2, #0
 8008bec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	609a      	str	r2, [r3, #8]
}
 8008bfa:	bf00      	nop
 8008bfc:	3724      	adds	r7, #36	; 0x24
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c04:	4770      	bx	lr
 8008c06:	bf00      	nop
 8008c08:	58024400 	.word	0x58024400
 8008c0c:	03d09000 	.word	0x03d09000
 8008c10:	46000000 	.word	0x46000000
 8008c14:	4c742400 	.word	0x4c742400
 8008c18:	4a742400 	.word	0x4a742400
 8008c1c:	4bbebc20 	.word	0x4bbebc20

08008c20 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b089      	sub	sp, #36	; 0x24
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008c28:	4ba1      	ldr	r3, [pc, #644]	; (8008eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c2c:	f003 0303 	and.w	r3, r3, #3
 8008c30:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008c32:	4b9f      	ldr	r3, [pc, #636]	; (8008eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c36:	0d1b      	lsrs	r3, r3, #20
 8008c38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c3c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008c3e:	4b9c      	ldr	r3, [pc, #624]	; (8008eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c42:	0a1b      	lsrs	r3, r3, #8
 8008c44:	f003 0301 	and.w	r3, r3, #1
 8008c48:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008c4a:	4b99      	ldr	r3, [pc, #612]	; (8008eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c4e:	08db      	lsrs	r3, r3, #3
 8008c50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008c54:	693a      	ldr	r2, [r7, #16]
 8008c56:	fb02 f303 	mul.w	r3, r2, r3
 8008c5a:	ee07 3a90 	vmov	s15, r3
 8008c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c62:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	f000 8111 	beq.w	8008e90 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008c6e:	69bb      	ldr	r3, [r7, #24]
 8008c70:	2b02      	cmp	r3, #2
 8008c72:	f000 8083 	beq.w	8008d7c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008c76:	69bb      	ldr	r3, [r7, #24]
 8008c78:	2b02      	cmp	r3, #2
 8008c7a:	f200 80a1 	bhi.w	8008dc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008c7e:	69bb      	ldr	r3, [r7, #24]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d003      	beq.n	8008c8c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008c84:	69bb      	ldr	r3, [r7, #24]
 8008c86:	2b01      	cmp	r3, #1
 8008c88:	d056      	beq.n	8008d38 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008c8a:	e099      	b.n	8008dc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c8c:	4b88      	ldr	r3, [pc, #544]	; (8008eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f003 0320 	and.w	r3, r3, #32
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d02d      	beq.n	8008cf4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c98:	4b85      	ldr	r3, [pc, #532]	; (8008eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	08db      	lsrs	r3, r3, #3
 8008c9e:	f003 0303 	and.w	r3, r3, #3
 8008ca2:	4a84      	ldr	r2, [pc, #528]	; (8008eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008ca4:	fa22 f303 	lsr.w	r3, r2, r3
 8008ca8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	ee07 3a90 	vmov	s15, r3
 8008cb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	ee07 3a90 	vmov	s15, r3
 8008cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cc2:	4b7b      	ldr	r3, [pc, #492]	; (8008eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cca:	ee07 3a90 	vmov	s15, r3
 8008cce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cd6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008cda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ce2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ce6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008cf2:	e087      	b.n	8008e04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	ee07 3a90 	vmov	s15, r3
 8008cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cfe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008ebc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008d02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d06:	4b6a      	ldr	r3, [pc, #424]	; (8008eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d0e:	ee07 3a90 	vmov	s15, r3
 8008d12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d16:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d1a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008d1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d36:	e065      	b.n	8008e04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	ee07 3a90 	vmov	s15, r3
 8008d3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d42:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008d46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d4a:	4b59      	ldr	r3, [pc, #356]	; (8008eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d52:	ee07 3a90 	vmov	s15, r3
 8008d56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d5e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008d62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d7a:	e043      	b.n	8008e04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	ee07 3a90 	vmov	s15, r3
 8008d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d86:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008d8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d8e:	4b48      	ldr	r3, [pc, #288]	; (8008eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d96:	ee07 3a90 	vmov	s15, r3
 8008d9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008da2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008da6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008daa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008db2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008db6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008dbe:	e021      	b.n	8008e04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	ee07 3a90 	vmov	s15, r3
 8008dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dca:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008dce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dd2:	4b37      	ldr	r3, [pc, #220]	; (8008eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dda:	ee07 3a90 	vmov	s15, r3
 8008dde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008de2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008de6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008dea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008df2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008df6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e02:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008e04:	4b2a      	ldr	r3, [pc, #168]	; (8008eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e08:	0a5b      	lsrs	r3, r3, #9
 8008e0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e0e:	ee07 3a90 	vmov	s15, r3
 8008e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e2a:	ee17 2a90 	vmov	r2, s15
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008e32:	4b1f      	ldr	r3, [pc, #124]	; (8008eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e36:	0c1b      	lsrs	r3, r3, #16
 8008e38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e3c:	ee07 3a90 	vmov	s15, r3
 8008e40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e48:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e4c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e58:	ee17 2a90 	vmov	r2, s15
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008e60:	4b13      	ldr	r3, [pc, #76]	; (8008eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e64:	0e1b      	lsrs	r3, r3, #24
 8008e66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e6a:	ee07 3a90 	vmov	s15, r3
 8008e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e86:	ee17 2a90 	vmov	r2, s15
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008e8e:	e008      	b.n	8008ea2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2200      	movs	r2, #0
 8008e94:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2200      	movs	r2, #0
 8008e9a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	609a      	str	r2, [r3, #8]
}
 8008ea2:	bf00      	nop
 8008ea4:	3724      	adds	r7, #36	; 0x24
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eac:	4770      	bx	lr
 8008eae:	bf00      	nop
 8008eb0:	58024400 	.word	0x58024400
 8008eb4:	03d09000 	.word	0x03d09000
 8008eb8:	46000000 	.word	0x46000000
 8008ebc:	4c742400 	.word	0x4c742400
 8008ec0:	4a742400 	.word	0x4a742400
 8008ec4:	4bbebc20 	.word	0x4bbebc20

08008ec8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b089      	sub	sp, #36	; 0x24
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008ed0:	4ba0      	ldr	r3, [pc, #640]	; (8009154 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ed4:	f003 0303 	and.w	r3, r3, #3
 8008ed8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008eda:	4b9e      	ldr	r3, [pc, #632]	; (8009154 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ede:	091b      	lsrs	r3, r3, #4
 8008ee0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ee4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008ee6:	4b9b      	ldr	r3, [pc, #620]	; (8009154 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eea:	f003 0301 	and.w	r3, r3, #1
 8008eee:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008ef0:	4b98      	ldr	r3, [pc, #608]	; (8009154 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ef4:	08db      	lsrs	r3, r3, #3
 8008ef6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008efa:	693a      	ldr	r2, [r7, #16]
 8008efc:	fb02 f303 	mul.w	r3, r2, r3
 8008f00:	ee07 3a90 	vmov	s15, r3
 8008f04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f08:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008f0c:	697b      	ldr	r3, [r7, #20]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	f000 8111 	beq.w	8009136 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008f14:	69bb      	ldr	r3, [r7, #24]
 8008f16:	2b02      	cmp	r3, #2
 8008f18:	f000 8083 	beq.w	8009022 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008f1c:	69bb      	ldr	r3, [r7, #24]
 8008f1e:	2b02      	cmp	r3, #2
 8008f20:	f200 80a1 	bhi.w	8009066 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008f24:	69bb      	ldr	r3, [r7, #24]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d003      	beq.n	8008f32 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008f2a:	69bb      	ldr	r3, [r7, #24]
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	d056      	beq.n	8008fde <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008f30:	e099      	b.n	8009066 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f32:	4b88      	ldr	r3, [pc, #544]	; (8009154 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f003 0320 	and.w	r3, r3, #32
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d02d      	beq.n	8008f9a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008f3e:	4b85      	ldr	r3, [pc, #532]	; (8009154 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	08db      	lsrs	r3, r3, #3
 8008f44:	f003 0303 	and.w	r3, r3, #3
 8008f48:	4a83      	ldr	r2, [pc, #524]	; (8009158 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008f4a:	fa22 f303 	lsr.w	r3, r2, r3
 8008f4e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	ee07 3a90 	vmov	s15, r3
 8008f56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	ee07 3a90 	vmov	s15, r3
 8008f60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f68:	4b7a      	ldr	r3, [pc, #488]	; (8009154 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f70:	ee07 3a90 	vmov	s15, r3
 8008f74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f78:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f7c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800915c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008f80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f94:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008f98:	e087      	b.n	80090aa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	ee07 3a90 	vmov	s15, r3
 8008fa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fa4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009160 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008fa8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fac:	4b69      	ldr	r3, [pc, #420]	; (8009154 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fb4:	ee07 3a90 	vmov	s15, r3
 8008fb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fbc:	ed97 6a03 	vldr	s12, [r7, #12]
 8008fc0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800915c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008fc4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fc8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fcc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008fd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fd8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008fdc:	e065      	b.n	80090aa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	ee07 3a90 	vmov	s15, r3
 8008fe4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fe8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009164 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008fec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ff0:	4b58      	ldr	r3, [pc, #352]	; (8009154 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ff4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ff8:	ee07 3a90 	vmov	s15, r3
 8008ffc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009000:	ed97 6a03 	vldr	s12, [r7, #12]
 8009004:	eddf 5a55 	vldr	s11, [pc, #340]	; 800915c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009008:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800900c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009010:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009014:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009018:	ee67 7a27 	vmul.f32	s15, s14, s15
 800901c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009020:	e043      	b.n	80090aa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	ee07 3a90 	vmov	s15, r3
 8009028:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800902c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009168 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009030:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009034:	4b47      	ldr	r3, [pc, #284]	; (8009154 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009038:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800903c:	ee07 3a90 	vmov	s15, r3
 8009040:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009044:	ed97 6a03 	vldr	s12, [r7, #12]
 8009048:	eddf 5a44 	vldr	s11, [pc, #272]	; 800915c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800904c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009050:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009054:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009058:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800905c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009060:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009064:	e021      	b.n	80090aa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009066:	697b      	ldr	r3, [r7, #20]
 8009068:	ee07 3a90 	vmov	s15, r3
 800906c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009070:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009160 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009074:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009078:	4b36      	ldr	r3, [pc, #216]	; (8009154 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800907a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800907c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009080:	ee07 3a90 	vmov	s15, r3
 8009084:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009088:	ed97 6a03 	vldr	s12, [r7, #12]
 800908c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800915c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009090:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009094:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009098:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800909c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090a4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80090a8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80090aa:	4b2a      	ldr	r3, [pc, #168]	; (8009154 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80090ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ae:	0a5b      	lsrs	r3, r3, #9
 80090b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090b4:	ee07 3a90 	vmov	s15, r3
 80090b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80090c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80090c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80090c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80090d0:	ee17 2a90 	vmov	r2, s15
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80090d8:	4b1e      	ldr	r3, [pc, #120]	; (8009154 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80090da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090dc:	0c1b      	lsrs	r3, r3, #16
 80090de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090e2:	ee07 3a90 	vmov	s15, r3
 80090e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80090ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80090f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80090f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80090fe:	ee17 2a90 	vmov	r2, s15
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8009106:	4b13      	ldr	r3, [pc, #76]	; (8009154 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800910a:	0e1b      	lsrs	r3, r3, #24
 800910c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009110:	ee07 3a90 	vmov	s15, r3
 8009114:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009118:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800911c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009120:	edd7 6a07 	vldr	s13, [r7, #28]
 8009124:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009128:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800912c:	ee17 2a90 	vmov	r2, s15
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009134:	e008      	b.n	8009148 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2200      	movs	r2, #0
 800913a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2200      	movs	r2, #0
 8009140:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2200      	movs	r2, #0
 8009146:	609a      	str	r2, [r3, #8]
}
 8009148:	bf00      	nop
 800914a:	3724      	adds	r7, #36	; 0x24
 800914c:	46bd      	mov	sp, r7
 800914e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009152:	4770      	bx	lr
 8009154:	58024400 	.word	0x58024400
 8009158:	03d09000 	.word	0x03d09000
 800915c:	46000000 	.word	0x46000000
 8009160:	4c742400 	.word	0x4c742400
 8009164:	4a742400 	.word	0x4a742400
 8009168:	4bbebc20 	.word	0x4bbebc20

0800916c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b084      	sub	sp, #16
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
 8009174:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009176:	2300      	movs	r3, #0
 8009178:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800917a:	4b53      	ldr	r3, [pc, #332]	; (80092c8 <RCCEx_PLL2_Config+0x15c>)
 800917c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800917e:	f003 0303 	and.w	r3, r3, #3
 8009182:	2b03      	cmp	r3, #3
 8009184:	d101      	bne.n	800918a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009186:	2301      	movs	r3, #1
 8009188:	e099      	b.n	80092be <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800918a:	4b4f      	ldr	r3, [pc, #316]	; (80092c8 <RCCEx_PLL2_Config+0x15c>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	4a4e      	ldr	r2, [pc, #312]	; (80092c8 <RCCEx_PLL2_Config+0x15c>)
 8009190:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009194:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009196:	f7f9 fd05 	bl	8002ba4 <HAL_GetTick>
 800919a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800919c:	e008      	b.n	80091b0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800919e:	f7f9 fd01 	bl	8002ba4 <HAL_GetTick>
 80091a2:	4602      	mov	r2, r0
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	1ad3      	subs	r3, r2, r3
 80091a8:	2b02      	cmp	r3, #2
 80091aa:	d901      	bls.n	80091b0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80091ac:	2303      	movs	r3, #3
 80091ae:	e086      	b.n	80092be <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80091b0:	4b45      	ldr	r3, [pc, #276]	; (80092c8 <RCCEx_PLL2_Config+0x15c>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d1f0      	bne.n	800919e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80091bc:	4b42      	ldr	r3, [pc, #264]	; (80092c8 <RCCEx_PLL2_Config+0x15c>)
 80091be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091c0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	031b      	lsls	r3, r3, #12
 80091ca:	493f      	ldr	r1, [pc, #252]	; (80092c8 <RCCEx_PLL2_Config+0x15c>)
 80091cc:	4313      	orrs	r3, r2
 80091ce:	628b      	str	r3, [r1, #40]	; 0x28
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	685b      	ldr	r3, [r3, #4]
 80091d4:	3b01      	subs	r3, #1
 80091d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	689b      	ldr	r3, [r3, #8]
 80091de:	3b01      	subs	r3, #1
 80091e0:	025b      	lsls	r3, r3, #9
 80091e2:	b29b      	uxth	r3, r3
 80091e4:	431a      	orrs	r2, r3
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	68db      	ldr	r3, [r3, #12]
 80091ea:	3b01      	subs	r3, #1
 80091ec:	041b      	lsls	r3, r3, #16
 80091ee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80091f2:	431a      	orrs	r2, r3
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	691b      	ldr	r3, [r3, #16]
 80091f8:	3b01      	subs	r3, #1
 80091fa:	061b      	lsls	r3, r3, #24
 80091fc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009200:	4931      	ldr	r1, [pc, #196]	; (80092c8 <RCCEx_PLL2_Config+0x15c>)
 8009202:	4313      	orrs	r3, r2
 8009204:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009206:	4b30      	ldr	r3, [pc, #192]	; (80092c8 <RCCEx_PLL2_Config+0x15c>)
 8009208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800920a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	695b      	ldr	r3, [r3, #20]
 8009212:	492d      	ldr	r1, [pc, #180]	; (80092c8 <RCCEx_PLL2_Config+0x15c>)
 8009214:	4313      	orrs	r3, r2
 8009216:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009218:	4b2b      	ldr	r3, [pc, #172]	; (80092c8 <RCCEx_PLL2_Config+0x15c>)
 800921a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800921c:	f023 0220 	bic.w	r2, r3, #32
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	699b      	ldr	r3, [r3, #24]
 8009224:	4928      	ldr	r1, [pc, #160]	; (80092c8 <RCCEx_PLL2_Config+0x15c>)
 8009226:	4313      	orrs	r3, r2
 8009228:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800922a:	4b27      	ldr	r3, [pc, #156]	; (80092c8 <RCCEx_PLL2_Config+0x15c>)
 800922c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800922e:	4a26      	ldr	r2, [pc, #152]	; (80092c8 <RCCEx_PLL2_Config+0x15c>)
 8009230:	f023 0310 	bic.w	r3, r3, #16
 8009234:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009236:	4b24      	ldr	r3, [pc, #144]	; (80092c8 <RCCEx_PLL2_Config+0x15c>)
 8009238:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800923a:	4b24      	ldr	r3, [pc, #144]	; (80092cc <RCCEx_PLL2_Config+0x160>)
 800923c:	4013      	ands	r3, r2
 800923e:	687a      	ldr	r2, [r7, #4]
 8009240:	69d2      	ldr	r2, [r2, #28]
 8009242:	00d2      	lsls	r2, r2, #3
 8009244:	4920      	ldr	r1, [pc, #128]	; (80092c8 <RCCEx_PLL2_Config+0x15c>)
 8009246:	4313      	orrs	r3, r2
 8009248:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800924a:	4b1f      	ldr	r3, [pc, #124]	; (80092c8 <RCCEx_PLL2_Config+0x15c>)
 800924c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800924e:	4a1e      	ldr	r2, [pc, #120]	; (80092c8 <RCCEx_PLL2_Config+0x15c>)
 8009250:	f043 0310 	orr.w	r3, r3, #16
 8009254:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d106      	bne.n	800926a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800925c:	4b1a      	ldr	r3, [pc, #104]	; (80092c8 <RCCEx_PLL2_Config+0x15c>)
 800925e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009260:	4a19      	ldr	r2, [pc, #100]	; (80092c8 <RCCEx_PLL2_Config+0x15c>)
 8009262:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009266:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009268:	e00f      	b.n	800928a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	2b01      	cmp	r3, #1
 800926e:	d106      	bne.n	800927e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009270:	4b15      	ldr	r3, [pc, #84]	; (80092c8 <RCCEx_PLL2_Config+0x15c>)
 8009272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009274:	4a14      	ldr	r2, [pc, #80]	; (80092c8 <RCCEx_PLL2_Config+0x15c>)
 8009276:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800927a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800927c:	e005      	b.n	800928a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800927e:	4b12      	ldr	r3, [pc, #72]	; (80092c8 <RCCEx_PLL2_Config+0x15c>)
 8009280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009282:	4a11      	ldr	r2, [pc, #68]	; (80092c8 <RCCEx_PLL2_Config+0x15c>)
 8009284:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009288:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800928a:	4b0f      	ldr	r3, [pc, #60]	; (80092c8 <RCCEx_PLL2_Config+0x15c>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	4a0e      	ldr	r2, [pc, #56]	; (80092c8 <RCCEx_PLL2_Config+0x15c>)
 8009290:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009294:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009296:	f7f9 fc85 	bl	8002ba4 <HAL_GetTick>
 800929a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800929c:	e008      	b.n	80092b0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800929e:	f7f9 fc81 	bl	8002ba4 <HAL_GetTick>
 80092a2:	4602      	mov	r2, r0
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	1ad3      	subs	r3, r2, r3
 80092a8:	2b02      	cmp	r3, #2
 80092aa:	d901      	bls.n	80092b0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80092ac:	2303      	movs	r3, #3
 80092ae:	e006      	b.n	80092be <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80092b0:	4b05      	ldr	r3, [pc, #20]	; (80092c8 <RCCEx_PLL2_Config+0x15c>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d0f0      	beq.n	800929e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80092bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80092be:	4618      	mov	r0, r3
 80092c0:	3710      	adds	r7, #16
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}
 80092c6:	bf00      	nop
 80092c8:	58024400 	.word	0x58024400
 80092cc:	ffff0007 	.word	0xffff0007

080092d0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b084      	sub	sp, #16
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
 80092d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80092da:	2300      	movs	r3, #0
 80092dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80092de:	4b53      	ldr	r3, [pc, #332]	; (800942c <RCCEx_PLL3_Config+0x15c>)
 80092e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092e2:	f003 0303 	and.w	r3, r3, #3
 80092e6:	2b03      	cmp	r3, #3
 80092e8:	d101      	bne.n	80092ee <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80092ea:	2301      	movs	r3, #1
 80092ec:	e099      	b.n	8009422 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80092ee:	4b4f      	ldr	r3, [pc, #316]	; (800942c <RCCEx_PLL3_Config+0x15c>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	4a4e      	ldr	r2, [pc, #312]	; (800942c <RCCEx_PLL3_Config+0x15c>)
 80092f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80092f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80092fa:	f7f9 fc53 	bl	8002ba4 <HAL_GetTick>
 80092fe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009300:	e008      	b.n	8009314 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009302:	f7f9 fc4f 	bl	8002ba4 <HAL_GetTick>
 8009306:	4602      	mov	r2, r0
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	1ad3      	subs	r3, r2, r3
 800930c:	2b02      	cmp	r3, #2
 800930e:	d901      	bls.n	8009314 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009310:	2303      	movs	r3, #3
 8009312:	e086      	b.n	8009422 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009314:	4b45      	ldr	r3, [pc, #276]	; (800942c <RCCEx_PLL3_Config+0x15c>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800931c:	2b00      	cmp	r3, #0
 800931e:	d1f0      	bne.n	8009302 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009320:	4b42      	ldr	r3, [pc, #264]	; (800942c <RCCEx_PLL3_Config+0x15c>)
 8009322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009324:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	051b      	lsls	r3, r3, #20
 800932e:	493f      	ldr	r1, [pc, #252]	; (800942c <RCCEx_PLL3_Config+0x15c>)
 8009330:	4313      	orrs	r3, r2
 8009332:	628b      	str	r3, [r1, #40]	; 0x28
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	685b      	ldr	r3, [r3, #4]
 8009338:	3b01      	subs	r3, #1
 800933a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	689b      	ldr	r3, [r3, #8]
 8009342:	3b01      	subs	r3, #1
 8009344:	025b      	lsls	r3, r3, #9
 8009346:	b29b      	uxth	r3, r3
 8009348:	431a      	orrs	r2, r3
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	68db      	ldr	r3, [r3, #12]
 800934e:	3b01      	subs	r3, #1
 8009350:	041b      	lsls	r3, r3, #16
 8009352:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009356:	431a      	orrs	r2, r3
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	691b      	ldr	r3, [r3, #16]
 800935c:	3b01      	subs	r3, #1
 800935e:	061b      	lsls	r3, r3, #24
 8009360:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009364:	4931      	ldr	r1, [pc, #196]	; (800942c <RCCEx_PLL3_Config+0x15c>)
 8009366:	4313      	orrs	r3, r2
 8009368:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800936a:	4b30      	ldr	r3, [pc, #192]	; (800942c <RCCEx_PLL3_Config+0x15c>)
 800936c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800936e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	695b      	ldr	r3, [r3, #20]
 8009376:	492d      	ldr	r1, [pc, #180]	; (800942c <RCCEx_PLL3_Config+0x15c>)
 8009378:	4313      	orrs	r3, r2
 800937a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800937c:	4b2b      	ldr	r3, [pc, #172]	; (800942c <RCCEx_PLL3_Config+0x15c>)
 800937e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009380:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	699b      	ldr	r3, [r3, #24]
 8009388:	4928      	ldr	r1, [pc, #160]	; (800942c <RCCEx_PLL3_Config+0x15c>)
 800938a:	4313      	orrs	r3, r2
 800938c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800938e:	4b27      	ldr	r3, [pc, #156]	; (800942c <RCCEx_PLL3_Config+0x15c>)
 8009390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009392:	4a26      	ldr	r2, [pc, #152]	; (800942c <RCCEx_PLL3_Config+0x15c>)
 8009394:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009398:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800939a:	4b24      	ldr	r3, [pc, #144]	; (800942c <RCCEx_PLL3_Config+0x15c>)
 800939c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800939e:	4b24      	ldr	r3, [pc, #144]	; (8009430 <RCCEx_PLL3_Config+0x160>)
 80093a0:	4013      	ands	r3, r2
 80093a2:	687a      	ldr	r2, [r7, #4]
 80093a4:	69d2      	ldr	r2, [r2, #28]
 80093a6:	00d2      	lsls	r2, r2, #3
 80093a8:	4920      	ldr	r1, [pc, #128]	; (800942c <RCCEx_PLL3_Config+0x15c>)
 80093aa:	4313      	orrs	r3, r2
 80093ac:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80093ae:	4b1f      	ldr	r3, [pc, #124]	; (800942c <RCCEx_PLL3_Config+0x15c>)
 80093b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093b2:	4a1e      	ldr	r2, [pc, #120]	; (800942c <RCCEx_PLL3_Config+0x15c>)
 80093b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80093b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d106      	bne.n	80093ce <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80093c0:	4b1a      	ldr	r3, [pc, #104]	; (800942c <RCCEx_PLL3_Config+0x15c>)
 80093c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093c4:	4a19      	ldr	r2, [pc, #100]	; (800942c <RCCEx_PLL3_Config+0x15c>)
 80093c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80093ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80093cc:	e00f      	b.n	80093ee <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	2b01      	cmp	r3, #1
 80093d2:	d106      	bne.n	80093e2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80093d4:	4b15      	ldr	r3, [pc, #84]	; (800942c <RCCEx_PLL3_Config+0x15c>)
 80093d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093d8:	4a14      	ldr	r2, [pc, #80]	; (800942c <RCCEx_PLL3_Config+0x15c>)
 80093da:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80093de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80093e0:	e005      	b.n	80093ee <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80093e2:	4b12      	ldr	r3, [pc, #72]	; (800942c <RCCEx_PLL3_Config+0x15c>)
 80093e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093e6:	4a11      	ldr	r2, [pc, #68]	; (800942c <RCCEx_PLL3_Config+0x15c>)
 80093e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80093ec:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80093ee:	4b0f      	ldr	r3, [pc, #60]	; (800942c <RCCEx_PLL3_Config+0x15c>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	4a0e      	ldr	r2, [pc, #56]	; (800942c <RCCEx_PLL3_Config+0x15c>)
 80093f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80093f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80093fa:	f7f9 fbd3 	bl	8002ba4 <HAL_GetTick>
 80093fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009400:	e008      	b.n	8009414 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009402:	f7f9 fbcf 	bl	8002ba4 <HAL_GetTick>
 8009406:	4602      	mov	r2, r0
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	1ad3      	subs	r3, r2, r3
 800940c:	2b02      	cmp	r3, #2
 800940e:	d901      	bls.n	8009414 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009410:	2303      	movs	r3, #3
 8009412:	e006      	b.n	8009422 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009414:	4b05      	ldr	r3, [pc, #20]	; (800942c <RCCEx_PLL3_Config+0x15c>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800941c:	2b00      	cmp	r3, #0
 800941e:	d0f0      	beq.n	8009402 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009420:	7bfb      	ldrb	r3, [r7, #15]
}
 8009422:	4618      	mov	r0, r3
 8009424:	3710      	adds	r7, #16
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}
 800942a:	bf00      	nop
 800942c:	58024400 	.word	0x58024400
 8009430:	ffff0007 	.word	0xffff0007

08009434 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b084      	sub	sp, #16
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800943c:	2301      	movs	r3, #1
 800943e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d071      	beq.n	800952a <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800944c:	b2db      	uxtb	r3, r3
 800944e:	2b00      	cmp	r3, #0
 8009450:	d106      	bne.n	8009460 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2200      	movs	r2, #0
 8009456:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f7f8 fed2 	bl	8002204 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2202      	movs	r2, #2
 8009464:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	68db      	ldr	r3, [r3, #12]
 800946e:	f003 0310 	and.w	r3, r3, #16
 8009472:	2b10      	cmp	r3, #16
 8009474:	d050      	beq.n	8009518 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	22ca      	movs	r2, #202	; 0xca
 800947c:	625a      	str	r2, [r3, #36]	; 0x24
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	2253      	movs	r2, #83	; 0x53
 8009484:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f000 f87a 	bl	8009580 <RTC_EnterInitMode>
 800948c:	4603      	mov	r3, r0
 800948e:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8009490:	7bfb      	ldrb	r3, [r7, #15]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d124      	bne.n	80094e0 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	6899      	ldr	r1, [r3, #8]
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681a      	ldr	r2, [r3, #0]
 80094a0:	4b24      	ldr	r3, [pc, #144]	; (8009534 <HAL_RTC_Init+0x100>)
 80094a2:	400b      	ands	r3, r1
 80094a4:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	6899      	ldr	r1, [r3, #8]
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	685a      	ldr	r2, [r3, #4]
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	691b      	ldr	r3, [r3, #16]
 80094b4:	431a      	orrs	r2, r3
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	699b      	ldr	r3, [r3, #24]
 80094ba:	431a      	orrs	r2, r3
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	430a      	orrs	r2, r1
 80094c2:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	689b      	ldr	r3, [r3, #8]
 80094c8:	0419      	lsls	r1, r3, #16
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	68da      	ldr	r2, [r3, #12]
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	430a      	orrs	r2, r1
 80094d4:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f000 f886 	bl	80095e8 <RTC_ExitInitMode>
 80094dc:	4603      	mov	r3, r0
 80094de:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 80094e0:	7bfb      	ldrb	r3, [r7, #15]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d113      	bne.n	800950e <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f022 0203 	bic.w	r2, r2, #3
 80094f4:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	69da      	ldr	r2, [r3, #28]
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	695b      	ldr	r3, [r3, #20]
 8009504:	431a      	orrs	r2, r3
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	430a      	orrs	r2, r1
 800950c:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	22ff      	movs	r2, #255	; 0xff
 8009514:	625a      	str	r2, [r3, #36]	; 0x24
 8009516:	e001      	b.n	800951c <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8009518:	2300      	movs	r3, #0
 800951a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800951c:	7bfb      	ldrb	r3, [r7, #15]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d103      	bne.n	800952a <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2201      	movs	r2, #1
 8009526:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800952a:	7bfb      	ldrb	r3, [r7, #15]
}
 800952c:	4618      	mov	r0, r3
 800952e:	3710      	adds	r7, #16
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}
 8009534:	ff8fffbf 	.word	0xff8fffbf

08009538 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b084      	sub	sp, #16
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	4a0d      	ldr	r2, [pc, #52]	; (800957c <HAL_RTC_WaitForSynchro+0x44>)
 8009546:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8009548:	f7f9 fb2c 	bl	8002ba4 <HAL_GetTick>
 800954c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800954e:	e009      	b.n	8009564 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009550:	f7f9 fb28 	bl	8002ba4 <HAL_GetTick>
 8009554:	4602      	mov	r2, r0
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	1ad3      	subs	r3, r2, r3
 800955a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800955e:	d901      	bls.n	8009564 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8009560:	2303      	movs	r3, #3
 8009562:	e007      	b.n	8009574 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	68db      	ldr	r3, [r3, #12]
 800956a:	f003 0320 	and.w	r3, r3, #32
 800956e:	2b00      	cmp	r3, #0
 8009570:	d0ee      	beq.n	8009550 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 8009572:	2300      	movs	r3, #0
}
 8009574:	4618      	mov	r0, r3
 8009576:	3710      	adds	r7, #16
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}
 800957c:	0003ff5f 	.word	0x0003ff5f

08009580 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b084      	sub	sp, #16
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009588:	2300      	movs	r3, #0
 800958a:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	68db      	ldr	r3, [r3, #12]
 8009592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009596:	2b00      	cmp	r3, #0
 8009598:	d120      	bne.n	80095dc <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f04f 32ff 	mov.w	r2, #4294967295
 80095a2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80095a4:	f7f9 fafe 	bl	8002ba4 <HAL_GetTick>
 80095a8:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80095aa:	e00d      	b.n	80095c8 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80095ac:	f7f9 fafa 	bl	8002ba4 <HAL_GetTick>
 80095b0:	4602      	mov	r2, r0
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	1ad3      	subs	r3, r2, r3
 80095b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80095ba:	d905      	bls.n	80095c8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80095bc:	2303      	movs	r3, #3
 80095be:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2203      	movs	r2, #3
 80095c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	68db      	ldr	r3, [r3, #12]
 80095ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d102      	bne.n	80095dc <RTC_EnterInitMode+0x5c>
 80095d6:	7bfb      	ldrb	r3, [r7, #15]
 80095d8:	2b03      	cmp	r3, #3
 80095da:	d1e7      	bne.n	80095ac <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80095dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80095de:	4618      	mov	r0, r3
 80095e0:	3710      	adds	r7, #16
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}
	...

080095e8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b084      	sub	sp, #16
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80095f0:	2300      	movs	r3, #0
 80095f2:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 80095f4:	4b1a      	ldr	r3, [pc, #104]	; (8009660 <RTC_ExitInitMode+0x78>)
 80095f6:	68db      	ldr	r3, [r3, #12]
 80095f8:	4a19      	ldr	r2, [pc, #100]	; (8009660 <RTC_ExitInitMode+0x78>)
 80095fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095fe:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8009600:	4b17      	ldr	r3, [pc, #92]	; (8009660 <RTC_ExitInitMode+0x78>)
 8009602:	689b      	ldr	r3, [r3, #8]
 8009604:	f003 0320 	and.w	r3, r3, #32
 8009608:	2b00      	cmp	r3, #0
 800960a:	d10c      	bne.n	8009626 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	f7ff ff93 	bl	8009538 <HAL_RTC_WaitForSynchro>
 8009612:	4603      	mov	r3, r0
 8009614:	2b00      	cmp	r3, #0
 8009616:	d01e      	beq.n	8009656 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2203      	movs	r2, #3
 800961c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8009620:	2303      	movs	r3, #3
 8009622:	73fb      	strb	r3, [r7, #15]
 8009624:	e017      	b.n	8009656 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009626:	4b0e      	ldr	r3, [pc, #56]	; (8009660 <RTC_ExitInitMode+0x78>)
 8009628:	689b      	ldr	r3, [r3, #8]
 800962a:	4a0d      	ldr	r2, [pc, #52]	; (8009660 <RTC_ExitInitMode+0x78>)
 800962c:	f023 0320 	bic.w	r3, r3, #32
 8009630:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	f7ff ff80 	bl	8009538 <HAL_RTC_WaitForSynchro>
 8009638:	4603      	mov	r3, r0
 800963a:	2b00      	cmp	r3, #0
 800963c:	d005      	beq.n	800964a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2203      	movs	r2, #3
 8009642:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8009646:	2303      	movs	r3, #3
 8009648:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800964a:	4b05      	ldr	r3, [pc, #20]	; (8009660 <RTC_ExitInitMode+0x78>)
 800964c:	689b      	ldr	r3, [r3, #8]
 800964e:	4a04      	ldr	r2, [pc, #16]	; (8009660 <RTC_ExitInitMode+0x78>)
 8009650:	f043 0320 	orr.w	r3, r3, #32
 8009654:	6093      	str	r3, [r2, #8]
  }

  return status;
 8009656:	7bfb      	ldrb	r3, [r7, #15]
}
 8009658:	4618      	mov	r0, r3
 800965a:	3710      	adds	r7, #16
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}
 8009660:	58004000 	.word	0x58004000

08009664 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b08a      	sub	sp, #40	; 0x28
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d101      	bne.n	8009676 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8009672:	2301      	movs	r3, #1
 8009674:	e28e      	b.n	8009b94 <HAL_SAI_Init+0x530>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8009676:	f7f9 fac5 	bl	8002c04 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009680:	2b01      	cmp	r3, #1
 8009682:	d113      	bne.n	80096ac <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	4a96      	ldr	r2, [pc, #600]	; (80098e4 <HAL_SAI_Init+0x280>)
 800968a:	4293      	cmp	r3, r2
 800968c:	d004      	beq.n	8009698 <HAL_SAI_Init+0x34>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	4a95      	ldr	r2, [pc, #596]	; (80098e8 <HAL_SAI_Init+0x284>)
 8009694:	4293      	cmp	r3, r2
 8009696:	d107      	bne.n	80096a8 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800969c:	2b01      	cmp	r3, #1
 800969e:	d103      	bne.n	80096a8 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d001      	beq.n	80096ac <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 80096a8:	2301      	movs	r3, #1
 80096aa:	e273      	b.n	8009b94 <HAL_SAI_Init+0x530>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	4a8c      	ldr	r2, [pc, #560]	; (80098e4 <HAL_SAI_Init+0x280>)
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d004      	beq.n	80096c0 <HAL_SAI_Init+0x5c>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	4a8c      	ldr	r2, [pc, #560]	; (80098ec <HAL_SAI_Init+0x288>)
 80096bc:	4293      	cmp	r3, r2
 80096be:	d102      	bne.n	80096c6 <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 80096c0:	4b8b      	ldr	r3, [pc, #556]	; (80098f0 <HAL_SAI_Init+0x28c>)
 80096c2:	61bb      	str	r3, [r7, #24]
 80096c4:	e028      	b.n	8009718 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	4a8a      	ldr	r2, [pc, #552]	; (80098f4 <HAL_SAI_Init+0x290>)
 80096cc:	4293      	cmp	r3, r2
 80096ce:	d004      	beq.n	80096da <HAL_SAI_Init+0x76>
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	4a88      	ldr	r2, [pc, #544]	; (80098f8 <HAL_SAI_Init+0x294>)
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d102      	bne.n	80096e0 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 80096da:	4b88      	ldr	r3, [pc, #544]	; (80098fc <HAL_SAI_Init+0x298>)
 80096dc:	61bb      	str	r3, [r7, #24]
 80096de:	e01b      	b.n	8009718 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	4a86      	ldr	r2, [pc, #536]	; (8009900 <HAL_SAI_Init+0x29c>)
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d004      	beq.n	80096f4 <HAL_SAI_Init+0x90>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	4a85      	ldr	r2, [pc, #532]	; (8009904 <HAL_SAI_Init+0x2a0>)
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d102      	bne.n	80096fa <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 80096f4:	4b84      	ldr	r3, [pc, #528]	; (8009908 <HAL_SAI_Init+0x2a4>)
 80096f6:	61bb      	str	r3, [r7, #24]
 80096f8:	e00e      	b.n	8009718 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	4a7a      	ldr	r2, [pc, #488]	; (80098e8 <HAL_SAI_Init+0x284>)
 8009700:	4293      	cmp	r3, r2
 8009702:	d004      	beq.n	800970e <HAL_SAI_Init+0xaa>
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	4a80      	ldr	r2, [pc, #512]	; (800990c <HAL_SAI_Init+0x2a8>)
 800970a:	4293      	cmp	r3, r2
 800970c:	d102      	bne.n	8009714 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 800970e:	4b80      	ldr	r3, [pc, #512]	; (8009910 <HAL_SAI_Init+0x2ac>)
 8009710:	61bb      	str	r3, [r7, #24]
 8009712:	e001      	b.n	8009718 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8009714:	2301      	movs	r3, #1
 8009716:	e23d      	b.n	8009b94 <HAL_SAI_Init+0x530>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800971e:	b2db      	uxtb	r3, r3
 8009720:	2b00      	cmp	r3, #0
 8009722:	d106      	bne.n	8009732 <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2200      	movs	r2, #0
 8009728:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f7f9 f833 	bl	8002798 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f000 fa40 	bl	8009bb8 <SAI_Disable>
 8009738:	4603      	mov	r3, r0
 800973a:	2b00      	cmp	r3, #0
 800973c:	d001      	beq.n	8009742 <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 800973e:	2301      	movs	r3, #1
 8009740:	e228      	b.n	8009b94 <HAL_SAI_Init+0x530>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2202      	movs	r2, #2
 8009746:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	68db      	ldr	r3, [r3, #12]
 800974e:	2b02      	cmp	r3, #2
 8009750:	d00c      	beq.n	800976c <HAL_SAI_Init+0x108>
 8009752:	2b02      	cmp	r3, #2
 8009754:	d80d      	bhi.n	8009772 <HAL_SAI_Init+0x10e>
 8009756:	2b00      	cmp	r3, #0
 8009758:	d002      	beq.n	8009760 <HAL_SAI_Init+0xfc>
 800975a:	2b01      	cmp	r3, #1
 800975c:	d003      	beq.n	8009766 <HAL_SAI_Init+0x102>
 800975e:	e008      	b.n	8009772 <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8009760:	2300      	movs	r3, #0
 8009762:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009764:	e008      	b.n	8009778 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8009766:	2310      	movs	r3, #16
 8009768:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800976a:	e005      	b.n	8009778 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800976c:	2320      	movs	r3, #32
 800976e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009770:	e002      	b.n	8009778 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 8009772:	2300      	movs	r3, #0
 8009774:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009776:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	689b      	ldr	r3, [r3, #8]
 800977c:	2b05      	cmp	r3, #5
 800977e:	d832      	bhi.n	80097e6 <HAL_SAI_Init+0x182>
 8009780:	a201      	add	r2, pc, #4	; (adr r2, 8009788 <HAL_SAI_Init+0x124>)
 8009782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009786:	bf00      	nop
 8009788:	080097a1 	.word	0x080097a1
 800978c:	080097a7 	.word	0x080097a7
 8009790:	080097af 	.word	0x080097af
 8009794:	080097b7 	.word	0x080097b7
 8009798:	080097c7 	.word	0x080097c7
 800979c:	080097d7 	.word	0x080097d7
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 80097a0:	2300      	movs	r3, #0
 80097a2:	61fb      	str	r3, [r7, #28]
      break;
 80097a4:	e022      	b.n	80097ec <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80097a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80097aa:	61fb      	str	r3, [r7, #28]
      break;
 80097ac:	e01e      	b.n	80097ec <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80097ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80097b2:	61fb      	str	r3, [r7, #28]
      break;
 80097b4:	e01a      	b.n	80097ec <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80097b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80097ba:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80097bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097be:	f043 0301 	orr.w	r3, r3, #1
 80097c2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80097c4:	e012      	b.n	80097ec <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80097c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80097ca:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 80097cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ce:	f043 0302 	orr.w	r3, r3, #2
 80097d2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80097d4:	e00a      	b.n	80097ec <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80097d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80097da:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 80097dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097de:	f043 0303 	orr.w	r3, r3, #3
 80097e2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80097e4:	e002      	b.n	80097ec <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 80097e6:	2300      	movs	r3, #0
 80097e8:	61fb      	str	r3, [r7, #28]
      break;
 80097ea:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 80097ec:	69bb      	ldr	r3, [r7, #24]
 80097ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097f0:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6a1b      	ldr	r3, [r3, #32]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	f000 80c5 	beq.w	8009986 <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 80097fc:	2300      	movs	r3, #0
 80097fe:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	4a37      	ldr	r2, [pc, #220]	; (80098e4 <HAL_SAI_Init+0x280>)
 8009806:	4293      	cmp	r3, r2
 8009808:	d004      	beq.n	8009814 <HAL_SAI_Init+0x1b0>
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	4a37      	ldr	r2, [pc, #220]	; (80098ec <HAL_SAI_Init+0x288>)
 8009810:	4293      	cmp	r3, r2
 8009812:	d106      	bne.n	8009822 <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8009814:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009818:	f04f 0100 	mov.w	r1, #0
 800981c:	f7fe fb16 	bl	8007e4c <HAL_RCCEx_GetPeriphCLKFreq>
 8009820:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	4a33      	ldr	r2, [pc, #204]	; (80098f4 <HAL_SAI_Init+0x290>)
 8009828:	4293      	cmp	r3, r2
 800982a:	d004      	beq.n	8009836 <HAL_SAI_Init+0x1d2>
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	4a31      	ldr	r2, [pc, #196]	; (80098f8 <HAL_SAI_Init+0x294>)
 8009832:	4293      	cmp	r3, r2
 8009834:	d106      	bne.n	8009844 <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8009836:	f44f 7000 	mov.w	r0, #512	; 0x200
 800983a:	f04f 0100 	mov.w	r1, #0
 800983e:	f7fe fb05 	bl	8007e4c <HAL_RCCEx_GetPeriphCLKFreq>
 8009842:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	4a2d      	ldr	r2, [pc, #180]	; (8009900 <HAL_SAI_Init+0x29c>)
 800984a:	4293      	cmp	r3, r2
 800984c:	d004      	beq.n	8009858 <HAL_SAI_Init+0x1f4>
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	4a2c      	ldr	r2, [pc, #176]	; (8009904 <HAL_SAI_Init+0x2a0>)
 8009854:	4293      	cmp	r3, r2
 8009856:	d106      	bne.n	8009866 <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8009858:	f44f 7000 	mov.w	r0, #512	; 0x200
 800985c:	f04f 0100 	mov.w	r1, #0
 8009860:	f7fe faf4 	bl	8007e4c <HAL_RCCEx_GetPeriphCLKFreq>
 8009864:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	4a1f      	ldr	r2, [pc, #124]	; (80098e8 <HAL_SAI_Init+0x284>)
 800986c:	4293      	cmp	r3, r2
 800986e:	d106      	bne.n	800987e <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8009870:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8009874:	f04f 0100 	mov.w	r1, #0
 8009878:	f7fe fae8 	bl	8007e4c <HAL_RCCEx_GetPeriphCLKFreq>
 800987c:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	4a22      	ldr	r2, [pc, #136]	; (800990c <HAL_SAI_Init+0x2a8>)
 8009884:	4293      	cmp	r3, r2
 8009886:	d106      	bne.n	8009896 <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8009888:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800988c:	f04f 0100 	mov.w	r1, #0
 8009890:	f7fe fadc 	bl	8007e4c <HAL_RCCEx_GetPeriphCLKFreq>
 8009894:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	699b      	ldr	r3, [r3, #24]
 800989a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800989e:	d139      	bne.n	8009914 <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098a4:	2b04      	cmp	r3, #4
 80098a6:	d102      	bne.n	80098ae <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 80098a8:	2340      	movs	r3, #64	; 0x40
 80098aa:	60fb      	str	r3, [r7, #12]
 80098ac:	e00a      	b.n	80098c4 <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098b2:	2b08      	cmp	r3, #8
 80098b4:	d103      	bne.n	80098be <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 80098b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80098ba:	60fb      	str	r3, [r7, #12]
 80098bc:	e002      	b.n	80098c4 <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098c2:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 80098c4:	697a      	ldr	r2, [r7, #20]
 80098c6:	4613      	mov	r3, r2
 80098c8:	009b      	lsls	r3, r3, #2
 80098ca:	4413      	add	r3, r2
 80098cc:	005b      	lsls	r3, r3, #1
 80098ce:	4619      	mov	r1, r3
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6a1b      	ldr	r3, [r3, #32]
 80098d4:	68fa      	ldr	r2, [r7, #12]
 80098d6:	fb02 f303 	mul.w	r3, r2, r3
 80098da:	fbb1 f3f3 	udiv	r3, r1, r3
 80098de:	613b      	str	r3, [r7, #16]
 80098e0:	e030      	b.n	8009944 <HAL_SAI_Init+0x2e0>
 80098e2:	bf00      	nop
 80098e4:	40015804 	.word	0x40015804
 80098e8:	58005404 	.word	0x58005404
 80098ec:	40015824 	.word	0x40015824
 80098f0:	40015800 	.word	0x40015800
 80098f4:	40015c04 	.word	0x40015c04
 80098f8:	40015c24 	.word	0x40015c24
 80098fc:	40015c00 	.word	0x40015c00
 8009900:	40016004 	.word	0x40016004
 8009904:	40016024 	.word	0x40016024
 8009908:	40016000 	.word	0x40016000
 800990c:	58005424 	.word	0x58005424
 8009910:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009918:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800991c:	d101      	bne.n	8009922 <HAL_SAI_Init+0x2be>
 800991e:	2302      	movs	r3, #2
 8009920:	e000      	b.n	8009924 <HAL_SAI_Init+0x2c0>
 8009922:	2301      	movs	r3, #1
 8009924:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8009926:	697a      	ldr	r2, [r7, #20]
 8009928:	4613      	mov	r3, r2
 800992a:	009b      	lsls	r3, r3, #2
 800992c:	4413      	add	r3, r2
 800992e:	005b      	lsls	r3, r3, #1
 8009930:	4619      	mov	r1, r3
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6a1b      	ldr	r3, [r3, #32]
 8009936:	68ba      	ldr	r2, [r7, #8]
 8009938:	fb02 f303 	mul.w	r3, r2, r3
 800993c:	021b      	lsls	r3, r3, #8
 800993e:	fbb1 f3f3 	udiv	r3, r1, r3
 8009942:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	4a95      	ldr	r2, [pc, #596]	; (8009b9c <HAL_SAI_Init+0x538>)
 8009948:	fba2 2303 	umull	r2, r3, r2, r3
 800994c:	08da      	lsrs	r2, r3, #3
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8009952:	6939      	ldr	r1, [r7, #16]
 8009954:	4b91      	ldr	r3, [pc, #580]	; (8009b9c <HAL_SAI_Init+0x538>)
 8009956:	fba3 2301 	umull	r2, r3, r3, r1
 800995a:	08da      	lsrs	r2, r3, #3
 800995c:	4613      	mov	r3, r2
 800995e:	009b      	lsls	r3, r3, #2
 8009960:	4413      	add	r3, r2
 8009962:	005b      	lsls	r3, r3, #1
 8009964:	1aca      	subs	r2, r1, r3
 8009966:	2a08      	cmp	r2, #8
 8009968:	d904      	bls.n	8009974 <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800996e:	1c5a      	adds	r2, r3, #1
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009978:	2b04      	cmp	r3, #4
 800997a:	d104      	bne.n	8009986 <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009980:	085a      	lsrs	r2, r3, #1
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	685b      	ldr	r3, [r3, #4]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d003      	beq.n	8009996 <HAL_SAI_Init+0x332>
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	685b      	ldr	r3, [r3, #4]
 8009992:	2b02      	cmp	r3, #2
 8009994:	d109      	bne.n	80099aa <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800999a:	2b01      	cmp	r3, #1
 800999c:	d101      	bne.n	80099a2 <HAL_SAI_Init+0x33e>
 800999e:	2300      	movs	r3, #0
 80099a0:	e001      	b.n	80099a6 <HAL_SAI_Init+0x342>
 80099a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80099a6:	623b      	str	r3, [r7, #32]
 80099a8:	e008      	b.n	80099bc <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099ae:	2b01      	cmp	r3, #1
 80099b0:	d102      	bne.n	80099b8 <HAL_SAI_Init+0x354>
 80099b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80099b6:	e000      	b.n	80099ba <HAL_SAI_Init+0x356>
 80099b8:	2300      	movs	r3, #0
 80099ba:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 80099bc:	f7f9 f922 	bl	8002c04 <HAL_GetREVID>
 80099c0:	4603      	mov	r3, r0
 80099c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099c6:	d331      	bcc.n	8009a2c <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	6819      	ldr	r1, [r3, #0]
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681a      	ldr	r2, [r3, #0]
 80099d2:	4b73      	ldr	r3, [pc, #460]	; (8009ba0 <HAL_SAI_Init+0x53c>)
 80099d4:	400b      	ands	r3, r1
 80099d6:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	6819      	ldr	r1, [r3, #0]
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	685a      	ldr	r2, [r3, #4]
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099e6:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80099ec:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099f2:	431a      	orrs	r2, r3
 80099f4:	6a3b      	ldr	r3, [r7, #32]
 80099f6:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 80099f8:	69fb      	ldr	r3, [r7, #28]
 80099fa:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8009a00:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	695b      	ldr	r3, [r3, #20]
 8009a06:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009a0c:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a12:	051b      	lsls	r3, r3, #20
 8009a14:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009a1a:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	691b      	ldr	r3, [r3, #16]
 8009a20:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	430a      	orrs	r2, r1
 8009a28:	601a      	str	r2, [r3, #0]
 8009a2a:	e02d      	b.n	8009a88 <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	6819      	ldr	r1, [r3, #0]
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681a      	ldr	r2, [r3, #0]
 8009a36:	4b5b      	ldr	r3, [pc, #364]	; (8009ba4 <HAL_SAI_Init+0x540>)
 8009a38:	400b      	ands	r3, r1
 8009a3a:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	6819      	ldr	r1, [r3, #0]
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	685a      	ldr	r2, [r3, #4]
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a4a:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009a50:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a56:	431a      	orrs	r2, r3
 8009a58:	6a3b      	ldr	r3, [r7, #32]
 8009a5a:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8009a5c:	69fb      	ldr	r3, [r7, #28]
 8009a5e:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8009a64:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	695b      	ldr	r3, [r3, #20]
 8009a6a:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009a70:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a76:	051b      	lsls	r3, r3, #20
 8009a78:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009a7e:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	430a      	orrs	r2, r1
 8009a86:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	6859      	ldr	r1, [r3, #4]
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681a      	ldr	r2, [r3, #0]
 8009a92:	4b45      	ldr	r3, [pc, #276]	; (8009ba8 <HAL_SAI_Init+0x544>)
 8009a94:	400b      	ands	r3, r1
 8009a96:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	6859      	ldr	r1, [r3, #4]
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	69da      	ldr	r2, [r3, #28]
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aa6:	431a      	orrs	r2, r3
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009aac:	431a      	orrs	r2, r3
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	430a      	orrs	r2, r1
 8009ab4:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	6899      	ldr	r1, [r3, #8]
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681a      	ldr	r2, [r3, #0]
 8009ac0:	4b3a      	ldr	r3, [pc, #232]	; (8009bac <HAL_SAI_Init+0x548>)
 8009ac2:	400b      	ands	r3, r1
 8009ac4:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	6899      	ldr	r1, [r3, #8]
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ad0:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009ad6:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8009adc:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8009ae2:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ae8:	3b01      	subs	r3, #1
 8009aea:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8009aec:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	430a      	orrs	r2, r1
 8009af4:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	68d9      	ldr	r1, [r3, #12]
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681a      	ldr	r2, [r3, #0]
 8009b00:	f24f 0320 	movw	r3, #61472	; 0xf020
 8009b04:	400b      	ands	r3, r1
 8009b06:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	68d9      	ldr	r1, [r3, #12]
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b16:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b1c:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8009b1e:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b24:	3b01      	subs	r3, #1
 8009b26:	021b      	lsls	r3, r3, #8
 8009b28:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	430a      	orrs	r2, r1
 8009b30:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	4a1e      	ldr	r2, [pc, #120]	; (8009bb0 <HAL_SAI_Init+0x54c>)
 8009b38:	4293      	cmp	r3, r2
 8009b3a:	d004      	beq.n	8009b46 <HAL_SAI_Init+0x4e2>
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	4a1c      	ldr	r2, [pc, #112]	; (8009bb4 <HAL_SAI_Init+0x550>)
 8009b42:	4293      	cmp	r3, r2
 8009b44:	d119      	bne.n	8009b7a <HAL_SAI_Init+0x516>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8009b46:	69bb      	ldr	r3, [r7, #24]
 8009b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b4a:	f023 0201 	bic.w	r2, r3, #1
 8009b4e:	69bb      	ldr	r3, [r7, #24]
 8009b50:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009b58:	2b01      	cmp	r3, #1
 8009b5a:	d10e      	bne.n	8009b7a <HAL_SAI_Init+0x516>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b64:	3b01      	subs	r3, #1
 8009b66:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8009b68:	431a      	orrs	r2, r3
 8009b6a:	69bb      	ldr	r3, [r7, #24]
 8009b6c:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8009b6e:	69bb      	ldr	r3, [r7, #24]
 8009b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b72:	f043 0201 	orr.w	r2, r3, #1
 8009b76:	69bb      	ldr	r3, [r7, #24]
 8009b78:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2201      	movs	r2, #1
 8009b86:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8009b92:	2300      	movs	r3, #0
}
 8009b94:	4618      	mov	r0, r3
 8009b96:	3728      	adds	r7, #40	; 0x28
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}
 8009b9c:	cccccccd 	.word	0xcccccccd
 8009ba0:	f005c010 	.word	0xf005c010
 8009ba4:	f805c010 	.word	0xf805c010
 8009ba8:	ffff1ff0 	.word	0xffff1ff0
 8009bac:	fff88000 	.word	0xfff88000
 8009bb0:	40015804 	.word	0x40015804
 8009bb4:	58005404 	.word	0x58005404

08009bb8 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8009bb8:	b480      	push	{r7}
 8009bba:	b085      	sub	sp, #20
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8009bc0:	4b18      	ldr	r3, [pc, #96]	; (8009c24 <SAI_Disable+0x6c>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	4a18      	ldr	r2, [pc, #96]	; (8009c28 <SAI_Disable+0x70>)
 8009bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8009bca:	0b1b      	lsrs	r3, r3, #12
 8009bcc:	009b      	lsls	r3, r3, #2
 8009bce:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	681a      	ldr	r2, [r3, #0]
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009be2:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d10a      	bne.n	8009c00 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009bf0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 8009bfa:	2303      	movs	r3, #3
 8009bfc:	72fb      	strb	r3, [r7, #11]
      break;
 8009bfe:	e009      	b.n	8009c14 <SAI_Disable+0x5c>
    }
    count--;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	3b01      	subs	r3, #1
 8009c04:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d1e7      	bne.n	8009be4 <SAI_Disable+0x2c>

  return status;
 8009c14:	7afb      	ldrb	r3, [r7, #11]
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	3714      	adds	r7, #20
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c20:	4770      	bx	lr
 8009c22:	bf00      	nop
 8009c24:	24000028 	.word	0x24000028
 8009c28:	95cbec1b 	.word	0x95cbec1b

08009c2c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b082      	sub	sp, #8
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
 8009c34:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d101      	bne.n	8009c40 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	e02b      	b.n	8009c98 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009c46:	b2db      	uxtb	r3, r3
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d106      	bne.n	8009c5a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2200      	movs	r2, #0
 8009c50:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f7f8 fd95 	bl	8002784 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2202      	movs	r2, #2
 8009c5e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681a      	ldr	r2, [r3, #0]
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	3304      	adds	r3, #4
 8009c6a:	4619      	mov	r1, r3
 8009c6c:	4610      	mov	r0, r2
 8009c6e:	f001 fe41 	bl	800b8f4 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6818      	ldr	r0, [r3, #0]
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	685b      	ldr	r3, [r3, #4]
 8009c7a:	461a      	mov	r2, r3
 8009c7c:	6839      	ldr	r1, [r7, #0]
 8009c7e:	f001 fe95 	bl	800b9ac <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8009c82:	4b07      	ldr	r3, [pc, #28]	; (8009ca0 <HAL_SDRAM_Init+0x74>)
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	4a06      	ldr	r2, [pc, #24]	; (8009ca0 <HAL_SDRAM_Init+0x74>)
 8009c88:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009c8c:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2201      	movs	r2, #1
 8009c92:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009c96:	2300      	movs	r3, #0
}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	3708      	adds	r7, #8
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}
 8009ca0:	52004000 	.word	0x52004000

08009ca4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b084      	sub	sp, #16
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d101      	bne.n	8009cb6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	e10f      	b.n	8009ed6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	4a87      	ldr	r2, [pc, #540]	; (8009ee0 <HAL_SPI_Init+0x23c>)
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	d00f      	beq.n	8009ce6 <HAL_SPI_Init+0x42>
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	4a86      	ldr	r2, [pc, #536]	; (8009ee4 <HAL_SPI_Init+0x240>)
 8009ccc:	4293      	cmp	r3, r2
 8009cce:	d00a      	beq.n	8009ce6 <HAL_SPI_Init+0x42>
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	4a84      	ldr	r2, [pc, #528]	; (8009ee8 <HAL_SPI_Init+0x244>)
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	d005      	beq.n	8009ce6 <HAL_SPI_Init+0x42>
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	68db      	ldr	r3, [r3, #12]
 8009cde:	2b0f      	cmp	r3, #15
 8009ce0:	d901      	bls.n	8009ce6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	e0f7      	b.n	8009ed6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f000 f900 	bl	8009eec <SPI_GetPacketSize>
 8009cec:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	4a7b      	ldr	r2, [pc, #492]	; (8009ee0 <HAL_SPI_Init+0x23c>)
 8009cf4:	4293      	cmp	r3, r2
 8009cf6:	d00c      	beq.n	8009d12 <HAL_SPI_Init+0x6e>
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	4a79      	ldr	r2, [pc, #484]	; (8009ee4 <HAL_SPI_Init+0x240>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d007      	beq.n	8009d12 <HAL_SPI_Init+0x6e>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	4a78      	ldr	r2, [pc, #480]	; (8009ee8 <HAL_SPI_Init+0x244>)
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	d002      	beq.n	8009d12 <HAL_SPI_Init+0x6e>
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	2b08      	cmp	r3, #8
 8009d10:	d811      	bhi.n	8009d36 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009d16:	4a72      	ldr	r2, [pc, #456]	; (8009ee0 <HAL_SPI_Init+0x23c>)
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d009      	beq.n	8009d30 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	4a70      	ldr	r2, [pc, #448]	; (8009ee4 <HAL_SPI_Init+0x240>)
 8009d22:	4293      	cmp	r3, r2
 8009d24:	d004      	beq.n	8009d30 <HAL_SPI_Init+0x8c>
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	4a6f      	ldr	r2, [pc, #444]	; (8009ee8 <HAL_SPI_Init+0x244>)
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d104      	bne.n	8009d3a <HAL_SPI_Init+0x96>
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	2b10      	cmp	r3, #16
 8009d34:	d901      	bls.n	8009d3a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8009d36:	2301      	movs	r3, #1
 8009d38:	e0cd      	b.n	8009ed6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009d40:	b2db      	uxtb	r3, r3
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d106      	bne.n	8009d54 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2200      	movs	r2, #0
 8009d4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f7f8 fa8a 	bl	8002268 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2202      	movs	r2, #2
 8009d58:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	681a      	ldr	r2, [r3, #0]
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f022 0201 	bic.w	r2, r2, #1
 8009d6a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	689b      	ldr	r3, [r3, #8]
 8009d72:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8009d76:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	699b      	ldr	r3, [r3, #24]
 8009d7c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009d80:	d119      	bne.n	8009db6 <HAL_SPI_Init+0x112>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	685b      	ldr	r3, [r3, #4]
 8009d86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009d8a:	d103      	bne.n	8009d94 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d008      	beq.n	8009da6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d10c      	bne.n	8009db6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009da0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009da4:	d107      	bne.n	8009db6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	681a      	ldr	r2, [r3, #0]
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009db4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	685b      	ldr	r3, [r3, #4]
 8009dba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d00f      	beq.n	8009de2 <HAL_SPI_Init+0x13e>
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	68db      	ldr	r3, [r3, #12]
 8009dc6:	2b06      	cmp	r3, #6
 8009dc8:	d90b      	bls.n	8009de2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	430a      	orrs	r2, r1
 8009dde:	601a      	str	r2, [r3, #0]
 8009de0:	e007      	b.n	8009df2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	681a      	ldr	r2, [r3, #0]
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009df0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	69da      	ldr	r2, [r3, #28]
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dfa:	431a      	orrs	r2, r3
 8009dfc:	68bb      	ldr	r3, [r7, #8]
 8009dfe:	431a      	orrs	r2, r3
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e04:	ea42 0103 	orr.w	r1, r2, r3
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	68da      	ldr	r2, [r3, #12]
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	430a      	orrs	r2, r1
 8009e12:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e1c:	431a      	orrs	r2, r3
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e22:	431a      	orrs	r2, r3
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	699b      	ldr	r3, [r3, #24]
 8009e28:	431a      	orrs	r2, r3
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	691b      	ldr	r3, [r3, #16]
 8009e2e:	431a      	orrs	r2, r3
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	695b      	ldr	r3, [r3, #20]
 8009e34:	431a      	orrs	r2, r3
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	6a1b      	ldr	r3, [r3, #32]
 8009e3a:	431a      	orrs	r2, r3
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	685b      	ldr	r3, [r3, #4]
 8009e40:	431a      	orrs	r2, r3
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e46:	431a      	orrs	r2, r3
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	689b      	ldr	r3, [r3, #8]
 8009e4c:	431a      	orrs	r2, r3
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e52:	ea42 0103 	orr.w	r1, r2, r3
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	430a      	orrs	r2, r1
 8009e60:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	685b      	ldr	r3, [r3, #4]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d113      	bne.n	8009e92 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	689b      	ldr	r3, [r3, #8]
 8009e70:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009e7c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	689b      	ldr	r3, [r3, #8]
 8009e84:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009e90:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f022 0201 	bic.w	r2, r2, #1
 8009ea0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	685b      	ldr	r3, [r3, #4]
 8009ea6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d00a      	beq.n	8009ec4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	68db      	ldr	r3, [r3, #12]
 8009eb4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	430a      	orrs	r2, r1
 8009ec2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2201      	movs	r2, #1
 8009ed0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8009ed4:	2300      	movs	r3, #0
}
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	3710      	adds	r7, #16
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}
 8009ede:	bf00      	nop
 8009ee0:	40013000 	.word	0x40013000
 8009ee4:	40003800 	.word	0x40003800
 8009ee8:	40003c00 	.word	0x40003c00

08009eec <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8009eec:	b480      	push	{r7}
 8009eee:	b085      	sub	sp, #20
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ef8:	095b      	lsrs	r3, r3, #5
 8009efa:	3301      	adds	r3, #1
 8009efc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	68db      	ldr	r3, [r3, #12]
 8009f02:	3301      	adds	r3, #1
 8009f04:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009f06:	68bb      	ldr	r3, [r7, #8]
 8009f08:	3307      	adds	r3, #7
 8009f0a:	08db      	lsrs	r3, r3, #3
 8009f0c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	68fa      	ldr	r2, [r7, #12]
 8009f12:	fb02 f303 	mul.w	r3, r2, r3
}
 8009f16:	4618      	mov	r0, r3
 8009f18:	3714      	adds	r7, #20
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f20:	4770      	bx	lr

08009f22 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009f22:	b580      	push	{r7, lr}
 8009f24:	b082      	sub	sp, #8
 8009f26:	af00      	add	r7, sp, #0
 8009f28:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d101      	bne.n	8009f34 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009f30:	2301      	movs	r3, #1
 8009f32:	e049      	b.n	8009fc8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f3a:	b2db      	uxtb	r3, r3
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d106      	bne.n	8009f4e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2200      	movs	r2, #0
 8009f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f7f8 fa57 	bl	80023fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2202      	movs	r2, #2
 8009f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681a      	ldr	r2, [r3, #0]
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	3304      	adds	r3, #4
 8009f5e:	4619      	mov	r1, r3
 8009f60:	4610      	mov	r0, r2
 8009f62:	f000 f99d 	bl	800a2a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2201      	movs	r2, #1
 8009f6a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2201      	movs	r2, #1
 8009f72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2201      	movs	r2, #1
 8009f7a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2201      	movs	r2, #1
 8009f82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2201      	movs	r2, #1
 8009f8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2201      	movs	r2, #1
 8009f92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2201      	movs	r2, #1
 8009f9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2201      	movs	r2, #1
 8009fa2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2201      	movs	r2, #1
 8009faa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2201      	movs	r2, #1
 8009fb2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2201      	movs	r2, #1
 8009fba:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2201      	movs	r2, #1
 8009fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009fc6:	2300      	movs	r3, #0
}
 8009fc8:	4618      	mov	r0, r3
 8009fca:	3708      	adds	r7, #8
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bd80      	pop	{r7, pc}

08009fd0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009fd0:	b480      	push	{r7}
 8009fd2:	b085      	sub	sp, #20
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fde:	b2db      	uxtb	r3, r3
 8009fe0:	2b01      	cmp	r3, #1
 8009fe2:	d001      	beq.n	8009fe8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	e04c      	b.n	800a082 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2202      	movs	r2, #2
 8009fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	4a26      	ldr	r2, [pc, #152]	; (800a090 <HAL_TIM_Base_Start+0xc0>)
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	d022      	beq.n	800a040 <HAL_TIM_Base_Start+0x70>
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a002:	d01d      	beq.n	800a040 <HAL_TIM_Base_Start+0x70>
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	4a22      	ldr	r2, [pc, #136]	; (800a094 <HAL_TIM_Base_Start+0xc4>)
 800a00a:	4293      	cmp	r3, r2
 800a00c:	d018      	beq.n	800a040 <HAL_TIM_Base_Start+0x70>
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	4a21      	ldr	r2, [pc, #132]	; (800a098 <HAL_TIM_Base_Start+0xc8>)
 800a014:	4293      	cmp	r3, r2
 800a016:	d013      	beq.n	800a040 <HAL_TIM_Base_Start+0x70>
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	4a1f      	ldr	r2, [pc, #124]	; (800a09c <HAL_TIM_Base_Start+0xcc>)
 800a01e:	4293      	cmp	r3, r2
 800a020:	d00e      	beq.n	800a040 <HAL_TIM_Base_Start+0x70>
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	4a1e      	ldr	r2, [pc, #120]	; (800a0a0 <HAL_TIM_Base_Start+0xd0>)
 800a028:	4293      	cmp	r3, r2
 800a02a:	d009      	beq.n	800a040 <HAL_TIM_Base_Start+0x70>
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	4a1c      	ldr	r2, [pc, #112]	; (800a0a4 <HAL_TIM_Base_Start+0xd4>)
 800a032:	4293      	cmp	r3, r2
 800a034:	d004      	beq.n	800a040 <HAL_TIM_Base_Start+0x70>
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	4a1b      	ldr	r2, [pc, #108]	; (800a0a8 <HAL_TIM_Base_Start+0xd8>)
 800a03c:	4293      	cmp	r3, r2
 800a03e:	d115      	bne.n	800a06c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	689a      	ldr	r2, [r3, #8]
 800a046:	4b19      	ldr	r3, [pc, #100]	; (800a0ac <HAL_TIM_Base_Start+0xdc>)
 800a048:	4013      	ands	r3, r2
 800a04a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	2b06      	cmp	r3, #6
 800a050:	d015      	beq.n	800a07e <HAL_TIM_Base_Start+0xae>
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a058:	d011      	beq.n	800a07e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	681a      	ldr	r2, [r3, #0]
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	f042 0201 	orr.w	r2, r2, #1
 800a068:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a06a:	e008      	b.n	800a07e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	681a      	ldr	r2, [r3, #0]
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	f042 0201 	orr.w	r2, r2, #1
 800a07a:	601a      	str	r2, [r3, #0]
 800a07c:	e000      	b.n	800a080 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a07e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a080:	2300      	movs	r3, #0
}
 800a082:	4618      	mov	r0, r3
 800a084:	3714      	adds	r7, #20
 800a086:	46bd      	mov	sp, r7
 800a088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08c:	4770      	bx	lr
 800a08e:	bf00      	nop
 800a090:	40010000 	.word	0x40010000
 800a094:	40000400 	.word	0x40000400
 800a098:	40000800 	.word	0x40000800
 800a09c:	40000c00 	.word	0x40000c00
 800a0a0:	40010400 	.word	0x40010400
 800a0a4:	40001800 	.word	0x40001800
 800a0a8:	40014000 	.word	0x40014000
 800a0ac:	00010007 	.word	0x00010007

0800a0b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b084      	sub	sp, #16
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
 800a0b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a0c4:	2b01      	cmp	r3, #1
 800a0c6:	d101      	bne.n	800a0cc <HAL_TIM_ConfigClockSource+0x1c>
 800a0c8:	2302      	movs	r3, #2
 800a0ca:	e0dc      	b.n	800a286 <HAL_TIM_ConfigClockSource+0x1d6>
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2201      	movs	r2, #1
 800a0d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2202      	movs	r2, #2
 800a0d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	689b      	ldr	r3, [r3, #8]
 800a0e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a0e4:	68ba      	ldr	r2, [r7, #8]
 800a0e6:	4b6a      	ldr	r3, [pc, #424]	; (800a290 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a0e8:	4013      	ands	r3, r2
 800a0ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a0f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	68ba      	ldr	r2, [r7, #8]
 800a0fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	4a64      	ldr	r2, [pc, #400]	; (800a294 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a102:	4293      	cmp	r3, r2
 800a104:	f000 80a9 	beq.w	800a25a <HAL_TIM_ConfigClockSource+0x1aa>
 800a108:	4a62      	ldr	r2, [pc, #392]	; (800a294 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a10a:	4293      	cmp	r3, r2
 800a10c:	f200 80ae 	bhi.w	800a26c <HAL_TIM_ConfigClockSource+0x1bc>
 800a110:	4a61      	ldr	r2, [pc, #388]	; (800a298 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a112:	4293      	cmp	r3, r2
 800a114:	f000 80a1 	beq.w	800a25a <HAL_TIM_ConfigClockSource+0x1aa>
 800a118:	4a5f      	ldr	r2, [pc, #380]	; (800a298 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a11a:	4293      	cmp	r3, r2
 800a11c:	f200 80a6 	bhi.w	800a26c <HAL_TIM_ConfigClockSource+0x1bc>
 800a120:	4a5e      	ldr	r2, [pc, #376]	; (800a29c <HAL_TIM_ConfigClockSource+0x1ec>)
 800a122:	4293      	cmp	r3, r2
 800a124:	f000 8099 	beq.w	800a25a <HAL_TIM_ConfigClockSource+0x1aa>
 800a128:	4a5c      	ldr	r2, [pc, #368]	; (800a29c <HAL_TIM_ConfigClockSource+0x1ec>)
 800a12a:	4293      	cmp	r3, r2
 800a12c:	f200 809e 	bhi.w	800a26c <HAL_TIM_ConfigClockSource+0x1bc>
 800a130:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a134:	f000 8091 	beq.w	800a25a <HAL_TIM_ConfigClockSource+0x1aa>
 800a138:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a13c:	f200 8096 	bhi.w	800a26c <HAL_TIM_ConfigClockSource+0x1bc>
 800a140:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a144:	f000 8089 	beq.w	800a25a <HAL_TIM_ConfigClockSource+0x1aa>
 800a148:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a14c:	f200 808e 	bhi.w	800a26c <HAL_TIM_ConfigClockSource+0x1bc>
 800a150:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a154:	d03e      	beq.n	800a1d4 <HAL_TIM_ConfigClockSource+0x124>
 800a156:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a15a:	f200 8087 	bhi.w	800a26c <HAL_TIM_ConfigClockSource+0x1bc>
 800a15e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a162:	f000 8086 	beq.w	800a272 <HAL_TIM_ConfigClockSource+0x1c2>
 800a166:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a16a:	d87f      	bhi.n	800a26c <HAL_TIM_ConfigClockSource+0x1bc>
 800a16c:	2b70      	cmp	r3, #112	; 0x70
 800a16e:	d01a      	beq.n	800a1a6 <HAL_TIM_ConfigClockSource+0xf6>
 800a170:	2b70      	cmp	r3, #112	; 0x70
 800a172:	d87b      	bhi.n	800a26c <HAL_TIM_ConfigClockSource+0x1bc>
 800a174:	2b60      	cmp	r3, #96	; 0x60
 800a176:	d050      	beq.n	800a21a <HAL_TIM_ConfigClockSource+0x16a>
 800a178:	2b60      	cmp	r3, #96	; 0x60
 800a17a:	d877      	bhi.n	800a26c <HAL_TIM_ConfigClockSource+0x1bc>
 800a17c:	2b50      	cmp	r3, #80	; 0x50
 800a17e:	d03c      	beq.n	800a1fa <HAL_TIM_ConfigClockSource+0x14a>
 800a180:	2b50      	cmp	r3, #80	; 0x50
 800a182:	d873      	bhi.n	800a26c <HAL_TIM_ConfigClockSource+0x1bc>
 800a184:	2b40      	cmp	r3, #64	; 0x40
 800a186:	d058      	beq.n	800a23a <HAL_TIM_ConfigClockSource+0x18a>
 800a188:	2b40      	cmp	r3, #64	; 0x40
 800a18a:	d86f      	bhi.n	800a26c <HAL_TIM_ConfigClockSource+0x1bc>
 800a18c:	2b30      	cmp	r3, #48	; 0x30
 800a18e:	d064      	beq.n	800a25a <HAL_TIM_ConfigClockSource+0x1aa>
 800a190:	2b30      	cmp	r3, #48	; 0x30
 800a192:	d86b      	bhi.n	800a26c <HAL_TIM_ConfigClockSource+0x1bc>
 800a194:	2b20      	cmp	r3, #32
 800a196:	d060      	beq.n	800a25a <HAL_TIM_ConfigClockSource+0x1aa>
 800a198:	2b20      	cmp	r3, #32
 800a19a:	d867      	bhi.n	800a26c <HAL_TIM_ConfigClockSource+0x1bc>
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d05c      	beq.n	800a25a <HAL_TIM_ConfigClockSource+0x1aa>
 800a1a0:	2b10      	cmp	r3, #16
 800a1a2:	d05a      	beq.n	800a25a <HAL_TIM_ConfigClockSource+0x1aa>
 800a1a4:	e062      	b.n	800a26c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6818      	ldr	r0, [r3, #0]
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	6899      	ldr	r1, [r3, #8]
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	685a      	ldr	r2, [r3, #4]
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	68db      	ldr	r3, [r3, #12]
 800a1b6:	f000 f98b 	bl	800a4d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	689b      	ldr	r3, [r3, #8]
 800a1c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a1c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	68ba      	ldr	r2, [r7, #8]
 800a1d0:	609a      	str	r2, [r3, #8]
      break;
 800a1d2:	e04f      	b.n	800a274 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	6818      	ldr	r0, [r3, #0]
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	6899      	ldr	r1, [r3, #8]
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	685a      	ldr	r2, [r3, #4]
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	68db      	ldr	r3, [r3, #12]
 800a1e4:	f000 f974 	bl	800a4d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	689a      	ldr	r2, [r3, #8]
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a1f6:	609a      	str	r2, [r3, #8]
      break;
 800a1f8:	e03c      	b.n	800a274 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	6818      	ldr	r0, [r3, #0]
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	6859      	ldr	r1, [r3, #4]
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	68db      	ldr	r3, [r3, #12]
 800a206:	461a      	mov	r2, r3
 800a208:	f000 f8e4 	bl	800a3d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	2150      	movs	r1, #80	; 0x50
 800a212:	4618      	mov	r0, r3
 800a214:	f000 f93e 	bl	800a494 <TIM_ITRx_SetConfig>
      break;
 800a218:	e02c      	b.n	800a274 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6818      	ldr	r0, [r3, #0]
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	6859      	ldr	r1, [r3, #4]
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	68db      	ldr	r3, [r3, #12]
 800a226:	461a      	mov	r2, r3
 800a228:	f000 f903 	bl	800a432 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	2160      	movs	r1, #96	; 0x60
 800a232:	4618      	mov	r0, r3
 800a234:	f000 f92e 	bl	800a494 <TIM_ITRx_SetConfig>
      break;
 800a238:	e01c      	b.n	800a274 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	6818      	ldr	r0, [r3, #0]
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	6859      	ldr	r1, [r3, #4]
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	68db      	ldr	r3, [r3, #12]
 800a246:	461a      	mov	r2, r3
 800a248:	f000 f8c4 	bl	800a3d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	2140      	movs	r1, #64	; 0x40
 800a252:	4618      	mov	r0, r3
 800a254:	f000 f91e 	bl	800a494 <TIM_ITRx_SetConfig>
      break;
 800a258:	e00c      	b.n	800a274 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681a      	ldr	r2, [r3, #0]
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	4619      	mov	r1, r3
 800a264:	4610      	mov	r0, r2
 800a266:	f000 f915 	bl	800a494 <TIM_ITRx_SetConfig>
      break;
 800a26a:	e003      	b.n	800a274 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800a26c:	2301      	movs	r3, #1
 800a26e:	73fb      	strb	r3, [r7, #15]
      break;
 800a270:	e000      	b.n	800a274 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800a272:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2201      	movs	r2, #1
 800a278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2200      	movs	r2, #0
 800a280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a284:	7bfb      	ldrb	r3, [r7, #15]
}
 800a286:	4618      	mov	r0, r3
 800a288:	3710      	adds	r7, #16
 800a28a:	46bd      	mov	sp, r7
 800a28c:	bd80      	pop	{r7, pc}
 800a28e:	bf00      	nop
 800a290:	ffceff88 	.word	0xffceff88
 800a294:	00100040 	.word	0x00100040
 800a298:	00100030 	.word	0x00100030
 800a29c:	00100020 	.word	0x00100020

0800a2a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a2a0:	b480      	push	{r7}
 800a2a2:	b085      	sub	sp, #20
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
 800a2a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	4a40      	ldr	r2, [pc, #256]	; (800a3b4 <TIM_Base_SetConfig+0x114>)
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d013      	beq.n	800a2e0 <TIM_Base_SetConfig+0x40>
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2be:	d00f      	beq.n	800a2e0 <TIM_Base_SetConfig+0x40>
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	4a3d      	ldr	r2, [pc, #244]	; (800a3b8 <TIM_Base_SetConfig+0x118>)
 800a2c4:	4293      	cmp	r3, r2
 800a2c6:	d00b      	beq.n	800a2e0 <TIM_Base_SetConfig+0x40>
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	4a3c      	ldr	r2, [pc, #240]	; (800a3bc <TIM_Base_SetConfig+0x11c>)
 800a2cc:	4293      	cmp	r3, r2
 800a2ce:	d007      	beq.n	800a2e0 <TIM_Base_SetConfig+0x40>
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	4a3b      	ldr	r2, [pc, #236]	; (800a3c0 <TIM_Base_SetConfig+0x120>)
 800a2d4:	4293      	cmp	r3, r2
 800a2d6:	d003      	beq.n	800a2e0 <TIM_Base_SetConfig+0x40>
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	4a3a      	ldr	r2, [pc, #232]	; (800a3c4 <TIM_Base_SetConfig+0x124>)
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d108      	bne.n	800a2f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	685b      	ldr	r3, [r3, #4]
 800a2ec:	68fa      	ldr	r2, [r7, #12]
 800a2ee:	4313      	orrs	r3, r2
 800a2f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	4a2f      	ldr	r2, [pc, #188]	; (800a3b4 <TIM_Base_SetConfig+0x114>)
 800a2f6:	4293      	cmp	r3, r2
 800a2f8:	d01f      	beq.n	800a33a <TIM_Base_SetConfig+0x9a>
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a300:	d01b      	beq.n	800a33a <TIM_Base_SetConfig+0x9a>
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	4a2c      	ldr	r2, [pc, #176]	; (800a3b8 <TIM_Base_SetConfig+0x118>)
 800a306:	4293      	cmp	r3, r2
 800a308:	d017      	beq.n	800a33a <TIM_Base_SetConfig+0x9a>
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	4a2b      	ldr	r2, [pc, #172]	; (800a3bc <TIM_Base_SetConfig+0x11c>)
 800a30e:	4293      	cmp	r3, r2
 800a310:	d013      	beq.n	800a33a <TIM_Base_SetConfig+0x9a>
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	4a2a      	ldr	r2, [pc, #168]	; (800a3c0 <TIM_Base_SetConfig+0x120>)
 800a316:	4293      	cmp	r3, r2
 800a318:	d00f      	beq.n	800a33a <TIM_Base_SetConfig+0x9a>
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	4a29      	ldr	r2, [pc, #164]	; (800a3c4 <TIM_Base_SetConfig+0x124>)
 800a31e:	4293      	cmp	r3, r2
 800a320:	d00b      	beq.n	800a33a <TIM_Base_SetConfig+0x9a>
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	4a28      	ldr	r2, [pc, #160]	; (800a3c8 <TIM_Base_SetConfig+0x128>)
 800a326:	4293      	cmp	r3, r2
 800a328:	d007      	beq.n	800a33a <TIM_Base_SetConfig+0x9a>
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	4a27      	ldr	r2, [pc, #156]	; (800a3cc <TIM_Base_SetConfig+0x12c>)
 800a32e:	4293      	cmp	r3, r2
 800a330:	d003      	beq.n	800a33a <TIM_Base_SetConfig+0x9a>
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	4a26      	ldr	r2, [pc, #152]	; (800a3d0 <TIM_Base_SetConfig+0x130>)
 800a336:	4293      	cmp	r3, r2
 800a338:	d108      	bne.n	800a34c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a340:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	68db      	ldr	r3, [r3, #12]
 800a346:	68fa      	ldr	r2, [r7, #12]
 800a348:	4313      	orrs	r3, r2
 800a34a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	695b      	ldr	r3, [r3, #20]
 800a356:	4313      	orrs	r3, r2
 800a358:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	68fa      	ldr	r2, [r7, #12]
 800a35e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	689a      	ldr	r2, [r3, #8]
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	681a      	ldr	r2, [r3, #0]
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	4a10      	ldr	r2, [pc, #64]	; (800a3b4 <TIM_Base_SetConfig+0x114>)
 800a374:	4293      	cmp	r3, r2
 800a376:	d00f      	beq.n	800a398 <TIM_Base_SetConfig+0xf8>
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	4a12      	ldr	r2, [pc, #72]	; (800a3c4 <TIM_Base_SetConfig+0x124>)
 800a37c:	4293      	cmp	r3, r2
 800a37e:	d00b      	beq.n	800a398 <TIM_Base_SetConfig+0xf8>
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	4a11      	ldr	r2, [pc, #68]	; (800a3c8 <TIM_Base_SetConfig+0x128>)
 800a384:	4293      	cmp	r3, r2
 800a386:	d007      	beq.n	800a398 <TIM_Base_SetConfig+0xf8>
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	4a10      	ldr	r2, [pc, #64]	; (800a3cc <TIM_Base_SetConfig+0x12c>)
 800a38c:	4293      	cmp	r3, r2
 800a38e:	d003      	beq.n	800a398 <TIM_Base_SetConfig+0xf8>
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	4a0f      	ldr	r2, [pc, #60]	; (800a3d0 <TIM_Base_SetConfig+0x130>)
 800a394:	4293      	cmp	r3, r2
 800a396:	d103      	bne.n	800a3a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	691a      	ldr	r2, [r3, #16]
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2201      	movs	r2, #1
 800a3a4:	615a      	str	r2, [r3, #20]
}
 800a3a6:	bf00      	nop
 800a3a8:	3714      	adds	r7, #20
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b0:	4770      	bx	lr
 800a3b2:	bf00      	nop
 800a3b4:	40010000 	.word	0x40010000
 800a3b8:	40000400 	.word	0x40000400
 800a3bc:	40000800 	.word	0x40000800
 800a3c0:	40000c00 	.word	0x40000c00
 800a3c4:	40010400 	.word	0x40010400
 800a3c8:	40014000 	.word	0x40014000
 800a3cc:	40014400 	.word	0x40014400
 800a3d0:	40014800 	.word	0x40014800

0800a3d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a3d4:	b480      	push	{r7}
 800a3d6:	b087      	sub	sp, #28
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	60f8      	str	r0, [r7, #12]
 800a3dc:	60b9      	str	r1, [r7, #8]
 800a3de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	6a1b      	ldr	r3, [r3, #32]
 800a3e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	6a1b      	ldr	r3, [r3, #32]
 800a3ea:	f023 0201 	bic.w	r2, r3, #1
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	699b      	ldr	r3, [r3, #24]
 800a3f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a3f8:	693b      	ldr	r3, [r7, #16]
 800a3fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a3fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	011b      	lsls	r3, r3, #4
 800a404:	693a      	ldr	r2, [r7, #16]
 800a406:	4313      	orrs	r3, r2
 800a408:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	f023 030a 	bic.w	r3, r3, #10
 800a410:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a412:	697a      	ldr	r2, [r7, #20]
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	4313      	orrs	r3, r2
 800a418:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	693a      	ldr	r2, [r7, #16]
 800a41e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	697a      	ldr	r2, [r7, #20]
 800a424:	621a      	str	r2, [r3, #32]
}
 800a426:	bf00      	nop
 800a428:	371c      	adds	r7, #28
 800a42a:	46bd      	mov	sp, r7
 800a42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a430:	4770      	bx	lr

0800a432 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a432:	b480      	push	{r7}
 800a434:	b087      	sub	sp, #28
 800a436:	af00      	add	r7, sp, #0
 800a438:	60f8      	str	r0, [r7, #12]
 800a43a:	60b9      	str	r1, [r7, #8]
 800a43c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	6a1b      	ldr	r3, [r3, #32]
 800a442:	f023 0210 	bic.w	r2, r3, #16
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	699b      	ldr	r3, [r3, #24]
 800a44e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	6a1b      	ldr	r3, [r3, #32]
 800a454:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a456:	697b      	ldr	r3, [r7, #20]
 800a458:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a45c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	031b      	lsls	r3, r3, #12
 800a462:	697a      	ldr	r2, [r7, #20]
 800a464:	4313      	orrs	r3, r2
 800a466:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a468:	693b      	ldr	r3, [r7, #16]
 800a46a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a46e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	011b      	lsls	r3, r3, #4
 800a474:	693a      	ldr	r2, [r7, #16]
 800a476:	4313      	orrs	r3, r2
 800a478:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	697a      	ldr	r2, [r7, #20]
 800a47e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	693a      	ldr	r2, [r7, #16]
 800a484:	621a      	str	r2, [r3, #32]
}
 800a486:	bf00      	nop
 800a488:	371c      	adds	r7, #28
 800a48a:	46bd      	mov	sp, r7
 800a48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a490:	4770      	bx	lr
	...

0800a494 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a494:	b480      	push	{r7}
 800a496:	b085      	sub	sp, #20
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
 800a49c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	689b      	ldr	r3, [r3, #8]
 800a4a2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a4a4:	68fa      	ldr	r2, [r7, #12]
 800a4a6:	4b09      	ldr	r3, [pc, #36]	; (800a4cc <TIM_ITRx_SetConfig+0x38>)
 800a4a8:	4013      	ands	r3, r2
 800a4aa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a4ac:	683a      	ldr	r2, [r7, #0]
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	4313      	orrs	r3, r2
 800a4b2:	f043 0307 	orr.w	r3, r3, #7
 800a4b6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	68fa      	ldr	r2, [r7, #12]
 800a4bc:	609a      	str	r2, [r3, #8]
}
 800a4be:	bf00      	nop
 800a4c0:	3714      	adds	r7, #20
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c8:	4770      	bx	lr
 800a4ca:	bf00      	nop
 800a4cc:	ffcfff8f 	.word	0xffcfff8f

0800a4d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a4d0:	b480      	push	{r7}
 800a4d2:	b087      	sub	sp, #28
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	60f8      	str	r0, [r7, #12]
 800a4d8:	60b9      	str	r1, [r7, #8]
 800a4da:	607a      	str	r2, [r7, #4]
 800a4dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	689b      	ldr	r3, [r3, #8]
 800a4e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a4e4:	697b      	ldr	r3, [r7, #20]
 800a4e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a4ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	021a      	lsls	r2, r3, #8
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	431a      	orrs	r2, r3
 800a4f4:	68bb      	ldr	r3, [r7, #8]
 800a4f6:	4313      	orrs	r3, r2
 800a4f8:	697a      	ldr	r2, [r7, #20]
 800a4fa:	4313      	orrs	r3, r2
 800a4fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	697a      	ldr	r2, [r7, #20]
 800a502:	609a      	str	r2, [r3, #8]
}
 800a504:	bf00      	nop
 800a506:	371c      	adds	r7, #28
 800a508:	46bd      	mov	sp, r7
 800a50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50e:	4770      	bx	lr

0800a510 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a510:	b480      	push	{r7}
 800a512:	b085      	sub	sp, #20
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
 800a518:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a520:	2b01      	cmp	r3, #1
 800a522:	d101      	bne.n	800a528 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a524:	2302      	movs	r3, #2
 800a526:	e06d      	b.n	800a604 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2201      	movs	r2, #1
 800a52c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2202      	movs	r2, #2
 800a534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	685b      	ldr	r3, [r3, #4]
 800a53e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	689b      	ldr	r3, [r3, #8]
 800a546:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	4a30      	ldr	r2, [pc, #192]	; (800a610 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a54e:	4293      	cmp	r3, r2
 800a550:	d004      	beq.n	800a55c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	4a2f      	ldr	r2, [pc, #188]	; (800a614 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a558:	4293      	cmp	r3, r2
 800a55a:	d108      	bne.n	800a56e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a562:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	685b      	ldr	r3, [r3, #4]
 800a568:	68fa      	ldr	r2, [r7, #12]
 800a56a:	4313      	orrs	r3, r2
 800a56c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a574:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	68fa      	ldr	r2, [r7, #12]
 800a57c:	4313      	orrs	r3, r2
 800a57e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	68fa      	ldr	r2, [r7, #12]
 800a586:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	4a20      	ldr	r2, [pc, #128]	; (800a610 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a58e:	4293      	cmp	r3, r2
 800a590:	d022      	beq.n	800a5d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a59a:	d01d      	beq.n	800a5d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	4a1d      	ldr	r2, [pc, #116]	; (800a618 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d018      	beq.n	800a5d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	4a1c      	ldr	r2, [pc, #112]	; (800a61c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	d013      	beq.n	800a5d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	4a1a      	ldr	r2, [pc, #104]	; (800a620 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a5b6:	4293      	cmp	r3, r2
 800a5b8:	d00e      	beq.n	800a5d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	4a15      	ldr	r2, [pc, #84]	; (800a614 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a5c0:	4293      	cmp	r3, r2
 800a5c2:	d009      	beq.n	800a5d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	4a16      	ldr	r2, [pc, #88]	; (800a624 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a5ca:	4293      	cmp	r3, r2
 800a5cc:	d004      	beq.n	800a5d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	4a15      	ldr	r2, [pc, #84]	; (800a628 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a5d4:	4293      	cmp	r3, r2
 800a5d6:	d10c      	bne.n	800a5f2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a5de:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	689b      	ldr	r3, [r3, #8]
 800a5e4:	68ba      	ldr	r2, [r7, #8]
 800a5e6:	4313      	orrs	r3, r2
 800a5e8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	68ba      	ldr	r2, [r7, #8]
 800a5f0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2201      	movs	r2, #1
 800a5f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a602:	2300      	movs	r3, #0
}
 800a604:	4618      	mov	r0, r3
 800a606:	3714      	adds	r7, #20
 800a608:	46bd      	mov	sp, r7
 800a60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60e:	4770      	bx	lr
 800a610:	40010000 	.word	0x40010000
 800a614:	40010400 	.word	0x40010400
 800a618:	40000400 	.word	0x40000400
 800a61c:	40000800 	.word	0x40000800
 800a620:	40000c00 	.word	0x40000c00
 800a624:	40001800 	.word	0x40001800
 800a628:	40014000 	.word	0x40014000

0800a62c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b082      	sub	sp, #8
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d101      	bne.n	800a63e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a63a:	2301      	movs	r3, #1
 800a63c:	e042      	b.n	800a6c4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a644:	2b00      	cmp	r3, #0
 800a646:	d106      	bne.n	800a656 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2200      	movs	r2, #0
 800a64c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a650:	6878      	ldr	r0, [r7, #4]
 800a652:	f7f7 fef5 	bl	8002440 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2224      	movs	r2, #36	; 0x24
 800a65a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	681a      	ldr	r2, [r3, #0]
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	f022 0201 	bic.w	r2, r2, #1
 800a66c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a66e:	6878      	ldr	r0, [r7, #4]
 800a670:	f000 f8ba 	bl	800a7e8 <UART_SetConfig>
 800a674:	4603      	mov	r3, r0
 800a676:	2b01      	cmp	r3, #1
 800a678:	d101      	bne.n	800a67e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a67a:	2301      	movs	r3, #1
 800a67c:	e022      	b.n	800a6c4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a682:	2b00      	cmp	r3, #0
 800a684:	d002      	beq.n	800a68c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f000 fe16 	bl	800b2b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	685a      	ldr	r2, [r3, #4]
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a69a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	689a      	ldr	r2, [r3, #8]
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a6aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	681a      	ldr	r2, [r3, #0]
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	f042 0201 	orr.w	r2, r2, #1
 800a6ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a6bc:	6878      	ldr	r0, [r7, #4]
 800a6be:	f000 fe9d 	bl	800b3fc <UART_CheckIdleState>
 800a6c2:	4603      	mov	r3, r0
}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	3708      	adds	r7, #8
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd80      	pop	{r7, pc}

0800a6cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b08a      	sub	sp, #40	; 0x28
 800a6d0:	af02      	add	r7, sp, #8
 800a6d2:	60f8      	str	r0, [r7, #12]
 800a6d4:	60b9      	str	r1, [r7, #8]
 800a6d6:	603b      	str	r3, [r7, #0]
 800a6d8:	4613      	mov	r3, r2
 800a6da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6e2:	2b20      	cmp	r3, #32
 800a6e4:	d17b      	bne.n	800a7de <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800a6e6:	68bb      	ldr	r3, [r7, #8]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d002      	beq.n	800a6f2 <HAL_UART_Transmit+0x26>
 800a6ec:	88fb      	ldrh	r3, [r7, #6]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d101      	bne.n	800a6f6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	e074      	b.n	800a7e0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	2221      	movs	r2, #33	; 0x21
 800a702:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a706:	f7f8 fa4d 	bl	8002ba4 <HAL_GetTick>
 800a70a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	88fa      	ldrh	r2, [r7, #6]
 800a710:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	88fa      	ldrh	r2, [r7, #6]
 800a718:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	689b      	ldr	r3, [r3, #8]
 800a720:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a724:	d108      	bne.n	800a738 <HAL_UART_Transmit+0x6c>
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	691b      	ldr	r3, [r3, #16]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d104      	bne.n	800a738 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a72e:	2300      	movs	r3, #0
 800a730:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a732:	68bb      	ldr	r3, [r7, #8]
 800a734:	61bb      	str	r3, [r7, #24]
 800a736:	e003      	b.n	800a740 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a738:	68bb      	ldr	r3, [r7, #8]
 800a73a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a73c:	2300      	movs	r3, #0
 800a73e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a740:	e030      	b.n	800a7a4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	9300      	str	r3, [sp, #0]
 800a746:	697b      	ldr	r3, [r7, #20]
 800a748:	2200      	movs	r2, #0
 800a74a:	2180      	movs	r1, #128	; 0x80
 800a74c:	68f8      	ldr	r0, [r7, #12]
 800a74e:	f000 feff 	bl	800b550 <UART_WaitOnFlagUntilTimeout>
 800a752:	4603      	mov	r3, r0
 800a754:	2b00      	cmp	r3, #0
 800a756:	d005      	beq.n	800a764 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	2220      	movs	r2, #32
 800a75c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800a760:	2303      	movs	r3, #3
 800a762:	e03d      	b.n	800a7e0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800a764:	69fb      	ldr	r3, [r7, #28]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d10b      	bne.n	800a782 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a76a:	69bb      	ldr	r3, [r7, #24]
 800a76c:	881b      	ldrh	r3, [r3, #0]
 800a76e:	461a      	mov	r2, r3
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a778:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a77a:	69bb      	ldr	r3, [r7, #24]
 800a77c:	3302      	adds	r3, #2
 800a77e:	61bb      	str	r3, [r7, #24]
 800a780:	e007      	b.n	800a792 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a782:	69fb      	ldr	r3, [r7, #28]
 800a784:	781a      	ldrb	r2, [r3, #0]
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a78c:	69fb      	ldr	r3, [r7, #28]
 800a78e:	3301      	adds	r3, #1
 800a790:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a798:	b29b      	uxth	r3, r3
 800a79a:	3b01      	subs	r3, #1
 800a79c:	b29a      	uxth	r2, r3
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a7aa:	b29b      	uxth	r3, r3
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d1c8      	bne.n	800a742 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	9300      	str	r3, [sp, #0]
 800a7b4:	697b      	ldr	r3, [r7, #20]
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	2140      	movs	r1, #64	; 0x40
 800a7ba:	68f8      	ldr	r0, [r7, #12]
 800a7bc:	f000 fec8 	bl	800b550 <UART_WaitOnFlagUntilTimeout>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d005      	beq.n	800a7d2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	2220      	movs	r2, #32
 800a7ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800a7ce:	2303      	movs	r3, #3
 800a7d0:	e006      	b.n	800a7e0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	2220      	movs	r2, #32
 800a7d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800a7da:	2300      	movs	r3, #0
 800a7dc:	e000      	b.n	800a7e0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800a7de:	2302      	movs	r3, #2
  }
}
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	3720      	adds	r7, #32
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	bd80      	pop	{r7, pc}

0800a7e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a7e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a7ec:	b092      	sub	sp, #72	; 0x48
 800a7ee:	af00      	add	r7, sp, #0
 800a7f0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a7f8:	697b      	ldr	r3, [r7, #20]
 800a7fa:	689a      	ldr	r2, [r3, #8]
 800a7fc:	697b      	ldr	r3, [r7, #20]
 800a7fe:	691b      	ldr	r3, [r3, #16]
 800a800:	431a      	orrs	r2, r3
 800a802:	697b      	ldr	r3, [r7, #20]
 800a804:	695b      	ldr	r3, [r3, #20]
 800a806:	431a      	orrs	r2, r3
 800a808:	697b      	ldr	r3, [r7, #20]
 800a80a:	69db      	ldr	r3, [r3, #28]
 800a80c:	4313      	orrs	r3, r2
 800a80e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a810:	697b      	ldr	r3, [r7, #20]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	681a      	ldr	r2, [r3, #0]
 800a816:	4bbe      	ldr	r3, [pc, #760]	; (800ab10 <UART_SetConfig+0x328>)
 800a818:	4013      	ands	r3, r2
 800a81a:	697a      	ldr	r2, [r7, #20]
 800a81c:	6812      	ldr	r2, [r2, #0]
 800a81e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a820:	430b      	orrs	r3, r1
 800a822:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a824:	697b      	ldr	r3, [r7, #20]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	685b      	ldr	r3, [r3, #4]
 800a82a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a82e:	697b      	ldr	r3, [r7, #20]
 800a830:	68da      	ldr	r2, [r3, #12]
 800a832:	697b      	ldr	r3, [r7, #20]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	430a      	orrs	r2, r1
 800a838:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a83a:	697b      	ldr	r3, [r7, #20]
 800a83c:	699b      	ldr	r3, [r3, #24]
 800a83e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a840:	697b      	ldr	r3, [r7, #20]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	4ab3      	ldr	r2, [pc, #716]	; (800ab14 <UART_SetConfig+0x32c>)
 800a846:	4293      	cmp	r3, r2
 800a848:	d004      	beq.n	800a854 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a84a:	697b      	ldr	r3, [r7, #20]
 800a84c:	6a1b      	ldr	r3, [r3, #32]
 800a84e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a850:	4313      	orrs	r3, r2
 800a852:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a854:	697b      	ldr	r3, [r7, #20]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	689a      	ldr	r2, [r3, #8]
 800a85a:	4baf      	ldr	r3, [pc, #700]	; (800ab18 <UART_SetConfig+0x330>)
 800a85c:	4013      	ands	r3, r2
 800a85e:	697a      	ldr	r2, [r7, #20]
 800a860:	6812      	ldr	r2, [r2, #0]
 800a862:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a864:	430b      	orrs	r3, r1
 800a866:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a868:	697b      	ldr	r3, [r7, #20]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a86e:	f023 010f 	bic.w	r1, r3, #15
 800a872:	697b      	ldr	r3, [r7, #20]
 800a874:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a876:	697b      	ldr	r3, [r7, #20]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	430a      	orrs	r2, r1
 800a87c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a87e:	697b      	ldr	r3, [r7, #20]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	4aa6      	ldr	r2, [pc, #664]	; (800ab1c <UART_SetConfig+0x334>)
 800a884:	4293      	cmp	r3, r2
 800a886:	d177      	bne.n	800a978 <UART_SetConfig+0x190>
 800a888:	4ba5      	ldr	r3, [pc, #660]	; (800ab20 <UART_SetConfig+0x338>)
 800a88a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a88c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a890:	2b28      	cmp	r3, #40	; 0x28
 800a892:	d86d      	bhi.n	800a970 <UART_SetConfig+0x188>
 800a894:	a201      	add	r2, pc, #4	; (adr r2, 800a89c <UART_SetConfig+0xb4>)
 800a896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a89a:	bf00      	nop
 800a89c:	0800a941 	.word	0x0800a941
 800a8a0:	0800a971 	.word	0x0800a971
 800a8a4:	0800a971 	.word	0x0800a971
 800a8a8:	0800a971 	.word	0x0800a971
 800a8ac:	0800a971 	.word	0x0800a971
 800a8b0:	0800a971 	.word	0x0800a971
 800a8b4:	0800a971 	.word	0x0800a971
 800a8b8:	0800a971 	.word	0x0800a971
 800a8bc:	0800a949 	.word	0x0800a949
 800a8c0:	0800a971 	.word	0x0800a971
 800a8c4:	0800a971 	.word	0x0800a971
 800a8c8:	0800a971 	.word	0x0800a971
 800a8cc:	0800a971 	.word	0x0800a971
 800a8d0:	0800a971 	.word	0x0800a971
 800a8d4:	0800a971 	.word	0x0800a971
 800a8d8:	0800a971 	.word	0x0800a971
 800a8dc:	0800a951 	.word	0x0800a951
 800a8e0:	0800a971 	.word	0x0800a971
 800a8e4:	0800a971 	.word	0x0800a971
 800a8e8:	0800a971 	.word	0x0800a971
 800a8ec:	0800a971 	.word	0x0800a971
 800a8f0:	0800a971 	.word	0x0800a971
 800a8f4:	0800a971 	.word	0x0800a971
 800a8f8:	0800a971 	.word	0x0800a971
 800a8fc:	0800a959 	.word	0x0800a959
 800a900:	0800a971 	.word	0x0800a971
 800a904:	0800a971 	.word	0x0800a971
 800a908:	0800a971 	.word	0x0800a971
 800a90c:	0800a971 	.word	0x0800a971
 800a910:	0800a971 	.word	0x0800a971
 800a914:	0800a971 	.word	0x0800a971
 800a918:	0800a971 	.word	0x0800a971
 800a91c:	0800a961 	.word	0x0800a961
 800a920:	0800a971 	.word	0x0800a971
 800a924:	0800a971 	.word	0x0800a971
 800a928:	0800a971 	.word	0x0800a971
 800a92c:	0800a971 	.word	0x0800a971
 800a930:	0800a971 	.word	0x0800a971
 800a934:	0800a971 	.word	0x0800a971
 800a938:	0800a971 	.word	0x0800a971
 800a93c:	0800a969 	.word	0x0800a969
 800a940:	2301      	movs	r3, #1
 800a942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a946:	e222      	b.n	800ad8e <UART_SetConfig+0x5a6>
 800a948:	2304      	movs	r3, #4
 800a94a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a94e:	e21e      	b.n	800ad8e <UART_SetConfig+0x5a6>
 800a950:	2308      	movs	r3, #8
 800a952:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a956:	e21a      	b.n	800ad8e <UART_SetConfig+0x5a6>
 800a958:	2310      	movs	r3, #16
 800a95a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a95e:	e216      	b.n	800ad8e <UART_SetConfig+0x5a6>
 800a960:	2320      	movs	r3, #32
 800a962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a966:	e212      	b.n	800ad8e <UART_SetConfig+0x5a6>
 800a968:	2340      	movs	r3, #64	; 0x40
 800a96a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a96e:	e20e      	b.n	800ad8e <UART_SetConfig+0x5a6>
 800a970:	2380      	movs	r3, #128	; 0x80
 800a972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a976:	e20a      	b.n	800ad8e <UART_SetConfig+0x5a6>
 800a978:	697b      	ldr	r3, [r7, #20]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	4a69      	ldr	r2, [pc, #420]	; (800ab24 <UART_SetConfig+0x33c>)
 800a97e:	4293      	cmp	r3, r2
 800a980:	d130      	bne.n	800a9e4 <UART_SetConfig+0x1fc>
 800a982:	4b67      	ldr	r3, [pc, #412]	; (800ab20 <UART_SetConfig+0x338>)
 800a984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a986:	f003 0307 	and.w	r3, r3, #7
 800a98a:	2b05      	cmp	r3, #5
 800a98c:	d826      	bhi.n	800a9dc <UART_SetConfig+0x1f4>
 800a98e:	a201      	add	r2, pc, #4	; (adr r2, 800a994 <UART_SetConfig+0x1ac>)
 800a990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a994:	0800a9ad 	.word	0x0800a9ad
 800a998:	0800a9b5 	.word	0x0800a9b5
 800a99c:	0800a9bd 	.word	0x0800a9bd
 800a9a0:	0800a9c5 	.word	0x0800a9c5
 800a9a4:	0800a9cd 	.word	0x0800a9cd
 800a9a8:	0800a9d5 	.word	0x0800a9d5
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9b2:	e1ec      	b.n	800ad8e <UART_SetConfig+0x5a6>
 800a9b4:	2304      	movs	r3, #4
 800a9b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9ba:	e1e8      	b.n	800ad8e <UART_SetConfig+0x5a6>
 800a9bc:	2308      	movs	r3, #8
 800a9be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9c2:	e1e4      	b.n	800ad8e <UART_SetConfig+0x5a6>
 800a9c4:	2310      	movs	r3, #16
 800a9c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9ca:	e1e0      	b.n	800ad8e <UART_SetConfig+0x5a6>
 800a9cc:	2320      	movs	r3, #32
 800a9ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9d2:	e1dc      	b.n	800ad8e <UART_SetConfig+0x5a6>
 800a9d4:	2340      	movs	r3, #64	; 0x40
 800a9d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9da:	e1d8      	b.n	800ad8e <UART_SetConfig+0x5a6>
 800a9dc:	2380      	movs	r3, #128	; 0x80
 800a9de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9e2:	e1d4      	b.n	800ad8e <UART_SetConfig+0x5a6>
 800a9e4:	697b      	ldr	r3, [r7, #20]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	4a4f      	ldr	r2, [pc, #316]	; (800ab28 <UART_SetConfig+0x340>)
 800a9ea:	4293      	cmp	r3, r2
 800a9ec:	d130      	bne.n	800aa50 <UART_SetConfig+0x268>
 800a9ee:	4b4c      	ldr	r3, [pc, #304]	; (800ab20 <UART_SetConfig+0x338>)
 800a9f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9f2:	f003 0307 	and.w	r3, r3, #7
 800a9f6:	2b05      	cmp	r3, #5
 800a9f8:	d826      	bhi.n	800aa48 <UART_SetConfig+0x260>
 800a9fa:	a201      	add	r2, pc, #4	; (adr r2, 800aa00 <UART_SetConfig+0x218>)
 800a9fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa00:	0800aa19 	.word	0x0800aa19
 800aa04:	0800aa21 	.word	0x0800aa21
 800aa08:	0800aa29 	.word	0x0800aa29
 800aa0c:	0800aa31 	.word	0x0800aa31
 800aa10:	0800aa39 	.word	0x0800aa39
 800aa14:	0800aa41 	.word	0x0800aa41
 800aa18:	2300      	movs	r3, #0
 800aa1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa1e:	e1b6      	b.n	800ad8e <UART_SetConfig+0x5a6>
 800aa20:	2304      	movs	r3, #4
 800aa22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa26:	e1b2      	b.n	800ad8e <UART_SetConfig+0x5a6>
 800aa28:	2308      	movs	r3, #8
 800aa2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa2e:	e1ae      	b.n	800ad8e <UART_SetConfig+0x5a6>
 800aa30:	2310      	movs	r3, #16
 800aa32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa36:	e1aa      	b.n	800ad8e <UART_SetConfig+0x5a6>
 800aa38:	2320      	movs	r3, #32
 800aa3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa3e:	e1a6      	b.n	800ad8e <UART_SetConfig+0x5a6>
 800aa40:	2340      	movs	r3, #64	; 0x40
 800aa42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa46:	e1a2      	b.n	800ad8e <UART_SetConfig+0x5a6>
 800aa48:	2380      	movs	r3, #128	; 0x80
 800aa4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa4e:	e19e      	b.n	800ad8e <UART_SetConfig+0x5a6>
 800aa50:	697b      	ldr	r3, [r7, #20]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	4a35      	ldr	r2, [pc, #212]	; (800ab2c <UART_SetConfig+0x344>)
 800aa56:	4293      	cmp	r3, r2
 800aa58:	d130      	bne.n	800aabc <UART_SetConfig+0x2d4>
 800aa5a:	4b31      	ldr	r3, [pc, #196]	; (800ab20 <UART_SetConfig+0x338>)
 800aa5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa5e:	f003 0307 	and.w	r3, r3, #7
 800aa62:	2b05      	cmp	r3, #5
 800aa64:	d826      	bhi.n	800aab4 <UART_SetConfig+0x2cc>
 800aa66:	a201      	add	r2, pc, #4	; (adr r2, 800aa6c <UART_SetConfig+0x284>)
 800aa68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa6c:	0800aa85 	.word	0x0800aa85
 800aa70:	0800aa8d 	.word	0x0800aa8d
 800aa74:	0800aa95 	.word	0x0800aa95
 800aa78:	0800aa9d 	.word	0x0800aa9d
 800aa7c:	0800aaa5 	.word	0x0800aaa5
 800aa80:	0800aaad 	.word	0x0800aaad
 800aa84:	2300      	movs	r3, #0
 800aa86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa8a:	e180      	b.n	800ad8e <UART_SetConfig+0x5a6>
 800aa8c:	2304      	movs	r3, #4
 800aa8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa92:	e17c      	b.n	800ad8e <UART_SetConfig+0x5a6>
 800aa94:	2308      	movs	r3, #8
 800aa96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa9a:	e178      	b.n	800ad8e <UART_SetConfig+0x5a6>
 800aa9c:	2310      	movs	r3, #16
 800aa9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aaa2:	e174      	b.n	800ad8e <UART_SetConfig+0x5a6>
 800aaa4:	2320      	movs	r3, #32
 800aaa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aaaa:	e170      	b.n	800ad8e <UART_SetConfig+0x5a6>
 800aaac:	2340      	movs	r3, #64	; 0x40
 800aaae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aab2:	e16c      	b.n	800ad8e <UART_SetConfig+0x5a6>
 800aab4:	2380      	movs	r3, #128	; 0x80
 800aab6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aaba:	e168      	b.n	800ad8e <UART_SetConfig+0x5a6>
 800aabc:	697b      	ldr	r3, [r7, #20]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	4a1b      	ldr	r2, [pc, #108]	; (800ab30 <UART_SetConfig+0x348>)
 800aac2:	4293      	cmp	r3, r2
 800aac4:	d142      	bne.n	800ab4c <UART_SetConfig+0x364>
 800aac6:	4b16      	ldr	r3, [pc, #88]	; (800ab20 <UART_SetConfig+0x338>)
 800aac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aaca:	f003 0307 	and.w	r3, r3, #7
 800aace:	2b05      	cmp	r3, #5
 800aad0:	d838      	bhi.n	800ab44 <UART_SetConfig+0x35c>
 800aad2:	a201      	add	r2, pc, #4	; (adr r2, 800aad8 <UART_SetConfig+0x2f0>)
 800aad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aad8:	0800aaf1 	.word	0x0800aaf1
 800aadc:	0800aaf9 	.word	0x0800aaf9
 800aae0:	0800ab01 	.word	0x0800ab01
 800aae4:	0800ab09 	.word	0x0800ab09
 800aae8:	0800ab35 	.word	0x0800ab35
 800aaec:	0800ab3d 	.word	0x0800ab3d
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aaf6:	e14a      	b.n	800ad8e <UART_SetConfig+0x5a6>
 800aaf8:	2304      	movs	r3, #4
 800aafa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aafe:	e146      	b.n	800ad8e <UART_SetConfig+0x5a6>
 800ab00:	2308      	movs	r3, #8
 800ab02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab06:	e142      	b.n	800ad8e <UART_SetConfig+0x5a6>
 800ab08:	2310      	movs	r3, #16
 800ab0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab0e:	e13e      	b.n	800ad8e <UART_SetConfig+0x5a6>
 800ab10:	cfff69f3 	.word	0xcfff69f3
 800ab14:	58000c00 	.word	0x58000c00
 800ab18:	11fff4ff 	.word	0x11fff4ff
 800ab1c:	40011000 	.word	0x40011000
 800ab20:	58024400 	.word	0x58024400
 800ab24:	40004400 	.word	0x40004400
 800ab28:	40004800 	.word	0x40004800
 800ab2c:	40004c00 	.word	0x40004c00
 800ab30:	40005000 	.word	0x40005000
 800ab34:	2320      	movs	r3, #32
 800ab36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab3a:	e128      	b.n	800ad8e <UART_SetConfig+0x5a6>
 800ab3c:	2340      	movs	r3, #64	; 0x40
 800ab3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab42:	e124      	b.n	800ad8e <UART_SetConfig+0x5a6>
 800ab44:	2380      	movs	r3, #128	; 0x80
 800ab46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab4a:	e120      	b.n	800ad8e <UART_SetConfig+0x5a6>
 800ab4c:	697b      	ldr	r3, [r7, #20]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	4acb      	ldr	r2, [pc, #812]	; (800ae80 <UART_SetConfig+0x698>)
 800ab52:	4293      	cmp	r3, r2
 800ab54:	d176      	bne.n	800ac44 <UART_SetConfig+0x45c>
 800ab56:	4bcb      	ldr	r3, [pc, #812]	; (800ae84 <UART_SetConfig+0x69c>)
 800ab58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ab5e:	2b28      	cmp	r3, #40	; 0x28
 800ab60:	d86c      	bhi.n	800ac3c <UART_SetConfig+0x454>
 800ab62:	a201      	add	r2, pc, #4	; (adr r2, 800ab68 <UART_SetConfig+0x380>)
 800ab64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab68:	0800ac0d 	.word	0x0800ac0d
 800ab6c:	0800ac3d 	.word	0x0800ac3d
 800ab70:	0800ac3d 	.word	0x0800ac3d
 800ab74:	0800ac3d 	.word	0x0800ac3d
 800ab78:	0800ac3d 	.word	0x0800ac3d
 800ab7c:	0800ac3d 	.word	0x0800ac3d
 800ab80:	0800ac3d 	.word	0x0800ac3d
 800ab84:	0800ac3d 	.word	0x0800ac3d
 800ab88:	0800ac15 	.word	0x0800ac15
 800ab8c:	0800ac3d 	.word	0x0800ac3d
 800ab90:	0800ac3d 	.word	0x0800ac3d
 800ab94:	0800ac3d 	.word	0x0800ac3d
 800ab98:	0800ac3d 	.word	0x0800ac3d
 800ab9c:	0800ac3d 	.word	0x0800ac3d
 800aba0:	0800ac3d 	.word	0x0800ac3d
 800aba4:	0800ac3d 	.word	0x0800ac3d
 800aba8:	0800ac1d 	.word	0x0800ac1d
 800abac:	0800ac3d 	.word	0x0800ac3d
 800abb0:	0800ac3d 	.word	0x0800ac3d
 800abb4:	0800ac3d 	.word	0x0800ac3d
 800abb8:	0800ac3d 	.word	0x0800ac3d
 800abbc:	0800ac3d 	.word	0x0800ac3d
 800abc0:	0800ac3d 	.word	0x0800ac3d
 800abc4:	0800ac3d 	.word	0x0800ac3d
 800abc8:	0800ac25 	.word	0x0800ac25
 800abcc:	0800ac3d 	.word	0x0800ac3d
 800abd0:	0800ac3d 	.word	0x0800ac3d
 800abd4:	0800ac3d 	.word	0x0800ac3d
 800abd8:	0800ac3d 	.word	0x0800ac3d
 800abdc:	0800ac3d 	.word	0x0800ac3d
 800abe0:	0800ac3d 	.word	0x0800ac3d
 800abe4:	0800ac3d 	.word	0x0800ac3d
 800abe8:	0800ac2d 	.word	0x0800ac2d
 800abec:	0800ac3d 	.word	0x0800ac3d
 800abf0:	0800ac3d 	.word	0x0800ac3d
 800abf4:	0800ac3d 	.word	0x0800ac3d
 800abf8:	0800ac3d 	.word	0x0800ac3d
 800abfc:	0800ac3d 	.word	0x0800ac3d
 800ac00:	0800ac3d 	.word	0x0800ac3d
 800ac04:	0800ac3d 	.word	0x0800ac3d
 800ac08:	0800ac35 	.word	0x0800ac35
 800ac0c:	2301      	movs	r3, #1
 800ac0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac12:	e0bc      	b.n	800ad8e <UART_SetConfig+0x5a6>
 800ac14:	2304      	movs	r3, #4
 800ac16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac1a:	e0b8      	b.n	800ad8e <UART_SetConfig+0x5a6>
 800ac1c:	2308      	movs	r3, #8
 800ac1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac22:	e0b4      	b.n	800ad8e <UART_SetConfig+0x5a6>
 800ac24:	2310      	movs	r3, #16
 800ac26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac2a:	e0b0      	b.n	800ad8e <UART_SetConfig+0x5a6>
 800ac2c:	2320      	movs	r3, #32
 800ac2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac32:	e0ac      	b.n	800ad8e <UART_SetConfig+0x5a6>
 800ac34:	2340      	movs	r3, #64	; 0x40
 800ac36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac3a:	e0a8      	b.n	800ad8e <UART_SetConfig+0x5a6>
 800ac3c:	2380      	movs	r3, #128	; 0x80
 800ac3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac42:	e0a4      	b.n	800ad8e <UART_SetConfig+0x5a6>
 800ac44:	697b      	ldr	r3, [r7, #20]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	4a8f      	ldr	r2, [pc, #572]	; (800ae88 <UART_SetConfig+0x6a0>)
 800ac4a:	4293      	cmp	r3, r2
 800ac4c:	d130      	bne.n	800acb0 <UART_SetConfig+0x4c8>
 800ac4e:	4b8d      	ldr	r3, [pc, #564]	; (800ae84 <UART_SetConfig+0x69c>)
 800ac50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac52:	f003 0307 	and.w	r3, r3, #7
 800ac56:	2b05      	cmp	r3, #5
 800ac58:	d826      	bhi.n	800aca8 <UART_SetConfig+0x4c0>
 800ac5a:	a201      	add	r2, pc, #4	; (adr r2, 800ac60 <UART_SetConfig+0x478>)
 800ac5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac60:	0800ac79 	.word	0x0800ac79
 800ac64:	0800ac81 	.word	0x0800ac81
 800ac68:	0800ac89 	.word	0x0800ac89
 800ac6c:	0800ac91 	.word	0x0800ac91
 800ac70:	0800ac99 	.word	0x0800ac99
 800ac74:	0800aca1 	.word	0x0800aca1
 800ac78:	2300      	movs	r3, #0
 800ac7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac7e:	e086      	b.n	800ad8e <UART_SetConfig+0x5a6>
 800ac80:	2304      	movs	r3, #4
 800ac82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac86:	e082      	b.n	800ad8e <UART_SetConfig+0x5a6>
 800ac88:	2308      	movs	r3, #8
 800ac8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac8e:	e07e      	b.n	800ad8e <UART_SetConfig+0x5a6>
 800ac90:	2310      	movs	r3, #16
 800ac92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac96:	e07a      	b.n	800ad8e <UART_SetConfig+0x5a6>
 800ac98:	2320      	movs	r3, #32
 800ac9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac9e:	e076      	b.n	800ad8e <UART_SetConfig+0x5a6>
 800aca0:	2340      	movs	r3, #64	; 0x40
 800aca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aca6:	e072      	b.n	800ad8e <UART_SetConfig+0x5a6>
 800aca8:	2380      	movs	r3, #128	; 0x80
 800acaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800acae:	e06e      	b.n	800ad8e <UART_SetConfig+0x5a6>
 800acb0:	697b      	ldr	r3, [r7, #20]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	4a75      	ldr	r2, [pc, #468]	; (800ae8c <UART_SetConfig+0x6a4>)
 800acb6:	4293      	cmp	r3, r2
 800acb8:	d130      	bne.n	800ad1c <UART_SetConfig+0x534>
 800acba:	4b72      	ldr	r3, [pc, #456]	; (800ae84 <UART_SetConfig+0x69c>)
 800acbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acbe:	f003 0307 	and.w	r3, r3, #7
 800acc2:	2b05      	cmp	r3, #5
 800acc4:	d826      	bhi.n	800ad14 <UART_SetConfig+0x52c>
 800acc6:	a201      	add	r2, pc, #4	; (adr r2, 800accc <UART_SetConfig+0x4e4>)
 800acc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800accc:	0800ace5 	.word	0x0800ace5
 800acd0:	0800aced 	.word	0x0800aced
 800acd4:	0800acf5 	.word	0x0800acf5
 800acd8:	0800acfd 	.word	0x0800acfd
 800acdc:	0800ad05 	.word	0x0800ad05
 800ace0:	0800ad0d 	.word	0x0800ad0d
 800ace4:	2300      	movs	r3, #0
 800ace6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800acea:	e050      	b.n	800ad8e <UART_SetConfig+0x5a6>
 800acec:	2304      	movs	r3, #4
 800acee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800acf2:	e04c      	b.n	800ad8e <UART_SetConfig+0x5a6>
 800acf4:	2308      	movs	r3, #8
 800acf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800acfa:	e048      	b.n	800ad8e <UART_SetConfig+0x5a6>
 800acfc:	2310      	movs	r3, #16
 800acfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad02:	e044      	b.n	800ad8e <UART_SetConfig+0x5a6>
 800ad04:	2320      	movs	r3, #32
 800ad06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad0a:	e040      	b.n	800ad8e <UART_SetConfig+0x5a6>
 800ad0c:	2340      	movs	r3, #64	; 0x40
 800ad0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad12:	e03c      	b.n	800ad8e <UART_SetConfig+0x5a6>
 800ad14:	2380      	movs	r3, #128	; 0x80
 800ad16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad1a:	e038      	b.n	800ad8e <UART_SetConfig+0x5a6>
 800ad1c:	697b      	ldr	r3, [r7, #20]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	4a5b      	ldr	r2, [pc, #364]	; (800ae90 <UART_SetConfig+0x6a8>)
 800ad22:	4293      	cmp	r3, r2
 800ad24:	d130      	bne.n	800ad88 <UART_SetConfig+0x5a0>
 800ad26:	4b57      	ldr	r3, [pc, #348]	; (800ae84 <UART_SetConfig+0x69c>)
 800ad28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad2a:	f003 0307 	and.w	r3, r3, #7
 800ad2e:	2b05      	cmp	r3, #5
 800ad30:	d826      	bhi.n	800ad80 <UART_SetConfig+0x598>
 800ad32:	a201      	add	r2, pc, #4	; (adr r2, 800ad38 <UART_SetConfig+0x550>)
 800ad34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad38:	0800ad51 	.word	0x0800ad51
 800ad3c:	0800ad59 	.word	0x0800ad59
 800ad40:	0800ad61 	.word	0x0800ad61
 800ad44:	0800ad69 	.word	0x0800ad69
 800ad48:	0800ad71 	.word	0x0800ad71
 800ad4c:	0800ad79 	.word	0x0800ad79
 800ad50:	2302      	movs	r3, #2
 800ad52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad56:	e01a      	b.n	800ad8e <UART_SetConfig+0x5a6>
 800ad58:	2304      	movs	r3, #4
 800ad5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad5e:	e016      	b.n	800ad8e <UART_SetConfig+0x5a6>
 800ad60:	2308      	movs	r3, #8
 800ad62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad66:	e012      	b.n	800ad8e <UART_SetConfig+0x5a6>
 800ad68:	2310      	movs	r3, #16
 800ad6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad6e:	e00e      	b.n	800ad8e <UART_SetConfig+0x5a6>
 800ad70:	2320      	movs	r3, #32
 800ad72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad76:	e00a      	b.n	800ad8e <UART_SetConfig+0x5a6>
 800ad78:	2340      	movs	r3, #64	; 0x40
 800ad7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad7e:	e006      	b.n	800ad8e <UART_SetConfig+0x5a6>
 800ad80:	2380      	movs	r3, #128	; 0x80
 800ad82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad86:	e002      	b.n	800ad8e <UART_SetConfig+0x5a6>
 800ad88:	2380      	movs	r3, #128	; 0x80
 800ad8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ad8e:	697b      	ldr	r3, [r7, #20]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	4a3f      	ldr	r2, [pc, #252]	; (800ae90 <UART_SetConfig+0x6a8>)
 800ad94:	4293      	cmp	r3, r2
 800ad96:	f040 80f8 	bne.w	800af8a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ad9a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ad9e:	2b20      	cmp	r3, #32
 800ada0:	dc46      	bgt.n	800ae30 <UART_SetConfig+0x648>
 800ada2:	2b02      	cmp	r3, #2
 800ada4:	f2c0 8082 	blt.w	800aeac <UART_SetConfig+0x6c4>
 800ada8:	3b02      	subs	r3, #2
 800adaa:	2b1e      	cmp	r3, #30
 800adac:	d87e      	bhi.n	800aeac <UART_SetConfig+0x6c4>
 800adae:	a201      	add	r2, pc, #4	; (adr r2, 800adb4 <UART_SetConfig+0x5cc>)
 800adb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adb4:	0800ae37 	.word	0x0800ae37
 800adb8:	0800aead 	.word	0x0800aead
 800adbc:	0800ae3f 	.word	0x0800ae3f
 800adc0:	0800aead 	.word	0x0800aead
 800adc4:	0800aead 	.word	0x0800aead
 800adc8:	0800aead 	.word	0x0800aead
 800adcc:	0800ae4f 	.word	0x0800ae4f
 800add0:	0800aead 	.word	0x0800aead
 800add4:	0800aead 	.word	0x0800aead
 800add8:	0800aead 	.word	0x0800aead
 800addc:	0800aead 	.word	0x0800aead
 800ade0:	0800aead 	.word	0x0800aead
 800ade4:	0800aead 	.word	0x0800aead
 800ade8:	0800aead 	.word	0x0800aead
 800adec:	0800ae5f 	.word	0x0800ae5f
 800adf0:	0800aead 	.word	0x0800aead
 800adf4:	0800aead 	.word	0x0800aead
 800adf8:	0800aead 	.word	0x0800aead
 800adfc:	0800aead 	.word	0x0800aead
 800ae00:	0800aead 	.word	0x0800aead
 800ae04:	0800aead 	.word	0x0800aead
 800ae08:	0800aead 	.word	0x0800aead
 800ae0c:	0800aead 	.word	0x0800aead
 800ae10:	0800aead 	.word	0x0800aead
 800ae14:	0800aead 	.word	0x0800aead
 800ae18:	0800aead 	.word	0x0800aead
 800ae1c:	0800aead 	.word	0x0800aead
 800ae20:	0800aead 	.word	0x0800aead
 800ae24:	0800aead 	.word	0x0800aead
 800ae28:	0800aead 	.word	0x0800aead
 800ae2c:	0800ae9f 	.word	0x0800ae9f
 800ae30:	2b40      	cmp	r3, #64	; 0x40
 800ae32:	d037      	beq.n	800aea4 <UART_SetConfig+0x6bc>
 800ae34:	e03a      	b.n	800aeac <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ae36:	f7fd fd89 	bl	800894c <HAL_RCCEx_GetD3PCLK1Freq>
 800ae3a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ae3c:	e03c      	b.n	800aeb8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ae42:	4618      	mov	r0, r3
 800ae44:	f7fd fd98 	bl	8008978 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ae48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae4c:	e034      	b.n	800aeb8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae4e:	f107 0318 	add.w	r3, r7, #24
 800ae52:	4618      	mov	r0, r3
 800ae54:	f7fd fee4 	bl	8008c20 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ae58:	69fb      	ldr	r3, [r7, #28]
 800ae5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae5c:	e02c      	b.n	800aeb8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae5e:	4b09      	ldr	r3, [pc, #36]	; (800ae84 <UART_SetConfig+0x69c>)
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	f003 0320 	and.w	r3, r3, #32
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d016      	beq.n	800ae98 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ae6a:	4b06      	ldr	r3, [pc, #24]	; (800ae84 <UART_SetConfig+0x69c>)
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	08db      	lsrs	r3, r3, #3
 800ae70:	f003 0303 	and.w	r3, r3, #3
 800ae74:	4a07      	ldr	r2, [pc, #28]	; (800ae94 <UART_SetConfig+0x6ac>)
 800ae76:	fa22 f303 	lsr.w	r3, r2, r3
 800ae7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ae7c:	e01c      	b.n	800aeb8 <UART_SetConfig+0x6d0>
 800ae7e:	bf00      	nop
 800ae80:	40011400 	.word	0x40011400
 800ae84:	58024400 	.word	0x58024400
 800ae88:	40007800 	.word	0x40007800
 800ae8c:	40007c00 	.word	0x40007c00
 800ae90:	58000c00 	.word	0x58000c00
 800ae94:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800ae98:	4b9d      	ldr	r3, [pc, #628]	; (800b110 <UART_SetConfig+0x928>)
 800ae9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae9c:	e00c      	b.n	800aeb8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ae9e:	4b9d      	ldr	r3, [pc, #628]	; (800b114 <UART_SetConfig+0x92c>)
 800aea0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aea2:	e009      	b.n	800aeb8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aea4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aea8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aeaa:	e005      	b.n	800aeb8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800aeac:	2300      	movs	r3, #0
 800aeae:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800aeb0:	2301      	movs	r3, #1
 800aeb2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800aeb6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800aeb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	f000 81de 	beq.w	800b27c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800aec0:	697b      	ldr	r3, [r7, #20]
 800aec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aec4:	4a94      	ldr	r2, [pc, #592]	; (800b118 <UART_SetConfig+0x930>)
 800aec6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aeca:	461a      	mov	r2, r3
 800aecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aece:	fbb3 f3f2 	udiv	r3, r3, r2
 800aed2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aed4:	697b      	ldr	r3, [r7, #20]
 800aed6:	685a      	ldr	r2, [r3, #4]
 800aed8:	4613      	mov	r3, r2
 800aeda:	005b      	lsls	r3, r3, #1
 800aedc:	4413      	add	r3, r2
 800aede:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aee0:	429a      	cmp	r2, r3
 800aee2:	d305      	bcc.n	800aef0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800aee4:	697b      	ldr	r3, [r7, #20]
 800aee6:	685b      	ldr	r3, [r3, #4]
 800aee8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aeea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aeec:	429a      	cmp	r2, r3
 800aeee:	d903      	bls.n	800aef8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800aef0:	2301      	movs	r3, #1
 800aef2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800aef6:	e1c1      	b.n	800b27c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aef8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aefa:	2200      	movs	r2, #0
 800aefc:	60bb      	str	r3, [r7, #8]
 800aefe:	60fa      	str	r2, [r7, #12]
 800af00:	697b      	ldr	r3, [r7, #20]
 800af02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af04:	4a84      	ldr	r2, [pc, #528]	; (800b118 <UART_SetConfig+0x930>)
 800af06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af0a:	b29b      	uxth	r3, r3
 800af0c:	2200      	movs	r2, #0
 800af0e:	603b      	str	r3, [r7, #0]
 800af10:	607a      	str	r2, [r7, #4]
 800af12:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af16:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800af1a:	f7f5 f9e5 	bl	80002e8 <__aeabi_uldivmod>
 800af1e:	4602      	mov	r2, r0
 800af20:	460b      	mov	r3, r1
 800af22:	4610      	mov	r0, r2
 800af24:	4619      	mov	r1, r3
 800af26:	f04f 0200 	mov.w	r2, #0
 800af2a:	f04f 0300 	mov.w	r3, #0
 800af2e:	020b      	lsls	r3, r1, #8
 800af30:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800af34:	0202      	lsls	r2, r0, #8
 800af36:	6979      	ldr	r1, [r7, #20]
 800af38:	6849      	ldr	r1, [r1, #4]
 800af3a:	0849      	lsrs	r1, r1, #1
 800af3c:	2000      	movs	r0, #0
 800af3e:	460c      	mov	r4, r1
 800af40:	4605      	mov	r5, r0
 800af42:	eb12 0804 	adds.w	r8, r2, r4
 800af46:	eb43 0905 	adc.w	r9, r3, r5
 800af4a:	697b      	ldr	r3, [r7, #20]
 800af4c:	685b      	ldr	r3, [r3, #4]
 800af4e:	2200      	movs	r2, #0
 800af50:	469a      	mov	sl, r3
 800af52:	4693      	mov	fp, r2
 800af54:	4652      	mov	r2, sl
 800af56:	465b      	mov	r3, fp
 800af58:	4640      	mov	r0, r8
 800af5a:	4649      	mov	r1, r9
 800af5c:	f7f5 f9c4 	bl	80002e8 <__aeabi_uldivmod>
 800af60:	4602      	mov	r2, r0
 800af62:	460b      	mov	r3, r1
 800af64:	4613      	mov	r3, r2
 800af66:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800af68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800af6e:	d308      	bcc.n	800af82 <UART_SetConfig+0x79a>
 800af70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af76:	d204      	bcs.n	800af82 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800af78:	697b      	ldr	r3, [r7, #20]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800af7e:	60da      	str	r2, [r3, #12]
 800af80:	e17c      	b.n	800b27c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800af82:	2301      	movs	r3, #1
 800af84:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800af88:	e178      	b.n	800b27c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800af8a:	697b      	ldr	r3, [r7, #20]
 800af8c:	69db      	ldr	r3, [r3, #28]
 800af8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af92:	f040 80c5 	bne.w	800b120 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800af96:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800af9a:	2b20      	cmp	r3, #32
 800af9c:	dc48      	bgt.n	800b030 <UART_SetConfig+0x848>
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	db7b      	blt.n	800b09a <UART_SetConfig+0x8b2>
 800afa2:	2b20      	cmp	r3, #32
 800afa4:	d879      	bhi.n	800b09a <UART_SetConfig+0x8b2>
 800afa6:	a201      	add	r2, pc, #4	; (adr r2, 800afac <UART_SetConfig+0x7c4>)
 800afa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afac:	0800b037 	.word	0x0800b037
 800afb0:	0800b03f 	.word	0x0800b03f
 800afb4:	0800b09b 	.word	0x0800b09b
 800afb8:	0800b09b 	.word	0x0800b09b
 800afbc:	0800b047 	.word	0x0800b047
 800afc0:	0800b09b 	.word	0x0800b09b
 800afc4:	0800b09b 	.word	0x0800b09b
 800afc8:	0800b09b 	.word	0x0800b09b
 800afcc:	0800b057 	.word	0x0800b057
 800afd0:	0800b09b 	.word	0x0800b09b
 800afd4:	0800b09b 	.word	0x0800b09b
 800afd8:	0800b09b 	.word	0x0800b09b
 800afdc:	0800b09b 	.word	0x0800b09b
 800afe0:	0800b09b 	.word	0x0800b09b
 800afe4:	0800b09b 	.word	0x0800b09b
 800afe8:	0800b09b 	.word	0x0800b09b
 800afec:	0800b067 	.word	0x0800b067
 800aff0:	0800b09b 	.word	0x0800b09b
 800aff4:	0800b09b 	.word	0x0800b09b
 800aff8:	0800b09b 	.word	0x0800b09b
 800affc:	0800b09b 	.word	0x0800b09b
 800b000:	0800b09b 	.word	0x0800b09b
 800b004:	0800b09b 	.word	0x0800b09b
 800b008:	0800b09b 	.word	0x0800b09b
 800b00c:	0800b09b 	.word	0x0800b09b
 800b010:	0800b09b 	.word	0x0800b09b
 800b014:	0800b09b 	.word	0x0800b09b
 800b018:	0800b09b 	.word	0x0800b09b
 800b01c:	0800b09b 	.word	0x0800b09b
 800b020:	0800b09b 	.word	0x0800b09b
 800b024:	0800b09b 	.word	0x0800b09b
 800b028:	0800b09b 	.word	0x0800b09b
 800b02c:	0800b08d 	.word	0x0800b08d
 800b030:	2b40      	cmp	r3, #64	; 0x40
 800b032:	d02e      	beq.n	800b092 <UART_SetConfig+0x8aa>
 800b034:	e031      	b.n	800b09a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b036:	f7fb fcd3 	bl	80069e0 <HAL_RCC_GetPCLK1Freq>
 800b03a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b03c:	e033      	b.n	800b0a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b03e:	f7fb fce5 	bl	8006a0c <HAL_RCC_GetPCLK2Freq>
 800b042:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b044:	e02f      	b.n	800b0a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b046:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b04a:	4618      	mov	r0, r3
 800b04c:	f7fd fc94 	bl	8008978 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b052:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b054:	e027      	b.n	800b0a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b056:	f107 0318 	add.w	r3, r7, #24
 800b05a:	4618      	mov	r0, r3
 800b05c:	f7fd fde0 	bl	8008c20 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b060:	69fb      	ldr	r3, [r7, #28]
 800b062:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b064:	e01f      	b.n	800b0a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b066:	4b2d      	ldr	r3, [pc, #180]	; (800b11c <UART_SetConfig+0x934>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	f003 0320 	and.w	r3, r3, #32
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d009      	beq.n	800b086 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b072:	4b2a      	ldr	r3, [pc, #168]	; (800b11c <UART_SetConfig+0x934>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	08db      	lsrs	r3, r3, #3
 800b078:	f003 0303 	and.w	r3, r3, #3
 800b07c:	4a24      	ldr	r2, [pc, #144]	; (800b110 <UART_SetConfig+0x928>)
 800b07e:	fa22 f303 	lsr.w	r3, r2, r3
 800b082:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b084:	e00f      	b.n	800b0a6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b086:	4b22      	ldr	r3, [pc, #136]	; (800b110 <UART_SetConfig+0x928>)
 800b088:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b08a:	e00c      	b.n	800b0a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b08c:	4b21      	ldr	r3, [pc, #132]	; (800b114 <UART_SetConfig+0x92c>)
 800b08e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b090:	e009      	b.n	800b0a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b092:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b096:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b098:	e005      	b.n	800b0a6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b09a:	2300      	movs	r3, #0
 800b09c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b09e:	2301      	movs	r3, #1
 800b0a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b0a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b0a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	f000 80e7 	beq.w	800b27c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b0ae:	697b      	ldr	r3, [r7, #20]
 800b0b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0b2:	4a19      	ldr	r2, [pc, #100]	; (800b118 <UART_SetConfig+0x930>)
 800b0b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b0b8:	461a      	mov	r2, r3
 800b0ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0bc:	fbb3 f3f2 	udiv	r3, r3, r2
 800b0c0:	005a      	lsls	r2, r3, #1
 800b0c2:	697b      	ldr	r3, [r7, #20]
 800b0c4:	685b      	ldr	r3, [r3, #4]
 800b0c6:	085b      	lsrs	r3, r3, #1
 800b0c8:	441a      	add	r2, r3
 800b0ca:	697b      	ldr	r3, [r7, #20]
 800b0cc:	685b      	ldr	r3, [r3, #4]
 800b0ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0d2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b0d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0d6:	2b0f      	cmp	r3, #15
 800b0d8:	d916      	bls.n	800b108 <UART_SetConfig+0x920>
 800b0da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b0e0:	d212      	bcs.n	800b108 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b0e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0e4:	b29b      	uxth	r3, r3
 800b0e6:	f023 030f 	bic.w	r3, r3, #15
 800b0ea:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b0ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ee:	085b      	lsrs	r3, r3, #1
 800b0f0:	b29b      	uxth	r3, r3
 800b0f2:	f003 0307 	and.w	r3, r3, #7
 800b0f6:	b29a      	uxth	r2, r3
 800b0f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b0fa:	4313      	orrs	r3, r2
 800b0fc:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800b0fe:	697b      	ldr	r3, [r7, #20]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b104:	60da      	str	r2, [r3, #12]
 800b106:	e0b9      	b.n	800b27c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b108:	2301      	movs	r3, #1
 800b10a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b10e:	e0b5      	b.n	800b27c <UART_SetConfig+0xa94>
 800b110:	03d09000 	.word	0x03d09000
 800b114:	003d0900 	.word	0x003d0900
 800b118:	0800c260 	.word	0x0800c260
 800b11c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800b120:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b124:	2b20      	cmp	r3, #32
 800b126:	dc49      	bgt.n	800b1bc <UART_SetConfig+0x9d4>
 800b128:	2b00      	cmp	r3, #0
 800b12a:	db7c      	blt.n	800b226 <UART_SetConfig+0xa3e>
 800b12c:	2b20      	cmp	r3, #32
 800b12e:	d87a      	bhi.n	800b226 <UART_SetConfig+0xa3e>
 800b130:	a201      	add	r2, pc, #4	; (adr r2, 800b138 <UART_SetConfig+0x950>)
 800b132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b136:	bf00      	nop
 800b138:	0800b1c3 	.word	0x0800b1c3
 800b13c:	0800b1cb 	.word	0x0800b1cb
 800b140:	0800b227 	.word	0x0800b227
 800b144:	0800b227 	.word	0x0800b227
 800b148:	0800b1d3 	.word	0x0800b1d3
 800b14c:	0800b227 	.word	0x0800b227
 800b150:	0800b227 	.word	0x0800b227
 800b154:	0800b227 	.word	0x0800b227
 800b158:	0800b1e3 	.word	0x0800b1e3
 800b15c:	0800b227 	.word	0x0800b227
 800b160:	0800b227 	.word	0x0800b227
 800b164:	0800b227 	.word	0x0800b227
 800b168:	0800b227 	.word	0x0800b227
 800b16c:	0800b227 	.word	0x0800b227
 800b170:	0800b227 	.word	0x0800b227
 800b174:	0800b227 	.word	0x0800b227
 800b178:	0800b1f3 	.word	0x0800b1f3
 800b17c:	0800b227 	.word	0x0800b227
 800b180:	0800b227 	.word	0x0800b227
 800b184:	0800b227 	.word	0x0800b227
 800b188:	0800b227 	.word	0x0800b227
 800b18c:	0800b227 	.word	0x0800b227
 800b190:	0800b227 	.word	0x0800b227
 800b194:	0800b227 	.word	0x0800b227
 800b198:	0800b227 	.word	0x0800b227
 800b19c:	0800b227 	.word	0x0800b227
 800b1a0:	0800b227 	.word	0x0800b227
 800b1a4:	0800b227 	.word	0x0800b227
 800b1a8:	0800b227 	.word	0x0800b227
 800b1ac:	0800b227 	.word	0x0800b227
 800b1b0:	0800b227 	.word	0x0800b227
 800b1b4:	0800b227 	.word	0x0800b227
 800b1b8:	0800b219 	.word	0x0800b219
 800b1bc:	2b40      	cmp	r3, #64	; 0x40
 800b1be:	d02e      	beq.n	800b21e <UART_SetConfig+0xa36>
 800b1c0:	e031      	b.n	800b226 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b1c2:	f7fb fc0d 	bl	80069e0 <HAL_RCC_GetPCLK1Freq>
 800b1c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b1c8:	e033      	b.n	800b232 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b1ca:	f7fb fc1f 	bl	8006a0c <HAL_RCC_GetPCLK2Freq>
 800b1ce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b1d0:	e02f      	b.n	800b232 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b1d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	f7fd fbce 	bl	8008978 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b1dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b1e0:	e027      	b.n	800b232 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b1e2:	f107 0318 	add.w	r3, r7, #24
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	f7fd fd1a 	bl	8008c20 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b1ec:	69fb      	ldr	r3, [r7, #28]
 800b1ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b1f0:	e01f      	b.n	800b232 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b1f2:	4b2d      	ldr	r3, [pc, #180]	; (800b2a8 <UART_SetConfig+0xac0>)
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	f003 0320 	and.w	r3, r3, #32
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d009      	beq.n	800b212 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b1fe:	4b2a      	ldr	r3, [pc, #168]	; (800b2a8 <UART_SetConfig+0xac0>)
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	08db      	lsrs	r3, r3, #3
 800b204:	f003 0303 	and.w	r3, r3, #3
 800b208:	4a28      	ldr	r2, [pc, #160]	; (800b2ac <UART_SetConfig+0xac4>)
 800b20a:	fa22 f303 	lsr.w	r3, r2, r3
 800b20e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b210:	e00f      	b.n	800b232 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800b212:	4b26      	ldr	r3, [pc, #152]	; (800b2ac <UART_SetConfig+0xac4>)
 800b214:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b216:	e00c      	b.n	800b232 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b218:	4b25      	ldr	r3, [pc, #148]	; (800b2b0 <UART_SetConfig+0xac8>)
 800b21a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b21c:	e009      	b.n	800b232 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b21e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b222:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b224:	e005      	b.n	800b232 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800b226:	2300      	movs	r3, #0
 800b228:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b22a:	2301      	movs	r3, #1
 800b22c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b230:	bf00      	nop
    }

    if (pclk != 0U)
 800b232:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b234:	2b00      	cmp	r3, #0
 800b236:	d021      	beq.n	800b27c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b238:	697b      	ldr	r3, [r7, #20]
 800b23a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b23c:	4a1d      	ldr	r2, [pc, #116]	; (800b2b4 <UART_SetConfig+0xacc>)
 800b23e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b242:	461a      	mov	r2, r3
 800b244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b246:	fbb3 f2f2 	udiv	r2, r3, r2
 800b24a:	697b      	ldr	r3, [r7, #20]
 800b24c:	685b      	ldr	r3, [r3, #4]
 800b24e:	085b      	lsrs	r3, r3, #1
 800b250:	441a      	add	r2, r3
 800b252:	697b      	ldr	r3, [r7, #20]
 800b254:	685b      	ldr	r3, [r3, #4]
 800b256:	fbb2 f3f3 	udiv	r3, r2, r3
 800b25a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b25c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b25e:	2b0f      	cmp	r3, #15
 800b260:	d909      	bls.n	800b276 <UART_SetConfig+0xa8e>
 800b262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b268:	d205      	bcs.n	800b276 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b26a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b26c:	b29a      	uxth	r2, r3
 800b26e:	697b      	ldr	r3, [r7, #20]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	60da      	str	r2, [r3, #12]
 800b274:	e002      	b.n	800b27c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b276:	2301      	movs	r3, #1
 800b278:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b27c:	697b      	ldr	r3, [r7, #20]
 800b27e:	2201      	movs	r2, #1
 800b280:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b284:	697b      	ldr	r3, [r7, #20]
 800b286:	2201      	movs	r2, #1
 800b288:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b28c:	697b      	ldr	r3, [r7, #20]
 800b28e:	2200      	movs	r2, #0
 800b290:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800b292:	697b      	ldr	r3, [r7, #20]
 800b294:	2200      	movs	r2, #0
 800b296:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800b298:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800b29c:	4618      	mov	r0, r3
 800b29e:	3748      	adds	r7, #72	; 0x48
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b2a6:	bf00      	nop
 800b2a8:	58024400 	.word	0x58024400
 800b2ac:	03d09000 	.word	0x03d09000
 800b2b0:	003d0900 	.word	0x003d0900
 800b2b4:	0800c260 	.word	0x0800c260

0800b2b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b2b8:	b480      	push	{r7}
 800b2ba:	b083      	sub	sp, #12
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2c4:	f003 0301 	and.w	r3, r3, #1
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d00a      	beq.n	800b2e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	685b      	ldr	r3, [r3, #4]
 800b2d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	430a      	orrs	r2, r1
 800b2e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2e6:	f003 0302 	and.w	r3, r3, #2
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d00a      	beq.n	800b304 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	685b      	ldr	r3, [r3, #4]
 800b2f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	430a      	orrs	r2, r1
 800b302:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b308:	f003 0304 	and.w	r3, r3, #4
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d00a      	beq.n	800b326 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	685b      	ldr	r3, [r3, #4]
 800b316:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	430a      	orrs	r2, r1
 800b324:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b32a:	f003 0308 	and.w	r3, r3, #8
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d00a      	beq.n	800b348 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	685b      	ldr	r3, [r3, #4]
 800b338:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	430a      	orrs	r2, r1
 800b346:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b34c:	f003 0310 	and.w	r3, r3, #16
 800b350:	2b00      	cmp	r3, #0
 800b352:	d00a      	beq.n	800b36a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	689b      	ldr	r3, [r3, #8]
 800b35a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	430a      	orrs	r2, r1
 800b368:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b36e:	f003 0320 	and.w	r3, r3, #32
 800b372:	2b00      	cmp	r3, #0
 800b374:	d00a      	beq.n	800b38c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	689b      	ldr	r3, [r3, #8]
 800b37c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	430a      	orrs	r2, r1
 800b38a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b394:	2b00      	cmp	r3, #0
 800b396:	d01a      	beq.n	800b3ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	685b      	ldr	r3, [r3, #4]
 800b39e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	430a      	orrs	r2, r1
 800b3ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b3b6:	d10a      	bne.n	800b3ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	685b      	ldr	r3, [r3, #4]
 800b3be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	430a      	orrs	r2, r1
 800b3cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d00a      	beq.n	800b3f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	685b      	ldr	r3, [r3, #4]
 800b3e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	430a      	orrs	r2, r1
 800b3ee:	605a      	str	r2, [r3, #4]
  }
}
 800b3f0:	bf00      	nop
 800b3f2:	370c      	adds	r7, #12
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fa:	4770      	bx	lr

0800b3fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b098      	sub	sp, #96	; 0x60
 800b400:	af02      	add	r7, sp, #8
 800b402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2200      	movs	r2, #0
 800b408:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b40c:	f7f7 fbca 	bl	8002ba4 <HAL_GetTick>
 800b410:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	f003 0308 	and.w	r3, r3, #8
 800b41c:	2b08      	cmp	r3, #8
 800b41e:	d12f      	bne.n	800b480 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b420:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b424:	9300      	str	r3, [sp, #0]
 800b426:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b428:	2200      	movs	r2, #0
 800b42a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b42e:	6878      	ldr	r0, [r7, #4]
 800b430:	f000 f88e 	bl	800b550 <UART_WaitOnFlagUntilTimeout>
 800b434:	4603      	mov	r3, r0
 800b436:	2b00      	cmp	r3, #0
 800b438:	d022      	beq.n	800b480 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b442:	e853 3f00 	ldrex	r3, [r3]
 800b446:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b44a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b44e:	653b      	str	r3, [r7, #80]	; 0x50
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	461a      	mov	r2, r3
 800b456:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b458:	647b      	str	r3, [r7, #68]	; 0x44
 800b45a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b45c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b45e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b460:	e841 2300 	strex	r3, r2, [r1]
 800b464:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d1e6      	bne.n	800b43a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2220      	movs	r2, #32
 800b470:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2200      	movs	r2, #0
 800b478:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b47c:	2303      	movs	r3, #3
 800b47e:	e063      	b.n	800b548 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	f003 0304 	and.w	r3, r3, #4
 800b48a:	2b04      	cmp	r3, #4
 800b48c:	d149      	bne.n	800b522 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b48e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b492:	9300      	str	r3, [sp, #0]
 800b494:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b496:	2200      	movs	r2, #0
 800b498:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b49c:	6878      	ldr	r0, [r7, #4]
 800b49e:	f000 f857 	bl	800b550 <UART_WaitOnFlagUntilTimeout>
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d03c      	beq.n	800b522 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4b0:	e853 3f00 	ldrex	r3, [r3]
 800b4b4:	623b      	str	r3, [r7, #32]
   return(result);
 800b4b6:	6a3b      	ldr	r3, [r7, #32]
 800b4b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b4bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	461a      	mov	r2, r3
 800b4c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4c6:	633b      	str	r3, [r7, #48]	; 0x30
 800b4c8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b4cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4ce:	e841 2300 	strex	r3, r2, [r1]
 800b4d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b4d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d1e6      	bne.n	800b4a8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	3308      	adds	r3, #8
 800b4e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4e2:	693b      	ldr	r3, [r7, #16]
 800b4e4:	e853 3f00 	ldrex	r3, [r3]
 800b4e8:	60fb      	str	r3, [r7, #12]
   return(result);
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	f023 0301 	bic.w	r3, r3, #1
 800b4f0:	64bb      	str	r3, [r7, #72]	; 0x48
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	3308      	adds	r3, #8
 800b4f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b4fa:	61fa      	str	r2, [r7, #28]
 800b4fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4fe:	69b9      	ldr	r1, [r7, #24]
 800b500:	69fa      	ldr	r2, [r7, #28]
 800b502:	e841 2300 	strex	r3, r2, [r1]
 800b506:	617b      	str	r3, [r7, #20]
   return(result);
 800b508:	697b      	ldr	r3, [r7, #20]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d1e5      	bne.n	800b4da <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2220      	movs	r2, #32
 800b512:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	2200      	movs	r2, #0
 800b51a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b51e:	2303      	movs	r3, #3
 800b520:	e012      	b.n	800b548 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	2220      	movs	r2, #32
 800b526:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	2220      	movs	r2, #32
 800b52e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	2200      	movs	r2, #0
 800b536:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2200      	movs	r2, #0
 800b53c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	2200      	movs	r2, #0
 800b542:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b546:	2300      	movs	r3, #0
}
 800b548:	4618      	mov	r0, r3
 800b54a:	3758      	adds	r7, #88	; 0x58
 800b54c:	46bd      	mov	sp, r7
 800b54e:	bd80      	pop	{r7, pc}

0800b550 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b084      	sub	sp, #16
 800b554:	af00      	add	r7, sp, #0
 800b556:	60f8      	str	r0, [r7, #12]
 800b558:	60b9      	str	r1, [r7, #8]
 800b55a:	603b      	str	r3, [r7, #0]
 800b55c:	4613      	mov	r3, r2
 800b55e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b560:	e049      	b.n	800b5f6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b562:	69bb      	ldr	r3, [r7, #24]
 800b564:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b568:	d045      	beq.n	800b5f6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b56a:	f7f7 fb1b 	bl	8002ba4 <HAL_GetTick>
 800b56e:	4602      	mov	r2, r0
 800b570:	683b      	ldr	r3, [r7, #0]
 800b572:	1ad3      	subs	r3, r2, r3
 800b574:	69ba      	ldr	r2, [r7, #24]
 800b576:	429a      	cmp	r2, r3
 800b578:	d302      	bcc.n	800b580 <UART_WaitOnFlagUntilTimeout+0x30>
 800b57a:	69bb      	ldr	r3, [r7, #24]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d101      	bne.n	800b584 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b580:	2303      	movs	r3, #3
 800b582:	e048      	b.n	800b616 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	f003 0304 	and.w	r3, r3, #4
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d031      	beq.n	800b5f6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	69db      	ldr	r3, [r3, #28]
 800b598:	f003 0308 	and.w	r3, r3, #8
 800b59c:	2b08      	cmp	r3, #8
 800b59e:	d110      	bne.n	800b5c2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	2208      	movs	r2, #8
 800b5a6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800b5a8:	68f8      	ldr	r0, [r7, #12]
 800b5aa:	f000 f839 	bl	800b620 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	2208      	movs	r2, #8
 800b5b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800b5be:	2301      	movs	r3, #1
 800b5c0:	e029      	b.n	800b616 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	69db      	ldr	r3, [r3, #28]
 800b5c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b5cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b5d0:	d111      	bne.n	800b5f6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b5da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b5dc:	68f8      	ldr	r0, [r7, #12]
 800b5de:	f000 f81f 	bl	800b620 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	2220      	movs	r2, #32
 800b5e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800b5f2:	2303      	movs	r3, #3
 800b5f4:	e00f      	b.n	800b616 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	69da      	ldr	r2, [r3, #28]
 800b5fc:	68bb      	ldr	r3, [r7, #8]
 800b5fe:	4013      	ands	r3, r2
 800b600:	68ba      	ldr	r2, [r7, #8]
 800b602:	429a      	cmp	r2, r3
 800b604:	bf0c      	ite	eq
 800b606:	2301      	moveq	r3, #1
 800b608:	2300      	movne	r3, #0
 800b60a:	b2db      	uxtb	r3, r3
 800b60c:	461a      	mov	r2, r3
 800b60e:	79fb      	ldrb	r3, [r7, #7]
 800b610:	429a      	cmp	r2, r3
 800b612:	d0a6      	beq.n	800b562 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b614:	2300      	movs	r3, #0
}
 800b616:	4618      	mov	r0, r3
 800b618:	3710      	adds	r7, #16
 800b61a:	46bd      	mov	sp, r7
 800b61c:	bd80      	pop	{r7, pc}
	...

0800b620 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b620:	b480      	push	{r7}
 800b622:	b095      	sub	sp, #84	; 0x54
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b62e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b630:	e853 3f00 	ldrex	r3, [r3]
 800b634:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b638:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b63c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	461a      	mov	r2, r3
 800b644:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b646:	643b      	str	r3, [r7, #64]	; 0x40
 800b648:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b64a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b64c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b64e:	e841 2300 	strex	r3, r2, [r1]
 800b652:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b656:	2b00      	cmp	r3, #0
 800b658:	d1e6      	bne.n	800b628 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	3308      	adds	r3, #8
 800b660:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b662:	6a3b      	ldr	r3, [r7, #32]
 800b664:	e853 3f00 	ldrex	r3, [r3]
 800b668:	61fb      	str	r3, [r7, #28]
   return(result);
 800b66a:	69fa      	ldr	r2, [r7, #28]
 800b66c:	4b1e      	ldr	r3, [pc, #120]	; (800b6e8 <UART_EndRxTransfer+0xc8>)
 800b66e:	4013      	ands	r3, r2
 800b670:	64bb      	str	r3, [r7, #72]	; 0x48
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	3308      	adds	r3, #8
 800b678:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b67a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b67c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b67e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b680:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b682:	e841 2300 	strex	r3, r2, [r1]
 800b686:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d1e5      	bne.n	800b65a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b692:	2b01      	cmp	r3, #1
 800b694:	d118      	bne.n	800b6c8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	e853 3f00 	ldrex	r3, [r3]
 800b6a2:	60bb      	str	r3, [r7, #8]
   return(result);
 800b6a4:	68bb      	ldr	r3, [r7, #8]
 800b6a6:	f023 0310 	bic.w	r3, r3, #16
 800b6aa:	647b      	str	r3, [r7, #68]	; 0x44
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	461a      	mov	r2, r3
 800b6b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b6b4:	61bb      	str	r3, [r7, #24]
 800b6b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6b8:	6979      	ldr	r1, [r7, #20]
 800b6ba:	69ba      	ldr	r2, [r7, #24]
 800b6bc:	e841 2300 	strex	r3, r2, [r1]
 800b6c0:	613b      	str	r3, [r7, #16]
   return(result);
 800b6c2:	693b      	ldr	r3, [r7, #16]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d1e6      	bne.n	800b696 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	2220      	movs	r2, #32
 800b6cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	2200      	movs	r2, #0
 800b6da:	675a      	str	r2, [r3, #116]	; 0x74
}
 800b6dc:	bf00      	nop
 800b6de:	3754      	adds	r7, #84	; 0x54
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e6:	4770      	bx	lr
 800b6e8:	effffffe 	.word	0xeffffffe

0800b6ec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b6ec:	b480      	push	{r7}
 800b6ee:	b085      	sub	sp, #20
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b6fa:	2b01      	cmp	r3, #1
 800b6fc:	d101      	bne.n	800b702 <HAL_UARTEx_DisableFifoMode+0x16>
 800b6fe:	2302      	movs	r3, #2
 800b700:	e027      	b.n	800b752 <HAL_UARTEx_DisableFifoMode+0x66>
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	2201      	movs	r2, #1
 800b706:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	2224      	movs	r2, #36	; 0x24
 800b70e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	681a      	ldr	r2, [r3, #0]
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	f022 0201 	bic.w	r2, r2, #1
 800b728:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b730:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	2200      	movs	r2, #0
 800b736:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	68fa      	ldr	r2, [r7, #12]
 800b73e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2220      	movs	r2, #32
 800b744:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	2200      	movs	r2, #0
 800b74c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b750:	2300      	movs	r3, #0
}
 800b752:	4618      	mov	r0, r3
 800b754:	3714      	adds	r7, #20
 800b756:	46bd      	mov	sp, r7
 800b758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75c:	4770      	bx	lr

0800b75e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b75e:	b580      	push	{r7, lr}
 800b760:	b084      	sub	sp, #16
 800b762:	af00      	add	r7, sp, #0
 800b764:	6078      	str	r0, [r7, #4]
 800b766:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b76e:	2b01      	cmp	r3, #1
 800b770:	d101      	bne.n	800b776 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b772:	2302      	movs	r3, #2
 800b774:	e02d      	b.n	800b7d2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2201      	movs	r2, #1
 800b77a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	2224      	movs	r2, #36	; 0x24
 800b782:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	681a      	ldr	r2, [r3, #0]
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	f022 0201 	bic.w	r2, r2, #1
 800b79c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	689b      	ldr	r3, [r3, #8]
 800b7a4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	683a      	ldr	r2, [r7, #0]
 800b7ae:	430a      	orrs	r2, r1
 800b7b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b7b2:	6878      	ldr	r0, [r7, #4]
 800b7b4:	f000 f850 	bl	800b858 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	68fa      	ldr	r2, [r7, #12]
 800b7be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2220      	movs	r2, #32
 800b7c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b7d0:	2300      	movs	r3, #0
}
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	3710      	adds	r7, #16
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	bd80      	pop	{r7, pc}

0800b7da <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b7da:	b580      	push	{r7, lr}
 800b7dc:	b084      	sub	sp, #16
 800b7de:	af00      	add	r7, sp, #0
 800b7e0:	6078      	str	r0, [r7, #4]
 800b7e2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b7ea:	2b01      	cmp	r3, #1
 800b7ec:	d101      	bne.n	800b7f2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b7ee:	2302      	movs	r3, #2
 800b7f0:	e02d      	b.n	800b84e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	2201      	movs	r2, #1
 800b7f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	2224      	movs	r2, #36	; 0x24
 800b7fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	681a      	ldr	r2, [r3, #0]
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	f022 0201 	bic.w	r2, r2, #1
 800b818:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	689b      	ldr	r3, [r3, #8]
 800b820:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	683a      	ldr	r2, [r7, #0]
 800b82a:	430a      	orrs	r2, r1
 800b82c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	f000 f812 	bl	800b858 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	68fa      	ldr	r2, [r7, #12]
 800b83a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	2220      	movs	r2, #32
 800b840:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2200      	movs	r2, #0
 800b848:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b84c:	2300      	movs	r3, #0
}
 800b84e:	4618      	mov	r0, r3
 800b850:	3710      	adds	r7, #16
 800b852:	46bd      	mov	sp, r7
 800b854:	bd80      	pop	{r7, pc}
	...

0800b858 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b858:	b480      	push	{r7}
 800b85a:	b085      	sub	sp, #20
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b864:	2b00      	cmp	r3, #0
 800b866:	d108      	bne.n	800b87a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2201      	movs	r2, #1
 800b86c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2201      	movs	r2, #1
 800b874:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b878:	e031      	b.n	800b8de <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b87a:	2310      	movs	r3, #16
 800b87c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b87e:	2310      	movs	r3, #16
 800b880:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	689b      	ldr	r3, [r3, #8]
 800b888:	0e5b      	lsrs	r3, r3, #25
 800b88a:	b2db      	uxtb	r3, r3
 800b88c:	f003 0307 	and.w	r3, r3, #7
 800b890:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	689b      	ldr	r3, [r3, #8]
 800b898:	0f5b      	lsrs	r3, r3, #29
 800b89a:	b2db      	uxtb	r3, r3
 800b89c:	f003 0307 	and.w	r3, r3, #7
 800b8a0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b8a2:	7bbb      	ldrb	r3, [r7, #14]
 800b8a4:	7b3a      	ldrb	r2, [r7, #12]
 800b8a6:	4911      	ldr	r1, [pc, #68]	; (800b8ec <UARTEx_SetNbDataToProcess+0x94>)
 800b8a8:	5c8a      	ldrb	r2, [r1, r2]
 800b8aa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b8ae:	7b3a      	ldrb	r2, [r7, #12]
 800b8b0:	490f      	ldr	r1, [pc, #60]	; (800b8f0 <UARTEx_SetNbDataToProcess+0x98>)
 800b8b2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b8b4:	fb93 f3f2 	sdiv	r3, r3, r2
 800b8b8:	b29a      	uxth	r2, r3
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b8c0:	7bfb      	ldrb	r3, [r7, #15]
 800b8c2:	7b7a      	ldrb	r2, [r7, #13]
 800b8c4:	4909      	ldr	r1, [pc, #36]	; (800b8ec <UARTEx_SetNbDataToProcess+0x94>)
 800b8c6:	5c8a      	ldrb	r2, [r1, r2]
 800b8c8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b8cc:	7b7a      	ldrb	r2, [r7, #13]
 800b8ce:	4908      	ldr	r1, [pc, #32]	; (800b8f0 <UARTEx_SetNbDataToProcess+0x98>)
 800b8d0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b8d2:	fb93 f3f2 	sdiv	r3, r3, r2
 800b8d6:	b29a      	uxth	r2, r3
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b8de:	bf00      	nop
 800b8e0:	3714      	adds	r7, #20
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e8:	4770      	bx	lr
 800b8ea:	bf00      	nop
 800b8ec:	0800c278 	.word	0x0800c278
 800b8f0:	0800c280 	.word	0x0800c280

0800b8f4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b8f4:	b480      	push	{r7}
 800b8f6:	b083      	sub	sp, #12
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
 800b8fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d121      	bne.n	800b94a <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681a      	ldr	r2, [r3, #0]
 800b90a:	4b27      	ldr	r3, [pc, #156]	; (800b9a8 <FMC_SDRAM_Init+0xb4>)
 800b90c:	4013      	ands	r3, r2
 800b90e:	683a      	ldr	r2, [r7, #0]
 800b910:	6851      	ldr	r1, [r2, #4]
 800b912:	683a      	ldr	r2, [r7, #0]
 800b914:	6892      	ldr	r2, [r2, #8]
 800b916:	4311      	orrs	r1, r2
 800b918:	683a      	ldr	r2, [r7, #0]
 800b91a:	68d2      	ldr	r2, [r2, #12]
 800b91c:	4311      	orrs	r1, r2
 800b91e:	683a      	ldr	r2, [r7, #0]
 800b920:	6912      	ldr	r2, [r2, #16]
 800b922:	4311      	orrs	r1, r2
 800b924:	683a      	ldr	r2, [r7, #0]
 800b926:	6952      	ldr	r2, [r2, #20]
 800b928:	4311      	orrs	r1, r2
 800b92a:	683a      	ldr	r2, [r7, #0]
 800b92c:	6992      	ldr	r2, [r2, #24]
 800b92e:	4311      	orrs	r1, r2
 800b930:	683a      	ldr	r2, [r7, #0]
 800b932:	69d2      	ldr	r2, [r2, #28]
 800b934:	4311      	orrs	r1, r2
 800b936:	683a      	ldr	r2, [r7, #0]
 800b938:	6a12      	ldr	r2, [r2, #32]
 800b93a:	4311      	orrs	r1, r2
 800b93c:	683a      	ldr	r2, [r7, #0]
 800b93e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b940:	430a      	orrs	r2, r1
 800b942:	431a      	orrs	r2, r3
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	601a      	str	r2, [r3, #0]
 800b948:	e026      	b.n	800b998 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	69d9      	ldr	r1, [r3, #28]
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	6a1b      	ldr	r3, [r3, #32]
 800b95a:	4319      	orrs	r1, r3
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b960:	430b      	orrs	r3, r1
 800b962:	431a      	orrs	r2, r3
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	685a      	ldr	r2, [r3, #4]
 800b96c:	4b0e      	ldr	r3, [pc, #56]	; (800b9a8 <FMC_SDRAM_Init+0xb4>)
 800b96e:	4013      	ands	r3, r2
 800b970:	683a      	ldr	r2, [r7, #0]
 800b972:	6851      	ldr	r1, [r2, #4]
 800b974:	683a      	ldr	r2, [r7, #0]
 800b976:	6892      	ldr	r2, [r2, #8]
 800b978:	4311      	orrs	r1, r2
 800b97a:	683a      	ldr	r2, [r7, #0]
 800b97c:	68d2      	ldr	r2, [r2, #12]
 800b97e:	4311      	orrs	r1, r2
 800b980:	683a      	ldr	r2, [r7, #0]
 800b982:	6912      	ldr	r2, [r2, #16]
 800b984:	4311      	orrs	r1, r2
 800b986:	683a      	ldr	r2, [r7, #0]
 800b988:	6952      	ldr	r2, [r2, #20]
 800b98a:	4311      	orrs	r1, r2
 800b98c:	683a      	ldr	r2, [r7, #0]
 800b98e:	6992      	ldr	r2, [r2, #24]
 800b990:	430a      	orrs	r2, r1
 800b992:	431a      	orrs	r2, r3
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800b998:	2300      	movs	r3, #0
}
 800b99a:	4618      	mov	r0, r3
 800b99c:	370c      	adds	r7, #12
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a4:	4770      	bx	lr
 800b9a6:	bf00      	nop
 800b9a8:	ffff8000 	.word	0xffff8000

0800b9ac <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b9ac:	b480      	push	{r7}
 800b9ae:	b085      	sub	sp, #20
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	60f8      	str	r0, [r7, #12]
 800b9b4:	60b9      	str	r1, [r7, #8]
 800b9b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d128      	bne.n	800ba10 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	689b      	ldr	r3, [r3, #8]
 800b9c2:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800b9c6:	68bb      	ldr	r3, [r7, #8]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	1e59      	subs	r1, r3, #1
 800b9cc:	68bb      	ldr	r3, [r7, #8]
 800b9ce:	685b      	ldr	r3, [r3, #4]
 800b9d0:	3b01      	subs	r3, #1
 800b9d2:	011b      	lsls	r3, r3, #4
 800b9d4:	4319      	orrs	r1, r3
 800b9d6:	68bb      	ldr	r3, [r7, #8]
 800b9d8:	689b      	ldr	r3, [r3, #8]
 800b9da:	3b01      	subs	r3, #1
 800b9dc:	021b      	lsls	r3, r3, #8
 800b9de:	4319      	orrs	r1, r3
 800b9e0:	68bb      	ldr	r3, [r7, #8]
 800b9e2:	68db      	ldr	r3, [r3, #12]
 800b9e4:	3b01      	subs	r3, #1
 800b9e6:	031b      	lsls	r3, r3, #12
 800b9e8:	4319      	orrs	r1, r3
 800b9ea:	68bb      	ldr	r3, [r7, #8]
 800b9ec:	691b      	ldr	r3, [r3, #16]
 800b9ee:	3b01      	subs	r3, #1
 800b9f0:	041b      	lsls	r3, r3, #16
 800b9f2:	4319      	orrs	r1, r3
 800b9f4:	68bb      	ldr	r3, [r7, #8]
 800b9f6:	695b      	ldr	r3, [r3, #20]
 800b9f8:	3b01      	subs	r3, #1
 800b9fa:	051b      	lsls	r3, r3, #20
 800b9fc:	4319      	orrs	r1, r3
 800b9fe:	68bb      	ldr	r3, [r7, #8]
 800ba00:	699b      	ldr	r3, [r3, #24]
 800ba02:	3b01      	subs	r3, #1
 800ba04:	061b      	lsls	r3, r3, #24
 800ba06:	430b      	orrs	r3, r1
 800ba08:	431a      	orrs	r2, r3
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	609a      	str	r2, [r3, #8]
 800ba0e:	e02d      	b.n	800ba6c <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	689a      	ldr	r2, [r3, #8]
 800ba14:	4b19      	ldr	r3, [pc, #100]	; (800ba7c <FMC_SDRAM_Timing_Init+0xd0>)
 800ba16:	4013      	ands	r3, r2
 800ba18:	68ba      	ldr	r2, [r7, #8]
 800ba1a:	68d2      	ldr	r2, [r2, #12]
 800ba1c:	3a01      	subs	r2, #1
 800ba1e:	0311      	lsls	r1, r2, #12
 800ba20:	68ba      	ldr	r2, [r7, #8]
 800ba22:	6952      	ldr	r2, [r2, #20]
 800ba24:	3a01      	subs	r2, #1
 800ba26:	0512      	lsls	r2, r2, #20
 800ba28:	430a      	orrs	r2, r1
 800ba2a:	431a      	orrs	r2, r3
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	68db      	ldr	r3, [r3, #12]
 800ba34:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800ba38:	68bb      	ldr	r3, [r7, #8]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	1e59      	subs	r1, r3, #1
 800ba3e:	68bb      	ldr	r3, [r7, #8]
 800ba40:	685b      	ldr	r3, [r3, #4]
 800ba42:	3b01      	subs	r3, #1
 800ba44:	011b      	lsls	r3, r3, #4
 800ba46:	4319      	orrs	r1, r3
 800ba48:	68bb      	ldr	r3, [r7, #8]
 800ba4a:	689b      	ldr	r3, [r3, #8]
 800ba4c:	3b01      	subs	r3, #1
 800ba4e:	021b      	lsls	r3, r3, #8
 800ba50:	4319      	orrs	r1, r3
 800ba52:	68bb      	ldr	r3, [r7, #8]
 800ba54:	691b      	ldr	r3, [r3, #16]
 800ba56:	3b01      	subs	r3, #1
 800ba58:	041b      	lsls	r3, r3, #16
 800ba5a:	4319      	orrs	r1, r3
 800ba5c:	68bb      	ldr	r3, [r7, #8]
 800ba5e:	699b      	ldr	r3, [r3, #24]
 800ba60:	3b01      	subs	r3, #1
 800ba62:	061b      	lsls	r3, r3, #24
 800ba64:	430b      	orrs	r3, r1
 800ba66:	431a      	orrs	r2, r3
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800ba6c:	2300      	movs	r3, #0
}
 800ba6e:	4618      	mov	r0, r3
 800ba70:	3714      	adds	r7, #20
 800ba72:	46bd      	mov	sp, r7
 800ba74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba78:	4770      	bx	lr
 800ba7a:	bf00      	nop
 800ba7c:	ff0f0fff 	.word	0xff0f0fff

0800ba80 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ba80:	b084      	sub	sp, #16
 800ba82:	b580      	push	{r7, lr}
 800ba84:	b084      	sub	sp, #16
 800ba86:	af00      	add	r7, sp, #0
 800ba88:	6078      	str	r0, [r7, #4]
 800ba8a:	f107 001c 	add.w	r0, r7, #28
 800ba8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ba92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba94:	2b01      	cmp	r3, #1
 800ba96:	d120      	bne.n	800bada <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba9c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	68da      	ldr	r2, [r3, #12]
 800baa8:	4b2a      	ldr	r3, [pc, #168]	; (800bb54 <USB_CoreInit+0xd4>)
 800baaa:	4013      	ands	r3, r2
 800baac:	687a      	ldr	r2, [r7, #4]
 800baae:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	68db      	ldr	r3, [r3, #12]
 800bab4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800babc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800babe:	2b01      	cmp	r3, #1
 800bac0:	d105      	bne.n	800bace <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	68db      	ldr	r3, [r3, #12]
 800bac6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bace:	6878      	ldr	r0, [r7, #4]
 800bad0:	f000 faac 	bl	800c02c <USB_CoreReset>
 800bad4:	4603      	mov	r3, r0
 800bad6:	73fb      	strb	r3, [r7, #15]
 800bad8:	e01a      	b.n	800bb10 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	68db      	ldr	r3, [r3, #12]
 800bade:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bae6:	6878      	ldr	r0, [r7, #4]
 800bae8:	f000 faa0 	bl	800c02c <USB_CoreReset>
 800baec:	4603      	mov	r3, r0
 800baee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800baf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d106      	bne.n	800bb04 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bafa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	639a      	str	r2, [r3, #56]	; 0x38
 800bb02:	e005      	b.n	800bb10 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb08:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800bb10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb12:	2b01      	cmp	r3, #1
 800bb14:	d116      	bne.n	800bb44 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb1a:	b29a      	uxth	r2, r3
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bb24:	4b0c      	ldr	r3, [pc, #48]	; (800bb58 <USB_CoreInit+0xd8>)
 800bb26:	4313      	orrs	r3, r2
 800bb28:	687a      	ldr	r2, [r7, #4]
 800bb2a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	689b      	ldr	r3, [r3, #8]
 800bb30:	f043 0206 	orr.w	r2, r3, #6
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	689b      	ldr	r3, [r3, #8]
 800bb3c:	f043 0220 	orr.w	r2, r3, #32
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800bb44:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb46:	4618      	mov	r0, r3
 800bb48:	3710      	adds	r7, #16
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bb50:	b004      	add	sp, #16
 800bb52:	4770      	bx	lr
 800bb54:	ffbdffbf 	.word	0xffbdffbf
 800bb58:	03ee0000 	.word	0x03ee0000

0800bb5c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bb5c:	b480      	push	{r7}
 800bb5e:	b083      	sub	sp, #12
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	689b      	ldr	r3, [r3, #8]
 800bb68:	f023 0201 	bic.w	r2, r3, #1
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bb70:	2300      	movs	r3, #0
}
 800bb72:	4618      	mov	r0, r3
 800bb74:	370c      	adds	r7, #12
 800bb76:	46bd      	mov	sp, r7
 800bb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7c:	4770      	bx	lr

0800bb7e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800bb7e:	b580      	push	{r7, lr}
 800bb80:	b084      	sub	sp, #16
 800bb82:	af00      	add	r7, sp, #0
 800bb84:	6078      	str	r0, [r7, #4]
 800bb86:	460b      	mov	r3, r1
 800bb88:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	68db      	ldr	r3, [r3, #12]
 800bb92:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800bb9a:	78fb      	ldrb	r3, [r7, #3]
 800bb9c:	2b01      	cmp	r3, #1
 800bb9e:	d115      	bne.n	800bbcc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	68db      	ldr	r3, [r3, #12]
 800bba4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800bbac:	2001      	movs	r0, #1
 800bbae:	f7f7 f805 	bl	8002bbc <HAL_Delay>
      ms++;
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	3301      	adds	r3, #1
 800bbb6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800bbb8:	6878      	ldr	r0, [r7, #4]
 800bbba:	f000 fa29 	bl	800c010 <USB_GetMode>
 800bbbe:	4603      	mov	r3, r0
 800bbc0:	2b01      	cmp	r3, #1
 800bbc2:	d01e      	beq.n	800bc02 <USB_SetCurrentMode+0x84>
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	2b31      	cmp	r3, #49	; 0x31
 800bbc8:	d9f0      	bls.n	800bbac <USB_SetCurrentMode+0x2e>
 800bbca:	e01a      	b.n	800bc02 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800bbcc:	78fb      	ldrb	r3, [r7, #3]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d115      	bne.n	800bbfe <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	68db      	ldr	r3, [r3, #12]
 800bbd6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800bbde:	2001      	movs	r0, #1
 800bbe0:	f7f6 ffec 	bl	8002bbc <HAL_Delay>
      ms++;
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	3301      	adds	r3, #1
 800bbe8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800bbea:	6878      	ldr	r0, [r7, #4]
 800bbec:	f000 fa10 	bl	800c010 <USB_GetMode>
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d005      	beq.n	800bc02 <USB_SetCurrentMode+0x84>
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	2b31      	cmp	r3, #49	; 0x31
 800bbfa:	d9f0      	bls.n	800bbde <USB_SetCurrentMode+0x60>
 800bbfc:	e001      	b.n	800bc02 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800bbfe:	2301      	movs	r3, #1
 800bc00:	e005      	b.n	800bc0e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	2b32      	cmp	r3, #50	; 0x32
 800bc06:	d101      	bne.n	800bc0c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800bc08:	2301      	movs	r3, #1
 800bc0a:	e000      	b.n	800bc0e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800bc0c:	2300      	movs	r3, #0
}
 800bc0e:	4618      	mov	r0, r3
 800bc10:	3710      	adds	r7, #16
 800bc12:	46bd      	mov	sp, r7
 800bc14:	bd80      	pop	{r7, pc}
	...

0800bc18 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bc18:	b084      	sub	sp, #16
 800bc1a:	b580      	push	{r7, lr}
 800bc1c:	b086      	sub	sp, #24
 800bc1e:	af00      	add	r7, sp, #0
 800bc20:	6078      	str	r0, [r7, #4]
 800bc22:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800bc26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800bc32:	2300      	movs	r3, #0
 800bc34:	613b      	str	r3, [r7, #16]
 800bc36:	e009      	b.n	800bc4c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800bc38:	687a      	ldr	r2, [r7, #4]
 800bc3a:	693b      	ldr	r3, [r7, #16]
 800bc3c:	3340      	adds	r3, #64	; 0x40
 800bc3e:	009b      	lsls	r3, r3, #2
 800bc40:	4413      	add	r3, r2
 800bc42:	2200      	movs	r2, #0
 800bc44:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800bc46:	693b      	ldr	r3, [r7, #16]
 800bc48:	3301      	adds	r3, #1
 800bc4a:	613b      	str	r3, [r7, #16]
 800bc4c:	693b      	ldr	r3, [r7, #16]
 800bc4e:	2b0e      	cmp	r3, #14
 800bc50:	d9f2      	bls.n	800bc38 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800bc52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d11c      	bne.n	800bc92 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc5e:	685b      	ldr	r3, [r3, #4]
 800bc60:	68fa      	ldr	r2, [r7, #12]
 800bc62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bc66:	f043 0302 	orr.w	r3, r3, #2
 800bc6a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc70:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	601a      	str	r2, [r3, #0]
 800bc90:	e005      	b.n	800bc9e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc96:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bca4:	461a      	mov	r2, r3
 800bca6:	2300      	movs	r3, #0
 800bca8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcb0:	4619      	mov	r1, r3
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcb8:	461a      	mov	r2, r3
 800bcba:	680b      	ldr	r3, [r1, #0]
 800bcbc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bcbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcc0:	2b01      	cmp	r3, #1
 800bcc2:	d10c      	bne.n	800bcde <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800bcc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d104      	bne.n	800bcd4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800bcca:	2100      	movs	r1, #0
 800bccc:	6878      	ldr	r0, [r7, #4]
 800bcce:	f000 f965 	bl	800bf9c <USB_SetDevSpeed>
 800bcd2:	e008      	b.n	800bce6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800bcd4:	2101      	movs	r1, #1
 800bcd6:	6878      	ldr	r0, [r7, #4]
 800bcd8:	f000 f960 	bl	800bf9c <USB_SetDevSpeed>
 800bcdc:	e003      	b.n	800bce6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800bcde:	2103      	movs	r1, #3
 800bce0:	6878      	ldr	r0, [r7, #4]
 800bce2:	f000 f95b 	bl	800bf9c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800bce6:	2110      	movs	r1, #16
 800bce8:	6878      	ldr	r0, [r7, #4]
 800bcea:	f000 f8f3 	bl	800bed4 <USB_FlushTxFifo>
 800bcee:	4603      	mov	r3, r0
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d001      	beq.n	800bcf8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800bcf4:	2301      	movs	r3, #1
 800bcf6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800bcf8:	6878      	ldr	r0, [r7, #4]
 800bcfa:	f000 f91f 	bl	800bf3c <USB_FlushRxFifo>
 800bcfe:	4603      	mov	r3, r0
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d001      	beq.n	800bd08 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800bd04:	2301      	movs	r3, #1
 800bd06:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd0e:	461a      	mov	r2, r3
 800bd10:	2300      	movs	r3, #0
 800bd12:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd1a:	461a      	mov	r2, r3
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd26:	461a      	mov	r2, r3
 800bd28:	2300      	movs	r3, #0
 800bd2a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	613b      	str	r3, [r7, #16]
 800bd30:	e043      	b.n	800bdba <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bd32:	693b      	ldr	r3, [r7, #16]
 800bd34:	015a      	lsls	r2, r3, #5
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	4413      	add	r3, r2
 800bd3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bd44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bd48:	d118      	bne.n	800bd7c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800bd4a:	693b      	ldr	r3, [r7, #16]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d10a      	bne.n	800bd66 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800bd50:	693b      	ldr	r3, [r7, #16]
 800bd52:	015a      	lsls	r2, r3, #5
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	4413      	add	r3, r2
 800bd58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd5c:	461a      	mov	r2, r3
 800bd5e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bd62:	6013      	str	r3, [r2, #0]
 800bd64:	e013      	b.n	800bd8e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800bd66:	693b      	ldr	r3, [r7, #16]
 800bd68:	015a      	lsls	r2, r3, #5
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	4413      	add	r3, r2
 800bd6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd72:	461a      	mov	r2, r3
 800bd74:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bd78:	6013      	str	r3, [r2, #0]
 800bd7a:	e008      	b.n	800bd8e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800bd7c:	693b      	ldr	r3, [r7, #16]
 800bd7e:	015a      	lsls	r2, r3, #5
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	4413      	add	r3, r2
 800bd84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd88:	461a      	mov	r2, r3
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800bd8e:	693b      	ldr	r3, [r7, #16]
 800bd90:	015a      	lsls	r2, r3, #5
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	4413      	add	r3, r2
 800bd96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd9a:	461a      	mov	r2, r3
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800bda0:	693b      	ldr	r3, [r7, #16]
 800bda2:	015a      	lsls	r2, r3, #5
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	4413      	add	r3, r2
 800bda8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdac:	461a      	mov	r2, r3
 800bdae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bdb2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bdb4:	693b      	ldr	r3, [r7, #16]
 800bdb6:	3301      	adds	r3, #1
 800bdb8:	613b      	str	r3, [r7, #16]
 800bdba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdbc:	693a      	ldr	r2, [r7, #16]
 800bdbe:	429a      	cmp	r2, r3
 800bdc0:	d3b7      	bcc.n	800bd32 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	613b      	str	r3, [r7, #16]
 800bdc6:	e043      	b.n	800be50 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bdc8:	693b      	ldr	r3, [r7, #16]
 800bdca:	015a      	lsls	r2, r3, #5
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	4413      	add	r3, r2
 800bdd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bdda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bdde:	d118      	bne.n	800be12 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800bde0:	693b      	ldr	r3, [r7, #16]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d10a      	bne.n	800bdfc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800bde6:	693b      	ldr	r3, [r7, #16]
 800bde8:	015a      	lsls	r2, r3, #5
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	4413      	add	r3, r2
 800bdee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdf2:	461a      	mov	r2, r3
 800bdf4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bdf8:	6013      	str	r3, [r2, #0]
 800bdfa:	e013      	b.n	800be24 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800bdfc:	693b      	ldr	r3, [r7, #16]
 800bdfe:	015a      	lsls	r2, r3, #5
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	4413      	add	r3, r2
 800be04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be08:	461a      	mov	r2, r3
 800be0a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800be0e:	6013      	str	r3, [r2, #0]
 800be10:	e008      	b.n	800be24 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800be12:	693b      	ldr	r3, [r7, #16]
 800be14:	015a      	lsls	r2, r3, #5
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	4413      	add	r3, r2
 800be1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be1e:	461a      	mov	r2, r3
 800be20:	2300      	movs	r3, #0
 800be22:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800be24:	693b      	ldr	r3, [r7, #16]
 800be26:	015a      	lsls	r2, r3, #5
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	4413      	add	r3, r2
 800be2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be30:	461a      	mov	r2, r3
 800be32:	2300      	movs	r3, #0
 800be34:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800be36:	693b      	ldr	r3, [r7, #16]
 800be38:	015a      	lsls	r2, r3, #5
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	4413      	add	r3, r2
 800be3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be42:	461a      	mov	r2, r3
 800be44:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800be48:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800be4a:	693b      	ldr	r3, [r7, #16]
 800be4c:	3301      	adds	r3, #1
 800be4e:	613b      	str	r3, [r7, #16]
 800be50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be52:	693a      	ldr	r2, [r7, #16]
 800be54:	429a      	cmp	r2, r3
 800be56:	d3b7      	bcc.n	800bdc8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be5e:	691b      	ldr	r3, [r3, #16]
 800be60:	68fa      	ldr	r2, [r7, #12]
 800be62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800be66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800be6a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2200      	movs	r2, #0
 800be70:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800be78:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800be7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d105      	bne.n	800be8c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	699b      	ldr	r3, [r3, #24]
 800be84:	f043 0210 	orr.w	r2, r3, #16
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	699a      	ldr	r2, [r3, #24]
 800be90:	4b0e      	ldr	r3, [pc, #56]	; (800becc <USB_DevInit+0x2b4>)
 800be92:	4313      	orrs	r3, r2
 800be94:	687a      	ldr	r2, [r7, #4]
 800be96:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800be98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d005      	beq.n	800beaa <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	699b      	ldr	r3, [r3, #24]
 800bea2:	f043 0208 	orr.w	r2, r3, #8
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800beaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800beac:	2b01      	cmp	r3, #1
 800beae:	d105      	bne.n	800bebc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	699a      	ldr	r2, [r3, #24]
 800beb4:	4b06      	ldr	r3, [pc, #24]	; (800bed0 <USB_DevInit+0x2b8>)
 800beb6:	4313      	orrs	r3, r2
 800beb8:	687a      	ldr	r2, [r7, #4]
 800beba:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800bebc:	7dfb      	ldrb	r3, [r7, #23]
}
 800bebe:	4618      	mov	r0, r3
 800bec0:	3718      	adds	r7, #24
 800bec2:	46bd      	mov	sp, r7
 800bec4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bec8:	b004      	add	sp, #16
 800beca:	4770      	bx	lr
 800becc:	803c3800 	.word	0x803c3800
 800bed0:	40000004 	.word	0x40000004

0800bed4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bed4:	b480      	push	{r7}
 800bed6:	b085      	sub	sp, #20
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
 800bedc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bede:	2300      	movs	r3, #0
 800bee0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	3301      	adds	r3, #1
 800bee6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	4a13      	ldr	r2, [pc, #76]	; (800bf38 <USB_FlushTxFifo+0x64>)
 800beec:	4293      	cmp	r3, r2
 800beee:	d901      	bls.n	800bef4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800bef0:	2303      	movs	r3, #3
 800bef2:	e01b      	b.n	800bf2c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	691b      	ldr	r3, [r3, #16]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	daf2      	bge.n	800bee2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800befc:	2300      	movs	r3, #0
 800befe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bf00:	683b      	ldr	r3, [r7, #0]
 800bf02:	019b      	lsls	r3, r3, #6
 800bf04:	f043 0220 	orr.w	r2, r3, #32
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	3301      	adds	r3, #1
 800bf10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	4a08      	ldr	r2, [pc, #32]	; (800bf38 <USB_FlushTxFifo+0x64>)
 800bf16:	4293      	cmp	r3, r2
 800bf18:	d901      	bls.n	800bf1e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800bf1a:	2303      	movs	r3, #3
 800bf1c:	e006      	b.n	800bf2c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	691b      	ldr	r3, [r3, #16]
 800bf22:	f003 0320 	and.w	r3, r3, #32
 800bf26:	2b20      	cmp	r3, #32
 800bf28:	d0f0      	beq.n	800bf0c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800bf2a:	2300      	movs	r3, #0
}
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	3714      	adds	r7, #20
 800bf30:	46bd      	mov	sp, r7
 800bf32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf36:	4770      	bx	lr
 800bf38:	00030d40 	.word	0x00030d40

0800bf3c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bf3c:	b480      	push	{r7}
 800bf3e:	b085      	sub	sp, #20
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bf44:	2300      	movs	r3, #0
 800bf46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	3301      	adds	r3, #1
 800bf4c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	4a11      	ldr	r2, [pc, #68]	; (800bf98 <USB_FlushRxFifo+0x5c>)
 800bf52:	4293      	cmp	r3, r2
 800bf54:	d901      	bls.n	800bf5a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800bf56:	2303      	movs	r3, #3
 800bf58:	e018      	b.n	800bf8c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	691b      	ldr	r3, [r3, #16]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	daf2      	bge.n	800bf48 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800bf62:	2300      	movs	r3, #0
 800bf64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	2210      	movs	r2, #16
 800bf6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	3301      	adds	r3, #1
 800bf70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	4a08      	ldr	r2, [pc, #32]	; (800bf98 <USB_FlushRxFifo+0x5c>)
 800bf76:	4293      	cmp	r3, r2
 800bf78:	d901      	bls.n	800bf7e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800bf7a:	2303      	movs	r3, #3
 800bf7c:	e006      	b.n	800bf8c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	691b      	ldr	r3, [r3, #16]
 800bf82:	f003 0310 	and.w	r3, r3, #16
 800bf86:	2b10      	cmp	r3, #16
 800bf88:	d0f0      	beq.n	800bf6c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800bf8a:	2300      	movs	r3, #0
}
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	3714      	adds	r7, #20
 800bf90:	46bd      	mov	sp, r7
 800bf92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf96:	4770      	bx	lr
 800bf98:	00030d40 	.word	0x00030d40

0800bf9c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800bf9c:	b480      	push	{r7}
 800bf9e:	b085      	sub	sp, #20
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
 800bfa4:	460b      	mov	r3, r1
 800bfa6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bfb2:	681a      	ldr	r2, [r3, #0]
 800bfb4:	78fb      	ldrb	r3, [r7, #3]
 800bfb6:	68f9      	ldr	r1, [r7, #12]
 800bfb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bfbc:	4313      	orrs	r3, r2
 800bfbe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800bfc0:	2300      	movs	r3, #0
}
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	3714      	adds	r7, #20
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfcc:	4770      	bx	lr

0800bfce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800bfce:	b480      	push	{r7}
 800bfd0:	b085      	sub	sp, #20
 800bfd2:	af00      	add	r7, sp, #0
 800bfd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	68fa      	ldr	r2, [r7, #12]
 800bfe4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bfe8:	f023 0303 	bic.w	r3, r3, #3
 800bfec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bff4:	685b      	ldr	r3, [r3, #4]
 800bff6:	68fa      	ldr	r2, [r7, #12]
 800bff8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bffc:	f043 0302 	orr.w	r3, r3, #2
 800c000:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c002:	2300      	movs	r3, #0
}
 800c004:	4618      	mov	r0, r3
 800c006:	3714      	adds	r7, #20
 800c008:	46bd      	mov	sp, r7
 800c00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00e:	4770      	bx	lr

0800c010 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c010:	b480      	push	{r7}
 800c012:	b083      	sub	sp, #12
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	695b      	ldr	r3, [r3, #20]
 800c01c:	f003 0301 	and.w	r3, r3, #1
}
 800c020:	4618      	mov	r0, r3
 800c022:	370c      	adds	r7, #12
 800c024:	46bd      	mov	sp, r7
 800c026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02a:	4770      	bx	lr

0800c02c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c02c:	b480      	push	{r7}
 800c02e:	b085      	sub	sp, #20
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c034:	2300      	movs	r3, #0
 800c036:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	3301      	adds	r3, #1
 800c03c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	4a13      	ldr	r2, [pc, #76]	; (800c090 <USB_CoreReset+0x64>)
 800c042:	4293      	cmp	r3, r2
 800c044:	d901      	bls.n	800c04a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c046:	2303      	movs	r3, #3
 800c048:	e01b      	b.n	800c082 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	691b      	ldr	r3, [r3, #16]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	daf2      	bge.n	800c038 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c052:	2300      	movs	r3, #0
 800c054:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	691b      	ldr	r3, [r3, #16]
 800c05a:	f043 0201 	orr.w	r2, r3, #1
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	3301      	adds	r3, #1
 800c066:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	4a09      	ldr	r2, [pc, #36]	; (800c090 <USB_CoreReset+0x64>)
 800c06c:	4293      	cmp	r3, r2
 800c06e:	d901      	bls.n	800c074 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c070:	2303      	movs	r3, #3
 800c072:	e006      	b.n	800c082 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	691b      	ldr	r3, [r3, #16]
 800c078:	f003 0301 	and.w	r3, r3, #1
 800c07c:	2b01      	cmp	r3, #1
 800c07e:	d0f0      	beq.n	800c062 <USB_CoreReset+0x36>

  return HAL_OK;
 800c080:	2300      	movs	r3, #0
}
 800c082:	4618      	mov	r0, r3
 800c084:	3714      	adds	r7, #20
 800c086:	46bd      	mov	sp, r7
 800c088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08c:	4770      	bx	lr
 800c08e:	bf00      	nop
 800c090:	00030d40 	.word	0x00030d40

0800c094 <__libc_init_array>:
 800c094:	b570      	push	{r4, r5, r6, lr}
 800c096:	4d0d      	ldr	r5, [pc, #52]	; (800c0cc <__libc_init_array+0x38>)
 800c098:	4c0d      	ldr	r4, [pc, #52]	; (800c0d0 <__libc_init_array+0x3c>)
 800c09a:	1b64      	subs	r4, r4, r5
 800c09c:	10a4      	asrs	r4, r4, #2
 800c09e:	2600      	movs	r6, #0
 800c0a0:	42a6      	cmp	r6, r4
 800c0a2:	d109      	bne.n	800c0b8 <__libc_init_array+0x24>
 800c0a4:	4d0b      	ldr	r5, [pc, #44]	; (800c0d4 <__libc_init_array+0x40>)
 800c0a6:	4c0c      	ldr	r4, [pc, #48]	; (800c0d8 <__libc_init_array+0x44>)
 800c0a8:	f000 f82e 	bl	800c108 <_init>
 800c0ac:	1b64      	subs	r4, r4, r5
 800c0ae:	10a4      	asrs	r4, r4, #2
 800c0b0:	2600      	movs	r6, #0
 800c0b2:	42a6      	cmp	r6, r4
 800c0b4:	d105      	bne.n	800c0c2 <__libc_init_array+0x2e>
 800c0b6:	bd70      	pop	{r4, r5, r6, pc}
 800c0b8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c0bc:	4798      	blx	r3
 800c0be:	3601      	adds	r6, #1
 800c0c0:	e7ee      	b.n	800c0a0 <__libc_init_array+0xc>
 800c0c2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c0c6:	4798      	blx	r3
 800c0c8:	3601      	adds	r6, #1
 800c0ca:	e7f2      	b.n	800c0b2 <__libc_init_array+0x1e>
 800c0cc:	0800c290 	.word	0x0800c290
 800c0d0:	0800c290 	.word	0x0800c290
 800c0d4:	0800c290 	.word	0x0800c290
 800c0d8:	0800c294 	.word	0x0800c294

0800c0dc <memcpy>:
 800c0dc:	440a      	add	r2, r1
 800c0de:	4291      	cmp	r1, r2
 800c0e0:	f100 33ff 	add.w	r3, r0, #4294967295
 800c0e4:	d100      	bne.n	800c0e8 <memcpy+0xc>
 800c0e6:	4770      	bx	lr
 800c0e8:	b510      	push	{r4, lr}
 800c0ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c0ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c0f2:	4291      	cmp	r1, r2
 800c0f4:	d1f9      	bne.n	800c0ea <memcpy+0xe>
 800c0f6:	bd10      	pop	{r4, pc}

0800c0f8 <memset>:
 800c0f8:	4402      	add	r2, r0
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	4293      	cmp	r3, r2
 800c0fe:	d100      	bne.n	800c102 <memset+0xa>
 800c100:	4770      	bx	lr
 800c102:	f803 1b01 	strb.w	r1, [r3], #1
 800c106:	e7f9      	b.n	800c0fc <memset+0x4>

0800c108 <_init>:
 800c108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c10a:	bf00      	nop
 800c10c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c10e:	bc08      	pop	{r3}
 800c110:	469e      	mov	lr, r3
 800c112:	4770      	bx	lr

0800c114 <_fini>:
 800c114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c116:	bf00      	nop
 800c118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c11a:	bc08      	pop	{r3}
 800c11c:	469e      	mov	lr, r3
 800c11e:	4770      	bx	lr
