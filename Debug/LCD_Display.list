
LCD_Display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ef54  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  0800f1f4  0800f1f4  0001f1f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f380  0800f380  0001f380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f388  0800f388  0001f388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f38c  0800f38c  0001f38c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000098  24000000  0800f390  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000098  0800f428  00020098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000f8  0800f488  000200f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c80  24000158  0800f4e8  00020158  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000dd8  0800f4e8  00020dd8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY
 12 .debug_info   00032736  00000000  00000000  00020186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000046f3  00000000  00000000  000528bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002518  00000000  00000000  00056fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002378  00000000  00000000  000594c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000421ba  00000000  00000000  0005b840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003040c  00000000  00000000  0009d9fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001a5f28  00000000  00000000  000cde06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00273d2e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a8a8  00000000  00000000  00273d80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000158 	.word	0x24000158
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800f1dc 	.word	0x0800f1dc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400015c 	.word	0x2400015c
 80002dc:	0800f1dc 	.word	0x0800f1dc

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <__LCD_Delay>:
/*
 * @brief Function to delay in microseconds
 * @param delay: value in microseconds to delay
 * @retval None
 */
void __LCD_Delay(uint16_t delay) {
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	80fb      	strh	r3, [r7, #6]

	__HAL_TIM_SET_COUNTER(&timer, 0);
 800069e:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <__LCD_Delay+0x30>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	2200      	movs	r2, #0
 80006a4:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < delay);
 80006a6:	bf00      	nop
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <__LCD_Delay+0x30>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80006ae:	88fb      	ldrh	r3, [r7, #6]
 80006b0:	429a      	cmp	r2, r3
 80006b2:	d3f9      	bcc.n	80006a8 <__LCD_Delay+0x14>

}
 80006b4:	bf00      	nop
 80006b6:	bf00      	nop
 80006b8:	370c      	adds	r7, #12
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	2400074c 	.word	0x2400074c

080006c8 <__LCD_Write4Bits>:
/*
 * @brief Function to write individual bits to the pins
 * @param value: value to write
 * @retval None
 */
void __LCD_Write4Bits(uint8_t value) {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(DATA4_PORT, DATA4_PIN, (value >> 3) & 0x01);
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	08db      	lsrs	r3, r3, #3
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	f003 0301 	and.w	r3, r3, #1
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	461a      	mov	r2, r3
 80006e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006e4:	481a      	ldr	r0, [pc, #104]	; (8000750 <__LCD_Write4Bits+0x88>)
 80006e6:	f005 fca3 	bl	8006030 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DATA3_PORT, DATA3_PIN, (value >> 2) & 0x01);
 80006ea:	79fb      	ldrb	r3, [r7, #7]
 80006ec:	089b      	lsrs	r3, r3, #2
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	f003 0301 	and.w	r3, r3, #1
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	461a      	mov	r2, r3
 80006f8:	2102      	movs	r1, #2
 80006fa:	4816      	ldr	r0, [pc, #88]	; (8000754 <__LCD_Write4Bits+0x8c>)
 80006fc:	f005 fc98 	bl	8006030 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DATA2_PORT, DATA2_PIN, (value >> 1) & 0x01);
 8000700:	79fb      	ldrb	r3, [r7, #7]
 8000702:	085b      	lsrs	r3, r3, #1
 8000704:	b2db      	uxtb	r3, r3
 8000706:	f003 0301 	and.w	r3, r3, #1
 800070a:	b2db      	uxtb	r3, r3
 800070c:	461a      	mov	r2, r3
 800070e:	2140      	movs	r1, #64	; 0x40
 8000710:	480f      	ldr	r0, [pc, #60]	; (8000750 <__LCD_Write4Bits+0x88>)
 8000712:	f005 fc8d 	bl	8006030 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DATA1_PORT, DATA1_PIN, value & 0x01);
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	f003 0301 	and.w	r3, r3, #1
 800071c:	b2db      	uxtb	r3, r3
 800071e:	461a      	mov	r2, r3
 8000720:	2108      	movs	r1, #8
 8000722:	480d      	ldr	r0, [pc, #52]	; (8000758 <__LCD_Write4Bits+0x90>)
 8000724:	f005 fc84 	bl	8006030 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(E_PORT, E_PIN, 1);
 8000728:	2201      	movs	r2, #1
 800072a:	2140      	movs	r1, #64	; 0x40
 800072c:	480b      	ldr	r0, [pc, #44]	; (800075c <__LCD_Write4Bits+0x94>)
 800072e:	f005 fc7f 	bl	8006030 <HAL_GPIO_WritePin>
	__LCD_Delay(120);
 8000732:	2078      	movs	r0, #120	; 0x78
 8000734:	f7ff ffae 	bl	8000694 <__LCD_Delay>
	HAL_GPIO_WritePin(E_PORT, E_PIN, 0);
 8000738:	2200      	movs	r2, #0
 800073a:	2140      	movs	r1, #64	; 0x40
 800073c:	4807      	ldr	r0, [pc, #28]	; (800075c <__LCD_Write4Bits+0x94>)
 800073e:	f005 fc77 	bl	8006030 <HAL_GPIO_WritePin>
	__LCD_Delay(120);
 8000742:	2078      	movs	r0, #120	; 0x78
 8000744:	f7ff ffa6 	bl	8000694 <__LCD_Delay>

}
 8000748:	bf00      	nop
 800074a:	3708      	adds	r7, #8
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	58020000 	.word	0x58020000
 8000754:	58022800 	.word	0x58022800
 8000758:	58021800 	.word	0x58021800
 800075c:	58020400 	.word	0x58020400

08000760 <__LCD_Send>:
 * @brief Function to send data to the LCD and enable RS pin
 * @param value: value to send
 * @param state: state to set RS (register select) pin [0, 1]
 * @retval None
 */
void __LCD_Send(uint8_t value, int state) {
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	6039      	str	r1, [r7, #0]
 800076a:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(RS_PORT, RS_PIN, state);
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	b2db      	uxtb	r3, r3
 8000770:	461a      	mov	r2, r3
 8000772:	2180      	movs	r1, #128	; 0x80
 8000774:	4808      	ldr	r0, [pc, #32]	; (8000798 <__LCD_Send+0x38>)
 8000776:	f005 fc5b 	bl	8006030 <HAL_GPIO_WritePin>
	__LCD_Write4Bits(value >> 4);
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	091b      	lsrs	r3, r3, #4
 800077e:	b2db      	uxtb	r3, r3
 8000780:	4618      	mov	r0, r3
 8000782:	f7ff ffa1 	bl	80006c8 <__LCD_Write4Bits>
	__LCD_Write4Bits(value);
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	4618      	mov	r0, r3
 800078a:	f7ff ff9d 	bl	80006c8 <__LCD_Write4Bits>

}
 800078e:	bf00      	nop
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	58020400 	.word	0x58020400

0800079c <__LCD_Cmd>:
/*
 * @brief Function to send command to the LCD
 * @param value: command to send
 * @retval None
 */
void __LCD_Cmd(uint8_t value) {
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	71fb      	strb	r3, [r7, #7]

	__LCD_Send(value, 0);
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	2100      	movs	r1, #0
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff ffd8 	bl	8000760 <__LCD_Send>

}
 80007b0:	bf00      	nop
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <__LCD_Data>:
/*
 * @brief Function to send data to the LCD
 * @param value: value to send
 * @retval None
 */
void __LCD_Data(uint8_t value) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	71fb      	strb	r3, [r7, #7]

	__LCD_Send(value, 1);
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	2101      	movs	r1, #1
 80007c6:	4618      	mov	r0, r3
 80007c8:	f7ff ffca 	bl	8000760 <__LCD_Send>

}
 80007cc:	bf00      	nop
 80007ce:	3708      	adds	r7, #8
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <LCD_Write>:
/*
 * @brief Function to write to the LCD
 * @param value: value to write to the LCD
 * @retval None
 */
void LCD_Write(char *value) {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]

	while (*value) {
 80007dc:	e00a      	b.n	80007f4 <LCD_Write+0x20>
		__LCD_Data(*value++);
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	1c5a      	adds	r2, r3, #1
 80007e2:	607a      	str	r2, [r7, #4]
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	4618      	mov	r0, r3
 80007e8:	f7ff ffe6 	bl	80007b8 <__LCD_Data>
		__LCD_Delay(5000);
 80007ec:	f241 3088 	movw	r0, #5000	; 0x1388
 80007f0:	f7ff ff50 	bl	8000694 <__LCD_Delay>
	while (*value) {
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d1f0      	bne.n	80007de <LCD_Write+0xa>
		// HAL_Delay(1000);
	}

}
 80007fc:	bf00      	nop
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}

08000806 <LCD_Pos_Cursor>:
 * @brief Function to set the cursor position
 * @param row: row to set the cursor [0, 1]
 * @param col: column to set the cursor [0, 15]
 * @retval None
 */
void LCD_Pos_Cursor(uint8_t row, uint8_t col) {
 8000806:	b580      	push	{r7, lr}
 8000808:	b082      	sub	sp, #8
 800080a:	af00      	add	r7, sp, #0
 800080c:	4603      	mov	r3, r0
 800080e:	460a      	mov	r2, r1
 8000810:	71fb      	strb	r3, [r7, #7]
 8000812:	4613      	mov	r3, r2
 8000814:	71bb      	strb	r3, [r7, #6]

	switch (row) {
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d002      	beq.n	8000822 <LCD_Pos_Cursor+0x1c>
 800081c:	2b01      	cmp	r3, #1
 800081e:	d005      	beq.n	800082c <LCD_Pos_Cursor+0x26>
 8000820:	e009      	b.n	8000836 <LCD_Pos_Cursor+0x30>
		case 0:
			col |= 0x80;
 8000822:	79bb      	ldrb	r3, [r7, #6]
 8000824:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000828:	71bb      	strb	r3, [r7, #6]
	        break;
 800082a:	e009      	b.n	8000840 <LCD_Pos_Cursor+0x3a>
	    case 1:
	        col |= 0xC0;
 800082c:	79bb      	ldrb	r3, [r7, #6]
 800082e:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000832:	71bb      	strb	r3, [r7, #6]
	        break;
 8000834:	e004      	b.n	8000840 <LCD_Pos_Cursor+0x3a>
	    default:
	    	row = 0;
 8000836:	2300      	movs	r3, #0
 8000838:	71fb      	strb	r3, [r7, #7]
	    	col = 0;
 800083a:	2300      	movs	r3, #0
 800083c:	71bb      	strb	r3, [r7, #6]
	    	break;
 800083e:	bf00      	nop
	}
	__LCD_Cmd(col);
 8000840:	79bb      	ldrb	r3, [r7, #6]
 8000842:	4618      	mov	r0, r3
 8000844:	f7ff ffaa 	bl	800079c <__LCD_Cmd>

}
 8000848:	bf00      	nop
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}

08000850 <LCD_Scroll_Display_Right>:
/*
 * @brief Function to scroll the display right
 * @param None
 * @retval None
 */
void LCD_Scroll_Display_Right(void) {
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0

	__LCD_Cmd(SCROLL_DISPLAY_RIGHT);
 8000854:	201c      	movs	r0, #28
 8000856:	f7ff ffa1 	bl	800079c <__LCD_Cmd>

}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}

0800085e <LCD_Scroll_Display_Left>:
/*
 * @brief Function to scroll the display left
 * @param None
 * @retval None
 */
void LCD_Scroll_Display_Left(void) {
 800085e:	b580      	push	{r7, lr}
 8000860:	af00      	add	r7, sp, #0

	__LCD_Cmd(SCROLL_DISPLAY_LEFT);
 8000862:	2018      	movs	r0, #24
 8000864:	f7ff ff9a 	bl	800079c <__LCD_Cmd>

}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}

0800086c <LCD_Init>:
 * @brief Function to initialize the LCD
 * @param cursor: true/false to enable cursor
 * @param blinking: true/false to enable blinking
 * @retval None
 */
void LCD_Init(bool cursor, bool blinking) {
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	460a      	mov	r2, r1
 8000876:	71fb      	strb	r3, [r7, #7]
 8000878:	4613      	mov	r3, r2
 800087a:	71bb      	strb	r3, [r7, #6]

	// Init
	__LCD_Delay(50000);
 800087c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000880:	f7ff ff08 	bl	8000694 <__LCD_Delay>
	__LCD_Cmd(0x30);
 8000884:	2030      	movs	r0, #48	; 0x30
 8000886:	f7ff ff89 	bl	800079c <__LCD_Cmd>
	__LCD_Delay(4500);
 800088a:	f241 1094 	movw	r0, #4500	; 0x1194
 800088e:	f7ff ff01 	bl	8000694 <__LCD_Delay>
	__LCD_Cmd(0x30);
 8000892:	2030      	movs	r0, #48	; 0x30
 8000894:	f7ff ff82 	bl	800079c <__LCD_Cmd>
	__LCD_Delay(150);
 8000898:	2096      	movs	r0, #150	; 0x96
 800089a:	f7ff fefb 	bl	8000694 <__LCD_Delay>
	__LCD_Cmd(0x30);
 800089e:	2030      	movs	r0, #48	; 0x30
 80008a0:	f7ff ff7c 	bl	800079c <__LCD_Cmd>

	// Go to 4 bit mode
	__LCD_Delay(10);
 80008a4:	200a      	movs	r0, #10
 80008a6:	f7ff fef5 	bl	8000694 <__LCD_Delay>
	__LCD_Cmd(0x20);
 80008aa:	2020      	movs	r0, #32
 80008ac:	f7ff ff76 	bl	800079c <__LCD_Cmd>
	__LCD_Delay(50);
 80008b0:	2032      	movs	r0, #50	; 0x32
 80008b2:	f7ff feef 	bl	8000694 <__LCD_Delay>

	// Set display lines and font
	__LCD_Cmd(0x28);
 80008b6:	2028      	movs	r0, #40	; 0x28
 80008b8:	f7ff ff70 	bl	800079c <__LCD_Cmd>
	__LCD_Delay(50);
 80008bc:	2032      	movs	r0, #50	; 0x32
 80008be:	f7ff fee9 	bl	8000694 <__LCD_Delay>

	// Display on/off
	__LCD_Cmd(0x08);
 80008c2:	2008      	movs	r0, #8
 80008c4:	f7ff ff6a 	bl	800079c <__LCD_Cmd>
	__LCD_Delay(50);
 80008c8:	2032      	movs	r0, #50	; 0x32
 80008ca:	f7ff fee3 	bl	8000694 <__LCD_Delay>

	// Display clear
	__LCD_Cmd(0x01);
 80008ce:	2001      	movs	r0, #1
 80008d0:	f7ff ff64 	bl	800079c <__LCD_Cmd>
	__LCD_Delay(1500);
 80008d4:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80008d8:	f7ff fedc 	bl	8000694 <__LCD_Delay>

	// Entry mode set
	__LCD_Cmd(0x06);
 80008dc:	2006      	movs	r0, #6
 80008de:	f7ff ff5d 	bl	800079c <__LCD_Cmd>
	__LCD_Delay(50);
 80008e2:	2032      	movs	r0, #50	; 0x32
 80008e4:	f7ff fed6 	bl	8000694 <__LCD_Delay>

	// Display on/off
	if (cursor && blinking) {
 80008e8:	79fb      	ldrb	r3, [r7, #7]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d006      	beq.n	80008fc <LCD_Init+0x90>
 80008ee:	79bb      	ldrb	r3, [r7, #6]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d003      	beq.n	80008fc <LCD_Init+0x90>
		__LCD_Cmd(CURSOR_BLINK);
 80008f4:	200f      	movs	r0, #15
 80008f6:	f7ff ff51 	bl	800079c <__LCD_Cmd>
 80008fa:	e010      	b.n	800091e <LCD_Init+0xb2>
	} else if (cursor) {
 80008fc:	79fb      	ldrb	r3, [r7, #7]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d003      	beq.n	800090a <LCD_Init+0x9e>
		__LCD_Cmd(CURSOR);
 8000902:	200e      	movs	r0, #14
 8000904:	f7ff ff4a 	bl	800079c <__LCD_Cmd>
 8000908:	e009      	b.n	800091e <LCD_Init+0xb2>
	} else if (blinking) {
 800090a:	79bb      	ldrb	r3, [r7, #6]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d003      	beq.n	8000918 <LCD_Init+0xac>
		__LCD_Cmd(BLINK);
 8000910:	200d      	movs	r0, #13
 8000912:	f7ff ff43 	bl	800079c <__LCD_Cmd>
 8000916:	e002      	b.n	800091e <LCD_Init+0xb2>
	} else {
		__LCD_Cmd(NO_BLINK_NO_CURSOR);
 8000918:	200c      	movs	r0, #12
 800091a:	f7ff ff3f 	bl	800079c <__LCD_Cmd>
	}

	__LCD_Delay(50000);
 800091e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000922:	f7ff feb7 	bl	8000694 <__LCD_Delay>
	LCD_Pos_Cursor(0, 0);
 8000926:	2100      	movs	r1, #0
 8000928:	2000      	movs	r0, #0
 800092a:	f7ff ff6c 	bl	8000806 <LCD_Pos_Cursor>

}
 800092e:	bf00      	nop
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
	...

08000938 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800093e:	f002 fa51 	bl	8002de4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000942:	f000 f88d 	bl	8000a60 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000946:	f000 f90d 	bl	8000b64 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800094a:	f000 fec9 	bl	80016e0 <MX_GPIO_Init>
  MX_ADC1_Init();
 800094e:	f000 f939 	bl	8000bc4 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000952:	f000 f9ad 	bl	8000cb0 <MX_ADC2_Init>
  MX_ADC3_Init();
 8000956:	f000 fa0f 	bl	8000d78 <MX_ADC3_Init>
  MX_ETH_Init();
 800095a:	f000 fa6f 	bl	8000e3c <MX_ETH_Init>
  MX_FDCAN1_Init();
 800095e:	f000 fab9 	bl	8000ed4 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8000962:	f000 fb1b 	bl	8000f9c <MX_FDCAN2_Init>
  MX_FMC_Init();
 8000966:	f000 fe6d 	bl	8001644 <MX_FMC_Init>
  MX_LTDC_Init();
 800096a:	f000 fb7b 	bl	8001064 <MX_LTDC_Init>
  MX_RTC_Init();
 800096e:	f000 fc2b 	bl	80011c8 <MX_RTC_Init>
  MX_SAI2_Init();
 8000972:	f000 fc85 	bl	8001280 <MX_SAI2_Init>
  MX_SPI2_Init();
 8000976:	f000 fd41 	bl	80013fc <MX_SPI2_Init>
  MX_USART3_UART_Init();
 800097a:	f000 fde5 	bl	8001548 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800097e:	f000 fe2f 	bl	80015e0 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 8000982:	f000 fd8f 	bl	80014a4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  STATE state = SETUP;
 8000986:	2300      	movs	r3, #0
 8000988:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  switch (state) {
 800098a:	79fb      	ldrb	r3, [r7, #7]
 800098c:	2b05      	cmp	r3, #5
 800098e:	d853      	bhi.n	8000a38 <main+0x100>
 8000990:	a201      	add	r2, pc, #4	; (adr r2, 8000998 <main+0x60>)
 8000992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000996:	bf00      	nop
 8000998:	080009b1 	.word	0x080009b1
 800099c:	080009bf 	.word	0x080009bf
 80009a0:	080009cf 	.word	0x080009cf
 80009a4:	080009e1 	.word	0x080009e1
 80009a8:	08000a25 	.word	0x08000a25
 80009ac:	08000a2b 	.word	0x08000a2b
	  	  case SETUP:
	  		  LCD_Init(false, false);
 80009b0:	2100      	movs	r1, #0
 80009b2:	2000      	movs	r0, #0
 80009b4:	f7ff ff5a 	bl	800086c <LCD_Init>
	  		  state = SHOW_MENU;
 80009b8:	2301      	movs	r3, #1
 80009ba:	71fb      	strb	r3, [r7, #7]
	  		  break;
 80009bc:	e044      	b.n	8000a48 <main+0x110>
	  	  case SHOW_MENU:
	  		  if (printWelcomeText()) {
 80009be:	f001 f8a3 	bl	8001b08 <printWelcomeText>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d03a      	beq.n	8000a3e <main+0x106>
	  			  state = GET_OPTION;
 80009c8:	2302      	movs	r3, #2
 80009ca:	71fb      	strb	r3, [r7, #7]
	  		  }
	  		  break;
 80009cc:	e037      	b.n	8000a3e <main+0x106>
	  	  case GET_OPTION:
	  		  if (receiveValue(1)) {
 80009ce:	2001      	movs	r0, #1
 80009d0:	f001 f8c8 	bl	8001b64 <receiveValue>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d033      	beq.n	8000a42 <main+0x10a>
	  			  state = SELECT_PROGRAM;
 80009da:	2303      	movs	r3, #3
 80009dc:	71fb      	strb	r3, [r7, #7]
	  		  }
	  		  break;
 80009de:	e030      	b.n	8000a42 <main+0x10a>
	  	  case SELECT_PROGRAM:
	  		  if (haveReceived) {
 80009e0:	4b1c      	ldr	r3, [pc, #112]	; (8000a54 <main+0x11c>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d02e      	beq.n	8000a46 <main+0x10e>
	  			  HAL_UART_Transmit(&huart3, (const uint8_t *) rxBuffer, 1, 6000);
 80009e8:	f241 7370 	movw	r3, #6000	; 0x1770
 80009ec:	2201      	movs	r2, #1
 80009ee:	491a      	ldr	r1, [pc, #104]	; (8000a58 <main+0x120>)
 80009f0:	481a      	ldr	r0, [pc, #104]	; (8000a5c <main+0x124>)
 80009f2:	f00a ffab 	bl	800b94c <HAL_UART_Transmit>
	  			  switch (rxBuffer[0]) {
 80009f6:	4b18      	ldr	r3, [pc, #96]	; (8000a58 <main+0x120>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	2b31      	cmp	r3, #49	; 0x31
 80009fc:	d002      	beq.n	8000a04 <main+0xcc>
 80009fe:	2b32      	cmp	r3, #50	; 0x32
 8000a00:	d003      	beq.n	8000a0a <main+0xd2>
 8000a02:	e005      	b.n	8000a10 <main+0xd8>
	  			  	  case '1':
	  			  		  state = MOVE_TEXT;
 8000a04:	2304      	movs	r3, #4
 8000a06:	71fb      	strb	r3, [r7, #7]
	  			  		  break;
 8000a08:	e005      	b.n	8000a16 <main+0xde>
	  			  	  case '2':
	  			  		  state = CLOCK_F;
 8000a0a:	2305      	movs	r3, #5
 8000a0c:	71fb      	strb	r3, [r7, #7]
	  			  		  break;
 8000a0e:	e002      	b.n	8000a16 <main+0xde>
	  			  	  default:
	  			  		  state = GET_OPTION;
 8000a10:	2302      	movs	r3, #2
 8000a12:	71fb      	strb	r3, [r7, #7]
	  			  		  break;
 8000a14:	bf00      	nop
	  			  }
	  			  if (state != SELECT_PROGRAM) {
 8000a16:	79fb      	ldrb	r3, [r7, #7]
 8000a18:	2b03      	cmp	r3, #3
 8000a1a:	d014      	beq.n	8000a46 <main+0x10e>
	  				  haveReceived = false;
 8000a1c:	4b0d      	ldr	r3, [pc, #52]	; (8000a54 <main+0x11c>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	701a      	strb	r2, [r3, #0]
	  			  }
	  		  }
	  		  break;
 8000a22:	e010      	b.n	8000a46 <main+0x10e>
	  	  case MOVE_TEXT:
	  		  moveTextLCD();
 8000a24:	f001 f8b8 	bl	8001b98 <moveTextLCD>
	  		  break;
 8000a28:	e00e      	b.n	8000a48 <main+0x110>
	  	  case CLOCK_F:
	  		  displayClock();
 8000a2a:	f001 f8ff 	bl	8001c2c <displayClock>
	  		  HAL_Delay(800);
 8000a2e:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000a32:	f002 fa69 	bl	8002f08 <HAL_Delay>
	  		  break;
 8000a36:	e007      	b.n	8000a48 <main+0x110>
	  	  default:
	  		  return -1;
 8000a38:	f04f 33ff 	mov.w	r3, #4294967295
 8000a3c:	e005      	b.n	8000a4a <main+0x112>
	  		  break;
 8000a3e:	bf00      	nop
 8000a40:	e7a3      	b.n	800098a <main+0x52>
	  		  break;
 8000a42:	bf00      	nop
 8000a44:	e7a1      	b.n	800098a <main+0x52>
	  		  break;
 8000a46:	bf00      	nop
	  switch (state) {
 8000a48:	e79f      	b.n	800098a <main+0x52>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	24000d6c 	.word	0x24000d6c
 8000a58:	24000d70 	.word	0x24000d70
 8000a5c:	24000798 	.word	0x24000798

08000a60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b09c      	sub	sp, #112	; 0x70
 8000a64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6a:	224c      	movs	r2, #76	; 0x4c
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f00d ff4c 	bl	800e90c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a74:	1d3b      	adds	r3, r7, #4
 8000a76:	2220      	movs	r2, #32
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f00d ff46 	bl	800e90c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a80:	2002      	movs	r0, #2
 8000a82:	f005 fedf 	bl	8006844 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a86:	2300      	movs	r3, #0
 8000a88:	603b      	str	r3, [r7, #0]
 8000a8a:	4b34      	ldr	r3, [pc, #208]	; (8000b5c <SystemClock_Config+0xfc>)
 8000a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a8e:	4a33      	ldr	r2, [pc, #204]	; (8000b5c <SystemClock_Config+0xfc>)
 8000a90:	f023 0301 	bic.w	r3, r3, #1
 8000a94:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000a96:	4b31      	ldr	r3, [pc, #196]	; (8000b5c <SystemClock_Config+0xfc>)
 8000a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	603b      	str	r3, [r7, #0]
 8000aa0:	4b2f      	ldr	r3, [pc, #188]	; (8000b60 <SystemClock_Config+0x100>)
 8000aa2:	699b      	ldr	r3, [r3, #24]
 8000aa4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000aa8:	4a2d      	ldr	r2, [pc, #180]	; (8000b60 <SystemClock_Config+0x100>)
 8000aaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000aae:	6193      	str	r3, [r2, #24]
 8000ab0:	4b2b      	ldr	r3, [pc, #172]	; (8000b60 <SystemClock_Config+0x100>)
 8000ab2:	699b      	ldr	r3, [r3, #24]
 8000ab4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ab8:	603b      	str	r3, [r7, #0]
 8000aba:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000abc:	bf00      	nop
 8000abe:	4b28      	ldr	r3, [pc, #160]	; (8000b60 <SystemClock_Config+0x100>)
 8000ac0:	699b      	ldr	r3, [r3, #24]
 8000ac2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ac6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000aca:	d1f8      	bne.n	8000abe <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000acc:	230b      	movs	r3, #11
 8000ace:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ad0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ad4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ada:	2340      	movs	r3, #64	; 0x40
 8000adc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 22;
 8000aea:	2316      	movs	r3, #22
 8000aec:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 169;
 8000aee:	23a9      	movs	r3, #169	; 0xa9
 8000af0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000af2:	2302      	movs	r3, #2
 8000af4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000af6:	2304      	movs	r3, #4
 8000af8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000afa:	2302      	movs	r3, #2
 8000afc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 8000afe:	2300      	movs	r3, #0
 8000b00:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b02:	2300      	movs	r3, #0
 8000b04:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b06:	2300      	movs	r3, #0
 8000b08:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f005 fee2 	bl	80068d8 <HAL_RCC_OscConfig>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000b1a:	f001 f8c1 	bl	8001ca0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b1e:	233f      	movs	r3, #63	; 0x3f
 8000b20:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b22:	2300      	movs	r3, #0
 8000b24:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b26:	2300      	movs	r3, #0
 8000b28:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000b32:	2300      	movs	r3, #0
 8000b34:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000b36:	2300      	movs	r3, #0
 8000b38:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b3e:	1d3b      	adds	r3, r7, #4
 8000b40:	2101      	movs	r1, #1
 8000b42:	4618      	mov	r0, r3
 8000b44:	f006 fb22 	bl	800718c <HAL_RCC_ClockConfig>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000b4e:	f001 f8a7 	bl	8001ca0 <Error_Handler>
  }
}
 8000b52:	bf00      	nop
 8000b54:	3770      	adds	r7, #112	; 0x70
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	58000400 	.word	0x58000400
 8000b60:	58024800 	.word	0x58024800

08000b64 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b0b0      	sub	sp, #192	; 0xc0
 8000b68:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b6a:	463b      	mov	r3, r7
 8000b6c:	22c0      	movs	r2, #192	; 0xc0
 8000b6e:	2100      	movs	r1, #0
 8000b70:	4618      	mov	r0, r3
 8000b72:	f00d fecb 	bl	800e90c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b76:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000b7a:	f04f 0300 	mov.w	r3, #0
 8000b7e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000b82:	2302      	movs	r3, #2
 8000b84:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000b86:	230c      	movs	r3, #12
 8000b88:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 8000b8a:	2305      	movs	r3, #5
 8000b8c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000b92:	2302      	movs	r3, #2
 8000b94:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000b96:	23c0      	movs	r3, #192	; 0xc0
 8000b98:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000b9a:	2320      	movs	r3, #32
 8000b9c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ba8:	463b      	mov	r3, r7
 8000baa:	4618      	mov	r0, r3
 8000bac:	f006 fe7a 	bl	80078a4 <HAL_RCCEx_PeriphCLKConfig>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000bb6:	f001 f873 	bl	8001ca0 <Error_Handler>
  }
}
 8000bba:	bf00      	nop
 8000bbc:	37c0      	adds	r7, #192	; 0xc0
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
	...

08000bc4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b08a      	sub	sp, #40	; 0x28
 8000bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000bca:	f107 031c 	add.w	r3, r7, #28
 8000bce:	2200      	movs	r2, #0
 8000bd0:	601a      	str	r2, [r3, #0]
 8000bd2:	605a      	str	r2, [r3, #4]
 8000bd4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000bd6:	463b      	mov	r3, r7
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]
 8000be2:	611a      	str	r2, [r3, #16]
 8000be4:	615a      	str	r2, [r3, #20]
 8000be6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000be8:	4b2f      	ldr	r3, [pc, #188]	; (8000ca8 <MX_ADC1_Init+0xe4>)
 8000bea:	4a30      	ldr	r2, [pc, #192]	; (8000cac <MX_ADC1_Init+0xe8>)
 8000bec:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000bee:	4b2e      	ldr	r3, [pc, #184]	; (8000ca8 <MX_ADC1_Init+0xe4>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000bf4:	4b2c      	ldr	r3, [pc, #176]	; (8000ca8 <MX_ADC1_Init+0xe4>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bfa:	4b2b      	ldr	r3, [pc, #172]	; (8000ca8 <MX_ADC1_Init+0xe4>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c00:	4b29      	ldr	r3, [pc, #164]	; (8000ca8 <MX_ADC1_Init+0xe4>)
 8000c02:	2204      	movs	r2, #4
 8000c04:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c06:	4b28      	ldr	r3, [pc, #160]	; (8000ca8 <MX_ADC1_Init+0xe4>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c0c:	4b26      	ldr	r3, [pc, #152]	; (8000ca8 <MX_ADC1_Init+0xe4>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000c12:	4b25      	ldr	r3, [pc, #148]	; (8000ca8 <MX_ADC1_Init+0xe4>)
 8000c14:	2201      	movs	r2, #1
 8000c16:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c18:	4b23      	ldr	r3, [pc, #140]	; (8000ca8 <MX_ADC1_Init+0xe4>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c1e:	4b22      	ldr	r3, [pc, #136]	; (8000ca8 <MX_ADC1_Init+0xe4>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c24:	4b20      	ldr	r3, [pc, #128]	; (8000ca8 <MX_ADC1_Init+0xe4>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000c2a:	4b1f      	ldr	r3, [pc, #124]	; (8000ca8 <MX_ADC1_Init+0xe4>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c30:	4b1d      	ldr	r3, [pc, #116]	; (8000ca8 <MX_ADC1_Init+0xe4>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000c36:	4b1c      	ldr	r3, [pc, #112]	; (8000ca8 <MX_ADC1_Init+0xe4>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000c3c:	4b1a      	ldr	r3, [pc, #104]	; (8000ca8 <MX_ADC1_Init+0xe4>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c44:	4818      	ldr	r0, [pc, #96]	; (8000ca8 <MX_ADC1_Init+0xe4>)
 8000c46:	f002 fb45 	bl	80032d4 <HAL_ADC_Init>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000c50:	f001 f826 	bl	8001ca0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c54:	2300      	movs	r3, #0
 8000c56:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c58:	f107 031c 	add.w	r3, r7, #28
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4812      	ldr	r0, [pc, #72]	; (8000ca8 <MX_ADC1_Init+0xe4>)
 8000c60:	f003 f95c 	bl	8003f1c <HAL_ADCEx_MultiModeConfigChannel>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000c6a:	f001 f819 	bl	8001ca0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c72:	2306      	movs	r3, #6
 8000c74:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c76:	2300      	movs	r3, #0
 8000c78:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c7a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000c7e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c80:	2304      	movs	r3, #4
 8000c82:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c8c:	463b      	mov	r3, r7
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4805      	ldr	r0, [pc, #20]	; (8000ca8 <MX_ADC1_Init+0xe4>)
 8000c92:	f002 fcc1 	bl	8003618 <HAL_ADC_ConfigChannel>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000c9c:	f001 f800 	bl	8001ca0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ca0:	bf00      	nop
 8000ca2:	3728      	adds	r7, #40	; 0x28
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	240001ac 	.word	0x240001ac
 8000cac:	40022000 	.word	0x40022000

08000cb0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b088      	sub	sp, #32
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cb6:	1d3b      	adds	r3, r7, #4
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]
 8000cc4:	615a      	str	r2, [r3, #20]
 8000cc6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000cc8:	4b29      	ldr	r3, [pc, #164]	; (8000d70 <MX_ADC2_Init+0xc0>)
 8000cca:	4a2a      	ldr	r2, [pc, #168]	; (8000d74 <MX_ADC2_Init+0xc4>)
 8000ccc:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000cce:	4b28      	ldr	r3, [pc, #160]	; (8000d70 <MX_ADC2_Init+0xc0>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000cd4:	4b26      	ldr	r3, [pc, #152]	; (8000d70 <MX_ADC2_Init+0xc0>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cda:	4b25      	ldr	r3, [pc, #148]	; (8000d70 <MX_ADC2_Init+0xc0>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ce0:	4b23      	ldr	r3, [pc, #140]	; (8000d70 <MX_ADC2_Init+0xc0>)
 8000ce2:	2204      	movs	r2, #4
 8000ce4:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000ce6:	4b22      	ldr	r3, [pc, #136]	; (8000d70 <MX_ADC2_Init+0xc0>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000cec:	4b20      	ldr	r3, [pc, #128]	; (8000d70 <MX_ADC2_Init+0xc0>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000cf2:	4b1f      	ldr	r3, [pc, #124]	; (8000d70 <MX_ADC2_Init+0xc0>)
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000cf8:	4b1d      	ldr	r3, [pc, #116]	; (8000d70 <MX_ADC2_Init+0xc0>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cfe:	4b1c      	ldr	r3, [pc, #112]	; (8000d70 <MX_ADC2_Init+0xc0>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d04:	4b1a      	ldr	r3, [pc, #104]	; (8000d70 <MX_ADC2_Init+0xc0>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000d0a:	4b19      	ldr	r3, [pc, #100]	; (8000d70 <MX_ADC2_Init+0xc0>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d10:	4b17      	ldr	r3, [pc, #92]	; (8000d70 <MX_ADC2_Init+0xc0>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000d16:	4b16      	ldr	r3, [pc, #88]	; (8000d70 <MX_ADC2_Init+0xc0>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000d1c:	4b14      	ldr	r3, [pc, #80]	; (8000d70 <MX_ADC2_Init+0xc0>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000d24:	4812      	ldr	r0, [pc, #72]	; (8000d70 <MX_ADC2_Init+0xc0>)
 8000d26:	f002 fad5 	bl	80032d4 <HAL_ADC_Init>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8000d30:	f000 ffb6 	bl	8001ca0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000d34:	2301      	movs	r3, #1
 8000d36:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d38:	2306      	movs	r3, #6
 8000d3a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d40:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000d44:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d46:	2304      	movs	r3, #4
 8000d48:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000d52:	1d3b      	adds	r3, r7, #4
 8000d54:	4619      	mov	r1, r3
 8000d56:	4806      	ldr	r0, [pc, #24]	; (8000d70 <MX_ADC2_Init+0xc0>)
 8000d58:	f002 fc5e 	bl	8003618 <HAL_ADC_ConfigChannel>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000d62:	f000 ff9d 	bl	8001ca0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000d66:	bf00      	nop
 8000d68:	3720      	adds	r7, #32
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	24000210 	.word	0x24000210
 8000d74:	40022100 	.word	0x40022100

08000d78 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b088      	sub	sp, #32
 8000d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d7e:	1d3b      	adds	r3, r7, #4
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	611a      	str	r2, [r3, #16]
 8000d8c:	615a      	str	r2, [r3, #20]
 8000d8e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000d90:	4b27      	ldr	r3, [pc, #156]	; (8000e30 <MX_ADC3_Init+0xb8>)
 8000d92:	4a28      	ldr	r2, [pc, #160]	; (8000e34 <MX_ADC3_Init+0xbc>)
 8000d94:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000d96:	4b26      	ldr	r3, [pc, #152]	; (8000e30 <MX_ADC3_Init+0xb8>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d9c:	4b24      	ldr	r3, [pc, #144]	; (8000e30 <MX_ADC3_Init+0xb8>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000da2:	4b23      	ldr	r3, [pc, #140]	; (8000e30 <MX_ADC3_Init+0xb8>)
 8000da4:	2204      	movs	r2, #4
 8000da6:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000da8:	4b21      	ldr	r3, [pc, #132]	; (8000e30 <MX_ADC3_Init+0xb8>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000dae:	4b20      	ldr	r3, [pc, #128]	; (8000e30 <MX_ADC3_Init+0xb8>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000db4:	4b1e      	ldr	r3, [pc, #120]	; (8000e30 <MX_ADC3_Init+0xb8>)
 8000db6:	2201      	movs	r2, #1
 8000db8:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000dba:	4b1d      	ldr	r3, [pc, #116]	; (8000e30 <MX_ADC3_Init+0xb8>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dc0:	4b1b      	ldr	r3, [pc, #108]	; (8000e30 <MX_ADC3_Init+0xb8>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dc6:	4b1a      	ldr	r3, [pc, #104]	; (8000e30 <MX_ADC3_Init+0xb8>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000dcc:	4b18      	ldr	r3, [pc, #96]	; (8000e30 <MX_ADC3_Init+0xb8>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000dd2:	4b17      	ldr	r3, [pc, #92]	; (8000e30 <MX_ADC3_Init+0xb8>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000dd8:	4b15      	ldr	r3, [pc, #84]	; (8000e30 <MX_ADC3_Init+0xb8>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000dde:	4b14      	ldr	r3, [pc, #80]	; (8000e30 <MX_ADC3_Init+0xb8>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000de6:	4812      	ldr	r0, [pc, #72]	; (8000e30 <MX_ADC3_Init+0xb8>)
 8000de8:	f002 fa74 	bl	80032d4 <HAL_ADC_Init>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_ADC3_Init+0x7e>
  {
    Error_Handler();
 8000df2:	f000 ff55 	bl	8001ca0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000df6:	4b10      	ldr	r3, [pc, #64]	; (8000e38 <MX_ADC3_Init+0xc0>)
 8000df8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dfa:	2306      	movs	r3, #6
 8000dfc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e02:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000e06:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e08:	2304      	movs	r3, #4
 8000e0a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000e10:	2300      	movs	r3, #0
 8000e12:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000e14:	1d3b      	adds	r3, r7, #4
 8000e16:	4619      	mov	r1, r3
 8000e18:	4805      	ldr	r0, [pc, #20]	; (8000e30 <MX_ADC3_Init+0xb8>)
 8000e1a:	f002 fbfd 	bl	8003618 <HAL_ADC_ConfigChannel>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8000e24:	f000 ff3c 	bl	8001ca0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000e28:	bf00      	nop
 8000e2a:	3720      	adds	r7, #32
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	24000274 	.word	0x24000274
 8000e34:	58026000 	.word	0x58026000
 8000e38:	1d500080 	.word	0x1d500080

08000e3c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000e40:	4b1e      	ldr	r3, [pc, #120]	; (8000ebc <MX_ETH_Init+0x80>)
 8000e42:	4a1f      	ldr	r2, [pc, #124]	; (8000ec0 <MX_ETH_Init+0x84>)
 8000e44:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000e46:	4b1f      	ldr	r3, [pc, #124]	; (8000ec4 <MX_ETH_Init+0x88>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000e4c:	4b1d      	ldr	r3, [pc, #116]	; (8000ec4 <MX_ETH_Init+0x88>)
 8000e4e:	2280      	movs	r2, #128	; 0x80
 8000e50:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000e52:	4b1c      	ldr	r3, [pc, #112]	; (8000ec4 <MX_ETH_Init+0x88>)
 8000e54:	22e1      	movs	r2, #225	; 0xe1
 8000e56:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000e58:	4b1a      	ldr	r3, [pc, #104]	; (8000ec4 <MX_ETH_Init+0x88>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000e5e:	4b19      	ldr	r3, [pc, #100]	; (8000ec4 <MX_ETH_Init+0x88>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000e64:	4b17      	ldr	r3, [pc, #92]	; (8000ec4 <MX_ETH_Init+0x88>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000e6a:	4b14      	ldr	r3, [pc, #80]	; (8000ebc <MX_ETH_Init+0x80>)
 8000e6c:	4a15      	ldr	r2, [pc, #84]	; (8000ec4 <MX_ETH_Init+0x88>)
 8000e6e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_MII_MODE;
 8000e70:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <MX_ETH_Init+0x80>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000e76:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <MX_ETH_Init+0x80>)
 8000e78:	4a13      	ldr	r2, [pc, #76]	; (8000ec8 <MX_ETH_Init+0x8c>)
 8000e7a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000e7c:	4b0f      	ldr	r3, [pc, #60]	; (8000ebc <MX_ETH_Init+0x80>)
 8000e7e:	4a13      	ldr	r2, [pc, #76]	; (8000ecc <MX_ETH_Init+0x90>)
 8000e80:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000e82:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <MX_ETH_Init+0x80>)
 8000e84:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000e88:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000e8a:	480c      	ldr	r0, [pc, #48]	; (8000ebc <MX_ETH_Init+0x80>)
 8000e8c:	f003 ff98 	bl	8004dc0 <HAL_ETH_Init>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000e96:	f000 ff03 	bl	8001ca0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000e9a:	2238      	movs	r2, #56	; 0x38
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	480c      	ldr	r0, [pc, #48]	; (8000ed0 <MX_ETH_Init+0x94>)
 8000ea0:	f00d fd34 	bl	800e90c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000ea4:	4b0a      	ldr	r3, [pc, #40]	; (8000ed0 <MX_ETH_Init+0x94>)
 8000ea6:	2221      	movs	r2, #33	; 0x21
 8000ea8:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000eaa:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <MX_ETH_Init+0x94>)
 8000eac:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000eb0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000eb2:	4b07      	ldr	r3, [pc, #28]	; (8000ed0 <MX_ETH_Init+0x94>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000eb8:	bf00      	nop
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	240002d8 	.word	0x240002d8
 8000ec0:	40028000 	.word	0x40028000
 8000ec4:	24000da8 	.word	0x24000da8
 8000ec8:	240000f8 	.word	0x240000f8
 8000ecc:	24000098 	.word	0x24000098
 8000ed0:	24000174 	.word	0x24000174

08000ed4 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000ed8:	4b2e      	ldr	r3, [pc, #184]	; (8000f94 <MX_FDCAN1_Init+0xc0>)
 8000eda:	4a2f      	ldr	r2, [pc, #188]	; (8000f98 <MX_FDCAN1_Init+0xc4>)
 8000edc:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000ede:	4b2d      	ldr	r3, [pc, #180]	; (8000f94 <MX_FDCAN1_Init+0xc0>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000ee4:	4b2b      	ldr	r3, [pc, #172]	; (8000f94 <MX_FDCAN1_Init+0xc0>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000eea:	4b2a      	ldr	r3, [pc, #168]	; (8000f94 <MX_FDCAN1_Init+0xc0>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000ef0:	4b28      	ldr	r3, [pc, #160]	; (8000f94 <MX_FDCAN1_Init+0xc0>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000ef6:	4b27      	ldr	r3, [pc, #156]	; (8000f94 <MX_FDCAN1_Init+0xc0>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000efc:	4b25      	ldr	r3, [pc, #148]	; (8000f94 <MX_FDCAN1_Init+0xc0>)
 8000efe:	2210      	movs	r2, #16
 8000f00:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000f02:	4b24      	ldr	r3, [pc, #144]	; (8000f94 <MX_FDCAN1_Init+0xc0>)
 8000f04:	2201      	movs	r2, #1
 8000f06:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000f08:	4b22      	ldr	r3, [pc, #136]	; (8000f94 <MX_FDCAN1_Init+0xc0>)
 8000f0a:	2202      	movs	r2, #2
 8000f0c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000f0e:	4b21      	ldr	r3, [pc, #132]	; (8000f94 <MX_FDCAN1_Init+0xc0>)
 8000f10:	2202      	movs	r2, #2
 8000f12:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000f14:	4b1f      	ldr	r3, [pc, #124]	; (8000f94 <MX_FDCAN1_Init+0xc0>)
 8000f16:	2201      	movs	r2, #1
 8000f18:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000f1a:	4b1e      	ldr	r3, [pc, #120]	; (8000f94 <MX_FDCAN1_Init+0xc0>)
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000f20:	4b1c      	ldr	r3, [pc, #112]	; (8000f94 <MX_FDCAN1_Init+0xc0>)
 8000f22:	2201      	movs	r2, #1
 8000f24:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000f26:	4b1b      	ldr	r3, [pc, #108]	; (8000f94 <MX_FDCAN1_Init+0xc0>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000f2c:	4b19      	ldr	r3, [pc, #100]	; (8000f94 <MX_FDCAN1_Init+0xc0>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000f32:	4b18      	ldr	r3, [pc, #96]	; (8000f94 <MX_FDCAN1_Init+0xc0>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000f38:	4b16      	ldr	r3, [pc, #88]	; (8000f94 <MX_FDCAN1_Init+0xc0>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000f3e:	4b15      	ldr	r3, [pc, #84]	; (8000f94 <MX_FDCAN1_Init+0xc0>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000f44:	4b13      	ldr	r3, [pc, #76]	; (8000f94 <MX_FDCAN1_Init+0xc0>)
 8000f46:	2204      	movs	r2, #4
 8000f48:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000f4a:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <MX_FDCAN1_Init+0xc0>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000f50:	4b10      	ldr	r3, [pc, #64]	; (8000f94 <MX_FDCAN1_Init+0xc0>)
 8000f52:	2204      	movs	r2, #4
 8000f54:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000f56:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <MX_FDCAN1_Init+0xc0>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000f5c:	4b0d      	ldr	r3, [pc, #52]	; (8000f94 <MX_FDCAN1_Init+0xc0>)
 8000f5e:	2204      	movs	r2, #4
 8000f60:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000f62:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <MX_FDCAN1_Init+0xc0>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000f68:	4b0a      	ldr	r3, [pc, #40]	; (8000f94 <MX_FDCAN1_Init+0xc0>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000f6e:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <MX_FDCAN1_Init+0xc0>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000f74:	4b07      	ldr	r3, [pc, #28]	; (8000f94 <MX_FDCAN1_Init+0xc0>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000f7a:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <MX_FDCAN1_Init+0xc0>)
 8000f7c:	2204      	movs	r2, #4
 8000f7e:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000f80:	4804      	ldr	r0, [pc, #16]	; (8000f94 <MX_FDCAN1_Init+0xc0>)
 8000f82:	f004 fb41 	bl	8005608 <HAL_FDCAN_Init>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000f8c:	f000 fe88 	bl	8001ca0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000f90:	bf00      	nop
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	24000388 	.word	0x24000388
 8000f98:	4000a000 	.word	0x4000a000

08000f9c <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000fa0:	4b2e      	ldr	r3, [pc, #184]	; (800105c <MX_FDCAN2_Init+0xc0>)
 8000fa2:	4a2f      	ldr	r2, [pc, #188]	; (8001060 <MX_FDCAN2_Init+0xc4>)
 8000fa4:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000fa6:	4b2d      	ldr	r3, [pc, #180]	; (800105c <MX_FDCAN2_Init+0xc0>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000fac:	4b2b      	ldr	r3, [pc, #172]	; (800105c <MX_FDCAN2_Init+0xc0>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000fb2:	4b2a      	ldr	r3, [pc, #168]	; (800105c <MX_FDCAN2_Init+0xc0>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000fb8:	4b28      	ldr	r3, [pc, #160]	; (800105c <MX_FDCAN2_Init+0xc0>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000fbe:	4b27      	ldr	r3, [pc, #156]	; (800105c <MX_FDCAN2_Init+0xc0>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8000fc4:	4b25      	ldr	r3, [pc, #148]	; (800105c <MX_FDCAN2_Init+0xc0>)
 8000fc6:	2210      	movs	r2, #16
 8000fc8:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000fca:	4b24      	ldr	r3, [pc, #144]	; (800105c <MX_FDCAN2_Init+0xc0>)
 8000fcc:	2201      	movs	r2, #1
 8000fce:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000fd0:	4b22      	ldr	r3, [pc, #136]	; (800105c <MX_FDCAN2_Init+0xc0>)
 8000fd2:	2202      	movs	r2, #2
 8000fd4:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000fd6:	4b21      	ldr	r3, [pc, #132]	; (800105c <MX_FDCAN2_Init+0xc0>)
 8000fd8:	2202      	movs	r2, #2
 8000fda:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000fdc:	4b1f      	ldr	r3, [pc, #124]	; (800105c <MX_FDCAN2_Init+0xc0>)
 8000fde:	2201      	movs	r2, #1
 8000fe0:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000fe2:	4b1e      	ldr	r3, [pc, #120]	; (800105c <MX_FDCAN2_Init+0xc0>)
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000fe8:	4b1c      	ldr	r3, [pc, #112]	; (800105c <MX_FDCAN2_Init+0xc0>)
 8000fea:	2201      	movs	r2, #1
 8000fec:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000fee:	4b1b      	ldr	r3, [pc, #108]	; (800105c <MX_FDCAN2_Init+0xc0>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000ff4:	4b19      	ldr	r3, [pc, #100]	; (800105c <MX_FDCAN2_Init+0xc0>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000ffa:	4b18      	ldr	r3, [pc, #96]	; (800105c <MX_FDCAN2_Init+0xc0>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8001000:	4b16      	ldr	r3, [pc, #88]	; (800105c <MX_FDCAN2_Init+0xc0>)
 8001002:	2200      	movs	r2, #0
 8001004:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8001006:	4b15      	ldr	r3, [pc, #84]	; (800105c <MX_FDCAN2_Init+0xc0>)
 8001008:	2200      	movs	r2, #0
 800100a:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 800100c:	4b13      	ldr	r3, [pc, #76]	; (800105c <MX_FDCAN2_Init+0xc0>)
 800100e:	2204      	movs	r2, #4
 8001010:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8001012:	4b12      	ldr	r3, [pc, #72]	; (800105c <MX_FDCAN2_Init+0xc0>)
 8001014:	2200      	movs	r2, #0
 8001016:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001018:	4b10      	ldr	r3, [pc, #64]	; (800105c <MX_FDCAN2_Init+0xc0>)
 800101a:	2204      	movs	r2, #4
 800101c:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 800101e:	4b0f      	ldr	r3, [pc, #60]	; (800105c <MX_FDCAN2_Init+0xc0>)
 8001020:	2200      	movs	r2, #0
 8001022:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001024:	4b0d      	ldr	r3, [pc, #52]	; (800105c <MX_FDCAN2_Init+0xc0>)
 8001026:	2204      	movs	r2, #4
 8001028:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 800102a:	4b0c      	ldr	r3, [pc, #48]	; (800105c <MX_FDCAN2_Init+0xc0>)
 800102c:	2200      	movs	r2, #0
 800102e:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8001030:	4b0a      	ldr	r3, [pc, #40]	; (800105c <MX_FDCAN2_Init+0xc0>)
 8001032:	2200      	movs	r2, #0
 8001034:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8001036:	4b09      	ldr	r3, [pc, #36]	; (800105c <MX_FDCAN2_Init+0xc0>)
 8001038:	2200      	movs	r2, #0
 800103a:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800103c:	4b07      	ldr	r3, [pc, #28]	; (800105c <MX_FDCAN2_Init+0xc0>)
 800103e:	2200      	movs	r2, #0
 8001040:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001042:	4b06      	ldr	r3, [pc, #24]	; (800105c <MX_FDCAN2_Init+0xc0>)
 8001044:	2204      	movs	r2, #4
 8001046:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8001048:	4804      	ldr	r0, [pc, #16]	; (800105c <MX_FDCAN2_Init+0xc0>)
 800104a:	f004 fadd 	bl	8005608 <HAL_FDCAN_Init>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8001054:	f000 fe24 	bl	8001ca0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8001058:	bf00      	nop
 800105a:	bd80      	pop	{r7, pc}
 800105c:	24000428 	.word	0x24000428
 8001060:	4000a400 	.word	0x4000a400

08001064 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b09a      	sub	sp, #104	; 0x68
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800106a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800106e:	2234      	movs	r2, #52	; 0x34
 8001070:	2100      	movs	r1, #0
 8001072:	4618      	mov	r0, r3
 8001074:	f00d fc4a 	bl	800e90c <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8001078:	463b      	mov	r3, r7
 800107a:	2234      	movs	r2, #52	; 0x34
 800107c:	2100      	movs	r1, #0
 800107e:	4618      	mov	r0, r3
 8001080:	f00d fc44 	bl	800e90c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001084:	4b4e      	ldr	r3, [pc, #312]	; (80011c0 <MX_LTDC_Init+0x15c>)
 8001086:	4a4f      	ldr	r2, [pc, #316]	; (80011c4 <MX_LTDC_Init+0x160>)
 8001088:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800108a:	4b4d      	ldr	r3, [pc, #308]	; (80011c0 <MX_LTDC_Init+0x15c>)
 800108c:	2200      	movs	r2, #0
 800108e:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001090:	4b4b      	ldr	r3, [pc, #300]	; (80011c0 <MX_LTDC_Init+0x15c>)
 8001092:	2200      	movs	r2, #0
 8001094:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001096:	4b4a      	ldr	r3, [pc, #296]	; (80011c0 <MX_LTDC_Init+0x15c>)
 8001098:	2200      	movs	r2, #0
 800109a:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800109c:	4b48      	ldr	r3, [pc, #288]	; (80011c0 <MX_LTDC_Init+0x15c>)
 800109e:	2200      	movs	r2, #0
 80010a0:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 80010a2:	4b47      	ldr	r3, [pc, #284]	; (80011c0 <MX_LTDC_Init+0x15c>)
 80010a4:	2207      	movs	r2, #7
 80010a6:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 80010a8:	4b45      	ldr	r3, [pc, #276]	; (80011c0 <MX_LTDC_Init+0x15c>)
 80010aa:	2203      	movs	r2, #3
 80010ac:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80010ae:	4b44      	ldr	r3, [pc, #272]	; (80011c0 <MX_LTDC_Init+0x15c>)
 80010b0:	220e      	movs	r2, #14
 80010b2:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80010b4:	4b42      	ldr	r3, [pc, #264]	; (80011c0 <MX_LTDC_Init+0x15c>)
 80010b6:	2205      	movs	r2, #5
 80010b8:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 80010ba:	4b41      	ldr	r3, [pc, #260]	; (80011c0 <MX_LTDC_Init+0x15c>)
 80010bc:	f240 228e 	movw	r2, #654	; 0x28e
 80010c0:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 80010c2:	4b3f      	ldr	r3, [pc, #252]	; (80011c0 <MX_LTDC_Init+0x15c>)
 80010c4:	f240 12e5 	movw	r2, #485	; 0x1e5
 80010c8:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 80010ca:	4b3d      	ldr	r3, [pc, #244]	; (80011c0 <MX_LTDC_Init+0x15c>)
 80010cc:	f44f 7225 	mov.w	r2, #660	; 0x294
 80010d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 80010d2:	4b3b      	ldr	r3, [pc, #236]	; (80011c0 <MX_LTDC_Init+0x15c>)
 80010d4:	f240 12e7 	movw	r2, #487	; 0x1e7
 80010d8:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80010da:	4b39      	ldr	r3, [pc, #228]	; (80011c0 <MX_LTDC_Init+0x15c>)
 80010dc:	2200      	movs	r2, #0
 80010de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80010e2:	4b37      	ldr	r3, [pc, #220]	; (80011c0 <MX_LTDC_Init+0x15c>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80010ea:	4b35      	ldr	r3, [pc, #212]	; (80011c0 <MX_LTDC_Init+0x15c>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80010f2:	4833      	ldr	r0, [pc, #204]	; (80011c0 <MX_LTDC_Init+0x15c>)
 80010f4:	f004 ffb6 	bl	8006064 <HAL_LTDC_Init>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 80010fe:	f000 fdcf 	bl	8001ca0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001102:	2300      	movs	r3, #0
 8001104:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8001106:	2300      	movs	r3, #0
 8001108:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 800110a:	2300      	movs	r3, #0
 800110c:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001112:	2300      	movs	r3, #0
 8001114:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8001116:	2300      	movs	r3, #0
 8001118:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800111e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001122:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001124:	2305      	movs	r3, #5
 8001126:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8001128:	2300      	movs	r3, #0
 800112a:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 800112c:	2300      	movs	r3, #0
 800112e:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8001130:	2300      	movs	r3, #0
 8001132:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001134:	2300      	movs	r3, #0
 8001136:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 800113a:	2300      	movs	r3, #0
 800113c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8001140:	2300      	movs	r3, #0
 8001142:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001146:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800114a:	2200      	movs	r2, #0
 800114c:	4619      	mov	r1, r3
 800114e:	481c      	ldr	r0, [pc, #112]	; (80011c0 <MX_LTDC_Init+0x15c>)
 8001150:	f005 f858 	bl	8006204 <HAL_LTDC_ConfigLayer>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 800115a:	f000 fda1 	bl	8001ca0 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 800115e:	2300      	movs	r3, #0
 8001160:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8001162:	2300      	movs	r3, #0
 8001164:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8001166:	2300      	movs	r3, #0
 8001168:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800116e:	2300      	movs	r3, #0
 8001170:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8001172:	2300      	movs	r3, #0
 8001174:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8001176:	2300      	movs	r3, #0
 8001178:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800117a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800117e:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001180:	2305      	movs	r3, #5
 8001182:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8001184:	2300      	movs	r3, #0
 8001186:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8001188:	2300      	movs	r3, #0
 800118a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 800118c:	2300      	movs	r3, #0
 800118e:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8001190:	2300      	movs	r3, #0
 8001192:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8001196:	2300      	movs	r3, #0
 8001198:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 800119c:	2300      	movs	r3, #0
 800119e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80011a2:	463b      	mov	r3, r7
 80011a4:	2201      	movs	r2, #1
 80011a6:	4619      	mov	r1, r3
 80011a8:	4805      	ldr	r0, [pc, #20]	; (80011c0 <MX_LTDC_Init+0x15c>)
 80011aa:	f005 f82b 	bl	8006204 <HAL_LTDC_ConfigLayer>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 80011b4:	f000 fd74 	bl	8001ca0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80011b8:	bf00      	nop
 80011ba:	3768      	adds	r7, #104	; 0x68
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	240004c8 	.word	0x240004c8
 80011c4:	50001000 	.word	0x50001000

080011c8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b086      	sub	sp, #24
 80011cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80011ce:	1d3b      	adds	r3, r7, #4
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80011dc:	2300      	movs	r3, #0
 80011de:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80011e0:	4b25      	ldr	r3, [pc, #148]	; (8001278 <MX_RTC_Init+0xb0>)
 80011e2:	4a26      	ldr	r2, [pc, #152]	; (800127c <MX_RTC_Init+0xb4>)
 80011e4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80011e6:	4b24      	ldr	r3, [pc, #144]	; (8001278 <MX_RTC_Init+0xb0>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80011ec:	4b22      	ldr	r3, [pc, #136]	; (8001278 <MX_RTC_Init+0xb0>)
 80011ee:	227f      	movs	r2, #127	; 0x7f
 80011f0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80011f2:	4b21      	ldr	r3, [pc, #132]	; (8001278 <MX_RTC_Init+0xb0>)
 80011f4:	22ff      	movs	r2, #255	; 0xff
 80011f6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80011f8:	4b1f      	ldr	r3, [pc, #124]	; (8001278 <MX_RTC_Init+0xb0>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80011fe:	4b1e      	ldr	r3, [pc, #120]	; (8001278 <MX_RTC_Init+0xb0>)
 8001200:	2200      	movs	r2, #0
 8001202:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001204:	4b1c      	ldr	r3, [pc, #112]	; (8001278 <MX_RTC_Init+0xb0>)
 8001206:	2200      	movs	r2, #0
 8001208:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800120a:	4b1b      	ldr	r3, [pc, #108]	; (8001278 <MX_RTC_Init+0xb0>)
 800120c:	2200      	movs	r2, #0
 800120e:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001210:	4819      	ldr	r0, [pc, #100]	; (8001278 <MX_RTC_Init+0xb0>)
 8001212:	f009 f845 	bl	800a2a0 <HAL_RTC_Init>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 800121c:	f000 fd40 	bl	8001ca0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8001224:	2300      	movs	r3, #0
 8001226:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8001228:	2300      	movs	r3, #0
 800122a:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800122c:	2300      	movs	r3, #0
 800122e:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001234:	1d3b      	adds	r3, r7, #4
 8001236:	2200      	movs	r2, #0
 8001238:	4619      	mov	r1, r3
 800123a:	480f      	ldr	r0, [pc, #60]	; (8001278 <MX_RTC_Init+0xb0>)
 800123c:	f009 f8b2 	bl	800a3a4 <HAL_RTC_SetTime>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8001246:	f000 fd2b 	bl	8001ca0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800124a:	2301      	movs	r3, #1
 800124c:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800124e:	2301      	movs	r3, #1
 8001250:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8001252:	2301      	movs	r3, #1
 8001254:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800125a:	463b      	mov	r3, r7
 800125c:	2200      	movs	r2, #0
 800125e:	4619      	mov	r1, r3
 8001260:	4805      	ldr	r0, [pc, #20]	; (8001278 <MX_RTC_Init+0xb0>)
 8001262:	f009 f999 	bl	800a598 <HAL_RTC_SetDate>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 800126c:	f000 fd18 	bl	8001ca0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001270:	bf00      	nop
 8001272:	3718      	adds	r7, #24
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	24000570 	.word	0x24000570
 800127c:	58004000 	.word	0x58004000

08001280 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001284:	4b58      	ldr	r3, [pc, #352]	; (80013e8 <MX_SAI2_Init+0x168>)
 8001286:	4a59      	ldr	r2, [pc, #356]	; (80013ec <MX_SAI2_Init+0x16c>)
 8001288:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 800128a:	4b57      	ldr	r3, [pc, #348]	; (80013e8 <MX_SAI2_Init+0x168>)
 800128c:	2200      	movs	r2, #0
 800128e:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001290:	4b55      	ldr	r3, [pc, #340]	; (80013e8 <MX_SAI2_Init+0x168>)
 8001292:	2200      	movs	r2, #0
 8001294:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8001296:	4b54      	ldr	r3, [pc, #336]	; (80013e8 <MX_SAI2_Init+0x168>)
 8001298:	2240      	movs	r2, #64	; 0x40
 800129a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800129c:	4b52      	ldr	r3, [pc, #328]	; (80013e8 <MX_SAI2_Init+0x168>)
 800129e:	2200      	movs	r2, #0
 80012a0:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80012a2:	4b51      	ldr	r3, [pc, #324]	; (80013e8 <MX_SAI2_Init+0x168>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80012a8:	4b4f      	ldr	r3, [pc, #316]	; (80013e8 <MX_SAI2_Init+0x168>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80012ae:	4b4e      	ldr	r3, [pc, #312]	; (80013e8 <MX_SAI2_Init+0x168>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80012b4:	4b4c      	ldr	r3, [pc, #304]	; (80013e8 <MX_SAI2_Init+0x168>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80012ba:	4b4b      	ldr	r3, [pc, #300]	; (80013e8 <MX_SAI2_Init+0x168>)
 80012bc:	2200      	movs	r2, #0
 80012be:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80012c0:	4b49      	ldr	r3, [pc, #292]	; (80013e8 <MX_SAI2_Init+0x168>)
 80012c2:	4a4b      	ldr	r2, [pc, #300]	; (80013f0 <MX_SAI2_Init+0x170>)
 80012c4:	621a      	str	r2, [r3, #32]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80012c6:	4b48      	ldr	r3, [pc, #288]	; (80013e8 <MX_SAI2_Init+0x168>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80012cc:	4b46      	ldr	r3, [pc, #280]	; (80013e8 <MX_SAI2_Init+0x168>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80012d2:	4b45      	ldr	r3, [pc, #276]	; (80013e8 <MX_SAI2_Init+0x168>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80012d8:	4b43      	ldr	r3, [pc, #268]	; (80013e8 <MX_SAI2_Init+0x168>)
 80012da:	2200      	movs	r2, #0
 80012dc:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.PdmInit.Activation = DISABLE;
 80012de:	4b42      	ldr	r3, [pc, #264]	; (80013e8 <MX_SAI2_Init+0x168>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.PdmInit.MicPairsNbr = 1;
 80012e6:	4b40      	ldr	r3, [pc, #256]	; (80013e8 <MX_SAI2_Init+0x168>)
 80012e8:	2201      	movs	r2, #1
 80012ea:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 80012ec:	4b3e      	ldr	r3, [pc, #248]	; (80013e8 <MX_SAI2_Init+0x168>)
 80012ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012f2:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.FrameLength = 8;
 80012f4:	4b3c      	ldr	r3, [pc, #240]	; (80013e8 <MX_SAI2_Init+0x168>)
 80012f6:	2208      	movs	r2, #8
 80012f8:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 80012fa:	4b3b      	ldr	r3, [pc, #236]	; (80013e8 <MX_SAI2_Init+0x168>)
 80012fc:	2201      	movs	r2, #1
 80012fe:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001300:	4b39      	ldr	r3, [pc, #228]	; (80013e8 <MX_SAI2_Init+0x168>)
 8001302:	2200      	movs	r2, #0
 8001304:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001306:	4b38      	ldr	r3, [pc, #224]	; (80013e8 <MX_SAI2_Init+0x168>)
 8001308:	2200      	movs	r2, #0
 800130a:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800130c:	4b36      	ldr	r3, [pc, #216]	; (80013e8 <MX_SAI2_Init+0x168>)
 800130e:	2200      	movs	r2, #0
 8001310:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001312:	4b35      	ldr	r3, [pc, #212]	; (80013e8 <MX_SAI2_Init+0x168>)
 8001314:	2200      	movs	r2, #0
 8001316:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001318:	4b33      	ldr	r3, [pc, #204]	; (80013e8 <MX_SAI2_Init+0x168>)
 800131a:	2200      	movs	r2, #0
 800131c:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 800131e:	4b32      	ldr	r3, [pc, #200]	; (80013e8 <MX_SAI2_Init+0x168>)
 8001320:	2201      	movs	r2, #1
 8001322:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001324:	4b30      	ldr	r3, [pc, #192]	; (80013e8 <MX_SAI2_Init+0x168>)
 8001326:	2200      	movs	r2, #0
 8001328:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 800132a:	482f      	ldr	r0, [pc, #188]	; (80013e8 <MX_SAI2_Init+0x168>)
 800132c:	f009 fada 	bl	800a8e4 <HAL_SAI_Init>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_SAI2_Init+0xba>
  {
    Error_Handler();
 8001336:	f000 fcb3 	bl	8001ca0 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 800133a:	4b2e      	ldr	r3, [pc, #184]	; (80013f4 <MX_SAI2_Init+0x174>)
 800133c:	4a2e      	ldr	r2, [pc, #184]	; (80013f8 <MX_SAI2_Init+0x178>)
 800133e:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001340:	4b2c      	ldr	r3, [pc, #176]	; (80013f4 <MX_SAI2_Init+0x174>)
 8001342:	2200      	movs	r2, #0
 8001344:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001346:	4b2b      	ldr	r3, [pc, #172]	; (80013f4 <MX_SAI2_Init+0x174>)
 8001348:	2203      	movs	r2, #3
 800134a:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 800134c:	4b29      	ldr	r3, [pc, #164]	; (80013f4 <MX_SAI2_Init+0x174>)
 800134e:	2240      	movs	r2, #64	; 0x40
 8001350:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001352:	4b28      	ldr	r3, [pc, #160]	; (80013f4 <MX_SAI2_Init+0x174>)
 8001354:	2200      	movs	r2, #0
 8001356:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001358:	4b26      	ldr	r3, [pc, #152]	; (80013f4 <MX_SAI2_Init+0x174>)
 800135a:	2200      	movs	r2, #0
 800135c:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 800135e:	4b25      	ldr	r3, [pc, #148]	; (80013f4 <MX_SAI2_Init+0x174>)
 8001360:	2201      	movs	r2, #1
 8001362:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001364:	4b23      	ldr	r3, [pc, #140]	; (80013f4 <MX_SAI2_Init+0x174>)
 8001366:	2200      	movs	r2, #0
 8001368:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800136a:	4b22      	ldr	r3, [pc, #136]	; (80013f4 <MX_SAI2_Init+0x174>)
 800136c:	2200      	movs	r2, #0
 800136e:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001370:	4b20      	ldr	r3, [pc, #128]	; (80013f4 <MX_SAI2_Init+0x174>)
 8001372:	2200      	movs	r2, #0
 8001374:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001376:	4b1f      	ldr	r3, [pc, #124]	; (80013f4 <MX_SAI2_Init+0x174>)
 8001378:	2200      	movs	r2, #0
 800137a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 800137c:	4b1d      	ldr	r3, [pc, #116]	; (80013f4 <MX_SAI2_Init+0x174>)
 800137e:	2200      	movs	r2, #0
 8001380:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001382:	4b1c      	ldr	r3, [pc, #112]	; (80013f4 <MX_SAI2_Init+0x174>)
 8001384:	2200      	movs	r2, #0
 8001386:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.PdmInit.Activation = DISABLE;
 8001388:	4b1a      	ldr	r3, [pc, #104]	; (80013f4 <MX_SAI2_Init+0x174>)
 800138a:	2200      	movs	r2, #0
 800138c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.PdmInit.MicPairsNbr = 1;
 8001390:	4b18      	ldr	r3, [pc, #96]	; (80013f4 <MX_SAI2_Init+0x174>)
 8001392:	2201      	movs	r2, #1
 8001394:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8001396:	4b17      	ldr	r3, [pc, #92]	; (80013f4 <MX_SAI2_Init+0x174>)
 8001398:	f44f 7280 	mov.w	r2, #256	; 0x100
 800139c:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.FrameLength = 8;
 800139e:	4b15      	ldr	r3, [pc, #84]	; (80013f4 <MX_SAI2_Init+0x174>)
 80013a0:	2208      	movs	r2, #8
 80013a2:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 80013a4:	4b13      	ldr	r3, [pc, #76]	; (80013f4 <MX_SAI2_Init+0x174>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80013aa:	4b12      	ldr	r3, [pc, #72]	; (80013f4 <MX_SAI2_Init+0x174>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80013b0:	4b10      	ldr	r3, [pc, #64]	; (80013f4 <MX_SAI2_Init+0x174>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80013b6:	4b0f      	ldr	r3, [pc, #60]	; (80013f4 <MX_SAI2_Init+0x174>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 80013bc:	4b0d      	ldr	r3, [pc, #52]	; (80013f4 <MX_SAI2_Init+0x174>)
 80013be:	2200      	movs	r2, #0
 80013c0:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80013c2:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <MX_SAI2_Init+0x174>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 80013c8:	4b0a      	ldr	r3, [pc, #40]	; (80013f4 <MX_SAI2_Init+0x174>)
 80013ca:	2201      	movs	r2, #1
 80013cc:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 80013ce:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <MX_SAI2_Init+0x174>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 80013d4:	4807      	ldr	r0, [pc, #28]	; (80013f4 <MX_SAI2_Init+0x174>)
 80013d6:	f009 fa85 	bl	800a8e4 <HAL_SAI_Init>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_SAI2_Init+0x164>
  {
    Error_Handler();
 80013e0:	f000 fc5e 	bl	8001ca0 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 80013e4:	bf00      	nop
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	24000594 	.word	0x24000594
 80013ec:	40015c04 	.word	0x40015c04
 80013f0:	0002ee00 	.word	0x0002ee00
 80013f4:	2400062c 	.word	0x2400062c
 80013f8:	40015c24 	.word	0x40015c24

080013fc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001400:	4b26      	ldr	r3, [pc, #152]	; (800149c <MX_SPI2_Init+0xa0>)
 8001402:	4a27      	ldr	r2, [pc, #156]	; (80014a0 <MX_SPI2_Init+0xa4>)
 8001404:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001406:	4b25      	ldr	r3, [pc, #148]	; (800149c <MX_SPI2_Init+0xa0>)
 8001408:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800140c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800140e:	4b23      	ldr	r3, [pc, #140]	; (800149c <MX_SPI2_Init+0xa0>)
 8001410:	2200      	movs	r2, #0
 8001412:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001414:	4b21      	ldr	r3, [pc, #132]	; (800149c <MX_SPI2_Init+0xa0>)
 8001416:	2203      	movs	r2, #3
 8001418:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800141a:	4b20      	ldr	r3, [pc, #128]	; (800149c <MX_SPI2_Init+0xa0>)
 800141c:	2200      	movs	r2, #0
 800141e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001420:	4b1e      	ldr	r3, [pc, #120]	; (800149c <MX_SPI2_Init+0xa0>)
 8001422:	2200      	movs	r2, #0
 8001424:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8001426:	4b1d      	ldr	r3, [pc, #116]	; (800149c <MX_SPI2_Init+0xa0>)
 8001428:	2200      	movs	r2, #0
 800142a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800142c:	4b1b      	ldr	r3, [pc, #108]	; (800149c <MX_SPI2_Init+0xa0>)
 800142e:	2200      	movs	r2, #0
 8001430:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001432:	4b1a      	ldr	r3, [pc, #104]	; (800149c <MX_SPI2_Init+0xa0>)
 8001434:	2200      	movs	r2, #0
 8001436:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001438:	4b18      	ldr	r3, [pc, #96]	; (800149c <MX_SPI2_Init+0xa0>)
 800143a:	2200      	movs	r2, #0
 800143c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800143e:	4b17      	ldr	r3, [pc, #92]	; (800149c <MX_SPI2_Init+0xa0>)
 8001440:	2200      	movs	r2, #0
 8001442:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001444:	4b15      	ldr	r3, [pc, #84]	; (800149c <MX_SPI2_Init+0xa0>)
 8001446:	2200      	movs	r2, #0
 8001448:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800144a:	4b14      	ldr	r3, [pc, #80]	; (800149c <MX_SPI2_Init+0xa0>)
 800144c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001450:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001452:	4b12      	ldr	r3, [pc, #72]	; (800149c <MX_SPI2_Init+0xa0>)
 8001454:	2200      	movs	r2, #0
 8001456:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001458:	4b10      	ldr	r3, [pc, #64]	; (800149c <MX_SPI2_Init+0xa0>)
 800145a:	2200      	movs	r2, #0
 800145c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800145e:	4b0f      	ldr	r3, [pc, #60]	; (800149c <MX_SPI2_Init+0xa0>)
 8001460:	2200      	movs	r2, #0
 8001462:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001464:	4b0d      	ldr	r3, [pc, #52]	; (800149c <MX_SPI2_Init+0xa0>)
 8001466:	2200      	movs	r2, #0
 8001468:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800146a:	4b0c      	ldr	r3, [pc, #48]	; (800149c <MX_SPI2_Init+0xa0>)
 800146c:	2200      	movs	r2, #0
 800146e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001470:	4b0a      	ldr	r3, [pc, #40]	; (800149c <MX_SPI2_Init+0xa0>)
 8001472:	2200      	movs	r2, #0
 8001474:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001476:	4b09      	ldr	r3, [pc, #36]	; (800149c <MX_SPI2_Init+0xa0>)
 8001478:	2200      	movs	r2, #0
 800147a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800147c:	4b07      	ldr	r3, [pc, #28]	; (800149c <MX_SPI2_Init+0xa0>)
 800147e:	2200      	movs	r2, #0
 8001480:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001482:	4b06      	ldr	r3, [pc, #24]	; (800149c <MX_SPI2_Init+0xa0>)
 8001484:	2200      	movs	r2, #0
 8001486:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001488:	4804      	ldr	r0, [pc, #16]	; (800149c <MX_SPI2_Init+0xa0>)
 800148a:	f009 fd4b 	bl	800af24 <HAL_SPI_Init>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_SPI2_Init+0x9c>
  {
    Error_Handler();
 8001494:	f000 fc04 	bl	8001ca0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001498:	bf00      	nop
 800149a:	bd80      	pop	{r7, pc}
 800149c:	240006c4 	.word	0x240006c4
 80014a0:	40003800 	.word	0x40003800

080014a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b088      	sub	sp, #32
 80014a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014aa:	f107 0310 	add.w	r3, r7, #16
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	605a      	str	r2, [r3, #4]
 80014b4:	609a      	str	r2, [r3, #8]
 80014b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014b8:	1d3b      	adds	r3, r7, #4
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	605a      	str	r2, [r3, #4]
 80014c0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014c2:	4b1f      	ldr	r3, [pc, #124]	; (8001540 <MX_TIM3_Init+0x9c>)
 80014c4:	4a1f      	ldr	r2, [pc, #124]	; (8001544 <MX_TIM3_Init+0xa0>)
 80014c6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 80014c8:	4b1d      	ldr	r3, [pc, #116]	; (8001540 <MX_TIM3_Init+0x9c>)
 80014ca:	223f      	movs	r2, #63	; 0x3f
 80014cc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ce:	4b1c      	ldr	r3, [pc, #112]	; (8001540 <MX_TIM3_Init+0x9c>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80014d4:	4b1a      	ldr	r3, [pc, #104]	; (8001540 <MX_TIM3_Init+0x9c>)
 80014d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014da:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014dc:	4b18      	ldr	r3, [pc, #96]	; (8001540 <MX_TIM3_Init+0x9c>)
 80014de:	2200      	movs	r2, #0
 80014e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014e2:	4b17      	ldr	r3, [pc, #92]	; (8001540 <MX_TIM3_Init+0x9c>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80014e8:	4815      	ldr	r0, [pc, #84]	; (8001540 <MX_TIM3_Init+0x9c>)
 80014ea:	f009 fe5a 	bl	800b1a2 <HAL_TIM_Base_Init>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80014f4:	f000 fbd4 	bl	8001ca0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014fe:	f107 0310 	add.w	r3, r7, #16
 8001502:	4619      	mov	r1, r3
 8001504:	480e      	ldr	r0, [pc, #56]	; (8001540 <MX_TIM3_Init+0x9c>)
 8001506:	f009 ff13 	bl	800b330 <HAL_TIM_ConfigClockSource>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001510:	f000 fbc6 	bl	8001ca0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001514:	2300      	movs	r3, #0
 8001516:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001518:	2300      	movs	r3, #0
 800151a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800151c:	1d3b      	adds	r3, r7, #4
 800151e:	4619      	mov	r1, r3
 8001520:	4807      	ldr	r0, [pc, #28]	; (8001540 <MX_TIM3_Init+0x9c>)
 8001522:	f00a f935 	bl	800b790 <HAL_TIMEx_MasterConfigSynchronization>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800152c:	f000 fbb8 	bl	8001ca0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Base_Start(&htim3);
 8001530:	4803      	ldr	r0, [pc, #12]	; (8001540 <MX_TIM3_Init+0x9c>)
 8001532:	f009 fe8d 	bl	800b250 <HAL_TIM_Base_Start>

  /* USER CODE END TIM3_Init 2 */

}
 8001536:	bf00      	nop
 8001538:	3720      	adds	r7, #32
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	2400074c 	.word	0x2400074c
 8001544:	40000400 	.word	0x40000400

08001548 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800154c:	4b22      	ldr	r3, [pc, #136]	; (80015d8 <MX_USART3_UART_Init+0x90>)
 800154e:	4a23      	ldr	r2, [pc, #140]	; (80015dc <MX_USART3_UART_Init+0x94>)
 8001550:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001552:	4b21      	ldr	r3, [pc, #132]	; (80015d8 <MX_USART3_UART_Init+0x90>)
 8001554:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001558:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800155a:	4b1f      	ldr	r3, [pc, #124]	; (80015d8 <MX_USART3_UART_Init+0x90>)
 800155c:	2200      	movs	r2, #0
 800155e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001560:	4b1d      	ldr	r3, [pc, #116]	; (80015d8 <MX_USART3_UART_Init+0x90>)
 8001562:	2200      	movs	r2, #0
 8001564:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001566:	4b1c      	ldr	r3, [pc, #112]	; (80015d8 <MX_USART3_UART_Init+0x90>)
 8001568:	2200      	movs	r2, #0
 800156a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800156c:	4b1a      	ldr	r3, [pc, #104]	; (80015d8 <MX_USART3_UART_Init+0x90>)
 800156e:	220c      	movs	r2, #12
 8001570:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001572:	4b19      	ldr	r3, [pc, #100]	; (80015d8 <MX_USART3_UART_Init+0x90>)
 8001574:	2200      	movs	r2, #0
 8001576:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001578:	4b17      	ldr	r3, [pc, #92]	; (80015d8 <MX_USART3_UART_Init+0x90>)
 800157a:	2200      	movs	r2, #0
 800157c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800157e:	4b16      	ldr	r3, [pc, #88]	; (80015d8 <MX_USART3_UART_Init+0x90>)
 8001580:	2200      	movs	r2, #0
 8001582:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001584:	4b14      	ldr	r3, [pc, #80]	; (80015d8 <MX_USART3_UART_Init+0x90>)
 8001586:	2200      	movs	r2, #0
 8001588:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800158a:	4b13      	ldr	r3, [pc, #76]	; (80015d8 <MX_USART3_UART_Init+0x90>)
 800158c:	2200      	movs	r2, #0
 800158e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001590:	4811      	ldr	r0, [pc, #68]	; (80015d8 <MX_USART3_UART_Init+0x90>)
 8001592:	f00a f98b 	bl	800b8ac <HAL_UART_Init>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800159c:	f000 fb80 	bl	8001ca0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015a0:	2100      	movs	r1, #0
 80015a2:	480d      	ldr	r0, [pc, #52]	; (80015d8 <MX_USART3_UART_Init+0x90>)
 80015a4:	f00c fcdf 	bl	800df66 <HAL_UARTEx_SetTxFifoThreshold>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80015ae:	f000 fb77 	bl	8001ca0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015b2:	2100      	movs	r1, #0
 80015b4:	4808      	ldr	r0, [pc, #32]	; (80015d8 <MX_USART3_UART_Init+0x90>)
 80015b6:	f00c fd14 	bl	800dfe2 <HAL_UARTEx_SetRxFifoThreshold>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80015c0:	f000 fb6e 	bl	8001ca0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80015c4:	4804      	ldr	r0, [pc, #16]	; (80015d8 <MX_USART3_UART_Init+0x90>)
 80015c6:	f00c fc95 	bl	800def4 <HAL_UARTEx_DisableFifoMode>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80015d0:	f000 fb66 	bl	8001ca0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015d4:	bf00      	nop
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	24000798 	.word	0x24000798
 80015dc:	40004800 	.word	0x40004800

080015e0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80015e4:	4b15      	ldr	r3, [pc, #84]	; (800163c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80015e6:	4a16      	ldr	r2, [pc, #88]	; (8001640 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80015e8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80015ea:	4b14      	ldr	r3, [pc, #80]	; (800163c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80015ec:	2209      	movs	r2, #9
 80015ee:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80015f0:	4b12      	ldr	r3, [pc, #72]	; (800163c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80015f2:	2202      	movs	r2, #2
 80015f4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80015f6:	4b11      	ldr	r3, [pc, #68]	; (800163c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80015fc:	4b0f      	ldr	r3, [pc, #60]	; (800163c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80015fe:	2202      	movs	r2, #2
 8001600:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001602:	4b0e      	ldr	r3, [pc, #56]	; (800163c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001604:	2200      	movs	r2, #0
 8001606:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001608:	4b0c      	ldr	r3, [pc, #48]	; (800163c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800160a:	2200      	movs	r2, #0
 800160c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800160e:	4b0b      	ldr	r3, [pc, #44]	; (800163c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001610:	2200      	movs	r2, #0
 8001612:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001614:	4b09      	ldr	r3, [pc, #36]	; (800163c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001616:	2201      	movs	r2, #1
 8001618:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800161a:	4b08      	ldr	r3, [pc, #32]	; (800163c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800161c:	2201      	movs	r2, #1
 800161e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001620:	4b06      	ldr	r3, [pc, #24]	; (800163c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001622:	2200      	movs	r2, #0
 8001624:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001626:	4805      	ldr	r0, [pc, #20]	; (800163c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001628:	f004 ffc4 	bl	80065b4 <HAL_PCD_Init>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001632:	f000 fb35 	bl	8001ca0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	2400082c 	.word	0x2400082c
 8001640:	40080000 	.word	0x40080000

08001644 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b088      	sub	sp, #32
 8001648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800164a:	1d3b      	adds	r3, r7, #4
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
 8001652:	609a      	str	r2, [r3, #8]
 8001654:	60da      	str	r2, [r3, #12]
 8001656:	611a      	str	r2, [r3, #16]
 8001658:	615a      	str	r2, [r3, #20]
 800165a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800165c:	4b1e      	ldr	r3, [pc, #120]	; (80016d8 <MX_FMC_Init+0x94>)
 800165e:	4a1f      	ldr	r2, [pc, #124]	; (80016dc <MX_FMC_Init+0x98>)
 8001660:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8001662:	4b1d      	ldr	r3, [pc, #116]	; (80016d8 <MX_FMC_Init+0x94>)
 8001664:	2201      	movs	r2, #1
 8001666:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001668:	4b1b      	ldr	r3, [pc, #108]	; (80016d8 <MX_FMC_Init+0x94>)
 800166a:	2200      	movs	r2, #0
 800166c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800166e:	4b1a      	ldr	r3, [pc, #104]	; (80016d8 <MX_FMC_Init+0x94>)
 8001670:	2204      	movs	r2, #4
 8001672:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001674:	4b18      	ldr	r3, [pc, #96]	; (80016d8 <MX_FMC_Init+0x94>)
 8001676:	2210      	movs	r2, #16
 8001678:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800167a:	4b17      	ldr	r3, [pc, #92]	; (80016d8 <MX_FMC_Init+0x94>)
 800167c:	2240      	movs	r2, #64	; 0x40
 800167e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8001680:	4b15      	ldr	r3, [pc, #84]	; (80016d8 <MX_FMC_Init+0x94>)
 8001682:	2280      	movs	r2, #128	; 0x80
 8001684:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001686:	4b14      	ldr	r3, [pc, #80]	; (80016d8 <MX_FMC_Init+0x94>)
 8001688:	2200      	movs	r2, #0
 800168a:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 800168c:	4b12      	ldr	r3, [pc, #72]	; (80016d8 <MX_FMC_Init+0x94>)
 800168e:	2200      	movs	r2, #0
 8001690:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001692:	4b11      	ldr	r3, [pc, #68]	; (80016d8 <MX_FMC_Init+0x94>)
 8001694:	2200      	movs	r2, #0
 8001696:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001698:	4b0f      	ldr	r3, [pc, #60]	; (80016d8 <MX_FMC_Init+0x94>)
 800169a:	2200      	movs	r2, #0
 800169c:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 800169e:	2310      	movs	r3, #16
 80016a0:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 80016a2:	2310      	movs	r3, #16
 80016a4:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 80016a6:	2310      	movs	r3, #16
 80016a8:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 80016aa:	2310      	movs	r3, #16
 80016ac:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 80016ae:	2310      	movs	r3, #16
 80016b0:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 80016b2:	2310      	movs	r3, #16
 80016b4:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 80016b6:	2310      	movs	r3, #16
 80016b8:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80016ba:	1d3b      	adds	r3, r7, #4
 80016bc:	4619      	mov	r1, r3
 80016be:	4806      	ldr	r0, [pc, #24]	; (80016d8 <MX_FMC_Init+0x94>)
 80016c0:	f009 fbf4 	bl	800aeac <HAL_SDRAM_Init>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 80016ca:	f000 fae9 	bl	8001ca0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80016ce:	bf00      	nop
 80016d0:	3720      	adds	r7, #32
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	24000d38 	.word	0x24000d38
 80016dc:	52004140 	.word	0x52004140

080016e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b090      	sub	sp, #64	; 0x40
 80016e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	605a      	str	r2, [r3, #4]
 80016f0:	609a      	str	r2, [r3, #8]
 80016f2:	60da      	str	r2, [r3, #12]
 80016f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80016f6:	4bc0      	ldr	r3, [pc, #768]	; (80019f8 <MX_GPIO_Init+0x318>)
 80016f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016fc:	4abe      	ldr	r2, [pc, #760]	; (80019f8 <MX_GPIO_Init+0x318>)
 80016fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001702:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001706:	4bbc      	ldr	r3, [pc, #752]	; (80019f8 <MX_GPIO_Init+0x318>)
 8001708:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800170c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001710:	62bb      	str	r3, [r7, #40]	; 0x28
 8001712:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001714:	4bb8      	ldr	r3, [pc, #736]	; (80019f8 <MX_GPIO_Init+0x318>)
 8001716:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800171a:	4ab7      	ldr	r2, [pc, #732]	; (80019f8 <MX_GPIO_Init+0x318>)
 800171c:	f043 0302 	orr.w	r3, r3, #2
 8001720:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001724:	4bb4      	ldr	r3, [pc, #720]	; (80019f8 <MX_GPIO_Init+0x318>)
 8001726:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	627b      	str	r3, [r7, #36]	; 0x24
 8001730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001732:	4bb1      	ldr	r3, [pc, #708]	; (80019f8 <MX_GPIO_Init+0x318>)
 8001734:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001738:	4aaf      	ldr	r2, [pc, #700]	; (80019f8 <MX_GPIO_Init+0x318>)
 800173a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800173e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001742:	4bad      	ldr	r3, [pc, #692]	; (80019f8 <MX_GPIO_Init+0x318>)
 8001744:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001748:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800174c:	623b      	str	r3, [r7, #32]
 800174e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001750:	4ba9      	ldr	r3, [pc, #676]	; (80019f8 <MX_GPIO_Init+0x318>)
 8001752:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001756:	4aa8      	ldr	r2, [pc, #672]	; (80019f8 <MX_GPIO_Init+0x318>)
 8001758:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800175c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001760:	4ba5      	ldr	r3, [pc, #660]	; (80019f8 <MX_GPIO_Init+0x318>)
 8001762:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800176a:	61fb      	str	r3, [r7, #28]
 800176c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800176e:	4ba2      	ldr	r3, [pc, #648]	; (80019f8 <MX_GPIO_Init+0x318>)
 8001770:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001774:	4aa0      	ldr	r2, [pc, #640]	; (80019f8 <MX_GPIO_Init+0x318>)
 8001776:	f043 0304 	orr.w	r3, r3, #4
 800177a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800177e:	4b9e      	ldr	r3, [pc, #632]	; (80019f8 <MX_GPIO_Init+0x318>)
 8001780:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001784:	f003 0304 	and.w	r3, r3, #4
 8001788:	61bb      	str	r3, [r7, #24]
 800178a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800178c:	4b9a      	ldr	r3, [pc, #616]	; (80019f8 <MX_GPIO_Init+0x318>)
 800178e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001792:	4a99      	ldr	r2, [pc, #612]	; (80019f8 <MX_GPIO_Init+0x318>)
 8001794:	f043 0301 	orr.w	r3, r3, #1
 8001798:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800179c:	4b96      	ldr	r3, [pc, #600]	; (80019f8 <MX_GPIO_Init+0x318>)
 800179e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	617b      	str	r3, [r7, #20]
 80017a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017aa:	4b93      	ldr	r3, [pc, #588]	; (80019f8 <MX_GPIO_Init+0x318>)
 80017ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017b0:	4a91      	ldr	r2, [pc, #580]	; (80019f8 <MX_GPIO_Init+0x318>)
 80017b2:	f043 0310 	orr.w	r3, r3, #16
 80017b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017ba:	4b8f      	ldr	r3, [pc, #572]	; (80019f8 <MX_GPIO_Init+0x318>)
 80017bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017c0:	f003 0310 	and.w	r3, r3, #16
 80017c4:	613b      	str	r3, [r7, #16]
 80017c6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80017c8:	4b8b      	ldr	r3, [pc, #556]	; (80019f8 <MX_GPIO_Init+0x318>)
 80017ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017ce:	4a8a      	ldr	r2, [pc, #552]	; (80019f8 <MX_GPIO_Init+0x318>)
 80017d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017d8:	4b87      	ldr	r3, [pc, #540]	; (80019f8 <MX_GPIO_Init+0x318>)
 80017da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017e6:	4b84      	ldr	r3, [pc, #528]	; (80019f8 <MX_GPIO_Init+0x318>)
 80017e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017ec:	4a82      	ldr	r2, [pc, #520]	; (80019f8 <MX_GPIO_Init+0x318>)
 80017ee:	f043 0308 	orr.w	r3, r3, #8
 80017f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017f6:	4b80      	ldr	r3, [pc, #512]	; (80019f8 <MX_GPIO_Init+0x318>)
 80017f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017fc:	f003 0308 	and.w	r3, r3, #8
 8001800:	60bb      	str	r3, [r7, #8]
 8001802:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001804:	4b7c      	ldr	r3, [pc, #496]	; (80019f8 <MX_GPIO_Init+0x318>)
 8001806:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800180a:	4a7b      	ldr	r2, [pc, #492]	; (80019f8 <MX_GPIO_Init+0x318>)
 800180c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001810:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001814:	4b78      	ldr	r3, [pc, #480]	; (80019f8 <MX_GPIO_Init+0x318>)
 8001816:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800181a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800181e:	607b      	str	r3, [r7, #4]
 8001820:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001822:	4b75      	ldr	r3, [pc, #468]	; (80019f8 <MX_GPIO_Init+0x318>)
 8001824:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001828:	4a73      	ldr	r2, [pc, #460]	; (80019f8 <MX_GPIO_Init+0x318>)
 800182a:	f043 0320 	orr.w	r3, r3, #32
 800182e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001832:	4b71      	ldr	r3, [pc, #452]	; (80019f8 <MX_GPIO_Init+0x318>)
 8001834:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001838:	f003 0320 	and.w	r3, r3, #32
 800183c:	603b      	str	r3, [r7, #0]
 800183e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7|MII_TX_ER_nINT_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8001840:	2200      	movs	r2, #0
 8001842:	f241 01c4 	movw	r1, #4292	; 0x10c4
 8001846:	486d      	ldr	r0, [pc, #436]	; (80019fc <MX_GPIO_Init+0x31c>)
 8001848:	f004 fbf2 	bl	8006030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_6, GPIO_PIN_RESET);
 800184c:	2200      	movs	r2, #0
 800184e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8001852:	486b      	ldr	r0, [pc, #428]	; (8001a00 <MX_GPIO_Init+0x320>)
 8001854:	f004 fbec 	bl	8006030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001858:	2200      	movs	r2, #0
 800185a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800185e:	4869      	ldr	r0, [pc, #420]	; (8001a04 <MX_GPIO_Init+0x324>)
 8001860:	f004 fbe6 	bl	8006030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, GPIO_PIN_RESET);
 8001864:	2200      	movs	r2, #0
 8001866:	2108      	movs	r1, #8
 8001868:	4867      	ldr	r0, [pc, #412]	; (8001a08 <MX_GPIO_Init+0x328>)
 800186a:	f004 fbe1 	bl	8006030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_1, GPIO_PIN_RESET);
 800186e:	2200      	movs	r2, #0
 8001870:	2102      	movs	r1, #2
 8001872:	4866      	ldr	r0, [pc, #408]	; (8001a0c <MX_GPIO_Init+0x32c>)
 8001874:	f004 fbdc 	bl	8006030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8001878:	2200      	movs	r2, #0
 800187a:	2104      	movs	r1, #4
 800187c:	4864      	ldr	r0, [pc, #400]	; (8001a10 <MX_GPIO_Init+0x330>)
 800187e:	f004 fbd7 	bl	8006030 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB6 PB7 MII_TX_ER_nINT_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|MII_TX_ER_nINT_Pin|LCD_RST_Pin;
 8001882:	f241 03c4 	movw	r3, #4292	; 0x10c4
 8001886:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001888:	2301      	movs	r3, #1
 800188a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188c:	2300      	movs	r3, #0
 800188e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001890:	2300      	movs	r3, #0
 8001892:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001894:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001898:	4619      	mov	r1, r3
 800189a:	4858      	ldr	r0, [pc, #352]	; (80019fc <MX_GPIO_Init+0x31c>)
 800189c:	f004 fa18 	bl	8005cd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80018a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a6:	2302      	movs	r3, #2
 80018a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018aa:	2300      	movs	r3, #0
 80018ac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ae:	2300      	movs	r3, #0
 80018b0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80018b2:	2303      	movs	r3, #3
 80018b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80018b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018ba:	4619      	mov	r1, r3
 80018bc:	4855      	ldr	r0, [pc, #340]	; (8001a14 <MX_GPIO_Init+0x334>)
 80018be:	f004 fa07 	bl	8005cd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISPD7_Pin */
  GPIO_InitStruct.Pin = LCD_DISPD7_Pin;
 80018c2:	2380      	movs	r3, #128	; 0x80
 80018c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018c6:	2300      	movs	r3, #0
 80018c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_DISPD7_GPIO_Port, &GPIO_InitStruct);
 80018ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018d2:	4619      	mov	r1, r3
 80018d4:	4850      	ldr	r0, [pc, #320]	; (8001a18 <MX_GPIO_Init+0x338>)
 80018d6:	f004 f9fb 	bl	8005cd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE5 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 80018da:	2330      	movs	r3, #48	; 0x30
 80018dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018de:	2302      	movs	r3, #2
 80018e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e6:	2300      	movs	r3, #0
 80018e8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 80018ea:	230a      	movs	r3, #10
 80018ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018f2:	4619      	mov	r1, r3
 80018f4:	4849      	ldr	r0, [pc, #292]	; (8001a1c <MX_GPIO_Init+0x33c>)
 80018f6:	f004 f9eb 	bl	8005cd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS2_ID_Pin OTG_FS2_PSO_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS2_ID_Pin|OTG_FS2_PSO_Pin;
 80018fa:	f44f 6384 	mov.w	r3, #1056	; 0x420
 80018fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001900:	2300      	movs	r3, #0
 8001902:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001904:	2300      	movs	r3, #0
 8001906:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001908:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800190c:	4619      	mov	r1, r3
 800190e:	483c      	ldr	r0, [pc, #240]	; (8001a00 <MX_GPIO_Init+0x320>)
 8001910:	f004 f9de 	bl	8005cd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001914:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001918:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800191a:	2300      	movs	r3, #0
 800191c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191e:	2300      	movs	r3, #0
 8001920:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001922:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001926:	4619      	mov	r1, r3
 8001928:	483d      	ldr	r0, [pc, #244]	; (8001a20 <MX_GPIO_Init+0x340>)
 800192a:	f004 f9d1 	bl	8005cd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_6;
 800192e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001932:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001934:	2301      	movs	r3, #1
 8001936:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001938:	2300      	movs	r3, #0
 800193a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193c:	2300      	movs	r3, #0
 800193e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001940:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001944:	4619      	mov	r1, r3
 8001946:	482e      	ldr	r0, [pc, #184]	; (8001a00 <MX_GPIO_Init+0x320>)
 8001948:	f004 f9c2 	bl	8005cd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : audio_Int_Pin */
  GPIO_InitStruct.Pin = audio_Int_Pin;
 800194c:	2380      	movs	r3, #128	; 0x80
 800194e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001950:	2302      	movs	r3, #2
 8001952:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001954:	2300      	movs	r3, #0
 8001956:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001958:	2300      	movs	r3, #0
 800195a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800195c:	2306      	movs	r3, #6
 800195e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(audio_Int_GPIO_Port, &GPIO_InitStruct);
 8001960:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001964:	4619      	mov	r1, r3
 8001966:	4828      	ldr	r0, [pc, #160]	; (8001a08 <MX_GPIO_Init+0x328>)
 8001968:	f004 f9b2 	bl	8005cd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800196c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001970:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001972:	2301      	movs	r3, #1
 8001974:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001976:	2300      	movs	r3, #0
 8001978:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197a:	2300      	movs	r3, #0
 800197c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800197e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001982:	4619      	mov	r1, r3
 8001984:	481f      	ldr	r0, [pc, #124]	; (8001a04 <MX_GPIO_Init+0x324>)
 8001986:	f004 f9a3 	bl	8005cd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800198a:	2308      	movs	r3, #8
 800198c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800198e:	2301      	movs	r3, #1
 8001990:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001992:	2300      	movs	r3, #0
 8001994:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001996:	2300      	movs	r3, #0
 8001998:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800199a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800199e:	4619      	mov	r1, r3
 80019a0:	4819      	ldr	r0, [pc, #100]	; (8001a08 <MX_GPIO_Init+0x328>)
 80019a2:	f004 f995 	bl	8005cd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80019a6:	2304      	movs	r3, #4
 80019a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019aa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80019ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b0:	2300      	movs	r3, #0
 80019b2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80019b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019b8:	4619      	mov	r1, r3
 80019ba:	4813      	ldr	r0, [pc, #76]	; (8001a08 <MX_GPIO_Init+0x328>)
 80019bc:	f004 f988 	bl	8005cd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 80019c0:	2301      	movs	r3, #1
 80019c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019c4:	2300      	movs	r3, #0
 80019c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c8:	2300      	movs	r3, #0
 80019ca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 80019cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019d0:	4619      	mov	r1, r3
 80019d2:	480e      	ldr	r0, [pc, #56]	; (8001a0c <MX_GPIO_Init+0x32c>)
 80019d4:	f004 f97c 	bl	8005cd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PK1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80019d8:	2302      	movs	r3, #2
 80019da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019dc:	2301      	movs	r3, #1
 80019de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e4:	2300      	movs	r3, #0
 80019e6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80019e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019ec:	4619      	mov	r1, r3
 80019ee:	4807      	ldr	r0, [pc, #28]	; (8001a0c <MX_GPIO_Init+0x32c>)
 80019f0:	f004 f96e 	bl	8005cd0 <HAL_GPIO_Init>
 80019f4:	e016      	b.n	8001a24 <MX_GPIO_Init+0x344>
 80019f6:	bf00      	nop
 80019f8:	58024400 	.word	0x58024400
 80019fc:	58020400 	.word	0x58020400
 8001a00:	58020000 	.word	0x58020000
 8001a04:	58022000 	.word	0x58022000
 8001a08:	58021800 	.word	0x58021800
 8001a0c:	58022800 	.word	0x58022800
 8001a10:	58022400 	.word	0x58022400
 8001a14:	58021c00 	.word	0x58021c00
 8001a18:	58020c00 	.word	0x58020c00
 8001a1c:	58021000 	.word	0x58021000
 8001a20:	58020800 	.word	0x58020800

  /*Configure GPIO pins : PF6 PF7 PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8001a24:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001a28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a32:	2300      	movs	r3, #0
 8001a34:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001a36:	2309      	movs	r3, #9
 8001a38:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a3e:	4619      	mov	r1, r3
 8001a40:	4822      	ldr	r0, [pc, #136]	; (8001acc <MX_GPIO_Init+0x3ec>)
 8001a42:	f004 f945 	bl	8005cd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a50:	2300      	movs	r3, #0
 8001a52:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a54:	2300      	movs	r3, #0
 8001a56:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001a58:	230a      	movs	r3, #10
 8001a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a60:	4619      	mov	r1, r3
 8001a62:	481a      	ldr	r0, [pc, #104]	; (8001acc <MX_GPIO_Init+0x3ec>)
 8001a64:	f004 f934 	bl	8005cd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS2_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS2_OverCurrent_Pin;
 8001a68:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a6e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS2_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001a78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4814      	ldr	r0, [pc, #80]	; (8001ad0 <MX_GPIO_Init+0x3f0>)
 8001a80:	f004 f926 	bl	8005cd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001a84:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a92:	2300      	movs	r3, #0
 8001a94:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001a96:	2309      	movs	r3, #9
 8001a98:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	480c      	ldr	r0, [pc, #48]	; (8001ad4 <MX_GPIO_Init+0x3f4>)
 8001aa2:	f004 f915 	bl	8005cd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8001aa6:	2304      	movs	r3, #4
 8001aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8001ab6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aba:	4619      	mov	r1, r3
 8001abc:	4806      	ldr	r0, [pc, #24]	; (8001ad8 <MX_GPIO_Init+0x3f8>)
 8001abe:	f004 f907 	bl	8005cd0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ac2:	bf00      	nop
 8001ac4:	3740      	adds	r7, #64	; 0x40
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	58021400 	.word	0x58021400
 8001ad0:	58021c00 	.word	0x58021c00
 8001ad4:	58020c00 	.word	0x58020c00
 8001ad8:	58022400 	.word	0x58022400

08001adc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]

	if (huart == &huart3) {
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	4a06      	ldr	r2, [pc, #24]	; (8001b00 <HAL_UART_RxCpltCallback+0x24>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d102      	bne.n	8001af2 <HAL_UART_RxCpltCallback+0x16>
		haveReceived = true;
 8001aec:	4b05      	ldr	r3, [pc, #20]	; (8001b04 <HAL_UART_RxCpltCallback+0x28>)
 8001aee:	2201      	movs	r2, #1
 8001af0:	701a      	strb	r2, [r3, #0]
	}

}
 8001af2:	bf00      	nop
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	24000798 	.word	0x24000798
 8001b04:	24000d6c 	.word	0x24000d6c

08001b08 <printWelcomeText>:

bool printWelcomeText(void) {
 8001b08:	b590      	push	{r4, r7, lr}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0

	for (int i = 0; i<WELCOME_STRINGS; i++) {
 8001b0e:	2300      	movs	r3, #0
 8001b10:	607b      	str	r3, [r7, #4]
 8001b12:	e01a      	b.n	8001b4a <printWelcomeText+0x42>
		if (HAL_UART_Transmit(&huart3, (const uint8_t *) welcomeStrings[i], strlen(welcomeStrings[i]), 6000) != HAL_OK) {
 8001b14:	4a11      	ldr	r2, [pc, #68]	; (8001b5c <printWelcomeText+0x54>)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8001b1c:	4a0f      	ldr	r2, [pc, #60]	; (8001b5c <printWelcomeText+0x54>)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7fe fbdb 	bl	80002e0 <strlen>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	b29a      	uxth	r2, r3
 8001b2e:	f241 7370 	movw	r3, #6000	; 0x1770
 8001b32:	4621      	mov	r1, r4
 8001b34:	480a      	ldr	r0, [pc, #40]	; (8001b60 <printWelcomeText+0x58>)
 8001b36:	f009 ff09 	bl	800b94c <HAL_UART_Transmit>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <printWelcomeText+0x3c>
			return false;
 8001b40:	2300      	movs	r3, #0
 8001b42:	e006      	b.n	8001b52 <printWelcomeText+0x4a>
	for (int i = 0; i<WELCOME_STRINGS; i++) {
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	3301      	adds	r3, #1
 8001b48:	607b      	str	r3, [r7, #4]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2b08      	cmp	r3, #8
 8001b4e:	dde1      	ble.n	8001b14 <printWelcomeText+0xc>
		}
	}
	return true;
 8001b50:	2301      	movs	r3, #1

}
 8001b52:	4618      	mov	r0, r3
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd90      	pop	{r4, r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	24000000 	.word	0x24000000
 8001b60:	24000798 	.word	0x24000798

08001b64 <receiveValue>:

bool receiveValue(int bytesToReceive) {
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]

	if (HAL_UART_Receive_IT(&huart3, rxBuffer, bytesToReceive) != HAL_OK) {
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	461a      	mov	r2, r3
 8001b72:	4907      	ldr	r1, [pc, #28]	; (8001b90 <receiveValue+0x2c>)
 8001b74:	4807      	ldr	r0, [pc, #28]	; (8001b94 <receiveValue+0x30>)
 8001b76:	f009 ff77 	bl	800ba68 <HAL_UART_Receive_IT>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <receiveValue+0x20>
		return false;
 8001b80:	2300      	movs	r3, #0
 8001b82:	e000      	b.n	8001b86 <receiveValue+0x22>
	}
	return true;
 8001b84:	2301      	movs	r3, #1

}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	24000d70 	.word	0x24000d70
 8001b94:	24000798 	.word	0x24000798

08001b98 <moveTextLCD>:


void moveTextLCD(void) {
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0

	strcpy(rxBuffer, "Hello");
 8001b9e:	4b21      	ldr	r3, [pc, #132]	; (8001c24 <moveTextLCD+0x8c>)
 8001ba0:	4a21      	ldr	r2, [pc, #132]	; (8001c28 <moveTextLCD+0x90>)
 8001ba2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ba6:	6018      	str	r0, [r3, #0]
 8001ba8:	3304      	adds	r3, #4
 8001baa:	8019      	strh	r1, [r3, #0]
	HAL_Delay(1000);
 8001bac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001bb0:	f001 f9aa 	bl	8002f08 <HAL_Delay>
	LCD_Write(rxBuffer);
 8001bb4:	481b      	ldr	r0, [pc, #108]	; (8001c24 <moveTextLCD+0x8c>)
 8001bb6:	f7fe fe0d 	bl	80007d4 <LCD_Write>
	int i = 0, stringLength = strlen(rxBuffer);
 8001bba:	2300      	movs	r3, #0
 8001bbc:	60fb      	str	r3, [r7, #12]
 8001bbe:	4819      	ldr	r0, [pc, #100]	; (8001c24 <moveTextLCD+0x8c>)
 8001bc0:	f7fe fb8e 	bl	80002e0 <strlen>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	607b      	str	r3, [r7, #4]
	bool edge = false;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	72fb      	strb	r3, [r7, #11]
	while (1) {
		if (i < (16 - stringLength) && !edge) {
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f1c3 0310 	rsb	r3, r3, #16
 8001bd2:	68fa      	ldr	r2, [r7, #12]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	da13      	bge.n	8001c00 <moveTextLCD+0x68>
 8001bd8:	7afb      	ldrb	r3, [r7, #11]
 8001bda:	f083 0301 	eor.w	r3, r3, #1
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d00d      	beq.n	8001c00 <moveTextLCD+0x68>
			LCD_Scroll_Display_Right();
 8001be4:	f7fe fe34 	bl	8000850 <LCD_Scroll_Display_Right>
			i++;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	3301      	adds	r3, #1
 8001bec:	60fb      	str	r3, [r7, #12]
			if (i == (16 - stringLength)) {
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f1c3 0310 	rsb	r3, r3, #16
 8001bf4:	68fa      	ldr	r2, [r7, #12]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d10f      	bne.n	8001c1a <moveTextLCD+0x82>
				edge = true;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	72fb      	strb	r3, [r7, #11]
			if (i == (16 - stringLength)) {
 8001bfe:	e00c      	b.n	8001c1a <moveTextLCD+0x82>
			}
		} else if (edge) {
 8001c00:	7afb      	ldrb	r3, [r7, #11]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d009      	beq.n	8001c1a <moveTextLCD+0x82>
			LCD_Scroll_Display_Left();
 8001c06:	f7fe fe2a 	bl	800085e <LCD_Scroll_Display_Left>
			i--;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	3b01      	subs	r3, #1
 8001c0e:	60fb      	str	r3, [r7, #12]
			if (i == 0) {
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d101      	bne.n	8001c1a <moveTextLCD+0x82>
				edge = false;
 8001c16:	2300      	movs	r3, #0
 8001c18:	72fb      	strb	r3, [r7, #11]
			}
		}
		HAL_Delay(1000);
 8001c1a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c1e:	f001 f973 	bl	8002f08 <HAL_Delay>
		if (i < (16 - stringLength) && !edge) {
 8001c22:	e7d3      	b.n	8001bcc <moveTextLCD+0x34>
 8001c24:	24000d70 	.word	0x24000d70
 8001c28:	0800f2b0 	.word	0x0800f2b0

08001c2c <displayClock>:
	}

}

void displayClock() {
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af02      	add	r7, sp, #8

	uint8_t seconds, minutes, hours;
	char timeString[9];

	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001c32:	2200      	movs	r2, #0
 8001c34:	4916      	ldr	r1, [pc, #88]	; (8001c90 <displayClock+0x64>)
 8001c36:	4817      	ldr	r0, [pc, #92]	; (8001c94 <displayClock+0x68>)
 8001c38:	f008 fc52 	bl	800a4e0 <HAL_RTC_GetTime>
	seconds = sTime.Seconds;
 8001c3c:	4b14      	ldr	r3, [pc, #80]	; (8001c90 <displayClock+0x64>)
 8001c3e:	789b      	ldrb	r3, [r3, #2]
 8001c40:	73fb      	strb	r3, [r7, #15]
	minutes = sTime.Minutes;
 8001c42:	4b13      	ldr	r3, [pc, #76]	; (8001c90 <displayClock+0x64>)
 8001c44:	785b      	ldrb	r3, [r3, #1]
 8001c46:	73bb      	strb	r3, [r7, #14]
	hours = sTime.Hours;
 8001c48:	4b11      	ldr	r3, [pc, #68]	; (8001c90 <displayClock+0x64>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	737b      	strb	r3, [r7, #13]
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001c4e:	2200      	movs	r2, #0
 8001c50:	4911      	ldr	r1, [pc, #68]	; (8001c98 <displayClock+0x6c>)
 8001c52:	4810      	ldr	r0, [pc, #64]	; (8001c94 <displayClock+0x68>)
 8001c54:	f008 fd28 	bl	800a6a8 <HAL_RTC_GetDate>
	sprintf(timeString, "%02u:%02u:%02u", hours, minutes, seconds);
 8001c58:	7b7a      	ldrb	r2, [r7, #13]
 8001c5a:	7bb9      	ldrb	r1, [r7, #14]
 8001c5c:	7bfb      	ldrb	r3, [r7, #15]
 8001c5e:	1d38      	adds	r0, r7, #4
 8001c60:	9300      	str	r3, [sp, #0]
 8001c62:	460b      	mov	r3, r1
 8001c64:	490d      	ldr	r1, [pc, #52]	; (8001c9c <displayClock+0x70>)
 8001c66:	f00c fe59 	bl	800e91c <siprintf>

	HAL_Delay(100);
 8001c6a:	2064      	movs	r0, #100	; 0x64
 8001c6c:	f001 f94c 	bl	8002f08 <HAL_Delay>
	LCD_Pos_Cursor(0, 0);
 8001c70:	2100      	movs	r1, #0
 8001c72:	2000      	movs	r0, #0
 8001c74:	f7fe fdc7 	bl	8000806 <LCD_Pos_Cursor>
	HAL_Delay(100);
 8001c78:	2064      	movs	r0, #100	; 0x64
 8001c7a:	f001 f945 	bl	8002f08 <HAL_Delay>
	LCD_Write(timeString);
 8001c7e:	1d3b      	adds	r3, r7, #4
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7fe fda7 	bl	80007d4 <LCD_Write>


}
 8001c86:	bf00      	nop
 8001c88:	3710      	adds	r7, #16
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	24000d90 	.word	0x24000d90
 8001c94:	24000570 	.word	0x24000570
 8001c98:	24000da4 	.word	0x24000da4
 8001c9c:	0800f2b8 	.word	0x0800f2b8

08001ca0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ca4:	b672      	cpsid	i
}
 8001ca6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ca8:	e7fe      	b.n	8001ca8 <Error_Handler+0x8>
	...

08001cac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cb2:	4b0a      	ldr	r3, [pc, #40]	; (8001cdc <HAL_MspInit+0x30>)
 8001cb4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001cb8:	4a08      	ldr	r2, [pc, #32]	; (8001cdc <HAL_MspInit+0x30>)
 8001cba:	f043 0302 	orr.w	r3, r3, #2
 8001cbe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001cc2:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <HAL_MspInit+0x30>)
 8001cc4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001cc8:	f003 0302 	and.w	r3, r3, #2
 8001ccc:	607b      	str	r3, [r7, #4]
 8001cce:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	58024400 	.word	0x58024400

08001ce0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b090      	sub	sp, #64	; 0x40
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	605a      	str	r2, [r3, #4]
 8001cf2:	609a      	str	r2, [r3, #8]
 8001cf4:	60da      	str	r2, [r3, #12]
 8001cf6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a72      	ldr	r2, [pc, #456]	; (8001ec8 <HAL_ADC_MspInit+0x1e8>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d14e      	bne.n	8001da0 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001d02:	4b72      	ldr	r3, [pc, #456]	; (8001ecc <HAL_ADC_MspInit+0x1ec>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	3301      	adds	r3, #1
 8001d08:	4a70      	ldr	r2, [pc, #448]	; (8001ecc <HAL_ADC_MspInit+0x1ec>)
 8001d0a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001d0c:	4b6f      	ldr	r3, [pc, #444]	; (8001ecc <HAL_ADC_MspInit+0x1ec>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d10e      	bne.n	8001d32 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001d14:	4b6e      	ldr	r3, [pc, #440]	; (8001ed0 <HAL_ADC_MspInit+0x1f0>)
 8001d16:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d1a:	4a6d      	ldr	r2, [pc, #436]	; (8001ed0 <HAL_ADC_MspInit+0x1f0>)
 8001d1c:	f043 0320 	orr.w	r3, r3, #32
 8001d20:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001d24:	4b6a      	ldr	r3, [pc, #424]	; (8001ed0 <HAL_ADC_MspInit+0x1f0>)
 8001d26:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d2a:	f003 0320 	and.w	r3, r3, #32
 8001d2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d32:	4b67      	ldr	r3, [pc, #412]	; (8001ed0 <HAL_ADC_MspInit+0x1f0>)
 8001d34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d38:	4a65      	ldr	r2, [pc, #404]	; (8001ed0 <HAL_ADC_MspInit+0x1f0>)
 8001d3a:	f043 0304 	orr.w	r3, r3, #4
 8001d3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d42:	4b63      	ldr	r3, [pc, #396]	; (8001ed0 <HAL_ADC_MspInit+0x1f0>)
 8001d44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d48:	f003 0304 	and.w	r3, r3, #4
 8001d4c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d50:	4b5f      	ldr	r3, [pc, #380]	; (8001ed0 <HAL_ADC_MspInit+0x1f0>)
 8001d52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d56:	4a5e      	ldr	r2, [pc, #376]	; (8001ed0 <HAL_ADC_MspInit+0x1f0>)
 8001d58:	f043 0301 	orr.w	r3, r3, #1
 8001d5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d60:	4b5b      	ldr	r3, [pc, #364]	; (8001ed0 <HAL_ADC_MspInit+0x1f0>)
 8001d62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	623b      	str	r3, [r7, #32]
 8001d6c:	6a3b      	ldr	r3, [r7, #32]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    PA0_C     ------> ADC1_INP0
    PA1_C     ------> ADC1_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d72:	2303      	movs	r3, #3
 8001d74:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d76:	2300      	movs	r3, #0
 8001d78:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4854      	ldr	r0, [pc, #336]	; (8001ed4 <HAL_ADC_MspInit+0x1f4>)
 8001d82:	f003 ffa5 	bl	8005cd0 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8001d86:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8001d8a:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8001d8e:	f001 f8ff 	bl	8002f90 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8001d92:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d96:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8001d9a:	f001 f8f9 	bl	8002f90 <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001d9e:	e08f      	b.n	8001ec0 <HAL_ADC_MspInit+0x1e0>
  else if(hadc->Instance==ADC2)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a4c      	ldr	r2, [pc, #304]	; (8001ed8 <HAL_ADC_MspInit+0x1f8>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d133      	bne.n	8001e12 <HAL_ADC_MspInit+0x132>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001daa:	4b48      	ldr	r3, [pc, #288]	; (8001ecc <HAL_ADC_MspInit+0x1ec>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	3301      	adds	r3, #1
 8001db0:	4a46      	ldr	r2, [pc, #280]	; (8001ecc <HAL_ADC_MspInit+0x1ec>)
 8001db2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001db4:	4b45      	ldr	r3, [pc, #276]	; (8001ecc <HAL_ADC_MspInit+0x1ec>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d10e      	bne.n	8001dda <HAL_ADC_MspInit+0xfa>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001dbc:	4b44      	ldr	r3, [pc, #272]	; (8001ed0 <HAL_ADC_MspInit+0x1f0>)
 8001dbe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001dc2:	4a43      	ldr	r2, [pc, #268]	; (8001ed0 <HAL_ADC_MspInit+0x1f0>)
 8001dc4:	f043 0320 	orr.w	r3, r3, #32
 8001dc8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001dcc:	4b40      	ldr	r3, [pc, #256]	; (8001ed0 <HAL_ADC_MspInit+0x1f0>)
 8001dce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001dd2:	f003 0320 	and.w	r3, r3, #32
 8001dd6:	61fb      	str	r3, [r7, #28]
 8001dd8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dda:	4b3d      	ldr	r3, [pc, #244]	; (8001ed0 <HAL_ADC_MspInit+0x1f0>)
 8001ddc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001de0:	4a3b      	ldr	r2, [pc, #236]	; (8001ed0 <HAL_ADC_MspInit+0x1f0>)
 8001de2:	f043 0301 	orr.w	r3, r3, #1
 8001de6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dea:	4b39      	ldr	r3, [pc, #228]	; (8001ed0 <HAL_ADC_MspInit+0x1f0>)
 8001dec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	61bb      	str	r3, [r7, #24]
 8001df6:	69bb      	ldr	r3, [r7, #24]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8001df8:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8001dfc:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8001e00:	f001 f8c6 	bl	8002f90 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8001e04:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e08:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8001e0c:	f001 f8c0 	bl	8002f90 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8001e10:	e056      	b.n	8001ec0 <HAL_ADC_MspInit+0x1e0>
  else if(hadc->Instance==ADC3)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a31      	ldr	r2, [pc, #196]	; (8001edc <HAL_ADC_MspInit+0x1fc>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d151      	bne.n	8001ec0 <HAL_ADC_MspInit+0x1e0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001e1c:	4b2c      	ldr	r3, [pc, #176]	; (8001ed0 <HAL_ADC_MspInit+0x1f0>)
 8001e1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e22:	4a2b      	ldr	r2, [pc, #172]	; (8001ed0 <HAL_ADC_MspInit+0x1f0>)
 8001e24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e2c:	4b28      	ldr	r3, [pc, #160]	; (8001ed0 <HAL_ADC_MspInit+0x1f0>)
 8001e2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e36:	617b      	str	r3, [r7, #20]
 8001e38:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e3a:	4b25      	ldr	r3, [pc, #148]	; (8001ed0 <HAL_ADC_MspInit+0x1f0>)
 8001e3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e40:	4a23      	ldr	r2, [pc, #140]	; (8001ed0 <HAL_ADC_MspInit+0x1f0>)
 8001e42:	f043 0320 	orr.w	r3, r3, #32
 8001e46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e4a:	4b21      	ldr	r3, [pc, #132]	; (8001ed0 <HAL_ADC_MspInit+0x1f0>)
 8001e4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e50:	f003 0320 	and.w	r3, r3, #32
 8001e54:	613b      	str	r3, [r7, #16]
 8001e56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e58:	4b1d      	ldr	r3, [pc, #116]	; (8001ed0 <HAL_ADC_MspInit+0x1f0>)
 8001e5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e5e:	4a1c      	ldr	r2, [pc, #112]	; (8001ed0 <HAL_ADC_MspInit+0x1f0>)
 8001e60:	f043 0304 	orr.w	r3, r3, #4
 8001e64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e68:	4b19      	ldr	r3, [pc, #100]	; (8001ed0 <HAL_ADC_MspInit+0x1f0>)
 8001e6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e6e:	f003 0304 	and.w	r3, r3, #4
 8001e72:	60fb      	str	r3, [r7, #12]
 8001e74:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e80:	2300      	movs	r3, #0
 8001e82:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4815      	ldr	r0, [pc, #84]	; (8001ee0 <HAL_ADC_MspInit+0x200>)
 8001e8c:	f003 ff20 	bl	8005cd0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e90:	2301      	movs	r3, #1
 8001e92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e94:	2303      	movs	r3, #3
 8001e96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	480c      	ldr	r0, [pc, #48]	; (8001ed4 <HAL_ADC_MspInit+0x1f4>)
 8001ea4:	f003 ff14 	bl	8005cd0 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001ea8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001eac:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001eb0:	f001 f86e 	bl	8002f90 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001eb4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001eb8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001ebc:	f001 f868 	bl	8002f90 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8001ec0:	bf00      	nop
 8001ec2:	3740      	adds	r7, #64	; 0x40
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40022000 	.word	0x40022000
 8001ecc:	24000db0 	.word	0x24000db0
 8001ed0:	58024400 	.word	0x58024400
 8001ed4:	58020800 	.word	0x58020800
 8001ed8:	40022100 	.word	0x40022100
 8001edc:	58026000 	.word	0x58026000
 8001ee0:	58021400 	.word	0x58021400

08001ee4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b092      	sub	sp, #72	; 0x48
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	60da      	str	r2, [r3, #12]
 8001efa:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a87      	ldr	r2, [pc, #540]	; (8002120 <HAL_ETH_MspInit+0x23c>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	f040 8108 	bne.w	8002118 <HAL_ETH_MspInit+0x234>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001f08:	4b86      	ldr	r3, [pc, #536]	; (8002124 <HAL_ETH_MspInit+0x240>)
 8001f0a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001f0e:	4a85      	ldr	r2, [pc, #532]	; (8002124 <HAL_ETH_MspInit+0x240>)
 8001f10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f14:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001f18:	4b82      	ldr	r3, [pc, #520]	; (8002124 <HAL_ETH_MspInit+0x240>)
 8001f1a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001f1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f22:	633b      	str	r3, [r7, #48]	; 0x30
 8001f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001f26:	4b7f      	ldr	r3, [pc, #508]	; (8002124 <HAL_ETH_MspInit+0x240>)
 8001f28:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001f2c:	4a7d      	ldr	r2, [pc, #500]	; (8002124 <HAL_ETH_MspInit+0x240>)
 8001f2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f32:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001f36:	4b7b      	ldr	r3, [pc, #492]	; (8002124 <HAL_ETH_MspInit+0x240>)
 8001f38:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001f3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001f44:	4b77      	ldr	r3, [pc, #476]	; (8002124 <HAL_ETH_MspInit+0x240>)
 8001f46:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001f4a:	4a76      	ldr	r2, [pc, #472]	; (8002124 <HAL_ETH_MspInit+0x240>)
 8001f4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f50:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001f54:	4b73      	ldr	r3, [pc, #460]	; (8002124 <HAL_ETH_MspInit+0x240>)
 8001f56:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f60:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f62:	4b70      	ldr	r3, [pc, #448]	; (8002124 <HAL_ETH_MspInit+0x240>)
 8001f64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f68:	4a6e      	ldr	r2, [pc, #440]	; (8002124 <HAL_ETH_MspInit+0x240>)
 8001f6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f72:	4b6c      	ldr	r3, [pc, #432]	; (8002124 <HAL_ETH_MspInit+0x240>)
 8001f74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f7c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f80:	4b68      	ldr	r3, [pc, #416]	; (8002124 <HAL_ETH_MspInit+0x240>)
 8001f82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f86:	4a67      	ldr	r2, [pc, #412]	; (8002124 <HAL_ETH_MspInit+0x240>)
 8001f88:	f043 0310 	orr.w	r3, r3, #16
 8001f8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f90:	4b64      	ldr	r3, [pc, #400]	; (8002124 <HAL_ETH_MspInit+0x240>)
 8001f92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f96:	f003 0310 	and.w	r3, r3, #16
 8001f9a:	623b      	str	r3, [r7, #32]
 8001f9c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001f9e:	4b61      	ldr	r3, [pc, #388]	; (8002124 <HAL_ETH_MspInit+0x240>)
 8001fa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fa4:	4a5f      	ldr	r2, [pc, #380]	; (8002124 <HAL_ETH_MspInit+0x240>)
 8001fa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001faa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fae:	4b5d      	ldr	r3, [pc, #372]	; (8002124 <HAL_ETH_MspInit+0x240>)
 8001fb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb8:	61fb      	str	r3, [r7, #28]
 8001fba:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fbc:	4b59      	ldr	r3, [pc, #356]	; (8002124 <HAL_ETH_MspInit+0x240>)
 8001fbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fc2:	4a58      	ldr	r2, [pc, #352]	; (8002124 <HAL_ETH_MspInit+0x240>)
 8001fc4:	f043 0304 	orr.w	r3, r3, #4
 8001fc8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fcc:	4b55      	ldr	r3, [pc, #340]	; (8002124 <HAL_ETH_MspInit+0x240>)
 8001fce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fd2:	f003 0304 	and.w	r3, r3, #4
 8001fd6:	61bb      	str	r3, [r7, #24]
 8001fd8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fda:	4b52      	ldr	r3, [pc, #328]	; (8002124 <HAL_ETH_MspInit+0x240>)
 8001fdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fe0:	4a50      	ldr	r2, [pc, #320]	; (8002124 <HAL_ETH_MspInit+0x240>)
 8001fe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fe6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fea:	4b4e      	ldr	r3, [pc, #312]	; (8002124 <HAL_ETH_MspInit+0x240>)
 8001fec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ff0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ff4:	617b      	str	r3, [r7, #20]
 8001ff6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff8:	4b4a      	ldr	r3, [pc, #296]	; (8002124 <HAL_ETH_MspInit+0x240>)
 8001ffa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ffe:	4a49      	ldr	r2, [pc, #292]	; (8002124 <HAL_ETH_MspInit+0x240>)
 8002000:	f043 0301 	orr.w	r3, r3, #1
 8002004:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002008:	4b46      	ldr	r3, [pc, #280]	; (8002124 <HAL_ETH_MspInit+0x240>)
 800200a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	613b      	str	r3, [r7, #16]
 8002014:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002016:	4b43      	ldr	r3, [pc, #268]	; (8002124 <HAL_ETH_MspInit+0x240>)
 8002018:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800201c:	4a41      	ldr	r2, [pc, #260]	; (8002124 <HAL_ETH_MspInit+0x240>)
 800201e:	f043 0302 	orr.w	r3, r3, #2
 8002022:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002026:	4b3f      	ldr	r3, [pc, #252]	; (8002124 <HAL_ETH_MspInit+0x240>)
 8002028:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	60fb      	str	r3, [r7, #12]
 8002032:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PB1     ------> ETH_RXD3
    PC5     ------> ETH_RXD1
    PB0     ------> ETH_RXD2
    */
    GPIO_InitStruct.Pin = MII_TX_EN_Pin|MII_TXD1_Pin|MII_TXD0_Pin;
 8002034:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002038:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203a:	2302      	movs	r3, #2
 800203c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203e:	2300      	movs	r3, #0
 8002040:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002042:	2300      	movs	r3, #0
 8002044:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002046:	230b      	movs	r3, #11
 8002048:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800204a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800204e:	4619      	mov	r1, r3
 8002050:	4835      	ldr	r0, [pc, #212]	; (8002128 <HAL_ETH_MspInit+0x244>)
 8002052:	f003 fe3d 	bl	8005cd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_TXD3_Pin;
 8002056:	2304      	movs	r3, #4
 8002058:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205a:	2302      	movs	r3, #2
 800205c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205e:	2300      	movs	r3, #0
 8002060:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002062:	2300      	movs	r3, #0
 8002064:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002066:	230b      	movs	r3, #11
 8002068:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(MII_TXD3_GPIO_Port, &GPIO_InitStruct);
 800206a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800206e:	4619      	mov	r1, r3
 8002070:	482e      	ldr	r0, [pc, #184]	; (800212c <HAL_ETH_MspInit+0x248>)
 8002072:	f003 fe2d 	bl	8005cd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RX_ER_Pin;
 8002076:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800207a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207c:	2302      	movs	r3, #2
 800207e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002080:	2300      	movs	r3, #0
 8002082:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002084:	2300      	movs	r3, #0
 8002086:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002088:	230b      	movs	r3, #11
 800208a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(MII_RX_ER_GPIO_Port, &GPIO_InitStruct);
 800208c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002090:	4619      	mov	r1, r3
 8002092:	4827      	ldr	r0, [pc, #156]	; (8002130 <HAL_ETH_MspInit+0x24c>)
 8002094:	f003 fe1c 	bl	8005cd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDC_Pin|MII_TXD2_Pin|MII_TX_CLK_Pin|MII_RXD0_Pin
 8002098:	233e      	movs	r3, #62	; 0x3e
 800209a:	637b      	str	r3, [r7, #52]	; 0x34
                          |MII_RXD1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209c:	2302      	movs	r3, #2
 800209e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a0:	2300      	movs	r3, #0
 80020a2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a4:	2300      	movs	r3, #0
 80020a6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80020a8:	230b      	movs	r3, #11
 80020aa:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020ac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80020b0:	4619      	mov	r1, r3
 80020b2:	4820      	ldr	r0, [pc, #128]	; (8002134 <HAL_ETH_MspInit+0x250>)
 80020b4:	f003 fe0c 	bl	8005cd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_CRS_Pin|MII_COL_Pin;
 80020b8:	230c      	movs	r3, #12
 80020ba:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020bc:	2302      	movs	r3, #2
 80020be:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c0:	2300      	movs	r3, #0
 80020c2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c4:	2300      	movs	r3, #0
 80020c6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80020c8:	230b      	movs	r3, #11
 80020ca:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80020cc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80020d0:	4619      	mov	r1, r3
 80020d2:	4819      	ldr	r0, [pc, #100]	; (8002138 <HAL_ETH_MspInit+0x254>)
 80020d4:	f003 fdfc 	bl	8005cd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDIO_Pin|MII_RX_CLK_Pin|MII_RX_DV_Pin;
 80020d8:	2386      	movs	r3, #134	; 0x86
 80020da:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020dc:	2302      	movs	r3, #2
 80020de:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e0:	2300      	movs	r3, #0
 80020e2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e4:	2300      	movs	r3, #0
 80020e6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80020e8:	230b      	movs	r3, #11
 80020ea:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80020f0:	4619      	mov	r1, r3
 80020f2:	4812      	ldr	r0, [pc, #72]	; (800213c <HAL_ETH_MspInit+0x258>)
 80020f4:	f003 fdec 	bl	8005cd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RX_D3_Pin|MII_RX_D2_Pin;
 80020f8:	2303      	movs	r3, #3
 80020fa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fc:	2302      	movs	r3, #2
 80020fe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002100:	2300      	movs	r3, #0
 8002102:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002104:	2300      	movs	r3, #0
 8002106:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002108:	230b      	movs	r3, #11
 800210a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800210c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002110:	4619      	mov	r1, r3
 8002112:	480b      	ldr	r0, [pc, #44]	; (8002140 <HAL_ETH_MspInit+0x25c>)
 8002114:	f003 fddc 	bl	8005cd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8002118:	bf00      	nop
 800211a:	3748      	adds	r7, #72	; 0x48
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	40028000 	.word	0x40028000
 8002124:	58024400 	.word	0x58024400
 8002128:	58021800 	.word	0x58021800
 800212c:	58021000 	.word	0x58021000
 8002130:	58022000 	.word	0x58022000
 8002134:	58020800 	.word	0x58020800
 8002138:	58021c00 	.word	0x58021c00
 800213c:	58020000 	.word	0x58020000
 8002140:	58020400 	.word	0x58020400

08002144 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b0bc      	sub	sp, #240	; 0xf0
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800214c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	605a      	str	r2, [r3, #4]
 8002156:	609a      	str	r2, [r3, #8]
 8002158:	60da      	str	r2, [r3, #12]
 800215a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800215c:	f107 0318 	add.w	r3, r7, #24
 8002160:	22c0      	movs	r2, #192	; 0xc0
 8002162:	2100      	movs	r1, #0
 8002164:	4618      	mov	r0, r3
 8002166:	f00c fbd1 	bl	800e90c <memset>
  if(hfdcan->Instance==FDCAN1)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a57      	ldr	r2, [pc, #348]	; (80022cc <HAL_FDCAN_MspInit+0x188>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d151      	bne.n	8002218 <HAL_FDCAN_MspInit+0xd4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002174:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002178:	f04f 0300 	mov.w	r3, #0
 800217c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8002180:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002184:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002188:	f107 0318 	add.w	r3, r7, #24
 800218c:	4618      	mov	r0, r3
 800218e:	f005 fb89 	bl	80078a4 <HAL_RCCEx_PeriphCLKConfig>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8002198:	f7ff fd82 	bl	8001ca0 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800219c:	4b4c      	ldr	r3, [pc, #304]	; (80022d0 <HAL_FDCAN_MspInit+0x18c>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	3301      	adds	r3, #1
 80021a2:	4a4b      	ldr	r2, [pc, #300]	; (80022d0 <HAL_FDCAN_MspInit+0x18c>)
 80021a4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80021a6:	4b4a      	ldr	r3, [pc, #296]	; (80022d0 <HAL_FDCAN_MspInit+0x18c>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d10e      	bne.n	80021cc <HAL_FDCAN_MspInit+0x88>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80021ae:	4b49      	ldr	r3, [pc, #292]	; (80022d4 <HAL_FDCAN_MspInit+0x190>)
 80021b0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80021b4:	4a47      	ldr	r2, [pc, #284]	; (80022d4 <HAL_FDCAN_MspInit+0x190>)
 80021b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ba:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80021be:	4b45      	ldr	r3, [pc, #276]	; (80022d4 <HAL_FDCAN_MspInit+0x190>)
 80021c0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80021c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c8:	617b      	str	r3, [r7, #20]
 80021ca:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 80021cc:	4b41      	ldr	r3, [pc, #260]	; (80022d4 <HAL_FDCAN_MspInit+0x190>)
 80021ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021d2:	4a40      	ldr	r2, [pc, #256]	; (80022d4 <HAL_FDCAN_MspInit+0x190>)
 80021d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021dc:	4b3d      	ldr	r3, [pc, #244]	; (80022d4 <HAL_FDCAN_MspInit+0x190>)
 80021de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021e6:	613b      	str	r3, [r7, #16]
 80021e8:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PH14     ------> FDCAN1_RX
    PH13     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = FDCAN1_RX_Pin|FDCAN1_TX_Pin;
 80021ea:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80021ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f2:	2302      	movs	r3, #2
 80021f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f8:	2300      	movs	r3, #0
 80021fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021fe:	2300      	movs	r3, #0
 8002200:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002204:	2309      	movs	r3, #9
 8002206:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800220a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800220e:	4619      	mov	r1, r3
 8002210:	4831      	ldr	r0, [pc, #196]	; (80022d8 <HAL_FDCAN_MspInit+0x194>)
 8002212:	f003 fd5d 	bl	8005cd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8002216:	e055      	b.n	80022c4 <HAL_FDCAN_MspInit+0x180>
  else if(hfdcan->Instance==FDCAN2)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a2f      	ldr	r2, [pc, #188]	; (80022dc <HAL_FDCAN_MspInit+0x198>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d150      	bne.n	80022c4 <HAL_FDCAN_MspInit+0x180>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002222:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002226:	f04f 0300 	mov.w	r3, #0
 800222a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 800222e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002232:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002236:	f107 0318 	add.w	r3, r7, #24
 800223a:	4618      	mov	r0, r3
 800223c:	f005 fb32 	bl	80078a4 <HAL_RCCEx_PeriphCLKConfig>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <HAL_FDCAN_MspInit+0x106>
      Error_Handler();
 8002246:	f7ff fd2b 	bl	8001ca0 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800224a:	4b21      	ldr	r3, [pc, #132]	; (80022d0 <HAL_FDCAN_MspInit+0x18c>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	3301      	adds	r3, #1
 8002250:	4a1f      	ldr	r2, [pc, #124]	; (80022d0 <HAL_FDCAN_MspInit+0x18c>)
 8002252:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002254:	4b1e      	ldr	r3, [pc, #120]	; (80022d0 <HAL_FDCAN_MspInit+0x18c>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d10e      	bne.n	800227a <HAL_FDCAN_MspInit+0x136>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800225c:	4b1d      	ldr	r3, [pc, #116]	; (80022d4 <HAL_FDCAN_MspInit+0x190>)
 800225e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002262:	4a1c      	ldr	r2, [pc, #112]	; (80022d4 <HAL_FDCAN_MspInit+0x190>)
 8002264:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002268:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800226c:	4b19      	ldr	r3, [pc, #100]	; (80022d4 <HAL_FDCAN_MspInit+0x190>)
 800226e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002276:	60fb      	str	r3, [r7, #12]
 8002278:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800227a:	4b16      	ldr	r3, [pc, #88]	; (80022d4 <HAL_FDCAN_MspInit+0x190>)
 800227c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002280:	4a14      	ldr	r2, [pc, #80]	; (80022d4 <HAL_FDCAN_MspInit+0x190>)
 8002282:	f043 0302 	orr.w	r3, r3, #2
 8002286:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800228a:	4b12      	ldr	r3, [pc, #72]	; (80022d4 <HAL_FDCAN_MspInit+0x190>)
 800228c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002290:	f003 0302 	and.w	r3, r3, #2
 8002294:	60bb      	str	r3, [r7, #8]
 8002296:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FDCAN2_RX_Pin|FDCAN2_TX_Pin;
 8002298:	f242 0320 	movw	r3, #8224	; 0x2020
 800229c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a0:	2302      	movs	r3, #2
 80022a2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a6:	2300      	movs	r3, #0
 80022a8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ac:	2300      	movs	r3, #0
 80022ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80022b2:	2309      	movs	r3, #9
 80022b4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022b8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80022bc:	4619      	mov	r1, r3
 80022be:	4808      	ldr	r0, [pc, #32]	; (80022e0 <HAL_FDCAN_MspInit+0x19c>)
 80022c0:	f003 fd06 	bl	8005cd0 <HAL_GPIO_Init>
}
 80022c4:	bf00      	nop
 80022c6:	37f0      	adds	r7, #240	; 0xf0
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	4000a000 	.word	0x4000a000
 80022d0:	24000db4 	.word	0x24000db4
 80022d4:	58024400 	.word	0x58024400
 80022d8:	58021c00 	.word	0x58021c00
 80022dc:	4000a400 	.word	0x4000a400
 80022e0:	58020400 	.word	0x58020400

080022e4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b0be      	sub	sp, #248	; 0xf8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ec:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	605a      	str	r2, [r3, #4]
 80022f6:	609a      	str	r2, [r3, #8]
 80022f8:	60da      	str	r2, [r3, #12]
 80022fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022fc:	f107 0320 	add.w	r3, r7, #32
 8002300:	22c0      	movs	r2, #192	; 0xc0
 8002302:	2100      	movs	r1, #0
 8002304:	4618      	mov	r0, r3
 8002306:	f00c fb01 	bl	800e90c <memset>
  if(hltdc->Instance==LTDC)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a66      	ldr	r2, [pc, #408]	; (80024a8 <HAL_LTDC_MspInit+0x1c4>)
 8002310:	4293      	cmp	r3, r2
 8002312:	f040 80c4 	bne.w	800249e <HAL_LTDC_MspInit+0x1ba>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002316:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800231a:	f04f 0300 	mov.w	r3, #0
 800231e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.PLL3.PLL3M = 32;
 8002322:	2320      	movs	r3, #32
 8002324:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3N = 192;
 8002326:	23c0      	movs	r3, #192	; 0xc0
 8002328:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 800232a:	2302      	movs	r3, #2
 800232c:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 800232e:	2302      	movs	r3, #2
 8002330:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8002332:	2302      	movs	r3, #2
 8002334:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8002336:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800233a:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 800233c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002340:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8002342:	2300      	movs	r3, #0
 8002344:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002346:	f107 0320 	add.w	r3, r7, #32
 800234a:	4618      	mov	r0, r3
 800234c:	f005 faaa 	bl	80078a4 <HAL_RCCEx_PeriphCLKConfig>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <HAL_LTDC_MspInit+0x76>
    {
      Error_Handler();
 8002356:	f7ff fca3 	bl	8001ca0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800235a:	4b54      	ldr	r3, [pc, #336]	; (80024ac <HAL_LTDC_MspInit+0x1c8>)
 800235c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002360:	4a52      	ldr	r2, [pc, #328]	; (80024ac <HAL_LTDC_MspInit+0x1c8>)
 8002362:	f043 0308 	orr.w	r3, r3, #8
 8002366:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800236a:	4b50      	ldr	r3, [pc, #320]	; (80024ac <HAL_LTDC_MspInit+0x1c8>)
 800236c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002370:	f003 0308 	and.w	r3, r3, #8
 8002374:	61fb      	str	r3, [r7, #28]
 8002376:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002378:	4b4c      	ldr	r3, [pc, #304]	; (80024ac <HAL_LTDC_MspInit+0x1c8>)
 800237a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800237e:	4a4b      	ldr	r2, [pc, #300]	; (80024ac <HAL_LTDC_MspInit+0x1c8>)
 8002380:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002384:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002388:	4b48      	ldr	r3, [pc, #288]	; (80024ac <HAL_LTDC_MspInit+0x1c8>)
 800238a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800238e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002392:	61bb      	str	r3, [r7, #24]
 8002394:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002396:	4b45      	ldr	r3, [pc, #276]	; (80024ac <HAL_LTDC_MspInit+0x1c8>)
 8002398:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800239c:	4a43      	ldr	r2, [pc, #268]	; (80024ac <HAL_LTDC_MspInit+0x1c8>)
 800239e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023a6:	4b41      	ldr	r3, [pc, #260]	; (80024ac <HAL_LTDC_MspInit+0x1c8>)
 80023a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b0:	617b      	str	r3, [r7, #20]
 80023b2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80023b4:	4b3d      	ldr	r3, [pc, #244]	; (80024ac <HAL_LTDC_MspInit+0x1c8>)
 80023b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023ba:	4a3c      	ldr	r2, [pc, #240]	; (80024ac <HAL_LTDC_MspInit+0x1c8>)
 80023bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023c4:	4b39      	ldr	r3, [pc, #228]	; (80024ac <HAL_LTDC_MspInit+0x1c8>)
 80023c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023ce:	613b      	str	r3, [r7, #16]
 80023d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80023d2:	4b36      	ldr	r3, [pc, #216]	; (80024ac <HAL_LTDC_MspInit+0x1c8>)
 80023d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023d8:	4a34      	ldr	r2, [pc, #208]	; (80024ac <HAL_LTDC_MspInit+0x1c8>)
 80023da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023e2:	4b32      	ldr	r3, [pc, #200]	; (80024ac <HAL_LTDC_MspInit+0x1c8>)
 80023e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ec:	60fb      	str	r3, [r7, #12]
 80023ee:	68fb      	ldr	r3, [r7, #12]
    PJ5     ------> LTDC_R6
    PH9     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    PJ4     ------> LTDC_R5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
 80023f0:	23fc      	movs	r3, #252	; 0xfc
 80023f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_7|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f6:	2302      	movs	r3, #2
 80023f8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fc:	2300      	movs	r3, #0
 80023fe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002402:	2300      	movs	r3, #0
 8002404:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002408:	230e      	movs	r3, #14
 800240a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800240e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002412:	4619      	mov	r1, r3
 8002414:	4826      	ldr	r0, [pc, #152]	; (80024b0 <HAL_LTDC_MspInit+0x1cc>)
 8002416:	f003 fc5b 	bl	8005cd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
 800241a:	f24d 2303 	movw	r3, #53763	; 0xd203
 800241e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002422:	2302      	movs	r3, #2
 8002424:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002428:	2300      	movs	r3, #0
 800242a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800242e:	2300      	movs	r3, #0
 8002430:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002434:	230e      	movs	r3, #14
 8002436:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800243a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800243e:	4619      	mov	r1, r3
 8002440:	481c      	ldr	r0, [pc, #112]	; (80024b4 <HAL_LTDC_MspInit+0x1d0>)
 8002442:	f003 fc45 	bl	8005cd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DISP_Pin|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
 8002446:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 800244a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800244e:	2302      	movs	r3, #2
 8002450:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002454:	2300      	movs	r3, #0
 8002456:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800245a:	2300      	movs	r3, #0
 800245c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002460:	230e      	movs	r3, #14
 8002462:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002466:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800246a:	4619      	mov	r1, r3
 800246c:	4812      	ldr	r0, [pc, #72]	; (80024b8 <HAL_LTDC_MspInit+0x1d4>)
 800246e:	f003 fc2f 	bl	8005cd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002472:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002476:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800247a:	2302      	movs	r3, #2
 800247c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002480:	2300      	movs	r3, #0
 8002482:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002486:	2300      	movs	r3, #0
 8002488:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800248c:	230e      	movs	r3, #14
 800248e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002492:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002496:	4619      	mov	r1, r3
 8002498:	4808      	ldr	r0, [pc, #32]	; (80024bc <HAL_LTDC_MspInit+0x1d8>)
 800249a:	f003 fc19 	bl	8005cd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800249e:	bf00      	nop
 80024a0:	37f8      	adds	r7, #248	; 0xf8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	50001000 	.word	0x50001000
 80024ac:	58024400 	.word	0x58024400
 80024b0:	58022800 	.word	0x58022800
 80024b4:	58022000 	.word	0x58022000
 80024b8:	58022400 	.word	0x58022400
 80024bc:	58021c00 	.word	0x58021c00

080024c0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b0b2      	sub	sp, #200	; 0xc8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024c8:	f107 0308 	add.w	r3, r7, #8
 80024cc:	22c0      	movs	r2, #192	; 0xc0
 80024ce:	2100      	movs	r1, #0
 80024d0:	4618      	mov	r0, r3
 80024d2:	f00c fa1b 	bl	800e90c <memset>
  if(hrtc->Instance==RTC)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a10      	ldr	r2, [pc, #64]	; (800251c <HAL_RTC_MspInit+0x5c>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d119      	bne.n	8002514 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80024e0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80024e4:	f04f 0300 	mov.w	r3, #0
 80024e8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80024ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024f4:	f107 0308 	add.w	r3, r7, #8
 80024f8:	4618      	mov	r0, r3
 80024fa:	f005 f9d3 	bl	80078a4 <HAL_RCCEx_PeriphCLKConfig>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8002504:	f7ff fbcc 	bl	8001ca0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002508:	4b05      	ldr	r3, [pc, #20]	; (8002520 <HAL_RTC_MspInit+0x60>)
 800250a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800250c:	4a04      	ldr	r2, [pc, #16]	; (8002520 <HAL_RTC_MspInit+0x60>)
 800250e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002512:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002514:	bf00      	nop
 8002516:	37c8      	adds	r7, #200	; 0xc8
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	58004000 	.word	0x58004000
 8002520:	58024400 	.word	0x58024400

08002524 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b0bc      	sub	sp, #240	; 0xf0
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800252c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	605a      	str	r2, [r3, #4]
 8002536:	609a      	str	r2, [r3, #8]
 8002538:	60da      	str	r2, [r3, #12]
 800253a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800253c:	f107 0318 	add.w	r3, r7, #24
 8002540:	22c0      	movs	r2, #192	; 0xc0
 8002542:	2100      	movs	r1, #0
 8002544:	4618      	mov	r0, r3
 8002546:	f00c f9e1 	bl	800e90c <memset>
  if(hspi->Instance==SPI2)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a55      	ldr	r2, [pc, #340]	; (80026a4 <HAL_SPI_MspInit+0x180>)
 8002550:	4293      	cmp	r3, r2
 8002552:	f040 80a3 	bne.w	800269c <HAL_SPI_MspInit+0x178>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002556:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800255a:	f04f 0300 	mov.w	r3, #0
 800255e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002562:	2300      	movs	r3, #0
 8002564:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002566:	f107 0318 	add.w	r3, r7, #24
 800256a:	4618      	mov	r0, r3
 800256c:	f005 f99a 	bl	80078a4 <HAL_RCCEx_PeriphCLKConfig>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8002576:	f7ff fb93 	bl	8001ca0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800257a:	4b4b      	ldr	r3, [pc, #300]	; (80026a8 <HAL_SPI_MspInit+0x184>)
 800257c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002580:	4a49      	ldr	r2, [pc, #292]	; (80026a8 <HAL_SPI_MspInit+0x184>)
 8002582:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002586:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800258a:	4b47      	ldr	r3, [pc, #284]	; (80026a8 <HAL_SPI_MspInit+0x184>)
 800258c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002590:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002594:	617b      	str	r3, [r7, #20]
 8002596:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002598:	4b43      	ldr	r3, [pc, #268]	; (80026a8 <HAL_SPI_MspInit+0x184>)
 800259a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800259e:	4a42      	ldr	r2, [pc, #264]	; (80026a8 <HAL_SPI_MspInit+0x184>)
 80025a0:	f043 0302 	orr.w	r3, r3, #2
 80025a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025a8:	4b3f      	ldr	r3, [pc, #252]	; (80026a8 <HAL_SPI_MspInit+0x184>)
 80025aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	613b      	str	r3, [r7, #16]
 80025b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025b6:	4b3c      	ldr	r3, [pc, #240]	; (80026a8 <HAL_SPI_MspInit+0x184>)
 80025b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025bc:	4a3a      	ldr	r2, [pc, #232]	; (80026a8 <HAL_SPI_MspInit+0x184>)
 80025be:	f043 0308 	orr.w	r3, r3, #8
 80025c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025c6:	4b38      	ldr	r3, [pc, #224]	; (80026a8 <HAL_SPI_MspInit+0x184>)
 80025c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025cc:	f003 0308 	and.w	r3, r3, #8
 80025d0:	60fb      	str	r3, [r7, #12]
 80025d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80025d4:	4b34      	ldr	r3, [pc, #208]	; (80026a8 <HAL_SPI_MspInit+0x184>)
 80025d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025da:	4a33      	ldr	r2, [pc, #204]	; (80026a8 <HAL_SPI_MspInit+0x184>)
 80025dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025e4:	4b30      	ldr	r3, [pc, #192]	; (80026a8 <HAL_SPI_MspInit+0x184>)
 80025e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ee:	60bb      	str	r3, [r7, #8]
 80025f0:	68bb      	ldr	r3, [r7, #8]
    PB4 (NJTRST)     ------> SPI2_NSS
    PD3     ------> SPI2_SCK
    PI2     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80025f2:	2310      	movs	r3, #16
 80025f4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f8:	2302      	movs	r3, #2
 80025fa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fe:	2300      	movs	r3, #0
 8002600:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002604:	2300      	movs	r3, #0
 8002606:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 800260a:	2307      	movs	r3, #7
 800260c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002610:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002614:	4619      	mov	r1, r3
 8002616:	4825      	ldr	r0, [pc, #148]	; (80026ac <HAL_SPI_MspInit+0x188>)
 8002618:	f003 fb5a 	bl	8005cd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800261c:	2308      	movs	r3, #8
 800261e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002622:	2302      	movs	r3, #2
 8002624:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002628:	2300      	movs	r3, #0
 800262a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800262e:	2300      	movs	r3, #0
 8002630:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002634:	2305      	movs	r3, #5
 8002636:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800263a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800263e:	4619      	mov	r1, r3
 8002640:	481b      	ldr	r0, [pc, #108]	; (80026b0 <HAL_SPI_MspInit+0x18c>)
 8002642:	f003 fb45 	bl	8005cd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002646:	2304      	movs	r3, #4
 8002648:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800264c:	2302      	movs	r3, #2
 800264e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002652:	2300      	movs	r3, #0
 8002654:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002658:	2300      	movs	r3, #0
 800265a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800265e:	2305      	movs	r3, #5
 8002660:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002664:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002668:	4619      	mov	r1, r3
 800266a:	4812      	ldr	r0, [pc, #72]	; (80026b4 <HAL_SPI_MspInit+0x190>)
 800266c:	f003 fb30 	bl	8005cd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002670:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002674:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002678:	2302      	movs	r3, #2
 800267a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267e:	2300      	movs	r3, #0
 8002680:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002684:	2300      	movs	r3, #0
 8002686:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800268a:	2305      	movs	r3, #5
 800268c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002690:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002694:	4619      	mov	r1, r3
 8002696:	4805      	ldr	r0, [pc, #20]	; (80026ac <HAL_SPI_MspInit+0x188>)
 8002698:	f003 fb1a 	bl	8005cd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800269c:	bf00      	nop
 800269e:	37f0      	adds	r7, #240	; 0xf0
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	40003800 	.word	0x40003800
 80026a8:	58024400 	.word	0x58024400
 80026ac:	58020400 	.word	0x58020400
 80026b0:	58020c00 	.word	0x58020c00
 80026b4:	58022000 	.word	0x58022000

080026b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a0b      	ldr	r2, [pc, #44]	; (80026f4 <HAL_TIM_Base_MspInit+0x3c>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d10e      	bne.n	80026e8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80026ca:	4b0b      	ldr	r3, [pc, #44]	; (80026f8 <HAL_TIM_Base_MspInit+0x40>)
 80026cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80026d0:	4a09      	ldr	r2, [pc, #36]	; (80026f8 <HAL_TIM_Base_MspInit+0x40>)
 80026d2:	f043 0302 	orr.w	r3, r3, #2
 80026d6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80026da:	4b07      	ldr	r3, [pc, #28]	; (80026f8 <HAL_TIM_Base_MspInit+0x40>)
 80026dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	60fb      	str	r3, [r7, #12]
 80026e6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80026e8:	bf00      	nop
 80026ea:	3714      	adds	r7, #20
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr
 80026f4:	40000400 	.word	0x40000400
 80026f8:	58024400 	.word	0x58024400

080026fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b0ba      	sub	sp, #232	; 0xe8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002704:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002708:	2200      	movs	r2, #0
 800270a:	601a      	str	r2, [r3, #0]
 800270c:	605a      	str	r2, [r3, #4]
 800270e:	609a      	str	r2, [r3, #8]
 8002710:	60da      	str	r2, [r3, #12]
 8002712:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002714:	f107 0310 	add.w	r3, r7, #16
 8002718:	22c0      	movs	r2, #192	; 0xc0
 800271a:	2100      	movs	r1, #0
 800271c:	4618      	mov	r0, r3
 800271e:	f00c f8f5 	bl	800e90c <memset>
  if(huart->Instance==USART3)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a2b      	ldr	r2, [pc, #172]	; (80027d4 <HAL_UART_MspInit+0xd8>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d14e      	bne.n	80027ca <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800272c:	f04f 0202 	mov.w	r2, #2
 8002730:	f04f 0300 	mov.w	r3, #0
 8002734:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002738:	2300      	movs	r3, #0
 800273a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800273e:	f107 0310 	add.w	r3, r7, #16
 8002742:	4618      	mov	r0, r3
 8002744:	f005 f8ae 	bl	80078a4 <HAL_RCCEx_PeriphCLKConfig>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800274e:	f7ff faa7 	bl	8001ca0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002752:	4b21      	ldr	r3, [pc, #132]	; (80027d8 <HAL_UART_MspInit+0xdc>)
 8002754:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002758:	4a1f      	ldr	r2, [pc, #124]	; (80027d8 <HAL_UART_MspInit+0xdc>)
 800275a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800275e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002762:	4b1d      	ldr	r3, [pc, #116]	; (80027d8 <HAL_UART_MspInit+0xdc>)
 8002764:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002768:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800276c:	60fb      	str	r3, [r7, #12]
 800276e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002770:	4b19      	ldr	r3, [pc, #100]	; (80027d8 <HAL_UART_MspInit+0xdc>)
 8002772:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002776:	4a18      	ldr	r2, [pc, #96]	; (80027d8 <HAL_UART_MspInit+0xdc>)
 8002778:	f043 0302 	orr.w	r3, r3, #2
 800277c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002780:	4b15      	ldr	r3, [pc, #84]	; (80027d8 <HAL_UART_MspInit+0xdc>)
 8002782:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	60bb      	str	r3, [r7, #8]
 800278c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800278e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002792:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002796:	2302      	movs	r3, #2
 8002798:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279c:	2300      	movs	r3, #0
 800279e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a2:	2300      	movs	r3, #0
 80027a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80027a8:	2307      	movs	r3, #7
 80027aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ae:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80027b2:	4619      	mov	r1, r3
 80027b4:	4809      	ldr	r0, [pc, #36]	; (80027dc <HAL_UART_MspInit+0xe0>)
 80027b6:	f003 fa8b 	bl	8005cd0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80027ba:	2200      	movs	r2, #0
 80027bc:	2100      	movs	r1, #0
 80027be:	2027      	movs	r0, #39	; 0x27
 80027c0:	f001 fd65 	bl	800428e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80027c4:	2027      	movs	r0, #39	; 0x27
 80027c6:	f001 fd7c 	bl	80042c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80027ca:	bf00      	nop
 80027cc:	37e8      	adds	r7, #232	; 0xe8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	40004800 	.word	0x40004800
 80027d8:	58024400 	.word	0x58024400
 80027dc:	58020400 	.word	0x58020400

080027e0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b0ba      	sub	sp, #232	; 0xe8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80027ec:	2200      	movs	r2, #0
 80027ee:	601a      	str	r2, [r3, #0]
 80027f0:	605a      	str	r2, [r3, #4]
 80027f2:	609a      	str	r2, [r3, #8]
 80027f4:	60da      	str	r2, [r3, #12]
 80027f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027f8:	f107 0310 	add.w	r3, r7, #16
 80027fc:	22c0      	movs	r2, #192	; 0xc0
 80027fe:	2100      	movs	r1, #0
 8002800:	4618      	mov	r0, r3
 8002802:	f00c f883 	bl	800e90c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a30      	ldr	r2, [pc, #192]	; (80028cc <HAL_PCD_MspInit+0xec>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d159      	bne.n	80028c4 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002810:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002814:	f04f 0300 	mov.w	r3, #0
 8002818:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800281c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002820:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002824:	f107 0310 	add.w	r3, r7, #16
 8002828:	4618      	mov	r0, r3
 800282a:	f005 f83b 	bl	80078a4 <HAL_RCCEx_PeriphCLKConfig>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8002834:	f7ff fa34 	bl	8001ca0 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8002838:	f004 f83e 	bl	80068b8 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800283c:	4b24      	ldr	r3, [pc, #144]	; (80028d0 <HAL_PCD_MspInit+0xf0>)
 800283e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002842:	4a23      	ldr	r2, [pc, #140]	; (80028d0 <HAL_PCD_MspInit+0xf0>)
 8002844:	f043 0301 	orr.w	r3, r3, #1
 8002848:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800284c:	4b20      	ldr	r3, [pc, #128]	; (80028d0 <HAL_PCD_MspInit+0xf0>)
 800284e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002852:	f003 0301 	and.w	r3, r3, #1
 8002856:	60fb      	str	r3, [r7, #12]
 8002858:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = VBUS_FS2_Pin;
 800285a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800285e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002862:	2300      	movs	r3, #0
 8002864:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002868:	2300      	movs	r3, #0
 800286a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(VBUS_FS2_GPIO_Port, &GPIO_InitStruct);
 800286e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002872:	4619      	mov	r1, r3
 8002874:	4817      	ldr	r0, [pc, #92]	; (80028d4 <HAL_PCD_MspInit+0xf4>)
 8002876:	f003 fa2b 	bl	8005cd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS2_P_Pin|USB_OTG_FS2_N_Pin;
 800287a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800287e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002882:	2302      	movs	r3, #2
 8002884:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002888:	2300      	movs	r3, #0
 800288a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800288e:	2300      	movs	r3, #0
 8002890:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002894:	230a      	movs	r3, #10
 8002896:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800289a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800289e:	4619      	mov	r1, r3
 80028a0:	480c      	ldr	r0, [pc, #48]	; (80028d4 <HAL_PCD_MspInit+0xf4>)
 80028a2:	f003 fa15 	bl	8005cd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80028a6:	4b0a      	ldr	r3, [pc, #40]	; (80028d0 <HAL_PCD_MspInit+0xf0>)
 80028a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80028ac:	4a08      	ldr	r2, [pc, #32]	; (80028d0 <HAL_PCD_MspInit+0xf0>)
 80028ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80028b2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80028b6:	4b06      	ldr	r3, [pc, #24]	; (80028d0 <HAL_PCD_MspInit+0xf0>)
 80028b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80028bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028c0:	60bb      	str	r3, [r7, #8]
 80028c2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80028c4:	bf00      	nop
 80028c6:	37e8      	adds	r7, #232	; 0xe8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	40080000 	.word	0x40080000
 80028d0:	58024400 	.word	0x58024400
 80028d4:	58020000 	.word	0x58020000

080028d8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80028d8:	b580      	push	{r7, lr}
 80028da:	b0b8      	sub	sp, #224	; 0xe0
 80028dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80028de:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80028e2:	2200      	movs	r2, #0
 80028e4:	601a      	str	r2, [r3, #0]
 80028e6:	605a      	str	r2, [r3, #4]
 80028e8:	609a      	str	r2, [r3, #8]
 80028ea:	60da      	str	r2, [r3, #12]
 80028ec:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80028ee:	4b51      	ldr	r3, [pc, #324]	; (8002a34 <HAL_FMC_MspInit+0x15c>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	f040 8099 	bne.w	8002a2a <HAL_FMC_MspInit+0x152>
    return;
  }
  FMC_Initialized = 1;
 80028f8:	4b4e      	ldr	r3, [pc, #312]	; (8002a34 <HAL_FMC_MspInit+0x15c>)
 80028fa:	2201      	movs	r2, #1
 80028fc:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80028fe:	f107 0308 	add.w	r3, r7, #8
 8002902:	22c0      	movs	r2, #192	; 0xc0
 8002904:	2100      	movs	r1, #0
 8002906:	4618      	mov	r0, r3
 8002908:	f00c f800 	bl	800e90c <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 800290c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002910:	f04f 0300 	mov.w	r3, #0
 8002914:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8002918:	2300      	movs	r3, #0
 800291a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800291c:	f107 0308 	add.w	r3, r7, #8
 8002920:	4618      	mov	r0, r3
 8002922:	f004 ffbf 	bl	80078a4 <HAL_RCCEx_PeriphCLKConfig>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d001      	beq.n	8002930 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 800292c:	f7ff f9b8 	bl	8001ca0 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002930:	4b41      	ldr	r3, [pc, #260]	; (8002a38 <HAL_FMC_MspInit+0x160>)
 8002932:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002936:	4a40      	ldr	r2, [pc, #256]	; (8002a38 <HAL_FMC_MspInit+0x160>)
 8002938:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800293c:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8002940:	4b3d      	ldr	r3, [pc, #244]	; (8002a38 <HAL_FMC_MspInit+0x160>)
 8002942:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002946:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800294a:	607b      	str	r3, [r7, #4]
 800294c:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 800294e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002952:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002956:	2302      	movs	r3, #2
 8002958:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295c:	2300      	movs	r3, #0
 800295e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002962:	2303      	movs	r3, #3
 8002964:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002968:	230c      	movs	r3, #12
 800296a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800296e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002972:	4619      	mov	r1, r3
 8002974:	4831      	ldr	r0, [pc, #196]	; (8002a3c <HAL_FMC_MspInit+0x164>)
 8002976:	f003 f9ab 	bl	8005cd0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 800297a:	f248 1333 	movw	r3, #33075	; 0x8133
 800297e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002982:	2302      	movs	r3, #2
 8002984:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002988:	2300      	movs	r3, #0
 800298a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800298e:	2303      	movs	r3, #3
 8002990:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002994:	230c      	movs	r3, #12
 8002996:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800299a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800299e:	4619      	mov	r1, r3
 80029a0:	4827      	ldr	r0, [pc, #156]	; (8002a40 <HAL_FMC_MspInit+0x168>)
 80029a2:	f003 f995 	bl	8005cd0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 80029a6:	f24c 7303 	movw	r3, #50947	; 0xc703
 80029aa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ae:	2302      	movs	r3, #2
 80029b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b4:	2300      	movs	r3, #0
 80029b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ba:	2303      	movs	r3, #3
 80029bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80029c0:	230c      	movs	r3, #12
 80029c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029c6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80029ca:	4619      	mov	r1, r3
 80029cc:	481d      	ldr	r0, [pc, #116]	; (8002a44 <HAL_FMC_MspInit+0x16c>)
 80029ce:	f003 f97f 	bl	8005cd0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 80029d2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80029d6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029da:	2302      	movs	r3, #2
 80029dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e0:	2300      	movs	r3, #0
 80029e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029e6:	2303      	movs	r3, #3
 80029e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80029ec:	230c      	movs	r3, #12
 80029ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80029f2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80029f6:	4619      	mov	r1, r3
 80029f8:	4813      	ldr	r0, [pc, #76]	; (8002a48 <HAL_FMC_MspInit+0x170>)
 80029fa:	f003 f969 	bl	8005cd0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80029fe:	23e0      	movs	r3, #224	; 0xe0
 8002a00:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a04:	2302      	movs	r3, #2
 8002a06:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a10:	2303      	movs	r3, #3
 8002a12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a16:	230c      	movs	r3, #12
 8002a18:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002a1c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002a20:	4619      	mov	r1, r3
 8002a22:	480a      	ldr	r0, [pc, #40]	; (8002a4c <HAL_FMC_MspInit+0x174>)
 8002a24:	f003 f954 	bl	8005cd0 <HAL_GPIO_Init>
 8002a28:	e000      	b.n	8002a2c <HAL_FMC_MspInit+0x154>
    return;
 8002a2a:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002a2c:	37e0      	adds	r7, #224	; 0xe0
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	24000db8 	.word	0x24000db8
 8002a38:	58024400 	.word	0x58024400
 8002a3c:	58021000 	.word	0x58021000
 8002a40:	58021800 	.word	0x58021800
 8002a44:	58020c00 	.word	0x58020c00
 8002a48:	58021400 	.word	0x58021400
 8002a4c:	58021c00 	.word	0x58021c00

08002a50 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002a58:	f7ff ff3e 	bl	80028d8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002a5c:	bf00      	nop
 8002a5e:	3708      	adds	r7, #8
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b0ba      	sub	sp, #232	; 0xe8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a6c:	f107 0310 	add.w	r3, r7, #16
 8002a70:	22c0      	movs	r2, #192	; 0xc0
 8002a72:	2100      	movs	r1, #0
 8002a74:	4618      	mov	r0, r3
 8002a76:	f00b ff49 	bl	800e90c <memset>
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a45      	ldr	r2, [pc, #276]	; (8002b94 <HAL_SAI_MspInit+0x130>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d13e      	bne.n	8002b02 <HAL_SAI_MspInit+0x9e>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8002a84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a88:	f04f 0300 	mov.w	r3, #0
 8002a8c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 8002a90:	2300      	movs	r3, #0
 8002a92:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a94:	f107 0310 	add.w	r3, r7, #16
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f004 ff03 	bl	80078a4 <HAL_RCCEx_PeriphCLKConfig>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <HAL_SAI_MspInit+0x44>
    {
      Error_Handler();
 8002aa4:	f7ff f8fc 	bl	8001ca0 <Error_Handler>
    }

    if (SAI2_client == 0)
 8002aa8:	4b3b      	ldr	r3, [pc, #236]	; (8002b98 <HAL_SAI_MspInit+0x134>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d10e      	bne.n	8002ace <HAL_SAI_MspInit+0x6a>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002ab0:	4b3a      	ldr	r3, [pc, #232]	; (8002b9c <HAL_SAI_MspInit+0x138>)
 8002ab2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002ab6:	4a39      	ldr	r2, [pc, #228]	; (8002b9c <HAL_SAI_MspInit+0x138>)
 8002ab8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002abc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002ac0:	4b36      	ldr	r3, [pc, #216]	; (8002b9c <HAL_SAI_MspInit+0x138>)
 8002ac2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002ac6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002aca:	60fb      	str	r3, [r7, #12]
 8002acc:	68fb      	ldr	r3, [r7, #12]
    }
    SAI2_client ++;
 8002ace:	4b32      	ldr	r3, [pc, #200]	; (8002b98 <HAL_SAI_MspInit+0x134>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	4a30      	ldr	r2, [pc, #192]	; (8002b98 <HAL_SAI_MspInit+0x134>)
 8002ad6:	6013      	str	r3, [r2, #0]
    PI6     ------> SAI2_SD_A
    PI5     ------> SAI2_SCK_A
    PI4     ------> SAI2_MCLK_A
    PI7     ------> SAI2_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_7;
 8002ad8:	23f0      	movs	r3, #240	; 0xf0
 8002ada:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ade:	2302      	movs	r3, #2
 8002ae0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aea:	2300      	movs	r3, #0
 8002aec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002af0:	230a      	movs	r3, #10
 8002af2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002af6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002afa:	4619      	mov	r1, r3
 8002afc:	4828      	ldr	r0, [pc, #160]	; (8002ba0 <HAL_SAI_MspInit+0x13c>)
 8002afe:	f003 f8e7 	bl	8005cd0 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a27      	ldr	r2, [pc, #156]	; (8002ba4 <HAL_SAI_MspInit+0x140>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d13f      	bne.n	8002b8c <HAL_SAI_MspInit+0x128>
    {
      /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8002b0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b10:	f04f 0300 	mov.w	r3, #0
 8002b14:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b1c:	f107 0310 	add.w	r3, r7, #16
 8002b20:	4618      	mov	r0, r3
 8002b22:	f004 febf 	bl	80078a4 <HAL_RCCEx_PeriphCLKConfig>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <HAL_SAI_MspInit+0xcc>
    {
      Error_Handler();
 8002b2c:	f7ff f8b8 	bl	8001ca0 <Error_Handler>
    }

      if (SAI2_client == 0)
 8002b30:	4b19      	ldr	r3, [pc, #100]	; (8002b98 <HAL_SAI_MspInit+0x134>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d10e      	bne.n	8002b56 <HAL_SAI_MspInit+0xf2>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002b38:	4b18      	ldr	r3, [pc, #96]	; (8002b9c <HAL_SAI_MspInit+0x138>)
 8002b3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b3e:	4a17      	ldr	r2, [pc, #92]	; (8002b9c <HAL_SAI_MspInit+0x138>)
 8002b40:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b44:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002b48:	4b14      	ldr	r3, [pc, #80]	; (8002b9c <HAL_SAI_MspInit+0x138>)
 8002b4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b52:	60bb      	str	r3, [r7, #8]
 8002b54:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 8002b56:	4b10      	ldr	r3, [pc, #64]	; (8002b98 <HAL_SAI_MspInit+0x134>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	4a0e      	ldr	r2, [pc, #56]	; (8002b98 <HAL_SAI_MspInit+0x134>)
 8002b5e:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002b60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b64:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b68:	2302      	movs	r3, #2
 8002b6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b74:	2300      	movs	r3, #0
 8002b76:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002b7a:	230a      	movs	r3, #10
 8002b7c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b80:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002b84:	4619      	mov	r1, r3
 8002b86:	4808      	ldr	r0, [pc, #32]	; (8002ba8 <HAL_SAI_MspInit+0x144>)
 8002b88:	f003 f8a2 	bl	8005cd0 <HAL_GPIO_Init>

    }
}
 8002b8c:	bf00      	nop
 8002b8e:	37e8      	adds	r7, #232	; 0xe8
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	40015c04 	.word	0x40015c04
 8002b98:	24000dbc 	.word	0x24000dbc
 8002b9c:	58024400 	.word	0x58024400
 8002ba0:	58022000 	.word	0x58022000
 8002ba4:	40015c24 	.word	0x40015c24
 8002ba8:	58021800 	.word	0x58021800

08002bac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002bb0:	e7fe      	b.n	8002bb0 <NMI_Handler+0x4>

08002bb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bb6:	e7fe      	b.n	8002bb6 <HardFault_Handler+0x4>

08002bb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bbc:	e7fe      	b.n	8002bbc <MemManage_Handler+0x4>

08002bbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bc2:	e7fe      	b.n	8002bc2 <BusFault_Handler+0x4>

08002bc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bc8:	e7fe      	b.n	8002bc8 <UsageFault_Handler+0x4>

08002bca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bce:	bf00      	nop
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bdc:	bf00      	nop
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002be6:	b480      	push	{r7}
 8002be8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bea:	bf00      	nop
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bf8:	f000 f966 	bl	8002ec8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bfc:	bf00      	nop
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002c04:	4802      	ldr	r0, [pc, #8]	; (8002c10 <USART3_IRQHandler+0x10>)
 8002c06:	f008 ff7b 	bl	800bb00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002c0a:	bf00      	nop
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	24000798 	.word	0x24000798

08002c14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b086      	sub	sp, #24
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c1c:	4a14      	ldr	r2, [pc, #80]	; (8002c70 <_sbrk+0x5c>)
 8002c1e:	4b15      	ldr	r3, [pc, #84]	; (8002c74 <_sbrk+0x60>)
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c28:	4b13      	ldr	r3, [pc, #76]	; (8002c78 <_sbrk+0x64>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d102      	bne.n	8002c36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c30:	4b11      	ldr	r3, [pc, #68]	; (8002c78 <_sbrk+0x64>)
 8002c32:	4a12      	ldr	r2, [pc, #72]	; (8002c7c <_sbrk+0x68>)
 8002c34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c36:	4b10      	ldr	r3, [pc, #64]	; (8002c78 <_sbrk+0x64>)
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	693a      	ldr	r2, [r7, #16]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d207      	bcs.n	8002c54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c44:	f00b fe2a 	bl	800e89c <__errno>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	220c      	movs	r2, #12
 8002c4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c52:	e009      	b.n	8002c68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c54:	4b08      	ldr	r3, [pc, #32]	; (8002c78 <_sbrk+0x64>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c5a:	4b07      	ldr	r3, [pc, #28]	; (8002c78 <_sbrk+0x64>)
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4413      	add	r3, r2
 8002c62:	4a05      	ldr	r2, [pc, #20]	; (8002c78 <_sbrk+0x64>)
 8002c64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c66:	68fb      	ldr	r3, [r7, #12]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3718      	adds	r7, #24
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	24080000 	.word	0x24080000
 8002c74:	00000400 	.word	0x00000400
 8002c78:	24000dc0 	.word	0x24000dc0
 8002c7c:	24000dd8 	.word	0x24000dd8

08002c80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002c84:	4b37      	ldr	r3, [pc, #220]	; (8002d64 <SystemInit+0xe4>)
 8002c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c8a:	4a36      	ldr	r2, [pc, #216]	; (8002d64 <SystemInit+0xe4>)
 8002c8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002c94:	4b34      	ldr	r3, [pc, #208]	; (8002d68 <SystemInit+0xe8>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 030f 	and.w	r3, r3, #15
 8002c9c:	2b06      	cmp	r3, #6
 8002c9e:	d807      	bhi.n	8002cb0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002ca0:	4b31      	ldr	r3, [pc, #196]	; (8002d68 <SystemInit+0xe8>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f023 030f 	bic.w	r3, r3, #15
 8002ca8:	4a2f      	ldr	r2, [pc, #188]	; (8002d68 <SystemInit+0xe8>)
 8002caa:	f043 0307 	orr.w	r3, r3, #7
 8002cae:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002cb0:	4b2e      	ldr	r3, [pc, #184]	; (8002d6c <SystemInit+0xec>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a2d      	ldr	r2, [pc, #180]	; (8002d6c <SystemInit+0xec>)
 8002cb6:	f043 0301 	orr.w	r3, r3, #1
 8002cba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002cbc:	4b2b      	ldr	r3, [pc, #172]	; (8002d6c <SystemInit+0xec>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002cc2:	4b2a      	ldr	r3, [pc, #168]	; (8002d6c <SystemInit+0xec>)
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	4929      	ldr	r1, [pc, #164]	; (8002d6c <SystemInit+0xec>)
 8002cc8:	4b29      	ldr	r3, [pc, #164]	; (8002d70 <SystemInit+0xf0>)
 8002cca:	4013      	ands	r3, r2
 8002ccc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002cce:	4b26      	ldr	r3, [pc, #152]	; (8002d68 <SystemInit+0xe8>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0308 	and.w	r3, r3, #8
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d007      	beq.n	8002cea <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002cda:	4b23      	ldr	r3, [pc, #140]	; (8002d68 <SystemInit+0xe8>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f023 030f 	bic.w	r3, r3, #15
 8002ce2:	4a21      	ldr	r2, [pc, #132]	; (8002d68 <SystemInit+0xe8>)
 8002ce4:	f043 0307 	orr.w	r3, r3, #7
 8002ce8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002cea:	4b20      	ldr	r3, [pc, #128]	; (8002d6c <SystemInit+0xec>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002cf0:	4b1e      	ldr	r3, [pc, #120]	; (8002d6c <SystemInit+0xec>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002cf6:	4b1d      	ldr	r3, [pc, #116]	; (8002d6c <SystemInit+0xec>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002cfc:	4b1b      	ldr	r3, [pc, #108]	; (8002d6c <SystemInit+0xec>)
 8002cfe:	4a1d      	ldr	r2, [pc, #116]	; (8002d74 <SystemInit+0xf4>)
 8002d00:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002d02:	4b1a      	ldr	r3, [pc, #104]	; (8002d6c <SystemInit+0xec>)
 8002d04:	4a1c      	ldr	r2, [pc, #112]	; (8002d78 <SystemInit+0xf8>)
 8002d06:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002d08:	4b18      	ldr	r3, [pc, #96]	; (8002d6c <SystemInit+0xec>)
 8002d0a:	4a1c      	ldr	r2, [pc, #112]	; (8002d7c <SystemInit+0xfc>)
 8002d0c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002d0e:	4b17      	ldr	r3, [pc, #92]	; (8002d6c <SystemInit+0xec>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002d14:	4b15      	ldr	r3, [pc, #84]	; (8002d6c <SystemInit+0xec>)
 8002d16:	4a19      	ldr	r2, [pc, #100]	; (8002d7c <SystemInit+0xfc>)
 8002d18:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002d1a:	4b14      	ldr	r3, [pc, #80]	; (8002d6c <SystemInit+0xec>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002d20:	4b12      	ldr	r3, [pc, #72]	; (8002d6c <SystemInit+0xec>)
 8002d22:	4a16      	ldr	r2, [pc, #88]	; (8002d7c <SystemInit+0xfc>)
 8002d24:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002d26:	4b11      	ldr	r3, [pc, #68]	; (8002d6c <SystemInit+0xec>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002d2c:	4b0f      	ldr	r3, [pc, #60]	; (8002d6c <SystemInit+0xec>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a0e      	ldr	r2, [pc, #56]	; (8002d6c <SystemInit+0xec>)
 8002d32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d36:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002d38:	4b0c      	ldr	r3, [pc, #48]	; (8002d6c <SystemInit+0xec>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002d3e:	4b10      	ldr	r3, [pc, #64]	; (8002d80 <SystemInit+0x100>)
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	4b10      	ldr	r3, [pc, #64]	; (8002d84 <SystemInit+0x104>)
 8002d44:	4013      	ands	r3, r2
 8002d46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d4a:	d202      	bcs.n	8002d52 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002d4c:	4b0e      	ldr	r3, [pc, #56]	; (8002d88 <SystemInit+0x108>)
 8002d4e:	2201      	movs	r2, #1
 8002d50:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002d52:	4b0e      	ldr	r3, [pc, #56]	; (8002d8c <SystemInit+0x10c>)
 8002d54:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002d58:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002d5a:	bf00      	nop
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr
 8002d64:	e000ed00 	.word	0xe000ed00
 8002d68:	52002000 	.word	0x52002000
 8002d6c:	58024400 	.word	0x58024400
 8002d70:	eaf6ed7f 	.word	0xeaf6ed7f
 8002d74:	02020200 	.word	0x02020200
 8002d78:	01ff0000 	.word	0x01ff0000
 8002d7c:	01010280 	.word	0x01010280
 8002d80:	5c001000 	.word	0x5c001000
 8002d84:	ffff0000 	.word	0xffff0000
 8002d88:	51008108 	.word	0x51008108
 8002d8c:	52004000 	.word	0x52004000

08002d90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002d90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002dc8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002d94:	f7ff ff74 	bl	8002c80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d98:	480c      	ldr	r0, [pc, #48]	; (8002dcc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002d9a:	490d      	ldr	r1, [pc, #52]	; (8002dd0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002d9c:	4a0d      	ldr	r2, [pc, #52]	; (8002dd4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002d9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002da0:	e002      	b.n	8002da8 <LoopCopyDataInit>

08002da2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002da2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002da4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002da6:	3304      	adds	r3, #4

08002da8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002da8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002daa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002dac:	d3f9      	bcc.n	8002da2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dae:	4a0a      	ldr	r2, [pc, #40]	; (8002dd8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002db0:	4c0a      	ldr	r4, [pc, #40]	; (8002ddc <LoopFillZerobss+0x22>)
  movs r3, #0
 8002db2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002db4:	e001      	b.n	8002dba <LoopFillZerobss>

08002db6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002db6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002db8:	3204      	adds	r2, #4

08002dba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002dbc:	d3fb      	bcc.n	8002db6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002dbe:	f00b fd73 	bl	800e8a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002dc2:	f7fd fdb9 	bl	8000938 <main>
  bx  lr
 8002dc6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002dc8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002dcc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002dd0:	24000098 	.word	0x24000098
  ldr r2, =_sidata
 8002dd4:	0800f390 	.word	0x0800f390
  ldr r2, =_sbss
 8002dd8:	24000158 	.word	0x24000158
  ldr r4, =_ebss
 8002ddc:	24000dd8 	.word	0x24000dd8

08002de0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002de0:	e7fe      	b.n	8002de0 <ADC3_IRQHandler>
	...

08002de4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dea:	2003      	movs	r0, #3
 8002dec:	f001 fa44 	bl	8004278 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002df0:	f004 fb82 	bl	80074f8 <HAL_RCC_GetSysClockFreq>
 8002df4:	4602      	mov	r2, r0
 8002df6:	4b15      	ldr	r3, [pc, #84]	; (8002e4c <HAL_Init+0x68>)
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	0a1b      	lsrs	r3, r3, #8
 8002dfc:	f003 030f 	and.w	r3, r3, #15
 8002e00:	4913      	ldr	r1, [pc, #76]	; (8002e50 <HAL_Init+0x6c>)
 8002e02:	5ccb      	ldrb	r3, [r1, r3]
 8002e04:	f003 031f 	and.w	r3, r3, #31
 8002e08:	fa22 f303 	lsr.w	r3, r2, r3
 8002e0c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002e0e:	4b0f      	ldr	r3, [pc, #60]	; (8002e4c <HAL_Init+0x68>)
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	f003 030f 	and.w	r3, r3, #15
 8002e16:	4a0e      	ldr	r2, [pc, #56]	; (8002e50 <HAL_Init+0x6c>)
 8002e18:	5cd3      	ldrb	r3, [r2, r3]
 8002e1a:	f003 031f 	and.w	r3, r3, #31
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	fa22 f303 	lsr.w	r3, r2, r3
 8002e24:	4a0b      	ldr	r2, [pc, #44]	; (8002e54 <HAL_Init+0x70>)
 8002e26:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002e28:	4a0b      	ldr	r2, [pc, #44]	; (8002e58 <HAL_Init+0x74>)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e2e:	2000      	movs	r0, #0
 8002e30:	f000 f814 	bl	8002e5c <HAL_InitTick>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e002      	b.n	8002e44 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002e3e:	f7fe ff35 	bl	8001cac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3708      	adds	r7, #8
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	58024400 	.word	0x58024400
 8002e50:	0800f314 	.word	0x0800f314
 8002e54:	24000028 	.word	0x24000028
 8002e58:	24000024 	.word	0x24000024

08002e5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002e64:	4b15      	ldr	r3, [pc, #84]	; (8002ebc <HAL_InitTick+0x60>)
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d101      	bne.n	8002e70 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e021      	b.n	8002eb4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002e70:	4b13      	ldr	r3, [pc, #76]	; (8002ec0 <HAL_InitTick+0x64>)
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	4b11      	ldr	r3, [pc, #68]	; (8002ebc <HAL_InitTick+0x60>)
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	4619      	mov	r1, r3
 8002e7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e86:	4618      	mov	r0, r3
 8002e88:	f001 fa29 	bl	80042de <HAL_SYSTICK_Config>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e00e      	b.n	8002eb4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2b0f      	cmp	r3, #15
 8002e9a:	d80a      	bhi.n	8002eb2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	6879      	ldr	r1, [r7, #4]
 8002ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ea4:	f001 f9f3 	bl	800428e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ea8:	4a06      	ldr	r2, [pc, #24]	; (8002ec4 <HAL_InitTick+0x68>)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	e000      	b.n	8002eb4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3708      	adds	r7, #8
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	24000030 	.word	0x24000030
 8002ec0:	24000024 	.word	0x24000024
 8002ec4:	2400002c 	.word	0x2400002c

08002ec8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ecc:	4b06      	ldr	r3, [pc, #24]	; (8002ee8 <HAL_IncTick+0x20>)
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	4b06      	ldr	r3, [pc, #24]	; (8002eec <HAL_IncTick+0x24>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	4a04      	ldr	r2, [pc, #16]	; (8002eec <HAL_IncTick+0x24>)
 8002eda:	6013      	str	r3, [r2, #0]
}
 8002edc:	bf00      	nop
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	24000030 	.word	0x24000030
 8002eec:	24000dc4 	.word	0x24000dc4

08002ef0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ef4:	4b03      	ldr	r3, [pc, #12]	; (8002f04 <HAL_GetTick+0x14>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	24000dc4 	.word	0x24000dc4

08002f08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f10:	f7ff ffee 	bl	8002ef0 <HAL_GetTick>
 8002f14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f20:	d005      	beq.n	8002f2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f22:	4b0a      	ldr	r3, [pc, #40]	; (8002f4c <HAL_Delay+0x44>)
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	461a      	mov	r2, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f2e:	bf00      	nop
 8002f30:	f7ff ffde 	bl	8002ef0 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	68fa      	ldr	r2, [r7, #12]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d8f7      	bhi.n	8002f30 <HAL_Delay+0x28>
  {
  }
}
 8002f40:	bf00      	nop
 8002f42:	bf00      	nop
 8002f44:	3710      	adds	r7, #16
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	24000030 	.word	0x24000030

08002f50 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002f50:	b480      	push	{r7}
 8002f52:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002f54:	4b03      	ldr	r3, [pc, #12]	; (8002f64 <HAL_GetREVID+0x14>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	0c1b      	lsrs	r3, r3, #16
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr
 8002f64:	5c001000 	.word	0x5c001000

08002f68 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002f70:	4b06      	ldr	r3, [pc, #24]	; (8002f8c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002f78:	4904      	ldr	r1, [pc, #16]	; (8002f8c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	604b      	str	r3, [r1, #4]
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr
 8002f8c:	58000400 	.word	0x58000400

08002f90 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002f9a:	4b07      	ldr	r3, [pc, #28]	; (8002fb8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002f9c:	685a      	ldr	r2, [r3, #4]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	43db      	mvns	r3, r3
 8002fa2:	401a      	ands	r2, r3
 8002fa4:	4904      	ldr	r1, [pc, #16]	; (8002fb8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	604b      	str	r3, [r1, #4]
}
 8002fac:	bf00      	nop
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr
 8002fb8:	58000400 	.word	0x58000400

08002fbc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	431a      	orrs	r2, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	609a      	str	r2, [r3, #8]
}
 8002fd6:	bf00      	nop
 8002fd8:	370c      	adds	r7, #12
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr

08002fe2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	b083      	sub	sp, #12
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
 8002fea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	609a      	str	r2, [r3, #8]
}
 8002ffc:	bf00      	nop
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003018:	4618      	mov	r0, r3
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003024:	b480      	push	{r7}
 8003026:	b087      	sub	sp, #28
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	607a      	str	r2, [r7, #4]
 8003030:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	3360      	adds	r3, #96	; 0x60
 8003036:	461a      	mov	r2, r3
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	4413      	add	r3, r2
 800303e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	430b      	orrs	r3, r1
 8003052:	431a      	orrs	r2, r3
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003058:	bf00      	nop
 800305a:	371c      	adds	r7, #28
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003064:	b480      	push	{r7}
 8003066:	b085      	sub	sp, #20
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	f003 031f 	and.w	r3, r3, #31
 800307e:	6879      	ldr	r1, [r7, #4]
 8003080:	fa01 f303 	lsl.w	r3, r1, r3
 8003084:	431a      	orrs	r2, r3
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	611a      	str	r2, [r3, #16]
}
 800308a:	bf00      	nop
 800308c:	3714      	adds	r7, #20
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr

08003096 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003096:	b480      	push	{r7}
 8003098:	b087      	sub	sp, #28
 800309a:	af00      	add	r7, sp, #0
 800309c:	60f8      	str	r0, [r7, #12]
 800309e:	60b9      	str	r1, [r7, #8]
 80030a0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	3360      	adds	r3, #96	; 0x60
 80030a6:	461a      	mov	r2, r3
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	4413      	add	r3, r2
 80030ae:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	431a      	orrs	r2, r3
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	601a      	str	r2, [r3, #0]
  }
}
 80030c0:	bf00      	nop
 80030c2:	371c      	adds	r7, #28
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b087      	sub	sp, #28
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	3330      	adds	r3, #48	; 0x30
 80030dc:	461a      	mov	r2, r3
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	0a1b      	lsrs	r3, r3, #8
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	f003 030c 	and.w	r3, r3, #12
 80030e8:	4413      	add	r3, r2
 80030ea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	f003 031f 	and.w	r3, r3, #31
 80030f6:	211f      	movs	r1, #31
 80030f8:	fa01 f303 	lsl.w	r3, r1, r3
 80030fc:	43db      	mvns	r3, r3
 80030fe:	401a      	ands	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	0e9b      	lsrs	r3, r3, #26
 8003104:	f003 011f 	and.w	r1, r3, #31
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	f003 031f 	and.w	r3, r3, #31
 800310e:	fa01 f303 	lsl.w	r3, r1, r3
 8003112:	431a      	orrs	r2, r3
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003118:	bf00      	nop
 800311a:	371c      	adds	r7, #28
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003124:	b480      	push	{r7}
 8003126:	b087      	sub	sp, #28
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	3314      	adds	r3, #20
 8003134:	461a      	mov	r2, r3
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	0e5b      	lsrs	r3, r3, #25
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	f003 0304 	and.w	r3, r3, #4
 8003140:	4413      	add	r3, r2
 8003142:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	0d1b      	lsrs	r3, r3, #20
 800314c:	f003 031f 	and.w	r3, r3, #31
 8003150:	2107      	movs	r1, #7
 8003152:	fa01 f303 	lsl.w	r3, r1, r3
 8003156:	43db      	mvns	r3, r3
 8003158:	401a      	ands	r2, r3
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	0d1b      	lsrs	r3, r3, #20
 800315e:	f003 031f 	and.w	r3, r3, #31
 8003162:	6879      	ldr	r1, [r7, #4]
 8003164:	fa01 f303 	lsl.w	r3, r1, r3
 8003168:	431a      	orrs	r2, r3
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800316e:	bf00      	nop
 8003170:	371c      	adds	r7, #28
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
	...

0800317c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800317c:	b480      	push	{r7}
 800317e:	b085      	sub	sp, #20
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003194:	43db      	mvns	r3, r3
 8003196:	401a      	ands	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f003 0318 	and.w	r3, r3, #24
 800319e:	4908      	ldr	r1, [pc, #32]	; (80031c0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80031a0:	40d9      	lsrs	r1, r3
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	400b      	ands	r3, r1
 80031a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031aa:	431a      	orrs	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80031b2:	bf00      	nop
 80031b4:	3714      	adds	r7, #20
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	000fffff 	.word	0x000fffff

080031c4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689a      	ldr	r2, [r3, #8]
 80031d0:	4b04      	ldr	r3, [pc, #16]	; (80031e4 <LL_ADC_DisableDeepPowerDown+0x20>)
 80031d2:	4013      	ands	r3, r2
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	6093      	str	r3, [r2, #8]
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr
 80031e4:	5fffffc0 	.word	0x5fffffc0

080031e8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031fc:	d101      	bne.n	8003202 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80031fe:	2301      	movs	r3, #1
 8003200:	e000      	b.n	8003204 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689a      	ldr	r2, [r3, #8]
 800321c:	4b05      	ldr	r3, [pc, #20]	; (8003234 <LL_ADC_EnableInternalRegulator+0x24>)
 800321e:	4013      	ands	r3, r2
 8003220:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003228:	bf00      	nop
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr
 8003234:	6fffffc0 	.word	0x6fffffc0

08003238 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003248:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800324c:	d101      	bne.n	8003252 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800324e:	2301      	movs	r3, #1
 8003250:	e000      	b.n	8003254 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003252:	2300      	movs	r3, #0
}
 8003254:	4618      	mov	r0, r3
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f003 0301 	and.w	r3, r3, #1
 8003270:	2b01      	cmp	r3, #1
 8003272:	d101      	bne.n	8003278 <LL_ADC_IsEnabled+0x18>
 8003274:	2301      	movs	r3, #1
 8003276:	e000      	b.n	800327a <LL_ADC_IsEnabled+0x1a>
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	370c      	adds	r7, #12
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr

08003286 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003286:	b480      	push	{r7}
 8003288:	b083      	sub	sp, #12
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f003 0304 	and.w	r3, r3, #4
 8003296:	2b04      	cmp	r3, #4
 8003298:	d101      	bne.n	800329e <LL_ADC_REG_IsConversionOngoing+0x18>
 800329a:	2301      	movs	r3, #1
 800329c:	e000      	b.n	80032a0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800329e:	2300      	movs	r3, #0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f003 0308 	and.w	r3, r3, #8
 80032bc:	2b08      	cmp	r3, #8
 80032be:	d101      	bne.n	80032c4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80032c0:	2301      	movs	r3, #1
 80032c2:	e000      	b.n	80032c6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	370c      	adds	r7, #12
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
	...

080032d4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80032d4:	b590      	push	{r4, r7, lr}
 80032d6:	b089      	sub	sp, #36	; 0x24
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032dc:	2300      	movs	r3, #0
 80032de:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80032e0:	2300      	movs	r3, #0
 80032e2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d101      	bne.n	80032ee <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e18f      	b.n	800360e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d109      	bne.n	8003310 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f7fe fcef 	bl	8001ce0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4618      	mov	r0, r3
 8003316:	f7ff ff67 	bl	80031e8 <LL_ADC_IsDeepPowerDownEnabled>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d004      	beq.n	800332a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4618      	mov	r0, r3
 8003326:	f7ff ff4d 	bl	80031c4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4618      	mov	r0, r3
 8003330:	f7ff ff82 	bl	8003238 <LL_ADC_IsInternalRegulatorEnabled>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d114      	bne.n	8003364 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4618      	mov	r0, r3
 8003340:	f7ff ff66 	bl	8003210 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003344:	4b87      	ldr	r3, [pc, #540]	; (8003564 <HAL_ADC_Init+0x290>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	099b      	lsrs	r3, r3, #6
 800334a:	4a87      	ldr	r2, [pc, #540]	; (8003568 <HAL_ADC_Init+0x294>)
 800334c:	fba2 2303 	umull	r2, r3, r2, r3
 8003350:	099b      	lsrs	r3, r3, #6
 8003352:	3301      	adds	r3, #1
 8003354:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003356:	e002      	b.n	800335e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	3b01      	subs	r3, #1
 800335c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d1f9      	bne.n	8003358 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4618      	mov	r0, r3
 800336a:	f7ff ff65 	bl	8003238 <LL_ADC_IsInternalRegulatorEnabled>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d10d      	bne.n	8003390 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003378:	f043 0210 	orr.w	r2, r3, #16
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003384:	f043 0201 	orr.w	r2, r3, #1
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4618      	mov	r0, r3
 8003396:	f7ff ff76 	bl	8003286 <LL_ADC_REG_IsConversionOngoing>
 800339a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a0:	f003 0310 	and.w	r3, r3, #16
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	f040 8129 	bne.w	80035fc <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	f040 8125 	bne.w	80035fc <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80033ba:	f043 0202 	orr.w	r2, r3, #2
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7ff ff4a 	bl	8003260 <LL_ADC_IsEnabled>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d136      	bne.n	8003440 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a65      	ldr	r2, [pc, #404]	; (800356c <HAL_ADC_Init+0x298>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d004      	beq.n	80033e6 <HAL_ADC_Init+0x112>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a63      	ldr	r2, [pc, #396]	; (8003570 <HAL_ADC_Init+0x29c>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d10e      	bne.n	8003404 <HAL_ADC_Init+0x130>
 80033e6:	4861      	ldr	r0, [pc, #388]	; (800356c <HAL_ADC_Init+0x298>)
 80033e8:	f7ff ff3a 	bl	8003260 <LL_ADC_IsEnabled>
 80033ec:	4604      	mov	r4, r0
 80033ee:	4860      	ldr	r0, [pc, #384]	; (8003570 <HAL_ADC_Init+0x29c>)
 80033f0:	f7ff ff36 	bl	8003260 <LL_ADC_IsEnabled>
 80033f4:	4603      	mov	r3, r0
 80033f6:	4323      	orrs	r3, r4
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	bf0c      	ite	eq
 80033fc:	2301      	moveq	r3, #1
 80033fe:	2300      	movne	r3, #0
 8003400:	b2db      	uxtb	r3, r3
 8003402:	e008      	b.n	8003416 <HAL_ADC_Init+0x142>
 8003404:	485b      	ldr	r0, [pc, #364]	; (8003574 <HAL_ADC_Init+0x2a0>)
 8003406:	f7ff ff2b 	bl	8003260 <LL_ADC_IsEnabled>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	bf0c      	ite	eq
 8003410:	2301      	moveq	r3, #1
 8003412:	2300      	movne	r3, #0
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d012      	beq.n	8003440 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a53      	ldr	r2, [pc, #332]	; (800356c <HAL_ADC_Init+0x298>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d004      	beq.n	800342e <HAL_ADC_Init+0x15a>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a51      	ldr	r2, [pc, #324]	; (8003570 <HAL_ADC_Init+0x29c>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d101      	bne.n	8003432 <HAL_ADC_Init+0x15e>
 800342e:	4a52      	ldr	r2, [pc, #328]	; (8003578 <HAL_ADC_Init+0x2a4>)
 8003430:	e000      	b.n	8003434 <HAL_ADC_Init+0x160>
 8003432:	4a52      	ldr	r2, [pc, #328]	; (800357c <HAL_ADC_Init+0x2a8>)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	4619      	mov	r1, r3
 800343a:	4610      	mov	r0, r2
 800343c:	f7ff fdbe 	bl	8002fbc <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003440:	f7ff fd86 	bl	8002f50 <HAL_GetREVID>
 8003444:	4603      	mov	r3, r0
 8003446:	f241 0203 	movw	r2, #4099	; 0x1003
 800344a:	4293      	cmp	r3, r2
 800344c:	d914      	bls.n	8003478 <HAL_ADC_Init+0x1a4>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	2b10      	cmp	r3, #16
 8003454:	d110      	bne.n	8003478 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	7d5b      	ldrb	r3, [r3, #21]
 800345a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003460:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003466:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	7f1b      	ldrb	r3, [r3, #28]
 800346c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800346e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003470:	f043 030c 	orr.w	r3, r3, #12
 8003474:	61bb      	str	r3, [r7, #24]
 8003476:	e00d      	b.n	8003494 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	7d5b      	ldrb	r3, [r3, #21]
 800347c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003482:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003488:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	7f1b      	ldrb	r3, [r3, #28]
 800348e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003490:	4313      	orrs	r3, r2
 8003492:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	7f1b      	ldrb	r3, [r3, #28]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d106      	bne.n	80034aa <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a1b      	ldr	r3, [r3, #32]
 80034a0:	3b01      	subs	r3, #1
 80034a2:	045b      	lsls	r3, r3, #17
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d009      	beq.n	80034c6 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b6:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034be:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80034c0:	69ba      	ldr	r2, [r7, #24]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	68da      	ldr	r2, [r3, #12]
 80034cc:	4b2c      	ldr	r3, [pc, #176]	; (8003580 <HAL_ADC_Init+0x2ac>)
 80034ce:	4013      	ands	r3, r2
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	6812      	ldr	r2, [r2, #0]
 80034d4:	69b9      	ldr	r1, [r7, #24]
 80034d6:	430b      	orrs	r3, r1
 80034d8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4618      	mov	r0, r3
 80034e0:	f7ff fed1 	bl	8003286 <LL_ADC_REG_IsConversionOngoing>
 80034e4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7ff fede 	bl	80032ac <LL_ADC_INJ_IsConversionOngoing>
 80034f0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d15f      	bne.n	80035b8 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d15c      	bne.n	80035b8 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	7d1b      	ldrb	r3, [r3, #20]
 8003502:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8003508:	4313      	orrs	r3, r2
 800350a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68da      	ldr	r2, [r3, #12]
 8003512:	4b1c      	ldr	r3, [pc, #112]	; (8003584 <HAL_ADC_Init+0x2b0>)
 8003514:	4013      	ands	r3, r2
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	6812      	ldr	r2, [r2, #0]
 800351a:	69b9      	ldr	r1, [r7, #24]
 800351c:	430b      	orrs	r3, r1
 800351e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003526:	2b01      	cmp	r3, #1
 8003528:	d130      	bne.n	800358c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	691a      	ldr	r2, [r3, #16]
 8003536:	4b14      	ldr	r3, [pc, #80]	; (8003588 <HAL_ADC_Init+0x2b4>)
 8003538:	4013      	ands	r3, r2
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800353e:	3a01      	subs	r2, #1
 8003540:	0411      	lsls	r1, r2, #16
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003546:	4311      	orrs	r1, r2
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800354c:	4311      	orrs	r1, r2
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003552:	430a      	orrs	r2, r1
 8003554:	431a      	orrs	r2, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f042 0201 	orr.w	r2, r2, #1
 800355e:	611a      	str	r2, [r3, #16]
 8003560:	e01c      	b.n	800359c <HAL_ADC_Init+0x2c8>
 8003562:	bf00      	nop
 8003564:	24000024 	.word	0x24000024
 8003568:	053e2d63 	.word	0x053e2d63
 800356c:	40022000 	.word	0x40022000
 8003570:	40022100 	.word	0x40022100
 8003574:	58026000 	.word	0x58026000
 8003578:	40022300 	.word	0x40022300
 800357c:	58026300 	.word	0x58026300
 8003580:	fff0c003 	.word	0xfff0c003
 8003584:	ffffbffc 	.word	0xffffbffc
 8003588:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	691a      	ldr	r2, [r3, #16]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f022 0201 	bic.w	r2, r2, #1
 800359a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	430a      	orrs	r2, r1
 80035b0:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 fb80 	bl	8003cb8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d10c      	bne.n	80035da <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c6:	f023 010f 	bic.w	r1, r3, #15
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	1e5a      	subs	r2, r3, #1
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	430a      	orrs	r2, r1
 80035d6:	631a      	str	r2, [r3, #48]	; 0x30
 80035d8:	e007      	b.n	80035ea <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f022 020f 	bic.w	r2, r2, #15
 80035e8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ee:	f023 0303 	bic.w	r3, r3, #3
 80035f2:	f043 0201 	orr.w	r2, r3, #1
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	655a      	str	r2, [r3, #84]	; 0x54
 80035fa:	e007      	b.n	800360c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003600:	f043 0210 	orr.w	r2, r3, #16
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800360c:	7ffb      	ldrb	r3, [r7, #31]
}
 800360e:	4618      	mov	r0, r3
 8003610:	3724      	adds	r7, #36	; 0x24
 8003612:	46bd      	mov	sp, r7
 8003614:	bd90      	pop	{r4, r7, pc}
 8003616:	bf00      	nop

08003618 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003618:	b590      	push	{r4, r7, lr}
 800361a:	b0a1      	sub	sp, #132	; 0x84
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003622:	2300      	movs	r3, #0
 8003624:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003628:	2300      	movs	r3, #0
 800362a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	4a9d      	ldr	r2, [pc, #628]	; (80038a8 <HAL_ADC_ConfigChannel+0x290>)
 8003632:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800363a:	2b01      	cmp	r3, #1
 800363c:	d101      	bne.n	8003642 <HAL_ADC_ConfigChannel+0x2a>
 800363e:	2302      	movs	r3, #2
 8003640:	e321      	b.n	8003c86 <HAL_ADC_ConfigChannel+0x66e>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2201      	movs	r2, #1
 8003646:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4618      	mov	r0, r3
 8003650:	f7ff fe19 	bl	8003286 <LL_ADC_REG_IsConversionOngoing>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	f040 8306 	bne.w	8003c68 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003664:	2b00      	cmp	r3, #0
 8003666:	d108      	bne.n	800367a <HAL_ADC_ConfigChannel+0x62>
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	0e9b      	lsrs	r3, r3, #26
 800366e:	f003 031f 	and.w	r3, r3, #31
 8003672:	2201      	movs	r2, #1
 8003674:	fa02 f303 	lsl.w	r3, r2, r3
 8003678:	e016      	b.n	80036a8 <HAL_ADC_ConfigChannel+0x90>
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003680:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003682:	fa93 f3a3 	rbit	r3, r3
 8003686:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003688:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800368a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800368c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800368e:	2b00      	cmp	r3, #0
 8003690:	d101      	bne.n	8003696 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8003692:	2320      	movs	r3, #32
 8003694:	e003      	b.n	800369e <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8003696:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003698:	fab3 f383 	clz	r3, r3
 800369c:	b2db      	uxtb	r3, r3
 800369e:	f003 031f 	and.w	r3, r3, #31
 80036a2:	2201      	movs	r2, #1
 80036a4:	fa02 f303 	lsl.w	r3, r2, r3
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	6812      	ldr	r2, [r2, #0]
 80036ac:	69d1      	ldr	r1, [r2, #28]
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	6812      	ldr	r2, [r2, #0]
 80036b2:	430b      	orrs	r3, r1
 80036b4:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6818      	ldr	r0, [r3, #0]
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	6859      	ldr	r1, [r3, #4]
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	461a      	mov	r2, r3
 80036c4:	f7ff fd02 	bl	80030cc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7ff fdda 	bl	8003286 <LL_ADC_REG_IsConversionOngoing>
 80036d2:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4618      	mov	r0, r3
 80036da:	f7ff fde7 	bl	80032ac <LL_ADC_INJ_IsConversionOngoing>
 80036de:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80036e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	f040 80b3 	bne.w	800384e <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80036e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	f040 80af 	bne.w	800384e <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6818      	ldr	r0, [r3, #0]
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	6819      	ldr	r1, [r3, #0]
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	461a      	mov	r2, r3
 80036fe:	f7ff fd11 	bl	8003124 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003702:	4b6a      	ldr	r3, [pc, #424]	; (80038ac <HAL_ADC_ConfigChannel+0x294>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800370a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800370e:	d10b      	bne.n	8003728 <HAL_ADC_ConfigChannel+0x110>
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	695a      	ldr	r2, [r3, #20]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	089b      	lsrs	r3, r3, #2
 800371c:	f003 0307 	and.w	r3, r3, #7
 8003720:	005b      	lsls	r3, r3, #1
 8003722:	fa02 f303 	lsl.w	r3, r2, r3
 8003726:	e01d      	b.n	8003764 <HAL_ADC_ConfigChannel+0x14c>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	f003 0310 	and.w	r3, r3, #16
 8003732:	2b00      	cmp	r3, #0
 8003734:	d10b      	bne.n	800374e <HAL_ADC_ConfigChannel+0x136>
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	695a      	ldr	r2, [r3, #20]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	089b      	lsrs	r3, r3, #2
 8003742:	f003 0307 	and.w	r3, r3, #7
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	fa02 f303 	lsl.w	r3, r2, r3
 800374c:	e00a      	b.n	8003764 <HAL_ADC_ConfigChannel+0x14c>
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	695a      	ldr	r2, [r3, #20]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	089b      	lsrs	r3, r3, #2
 800375a:	f003 0304 	and.w	r3, r3, #4
 800375e:	005b      	lsls	r3, r3, #1
 8003760:	fa02 f303 	lsl.w	r3, r2, r3
 8003764:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	2b04      	cmp	r3, #4
 800376c:	d027      	beq.n	80037be <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6818      	ldr	r0, [r3, #0]
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	6919      	ldr	r1, [r3, #16]
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800377c:	f7ff fc52 	bl	8003024 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6818      	ldr	r0, [r3, #0]
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	6919      	ldr	r1, [r3, #16]
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	7e5b      	ldrb	r3, [r3, #25]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d102      	bne.n	8003796 <HAL_ADC_ConfigChannel+0x17e>
 8003790:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003794:	e000      	b.n	8003798 <HAL_ADC_ConfigChannel+0x180>
 8003796:	2300      	movs	r3, #0
 8003798:	461a      	mov	r2, r3
 800379a:	f7ff fc7c 	bl	8003096 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6818      	ldr	r0, [r3, #0]
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	6919      	ldr	r1, [r3, #16]
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	7e1b      	ldrb	r3, [r3, #24]
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d102      	bne.n	80037b4 <HAL_ADC_ConfigChannel+0x19c>
 80037ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80037b2:	e000      	b.n	80037b6 <HAL_ADC_ConfigChannel+0x19e>
 80037b4:	2300      	movs	r3, #0
 80037b6:	461a      	mov	r2, r3
 80037b8:	f7ff fc54 	bl	8003064 <LL_ADC_SetDataRightShift>
 80037bc:	e047      	b.n	800384e <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037c4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	069b      	lsls	r3, r3, #26
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d107      	bne.n	80037e2 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80037e0:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037e8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	069b      	lsls	r3, r3, #26
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d107      	bne.n	8003806 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003804:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800380c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	069b      	lsls	r3, r3, #26
 8003816:	429a      	cmp	r2, r3
 8003818:	d107      	bne.n	800382a <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003828:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003830:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	069b      	lsls	r3, r3, #26
 800383a:	429a      	cmp	r2, r3
 800383c:	d107      	bne.n	800384e <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800384c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4618      	mov	r0, r3
 8003854:	f7ff fd04 	bl	8003260 <LL_ADC_IsEnabled>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	f040 820d 	bne.w	8003c7a <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6818      	ldr	r0, [r3, #0]
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	6819      	ldr	r1, [r3, #0]
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	461a      	mov	r2, r3
 800386e:	f7ff fc85 	bl	800317c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	4a0c      	ldr	r2, [pc, #48]	; (80038a8 <HAL_ADC_ConfigChannel+0x290>)
 8003878:	4293      	cmp	r3, r2
 800387a:	f040 8133 	bne.w	8003ae4 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800388a:	2b00      	cmp	r3, #0
 800388c:	d110      	bne.n	80038b0 <HAL_ADC_ConfigChannel+0x298>
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	0e9b      	lsrs	r3, r3, #26
 8003894:	3301      	adds	r3, #1
 8003896:	f003 031f 	and.w	r3, r3, #31
 800389a:	2b09      	cmp	r3, #9
 800389c:	bf94      	ite	ls
 800389e:	2301      	movls	r3, #1
 80038a0:	2300      	movhi	r3, #0
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	e01e      	b.n	80038e4 <HAL_ADC_ConfigChannel+0x2cc>
 80038a6:	bf00      	nop
 80038a8:	47ff0000 	.word	0x47ff0000
 80038ac:	5c001000 	.word	0x5c001000
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80038b8:	fa93 f3a3 	rbit	r3, r3
 80038bc:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80038be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038c0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80038c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d101      	bne.n	80038cc <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 80038c8:	2320      	movs	r3, #32
 80038ca:	e003      	b.n	80038d4 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80038cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038ce:	fab3 f383 	clz	r3, r3
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	3301      	adds	r3, #1
 80038d6:	f003 031f 	and.w	r3, r3, #31
 80038da:	2b09      	cmp	r3, #9
 80038dc:	bf94      	ite	ls
 80038de:	2301      	movls	r3, #1
 80038e0:	2300      	movhi	r3, #0
 80038e2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d079      	beq.n	80039dc <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d107      	bne.n	8003904 <HAL_ADC_ConfigChannel+0x2ec>
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	0e9b      	lsrs	r3, r3, #26
 80038fa:	3301      	adds	r3, #1
 80038fc:	069b      	lsls	r3, r3, #26
 80038fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003902:	e015      	b.n	8003930 <HAL_ADC_ConfigChannel+0x318>
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800390a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800390c:	fa93 f3a3 	rbit	r3, r3
 8003910:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003912:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003914:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003916:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003918:	2b00      	cmp	r3, #0
 800391a:	d101      	bne.n	8003920 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 800391c:	2320      	movs	r3, #32
 800391e:	e003      	b.n	8003928 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003920:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003922:	fab3 f383 	clz	r3, r3
 8003926:	b2db      	uxtb	r3, r3
 8003928:	3301      	adds	r3, #1
 800392a:	069b      	lsls	r3, r3, #26
 800392c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003938:	2b00      	cmp	r3, #0
 800393a:	d109      	bne.n	8003950 <HAL_ADC_ConfigChannel+0x338>
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	0e9b      	lsrs	r3, r3, #26
 8003942:	3301      	adds	r3, #1
 8003944:	f003 031f 	and.w	r3, r3, #31
 8003948:	2101      	movs	r1, #1
 800394a:	fa01 f303 	lsl.w	r3, r1, r3
 800394e:	e017      	b.n	8003980 <HAL_ADC_ConfigChannel+0x368>
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003956:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003958:	fa93 f3a3 	rbit	r3, r3
 800395c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800395e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003960:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003962:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003964:	2b00      	cmp	r3, #0
 8003966:	d101      	bne.n	800396c <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8003968:	2320      	movs	r3, #32
 800396a:	e003      	b.n	8003974 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 800396c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800396e:	fab3 f383 	clz	r3, r3
 8003972:	b2db      	uxtb	r3, r3
 8003974:	3301      	adds	r3, #1
 8003976:	f003 031f 	and.w	r3, r3, #31
 800397a:	2101      	movs	r1, #1
 800397c:	fa01 f303 	lsl.w	r3, r1, r3
 8003980:	ea42 0103 	orr.w	r1, r2, r3
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800398c:	2b00      	cmp	r3, #0
 800398e:	d10a      	bne.n	80039a6 <HAL_ADC_ConfigChannel+0x38e>
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	0e9b      	lsrs	r3, r3, #26
 8003996:	3301      	adds	r3, #1
 8003998:	f003 021f 	and.w	r2, r3, #31
 800399c:	4613      	mov	r3, r2
 800399e:	005b      	lsls	r3, r3, #1
 80039a0:	4413      	add	r3, r2
 80039a2:	051b      	lsls	r3, r3, #20
 80039a4:	e018      	b.n	80039d8 <HAL_ADC_ConfigChannel+0x3c0>
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039ae:	fa93 f3a3 	rbit	r3, r3
 80039b2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80039b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80039b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d101      	bne.n	80039c2 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 80039be:	2320      	movs	r3, #32
 80039c0:	e003      	b.n	80039ca <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 80039c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039c4:	fab3 f383 	clz	r3, r3
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	3301      	adds	r3, #1
 80039cc:	f003 021f 	and.w	r2, r3, #31
 80039d0:	4613      	mov	r3, r2
 80039d2:	005b      	lsls	r3, r3, #1
 80039d4:	4413      	add	r3, r2
 80039d6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039d8:	430b      	orrs	r3, r1
 80039da:	e07e      	b.n	8003ada <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d107      	bne.n	80039f8 <HAL_ADC_ConfigChannel+0x3e0>
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	0e9b      	lsrs	r3, r3, #26
 80039ee:	3301      	adds	r3, #1
 80039f0:	069b      	lsls	r3, r3, #26
 80039f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80039f6:	e015      	b.n	8003a24 <HAL_ADC_ConfigChannel+0x40c>
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a00:	fa93 f3a3 	rbit	r3, r3
 8003a04:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a08:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d101      	bne.n	8003a14 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003a10:	2320      	movs	r3, #32
 8003a12:	e003      	b.n	8003a1c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a16:	fab3 f383 	clz	r3, r3
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	069b      	lsls	r3, r3, #26
 8003a20:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d109      	bne.n	8003a44 <HAL_ADC_ConfigChannel+0x42c>
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	0e9b      	lsrs	r3, r3, #26
 8003a36:	3301      	adds	r3, #1
 8003a38:	f003 031f 	and.w	r3, r3, #31
 8003a3c:	2101      	movs	r1, #1
 8003a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a42:	e017      	b.n	8003a74 <HAL_ADC_ConfigChannel+0x45c>
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	fa93 f3a3 	rbit	r3, r3
 8003a50:	61bb      	str	r3, [r7, #24]
  return result;
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003a56:	6a3b      	ldr	r3, [r7, #32]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d101      	bne.n	8003a60 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8003a5c:	2320      	movs	r3, #32
 8003a5e:	e003      	b.n	8003a68 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8003a60:	6a3b      	ldr	r3, [r7, #32]
 8003a62:	fab3 f383 	clz	r3, r3
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	3301      	adds	r3, #1
 8003a6a:	f003 031f 	and.w	r3, r3, #31
 8003a6e:	2101      	movs	r1, #1
 8003a70:	fa01 f303 	lsl.w	r3, r1, r3
 8003a74:	ea42 0103 	orr.w	r1, r2, r3
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d10d      	bne.n	8003aa0 <HAL_ADC_ConfigChannel+0x488>
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	0e9b      	lsrs	r3, r3, #26
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	f003 021f 	and.w	r2, r3, #31
 8003a90:	4613      	mov	r3, r2
 8003a92:	005b      	lsls	r3, r3, #1
 8003a94:	4413      	add	r3, r2
 8003a96:	3b1e      	subs	r3, #30
 8003a98:	051b      	lsls	r3, r3, #20
 8003a9a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003a9e:	e01b      	b.n	8003ad8 <HAL_ADC_ConfigChannel+0x4c0>
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	fa93 f3a3 	rbit	r3, r3
 8003aac:	60fb      	str	r3, [r7, #12]
  return result;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d101      	bne.n	8003abc <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8003ab8:	2320      	movs	r3, #32
 8003aba:	e003      	b.n	8003ac4 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	fab3 f383 	clz	r3, r3
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	f003 021f 	and.w	r2, r3, #31
 8003aca:	4613      	mov	r3, r2
 8003acc:	005b      	lsls	r3, r3, #1
 8003ace:	4413      	add	r3, r2
 8003ad0:	3b1e      	subs	r3, #30
 8003ad2:	051b      	lsls	r3, r3, #20
 8003ad4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ad8:	430b      	orrs	r3, r1
 8003ada:	683a      	ldr	r2, [r7, #0]
 8003adc:	6892      	ldr	r2, [r2, #8]
 8003ade:	4619      	mov	r1, r3
 8003ae0:	f7ff fb20 	bl	8003124 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	f280 80c6 	bge.w	8003c7a <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a67      	ldr	r2, [pc, #412]	; (8003c90 <HAL_ADC_ConfigChannel+0x678>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d004      	beq.n	8003b02 <HAL_ADC_ConfigChannel+0x4ea>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a65      	ldr	r2, [pc, #404]	; (8003c94 <HAL_ADC_ConfigChannel+0x67c>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d101      	bne.n	8003b06 <HAL_ADC_ConfigChannel+0x4ee>
 8003b02:	4b65      	ldr	r3, [pc, #404]	; (8003c98 <HAL_ADC_ConfigChannel+0x680>)
 8003b04:	e000      	b.n	8003b08 <HAL_ADC_ConfigChannel+0x4f0>
 8003b06:	4b65      	ldr	r3, [pc, #404]	; (8003c9c <HAL_ADC_ConfigChannel+0x684>)
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f7ff fa7d 	bl	8003008 <LL_ADC_GetCommonPathInternalCh>
 8003b0e:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a5e      	ldr	r2, [pc, #376]	; (8003c90 <HAL_ADC_ConfigChannel+0x678>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d004      	beq.n	8003b24 <HAL_ADC_ConfigChannel+0x50c>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a5d      	ldr	r2, [pc, #372]	; (8003c94 <HAL_ADC_ConfigChannel+0x67c>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d10e      	bne.n	8003b42 <HAL_ADC_ConfigChannel+0x52a>
 8003b24:	485a      	ldr	r0, [pc, #360]	; (8003c90 <HAL_ADC_ConfigChannel+0x678>)
 8003b26:	f7ff fb9b 	bl	8003260 <LL_ADC_IsEnabled>
 8003b2a:	4604      	mov	r4, r0
 8003b2c:	4859      	ldr	r0, [pc, #356]	; (8003c94 <HAL_ADC_ConfigChannel+0x67c>)
 8003b2e:	f7ff fb97 	bl	8003260 <LL_ADC_IsEnabled>
 8003b32:	4603      	mov	r3, r0
 8003b34:	4323      	orrs	r3, r4
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	bf0c      	ite	eq
 8003b3a:	2301      	moveq	r3, #1
 8003b3c:	2300      	movne	r3, #0
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	e008      	b.n	8003b54 <HAL_ADC_ConfigChannel+0x53c>
 8003b42:	4857      	ldr	r0, [pc, #348]	; (8003ca0 <HAL_ADC_ConfigChannel+0x688>)
 8003b44:	f7ff fb8c 	bl	8003260 <LL_ADC_IsEnabled>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	bf0c      	ite	eq
 8003b4e:	2301      	moveq	r3, #1
 8003b50:	2300      	movne	r3, #0
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d07d      	beq.n	8003c54 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a51      	ldr	r2, [pc, #324]	; (8003ca4 <HAL_ADC_ConfigChannel+0x68c>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d130      	bne.n	8003bc4 <HAL_ADC_ConfigChannel+0x5ac>
 8003b62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d12b      	bne.n	8003bc4 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a4b      	ldr	r2, [pc, #300]	; (8003ca0 <HAL_ADC_ConfigChannel+0x688>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	f040 8081 	bne.w	8003c7a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a44      	ldr	r2, [pc, #272]	; (8003c90 <HAL_ADC_ConfigChannel+0x678>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d004      	beq.n	8003b8c <HAL_ADC_ConfigChannel+0x574>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a43      	ldr	r2, [pc, #268]	; (8003c94 <HAL_ADC_ConfigChannel+0x67c>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d101      	bne.n	8003b90 <HAL_ADC_ConfigChannel+0x578>
 8003b8c:	4a42      	ldr	r2, [pc, #264]	; (8003c98 <HAL_ADC_ConfigChannel+0x680>)
 8003b8e:	e000      	b.n	8003b92 <HAL_ADC_ConfigChannel+0x57a>
 8003b90:	4a42      	ldr	r2, [pc, #264]	; (8003c9c <HAL_ADC_ConfigChannel+0x684>)
 8003b92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b94:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b98:	4619      	mov	r1, r3
 8003b9a:	4610      	mov	r0, r2
 8003b9c:	f7ff fa21 	bl	8002fe2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ba0:	4b41      	ldr	r3, [pc, #260]	; (8003ca8 <HAL_ADC_ConfigChannel+0x690>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	099b      	lsrs	r3, r3, #6
 8003ba6:	4a41      	ldr	r2, [pc, #260]	; (8003cac <HAL_ADC_ConfigChannel+0x694>)
 8003ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bac:	099b      	lsrs	r3, r3, #6
 8003bae:	3301      	adds	r3, #1
 8003bb0:	005b      	lsls	r3, r3, #1
 8003bb2:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003bb4:	e002      	b.n	8003bbc <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	3b01      	subs	r3, #1
 8003bba:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d1f9      	bne.n	8003bb6 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003bc2:	e05a      	b.n	8003c7a <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a39      	ldr	r2, [pc, #228]	; (8003cb0 <HAL_ADC_ConfigChannel+0x698>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d11e      	bne.n	8003c0c <HAL_ADC_ConfigChannel+0x5f4>
 8003bce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d119      	bne.n	8003c0c <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a30      	ldr	r2, [pc, #192]	; (8003ca0 <HAL_ADC_ConfigChannel+0x688>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d14b      	bne.n	8003c7a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a2a      	ldr	r2, [pc, #168]	; (8003c90 <HAL_ADC_ConfigChannel+0x678>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d004      	beq.n	8003bf6 <HAL_ADC_ConfigChannel+0x5de>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a28      	ldr	r2, [pc, #160]	; (8003c94 <HAL_ADC_ConfigChannel+0x67c>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d101      	bne.n	8003bfa <HAL_ADC_ConfigChannel+0x5e2>
 8003bf6:	4a28      	ldr	r2, [pc, #160]	; (8003c98 <HAL_ADC_ConfigChannel+0x680>)
 8003bf8:	e000      	b.n	8003bfc <HAL_ADC_ConfigChannel+0x5e4>
 8003bfa:	4a28      	ldr	r2, [pc, #160]	; (8003c9c <HAL_ADC_ConfigChannel+0x684>)
 8003bfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c02:	4619      	mov	r1, r3
 8003c04:	4610      	mov	r0, r2
 8003c06:	f7ff f9ec 	bl	8002fe2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c0a:	e036      	b.n	8003c7a <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a28      	ldr	r2, [pc, #160]	; (8003cb4 <HAL_ADC_ConfigChannel+0x69c>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d131      	bne.n	8003c7a <HAL_ADC_ConfigChannel+0x662>
 8003c16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d12c      	bne.n	8003c7a <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a1e      	ldr	r2, [pc, #120]	; (8003ca0 <HAL_ADC_ConfigChannel+0x688>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d127      	bne.n	8003c7a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a18      	ldr	r2, [pc, #96]	; (8003c90 <HAL_ADC_ConfigChannel+0x678>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d004      	beq.n	8003c3e <HAL_ADC_ConfigChannel+0x626>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a16      	ldr	r2, [pc, #88]	; (8003c94 <HAL_ADC_ConfigChannel+0x67c>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d101      	bne.n	8003c42 <HAL_ADC_ConfigChannel+0x62a>
 8003c3e:	4a16      	ldr	r2, [pc, #88]	; (8003c98 <HAL_ADC_ConfigChannel+0x680>)
 8003c40:	e000      	b.n	8003c44 <HAL_ADC_ConfigChannel+0x62c>
 8003c42:	4a16      	ldr	r2, [pc, #88]	; (8003c9c <HAL_ADC_ConfigChannel+0x684>)
 8003c44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c46:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	4610      	mov	r0, r2
 8003c4e:	f7ff f9c8 	bl	8002fe2 <LL_ADC_SetCommonPathInternalCh>
 8003c52:	e012      	b.n	8003c7a <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c58:	f043 0220 	orr.w	r2, r3, #32
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003c66:	e008      	b.n	8003c7a <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c6c:	f043 0220 	orr.w	r2, r3, #32
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003c82:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3784      	adds	r7, #132	; 0x84
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd90      	pop	{r4, r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	40022000 	.word	0x40022000
 8003c94:	40022100 	.word	0x40022100
 8003c98:	40022300 	.word	0x40022300
 8003c9c:	58026300 	.word	0x58026300
 8003ca0:	58026000 	.word	0x58026000
 8003ca4:	cb840000 	.word	0xcb840000
 8003ca8:	24000024 	.word	0x24000024
 8003cac:	053e2d63 	.word	0x053e2d63
 8003cb0:	c7520000 	.word	0xc7520000
 8003cb4:	cfb80000 	.word	0xcfb80000

08003cb8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a7a      	ldr	r2, [pc, #488]	; (8003eb0 <ADC_ConfigureBoostMode+0x1f8>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d004      	beq.n	8003cd4 <ADC_ConfigureBoostMode+0x1c>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a79      	ldr	r2, [pc, #484]	; (8003eb4 <ADC_ConfigureBoostMode+0x1fc>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d109      	bne.n	8003ce8 <ADC_ConfigureBoostMode+0x30>
 8003cd4:	4b78      	ldr	r3, [pc, #480]	; (8003eb8 <ADC_ConfigureBoostMode+0x200>)
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	bf14      	ite	ne
 8003ce0:	2301      	movne	r3, #1
 8003ce2:	2300      	moveq	r3, #0
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	e008      	b.n	8003cfa <ADC_ConfigureBoostMode+0x42>
 8003ce8:	4b74      	ldr	r3, [pc, #464]	; (8003ebc <ADC_ConfigureBoostMode+0x204>)
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	bf14      	ite	ne
 8003cf4:	2301      	movne	r3, #1
 8003cf6:	2300      	moveq	r3, #0
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d01c      	beq.n	8003d38 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003cfe:	f003 fd75 	bl	80077ec <HAL_RCC_GetHCLKFreq>
 8003d02:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d0c:	d010      	beq.n	8003d30 <ADC_ConfigureBoostMode+0x78>
 8003d0e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d12:	d873      	bhi.n	8003dfc <ADC_ConfigureBoostMode+0x144>
 8003d14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d18:	d002      	beq.n	8003d20 <ADC_ConfigureBoostMode+0x68>
 8003d1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d1e:	d16d      	bne.n	8003dfc <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	0c1b      	lsrs	r3, r3, #16
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d2c:	60fb      	str	r3, [r7, #12]
        break;
 8003d2e:	e068      	b.n	8003e02 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	089b      	lsrs	r3, r3, #2
 8003d34:	60fb      	str	r3, [r7, #12]
        break;
 8003d36:	e064      	b.n	8003e02 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003d38:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003d3c:	f04f 0100 	mov.w	r1, #0
 8003d40:	f004 ffba 	bl	8008cb8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003d44:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003d4e:	d051      	beq.n	8003df4 <ADC_ConfigureBoostMode+0x13c>
 8003d50:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003d54:	d854      	bhi.n	8003e00 <ADC_ConfigureBoostMode+0x148>
 8003d56:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003d5a:	d047      	beq.n	8003dec <ADC_ConfigureBoostMode+0x134>
 8003d5c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003d60:	d84e      	bhi.n	8003e00 <ADC_ConfigureBoostMode+0x148>
 8003d62:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003d66:	d03d      	beq.n	8003de4 <ADC_ConfigureBoostMode+0x12c>
 8003d68:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003d6c:	d848      	bhi.n	8003e00 <ADC_ConfigureBoostMode+0x148>
 8003d6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d72:	d033      	beq.n	8003ddc <ADC_ConfigureBoostMode+0x124>
 8003d74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d78:	d842      	bhi.n	8003e00 <ADC_ConfigureBoostMode+0x148>
 8003d7a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003d7e:	d029      	beq.n	8003dd4 <ADC_ConfigureBoostMode+0x11c>
 8003d80:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003d84:	d83c      	bhi.n	8003e00 <ADC_ConfigureBoostMode+0x148>
 8003d86:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003d8a:	d01a      	beq.n	8003dc2 <ADC_ConfigureBoostMode+0x10a>
 8003d8c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003d90:	d836      	bhi.n	8003e00 <ADC_ConfigureBoostMode+0x148>
 8003d92:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003d96:	d014      	beq.n	8003dc2 <ADC_ConfigureBoostMode+0x10a>
 8003d98:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003d9c:	d830      	bhi.n	8003e00 <ADC_ConfigureBoostMode+0x148>
 8003d9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003da2:	d00e      	beq.n	8003dc2 <ADC_ConfigureBoostMode+0x10a>
 8003da4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003da8:	d82a      	bhi.n	8003e00 <ADC_ConfigureBoostMode+0x148>
 8003daa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003dae:	d008      	beq.n	8003dc2 <ADC_ConfigureBoostMode+0x10a>
 8003db0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003db4:	d824      	bhi.n	8003e00 <ADC_ConfigureBoostMode+0x148>
 8003db6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003dba:	d002      	beq.n	8003dc2 <ADC_ConfigureBoostMode+0x10a>
 8003dbc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003dc0:	d11e      	bne.n	8003e00 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	0c9b      	lsrs	r3, r3, #18
 8003dc8:	005b      	lsls	r3, r3, #1
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd0:	60fb      	str	r3, [r7, #12]
        break;
 8003dd2:	e016      	b.n	8003e02 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	091b      	lsrs	r3, r3, #4
 8003dd8:	60fb      	str	r3, [r7, #12]
        break;
 8003dda:	e012      	b.n	8003e02 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	095b      	lsrs	r3, r3, #5
 8003de0:	60fb      	str	r3, [r7, #12]
        break;
 8003de2:	e00e      	b.n	8003e02 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	099b      	lsrs	r3, r3, #6
 8003de8:	60fb      	str	r3, [r7, #12]
        break;
 8003dea:	e00a      	b.n	8003e02 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	09db      	lsrs	r3, r3, #7
 8003df0:	60fb      	str	r3, [r7, #12]
        break;
 8003df2:	e006      	b.n	8003e02 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	0a1b      	lsrs	r3, r3, #8
 8003df8:	60fb      	str	r3, [r7, #12]
        break;
 8003dfa:	e002      	b.n	8003e02 <ADC_ConfigureBoostMode+0x14a>
        break;
 8003dfc:	bf00      	nop
 8003dfe:	e000      	b.n	8003e02 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003e00:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003e02:	f7ff f8a5 	bl	8002f50 <HAL_GetREVID>
 8003e06:	4603      	mov	r3, r0
 8003e08:	f241 0203 	movw	r2, #4099	; 0x1003
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d815      	bhi.n	8003e3c <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	4a2b      	ldr	r2, [pc, #172]	; (8003ec0 <ADC_ConfigureBoostMode+0x208>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d908      	bls.n	8003e2a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	689a      	ldr	r2, [r3, #8]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e26:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003e28:	e03e      	b.n	8003ea8 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	689a      	ldr	r2, [r3, #8]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e38:	609a      	str	r2, [r3, #8]
}
 8003e3a:	e035      	b.n	8003ea8 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	085b      	lsrs	r3, r3, #1
 8003e40:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	4a1f      	ldr	r2, [pc, #124]	; (8003ec4 <ADC_ConfigureBoostMode+0x20c>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d808      	bhi.n	8003e5c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	689a      	ldr	r2, [r3, #8]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003e58:	609a      	str	r2, [r3, #8]
}
 8003e5a:	e025      	b.n	8003ea8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	4a1a      	ldr	r2, [pc, #104]	; (8003ec8 <ADC_ConfigureBoostMode+0x210>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d80a      	bhi.n	8003e7a <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e76:	609a      	str	r2, [r3, #8]
}
 8003e78:	e016      	b.n	8003ea8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	4a13      	ldr	r2, [pc, #76]	; (8003ecc <ADC_ConfigureBoostMode+0x214>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d80a      	bhi.n	8003e98 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e94:	609a      	str	r2, [r3, #8]
}
 8003e96:	e007      	b.n	8003ea8 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	689a      	ldr	r2, [r3, #8]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003ea6:	609a      	str	r2, [r3, #8]
}
 8003ea8:	bf00      	nop
 8003eaa:	3710      	adds	r7, #16
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	40022000 	.word	0x40022000
 8003eb4:	40022100 	.word	0x40022100
 8003eb8:	40022300 	.word	0x40022300
 8003ebc:	58026300 	.word	0x58026300
 8003ec0:	01312d00 	.word	0x01312d00
 8003ec4:	005f5e10 	.word	0x005f5e10
 8003ec8:	00bebc20 	.word	0x00bebc20
 8003ecc:	017d7840 	.word	0x017d7840

08003ed0 <LL_ADC_IsEnabled>:
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f003 0301 	and.w	r3, r3, #1
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d101      	bne.n	8003ee8 <LL_ADC_IsEnabled+0x18>
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e000      	b.n	8003eea <LL_ADC_IsEnabled+0x1a>
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	370c      	adds	r7, #12
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr

08003ef6 <LL_ADC_REG_IsConversionOngoing>:
{
 8003ef6:	b480      	push	{r7}
 8003ef8:	b083      	sub	sp, #12
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	f003 0304 	and.w	r3, r3, #4
 8003f06:	2b04      	cmp	r3, #4
 8003f08:	d101      	bne.n	8003f0e <LL_ADC_REG_IsConversionOngoing+0x18>
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e000      	b.n	8003f10 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003f1c:	b590      	push	{r4, r7, lr}
 8003f1e:	b09f      	sub	sp, #124	; 0x7c
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f26:	2300      	movs	r3, #0
 8003f28:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d101      	bne.n	8003f3a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003f36:	2302      	movs	r3, #2
 8003f38:	e0be      	b.n	80040b8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003f42:	2300      	movs	r3, #0
 8003f44:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003f46:	2300      	movs	r3, #0
 8003f48:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a5c      	ldr	r2, [pc, #368]	; (80040c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d102      	bne.n	8003f5a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003f54:	4b5b      	ldr	r3, [pc, #364]	; (80040c4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003f56:	60bb      	str	r3, [r7, #8]
 8003f58:	e001      	b.n	8003f5e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d10b      	bne.n	8003f7c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f68:	f043 0220 	orr.w	r2, r3, #32
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e09d      	b.n	80040b8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f7ff ffb9 	bl	8003ef6 <LL_ADC_REG_IsConversionOngoing>
 8003f84:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f7ff ffb3 	bl	8003ef6 <LL_ADC_REG_IsConversionOngoing>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d17f      	bne.n	8004096 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003f96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d17c      	bne.n	8004096 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a47      	ldr	r2, [pc, #284]	; (80040c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d004      	beq.n	8003fb0 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a46      	ldr	r2, [pc, #280]	; (80040c4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d101      	bne.n	8003fb4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003fb0:	4b45      	ldr	r3, [pc, #276]	; (80040c8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003fb2:	e000      	b.n	8003fb6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003fb4:	4b45      	ldr	r3, [pc, #276]	; (80040cc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003fb6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d039      	beq.n	8004034 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003fc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	431a      	orrs	r2, r3
 8003fce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fd0:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a3a      	ldr	r2, [pc, #232]	; (80040c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d004      	beq.n	8003fe6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a38      	ldr	r2, [pc, #224]	; (80040c4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d10e      	bne.n	8004004 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003fe6:	4836      	ldr	r0, [pc, #216]	; (80040c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003fe8:	f7ff ff72 	bl	8003ed0 <LL_ADC_IsEnabled>
 8003fec:	4604      	mov	r4, r0
 8003fee:	4835      	ldr	r0, [pc, #212]	; (80040c4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003ff0:	f7ff ff6e 	bl	8003ed0 <LL_ADC_IsEnabled>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	4323      	orrs	r3, r4
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	bf0c      	ite	eq
 8003ffc:	2301      	moveq	r3, #1
 8003ffe:	2300      	movne	r3, #0
 8004000:	b2db      	uxtb	r3, r3
 8004002:	e008      	b.n	8004016 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8004004:	4832      	ldr	r0, [pc, #200]	; (80040d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004006:	f7ff ff63 	bl	8003ed0 <LL_ADC_IsEnabled>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	bf0c      	ite	eq
 8004010:	2301      	moveq	r3, #1
 8004012:	2300      	movne	r3, #0
 8004014:	b2db      	uxtb	r3, r3
 8004016:	2b00      	cmp	r3, #0
 8004018:	d047      	beq.n	80040aa <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800401a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800401c:	689a      	ldr	r2, [r3, #8]
 800401e:	4b2d      	ldr	r3, [pc, #180]	; (80040d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004020:	4013      	ands	r3, r2
 8004022:	683a      	ldr	r2, [r7, #0]
 8004024:	6811      	ldr	r1, [r2, #0]
 8004026:	683a      	ldr	r2, [r7, #0]
 8004028:	6892      	ldr	r2, [r2, #8]
 800402a:	430a      	orrs	r2, r1
 800402c:	431a      	orrs	r2, r3
 800402e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004030:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004032:	e03a      	b.n	80040aa <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004034:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800403c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800403e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a1e      	ldr	r2, [pc, #120]	; (80040c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d004      	beq.n	8004054 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a1d      	ldr	r2, [pc, #116]	; (80040c4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d10e      	bne.n	8004072 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004054:	481a      	ldr	r0, [pc, #104]	; (80040c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004056:	f7ff ff3b 	bl	8003ed0 <LL_ADC_IsEnabled>
 800405a:	4604      	mov	r4, r0
 800405c:	4819      	ldr	r0, [pc, #100]	; (80040c4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800405e:	f7ff ff37 	bl	8003ed0 <LL_ADC_IsEnabled>
 8004062:	4603      	mov	r3, r0
 8004064:	4323      	orrs	r3, r4
 8004066:	2b00      	cmp	r3, #0
 8004068:	bf0c      	ite	eq
 800406a:	2301      	moveq	r3, #1
 800406c:	2300      	movne	r3, #0
 800406e:	b2db      	uxtb	r3, r3
 8004070:	e008      	b.n	8004084 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004072:	4817      	ldr	r0, [pc, #92]	; (80040d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004074:	f7ff ff2c 	bl	8003ed0 <LL_ADC_IsEnabled>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	bf0c      	ite	eq
 800407e:	2301      	moveq	r3, #1
 8004080:	2300      	movne	r3, #0
 8004082:	b2db      	uxtb	r3, r3
 8004084:	2b00      	cmp	r3, #0
 8004086:	d010      	beq.n	80040aa <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004088:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800408a:	689a      	ldr	r2, [r3, #8]
 800408c:	4b11      	ldr	r3, [pc, #68]	; (80040d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800408e:	4013      	ands	r3, r2
 8004090:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004092:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004094:	e009      	b.n	80040aa <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800409a:	f043 0220 	orr.w	r2, r3, #32
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80040a8:	e000      	b.n	80040ac <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80040aa:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80040b4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	377c      	adds	r7, #124	; 0x7c
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd90      	pop	{r4, r7, pc}
 80040c0:	40022000 	.word	0x40022000
 80040c4:	40022100 	.word	0x40022100
 80040c8:	40022300 	.word	0x40022300
 80040cc:	58026300 	.word	0x58026300
 80040d0:	58026000 	.word	0x58026000
 80040d4:	fffff0e0 	.word	0xfffff0e0

080040d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040d8:	b480      	push	{r7}
 80040da:	b085      	sub	sp, #20
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f003 0307 	and.w	r3, r3, #7
 80040e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040e8:	4b0b      	ldr	r3, [pc, #44]	; (8004118 <__NVIC_SetPriorityGrouping+0x40>)
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040ee:	68ba      	ldr	r2, [r7, #8]
 80040f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80040f4:	4013      	ands	r3, r2
 80040f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004100:	4b06      	ldr	r3, [pc, #24]	; (800411c <__NVIC_SetPriorityGrouping+0x44>)
 8004102:	4313      	orrs	r3, r2
 8004104:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004106:	4a04      	ldr	r2, [pc, #16]	; (8004118 <__NVIC_SetPriorityGrouping+0x40>)
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	60d3      	str	r3, [r2, #12]
}
 800410c:	bf00      	nop
 800410e:	3714      	adds	r7, #20
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr
 8004118:	e000ed00 	.word	0xe000ed00
 800411c:	05fa0000 	.word	0x05fa0000

08004120 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004120:	b480      	push	{r7}
 8004122:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004124:	4b04      	ldr	r3, [pc, #16]	; (8004138 <__NVIC_GetPriorityGrouping+0x18>)
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	0a1b      	lsrs	r3, r3, #8
 800412a:	f003 0307 	and.w	r3, r3, #7
}
 800412e:	4618      	mov	r0, r3
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr
 8004138:	e000ed00 	.word	0xe000ed00

0800413c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	4603      	mov	r3, r0
 8004144:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004146:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800414a:	2b00      	cmp	r3, #0
 800414c:	db0b      	blt.n	8004166 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800414e:	88fb      	ldrh	r3, [r7, #6]
 8004150:	f003 021f 	and.w	r2, r3, #31
 8004154:	4907      	ldr	r1, [pc, #28]	; (8004174 <__NVIC_EnableIRQ+0x38>)
 8004156:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800415a:	095b      	lsrs	r3, r3, #5
 800415c:	2001      	movs	r0, #1
 800415e:	fa00 f202 	lsl.w	r2, r0, r2
 8004162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004166:	bf00      	nop
 8004168:	370c      	adds	r7, #12
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	e000e100 	.word	0xe000e100

08004178 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	4603      	mov	r3, r0
 8004180:	6039      	str	r1, [r7, #0]
 8004182:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004184:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004188:	2b00      	cmp	r3, #0
 800418a:	db0a      	blt.n	80041a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	b2da      	uxtb	r2, r3
 8004190:	490c      	ldr	r1, [pc, #48]	; (80041c4 <__NVIC_SetPriority+0x4c>)
 8004192:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004196:	0112      	lsls	r2, r2, #4
 8004198:	b2d2      	uxtb	r2, r2
 800419a:	440b      	add	r3, r1
 800419c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80041a0:	e00a      	b.n	80041b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	b2da      	uxtb	r2, r3
 80041a6:	4908      	ldr	r1, [pc, #32]	; (80041c8 <__NVIC_SetPriority+0x50>)
 80041a8:	88fb      	ldrh	r3, [r7, #6]
 80041aa:	f003 030f 	and.w	r3, r3, #15
 80041ae:	3b04      	subs	r3, #4
 80041b0:	0112      	lsls	r2, r2, #4
 80041b2:	b2d2      	uxtb	r2, r2
 80041b4:	440b      	add	r3, r1
 80041b6:	761a      	strb	r2, [r3, #24]
}
 80041b8:	bf00      	nop
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr
 80041c4:	e000e100 	.word	0xe000e100
 80041c8:	e000ed00 	.word	0xe000ed00

080041cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b089      	sub	sp, #36	; 0x24
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f003 0307 	and.w	r3, r3, #7
 80041de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	f1c3 0307 	rsb	r3, r3, #7
 80041e6:	2b04      	cmp	r3, #4
 80041e8:	bf28      	it	cs
 80041ea:	2304      	movcs	r3, #4
 80041ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	3304      	adds	r3, #4
 80041f2:	2b06      	cmp	r3, #6
 80041f4:	d902      	bls.n	80041fc <NVIC_EncodePriority+0x30>
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	3b03      	subs	r3, #3
 80041fa:	e000      	b.n	80041fe <NVIC_EncodePriority+0x32>
 80041fc:	2300      	movs	r3, #0
 80041fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004200:	f04f 32ff 	mov.w	r2, #4294967295
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	fa02 f303 	lsl.w	r3, r2, r3
 800420a:	43da      	mvns	r2, r3
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	401a      	ands	r2, r3
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004214:	f04f 31ff 	mov.w	r1, #4294967295
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	fa01 f303 	lsl.w	r3, r1, r3
 800421e:	43d9      	mvns	r1, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004224:	4313      	orrs	r3, r2
         );
}
 8004226:	4618      	mov	r0, r3
 8004228:	3724      	adds	r7, #36	; 0x24
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr
	...

08004234 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	3b01      	subs	r3, #1
 8004240:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004244:	d301      	bcc.n	800424a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004246:	2301      	movs	r3, #1
 8004248:	e00f      	b.n	800426a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800424a:	4a0a      	ldr	r2, [pc, #40]	; (8004274 <SysTick_Config+0x40>)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	3b01      	subs	r3, #1
 8004250:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004252:	210f      	movs	r1, #15
 8004254:	f04f 30ff 	mov.w	r0, #4294967295
 8004258:	f7ff ff8e 	bl	8004178 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800425c:	4b05      	ldr	r3, [pc, #20]	; (8004274 <SysTick_Config+0x40>)
 800425e:	2200      	movs	r2, #0
 8004260:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004262:	4b04      	ldr	r3, [pc, #16]	; (8004274 <SysTick_Config+0x40>)
 8004264:	2207      	movs	r2, #7
 8004266:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	3708      	adds	r7, #8
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	e000e010 	.word	0xe000e010

08004278 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f7ff ff29 	bl	80040d8 <__NVIC_SetPriorityGrouping>
}
 8004286:	bf00      	nop
 8004288:	3708      	adds	r7, #8
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}

0800428e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800428e:	b580      	push	{r7, lr}
 8004290:	b086      	sub	sp, #24
 8004292:	af00      	add	r7, sp, #0
 8004294:	4603      	mov	r3, r0
 8004296:	60b9      	str	r1, [r7, #8]
 8004298:	607a      	str	r2, [r7, #4]
 800429a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800429c:	f7ff ff40 	bl	8004120 <__NVIC_GetPriorityGrouping>
 80042a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	68b9      	ldr	r1, [r7, #8]
 80042a6:	6978      	ldr	r0, [r7, #20]
 80042a8:	f7ff ff90 	bl	80041cc <NVIC_EncodePriority>
 80042ac:	4602      	mov	r2, r0
 80042ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80042b2:	4611      	mov	r1, r2
 80042b4:	4618      	mov	r0, r3
 80042b6:	f7ff ff5f 	bl	8004178 <__NVIC_SetPriority>
}
 80042ba:	bf00      	nop
 80042bc:	3718      	adds	r7, #24
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b082      	sub	sp, #8
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	4603      	mov	r3, r0
 80042ca:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042d0:	4618      	mov	r0, r3
 80042d2:	f7ff ff33 	bl	800413c <__NVIC_EnableIRQ>
}
 80042d6:	bf00      	nop
 80042d8:	3708      	adds	r7, #8
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}

080042de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80042de:	b580      	push	{r7, lr}
 80042e0:	b082      	sub	sp, #8
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f7ff ffa4 	bl	8004234 <SysTick_Config>
 80042ec:	4603      	mov	r3, r0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3708      	adds	r7, #8
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
	...

080042f8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b086      	sub	sp, #24
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004300:	f7fe fdf6 	bl	8002ef0 <HAL_GetTick>
 8004304:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d101      	bne.n	8004310 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e2dc      	b.n	80048ca <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004316:	b2db      	uxtb	r3, r3
 8004318:	2b02      	cmp	r3, #2
 800431a:	d008      	beq.n	800432e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2280      	movs	r2, #128	; 0x80
 8004320:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e2cd      	b.n	80048ca <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a76      	ldr	r2, [pc, #472]	; (800450c <HAL_DMA_Abort+0x214>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d04a      	beq.n	80043ce <HAL_DMA_Abort+0xd6>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a74      	ldr	r2, [pc, #464]	; (8004510 <HAL_DMA_Abort+0x218>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d045      	beq.n	80043ce <HAL_DMA_Abort+0xd6>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a73      	ldr	r2, [pc, #460]	; (8004514 <HAL_DMA_Abort+0x21c>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d040      	beq.n	80043ce <HAL_DMA_Abort+0xd6>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a71      	ldr	r2, [pc, #452]	; (8004518 <HAL_DMA_Abort+0x220>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d03b      	beq.n	80043ce <HAL_DMA_Abort+0xd6>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a70      	ldr	r2, [pc, #448]	; (800451c <HAL_DMA_Abort+0x224>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d036      	beq.n	80043ce <HAL_DMA_Abort+0xd6>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a6e      	ldr	r2, [pc, #440]	; (8004520 <HAL_DMA_Abort+0x228>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d031      	beq.n	80043ce <HAL_DMA_Abort+0xd6>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a6d      	ldr	r2, [pc, #436]	; (8004524 <HAL_DMA_Abort+0x22c>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d02c      	beq.n	80043ce <HAL_DMA_Abort+0xd6>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a6b      	ldr	r2, [pc, #428]	; (8004528 <HAL_DMA_Abort+0x230>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d027      	beq.n	80043ce <HAL_DMA_Abort+0xd6>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a6a      	ldr	r2, [pc, #424]	; (800452c <HAL_DMA_Abort+0x234>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d022      	beq.n	80043ce <HAL_DMA_Abort+0xd6>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a68      	ldr	r2, [pc, #416]	; (8004530 <HAL_DMA_Abort+0x238>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d01d      	beq.n	80043ce <HAL_DMA_Abort+0xd6>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a67      	ldr	r2, [pc, #412]	; (8004534 <HAL_DMA_Abort+0x23c>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d018      	beq.n	80043ce <HAL_DMA_Abort+0xd6>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a65      	ldr	r2, [pc, #404]	; (8004538 <HAL_DMA_Abort+0x240>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d013      	beq.n	80043ce <HAL_DMA_Abort+0xd6>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a64      	ldr	r2, [pc, #400]	; (800453c <HAL_DMA_Abort+0x244>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d00e      	beq.n	80043ce <HAL_DMA_Abort+0xd6>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a62      	ldr	r2, [pc, #392]	; (8004540 <HAL_DMA_Abort+0x248>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d009      	beq.n	80043ce <HAL_DMA_Abort+0xd6>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a61      	ldr	r2, [pc, #388]	; (8004544 <HAL_DMA_Abort+0x24c>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d004      	beq.n	80043ce <HAL_DMA_Abort+0xd6>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a5f      	ldr	r2, [pc, #380]	; (8004548 <HAL_DMA_Abort+0x250>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d101      	bne.n	80043d2 <HAL_DMA_Abort+0xda>
 80043ce:	2301      	movs	r3, #1
 80043d0:	e000      	b.n	80043d4 <HAL_DMA_Abort+0xdc>
 80043d2:	2300      	movs	r3, #0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d013      	beq.n	8004400 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f022 021e 	bic.w	r2, r2, #30
 80043e6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	695a      	ldr	r2, [r3, #20]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043f6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	617b      	str	r3, [r7, #20]
 80043fe:	e00a      	b.n	8004416 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f022 020e 	bic.w	r2, r2, #14
 800440e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a3c      	ldr	r2, [pc, #240]	; (800450c <HAL_DMA_Abort+0x214>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d072      	beq.n	8004506 <HAL_DMA_Abort+0x20e>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a3a      	ldr	r2, [pc, #232]	; (8004510 <HAL_DMA_Abort+0x218>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d06d      	beq.n	8004506 <HAL_DMA_Abort+0x20e>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a39      	ldr	r2, [pc, #228]	; (8004514 <HAL_DMA_Abort+0x21c>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d068      	beq.n	8004506 <HAL_DMA_Abort+0x20e>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a37      	ldr	r2, [pc, #220]	; (8004518 <HAL_DMA_Abort+0x220>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d063      	beq.n	8004506 <HAL_DMA_Abort+0x20e>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a36      	ldr	r2, [pc, #216]	; (800451c <HAL_DMA_Abort+0x224>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d05e      	beq.n	8004506 <HAL_DMA_Abort+0x20e>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a34      	ldr	r2, [pc, #208]	; (8004520 <HAL_DMA_Abort+0x228>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d059      	beq.n	8004506 <HAL_DMA_Abort+0x20e>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a33      	ldr	r2, [pc, #204]	; (8004524 <HAL_DMA_Abort+0x22c>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d054      	beq.n	8004506 <HAL_DMA_Abort+0x20e>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a31      	ldr	r2, [pc, #196]	; (8004528 <HAL_DMA_Abort+0x230>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d04f      	beq.n	8004506 <HAL_DMA_Abort+0x20e>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a30      	ldr	r2, [pc, #192]	; (800452c <HAL_DMA_Abort+0x234>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d04a      	beq.n	8004506 <HAL_DMA_Abort+0x20e>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a2e      	ldr	r2, [pc, #184]	; (8004530 <HAL_DMA_Abort+0x238>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d045      	beq.n	8004506 <HAL_DMA_Abort+0x20e>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a2d      	ldr	r2, [pc, #180]	; (8004534 <HAL_DMA_Abort+0x23c>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d040      	beq.n	8004506 <HAL_DMA_Abort+0x20e>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a2b      	ldr	r2, [pc, #172]	; (8004538 <HAL_DMA_Abort+0x240>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d03b      	beq.n	8004506 <HAL_DMA_Abort+0x20e>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a2a      	ldr	r2, [pc, #168]	; (800453c <HAL_DMA_Abort+0x244>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d036      	beq.n	8004506 <HAL_DMA_Abort+0x20e>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a28      	ldr	r2, [pc, #160]	; (8004540 <HAL_DMA_Abort+0x248>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d031      	beq.n	8004506 <HAL_DMA_Abort+0x20e>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a27      	ldr	r2, [pc, #156]	; (8004544 <HAL_DMA_Abort+0x24c>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d02c      	beq.n	8004506 <HAL_DMA_Abort+0x20e>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a25      	ldr	r2, [pc, #148]	; (8004548 <HAL_DMA_Abort+0x250>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d027      	beq.n	8004506 <HAL_DMA_Abort+0x20e>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a24      	ldr	r2, [pc, #144]	; (800454c <HAL_DMA_Abort+0x254>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d022      	beq.n	8004506 <HAL_DMA_Abort+0x20e>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a22      	ldr	r2, [pc, #136]	; (8004550 <HAL_DMA_Abort+0x258>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d01d      	beq.n	8004506 <HAL_DMA_Abort+0x20e>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a21      	ldr	r2, [pc, #132]	; (8004554 <HAL_DMA_Abort+0x25c>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d018      	beq.n	8004506 <HAL_DMA_Abort+0x20e>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a1f      	ldr	r2, [pc, #124]	; (8004558 <HAL_DMA_Abort+0x260>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d013      	beq.n	8004506 <HAL_DMA_Abort+0x20e>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a1e      	ldr	r2, [pc, #120]	; (800455c <HAL_DMA_Abort+0x264>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d00e      	beq.n	8004506 <HAL_DMA_Abort+0x20e>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a1c      	ldr	r2, [pc, #112]	; (8004560 <HAL_DMA_Abort+0x268>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d009      	beq.n	8004506 <HAL_DMA_Abort+0x20e>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a1b      	ldr	r2, [pc, #108]	; (8004564 <HAL_DMA_Abort+0x26c>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d004      	beq.n	8004506 <HAL_DMA_Abort+0x20e>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a19      	ldr	r2, [pc, #100]	; (8004568 <HAL_DMA_Abort+0x270>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d132      	bne.n	800456c <HAL_DMA_Abort+0x274>
 8004506:	2301      	movs	r3, #1
 8004508:	e031      	b.n	800456e <HAL_DMA_Abort+0x276>
 800450a:	bf00      	nop
 800450c:	40020010 	.word	0x40020010
 8004510:	40020028 	.word	0x40020028
 8004514:	40020040 	.word	0x40020040
 8004518:	40020058 	.word	0x40020058
 800451c:	40020070 	.word	0x40020070
 8004520:	40020088 	.word	0x40020088
 8004524:	400200a0 	.word	0x400200a0
 8004528:	400200b8 	.word	0x400200b8
 800452c:	40020410 	.word	0x40020410
 8004530:	40020428 	.word	0x40020428
 8004534:	40020440 	.word	0x40020440
 8004538:	40020458 	.word	0x40020458
 800453c:	40020470 	.word	0x40020470
 8004540:	40020488 	.word	0x40020488
 8004544:	400204a0 	.word	0x400204a0
 8004548:	400204b8 	.word	0x400204b8
 800454c:	58025408 	.word	0x58025408
 8004550:	5802541c 	.word	0x5802541c
 8004554:	58025430 	.word	0x58025430
 8004558:	58025444 	.word	0x58025444
 800455c:	58025458 	.word	0x58025458
 8004560:	5802546c 	.word	0x5802546c
 8004564:	58025480 	.word	0x58025480
 8004568:	58025494 	.word	0x58025494
 800456c:	2300      	movs	r3, #0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d007      	beq.n	8004582 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800457c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004580:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a6d      	ldr	r2, [pc, #436]	; (800473c <HAL_DMA_Abort+0x444>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d04a      	beq.n	8004622 <HAL_DMA_Abort+0x32a>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a6b      	ldr	r2, [pc, #428]	; (8004740 <HAL_DMA_Abort+0x448>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d045      	beq.n	8004622 <HAL_DMA_Abort+0x32a>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a6a      	ldr	r2, [pc, #424]	; (8004744 <HAL_DMA_Abort+0x44c>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d040      	beq.n	8004622 <HAL_DMA_Abort+0x32a>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a68      	ldr	r2, [pc, #416]	; (8004748 <HAL_DMA_Abort+0x450>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d03b      	beq.n	8004622 <HAL_DMA_Abort+0x32a>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a67      	ldr	r2, [pc, #412]	; (800474c <HAL_DMA_Abort+0x454>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d036      	beq.n	8004622 <HAL_DMA_Abort+0x32a>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a65      	ldr	r2, [pc, #404]	; (8004750 <HAL_DMA_Abort+0x458>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d031      	beq.n	8004622 <HAL_DMA_Abort+0x32a>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a64      	ldr	r2, [pc, #400]	; (8004754 <HAL_DMA_Abort+0x45c>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d02c      	beq.n	8004622 <HAL_DMA_Abort+0x32a>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a62      	ldr	r2, [pc, #392]	; (8004758 <HAL_DMA_Abort+0x460>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d027      	beq.n	8004622 <HAL_DMA_Abort+0x32a>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a61      	ldr	r2, [pc, #388]	; (800475c <HAL_DMA_Abort+0x464>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d022      	beq.n	8004622 <HAL_DMA_Abort+0x32a>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a5f      	ldr	r2, [pc, #380]	; (8004760 <HAL_DMA_Abort+0x468>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d01d      	beq.n	8004622 <HAL_DMA_Abort+0x32a>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a5e      	ldr	r2, [pc, #376]	; (8004764 <HAL_DMA_Abort+0x46c>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d018      	beq.n	8004622 <HAL_DMA_Abort+0x32a>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a5c      	ldr	r2, [pc, #368]	; (8004768 <HAL_DMA_Abort+0x470>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d013      	beq.n	8004622 <HAL_DMA_Abort+0x32a>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a5b      	ldr	r2, [pc, #364]	; (800476c <HAL_DMA_Abort+0x474>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d00e      	beq.n	8004622 <HAL_DMA_Abort+0x32a>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a59      	ldr	r2, [pc, #356]	; (8004770 <HAL_DMA_Abort+0x478>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d009      	beq.n	8004622 <HAL_DMA_Abort+0x32a>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a58      	ldr	r2, [pc, #352]	; (8004774 <HAL_DMA_Abort+0x47c>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d004      	beq.n	8004622 <HAL_DMA_Abort+0x32a>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a56      	ldr	r2, [pc, #344]	; (8004778 <HAL_DMA_Abort+0x480>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d108      	bne.n	8004634 <HAL_DMA_Abort+0x33c>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f022 0201 	bic.w	r2, r2, #1
 8004630:	601a      	str	r2, [r3, #0]
 8004632:	e007      	b.n	8004644 <HAL_DMA_Abort+0x34c>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f022 0201 	bic.w	r2, r2, #1
 8004642:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004644:	e013      	b.n	800466e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004646:	f7fe fc53 	bl	8002ef0 <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	2b05      	cmp	r3, #5
 8004652:	d90c      	bls.n	800466e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2220      	movs	r2, #32
 8004658:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2203      	movs	r2, #3
 800465e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e12d      	b.n	80048ca <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0301 	and.w	r3, r3, #1
 8004676:	2b00      	cmp	r3, #0
 8004678:	d1e5      	bne.n	8004646 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a2f      	ldr	r2, [pc, #188]	; (800473c <HAL_DMA_Abort+0x444>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d04a      	beq.n	800471a <HAL_DMA_Abort+0x422>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a2d      	ldr	r2, [pc, #180]	; (8004740 <HAL_DMA_Abort+0x448>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d045      	beq.n	800471a <HAL_DMA_Abort+0x422>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a2c      	ldr	r2, [pc, #176]	; (8004744 <HAL_DMA_Abort+0x44c>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d040      	beq.n	800471a <HAL_DMA_Abort+0x422>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a2a      	ldr	r2, [pc, #168]	; (8004748 <HAL_DMA_Abort+0x450>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d03b      	beq.n	800471a <HAL_DMA_Abort+0x422>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a29      	ldr	r2, [pc, #164]	; (800474c <HAL_DMA_Abort+0x454>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d036      	beq.n	800471a <HAL_DMA_Abort+0x422>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a27      	ldr	r2, [pc, #156]	; (8004750 <HAL_DMA_Abort+0x458>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d031      	beq.n	800471a <HAL_DMA_Abort+0x422>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a26      	ldr	r2, [pc, #152]	; (8004754 <HAL_DMA_Abort+0x45c>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d02c      	beq.n	800471a <HAL_DMA_Abort+0x422>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a24      	ldr	r2, [pc, #144]	; (8004758 <HAL_DMA_Abort+0x460>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d027      	beq.n	800471a <HAL_DMA_Abort+0x422>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a23      	ldr	r2, [pc, #140]	; (800475c <HAL_DMA_Abort+0x464>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d022      	beq.n	800471a <HAL_DMA_Abort+0x422>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a21      	ldr	r2, [pc, #132]	; (8004760 <HAL_DMA_Abort+0x468>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d01d      	beq.n	800471a <HAL_DMA_Abort+0x422>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a20      	ldr	r2, [pc, #128]	; (8004764 <HAL_DMA_Abort+0x46c>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d018      	beq.n	800471a <HAL_DMA_Abort+0x422>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a1e      	ldr	r2, [pc, #120]	; (8004768 <HAL_DMA_Abort+0x470>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d013      	beq.n	800471a <HAL_DMA_Abort+0x422>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a1d      	ldr	r2, [pc, #116]	; (800476c <HAL_DMA_Abort+0x474>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d00e      	beq.n	800471a <HAL_DMA_Abort+0x422>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a1b      	ldr	r2, [pc, #108]	; (8004770 <HAL_DMA_Abort+0x478>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d009      	beq.n	800471a <HAL_DMA_Abort+0x422>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a1a      	ldr	r2, [pc, #104]	; (8004774 <HAL_DMA_Abort+0x47c>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d004      	beq.n	800471a <HAL_DMA_Abort+0x422>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a18      	ldr	r2, [pc, #96]	; (8004778 <HAL_DMA_Abort+0x480>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d101      	bne.n	800471e <HAL_DMA_Abort+0x426>
 800471a:	2301      	movs	r3, #1
 800471c:	e000      	b.n	8004720 <HAL_DMA_Abort+0x428>
 800471e:	2300      	movs	r3, #0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d02b      	beq.n	800477c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004728:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800472e:	f003 031f 	and.w	r3, r3, #31
 8004732:	223f      	movs	r2, #63	; 0x3f
 8004734:	409a      	lsls	r2, r3
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	609a      	str	r2, [r3, #8]
 800473a:	e02a      	b.n	8004792 <HAL_DMA_Abort+0x49a>
 800473c:	40020010 	.word	0x40020010
 8004740:	40020028 	.word	0x40020028
 8004744:	40020040 	.word	0x40020040
 8004748:	40020058 	.word	0x40020058
 800474c:	40020070 	.word	0x40020070
 8004750:	40020088 	.word	0x40020088
 8004754:	400200a0 	.word	0x400200a0
 8004758:	400200b8 	.word	0x400200b8
 800475c:	40020410 	.word	0x40020410
 8004760:	40020428 	.word	0x40020428
 8004764:	40020440 	.word	0x40020440
 8004768:	40020458 	.word	0x40020458
 800476c:	40020470 	.word	0x40020470
 8004770:	40020488 	.word	0x40020488
 8004774:	400204a0 	.word	0x400204a0
 8004778:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004780:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004786:	f003 031f 	and.w	r3, r3, #31
 800478a:	2201      	movs	r2, #1
 800478c:	409a      	lsls	r2, r3
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a4f      	ldr	r2, [pc, #316]	; (80048d4 <HAL_DMA_Abort+0x5dc>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d072      	beq.n	8004882 <HAL_DMA_Abort+0x58a>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a4d      	ldr	r2, [pc, #308]	; (80048d8 <HAL_DMA_Abort+0x5e0>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d06d      	beq.n	8004882 <HAL_DMA_Abort+0x58a>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a4c      	ldr	r2, [pc, #304]	; (80048dc <HAL_DMA_Abort+0x5e4>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d068      	beq.n	8004882 <HAL_DMA_Abort+0x58a>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a4a      	ldr	r2, [pc, #296]	; (80048e0 <HAL_DMA_Abort+0x5e8>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d063      	beq.n	8004882 <HAL_DMA_Abort+0x58a>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a49      	ldr	r2, [pc, #292]	; (80048e4 <HAL_DMA_Abort+0x5ec>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d05e      	beq.n	8004882 <HAL_DMA_Abort+0x58a>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a47      	ldr	r2, [pc, #284]	; (80048e8 <HAL_DMA_Abort+0x5f0>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d059      	beq.n	8004882 <HAL_DMA_Abort+0x58a>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a46      	ldr	r2, [pc, #280]	; (80048ec <HAL_DMA_Abort+0x5f4>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d054      	beq.n	8004882 <HAL_DMA_Abort+0x58a>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a44      	ldr	r2, [pc, #272]	; (80048f0 <HAL_DMA_Abort+0x5f8>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d04f      	beq.n	8004882 <HAL_DMA_Abort+0x58a>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a43      	ldr	r2, [pc, #268]	; (80048f4 <HAL_DMA_Abort+0x5fc>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d04a      	beq.n	8004882 <HAL_DMA_Abort+0x58a>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a41      	ldr	r2, [pc, #260]	; (80048f8 <HAL_DMA_Abort+0x600>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d045      	beq.n	8004882 <HAL_DMA_Abort+0x58a>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a40      	ldr	r2, [pc, #256]	; (80048fc <HAL_DMA_Abort+0x604>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d040      	beq.n	8004882 <HAL_DMA_Abort+0x58a>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a3e      	ldr	r2, [pc, #248]	; (8004900 <HAL_DMA_Abort+0x608>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d03b      	beq.n	8004882 <HAL_DMA_Abort+0x58a>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a3d      	ldr	r2, [pc, #244]	; (8004904 <HAL_DMA_Abort+0x60c>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d036      	beq.n	8004882 <HAL_DMA_Abort+0x58a>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a3b      	ldr	r2, [pc, #236]	; (8004908 <HAL_DMA_Abort+0x610>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d031      	beq.n	8004882 <HAL_DMA_Abort+0x58a>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a3a      	ldr	r2, [pc, #232]	; (800490c <HAL_DMA_Abort+0x614>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d02c      	beq.n	8004882 <HAL_DMA_Abort+0x58a>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a38      	ldr	r2, [pc, #224]	; (8004910 <HAL_DMA_Abort+0x618>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d027      	beq.n	8004882 <HAL_DMA_Abort+0x58a>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a37      	ldr	r2, [pc, #220]	; (8004914 <HAL_DMA_Abort+0x61c>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d022      	beq.n	8004882 <HAL_DMA_Abort+0x58a>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a35      	ldr	r2, [pc, #212]	; (8004918 <HAL_DMA_Abort+0x620>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d01d      	beq.n	8004882 <HAL_DMA_Abort+0x58a>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a34      	ldr	r2, [pc, #208]	; (800491c <HAL_DMA_Abort+0x624>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d018      	beq.n	8004882 <HAL_DMA_Abort+0x58a>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a32      	ldr	r2, [pc, #200]	; (8004920 <HAL_DMA_Abort+0x628>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d013      	beq.n	8004882 <HAL_DMA_Abort+0x58a>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a31      	ldr	r2, [pc, #196]	; (8004924 <HAL_DMA_Abort+0x62c>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d00e      	beq.n	8004882 <HAL_DMA_Abort+0x58a>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a2f      	ldr	r2, [pc, #188]	; (8004928 <HAL_DMA_Abort+0x630>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d009      	beq.n	8004882 <HAL_DMA_Abort+0x58a>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a2e      	ldr	r2, [pc, #184]	; (800492c <HAL_DMA_Abort+0x634>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d004      	beq.n	8004882 <HAL_DMA_Abort+0x58a>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a2c      	ldr	r2, [pc, #176]	; (8004930 <HAL_DMA_Abort+0x638>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d101      	bne.n	8004886 <HAL_DMA_Abort+0x58e>
 8004882:	2301      	movs	r3, #1
 8004884:	e000      	b.n	8004888 <HAL_DMA_Abort+0x590>
 8004886:	2300      	movs	r3, #0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d015      	beq.n	80048b8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004894:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800489a:	2b00      	cmp	r3, #0
 800489c:	d00c      	beq.n	80048b8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048ac:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80048b6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80048c8:	2300      	movs	r3, #0
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3718      	adds	r7, #24
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	40020010 	.word	0x40020010
 80048d8:	40020028 	.word	0x40020028
 80048dc:	40020040 	.word	0x40020040
 80048e0:	40020058 	.word	0x40020058
 80048e4:	40020070 	.word	0x40020070
 80048e8:	40020088 	.word	0x40020088
 80048ec:	400200a0 	.word	0x400200a0
 80048f0:	400200b8 	.word	0x400200b8
 80048f4:	40020410 	.word	0x40020410
 80048f8:	40020428 	.word	0x40020428
 80048fc:	40020440 	.word	0x40020440
 8004900:	40020458 	.word	0x40020458
 8004904:	40020470 	.word	0x40020470
 8004908:	40020488 	.word	0x40020488
 800490c:	400204a0 	.word	0x400204a0
 8004910:	400204b8 	.word	0x400204b8
 8004914:	58025408 	.word	0x58025408
 8004918:	5802541c 	.word	0x5802541c
 800491c:	58025430 	.word	0x58025430
 8004920:	58025444 	.word	0x58025444
 8004924:	58025458 	.word	0x58025458
 8004928:	5802546c 	.word	0x5802546c
 800492c:	58025480 	.word	0x58025480
 8004930:	58025494 	.word	0x58025494

08004934 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b084      	sub	sp, #16
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d101      	bne.n	8004946 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e237      	b.n	8004db6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800494c:	b2db      	uxtb	r3, r3
 800494e:	2b02      	cmp	r3, #2
 8004950:	d004      	beq.n	800495c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2280      	movs	r2, #128	; 0x80
 8004956:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e22c      	b.n	8004db6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a5c      	ldr	r2, [pc, #368]	; (8004ad4 <HAL_DMA_Abort_IT+0x1a0>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d04a      	beq.n	80049fc <HAL_DMA_Abort_IT+0xc8>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a5b      	ldr	r2, [pc, #364]	; (8004ad8 <HAL_DMA_Abort_IT+0x1a4>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d045      	beq.n	80049fc <HAL_DMA_Abort_IT+0xc8>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a59      	ldr	r2, [pc, #356]	; (8004adc <HAL_DMA_Abort_IT+0x1a8>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d040      	beq.n	80049fc <HAL_DMA_Abort_IT+0xc8>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a58      	ldr	r2, [pc, #352]	; (8004ae0 <HAL_DMA_Abort_IT+0x1ac>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d03b      	beq.n	80049fc <HAL_DMA_Abort_IT+0xc8>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a56      	ldr	r2, [pc, #344]	; (8004ae4 <HAL_DMA_Abort_IT+0x1b0>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d036      	beq.n	80049fc <HAL_DMA_Abort_IT+0xc8>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a55      	ldr	r2, [pc, #340]	; (8004ae8 <HAL_DMA_Abort_IT+0x1b4>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d031      	beq.n	80049fc <HAL_DMA_Abort_IT+0xc8>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a53      	ldr	r2, [pc, #332]	; (8004aec <HAL_DMA_Abort_IT+0x1b8>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d02c      	beq.n	80049fc <HAL_DMA_Abort_IT+0xc8>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a52      	ldr	r2, [pc, #328]	; (8004af0 <HAL_DMA_Abort_IT+0x1bc>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d027      	beq.n	80049fc <HAL_DMA_Abort_IT+0xc8>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a50      	ldr	r2, [pc, #320]	; (8004af4 <HAL_DMA_Abort_IT+0x1c0>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d022      	beq.n	80049fc <HAL_DMA_Abort_IT+0xc8>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a4f      	ldr	r2, [pc, #316]	; (8004af8 <HAL_DMA_Abort_IT+0x1c4>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d01d      	beq.n	80049fc <HAL_DMA_Abort_IT+0xc8>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a4d      	ldr	r2, [pc, #308]	; (8004afc <HAL_DMA_Abort_IT+0x1c8>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d018      	beq.n	80049fc <HAL_DMA_Abort_IT+0xc8>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a4c      	ldr	r2, [pc, #304]	; (8004b00 <HAL_DMA_Abort_IT+0x1cc>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d013      	beq.n	80049fc <HAL_DMA_Abort_IT+0xc8>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a4a      	ldr	r2, [pc, #296]	; (8004b04 <HAL_DMA_Abort_IT+0x1d0>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d00e      	beq.n	80049fc <HAL_DMA_Abort_IT+0xc8>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a49      	ldr	r2, [pc, #292]	; (8004b08 <HAL_DMA_Abort_IT+0x1d4>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d009      	beq.n	80049fc <HAL_DMA_Abort_IT+0xc8>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a47      	ldr	r2, [pc, #284]	; (8004b0c <HAL_DMA_Abort_IT+0x1d8>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d004      	beq.n	80049fc <HAL_DMA_Abort_IT+0xc8>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a46      	ldr	r2, [pc, #280]	; (8004b10 <HAL_DMA_Abort_IT+0x1dc>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d101      	bne.n	8004a00 <HAL_DMA_Abort_IT+0xcc>
 80049fc:	2301      	movs	r3, #1
 80049fe:	e000      	b.n	8004a02 <HAL_DMA_Abort_IT+0xce>
 8004a00:	2300      	movs	r3, #0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	f000 8086 	beq.w	8004b14 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2204      	movs	r2, #4
 8004a0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a2f      	ldr	r2, [pc, #188]	; (8004ad4 <HAL_DMA_Abort_IT+0x1a0>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d04a      	beq.n	8004ab0 <HAL_DMA_Abort_IT+0x17c>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a2e      	ldr	r2, [pc, #184]	; (8004ad8 <HAL_DMA_Abort_IT+0x1a4>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d045      	beq.n	8004ab0 <HAL_DMA_Abort_IT+0x17c>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a2c      	ldr	r2, [pc, #176]	; (8004adc <HAL_DMA_Abort_IT+0x1a8>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d040      	beq.n	8004ab0 <HAL_DMA_Abort_IT+0x17c>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a2b      	ldr	r2, [pc, #172]	; (8004ae0 <HAL_DMA_Abort_IT+0x1ac>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d03b      	beq.n	8004ab0 <HAL_DMA_Abort_IT+0x17c>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a29      	ldr	r2, [pc, #164]	; (8004ae4 <HAL_DMA_Abort_IT+0x1b0>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d036      	beq.n	8004ab0 <HAL_DMA_Abort_IT+0x17c>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a28      	ldr	r2, [pc, #160]	; (8004ae8 <HAL_DMA_Abort_IT+0x1b4>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d031      	beq.n	8004ab0 <HAL_DMA_Abort_IT+0x17c>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a26      	ldr	r2, [pc, #152]	; (8004aec <HAL_DMA_Abort_IT+0x1b8>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d02c      	beq.n	8004ab0 <HAL_DMA_Abort_IT+0x17c>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a25      	ldr	r2, [pc, #148]	; (8004af0 <HAL_DMA_Abort_IT+0x1bc>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d027      	beq.n	8004ab0 <HAL_DMA_Abort_IT+0x17c>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a23      	ldr	r2, [pc, #140]	; (8004af4 <HAL_DMA_Abort_IT+0x1c0>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d022      	beq.n	8004ab0 <HAL_DMA_Abort_IT+0x17c>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a22      	ldr	r2, [pc, #136]	; (8004af8 <HAL_DMA_Abort_IT+0x1c4>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d01d      	beq.n	8004ab0 <HAL_DMA_Abort_IT+0x17c>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a20      	ldr	r2, [pc, #128]	; (8004afc <HAL_DMA_Abort_IT+0x1c8>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d018      	beq.n	8004ab0 <HAL_DMA_Abort_IT+0x17c>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a1f      	ldr	r2, [pc, #124]	; (8004b00 <HAL_DMA_Abort_IT+0x1cc>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d013      	beq.n	8004ab0 <HAL_DMA_Abort_IT+0x17c>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a1d      	ldr	r2, [pc, #116]	; (8004b04 <HAL_DMA_Abort_IT+0x1d0>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d00e      	beq.n	8004ab0 <HAL_DMA_Abort_IT+0x17c>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a1c      	ldr	r2, [pc, #112]	; (8004b08 <HAL_DMA_Abort_IT+0x1d4>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d009      	beq.n	8004ab0 <HAL_DMA_Abort_IT+0x17c>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a1a      	ldr	r2, [pc, #104]	; (8004b0c <HAL_DMA_Abort_IT+0x1d8>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d004      	beq.n	8004ab0 <HAL_DMA_Abort_IT+0x17c>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a19      	ldr	r2, [pc, #100]	; (8004b10 <HAL_DMA_Abort_IT+0x1dc>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d108      	bne.n	8004ac2 <HAL_DMA_Abort_IT+0x18e>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f022 0201 	bic.w	r2, r2, #1
 8004abe:	601a      	str	r2, [r3, #0]
 8004ac0:	e178      	b.n	8004db4 <HAL_DMA_Abort_IT+0x480>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f022 0201 	bic.w	r2, r2, #1
 8004ad0:	601a      	str	r2, [r3, #0]
 8004ad2:	e16f      	b.n	8004db4 <HAL_DMA_Abort_IT+0x480>
 8004ad4:	40020010 	.word	0x40020010
 8004ad8:	40020028 	.word	0x40020028
 8004adc:	40020040 	.word	0x40020040
 8004ae0:	40020058 	.word	0x40020058
 8004ae4:	40020070 	.word	0x40020070
 8004ae8:	40020088 	.word	0x40020088
 8004aec:	400200a0 	.word	0x400200a0
 8004af0:	400200b8 	.word	0x400200b8
 8004af4:	40020410 	.word	0x40020410
 8004af8:	40020428 	.word	0x40020428
 8004afc:	40020440 	.word	0x40020440
 8004b00:	40020458 	.word	0x40020458
 8004b04:	40020470 	.word	0x40020470
 8004b08:	40020488 	.word	0x40020488
 8004b0c:	400204a0 	.word	0x400204a0
 8004b10:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f022 020e 	bic.w	r2, r2, #14
 8004b22:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a6c      	ldr	r2, [pc, #432]	; (8004cdc <HAL_DMA_Abort_IT+0x3a8>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d04a      	beq.n	8004bc4 <HAL_DMA_Abort_IT+0x290>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a6b      	ldr	r2, [pc, #428]	; (8004ce0 <HAL_DMA_Abort_IT+0x3ac>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d045      	beq.n	8004bc4 <HAL_DMA_Abort_IT+0x290>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a69      	ldr	r2, [pc, #420]	; (8004ce4 <HAL_DMA_Abort_IT+0x3b0>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d040      	beq.n	8004bc4 <HAL_DMA_Abort_IT+0x290>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a68      	ldr	r2, [pc, #416]	; (8004ce8 <HAL_DMA_Abort_IT+0x3b4>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d03b      	beq.n	8004bc4 <HAL_DMA_Abort_IT+0x290>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a66      	ldr	r2, [pc, #408]	; (8004cec <HAL_DMA_Abort_IT+0x3b8>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d036      	beq.n	8004bc4 <HAL_DMA_Abort_IT+0x290>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a65      	ldr	r2, [pc, #404]	; (8004cf0 <HAL_DMA_Abort_IT+0x3bc>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d031      	beq.n	8004bc4 <HAL_DMA_Abort_IT+0x290>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a63      	ldr	r2, [pc, #396]	; (8004cf4 <HAL_DMA_Abort_IT+0x3c0>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d02c      	beq.n	8004bc4 <HAL_DMA_Abort_IT+0x290>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a62      	ldr	r2, [pc, #392]	; (8004cf8 <HAL_DMA_Abort_IT+0x3c4>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d027      	beq.n	8004bc4 <HAL_DMA_Abort_IT+0x290>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a60      	ldr	r2, [pc, #384]	; (8004cfc <HAL_DMA_Abort_IT+0x3c8>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d022      	beq.n	8004bc4 <HAL_DMA_Abort_IT+0x290>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a5f      	ldr	r2, [pc, #380]	; (8004d00 <HAL_DMA_Abort_IT+0x3cc>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d01d      	beq.n	8004bc4 <HAL_DMA_Abort_IT+0x290>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a5d      	ldr	r2, [pc, #372]	; (8004d04 <HAL_DMA_Abort_IT+0x3d0>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d018      	beq.n	8004bc4 <HAL_DMA_Abort_IT+0x290>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a5c      	ldr	r2, [pc, #368]	; (8004d08 <HAL_DMA_Abort_IT+0x3d4>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d013      	beq.n	8004bc4 <HAL_DMA_Abort_IT+0x290>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a5a      	ldr	r2, [pc, #360]	; (8004d0c <HAL_DMA_Abort_IT+0x3d8>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d00e      	beq.n	8004bc4 <HAL_DMA_Abort_IT+0x290>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a59      	ldr	r2, [pc, #356]	; (8004d10 <HAL_DMA_Abort_IT+0x3dc>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d009      	beq.n	8004bc4 <HAL_DMA_Abort_IT+0x290>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a57      	ldr	r2, [pc, #348]	; (8004d14 <HAL_DMA_Abort_IT+0x3e0>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d004      	beq.n	8004bc4 <HAL_DMA_Abort_IT+0x290>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a56      	ldr	r2, [pc, #344]	; (8004d18 <HAL_DMA_Abort_IT+0x3e4>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d108      	bne.n	8004bd6 <HAL_DMA_Abort_IT+0x2a2>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f022 0201 	bic.w	r2, r2, #1
 8004bd2:	601a      	str	r2, [r3, #0]
 8004bd4:	e007      	b.n	8004be6 <HAL_DMA_Abort_IT+0x2b2>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f022 0201 	bic.w	r2, r2, #1
 8004be4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a3c      	ldr	r2, [pc, #240]	; (8004cdc <HAL_DMA_Abort_IT+0x3a8>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d072      	beq.n	8004cd6 <HAL_DMA_Abort_IT+0x3a2>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a3a      	ldr	r2, [pc, #232]	; (8004ce0 <HAL_DMA_Abort_IT+0x3ac>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d06d      	beq.n	8004cd6 <HAL_DMA_Abort_IT+0x3a2>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a39      	ldr	r2, [pc, #228]	; (8004ce4 <HAL_DMA_Abort_IT+0x3b0>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d068      	beq.n	8004cd6 <HAL_DMA_Abort_IT+0x3a2>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a37      	ldr	r2, [pc, #220]	; (8004ce8 <HAL_DMA_Abort_IT+0x3b4>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d063      	beq.n	8004cd6 <HAL_DMA_Abort_IT+0x3a2>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a36      	ldr	r2, [pc, #216]	; (8004cec <HAL_DMA_Abort_IT+0x3b8>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d05e      	beq.n	8004cd6 <HAL_DMA_Abort_IT+0x3a2>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a34      	ldr	r2, [pc, #208]	; (8004cf0 <HAL_DMA_Abort_IT+0x3bc>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d059      	beq.n	8004cd6 <HAL_DMA_Abort_IT+0x3a2>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a33      	ldr	r2, [pc, #204]	; (8004cf4 <HAL_DMA_Abort_IT+0x3c0>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d054      	beq.n	8004cd6 <HAL_DMA_Abort_IT+0x3a2>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a31      	ldr	r2, [pc, #196]	; (8004cf8 <HAL_DMA_Abort_IT+0x3c4>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d04f      	beq.n	8004cd6 <HAL_DMA_Abort_IT+0x3a2>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a30      	ldr	r2, [pc, #192]	; (8004cfc <HAL_DMA_Abort_IT+0x3c8>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d04a      	beq.n	8004cd6 <HAL_DMA_Abort_IT+0x3a2>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a2e      	ldr	r2, [pc, #184]	; (8004d00 <HAL_DMA_Abort_IT+0x3cc>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d045      	beq.n	8004cd6 <HAL_DMA_Abort_IT+0x3a2>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a2d      	ldr	r2, [pc, #180]	; (8004d04 <HAL_DMA_Abort_IT+0x3d0>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d040      	beq.n	8004cd6 <HAL_DMA_Abort_IT+0x3a2>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a2b      	ldr	r2, [pc, #172]	; (8004d08 <HAL_DMA_Abort_IT+0x3d4>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d03b      	beq.n	8004cd6 <HAL_DMA_Abort_IT+0x3a2>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a2a      	ldr	r2, [pc, #168]	; (8004d0c <HAL_DMA_Abort_IT+0x3d8>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d036      	beq.n	8004cd6 <HAL_DMA_Abort_IT+0x3a2>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a28      	ldr	r2, [pc, #160]	; (8004d10 <HAL_DMA_Abort_IT+0x3dc>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d031      	beq.n	8004cd6 <HAL_DMA_Abort_IT+0x3a2>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a27      	ldr	r2, [pc, #156]	; (8004d14 <HAL_DMA_Abort_IT+0x3e0>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d02c      	beq.n	8004cd6 <HAL_DMA_Abort_IT+0x3a2>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a25      	ldr	r2, [pc, #148]	; (8004d18 <HAL_DMA_Abort_IT+0x3e4>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d027      	beq.n	8004cd6 <HAL_DMA_Abort_IT+0x3a2>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a24      	ldr	r2, [pc, #144]	; (8004d1c <HAL_DMA_Abort_IT+0x3e8>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d022      	beq.n	8004cd6 <HAL_DMA_Abort_IT+0x3a2>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a22      	ldr	r2, [pc, #136]	; (8004d20 <HAL_DMA_Abort_IT+0x3ec>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d01d      	beq.n	8004cd6 <HAL_DMA_Abort_IT+0x3a2>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a21      	ldr	r2, [pc, #132]	; (8004d24 <HAL_DMA_Abort_IT+0x3f0>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d018      	beq.n	8004cd6 <HAL_DMA_Abort_IT+0x3a2>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a1f      	ldr	r2, [pc, #124]	; (8004d28 <HAL_DMA_Abort_IT+0x3f4>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d013      	beq.n	8004cd6 <HAL_DMA_Abort_IT+0x3a2>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a1e      	ldr	r2, [pc, #120]	; (8004d2c <HAL_DMA_Abort_IT+0x3f8>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d00e      	beq.n	8004cd6 <HAL_DMA_Abort_IT+0x3a2>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a1c      	ldr	r2, [pc, #112]	; (8004d30 <HAL_DMA_Abort_IT+0x3fc>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d009      	beq.n	8004cd6 <HAL_DMA_Abort_IT+0x3a2>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a1b      	ldr	r2, [pc, #108]	; (8004d34 <HAL_DMA_Abort_IT+0x400>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d004      	beq.n	8004cd6 <HAL_DMA_Abort_IT+0x3a2>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a19      	ldr	r2, [pc, #100]	; (8004d38 <HAL_DMA_Abort_IT+0x404>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d132      	bne.n	8004d3c <HAL_DMA_Abort_IT+0x408>
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e031      	b.n	8004d3e <HAL_DMA_Abort_IT+0x40a>
 8004cda:	bf00      	nop
 8004cdc:	40020010 	.word	0x40020010
 8004ce0:	40020028 	.word	0x40020028
 8004ce4:	40020040 	.word	0x40020040
 8004ce8:	40020058 	.word	0x40020058
 8004cec:	40020070 	.word	0x40020070
 8004cf0:	40020088 	.word	0x40020088
 8004cf4:	400200a0 	.word	0x400200a0
 8004cf8:	400200b8 	.word	0x400200b8
 8004cfc:	40020410 	.word	0x40020410
 8004d00:	40020428 	.word	0x40020428
 8004d04:	40020440 	.word	0x40020440
 8004d08:	40020458 	.word	0x40020458
 8004d0c:	40020470 	.word	0x40020470
 8004d10:	40020488 	.word	0x40020488
 8004d14:	400204a0 	.word	0x400204a0
 8004d18:	400204b8 	.word	0x400204b8
 8004d1c:	58025408 	.word	0x58025408
 8004d20:	5802541c 	.word	0x5802541c
 8004d24:	58025430 	.word	0x58025430
 8004d28:	58025444 	.word	0x58025444
 8004d2c:	58025458 	.word	0x58025458
 8004d30:	5802546c 	.word	0x5802546c
 8004d34:	58025480 	.word	0x58025480
 8004d38:	58025494 	.word	0x58025494
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d028      	beq.n	8004d94 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d50:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d56:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d5c:	f003 031f 	and.w	r3, r3, #31
 8004d60:	2201      	movs	r2, #1
 8004d62:	409a      	lsls	r2, r3
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004d70:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00c      	beq.n	8004d94 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d88:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004d92:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d003      	beq.n	8004db4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3710      	adds	r7, #16
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop

08004dc0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d101      	bne.n	8004dd2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e0cf      	b.n	8004f72 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d106      	bne.n	8004dea <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2223      	movs	r2, #35	; 0x23
 8004de0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f7fd f87d 	bl	8001ee4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004dea:	4b64      	ldr	r3, [pc, #400]	; (8004f7c <HAL_ETH_Init+0x1bc>)
 8004dec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004df0:	4a62      	ldr	r2, [pc, #392]	; (8004f7c <HAL_ETH_Init+0x1bc>)
 8004df2:	f043 0302 	orr.w	r3, r3, #2
 8004df6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004dfa:	4b60      	ldr	r3, [pc, #384]	; (8004f7c <HAL_ETH_Init+0x1bc>)
 8004dfc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004e00:	f003 0302 	and.w	r3, r3, #2
 8004e04:	60bb      	str	r3, [r7, #8]
 8004e06:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	7a1b      	ldrb	r3, [r3, #8]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d103      	bne.n	8004e18 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8004e10:	2000      	movs	r0, #0
 8004e12:	f7fe f8a9 	bl	8002f68 <HAL_SYSCFG_ETHInterfaceSelect>
 8004e16:	e003      	b.n	8004e20 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8004e18:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8004e1c:	f7fe f8a4 	bl	8002f68 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8004e20:	4b57      	ldr	r3, [pc, #348]	; (8004f80 <HAL_ETH_Init+0x1c0>)
 8004e22:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	6812      	ldr	r2, [r2, #0]
 8004e32:	f043 0301 	orr.w	r3, r3, #1
 8004e36:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004e3a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e3c:	f7fe f858 	bl	8002ef0 <HAL_GetTick>
 8004e40:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004e42:	e011      	b.n	8004e68 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004e44:	f7fe f854 	bl	8002ef0 <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004e52:	d909      	bls.n	8004e68 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2204      	movs	r2, #4
 8004e58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	22e0      	movs	r2, #224	; 0xe0
 8004e60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e084      	b.n	8004f72 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0301 	and.w	r3, r3, #1
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1e4      	bne.n	8004e44 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 f886 	bl	8004f8c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004e80:	f002 fcb4 	bl	80077ec <HAL_RCC_GetHCLKFreq>
 8004e84:	4603      	mov	r3, r0
 8004e86:	4a3f      	ldr	r2, [pc, #252]	; (8004f84 <HAL_ETH_Init+0x1c4>)
 8004e88:	fba2 2303 	umull	r2, r3, r2, r3
 8004e8c:	0c9a      	lsrs	r2, r3, #18
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	3a01      	subs	r2, #1
 8004e94:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f000 fa71 	bl	8005380 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ea6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004eaa:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	6812      	ldr	r2, [r2, #0]
 8004eb2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004eb6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004eba:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	f003 0303 	and.w	r3, r3, #3
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d009      	beq.n	8004ede <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2201      	movs	r2, #1
 8004ece:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	22e0      	movs	r2, #224	; 0xe0
 8004ed6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e049      	b.n	8004f72 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ee6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8004eea:	4b27      	ldr	r3, [pc, #156]	; (8004f88 <HAL_ETH_Init+0x1c8>)
 8004eec:	4013      	ands	r3, r2
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	6952      	ldr	r2, [r2, #20]
 8004ef2:	0051      	lsls	r1, r2, #1
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	6812      	ldr	r2, [r2, #0]
 8004ef8:	430b      	orrs	r3, r1
 8004efa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004efe:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 fad9 	bl	80054ba <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f000 fb1f 	bl	800554c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	3305      	adds	r3, #5
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	021a      	lsls	r2, r3, #8
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	3304      	adds	r3, #4
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	4619      	mov	r1, r3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	430a      	orrs	r2, r1
 8004f28:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	3303      	adds	r3, #3
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	061a      	lsls	r2, r3, #24
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	3302      	adds	r3, #2
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	041b      	lsls	r3, r3, #16
 8004f40:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	3301      	adds	r3, #1
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004f4c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004f5a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004f5c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2210      	movs	r2, #16
 8004f6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3710      	adds	r7, #16
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	58024400 	.word	0x58024400
 8004f80:	58000400 	.word	0x58000400
 8004f84:	431bde83 	.word	0x431bde83
 8004f88:	ffff8001 	.word	0xffff8001

08004f8c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004f9c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004fa4:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004fa6:	f002 fc21 	bl	80077ec <HAL_RCC_GetHCLKFreq>
 8004faa:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	4a1e      	ldr	r2, [pc, #120]	; (8005028 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d908      	bls.n	8004fc6 <HAL_ETH_SetMDIOClockRange+0x3a>
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	4a1d      	ldr	r2, [pc, #116]	; (800502c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d804      	bhi.n	8004fc6 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004fc2:	60fb      	str	r3, [r7, #12]
 8004fc4:	e027      	b.n	8005016 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	4a18      	ldr	r2, [pc, #96]	; (800502c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d908      	bls.n	8004fe0 <HAL_ETH_SetMDIOClockRange+0x54>
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	4a17      	ldr	r2, [pc, #92]	; (8005030 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d204      	bcs.n	8004fe0 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004fdc:	60fb      	str	r3, [r7, #12]
 8004fde:	e01a      	b.n	8005016 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	4a13      	ldr	r2, [pc, #76]	; (8005030 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d303      	bcc.n	8004ff0 <HAL_ETH_SetMDIOClockRange+0x64>
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	4a12      	ldr	r2, [pc, #72]	; (8005034 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d911      	bls.n	8005014 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	4a10      	ldr	r2, [pc, #64]	; (8005034 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d908      	bls.n	800500a <HAL_ETH_SetMDIOClockRange+0x7e>
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	4a0f      	ldr	r2, [pc, #60]	; (8005038 <HAL_ETH_SetMDIOClockRange+0xac>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d804      	bhi.n	800500a <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005006:	60fb      	str	r3, [r7, #12]
 8005008:	e005      	b.n	8005016 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005010:	60fb      	str	r3, [r7, #12]
 8005012:	e000      	b.n	8005016 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8005014:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68fa      	ldr	r2, [r7, #12]
 800501c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8005020:	bf00      	nop
 8005022:	3710      	adds	r7, #16
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}
 8005028:	01312cff 	.word	0x01312cff
 800502c:	02160ebf 	.word	0x02160ebf
 8005030:	03938700 	.word	0x03938700
 8005034:	05f5e0ff 	.word	0x05f5e0ff
 8005038:	08f0d17f 	.word	0x08f0d17f

0800503c <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800503c:	b480      	push	{r7}
 800503e:	b085      	sub	sp, #20
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800504e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	791b      	ldrb	r3, [r3, #4]
 8005054:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8005056:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	7b1b      	ldrb	r3, [r3, #12]
 800505c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800505e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	7b5b      	ldrb	r3, [r3, #13]
 8005064:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005066:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	7b9b      	ldrb	r3, [r3, #14]
 800506c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800506e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	7bdb      	ldrb	r3, [r3, #15]
 8005074:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005076:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005078:	683a      	ldr	r2, [r7, #0]
 800507a:	7c12      	ldrb	r2, [r2, #16]
 800507c:	2a00      	cmp	r2, #0
 800507e:	d102      	bne.n	8005086 <ETH_SetMACConfig+0x4a>
 8005080:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005084:	e000      	b.n	8005088 <ETH_SetMACConfig+0x4c>
 8005086:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005088:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800508a:	683a      	ldr	r2, [r7, #0]
 800508c:	7c52      	ldrb	r2, [r2, #17]
 800508e:	2a00      	cmp	r2, #0
 8005090:	d102      	bne.n	8005098 <ETH_SetMACConfig+0x5c>
 8005092:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005096:	e000      	b.n	800509a <ETH_SetMACConfig+0x5e>
 8005098:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800509a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	7c9b      	ldrb	r3, [r3, #18]
 80050a0:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80050a2:	431a      	orrs	r2, r3
               macconf->Speed |
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80050a8:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80050ae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	7f1b      	ldrb	r3, [r3, #28]
 80050b4:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80050b6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	7f5b      	ldrb	r3, [r3, #29]
 80050bc:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80050be:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80050c0:	683a      	ldr	r2, [r7, #0]
 80050c2:	7f92      	ldrb	r2, [r2, #30]
 80050c4:	2a00      	cmp	r2, #0
 80050c6:	d102      	bne.n	80050ce <ETH_SetMACConfig+0x92>
 80050c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80050cc:	e000      	b.n	80050d0 <ETH_SetMACConfig+0x94>
 80050ce:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80050d0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	7fdb      	ldrb	r3, [r3, #31]
 80050d6:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80050d8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80050da:	683a      	ldr	r2, [r7, #0]
 80050dc:	f892 2020 	ldrb.w	r2, [r2, #32]
 80050e0:	2a00      	cmp	r2, #0
 80050e2:	d102      	bne.n	80050ea <ETH_SetMACConfig+0xae>
 80050e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80050e8:	e000      	b.n	80050ec <ETH_SetMACConfig+0xb0>
 80050ea:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80050ec:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80050f2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050fa:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80050fc:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8005102:	4313      	orrs	r3, r2
 8005104:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	4b56      	ldr	r3, [pc, #344]	; (8005268 <ETH_SetMACConfig+0x22c>)
 800510e:	4013      	ands	r3, r2
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	6812      	ldr	r2, [r2, #0]
 8005114:	68f9      	ldr	r1, [r7, #12]
 8005116:	430b      	orrs	r3, r1
 8005118:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800511e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005126:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005128:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005130:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8005132:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800513a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800513c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800513e:	683a      	ldr	r2, [r7, #0]
 8005140:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8005144:	2a00      	cmp	r2, #0
 8005146:	d102      	bne.n	800514e <ETH_SetMACConfig+0x112>
 8005148:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800514c:	e000      	b.n	8005150 <ETH_SetMACConfig+0x114>
 800514e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8005150:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005156:	4313      	orrs	r3, r2
 8005158:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	685a      	ldr	r2, [r3, #4]
 8005160:	4b42      	ldr	r3, [pc, #264]	; (800526c <ETH_SetMACConfig+0x230>)
 8005162:	4013      	ands	r3, r2
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	6812      	ldr	r2, [r2, #0]
 8005168:	68f9      	ldr	r1, [r7, #12]
 800516a:	430b      	orrs	r3, r1
 800516c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005174:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800517a:	4313      	orrs	r3, r2
 800517c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68da      	ldr	r2, [r3, #12]
 8005184:	4b3a      	ldr	r3, [pc, #232]	; (8005270 <ETH_SetMACConfig+0x234>)
 8005186:	4013      	ands	r3, r2
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	6812      	ldr	r2, [r2, #0]
 800518c:	68f9      	ldr	r1, [r7, #12]
 800518e:	430b      	orrs	r3, r1
 8005190:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005198:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800519e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80051a0:	683a      	ldr	r2, [r7, #0]
 80051a2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80051a6:	2a00      	cmp	r2, #0
 80051a8:	d101      	bne.n	80051ae <ETH_SetMACConfig+0x172>
 80051aa:	2280      	movs	r2, #128	; 0x80
 80051ac:	e000      	b.n	80051b0 <ETH_SetMACConfig+0x174>
 80051ae:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80051b0:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051b6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80051b8:	4313      	orrs	r3, r2
 80051ba:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80051c2:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80051c6:	4013      	ands	r3, r2
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	6812      	ldr	r2, [r2, #0]
 80051cc:	68f9      	ldr	r1, [r7, #12]
 80051ce:	430b      	orrs	r3, r1
 80051d0:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80051d8:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80051e0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80051e2:	4313      	orrs	r3, r2
 80051e4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ee:	f023 0103 	bic.w	r1, r3, #3
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	430a      	orrs	r2, r1
 80051fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8005206:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	430a      	orrs	r2, r1
 8005214:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800521c:	683a      	ldr	r2, [r7, #0]
 800521e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8005222:	2a00      	cmp	r2, #0
 8005224:	d101      	bne.n	800522a <ETH_SetMACConfig+0x1ee>
 8005226:	2240      	movs	r2, #64	; 0x40
 8005228:	e000      	b.n	800522c <ETH_SetMACConfig+0x1f0>
 800522a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800522c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005234:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005236:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800523e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8005240:	4313      	orrs	r3, r2
 8005242:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800524c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	68fa      	ldr	r2, [r7, #12]
 8005256:	430a      	orrs	r2, r1
 8005258:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 800525c:	bf00      	nop
 800525e:	3714      	adds	r7, #20
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr
 8005268:	00048083 	.word	0x00048083
 800526c:	c0f88000 	.word	0xc0f88000
 8005270:	fffffef0 	.word	0xfffffef0

08005274 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8005274:	b480      	push	{r7}
 8005276:	b085      	sub	sp, #20
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	4b38      	ldr	r3, [pc, #224]	; (800536c <ETH_SetDMAConfig+0xf8>)
 800528a:	4013      	ands	r3, r2
 800528c:	683a      	ldr	r2, [r7, #0]
 800528e:	6811      	ldr	r1, [r2, #0]
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	6812      	ldr	r2, [r2, #0]
 8005294:	430b      	orrs	r3, r1
 8005296:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800529a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	791b      	ldrb	r3, [r3, #4]
 80052a0:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80052a6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	7b1b      	ldrb	r3, [r3, #12]
 80052ac:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80052ae:	4313      	orrs	r3, r2
 80052b0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052ba:	685a      	ldr	r2, [r3, #4]
 80052bc:	4b2c      	ldr	r3, [pc, #176]	; (8005370 <ETH_SetDMAConfig+0xfc>)
 80052be:	4013      	ands	r3, r2
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	6812      	ldr	r2, [r2, #0]
 80052c4:	68f9      	ldr	r1, [r7, #12]
 80052c6:	430b      	orrs	r3, r1
 80052c8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80052cc:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	7b5b      	ldrb	r3, [r3, #13]
 80052d2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80052d8:	4313      	orrs	r3, r2
 80052da:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052e4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80052e8:	4b22      	ldr	r3, [pc, #136]	; (8005374 <ETH_SetDMAConfig+0x100>)
 80052ea:	4013      	ands	r3, r2
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	6812      	ldr	r2, [r2, #0]
 80052f0:	68f9      	ldr	r1, [r7, #12]
 80052f2:	430b      	orrs	r3, r1
 80052f4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80052f8:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	7d1b      	ldrb	r3, [r3, #20]
 8005304:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8005306:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	7f5b      	ldrb	r3, [r3, #29]
 800530c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800530e:	4313      	orrs	r3, r2
 8005310:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800531a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800531e:	4b16      	ldr	r3, [pc, #88]	; (8005378 <ETH_SetDMAConfig+0x104>)
 8005320:	4013      	ands	r3, r2
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	6812      	ldr	r2, [r2, #0]
 8005326:	68f9      	ldr	r1, [r7, #12]
 8005328:	430b      	orrs	r3, r1
 800532a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800532e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	7f1b      	ldrb	r3, [r3, #28]
 8005336:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800533c:	4313      	orrs	r3, r2
 800533e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005348:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800534c:	4b0b      	ldr	r3, [pc, #44]	; (800537c <ETH_SetDMAConfig+0x108>)
 800534e:	4013      	ands	r3, r2
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	6812      	ldr	r2, [r2, #0]
 8005354:	68f9      	ldr	r1, [r7, #12]
 8005356:	430b      	orrs	r3, r1
 8005358:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800535c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8005360:	bf00      	nop
 8005362:	3714      	adds	r7, #20
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr
 800536c:	ffff87fd 	.word	0xffff87fd
 8005370:	ffff2ffe 	.word	0xffff2ffe
 8005374:	fffec000 	.word	0xfffec000
 8005378:	ffc0efef 	.word	0xffc0efef
 800537c:	7fc0ffff 	.word	0x7fc0ffff

08005380 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b0a4      	sub	sp, #144	; 0x90
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8005388:	2301      	movs	r3, #1
 800538a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800538e:	2300      	movs	r3, #0
 8005390:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8005392:	2300      	movs	r3, #0
 8005394:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005398:	2300      	movs	r3, #0
 800539a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800539e:	2301      	movs	r3, #1
 80053a0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80053a4:	2301      	movs	r3, #1
 80053a6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80053aa:	2301      	movs	r3, #1
 80053ac:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80053b0:	2300      	movs	r3, #0
 80053b2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80053b6:	2301      	movs	r3, #1
 80053b8:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80053bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80053c0:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80053c2:	2300      	movs	r3, #0
 80053c4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80053c8:	2300      	movs	r3, #0
 80053ca:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80053cc:	2300      	movs	r3, #0
 80053ce:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80053d2:	2300      	movs	r3, #0
 80053d4:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80053d8:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80053dc:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80053de:	2300      	movs	r3, #0
 80053e0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80053e4:	2300      	movs	r3, #0
 80053e6:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80053e8:	2301      	movs	r3, #1
 80053ea:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80053ee:	2300      	movs	r3, #0
 80053f0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80053f4:	2300      	movs	r3, #0
 80053f6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80053fa:	2300      	movs	r3, #0
 80053fc:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80053fe:	2300      	movs	r3, #0
 8005400:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8005402:	2300      	movs	r3, #0
 8005404:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8005406:	2300      	movs	r3, #0
 8005408:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800540c:	2300      	movs	r3, #0
 800540e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8005412:	2301      	movs	r3, #1
 8005414:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8005418:	2320      	movs	r3, #32
 800541a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800541e:	2301      	movs	r3, #1
 8005420:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8005424:	2300      	movs	r3, #0
 8005426:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800542a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800542e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005430:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005434:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8005436:	2300      	movs	r3, #0
 8005438:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800543c:	2302      	movs	r3, #2
 800543e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005442:	2300      	movs	r3, #0
 8005444:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005448:	2300      	movs	r3, #0
 800544a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800544e:	2300      	movs	r3, #0
 8005450:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8005454:	2301      	movs	r3, #1
 8005456:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800545a:	2300      	movs	r3, #0
 800545c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800545e:	2301      	movs	r3, #1
 8005460:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005464:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005468:	4619      	mov	r1, r3
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f7ff fde6 	bl	800503c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005470:	2301      	movs	r3, #1
 8005472:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005474:	2301      	movs	r3, #1
 8005476:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8005478:	2300      	movs	r3, #0
 800547a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800547c:	2300      	movs	r3, #0
 800547e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8005482:	2300      	movs	r3, #0
 8005484:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8005486:	2300      	movs	r3, #0
 8005488:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800548a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800548e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8005490:	2300      	movs	r3, #0
 8005492:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005494:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005498:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800549a:	2300      	movs	r3, #0
 800549c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80054a0:	f44f 7306 	mov.w	r3, #536	; 0x218
 80054a4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80054a6:	f107 0308 	add.w	r3, r7, #8
 80054aa:	4619      	mov	r1, r3
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f7ff fee1 	bl	8005274 <ETH_SetDMAConfig>
}
 80054b2:	bf00      	nop
 80054b4:	3790      	adds	r7, #144	; 0x90
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}

080054ba <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80054ba:	b480      	push	{r7}
 80054bc:	b085      	sub	sp, #20
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80054c2:	2300      	movs	r3, #0
 80054c4:	60fb      	str	r3, [r7, #12]
 80054c6:	e01d      	b.n	8005504 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	68d9      	ldr	r1, [r3, #12]
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	4613      	mov	r3, r2
 80054d0:	005b      	lsls	r3, r3, #1
 80054d2:	4413      	add	r3, r2
 80054d4:	00db      	lsls	r3, r3, #3
 80054d6:	440b      	add	r3, r1
 80054d8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	2200      	movs	r2, #0
 80054de:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	2200      	movs	r2, #0
 80054e4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	2200      	movs	r2, #0
 80054ea:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	2200      	movs	r2, #0
 80054f0:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80054f2:	68b9      	ldr	r1, [r7, #8]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	68fa      	ldr	r2, [r7, #12]
 80054f8:	3206      	adds	r2, #6
 80054fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	3301      	adds	r3, #1
 8005502:	60fb      	str	r3, [r7, #12]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2b03      	cmp	r3, #3
 8005508:	d9de      	bls.n	80054c8 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005518:	461a      	mov	r2, r3
 800551a:	2303      	movs	r3, #3
 800551c:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	68da      	ldr	r2, [r3, #12]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800552c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	68da      	ldr	r2, [r3, #12]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800553c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8005540:	bf00      	nop
 8005542:	3714      	adds	r7, #20
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800554c:	b480      	push	{r7}
 800554e:	b085      	sub	sp, #20
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005554:	2300      	movs	r3, #0
 8005556:	60fb      	str	r3, [r7, #12]
 8005558:	e023      	b.n	80055a2 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6919      	ldr	r1, [r3, #16]
 800555e:	68fa      	ldr	r2, [r7, #12]
 8005560:	4613      	mov	r3, r2
 8005562:	005b      	lsls	r3, r3, #1
 8005564:	4413      	add	r3, r2
 8005566:	00db      	lsls	r3, r3, #3
 8005568:	440b      	add	r3, r1
 800556a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	2200      	movs	r2, #0
 8005570:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	2200      	movs	r2, #0
 8005576:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	2200      	movs	r2, #0
 800557c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	2200      	movs	r2, #0
 8005582:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	2200      	movs	r2, #0
 8005588:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	2200      	movs	r2, #0
 800558e:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005590:	68b9      	ldr	r1, [r7, #8]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	3212      	adds	r2, #18
 8005598:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	3301      	adds	r3, #1
 80055a0:	60fb      	str	r3, [r7, #12]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2b03      	cmp	r3, #3
 80055a6:	d9d8      	bls.n	800555a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055ce:	461a      	mov	r2, r3
 80055d0:	2303      	movs	r3, #3
 80055d2:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	691a      	ldr	r2, [r3, #16]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055e2:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055f6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80055fa:	bf00      	nop
 80055fc:	3714      	adds	r7, #20
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr
	...

08005608 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b098      	sub	sp, #96	; 0x60
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8005610:	4a84      	ldr	r2, [pc, #528]	; (8005824 <HAL_FDCAN_Init+0x21c>)
 8005612:	f107 030c 	add.w	r3, r7, #12
 8005616:	4611      	mov	r1, r2
 8005618:	224c      	movs	r2, #76	; 0x4c
 800561a:	4618      	mov	r0, r3
 800561c:	f009 f968 	bl	800e8f0 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d101      	bne.n	800562a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e1c6      	b.n	80059b8 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a7e      	ldr	r2, [pc, #504]	; (8005828 <HAL_FDCAN_Init+0x220>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d106      	bne.n	8005642 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800563c:	461a      	mov	r2, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005648:	b2db      	uxtb	r3, r3
 800564a:	2b00      	cmp	r3, #0
 800564c:	d106      	bne.n	800565c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f7fc fd74 	bl	8002144 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	699a      	ldr	r2, [r3, #24]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f022 0210 	bic.w	r2, r2, #16
 800566a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800566c:	f7fd fc40 	bl	8002ef0 <HAL_GetTick>
 8005670:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005672:	e014      	b.n	800569e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005674:	f7fd fc3c 	bl	8002ef0 <HAL_GetTick>
 8005678:	4602      	mov	r2, r0
 800567a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	2b0a      	cmp	r3, #10
 8005680:	d90d      	bls.n	800569e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005688:	f043 0201 	orr.w	r2, r3, #1
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2203      	movs	r2, #3
 8005696:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e18c      	b.n	80059b8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	699b      	ldr	r3, [r3, #24]
 80056a4:	f003 0308 	and.w	r3, r3, #8
 80056a8:	2b08      	cmp	r3, #8
 80056aa:	d0e3      	beq.n	8005674 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	699a      	ldr	r2, [r3, #24]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f042 0201 	orr.w	r2, r2, #1
 80056ba:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80056bc:	f7fd fc18 	bl	8002ef0 <HAL_GetTick>
 80056c0:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80056c2:	e014      	b.n	80056ee <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80056c4:	f7fd fc14 	bl	8002ef0 <HAL_GetTick>
 80056c8:	4602      	mov	r2, r0
 80056ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056cc:	1ad3      	subs	r3, r2, r3
 80056ce:	2b0a      	cmp	r3, #10
 80056d0:	d90d      	bls.n	80056ee <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80056d8:	f043 0201 	orr.w	r2, r3, #1
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2203      	movs	r2, #3
 80056e6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e164      	b.n	80059b8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	699b      	ldr	r3, [r3, #24]
 80056f4:	f003 0301 	and.w	r3, r3, #1
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d0e3      	beq.n	80056c4 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	699a      	ldr	r2, [r3, #24]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f042 0202 	orr.w	r2, r2, #2
 800570a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	7c1b      	ldrb	r3, [r3, #16]
 8005710:	2b01      	cmp	r3, #1
 8005712:	d108      	bne.n	8005726 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	699a      	ldr	r2, [r3, #24]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005722:	619a      	str	r2, [r3, #24]
 8005724:	e007      	b.n	8005736 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	699a      	ldr	r2, [r3, #24]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005734:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	7c5b      	ldrb	r3, [r3, #17]
 800573a:	2b01      	cmp	r3, #1
 800573c:	d108      	bne.n	8005750 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	699a      	ldr	r2, [r3, #24]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800574c:	619a      	str	r2, [r3, #24]
 800574e:	e007      	b.n	8005760 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	699a      	ldr	r2, [r3, #24]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800575e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	7c9b      	ldrb	r3, [r3, #18]
 8005764:	2b01      	cmp	r3, #1
 8005766:	d108      	bne.n	800577a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	699a      	ldr	r2, [r3, #24]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005776:	619a      	str	r2, [r3, #24]
 8005778:	e007      	b.n	800578a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	699a      	ldr	r2, [r3, #24]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005788:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	699b      	ldr	r3, [r3, #24]
 8005790:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	689a      	ldr	r2, [r3, #8]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	430a      	orrs	r2, r1
 800579e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	699a      	ldr	r2, [r3, #24]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80057ae:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	691a      	ldr	r2, [r3, #16]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f022 0210 	bic.w	r2, r2, #16
 80057be:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d108      	bne.n	80057da <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	699a      	ldr	r2, [r3, #24]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f042 0204 	orr.w	r2, r2, #4
 80057d6:	619a      	str	r2, [r3, #24]
 80057d8:	e030      	b.n	800583c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d02c      	beq.n	800583c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	2b02      	cmp	r3, #2
 80057e8:	d020      	beq.n	800582c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	699a      	ldr	r2, [r3, #24]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80057f8:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	691a      	ldr	r2, [r3, #16]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f042 0210 	orr.w	r2, r2, #16
 8005808:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	2b03      	cmp	r3, #3
 8005810:	d114      	bne.n	800583c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	699a      	ldr	r2, [r3, #24]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f042 0220 	orr.w	r2, r2, #32
 8005820:	619a      	str	r2, [r3, #24]
 8005822:	e00b      	b.n	800583c <HAL_FDCAN_Init+0x234>
 8005824:	0800f2c8 	.word	0x0800f2c8
 8005828:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	699a      	ldr	r2, [r3, #24]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f042 0220 	orr.w	r2, r2, #32
 800583a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	699b      	ldr	r3, [r3, #24]
 8005840:	3b01      	subs	r3, #1
 8005842:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	69db      	ldr	r3, [r3, #28]
 8005848:	3b01      	subs	r3, #1
 800584a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800584c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a1b      	ldr	r3, [r3, #32]
 8005852:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005854:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	695b      	ldr	r3, [r3, #20]
 800585c:	3b01      	subs	r3, #1
 800585e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005864:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005866:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005870:	d115      	bne.n	800589e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005876:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800587c:	3b01      	subs	r3, #1
 800587e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005880:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005886:	3b01      	subs	r3, #1
 8005888:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800588a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005892:	3b01      	subs	r3, #1
 8005894:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800589a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800589c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d00a      	beq.n	80058bc <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	430a      	orrs	r2, r1
 80058b8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058c4:	4413      	add	r3, r2
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d011      	beq.n	80058ee <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80058d2:	f023 0107 	bic.w	r1, r3, #7
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	3360      	adds	r3, #96	; 0x60
 80058de:	443b      	add	r3, r7
 80058e0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	430a      	orrs	r2, r1
 80058ea:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d011      	beq.n	800591a <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80058fe:	f023 0107 	bic.w	r1, r3, #7
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	3360      	adds	r3, #96	; 0x60
 800590a:	443b      	add	r3, r7
 800590c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	430a      	orrs	r2, r1
 8005916:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800591e:	2b00      	cmp	r3, #0
 8005920:	d012      	beq.n	8005948 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800592a:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	3360      	adds	r3, #96	; 0x60
 8005936:	443b      	add	r3, r7
 8005938:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800593c:	011a      	lsls	r2, r3, #4
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	430a      	orrs	r2, r1
 8005944:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800594c:	2b00      	cmp	r3, #0
 800594e:	d012      	beq.n	8005976 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005958:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	3360      	adds	r3, #96	; 0x60
 8005964:	443b      	add	r3, r7
 8005966:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800596a:	021a      	lsls	r2, r3, #8
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	430a      	orrs	r2, r1
 8005972:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a11      	ldr	r2, [pc, #68]	; (80059c0 <HAL_FDCAN_Init+0x3b8>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d107      	bne.n	8005990 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	689a      	ldr	r2, [r3, #8]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	f022 0203 	bic.w	r2, r2, #3
 800598e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f000 f80b 	bl	80059c4 <FDCAN_CalcultateRamBlockAddresses>
 80059ae:	4603      	mov	r3, r0
 80059b0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80059b4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3760      	adds	r7, #96	; 0x60
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	4000a000 	.word	0x4000a000

080059c4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b085      	sub	sp, #20
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059d0:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80059da:	4ba7      	ldr	r3, [pc, #668]	; (8005c78 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80059dc:	4013      	ands	r3, r2
 80059de:	68ba      	ldr	r2, [r7, #8]
 80059e0:	0091      	lsls	r1, r2, #2
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	6812      	ldr	r2, [r2, #0]
 80059e6:	430b      	orrs	r3, r1
 80059e8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059f4:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059fc:	041a      	lsls	r2, r3, #16
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	430a      	orrs	r2, r1
 8005a04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0c:	68ba      	ldr	r2, [r7, #8]
 8005a0e:	4413      	add	r3, r2
 8005a10:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005a1a:	4b97      	ldr	r3, [pc, #604]	; (8005c78 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	68ba      	ldr	r2, [r7, #8]
 8005a20:	0091      	lsls	r1, r2, #2
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	6812      	ldr	r2, [r2, #0]
 8005a26:	430b      	orrs	r3, r1
 8005a28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a34:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a3c:	041a      	lsls	r2, r3, #16
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	430a      	orrs	r2, r1
 8005a44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a4c:	005b      	lsls	r3, r3, #1
 8005a4e:	68ba      	ldr	r2, [r7, #8]
 8005a50:	4413      	add	r3, r2
 8005a52:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8005a5c:	4b86      	ldr	r3, [pc, #536]	; (8005c78 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005a5e:	4013      	ands	r3, r2
 8005a60:	68ba      	ldr	r2, [r7, #8]
 8005a62:	0091      	lsls	r1, r2, #2
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	6812      	ldr	r2, [r2, #0]
 8005a68:	430b      	orrs	r3, r1
 8005a6a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005a76:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7e:	041a      	lsls	r2, r3, #16
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	430a      	orrs	r2, r1
 8005a86:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005a92:	fb02 f303 	mul.w	r3, r2, r3
 8005a96:	68ba      	ldr	r2, [r7, #8]
 8005a98:	4413      	add	r3, r2
 8005a9a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005aa4:	4b74      	ldr	r3, [pc, #464]	; (8005c78 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	68ba      	ldr	r2, [r7, #8]
 8005aaa:	0091      	lsls	r1, r2, #2
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	6812      	ldr	r2, [r2, #0]
 8005ab0:	430b      	orrs	r3, r1
 8005ab2:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005abe:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ac6:	041a      	lsls	r2, r3, #16
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	430a      	orrs	r2, r1
 8005ace:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005ada:	fb02 f303 	mul.w	r3, r2, r3
 8005ade:	68ba      	ldr	r2, [r7, #8]
 8005ae0:	4413      	add	r3, r2
 8005ae2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005aec:	4b62      	ldr	r3, [pc, #392]	; (8005c78 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005aee:	4013      	ands	r3, r2
 8005af0:	68ba      	ldr	r2, [r7, #8]
 8005af2:	0091      	lsls	r1, r2, #2
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	6812      	ldr	r2, [r2, #0]
 8005af8:	430b      	orrs	r3, r1
 8005afa:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005b06:	fb02 f303 	mul.w	r3, r2, r3
 8005b0a:	68ba      	ldr	r2, [r7, #8]
 8005b0c:	4413      	add	r3, r2
 8005b0e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8005b18:	4b57      	ldr	r3, [pc, #348]	; (8005c78 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	68ba      	ldr	r2, [r7, #8]
 8005b1e:	0091      	lsls	r1, r2, #2
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	6812      	ldr	r2, [r2, #0]
 8005b24:	430b      	orrs	r3, r1
 8005b26:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005b32:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b3a:	041a      	lsls	r2, r3, #16
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	430a      	orrs	r2, r1
 8005b42:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b4a:	005b      	lsls	r3, r3, #1
 8005b4c:	68ba      	ldr	r2, [r7, #8]
 8005b4e:	4413      	add	r3, r2
 8005b50:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005b5a:	4b47      	ldr	r3, [pc, #284]	; (8005c78 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	68ba      	ldr	r2, [r7, #8]
 8005b60:	0091      	lsls	r1, r2, #2
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	6812      	ldr	r2, [r2, #0]
 8005b66:	430b      	orrs	r3, r1
 8005b68:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005b74:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b7c:	041a      	lsls	r2, r3, #16
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	430a      	orrs	r2, r1
 8005b84:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005b90:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b98:	061a      	lsls	r2, r3, #24
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	430a      	orrs	r2, r1
 8005ba0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ba8:	4b34      	ldr	r3, [pc, #208]	; (8005c7c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8005baa:	4413      	add	r3, r2
 8005bac:	009a      	lsls	r2, r3, #2
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	441a      	add	r2, r3
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bca:	00db      	lsls	r3, r3, #3
 8005bcc:	441a      	add	r2, r3
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bda:	6879      	ldr	r1, [r7, #4]
 8005bdc:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8005bde:	fb01 f303 	mul.w	r3, r1, r3
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	441a      	add	r2, r3
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bf2:	6879      	ldr	r1, [r7, #4]
 8005bf4:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8005bf6:	fb01 f303 	mul.w	r3, r1, r3
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	441a      	add	r2, r3
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c0a:	6879      	ldr	r1, [r7, #4]
 8005c0c:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8005c0e:	fb01 f303 	mul.w	r3, r1, r3
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	441a      	add	r2, r3
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c26:	00db      	lsls	r3, r3, #3
 8005c28:	441a      	add	r2, r3
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c3a:	6879      	ldr	r1, [r7, #4]
 8005c3c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8005c3e:	fb01 f303 	mul.w	r3, r1, r3
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	441a      	add	r2, r3
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c56:	6879      	ldr	r1, [r7, #4]
 8005c58:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8005c5a:	fb01 f303 	mul.w	r3, r1, r3
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	441a      	add	r2, r3
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c6e:	4a04      	ldr	r2, [pc, #16]	; (8005c80 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d915      	bls.n	8005ca0 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8005c74:	e006      	b.n	8005c84 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8005c76:	bf00      	nop
 8005c78:	ffff0003 	.word	0xffff0003
 8005c7c:	10002b00 	.word	0x10002b00
 8005c80:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c8a:	f043 0220 	orr.w	r2, r3, #32
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2203      	movs	r2, #3
 8005c98:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e010      	b.n	8005cc2 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ca4:	60fb      	str	r3, [r7, #12]
 8005ca6:	e005      	b.n	8005cb4 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2200      	movs	r2, #0
 8005cac:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	3304      	adds	r3, #4
 8005cb2:	60fb      	str	r3, [r7, #12]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cba:	68fa      	ldr	r2, [r7, #12]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d3f3      	bcc.n	8005ca8 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3714      	adds	r7, #20
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr
 8005cce:	bf00      	nop

08005cd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b089      	sub	sp, #36	; 0x24
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005cde:	4b89      	ldr	r3, [pc, #548]	; (8005f04 <HAL_GPIO_Init+0x234>)
 8005ce0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005ce2:	e194      	b.n	800600e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	2101      	movs	r1, #1
 8005cea:	69fb      	ldr	r3, [r7, #28]
 8005cec:	fa01 f303 	lsl.w	r3, r1, r3
 8005cf0:	4013      	ands	r3, r2
 8005cf2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	f000 8186 	beq.w	8006008 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	f003 0303 	and.w	r3, r3, #3
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d005      	beq.n	8005d14 <HAL_GPIO_Init+0x44>
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	f003 0303 	and.w	r3, r3, #3
 8005d10:	2b02      	cmp	r3, #2
 8005d12:	d130      	bne.n	8005d76 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	005b      	lsls	r3, r3, #1
 8005d1e:	2203      	movs	r2, #3
 8005d20:	fa02 f303 	lsl.w	r3, r2, r3
 8005d24:	43db      	mvns	r3, r3
 8005d26:	69ba      	ldr	r2, [r7, #24]
 8005d28:	4013      	ands	r3, r2
 8005d2a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	68da      	ldr	r2, [r3, #12]
 8005d30:	69fb      	ldr	r3, [r7, #28]
 8005d32:	005b      	lsls	r3, r3, #1
 8005d34:	fa02 f303 	lsl.w	r3, r2, r3
 8005d38:	69ba      	ldr	r2, [r7, #24]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	69ba      	ldr	r2, [r7, #24]
 8005d42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	69fb      	ldr	r3, [r7, #28]
 8005d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d52:	43db      	mvns	r3, r3
 8005d54:	69ba      	ldr	r2, [r7, #24]
 8005d56:	4013      	ands	r3, r2
 8005d58:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	091b      	lsrs	r3, r3, #4
 8005d60:	f003 0201 	and.w	r2, r3, #1
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	fa02 f303 	lsl.w	r3, r2, r3
 8005d6a:	69ba      	ldr	r2, [r7, #24]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	69ba      	ldr	r2, [r7, #24]
 8005d74:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	f003 0303 	and.w	r3, r3, #3
 8005d7e:	2b03      	cmp	r3, #3
 8005d80:	d017      	beq.n	8005db2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005d88:	69fb      	ldr	r3, [r7, #28]
 8005d8a:	005b      	lsls	r3, r3, #1
 8005d8c:	2203      	movs	r2, #3
 8005d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d92:	43db      	mvns	r3, r3
 8005d94:	69ba      	ldr	r2, [r7, #24]
 8005d96:	4013      	ands	r3, r2
 8005d98:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	689a      	ldr	r2, [r3, #8]
 8005d9e:	69fb      	ldr	r3, [r7, #28]
 8005da0:	005b      	lsls	r3, r3, #1
 8005da2:	fa02 f303 	lsl.w	r3, r2, r3
 8005da6:	69ba      	ldr	r2, [r7, #24]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	69ba      	ldr	r2, [r7, #24]
 8005db0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	f003 0303 	and.w	r3, r3, #3
 8005dba:	2b02      	cmp	r3, #2
 8005dbc:	d123      	bne.n	8005e06 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	08da      	lsrs	r2, r3, #3
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	3208      	adds	r2, #8
 8005dc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	f003 0307 	and.w	r3, r3, #7
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	220f      	movs	r2, #15
 8005dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dda:	43db      	mvns	r3, r3
 8005ddc:	69ba      	ldr	r2, [r7, #24]
 8005dde:	4013      	ands	r3, r2
 8005de0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	691a      	ldr	r2, [r3, #16]
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	f003 0307 	and.w	r3, r3, #7
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	fa02 f303 	lsl.w	r3, r2, r3
 8005df2:	69ba      	ldr	r2, [r7, #24]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005df8:	69fb      	ldr	r3, [r7, #28]
 8005dfa:	08da      	lsrs	r2, r3, #3
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	3208      	adds	r2, #8
 8005e00:	69b9      	ldr	r1, [r7, #24]
 8005e02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005e0c:	69fb      	ldr	r3, [r7, #28]
 8005e0e:	005b      	lsls	r3, r3, #1
 8005e10:	2203      	movs	r2, #3
 8005e12:	fa02 f303 	lsl.w	r3, r2, r3
 8005e16:	43db      	mvns	r3, r3
 8005e18:	69ba      	ldr	r2, [r7, #24]
 8005e1a:	4013      	ands	r3, r2
 8005e1c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	f003 0203 	and.w	r2, r3, #3
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	005b      	lsls	r3, r3, #1
 8005e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e2e:	69ba      	ldr	r2, [r7, #24]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	69ba      	ldr	r2, [r7, #24]
 8005e38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	f000 80e0 	beq.w	8006008 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e48:	4b2f      	ldr	r3, [pc, #188]	; (8005f08 <HAL_GPIO_Init+0x238>)
 8005e4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005e4e:	4a2e      	ldr	r2, [pc, #184]	; (8005f08 <HAL_GPIO_Init+0x238>)
 8005e50:	f043 0302 	orr.w	r3, r3, #2
 8005e54:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005e58:	4b2b      	ldr	r3, [pc, #172]	; (8005f08 <HAL_GPIO_Init+0x238>)
 8005e5a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005e5e:	f003 0302 	and.w	r3, r3, #2
 8005e62:	60fb      	str	r3, [r7, #12]
 8005e64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005e66:	4a29      	ldr	r2, [pc, #164]	; (8005f0c <HAL_GPIO_Init+0x23c>)
 8005e68:	69fb      	ldr	r3, [r7, #28]
 8005e6a:	089b      	lsrs	r3, r3, #2
 8005e6c:	3302      	adds	r3, #2
 8005e6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	f003 0303 	and.w	r3, r3, #3
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	220f      	movs	r2, #15
 8005e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e82:	43db      	mvns	r3, r3
 8005e84:	69ba      	ldr	r2, [r7, #24]
 8005e86:	4013      	ands	r3, r2
 8005e88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4a20      	ldr	r2, [pc, #128]	; (8005f10 <HAL_GPIO_Init+0x240>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d052      	beq.n	8005f38 <HAL_GPIO_Init+0x268>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4a1f      	ldr	r2, [pc, #124]	; (8005f14 <HAL_GPIO_Init+0x244>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d031      	beq.n	8005efe <HAL_GPIO_Init+0x22e>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4a1e      	ldr	r2, [pc, #120]	; (8005f18 <HAL_GPIO_Init+0x248>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d02b      	beq.n	8005efa <HAL_GPIO_Init+0x22a>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	4a1d      	ldr	r2, [pc, #116]	; (8005f1c <HAL_GPIO_Init+0x24c>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d025      	beq.n	8005ef6 <HAL_GPIO_Init+0x226>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4a1c      	ldr	r2, [pc, #112]	; (8005f20 <HAL_GPIO_Init+0x250>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d01f      	beq.n	8005ef2 <HAL_GPIO_Init+0x222>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	4a1b      	ldr	r2, [pc, #108]	; (8005f24 <HAL_GPIO_Init+0x254>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d019      	beq.n	8005eee <HAL_GPIO_Init+0x21e>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	4a1a      	ldr	r2, [pc, #104]	; (8005f28 <HAL_GPIO_Init+0x258>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d013      	beq.n	8005eea <HAL_GPIO_Init+0x21a>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4a19      	ldr	r2, [pc, #100]	; (8005f2c <HAL_GPIO_Init+0x25c>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d00d      	beq.n	8005ee6 <HAL_GPIO_Init+0x216>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4a18      	ldr	r2, [pc, #96]	; (8005f30 <HAL_GPIO_Init+0x260>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d007      	beq.n	8005ee2 <HAL_GPIO_Init+0x212>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a17      	ldr	r2, [pc, #92]	; (8005f34 <HAL_GPIO_Init+0x264>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d101      	bne.n	8005ede <HAL_GPIO_Init+0x20e>
 8005eda:	2309      	movs	r3, #9
 8005edc:	e02d      	b.n	8005f3a <HAL_GPIO_Init+0x26a>
 8005ede:	230a      	movs	r3, #10
 8005ee0:	e02b      	b.n	8005f3a <HAL_GPIO_Init+0x26a>
 8005ee2:	2308      	movs	r3, #8
 8005ee4:	e029      	b.n	8005f3a <HAL_GPIO_Init+0x26a>
 8005ee6:	2307      	movs	r3, #7
 8005ee8:	e027      	b.n	8005f3a <HAL_GPIO_Init+0x26a>
 8005eea:	2306      	movs	r3, #6
 8005eec:	e025      	b.n	8005f3a <HAL_GPIO_Init+0x26a>
 8005eee:	2305      	movs	r3, #5
 8005ef0:	e023      	b.n	8005f3a <HAL_GPIO_Init+0x26a>
 8005ef2:	2304      	movs	r3, #4
 8005ef4:	e021      	b.n	8005f3a <HAL_GPIO_Init+0x26a>
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	e01f      	b.n	8005f3a <HAL_GPIO_Init+0x26a>
 8005efa:	2302      	movs	r3, #2
 8005efc:	e01d      	b.n	8005f3a <HAL_GPIO_Init+0x26a>
 8005efe:	2301      	movs	r3, #1
 8005f00:	e01b      	b.n	8005f3a <HAL_GPIO_Init+0x26a>
 8005f02:	bf00      	nop
 8005f04:	58000080 	.word	0x58000080
 8005f08:	58024400 	.word	0x58024400
 8005f0c:	58000400 	.word	0x58000400
 8005f10:	58020000 	.word	0x58020000
 8005f14:	58020400 	.word	0x58020400
 8005f18:	58020800 	.word	0x58020800
 8005f1c:	58020c00 	.word	0x58020c00
 8005f20:	58021000 	.word	0x58021000
 8005f24:	58021400 	.word	0x58021400
 8005f28:	58021800 	.word	0x58021800
 8005f2c:	58021c00 	.word	0x58021c00
 8005f30:	58022000 	.word	0x58022000
 8005f34:	58022400 	.word	0x58022400
 8005f38:	2300      	movs	r3, #0
 8005f3a:	69fa      	ldr	r2, [r7, #28]
 8005f3c:	f002 0203 	and.w	r2, r2, #3
 8005f40:	0092      	lsls	r2, r2, #2
 8005f42:	4093      	lsls	r3, r2
 8005f44:	69ba      	ldr	r2, [r7, #24]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005f4a:	4938      	ldr	r1, [pc, #224]	; (800602c <HAL_GPIO_Init+0x35c>)
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	089b      	lsrs	r3, r3, #2
 8005f50:	3302      	adds	r3, #2
 8005f52:	69ba      	ldr	r2, [r7, #24]
 8005f54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005f58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	43db      	mvns	r3, r3
 8005f64:	69ba      	ldr	r2, [r7, #24]
 8005f66:	4013      	ands	r3, r2
 8005f68:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d003      	beq.n	8005f7e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005f76:	69ba      	ldr	r2, [r7, #24]
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005f7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f82:	69bb      	ldr	r3, [r7, #24]
 8005f84:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005f86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	43db      	mvns	r3, r3
 8005f92:	69ba      	ldr	r2, [r7, #24]
 8005f94:	4013      	ands	r3, r2
 8005f96:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d003      	beq.n	8005fac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005fa4:	69ba      	ldr	r2, [r7, #24]
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005fac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005fb0:	69bb      	ldr	r3, [r7, #24]
 8005fb2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	43db      	mvns	r3, r3
 8005fbe:	69ba      	ldr	r2, [r7, #24]
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d003      	beq.n	8005fd8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005fd0:	69ba      	ldr	r2, [r7, #24]
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	69ba      	ldr	r2, [r7, #24]
 8005fdc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	43db      	mvns	r3, r3
 8005fe8:	69ba      	ldr	r2, [r7, #24]
 8005fea:	4013      	ands	r3, r2
 8005fec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d003      	beq.n	8006002 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005ffa:	69ba      	ldr	r2, [r7, #24]
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	69ba      	ldr	r2, [r7, #24]
 8006006:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	3301      	adds	r3, #1
 800600c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	69fb      	ldr	r3, [r7, #28]
 8006014:	fa22 f303 	lsr.w	r3, r2, r3
 8006018:	2b00      	cmp	r3, #0
 800601a:	f47f ae63 	bne.w	8005ce4 <HAL_GPIO_Init+0x14>
  }
}
 800601e:	bf00      	nop
 8006020:	bf00      	nop
 8006022:	3724      	adds	r7, #36	; 0x24
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr
 800602c:	58000400 	.word	0x58000400

08006030 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006030:	b480      	push	{r7}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	460b      	mov	r3, r1
 800603a:	807b      	strh	r3, [r7, #2]
 800603c:	4613      	mov	r3, r2
 800603e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006040:	787b      	ldrb	r3, [r7, #1]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d003      	beq.n	800604e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006046:	887a      	ldrh	r2, [r7, #2]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800604c:	e003      	b.n	8006056 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800604e:	887b      	ldrh	r3, [r7, #2]
 8006050:	041a      	lsls	r2, r3, #16
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	619a      	str	r2, [r3, #24]
}
 8006056:	bf00      	nop
 8006058:	370c      	adds	r7, #12
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr
	...

08006064 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b084      	sub	sp, #16
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d101      	bne.n	8006076 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	e0bf      	b.n	80061f6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800607c:	b2db      	uxtb	r3, r3
 800607e:	2b00      	cmp	r3, #0
 8006080:	d106      	bne.n	8006090 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f7fc f92a 	bl	80022e4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2202      	movs	r2, #2
 8006094:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	699a      	ldr	r2, [r3, #24]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80060a6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	6999      	ldr	r1, [r3, #24]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	685a      	ldr	r2, [r3, #4]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80060bc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	430a      	orrs	r2, r1
 80060ca:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	6899      	ldr	r1, [r3, #8]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	4b4a      	ldr	r3, [pc, #296]	; (8006200 <HAL_LTDC_Init+0x19c>)
 80060d8:	400b      	ands	r3, r1
 80060da:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	695b      	ldr	r3, [r3, #20]
 80060e0:	041b      	lsls	r3, r3, #16
 80060e2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	6899      	ldr	r1, [r3, #8]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	699a      	ldr	r2, [r3, #24]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	431a      	orrs	r2, r3
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	430a      	orrs	r2, r1
 80060f8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68d9      	ldr	r1, [r3, #12]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	4b3e      	ldr	r3, [pc, #248]	; (8006200 <HAL_LTDC_Init+0x19c>)
 8006106:	400b      	ands	r3, r1
 8006108:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	69db      	ldr	r3, [r3, #28]
 800610e:	041b      	lsls	r3, r3, #16
 8006110:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	68d9      	ldr	r1, [r3, #12]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6a1a      	ldr	r2, [r3, #32]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	431a      	orrs	r2, r3
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	430a      	orrs	r2, r1
 8006126:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	6919      	ldr	r1, [r3, #16]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	4b33      	ldr	r3, [pc, #204]	; (8006200 <HAL_LTDC_Init+0x19c>)
 8006134:	400b      	ands	r3, r1
 8006136:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800613c:	041b      	lsls	r3, r3, #16
 800613e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	6919      	ldr	r1, [r3, #16]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	431a      	orrs	r2, r3
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	430a      	orrs	r2, r1
 8006154:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	6959      	ldr	r1, [r3, #20]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	4b27      	ldr	r3, [pc, #156]	; (8006200 <HAL_LTDC_Init+0x19c>)
 8006162:	400b      	ands	r3, r1
 8006164:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800616a:	041b      	lsls	r3, r3, #16
 800616c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	6959      	ldr	r1, [r3, #20]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	431a      	orrs	r2, r3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	430a      	orrs	r2, r1
 8006182:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800618a:	021b      	lsls	r3, r3, #8
 800618c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006194:	041b      	lsls	r3, r3, #16
 8006196:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80061a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80061ae:	68ba      	ldr	r2, [r7, #8]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	4313      	orrs	r3, r2
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80061ba:	431a      	orrs	r2, r3
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	430a      	orrs	r2, r1
 80061c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f042 0206 	orr.w	r2, r2, #6
 80061d2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	699a      	ldr	r2, [r3, #24]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f042 0201 	orr.w	r2, r2, #1
 80061e2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3710      	adds	r7, #16
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	f000f800 	.word	0xf000f800

08006204 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006204:	b5b0      	push	{r4, r5, r7, lr}
 8006206:	b084      	sub	sp, #16
 8006208:	af00      	add	r7, sp, #0
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006216:	2b01      	cmp	r3, #1
 8006218:	d101      	bne.n	800621e <HAL_LTDC_ConfigLayer+0x1a>
 800621a:	2302      	movs	r3, #2
 800621c:	e02c      	b.n	8006278 <HAL_LTDC_ConfigLayer+0x74>
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2201      	movs	r2, #1
 8006222:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2202      	movs	r2, #2
 800622a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800622e:	68fa      	ldr	r2, [r7, #12]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2134      	movs	r1, #52	; 0x34
 8006234:	fb01 f303 	mul.w	r3, r1, r3
 8006238:	4413      	add	r3, r2
 800623a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	4614      	mov	r4, r2
 8006242:	461d      	mov	r5, r3
 8006244:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006246:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006248:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800624a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800624c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800624e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006250:	682b      	ldr	r3, [r5, #0]
 8006252:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	68b9      	ldr	r1, [r7, #8]
 8006258:	68f8      	ldr	r0, [r7, #12]
 800625a:	f000 f811 	bl	8006280 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	2201      	movs	r2, #1
 8006264:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2201      	movs	r2, #1
 800626a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2200      	movs	r2, #0
 8006272:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006276:	2300      	movs	r3, #0
}
 8006278:	4618      	mov	r0, r3
 800627a:	3710      	adds	r7, #16
 800627c:	46bd      	mov	sp, r7
 800627e:	bdb0      	pop	{r4, r5, r7, pc}

08006280 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006280:	b480      	push	{r7}
 8006282:	b089      	sub	sp, #36	; 0x24
 8006284:	af00      	add	r7, sp, #0
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	60b9      	str	r1, [r7, #8]
 800628a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	685a      	ldr	r2, [r3, #4]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	68db      	ldr	r3, [r3, #12]
 8006296:	0c1b      	lsrs	r3, r3, #16
 8006298:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800629c:	4413      	add	r3, r2
 800629e:	041b      	lsls	r3, r3, #16
 80062a0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	461a      	mov	r2, r3
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	01db      	lsls	r3, r3, #7
 80062ac:	4413      	add	r3, r2
 80062ae:	3384      	adds	r3, #132	; 0x84
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	6812      	ldr	r2, [r2, #0]
 80062b6:	4611      	mov	r1, r2
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	01d2      	lsls	r2, r2, #7
 80062bc:	440a      	add	r2, r1
 80062be:	3284      	adds	r2, #132	; 0x84
 80062c0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80062c4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	68db      	ldr	r3, [r3, #12]
 80062d0:	0c1b      	lsrs	r3, r3, #16
 80062d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80062d6:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80062d8:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4619      	mov	r1, r3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	01db      	lsls	r3, r3, #7
 80062e4:	440b      	add	r3, r1
 80062e6:	3384      	adds	r3, #132	; 0x84
 80062e8:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80062ee:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	68da      	ldr	r2, [r3, #12]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	68db      	ldr	r3, [r3, #12]
 80062fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80062fe:	4413      	add	r3, r2
 8006300:	041b      	lsls	r3, r3, #16
 8006302:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	461a      	mov	r2, r3
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	01db      	lsls	r3, r3, #7
 800630e:	4413      	add	r3, r2
 8006310:	3384      	adds	r3, #132	; 0x84
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	68fa      	ldr	r2, [r7, #12]
 8006316:	6812      	ldr	r2, [r2, #0]
 8006318:	4611      	mov	r1, r2
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	01d2      	lsls	r2, r2, #7
 800631e:	440a      	add	r2, r1
 8006320:	3284      	adds	r2, #132	; 0x84
 8006322:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006326:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	689a      	ldr	r2, [r3, #8]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006336:	4413      	add	r3, r2
 8006338:	1c5a      	adds	r2, r3, #1
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4619      	mov	r1, r3
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	01db      	lsls	r3, r3, #7
 8006344:	440b      	add	r3, r1
 8006346:	3384      	adds	r3, #132	; 0x84
 8006348:	4619      	mov	r1, r3
 800634a:	69fb      	ldr	r3, [r7, #28]
 800634c:	4313      	orrs	r3, r2
 800634e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	461a      	mov	r2, r3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	01db      	lsls	r3, r3, #7
 800635a:	4413      	add	r3, r2
 800635c:	3384      	adds	r3, #132	; 0x84
 800635e:	691b      	ldr	r3, [r3, #16]
 8006360:	68fa      	ldr	r2, [r7, #12]
 8006362:	6812      	ldr	r2, [r2, #0]
 8006364:	4611      	mov	r1, r2
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	01d2      	lsls	r2, r2, #7
 800636a:	440a      	add	r2, r1
 800636c:	3284      	adds	r2, #132	; 0x84
 800636e:	f023 0307 	bic.w	r3, r3, #7
 8006372:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	461a      	mov	r2, r3
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	01db      	lsls	r3, r3, #7
 800637e:	4413      	add	r3, r2
 8006380:	3384      	adds	r3, #132	; 0x84
 8006382:	461a      	mov	r2, r3
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	691b      	ldr	r3, [r3, #16]
 8006388:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006390:	021b      	lsls	r3, r3, #8
 8006392:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800639a:	041b      	lsls	r3, r3, #16
 800639c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	699b      	ldr	r3, [r3, #24]
 80063a2:	061b      	lsls	r3, r3, #24
 80063a4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	461a      	mov	r2, r3
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	01db      	lsls	r3, r3, #7
 80063b0:	4413      	add	r3, r2
 80063b2:	3384      	adds	r3, #132	; 0x84
 80063b4:	699b      	ldr	r3, [r3, #24]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	461a      	mov	r2, r3
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	01db      	lsls	r3, r3, #7
 80063c0:	4413      	add	r3, r2
 80063c2:	3384      	adds	r3, #132	; 0x84
 80063c4:	461a      	mov	r2, r3
 80063c6:	2300      	movs	r3, #0
 80063c8:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80063d0:	461a      	mov	r2, r3
 80063d2:	69fb      	ldr	r3, [r7, #28]
 80063d4:	431a      	orrs	r2, r3
 80063d6:	69bb      	ldr	r3, [r7, #24]
 80063d8:	431a      	orrs	r2, r3
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4619      	mov	r1, r3
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	01db      	lsls	r3, r3, #7
 80063e4:	440b      	add	r3, r1
 80063e6:	3384      	adds	r3, #132	; 0x84
 80063e8:	4619      	mov	r1, r3
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	4313      	orrs	r3, r2
 80063ee:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	461a      	mov	r2, r3
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	01db      	lsls	r3, r3, #7
 80063fa:	4413      	add	r3, r2
 80063fc:	3384      	adds	r3, #132	; 0x84
 80063fe:	695b      	ldr	r3, [r3, #20]
 8006400:	68fa      	ldr	r2, [r7, #12]
 8006402:	6812      	ldr	r2, [r2, #0]
 8006404:	4611      	mov	r1, r2
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	01d2      	lsls	r2, r2, #7
 800640a:	440a      	add	r2, r1
 800640c:	3284      	adds	r2, #132	; 0x84
 800640e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006412:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	461a      	mov	r2, r3
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	01db      	lsls	r3, r3, #7
 800641e:	4413      	add	r3, r2
 8006420:	3384      	adds	r3, #132	; 0x84
 8006422:	461a      	mov	r2, r3
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	695b      	ldr	r3, [r3, #20]
 8006428:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	461a      	mov	r2, r3
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	01db      	lsls	r3, r3, #7
 8006434:	4413      	add	r3, r2
 8006436:	3384      	adds	r3, #132	; 0x84
 8006438:	69da      	ldr	r2, [r3, #28]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4619      	mov	r1, r3
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	01db      	lsls	r3, r3, #7
 8006444:	440b      	add	r3, r1
 8006446:	3384      	adds	r3, #132	; 0x84
 8006448:	4619      	mov	r1, r3
 800644a:	4b58      	ldr	r3, [pc, #352]	; (80065ac <LTDC_SetConfig+0x32c>)
 800644c:	4013      	ands	r3, r2
 800644e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	69da      	ldr	r2, [r3, #28]
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	6a1b      	ldr	r3, [r3, #32]
 8006458:	68f9      	ldr	r1, [r7, #12]
 800645a:	6809      	ldr	r1, [r1, #0]
 800645c:	4608      	mov	r0, r1
 800645e:	6879      	ldr	r1, [r7, #4]
 8006460:	01c9      	lsls	r1, r1, #7
 8006462:	4401      	add	r1, r0
 8006464:	3184      	adds	r1, #132	; 0x84
 8006466:	4313      	orrs	r3, r2
 8006468:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	461a      	mov	r2, r3
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	01db      	lsls	r3, r3, #7
 8006474:	4413      	add	r3, r2
 8006476:	3384      	adds	r3, #132	; 0x84
 8006478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	461a      	mov	r2, r3
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	01db      	lsls	r3, r3, #7
 8006484:	4413      	add	r3, r2
 8006486:	3384      	adds	r3, #132	; 0x84
 8006488:	461a      	mov	r2, r3
 800648a:	2300      	movs	r3, #0
 800648c:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	461a      	mov	r2, r3
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	01db      	lsls	r3, r3, #7
 8006498:	4413      	add	r3, r2
 800649a:	3384      	adds	r3, #132	; 0x84
 800649c:	461a      	mov	r2, r3
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a2:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	691b      	ldr	r3, [r3, #16]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d102      	bne.n	80064b2 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80064ac:	2304      	movs	r3, #4
 80064ae:	61fb      	str	r3, [r7, #28]
 80064b0:	e01b      	b.n	80064ea <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d102      	bne.n	80064c0 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80064ba:	2303      	movs	r3, #3
 80064bc:	61fb      	str	r3, [r7, #28]
 80064be:	e014      	b.n	80064ea <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	691b      	ldr	r3, [r3, #16]
 80064c4:	2b04      	cmp	r3, #4
 80064c6:	d00b      	beq.n	80064e0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80064cc:	2b02      	cmp	r3, #2
 80064ce:	d007      	beq.n	80064e0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80064d4:	2b03      	cmp	r3, #3
 80064d6:	d003      	beq.n	80064e0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80064dc:	2b07      	cmp	r3, #7
 80064de:	d102      	bne.n	80064e6 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80064e0:	2302      	movs	r3, #2
 80064e2:	61fb      	str	r3, [r7, #28]
 80064e4:	e001      	b.n	80064ea <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80064e6:	2301      	movs	r3, #1
 80064e8:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	461a      	mov	r2, r3
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	01db      	lsls	r3, r3, #7
 80064f4:	4413      	add	r3, r2
 80064f6:	3384      	adds	r3, #132	; 0x84
 80064f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064fa:	68fa      	ldr	r2, [r7, #12]
 80064fc:	6812      	ldr	r2, [r2, #0]
 80064fe:	4611      	mov	r1, r2
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	01d2      	lsls	r2, r2, #7
 8006504:	440a      	add	r2, r1
 8006506:	3284      	adds	r2, #132	; 0x84
 8006508:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800650c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006512:	69fa      	ldr	r2, [r7, #28]
 8006514:	fb02 f303 	mul.w	r3, r2, r3
 8006518:	041a      	lsls	r2, r3, #16
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	6859      	ldr	r1, [r3, #4]
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	1acb      	subs	r3, r1, r3
 8006524:	69f9      	ldr	r1, [r7, #28]
 8006526:	fb01 f303 	mul.w	r3, r1, r3
 800652a:	3307      	adds	r3, #7
 800652c:	68f9      	ldr	r1, [r7, #12]
 800652e:	6809      	ldr	r1, [r1, #0]
 8006530:	4608      	mov	r0, r1
 8006532:	6879      	ldr	r1, [r7, #4]
 8006534:	01c9      	lsls	r1, r1, #7
 8006536:	4401      	add	r1, r0
 8006538:	3184      	adds	r1, #132	; 0x84
 800653a:	4313      	orrs	r3, r2
 800653c:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	461a      	mov	r2, r3
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	01db      	lsls	r3, r3, #7
 8006548:	4413      	add	r3, r2
 800654a:	3384      	adds	r3, #132	; 0x84
 800654c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4619      	mov	r1, r3
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	01db      	lsls	r3, r3, #7
 8006558:	440b      	add	r3, r1
 800655a:	3384      	adds	r3, #132	; 0x84
 800655c:	4619      	mov	r1, r3
 800655e:	4b14      	ldr	r3, [pc, #80]	; (80065b0 <LTDC_SetConfig+0x330>)
 8006560:	4013      	ands	r3, r2
 8006562:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	461a      	mov	r2, r3
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	01db      	lsls	r3, r3, #7
 800656e:	4413      	add	r3, r2
 8006570:	3384      	adds	r3, #132	; 0x84
 8006572:	461a      	mov	r2, r3
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006578:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	461a      	mov	r2, r3
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	01db      	lsls	r3, r3, #7
 8006584:	4413      	add	r3, r2
 8006586:	3384      	adds	r3, #132	; 0x84
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	68fa      	ldr	r2, [r7, #12]
 800658c:	6812      	ldr	r2, [r2, #0]
 800658e:	4611      	mov	r1, r2
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	01d2      	lsls	r2, r2, #7
 8006594:	440a      	add	r2, r1
 8006596:	3284      	adds	r2, #132	; 0x84
 8006598:	f043 0301 	orr.w	r3, r3, #1
 800659c:	6013      	str	r3, [r2, #0]
}
 800659e:	bf00      	nop
 80065a0:	3724      	adds	r7, #36	; 0x24
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr
 80065aa:	bf00      	nop
 80065ac:	fffff8f8 	.word	0xfffff8f8
 80065b0:	fffff800 	.word	0xfffff800

080065b4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80065b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065b6:	b08f      	sub	sp, #60	; 0x3c
 80065b8:	af0a      	add	r7, sp, #40	; 0x28
 80065ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d101      	bne.n	80065c6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	e116      	b.n	80067f4 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d106      	bne.n	80065e6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2200      	movs	r2, #0
 80065dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f7fc f8fd 	bl	80027e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2203      	movs	r2, #3
 80065ea:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d102      	bne.n	8006600 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2200      	movs	r2, #0
 80065fe:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4618      	mov	r0, r3
 8006606:	f007 fead 	bl	800e364 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	603b      	str	r3, [r7, #0]
 8006610:	687e      	ldr	r6, [r7, #4]
 8006612:	466d      	mov	r5, sp
 8006614:	f106 0410 	add.w	r4, r6, #16
 8006618:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800661a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800661c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800661e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006620:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006624:	e885 0003 	stmia.w	r5, {r0, r1}
 8006628:	1d33      	adds	r3, r6, #4
 800662a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800662c:	6838      	ldr	r0, [r7, #0]
 800662e:	f007 fe2b 	bl	800e288 <USB_CoreInit>
 8006632:	4603      	mov	r3, r0
 8006634:	2b00      	cmp	r3, #0
 8006636:	d005      	beq.n	8006644 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2202      	movs	r2, #2
 800663c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	e0d7      	b.n	80067f4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	2100      	movs	r1, #0
 800664a:	4618      	mov	r0, r3
 800664c:	f007 fe9b 	bl	800e386 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006650:	2300      	movs	r3, #0
 8006652:	73fb      	strb	r3, [r7, #15]
 8006654:	e04a      	b.n	80066ec <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006656:	7bfa      	ldrb	r2, [r7, #15]
 8006658:	6879      	ldr	r1, [r7, #4]
 800665a:	4613      	mov	r3, r2
 800665c:	00db      	lsls	r3, r3, #3
 800665e:	4413      	add	r3, r2
 8006660:	009b      	lsls	r3, r3, #2
 8006662:	440b      	add	r3, r1
 8006664:	333d      	adds	r3, #61	; 0x3d
 8006666:	2201      	movs	r2, #1
 8006668:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800666a:	7bfa      	ldrb	r2, [r7, #15]
 800666c:	6879      	ldr	r1, [r7, #4]
 800666e:	4613      	mov	r3, r2
 8006670:	00db      	lsls	r3, r3, #3
 8006672:	4413      	add	r3, r2
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	440b      	add	r3, r1
 8006678:	333c      	adds	r3, #60	; 0x3c
 800667a:	7bfa      	ldrb	r2, [r7, #15]
 800667c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800667e:	7bfa      	ldrb	r2, [r7, #15]
 8006680:	7bfb      	ldrb	r3, [r7, #15]
 8006682:	b298      	uxth	r0, r3
 8006684:	6879      	ldr	r1, [r7, #4]
 8006686:	4613      	mov	r3, r2
 8006688:	00db      	lsls	r3, r3, #3
 800668a:	4413      	add	r3, r2
 800668c:	009b      	lsls	r3, r3, #2
 800668e:	440b      	add	r3, r1
 8006690:	3356      	adds	r3, #86	; 0x56
 8006692:	4602      	mov	r2, r0
 8006694:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006696:	7bfa      	ldrb	r2, [r7, #15]
 8006698:	6879      	ldr	r1, [r7, #4]
 800669a:	4613      	mov	r3, r2
 800669c:	00db      	lsls	r3, r3, #3
 800669e:	4413      	add	r3, r2
 80066a0:	009b      	lsls	r3, r3, #2
 80066a2:	440b      	add	r3, r1
 80066a4:	3340      	adds	r3, #64	; 0x40
 80066a6:	2200      	movs	r2, #0
 80066a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80066aa:	7bfa      	ldrb	r2, [r7, #15]
 80066ac:	6879      	ldr	r1, [r7, #4]
 80066ae:	4613      	mov	r3, r2
 80066b0:	00db      	lsls	r3, r3, #3
 80066b2:	4413      	add	r3, r2
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	440b      	add	r3, r1
 80066b8:	3344      	adds	r3, #68	; 0x44
 80066ba:	2200      	movs	r2, #0
 80066bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80066be:	7bfa      	ldrb	r2, [r7, #15]
 80066c0:	6879      	ldr	r1, [r7, #4]
 80066c2:	4613      	mov	r3, r2
 80066c4:	00db      	lsls	r3, r3, #3
 80066c6:	4413      	add	r3, r2
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	440b      	add	r3, r1
 80066cc:	3348      	adds	r3, #72	; 0x48
 80066ce:	2200      	movs	r2, #0
 80066d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80066d2:	7bfa      	ldrb	r2, [r7, #15]
 80066d4:	6879      	ldr	r1, [r7, #4]
 80066d6:	4613      	mov	r3, r2
 80066d8:	00db      	lsls	r3, r3, #3
 80066da:	4413      	add	r3, r2
 80066dc:	009b      	lsls	r3, r3, #2
 80066de:	440b      	add	r3, r1
 80066e0:	334c      	adds	r3, #76	; 0x4c
 80066e2:	2200      	movs	r2, #0
 80066e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80066e6:	7bfb      	ldrb	r3, [r7, #15]
 80066e8:	3301      	adds	r3, #1
 80066ea:	73fb      	strb	r3, [r7, #15]
 80066ec:	7bfa      	ldrb	r2, [r7, #15]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d3af      	bcc.n	8006656 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80066f6:	2300      	movs	r3, #0
 80066f8:	73fb      	strb	r3, [r7, #15]
 80066fa:	e044      	b.n	8006786 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80066fc:	7bfa      	ldrb	r2, [r7, #15]
 80066fe:	6879      	ldr	r1, [r7, #4]
 8006700:	4613      	mov	r3, r2
 8006702:	00db      	lsls	r3, r3, #3
 8006704:	4413      	add	r3, r2
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	440b      	add	r3, r1
 800670a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800670e:	2200      	movs	r2, #0
 8006710:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006712:	7bfa      	ldrb	r2, [r7, #15]
 8006714:	6879      	ldr	r1, [r7, #4]
 8006716:	4613      	mov	r3, r2
 8006718:	00db      	lsls	r3, r3, #3
 800671a:	4413      	add	r3, r2
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	440b      	add	r3, r1
 8006720:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8006724:	7bfa      	ldrb	r2, [r7, #15]
 8006726:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006728:	7bfa      	ldrb	r2, [r7, #15]
 800672a:	6879      	ldr	r1, [r7, #4]
 800672c:	4613      	mov	r3, r2
 800672e:	00db      	lsls	r3, r3, #3
 8006730:	4413      	add	r3, r2
 8006732:	009b      	lsls	r3, r3, #2
 8006734:	440b      	add	r3, r1
 8006736:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800673a:	2200      	movs	r2, #0
 800673c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800673e:	7bfa      	ldrb	r2, [r7, #15]
 8006740:	6879      	ldr	r1, [r7, #4]
 8006742:	4613      	mov	r3, r2
 8006744:	00db      	lsls	r3, r3, #3
 8006746:	4413      	add	r3, r2
 8006748:	009b      	lsls	r3, r3, #2
 800674a:	440b      	add	r3, r1
 800674c:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8006750:	2200      	movs	r2, #0
 8006752:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006754:	7bfa      	ldrb	r2, [r7, #15]
 8006756:	6879      	ldr	r1, [r7, #4]
 8006758:	4613      	mov	r3, r2
 800675a:	00db      	lsls	r3, r3, #3
 800675c:	4413      	add	r3, r2
 800675e:	009b      	lsls	r3, r3, #2
 8006760:	440b      	add	r3, r1
 8006762:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8006766:	2200      	movs	r2, #0
 8006768:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800676a:	7bfa      	ldrb	r2, [r7, #15]
 800676c:	6879      	ldr	r1, [r7, #4]
 800676e:	4613      	mov	r3, r2
 8006770:	00db      	lsls	r3, r3, #3
 8006772:	4413      	add	r3, r2
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	440b      	add	r3, r1
 8006778:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800677c:	2200      	movs	r2, #0
 800677e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006780:	7bfb      	ldrb	r3, [r7, #15]
 8006782:	3301      	adds	r3, #1
 8006784:	73fb      	strb	r3, [r7, #15]
 8006786:	7bfa      	ldrb	r2, [r7, #15]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	429a      	cmp	r2, r3
 800678e:	d3b5      	bcc.n	80066fc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	603b      	str	r3, [r7, #0]
 8006796:	687e      	ldr	r6, [r7, #4]
 8006798:	466d      	mov	r5, sp
 800679a:	f106 0410 	add.w	r4, r6, #16
 800679e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80067a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80067a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80067a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80067a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80067aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80067ae:	1d33      	adds	r3, r6, #4
 80067b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80067b2:	6838      	ldr	r0, [r7, #0]
 80067b4:	f007 fe34 	bl	800e420 <USB_DevInit>
 80067b8:	4603      	mov	r3, r0
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d005      	beq.n	80067ca <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2202      	movs	r2, #2
 80067c2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	e014      	b.n	80067f4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2201      	movs	r2, #1
 80067d6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067de:	2b01      	cmp	r3, #1
 80067e0:	d102      	bne.n	80067e8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f000 f80a 	bl	80067fc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4618      	mov	r0, r3
 80067ee:	f007 fff2 	bl	800e7d6 <USB_DevDisconnect>

  return HAL_OK;
 80067f2:	2300      	movs	r3, #0
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3714      	adds	r7, #20
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080067fc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b085      	sub	sp, #20
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2201      	movs	r2, #1
 800680e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2200      	movs	r2, #0
 8006816:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	699b      	ldr	r3, [r3, #24]
 800681e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800682a:	4b05      	ldr	r3, [pc, #20]	; (8006840 <HAL_PCDEx_ActivateLPM+0x44>)
 800682c:	4313      	orrs	r3, r2
 800682e:	68fa      	ldr	r2, [r7, #12]
 8006830:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006832:	2300      	movs	r3, #0
}
 8006834:	4618      	mov	r0, r3
 8006836:	3714      	adds	r7, #20
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr
 8006840:	10000003 	.word	0x10000003

08006844 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b084      	sub	sp, #16
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800684c:	4b19      	ldr	r3, [pc, #100]	; (80068b4 <HAL_PWREx_ConfigSupply+0x70>)
 800684e:	68db      	ldr	r3, [r3, #12]
 8006850:	f003 0304 	and.w	r3, r3, #4
 8006854:	2b04      	cmp	r3, #4
 8006856:	d00a      	beq.n	800686e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006858:	4b16      	ldr	r3, [pc, #88]	; (80068b4 <HAL_PWREx_ConfigSupply+0x70>)
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	f003 0307 	and.w	r3, r3, #7
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	429a      	cmp	r2, r3
 8006864:	d001      	beq.n	800686a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	e01f      	b.n	80068aa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800686a:	2300      	movs	r3, #0
 800686c:	e01d      	b.n	80068aa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800686e:	4b11      	ldr	r3, [pc, #68]	; (80068b4 <HAL_PWREx_ConfigSupply+0x70>)
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	f023 0207 	bic.w	r2, r3, #7
 8006876:	490f      	ldr	r1, [pc, #60]	; (80068b4 <HAL_PWREx_ConfigSupply+0x70>)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	4313      	orrs	r3, r2
 800687c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800687e:	f7fc fb37 	bl	8002ef0 <HAL_GetTick>
 8006882:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006884:	e009      	b.n	800689a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006886:	f7fc fb33 	bl	8002ef0 <HAL_GetTick>
 800688a:	4602      	mov	r2, r0
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	1ad3      	subs	r3, r2, r3
 8006890:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006894:	d901      	bls.n	800689a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	e007      	b.n	80068aa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800689a:	4b06      	ldr	r3, [pc, #24]	; (80068b4 <HAL_PWREx_ConfigSupply+0x70>)
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80068a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068a6:	d1ee      	bne.n	8006886 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80068a8:	2300      	movs	r3, #0
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3710      	adds	r7, #16
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	bf00      	nop
 80068b4:	58024800 	.word	0x58024800

080068b8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80068b8:	b480      	push	{r7}
 80068ba:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80068bc:	4b05      	ldr	r3, [pc, #20]	; (80068d4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80068be:	68db      	ldr	r3, [r3, #12]
 80068c0:	4a04      	ldr	r2, [pc, #16]	; (80068d4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80068c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80068c6:	60d3      	str	r3, [r2, #12]
}
 80068c8:	bf00      	nop
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr
 80068d2:	bf00      	nop
 80068d4:	58024800 	.word	0x58024800

080068d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b08c      	sub	sp, #48	; 0x30
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d102      	bne.n	80068ec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	f000 bc48 	b.w	800717c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f003 0301 	and.w	r3, r3, #1
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	f000 8088 	beq.w	8006a0a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068fa:	4b99      	ldr	r3, [pc, #612]	; (8006b60 <HAL_RCC_OscConfig+0x288>)
 80068fc:	691b      	ldr	r3, [r3, #16]
 80068fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006902:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006904:	4b96      	ldr	r3, [pc, #600]	; (8006b60 <HAL_RCC_OscConfig+0x288>)
 8006906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006908:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800690a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800690c:	2b10      	cmp	r3, #16
 800690e:	d007      	beq.n	8006920 <HAL_RCC_OscConfig+0x48>
 8006910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006912:	2b18      	cmp	r3, #24
 8006914:	d111      	bne.n	800693a <HAL_RCC_OscConfig+0x62>
 8006916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006918:	f003 0303 	and.w	r3, r3, #3
 800691c:	2b02      	cmp	r3, #2
 800691e:	d10c      	bne.n	800693a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006920:	4b8f      	ldr	r3, [pc, #572]	; (8006b60 <HAL_RCC_OscConfig+0x288>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006928:	2b00      	cmp	r3, #0
 800692a:	d06d      	beq.n	8006a08 <HAL_RCC_OscConfig+0x130>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d169      	bne.n	8006a08 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006934:	2301      	movs	r3, #1
 8006936:	f000 bc21 	b.w	800717c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006942:	d106      	bne.n	8006952 <HAL_RCC_OscConfig+0x7a>
 8006944:	4b86      	ldr	r3, [pc, #536]	; (8006b60 <HAL_RCC_OscConfig+0x288>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a85      	ldr	r2, [pc, #532]	; (8006b60 <HAL_RCC_OscConfig+0x288>)
 800694a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800694e:	6013      	str	r3, [r2, #0]
 8006950:	e02e      	b.n	80069b0 <HAL_RCC_OscConfig+0xd8>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d10c      	bne.n	8006974 <HAL_RCC_OscConfig+0x9c>
 800695a:	4b81      	ldr	r3, [pc, #516]	; (8006b60 <HAL_RCC_OscConfig+0x288>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a80      	ldr	r2, [pc, #512]	; (8006b60 <HAL_RCC_OscConfig+0x288>)
 8006960:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006964:	6013      	str	r3, [r2, #0]
 8006966:	4b7e      	ldr	r3, [pc, #504]	; (8006b60 <HAL_RCC_OscConfig+0x288>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a7d      	ldr	r2, [pc, #500]	; (8006b60 <HAL_RCC_OscConfig+0x288>)
 800696c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006970:	6013      	str	r3, [r2, #0]
 8006972:	e01d      	b.n	80069b0 <HAL_RCC_OscConfig+0xd8>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800697c:	d10c      	bne.n	8006998 <HAL_RCC_OscConfig+0xc0>
 800697e:	4b78      	ldr	r3, [pc, #480]	; (8006b60 <HAL_RCC_OscConfig+0x288>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a77      	ldr	r2, [pc, #476]	; (8006b60 <HAL_RCC_OscConfig+0x288>)
 8006984:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006988:	6013      	str	r3, [r2, #0]
 800698a:	4b75      	ldr	r3, [pc, #468]	; (8006b60 <HAL_RCC_OscConfig+0x288>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a74      	ldr	r2, [pc, #464]	; (8006b60 <HAL_RCC_OscConfig+0x288>)
 8006990:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006994:	6013      	str	r3, [r2, #0]
 8006996:	e00b      	b.n	80069b0 <HAL_RCC_OscConfig+0xd8>
 8006998:	4b71      	ldr	r3, [pc, #452]	; (8006b60 <HAL_RCC_OscConfig+0x288>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a70      	ldr	r2, [pc, #448]	; (8006b60 <HAL_RCC_OscConfig+0x288>)
 800699e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069a2:	6013      	str	r3, [r2, #0]
 80069a4:	4b6e      	ldr	r3, [pc, #440]	; (8006b60 <HAL_RCC_OscConfig+0x288>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a6d      	ldr	r2, [pc, #436]	; (8006b60 <HAL_RCC_OscConfig+0x288>)
 80069aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80069ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d013      	beq.n	80069e0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069b8:	f7fc fa9a 	bl	8002ef0 <HAL_GetTick>
 80069bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80069be:	e008      	b.n	80069d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80069c0:	f7fc fa96 	bl	8002ef0 <HAL_GetTick>
 80069c4:	4602      	mov	r2, r0
 80069c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c8:	1ad3      	subs	r3, r2, r3
 80069ca:	2b64      	cmp	r3, #100	; 0x64
 80069cc:	d901      	bls.n	80069d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80069ce:	2303      	movs	r3, #3
 80069d0:	e3d4      	b.n	800717c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80069d2:	4b63      	ldr	r3, [pc, #396]	; (8006b60 <HAL_RCC_OscConfig+0x288>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d0f0      	beq.n	80069c0 <HAL_RCC_OscConfig+0xe8>
 80069de:	e014      	b.n	8006a0a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069e0:	f7fc fa86 	bl	8002ef0 <HAL_GetTick>
 80069e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80069e6:	e008      	b.n	80069fa <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80069e8:	f7fc fa82 	bl	8002ef0 <HAL_GetTick>
 80069ec:	4602      	mov	r2, r0
 80069ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f0:	1ad3      	subs	r3, r2, r3
 80069f2:	2b64      	cmp	r3, #100	; 0x64
 80069f4:	d901      	bls.n	80069fa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80069f6:	2303      	movs	r3, #3
 80069f8:	e3c0      	b.n	800717c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80069fa:	4b59      	ldr	r3, [pc, #356]	; (8006b60 <HAL_RCC_OscConfig+0x288>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d1f0      	bne.n	80069e8 <HAL_RCC_OscConfig+0x110>
 8006a06:	e000      	b.n	8006a0a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f003 0302 	and.w	r3, r3, #2
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	f000 80ca 	beq.w	8006bac <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a18:	4b51      	ldr	r3, [pc, #324]	; (8006b60 <HAL_RCC_OscConfig+0x288>)
 8006a1a:	691b      	ldr	r3, [r3, #16]
 8006a1c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a20:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006a22:	4b4f      	ldr	r3, [pc, #316]	; (8006b60 <HAL_RCC_OscConfig+0x288>)
 8006a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a26:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006a28:	6a3b      	ldr	r3, [r7, #32]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d007      	beq.n	8006a3e <HAL_RCC_OscConfig+0x166>
 8006a2e:	6a3b      	ldr	r3, [r7, #32]
 8006a30:	2b18      	cmp	r3, #24
 8006a32:	d156      	bne.n	8006ae2 <HAL_RCC_OscConfig+0x20a>
 8006a34:	69fb      	ldr	r3, [r7, #28]
 8006a36:	f003 0303 	and.w	r3, r3, #3
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d151      	bne.n	8006ae2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a3e:	4b48      	ldr	r3, [pc, #288]	; (8006b60 <HAL_RCC_OscConfig+0x288>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f003 0304 	and.w	r3, r3, #4
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d005      	beq.n	8006a56 <HAL_RCC_OscConfig+0x17e>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d101      	bne.n	8006a56 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006a52:	2301      	movs	r3, #1
 8006a54:	e392      	b.n	800717c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006a56:	4b42      	ldr	r3, [pc, #264]	; (8006b60 <HAL_RCC_OscConfig+0x288>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f023 0219 	bic.w	r2, r3, #25
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	68db      	ldr	r3, [r3, #12]
 8006a62:	493f      	ldr	r1, [pc, #252]	; (8006b60 <HAL_RCC_OscConfig+0x288>)
 8006a64:	4313      	orrs	r3, r2
 8006a66:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a68:	f7fc fa42 	bl	8002ef0 <HAL_GetTick>
 8006a6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a6e:	e008      	b.n	8006a82 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a70:	f7fc fa3e 	bl	8002ef0 <HAL_GetTick>
 8006a74:	4602      	mov	r2, r0
 8006a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a78:	1ad3      	subs	r3, r2, r3
 8006a7a:	2b02      	cmp	r3, #2
 8006a7c:	d901      	bls.n	8006a82 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006a7e:	2303      	movs	r3, #3
 8006a80:	e37c      	b.n	800717c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a82:	4b37      	ldr	r3, [pc, #220]	; (8006b60 <HAL_RCC_OscConfig+0x288>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f003 0304 	and.w	r3, r3, #4
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d0f0      	beq.n	8006a70 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a8e:	f7fc fa5f 	bl	8002f50 <HAL_GetREVID>
 8006a92:	4603      	mov	r3, r0
 8006a94:	f241 0203 	movw	r2, #4099	; 0x1003
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d817      	bhi.n	8006acc <HAL_RCC_OscConfig+0x1f4>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	691b      	ldr	r3, [r3, #16]
 8006aa0:	2b40      	cmp	r3, #64	; 0x40
 8006aa2:	d108      	bne.n	8006ab6 <HAL_RCC_OscConfig+0x1de>
 8006aa4:	4b2e      	ldr	r3, [pc, #184]	; (8006b60 <HAL_RCC_OscConfig+0x288>)
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006aac:	4a2c      	ldr	r2, [pc, #176]	; (8006b60 <HAL_RCC_OscConfig+0x288>)
 8006aae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ab2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ab4:	e07a      	b.n	8006bac <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ab6:	4b2a      	ldr	r3, [pc, #168]	; (8006b60 <HAL_RCC_OscConfig+0x288>)
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	691b      	ldr	r3, [r3, #16]
 8006ac2:	031b      	lsls	r3, r3, #12
 8006ac4:	4926      	ldr	r1, [pc, #152]	; (8006b60 <HAL_RCC_OscConfig+0x288>)
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006aca:	e06f      	b.n	8006bac <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006acc:	4b24      	ldr	r3, [pc, #144]	; (8006b60 <HAL_RCC_OscConfig+0x288>)
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	691b      	ldr	r3, [r3, #16]
 8006ad8:	061b      	lsls	r3, r3, #24
 8006ada:	4921      	ldr	r1, [pc, #132]	; (8006b60 <HAL_RCC_OscConfig+0x288>)
 8006adc:	4313      	orrs	r3, r2
 8006ade:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ae0:	e064      	b.n	8006bac <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	68db      	ldr	r3, [r3, #12]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d047      	beq.n	8006b7a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006aea:	4b1d      	ldr	r3, [pc, #116]	; (8006b60 <HAL_RCC_OscConfig+0x288>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f023 0219 	bic.w	r2, r3, #25
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	68db      	ldr	r3, [r3, #12]
 8006af6:	491a      	ldr	r1, [pc, #104]	; (8006b60 <HAL_RCC_OscConfig+0x288>)
 8006af8:	4313      	orrs	r3, r2
 8006afa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006afc:	f7fc f9f8 	bl	8002ef0 <HAL_GetTick>
 8006b00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b02:	e008      	b.n	8006b16 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b04:	f7fc f9f4 	bl	8002ef0 <HAL_GetTick>
 8006b08:	4602      	mov	r2, r0
 8006b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0c:	1ad3      	subs	r3, r2, r3
 8006b0e:	2b02      	cmp	r3, #2
 8006b10:	d901      	bls.n	8006b16 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006b12:	2303      	movs	r3, #3
 8006b14:	e332      	b.n	800717c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b16:	4b12      	ldr	r3, [pc, #72]	; (8006b60 <HAL_RCC_OscConfig+0x288>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f003 0304 	and.w	r3, r3, #4
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d0f0      	beq.n	8006b04 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b22:	f7fc fa15 	bl	8002f50 <HAL_GetREVID>
 8006b26:	4603      	mov	r3, r0
 8006b28:	f241 0203 	movw	r2, #4099	; 0x1003
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d819      	bhi.n	8006b64 <HAL_RCC_OscConfig+0x28c>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	691b      	ldr	r3, [r3, #16]
 8006b34:	2b40      	cmp	r3, #64	; 0x40
 8006b36:	d108      	bne.n	8006b4a <HAL_RCC_OscConfig+0x272>
 8006b38:	4b09      	ldr	r3, [pc, #36]	; (8006b60 <HAL_RCC_OscConfig+0x288>)
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006b40:	4a07      	ldr	r2, [pc, #28]	; (8006b60 <HAL_RCC_OscConfig+0x288>)
 8006b42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b46:	6053      	str	r3, [r2, #4]
 8006b48:	e030      	b.n	8006bac <HAL_RCC_OscConfig+0x2d4>
 8006b4a:	4b05      	ldr	r3, [pc, #20]	; (8006b60 <HAL_RCC_OscConfig+0x288>)
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	691b      	ldr	r3, [r3, #16]
 8006b56:	031b      	lsls	r3, r3, #12
 8006b58:	4901      	ldr	r1, [pc, #4]	; (8006b60 <HAL_RCC_OscConfig+0x288>)
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	604b      	str	r3, [r1, #4]
 8006b5e:	e025      	b.n	8006bac <HAL_RCC_OscConfig+0x2d4>
 8006b60:	58024400 	.word	0x58024400
 8006b64:	4b9a      	ldr	r3, [pc, #616]	; (8006dd0 <HAL_RCC_OscConfig+0x4f8>)
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	691b      	ldr	r3, [r3, #16]
 8006b70:	061b      	lsls	r3, r3, #24
 8006b72:	4997      	ldr	r1, [pc, #604]	; (8006dd0 <HAL_RCC_OscConfig+0x4f8>)
 8006b74:	4313      	orrs	r3, r2
 8006b76:	604b      	str	r3, [r1, #4]
 8006b78:	e018      	b.n	8006bac <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b7a:	4b95      	ldr	r3, [pc, #596]	; (8006dd0 <HAL_RCC_OscConfig+0x4f8>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a94      	ldr	r2, [pc, #592]	; (8006dd0 <HAL_RCC_OscConfig+0x4f8>)
 8006b80:	f023 0301 	bic.w	r3, r3, #1
 8006b84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b86:	f7fc f9b3 	bl	8002ef0 <HAL_GetTick>
 8006b8a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006b8c:	e008      	b.n	8006ba0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b8e:	f7fc f9af 	bl	8002ef0 <HAL_GetTick>
 8006b92:	4602      	mov	r2, r0
 8006b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b96:	1ad3      	subs	r3, r2, r3
 8006b98:	2b02      	cmp	r3, #2
 8006b9a:	d901      	bls.n	8006ba0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006b9c:	2303      	movs	r3, #3
 8006b9e:	e2ed      	b.n	800717c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006ba0:	4b8b      	ldr	r3, [pc, #556]	; (8006dd0 <HAL_RCC_OscConfig+0x4f8>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f003 0304 	and.w	r3, r3, #4
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d1f0      	bne.n	8006b8e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f003 0310 	and.w	r3, r3, #16
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	f000 80a9 	beq.w	8006d0c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006bba:	4b85      	ldr	r3, [pc, #532]	; (8006dd0 <HAL_RCC_OscConfig+0x4f8>)
 8006bbc:	691b      	ldr	r3, [r3, #16]
 8006bbe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006bc2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006bc4:	4b82      	ldr	r3, [pc, #520]	; (8006dd0 <HAL_RCC_OscConfig+0x4f8>)
 8006bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bc8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006bca:	69bb      	ldr	r3, [r7, #24]
 8006bcc:	2b08      	cmp	r3, #8
 8006bce:	d007      	beq.n	8006be0 <HAL_RCC_OscConfig+0x308>
 8006bd0:	69bb      	ldr	r3, [r7, #24]
 8006bd2:	2b18      	cmp	r3, #24
 8006bd4:	d13a      	bne.n	8006c4c <HAL_RCC_OscConfig+0x374>
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	f003 0303 	and.w	r3, r3, #3
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d135      	bne.n	8006c4c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006be0:	4b7b      	ldr	r3, [pc, #492]	; (8006dd0 <HAL_RCC_OscConfig+0x4f8>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d005      	beq.n	8006bf8 <HAL_RCC_OscConfig+0x320>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	69db      	ldr	r3, [r3, #28]
 8006bf0:	2b80      	cmp	r3, #128	; 0x80
 8006bf2:	d001      	beq.n	8006bf8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	e2c1      	b.n	800717c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006bf8:	f7fc f9aa 	bl	8002f50 <HAL_GetREVID>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	f241 0203 	movw	r2, #4099	; 0x1003
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d817      	bhi.n	8006c36 <HAL_RCC_OscConfig+0x35e>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6a1b      	ldr	r3, [r3, #32]
 8006c0a:	2b20      	cmp	r3, #32
 8006c0c:	d108      	bne.n	8006c20 <HAL_RCC_OscConfig+0x348>
 8006c0e:	4b70      	ldr	r3, [pc, #448]	; (8006dd0 <HAL_RCC_OscConfig+0x4f8>)
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006c16:	4a6e      	ldr	r2, [pc, #440]	; (8006dd0 <HAL_RCC_OscConfig+0x4f8>)
 8006c18:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c1c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006c1e:	e075      	b.n	8006d0c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006c20:	4b6b      	ldr	r3, [pc, #428]	; (8006dd0 <HAL_RCC_OscConfig+0x4f8>)
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6a1b      	ldr	r3, [r3, #32]
 8006c2c:	069b      	lsls	r3, r3, #26
 8006c2e:	4968      	ldr	r1, [pc, #416]	; (8006dd0 <HAL_RCC_OscConfig+0x4f8>)
 8006c30:	4313      	orrs	r3, r2
 8006c32:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006c34:	e06a      	b.n	8006d0c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006c36:	4b66      	ldr	r3, [pc, #408]	; (8006dd0 <HAL_RCC_OscConfig+0x4f8>)
 8006c38:	68db      	ldr	r3, [r3, #12]
 8006c3a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6a1b      	ldr	r3, [r3, #32]
 8006c42:	061b      	lsls	r3, r3, #24
 8006c44:	4962      	ldr	r1, [pc, #392]	; (8006dd0 <HAL_RCC_OscConfig+0x4f8>)
 8006c46:	4313      	orrs	r3, r2
 8006c48:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006c4a:	e05f      	b.n	8006d0c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	69db      	ldr	r3, [r3, #28]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d042      	beq.n	8006cda <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006c54:	4b5e      	ldr	r3, [pc, #376]	; (8006dd0 <HAL_RCC_OscConfig+0x4f8>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a5d      	ldr	r2, [pc, #372]	; (8006dd0 <HAL_RCC_OscConfig+0x4f8>)
 8006c5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c60:	f7fc f946 	bl	8002ef0 <HAL_GetTick>
 8006c64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006c66:	e008      	b.n	8006c7a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006c68:	f7fc f942 	bl	8002ef0 <HAL_GetTick>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c70:	1ad3      	subs	r3, r2, r3
 8006c72:	2b02      	cmp	r3, #2
 8006c74:	d901      	bls.n	8006c7a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006c76:	2303      	movs	r3, #3
 8006c78:	e280      	b.n	800717c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006c7a:	4b55      	ldr	r3, [pc, #340]	; (8006dd0 <HAL_RCC_OscConfig+0x4f8>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d0f0      	beq.n	8006c68 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006c86:	f7fc f963 	bl	8002f50 <HAL_GetREVID>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	f241 0203 	movw	r2, #4099	; 0x1003
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d817      	bhi.n	8006cc4 <HAL_RCC_OscConfig+0x3ec>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6a1b      	ldr	r3, [r3, #32]
 8006c98:	2b20      	cmp	r3, #32
 8006c9a:	d108      	bne.n	8006cae <HAL_RCC_OscConfig+0x3d6>
 8006c9c:	4b4c      	ldr	r3, [pc, #304]	; (8006dd0 <HAL_RCC_OscConfig+0x4f8>)
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006ca4:	4a4a      	ldr	r2, [pc, #296]	; (8006dd0 <HAL_RCC_OscConfig+0x4f8>)
 8006ca6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006caa:	6053      	str	r3, [r2, #4]
 8006cac:	e02e      	b.n	8006d0c <HAL_RCC_OscConfig+0x434>
 8006cae:	4b48      	ldr	r3, [pc, #288]	; (8006dd0 <HAL_RCC_OscConfig+0x4f8>)
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6a1b      	ldr	r3, [r3, #32]
 8006cba:	069b      	lsls	r3, r3, #26
 8006cbc:	4944      	ldr	r1, [pc, #272]	; (8006dd0 <HAL_RCC_OscConfig+0x4f8>)
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	604b      	str	r3, [r1, #4]
 8006cc2:	e023      	b.n	8006d0c <HAL_RCC_OscConfig+0x434>
 8006cc4:	4b42      	ldr	r3, [pc, #264]	; (8006dd0 <HAL_RCC_OscConfig+0x4f8>)
 8006cc6:	68db      	ldr	r3, [r3, #12]
 8006cc8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6a1b      	ldr	r3, [r3, #32]
 8006cd0:	061b      	lsls	r3, r3, #24
 8006cd2:	493f      	ldr	r1, [pc, #252]	; (8006dd0 <HAL_RCC_OscConfig+0x4f8>)
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	60cb      	str	r3, [r1, #12]
 8006cd8:	e018      	b.n	8006d0c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006cda:	4b3d      	ldr	r3, [pc, #244]	; (8006dd0 <HAL_RCC_OscConfig+0x4f8>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a3c      	ldr	r2, [pc, #240]	; (8006dd0 <HAL_RCC_OscConfig+0x4f8>)
 8006ce0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ce4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ce6:	f7fc f903 	bl	8002ef0 <HAL_GetTick>
 8006cea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006cec:	e008      	b.n	8006d00 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006cee:	f7fc f8ff 	bl	8002ef0 <HAL_GetTick>
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf6:	1ad3      	subs	r3, r2, r3
 8006cf8:	2b02      	cmp	r3, #2
 8006cfa:	d901      	bls.n	8006d00 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006cfc:	2303      	movs	r3, #3
 8006cfe:	e23d      	b.n	800717c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006d00:	4b33      	ldr	r3, [pc, #204]	; (8006dd0 <HAL_RCC_OscConfig+0x4f8>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d1f0      	bne.n	8006cee <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f003 0308 	and.w	r3, r3, #8
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d036      	beq.n	8006d86 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	695b      	ldr	r3, [r3, #20]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d019      	beq.n	8006d54 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d20:	4b2b      	ldr	r3, [pc, #172]	; (8006dd0 <HAL_RCC_OscConfig+0x4f8>)
 8006d22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d24:	4a2a      	ldr	r2, [pc, #168]	; (8006dd0 <HAL_RCC_OscConfig+0x4f8>)
 8006d26:	f043 0301 	orr.w	r3, r3, #1
 8006d2a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d2c:	f7fc f8e0 	bl	8002ef0 <HAL_GetTick>
 8006d30:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006d32:	e008      	b.n	8006d46 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d34:	f7fc f8dc 	bl	8002ef0 <HAL_GetTick>
 8006d38:	4602      	mov	r2, r0
 8006d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3c:	1ad3      	subs	r3, r2, r3
 8006d3e:	2b02      	cmp	r3, #2
 8006d40:	d901      	bls.n	8006d46 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006d42:	2303      	movs	r3, #3
 8006d44:	e21a      	b.n	800717c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006d46:	4b22      	ldr	r3, [pc, #136]	; (8006dd0 <HAL_RCC_OscConfig+0x4f8>)
 8006d48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d4a:	f003 0302 	and.w	r3, r3, #2
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d0f0      	beq.n	8006d34 <HAL_RCC_OscConfig+0x45c>
 8006d52:	e018      	b.n	8006d86 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d54:	4b1e      	ldr	r3, [pc, #120]	; (8006dd0 <HAL_RCC_OscConfig+0x4f8>)
 8006d56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d58:	4a1d      	ldr	r2, [pc, #116]	; (8006dd0 <HAL_RCC_OscConfig+0x4f8>)
 8006d5a:	f023 0301 	bic.w	r3, r3, #1
 8006d5e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d60:	f7fc f8c6 	bl	8002ef0 <HAL_GetTick>
 8006d64:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006d66:	e008      	b.n	8006d7a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d68:	f7fc f8c2 	bl	8002ef0 <HAL_GetTick>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d70:	1ad3      	subs	r3, r2, r3
 8006d72:	2b02      	cmp	r3, #2
 8006d74:	d901      	bls.n	8006d7a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006d76:	2303      	movs	r3, #3
 8006d78:	e200      	b.n	800717c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006d7a:	4b15      	ldr	r3, [pc, #84]	; (8006dd0 <HAL_RCC_OscConfig+0x4f8>)
 8006d7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d7e:	f003 0302 	and.w	r3, r3, #2
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d1f0      	bne.n	8006d68 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f003 0320 	and.w	r3, r3, #32
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d039      	beq.n	8006e06 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	699b      	ldr	r3, [r3, #24]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d01c      	beq.n	8006dd4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006d9a:	4b0d      	ldr	r3, [pc, #52]	; (8006dd0 <HAL_RCC_OscConfig+0x4f8>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a0c      	ldr	r2, [pc, #48]	; (8006dd0 <HAL_RCC_OscConfig+0x4f8>)
 8006da0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006da4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006da6:	f7fc f8a3 	bl	8002ef0 <HAL_GetTick>
 8006daa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006dac:	e008      	b.n	8006dc0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006dae:	f7fc f89f 	bl	8002ef0 <HAL_GetTick>
 8006db2:	4602      	mov	r2, r0
 8006db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db6:	1ad3      	subs	r3, r2, r3
 8006db8:	2b02      	cmp	r3, #2
 8006dba:	d901      	bls.n	8006dc0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006dbc:	2303      	movs	r3, #3
 8006dbe:	e1dd      	b.n	800717c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006dc0:	4b03      	ldr	r3, [pc, #12]	; (8006dd0 <HAL_RCC_OscConfig+0x4f8>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d0f0      	beq.n	8006dae <HAL_RCC_OscConfig+0x4d6>
 8006dcc:	e01b      	b.n	8006e06 <HAL_RCC_OscConfig+0x52e>
 8006dce:	bf00      	nop
 8006dd0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006dd4:	4b9b      	ldr	r3, [pc, #620]	; (8007044 <HAL_RCC_OscConfig+0x76c>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a9a      	ldr	r2, [pc, #616]	; (8007044 <HAL_RCC_OscConfig+0x76c>)
 8006dda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006dde:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006de0:	f7fc f886 	bl	8002ef0 <HAL_GetTick>
 8006de4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006de6:	e008      	b.n	8006dfa <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006de8:	f7fc f882 	bl	8002ef0 <HAL_GetTick>
 8006dec:	4602      	mov	r2, r0
 8006dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df0:	1ad3      	subs	r3, r2, r3
 8006df2:	2b02      	cmp	r3, #2
 8006df4:	d901      	bls.n	8006dfa <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006df6:	2303      	movs	r3, #3
 8006df8:	e1c0      	b.n	800717c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006dfa:	4b92      	ldr	r3, [pc, #584]	; (8007044 <HAL_RCC_OscConfig+0x76c>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d1f0      	bne.n	8006de8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f003 0304 	and.w	r3, r3, #4
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	f000 8081 	beq.w	8006f16 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006e14:	4b8c      	ldr	r3, [pc, #560]	; (8007048 <HAL_RCC_OscConfig+0x770>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a8b      	ldr	r2, [pc, #556]	; (8007048 <HAL_RCC_OscConfig+0x770>)
 8006e1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e1e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006e20:	f7fc f866 	bl	8002ef0 <HAL_GetTick>
 8006e24:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e26:	e008      	b.n	8006e3a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e28:	f7fc f862 	bl	8002ef0 <HAL_GetTick>
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e30:	1ad3      	subs	r3, r2, r3
 8006e32:	2b64      	cmp	r3, #100	; 0x64
 8006e34:	d901      	bls.n	8006e3a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006e36:	2303      	movs	r3, #3
 8006e38:	e1a0      	b.n	800717c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e3a:	4b83      	ldr	r3, [pc, #524]	; (8007048 <HAL_RCC_OscConfig+0x770>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d0f0      	beq.n	8006e28 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d106      	bne.n	8006e5c <HAL_RCC_OscConfig+0x584>
 8006e4e:	4b7d      	ldr	r3, [pc, #500]	; (8007044 <HAL_RCC_OscConfig+0x76c>)
 8006e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e52:	4a7c      	ldr	r2, [pc, #496]	; (8007044 <HAL_RCC_OscConfig+0x76c>)
 8006e54:	f043 0301 	orr.w	r3, r3, #1
 8006e58:	6713      	str	r3, [r2, #112]	; 0x70
 8006e5a:	e02d      	b.n	8006eb8 <HAL_RCC_OscConfig+0x5e0>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d10c      	bne.n	8006e7e <HAL_RCC_OscConfig+0x5a6>
 8006e64:	4b77      	ldr	r3, [pc, #476]	; (8007044 <HAL_RCC_OscConfig+0x76c>)
 8006e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e68:	4a76      	ldr	r2, [pc, #472]	; (8007044 <HAL_RCC_OscConfig+0x76c>)
 8006e6a:	f023 0301 	bic.w	r3, r3, #1
 8006e6e:	6713      	str	r3, [r2, #112]	; 0x70
 8006e70:	4b74      	ldr	r3, [pc, #464]	; (8007044 <HAL_RCC_OscConfig+0x76c>)
 8006e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e74:	4a73      	ldr	r2, [pc, #460]	; (8007044 <HAL_RCC_OscConfig+0x76c>)
 8006e76:	f023 0304 	bic.w	r3, r3, #4
 8006e7a:	6713      	str	r3, [r2, #112]	; 0x70
 8006e7c:	e01c      	b.n	8006eb8 <HAL_RCC_OscConfig+0x5e0>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	2b05      	cmp	r3, #5
 8006e84:	d10c      	bne.n	8006ea0 <HAL_RCC_OscConfig+0x5c8>
 8006e86:	4b6f      	ldr	r3, [pc, #444]	; (8007044 <HAL_RCC_OscConfig+0x76c>)
 8006e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e8a:	4a6e      	ldr	r2, [pc, #440]	; (8007044 <HAL_RCC_OscConfig+0x76c>)
 8006e8c:	f043 0304 	orr.w	r3, r3, #4
 8006e90:	6713      	str	r3, [r2, #112]	; 0x70
 8006e92:	4b6c      	ldr	r3, [pc, #432]	; (8007044 <HAL_RCC_OscConfig+0x76c>)
 8006e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e96:	4a6b      	ldr	r2, [pc, #428]	; (8007044 <HAL_RCC_OscConfig+0x76c>)
 8006e98:	f043 0301 	orr.w	r3, r3, #1
 8006e9c:	6713      	str	r3, [r2, #112]	; 0x70
 8006e9e:	e00b      	b.n	8006eb8 <HAL_RCC_OscConfig+0x5e0>
 8006ea0:	4b68      	ldr	r3, [pc, #416]	; (8007044 <HAL_RCC_OscConfig+0x76c>)
 8006ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ea4:	4a67      	ldr	r2, [pc, #412]	; (8007044 <HAL_RCC_OscConfig+0x76c>)
 8006ea6:	f023 0301 	bic.w	r3, r3, #1
 8006eaa:	6713      	str	r3, [r2, #112]	; 0x70
 8006eac:	4b65      	ldr	r3, [pc, #404]	; (8007044 <HAL_RCC_OscConfig+0x76c>)
 8006eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eb0:	4a64      	ldr	r2, [pc, #400]	; (8007044 <HAL_RCC_OscConfig+0x76c>)
 8006eb2:	f023 0304 	bic.w	r3, r3, #4
 8006eb6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	689b      	ldr	r3, [r3, #8]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d015      	beq.n	8006eec <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ec0:	f7fc f816 	bl	8002ef0 <HAL_GetTick>
 8006ec4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006ec6:	e00a      	b.n	8006ede <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ec8:	f7fc f812 	bl	8002ef0 <HAL_GetTick>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed0:	1ad3      	subs	r3, r2, r3
 8006ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d901      	bls.n	8006ede <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006eda:	2303      	movs	r3, #3
 8006edc:	e14e      	b.n	800717c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006ede:	4b59      	ldr	r3, [pc, #356]	; (8007044 <HAL_RCC_OscConfig+0x76c>)
 8006ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ee2:	f003 0302 	and.w	r3, r3, #2
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d0ee      	beq.n	8006ec8 <HAL_RCC_OscConfig+0x5f0>
 8006eea:	e014      	b.n	8006f16 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006eec:	f7fc f800 	bl	8002ef0 <HAL_GetTick>
 8006ef0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006ef2:	e00a      	b.n	8006f0a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ef4:	f7fb fffc 	bl	8002ef0 <HAL_GetTick>
 8006ef8:	4602      	mov	r2, r0
 8006efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efc:	1ad3      	subs	r3, r2, r3
 8006efe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d901      	bls.n	8006f0a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006f06:	2303      	movs	r3, #3
 8006f08:	e138      	b.n	800717c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006f0a:	4b4e      	ldr	r3, [pc, #312]	; (8007044 <HAL_RCC_OscConfig+0x76c>)
 8006f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f0e:	f003 0302 	and.w	r3, r3, #2
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d1ee      	bne.n	8006ef4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	f000 812d 	beq.w	800717a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006f20:	4b48      	ldr	r3, [pc, #288]	; (8007044 <HAL_RCC_OscConfig+0x76c>)
 8006f22:	691b      	ldr	r3, [r3, #16]
 8006f24:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f28:	2b18      	cmp	r3, #24
 8006f2a:	f000 80bd 	beq.w	80070a8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f32:	2b02      	cmp	r3, #2
 8006f34:	f040 809e 	bne.w	8007074 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f38:	4b42      	ldr	r3, [pc, #264]	; (8007044 <HAL_RCC_OscConfig+0x76c>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a41      	ldr	r2, [pc, #260]	; (8007044 <HAL_RCC_OscConfig+0x76c>)
 8006f3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f44:	f7fb ffd4 	bl	8002ef0 <HAL_GetTick>
 8006f48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006f4a:	e008      	b.n	8006f5e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f4c:	f7fb ffd0 	bl	8002ef0 <HAL_GetTick>
 8006f50:	4602      	mov	r2, r0
 8006f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f54:	1ad3      	subs	r3, r2, r3
 8006f56:	2b02      	cmp	r3, #2
 8006f58:	d901      	bls.n	8006f5e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006f5a:	2303      	movs	r3, #3
 8006f5c:	e10e      	b.n	800717c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006f5e:	4b39      	ldr	r3, [pc, #228]	; (8007044 <HAL_RCC_OscConfig+0x76c>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d1f0      	bne.n	8006f4c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006f6a:	4b36      	ldr	r3, [pc, #216]	; (8007044 <HAL_RCC_OscConfig+0x76c>)
 8006f6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f6e:	4b37      	ldr	r3, [pc, #220]	; (800704c <HAL_RCC_OscConfig+0x774>)
 8006f70:	4013      	ands	r3, r2
 8006f72:	687a      	ldr	r2, [r7, #4]
 8006f74:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006f76:	687a      	ldr	r2, [r7, #4]
 8006f78:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006f7a:	0112      	lsls	r2, r2, #4
 8006f7c:	430a      	orrs	r2, r1
 8006f7e:	4931      	ldr	r1, [pc, #196]	; (8007044 <HAL_RCC_OscConfig+0x76c>)
 8006f80:	4313      	orrs	r3, r2
 8006f82:	628b      	str	r3, [r1, #40]	; 0x28
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f88:	3b01      	subs	r3, #1
 8006f8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f92:	3b01      	subs	r3, #1
 8006f94:	025b      	lsls	r3, r3, #9
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	431a      	orrs	r2, r3
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f9e:	3b01      	subs	r3, #1
 8006fa0:	041b      	lsls	r3, r3, #16
 8006fa2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006fa6:	431a      	orrs	r2, r3
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fac:	3b01      	subs	r3, #1
 8006fae:	061b      	lsls	r3, r3, #24
 8006fb0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006fb4:	4923      	ldr	r1, [pc, #140]	; (8007044 <HAL_RCC_OscConfig+0x76c>)
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006fba:	4b22      	ldr	r3, [pc, #136]	; (8007044 <HAL_RCC_OscConfig+0x76c>)
 8006fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fbe:	4a21      	ldr	r2, [pc, #132]	; (8007044 <HAL_RCC_OscConfig+0x76c>)
 8006fc0:	f023 0301 	bic.w	r3, r3, #1
 8006fc4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006fc6:	4b1f      	ldr	r3, [pc, #124]	; (8007044 <HAL_RCC_OscConfig+0x76c>)
 8006fc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fca:	4b21      	ldr	r3, [pc, #132]	; (8007050 <HAL_RCC_OscConfig+0x778>)
 8006fcc:	4013      	ands	r3, r2
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006fd2:	00d2      	lsls	r2, r2, #3
 8006fd4:	491b      	ldr	r1, [pc, #108]	; (8007044 <HAL_RCC_OscConfig+0x76c>)
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006fda:	4b1a      	ldr	r3, [pc, #104]	; (8007044 <HAL_RCC_OscConfig+0x76c>)
 8006fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fde:	f023 020c 	bic.w	r2, r3, #12
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fe6:	4917      	ldr	r1, [pc, #92]	; (8007044 <HAL_RCC_OscConfig+0x76c>)
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006fec:	4b15      	ldr	r3, [pc, #84]	; (8007044 <HAL_RCC_OscConfig+0x76c>)
 8006fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ff0:	f023 0202 	bic.w	r2, r3, #2
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ff8:	4912      	ldr	r1, [pc, #72]	; (8007044 <HAL_RCC_OscConfig+0x76c>)
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006ffe:	4b11      	ldr	r3, [pc, #68]	; (8007044 <HAL_RCC_OscConfig+0x76c>)
 8007000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007002:	4a10      	ldr	r2, [pc, #64]	; (8007044 <HAL_RCC_OscConfig+0x76c>)
 8007004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007008:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800700a:	4b0e      	ldr	r3, [pc, #56]	; (8007044 <HAL_RCC_OscConfig+0x76c>)
 800700c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800700e:	4a0d      	ldr	r2, [pc, #52]	; (8007044 <HAL_RCC_OscConfig+0x76c>)
 8007010:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007014:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007016:	4b0b      	ldr	r3, [pc, #44]	; (8007044 <HAL_RCC_OscConfig+0x76c>)
 8007018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800701a:	4a0a      	ldr	r2, [pc, #40]	; (8007044 <HAL_RCC_OscConfig+0x76c>)
 800701c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007020:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007022:	4b08      	ldr	r3, [pc, #32]	; (8007044 <HAL_RCC_OscConfig+0x76c>)
 8007024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007026:	4a07      	ldr	r2, [pc, #28]	; (8007044 <HAL_RCC_OscConfig+0x76c>)
 8007028:	f043 0301 	orr.w	r3, r3, #1
 800702c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800702e:	4b05      	ldr	r3, [pc, #20]	; (8007044 <HAL_RCC_OscConfig+0x76c>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a04      	ldr	r2, [pc, #16]	; (8007044 <HAL_RCC_OscConfig+0x76c>)
 8007034:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007038:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800703a:	f7fb ff59 	bl	8002ef0 <HAL_GetTick>
 800703e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007040:	e011      	b.n	8007066 <HAL_RCC_OscConfig+0x78e>
 8007042:	bf00      	nop
 8007044:	58024400 	.word	0x58024400
 8007048:	58024800 	.word	0x58024800
 800704c:	fffffc0c 	.word	0xfffffc0c
 8007050:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007054:	f7fb ff4c 	bl	8002ef0 <HAL_GetTick>
 8007058:	4602      	mov	r2, r0
 800705a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800705c:	1ad3      	subs	r3, r2, r3
 800705e:	2b02      	cmp	r3, #2
 8007060:	d901      	bls.n	8007066 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8007062:	2303      	movs	r3, #3
 8007064:	e08a      	b.n	800717c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007066:	4b47      	ldr	r3, [pc, #284]	; (8007184 <HAL_RCC_OscConfig+0x8ac>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800706e:	2b00      	cmp	r3, #0
 8007070:	d0f0      	beq.n	8007054 <HAL_RCC_OscConfig+0x77c>
 8007072:	e082      	b.n	800717a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007074:	4b43      	ldr	r3, [pc, #268]	; (8007184 <HAL_RCC_OscConfig+0x8ac>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a42      	ldr	r2, [pc, #264]	; (8007184 <HAL_RCC_OscConfig+0x8ac>)
 800707a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800707e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007080:	f7fb ff36 	bl	8002ef0 <HAL_GetTick>
 8007084:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007086:	e008      	b.n	800709a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007088:	f7fb ff32 	bl	8002ef0 <HAL_GetTick>
 800708c:	4602      	mov	r2, r0
 800708e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007090:	1ad3      	subs	r3, r2, r3
 8007092:	2b02      	cmp	r3, #2
 8007094:	d901      	bls.n	800709a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8007096:	2303      	movs	r3, #3
 8007098:	e070      	b.n	800717c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800709a:	4b3a      	ldr	r3, [pc, #232]	; (8007184 <HAL_RCC_OscConfig+0x8ac>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d1f0      	bne.n	8007088 <HAL_RCC_OscConfig+0x7b0>
 80070a6:	e068      	b.n	800717a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80070a8:	4b36      	ldr	r3, [pc, #216]	; (8007184 <HAL_RCC_OscConfig+0x8ac>)
 80070aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ac:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80070ae:	4b35      	ldr	r3, [pc, #212]	; (8007184 <HAL_RCC_OscConfig+0x8ac>)
 80070b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070b2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d031      	beq.n	8007120 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	f003 0203 	and.w	r2, r3, #3
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d12a      	bne.n	8007120 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	091b      	lsrs	r3, r3, #4
 80070ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d122      	bne.n	8007120 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070e4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d11a      	bne.n	8007120 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	0a5b      	lsrs	r3, r3, #9
 80070ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070f6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d111      	bne.n	8007120 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	0c1b      	lsrs	r3, r3, #16
 8007100:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007108:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800710a:	429a      	cmp	r2, r3
 800710c:	d108      	bne.n	8007120 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	0e1b      	lsrs	r3, r3, #24
 8007112:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800711a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800711c:	429a      	cmp	r2, r3
 800711e:	d001      	beq.n	8007124 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8007120:	2301      	movs	r3, #1
 8007122:	e02b      	b.n	800717c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007124:	4b17      	ldr	r3, [pc, #92]	; (8007184 <HAL_RCC_OscConfig+0x8ac>)
 8007126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007128:	08db      	lsrs	r3, r3, #3
 800712a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800712e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007134:	693a      	ldr	r2, [r7, #16]
 8007136:	429a      	cmp	r2, r3
 8007138:	d01f      	beq.n	800717a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800713a:	4b12      	ldr	r3, [pc, #72]	; (8007184 <HAL_RCC_OscConfig+0x8ac>)
 800713c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800713e:	4a11      	ldr	r2, [pc, #68]	; (8007184 <HAL_RCC_OscConfig+0x8ac>)
 8007140:	f023 0301 	bic.w	r3, r3, #1
 8007144:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007146:	f7fb fed3 	bl	8002ef0 <HAL_GetTick>
 800714a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800714c:	bf00      	nop
 800714e:	f7fb fecf 	bl	8002ef0 <HAL_GetTick>
 8007152:	4602      	mov	r2, r0
 8007154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007156:	4293      	cmp	r3, r2
 8007158:	d0f9      	beq.n	800714e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800715a:	4b0a      	ldr	r3, [pc, #40]	; (8007184 <HAL_RCC_OscConfig+0x8ac>)
 800715c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800715e:	4b0a      	ldr	r3, [pc, #40]	; (8007188 <HAL_RCC_OscConfig+0x8b0>)
 8007160:	4013      	ands	r3, r2
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007166:	00d2      	lsls	r2, r2, #3
 8007168:	4906      	ldr	r1, [pc, #24]	; (8007184 <HAL_RCC_OscConfig+0x8ac>)
 800716a:	4313      	orrs	r3, r2
 800716c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800716e:	4b05      	ldr	r3, [pc, #20]	; (8007184 <HAL_RCC_OscConfig+0x8ac>)
 8007170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007172:	4a04      	ldr	r2, [pc, #16]	; (8007184 <HAL_RCC_OscConfig+0x8ac>)
 8007174:	f043 0301 	orr.w	r3, r3, #1
 8007178:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800717a:	2300      	movs	r3, #0
}
 800717c:	4618      	mov	r0, r3
 800717e:	3730      	adds	r7, #48	; 0x30
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}
 8007184:	58024400 	.word	0x58024400
 8007188:	ffff0007 	.word	0xffff0007

0800718c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b086      	sub	sp, #24
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d101      	bne.n	80071a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800719c:	2301      	movs	r3, #1
 800719e:	e19c      	b.n	80074da <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80071a0:	4b8a      	ldr	r3, [pc, #552]	; (80073cc <HAL_RCC_ClockConfig+0x240>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f003 030f 	and.w	r3, r3, #15
 80071a8:	683a      	ldr	r2, [r7, #0]
 80071aa:	429a      	cmp	r2, r3
 80071ac:	d910      	bls.n	80071d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071ae:	4b87      	ldr	r3, [pc, #540]	; (80073cc <HAL_RCC_ClockConfig+0x240>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f023 020f 	bic.w	r2, r3, #15
 80071b6:	4985      	ldr	r1, [pc, #532]	; (80073cc <HAL_RCC_ClockConfig+0x240>)
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	4313      	orrs	r3, r2
 80071bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071be:	4b83      	ldr	r3, [pc, #524]	; (80073cc <HAL_RCC_ClockConfig+0x240>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f003 030f 	and.w	r3, r3, #15
 80071c6:	683a      	ldr	r2, [r7, #0]
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d001      	beq.n	80071d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80071cc:	2301      	movs	r3, #1
 80071ce:	e184      	b.n	80074da <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f003 0304 	and.w	r3, r3, #4
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d010      	beq.n	80071fe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	691a      	ldr	r2, [r3, #16]
 80071e0:	4b7b      	ldr	r3, [pc, #492]	; (80073d0 <HAL_RCC_ClockConfig+0x244>)
 80071e2:	699b      	ldr	r3, [r3, #24]
 80071e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d908      	bls.n	80071fe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80071ec:	4b78      	ldr	r3, [pc, #480]	; (80073d0 <HAL_RCC_ClockConfig+0x244>)
 80071ee:	699b      	ldr	r3, [r3, #24]
 80071f0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	691b      	ldr	r3, [r3, #16]
 80071f8:	4975      	ldr	r1, [pc, #468]	; (80073d0 <HAL_RCC_ClockConfig+0x244>)
 80071fa:	4313      	orrs	r3, r2
 80071fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f003 0308 	and.w	r3, r3, #8
 8007206:	2b00      	cmp	r3, #0
 8007208:	d010      	beq.n	800722c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	695a      	ldr	r2, [r3, #20]
 800720e:	4b70      	ldr	r3, [pc, #448]	; (80073d0 <HAL_RCC_ClockConfig+0x244>)
 8007210:	69db      	ldr	r3, [r3, #28]
 8007212:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007216:	429a      	cmp	r2, r3
 8007218:	d908      	bls.n	800722c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800721a:	4b6d      	ldr	r3, [pc, #436]	; (80073d0 <HAL_RCC_ClockConfig+0x244>)
 800721c:	69db      	ldr	r3, [r3, #28]
 800721e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	695b      	ldr	r3, [r3, #20]
 8007226:	496a      	ldr	r1, [pc, #424]	; (80073d0 <HAL_RCC_ClockConfig+0x244>)
 8007228:	4313      	orrs	r3, r2
 800722a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f003 0310 	and.w	r3, r3, #16
 8007234:	2b00      	cmp	r3, #0
 8007236:	d010      	beq.n	800725a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	699a      	ldr	r2, [r3, #24]
 800723c:	4b64      	ldr	r3, [pc, #400]	; (80073d0 <HAL_RCC_ClockConfig+0x244>)
 800723e:	69db      	ldr	r3, [r3, #28]
 8007240:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007244:	429a      	cmp	r2, r3
 8007246:	d908      	bls.n	800725a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007248:	4b61      	ldr	r3, [pc, #388]	; (80073d0 <HAL_RCC_ClockConfig+0x244>)
 800724a:	69db      	ldr	r3, [r3, #28]
 800724c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	699b      	ldr	r3, [r3, #24]
 8007254:	495e      	ldr	r1, [pc, #376]	; (80073d0 <HAL_RCC_ClockConfig+0x244>)
 8007256:	4313      	orrs	r3, r2
 8007258:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f003 0320 	and.w	r3, r3, #32
 8007262:	2b00      	cmp	r3, #0
 8007264:	d010      	beq.n	8007288 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	69da      	ldr	r2, [r3, #28]
 800726a:	4b59      	ldr	r3, [pc, #356]	; (80073d0 <HAL_RCC_ClockConfig+0x244>)
 800726c:	6a1b      	ldr	r3, [r3, #32]
 800726e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007272:	429a      	cmp	r2, r3
 8007274:	d908      	bls.n	8007288 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007276:	4b56      	ldr	r3, [pc, #344]	; (80073d0 <HAL_RCC_ClockConfig+0x244>)
 8007278:	6a1b      	ldr	r3, [r3, #32]
 800727a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	69db      	ldr	r3, [r3, #28]
 8007282:	4953      	ldr	r1, [pc, #332]	; (80073d0 <HAL_RCC_ClockConfig+0x244>)
 8007284:	4313      	orrs	r3, r2
 8007286:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f003 0302 	and.w	r3, r3, #2
 8007290:	2b00      	cmp	r3, #0
 8007292:	d010      	beq.n	80072b6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	68da      	ldr	r2, [r3, #12]
 8007298:	4b4d      	ldr	r3, [pc, #308]	; (80073d0 <HAL_RCC_ClockConfig+0x244>)
 800729a:	699b      	ldr	r3, [r3, #24]
 800729c:	f003 030f 	and.w	r3, r3, #15
 80072a0:	429a      	cmp	r2, r3
 80072a2:	d908      	bls.n	80072b6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80072a4:	4b4a      	ldr	r3, [pc, #296]	; (80073d0 <HAL_RCC_ClockConfig+0x244>)
 80072a6:	699b      	ldr	r3, [r3, #24]
 80072a8:	f023 020f 	bic.w	r2, r3, #15
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	68db      	ldr	r3, [r3, #12]
 80072b0:	4947      	ldr	r1, [pc, #284]	; (80073d0 <HAL_RCC_ClockConfig+0x244>)
 80072b2:	4313      	orrs	r3, r2
 80072b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f003 0301 	and.w	r3, r3, #1
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d055      	beq.n	800736e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80072c2:	4b43      	ldr	r3, [pc, #268]	; (80073d0 <HAL_RCC_ClockConfig+0x244>)
 80072c4:	699b      	ldr	r3, [r3, #24]
 80072c6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	4940      	ldr	r1, [pc, #256]	; (80073d0 <HAL_RCC_ClockConfig+0x244>)
 80072d0:	4313      	orrs	r3, r2
 80072d2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	2b02      	cmp	r3, #2
 80072da:	d107      	bne.n	80072ec <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80072dc:	4b3c      	ldr	r3, [pc, #240]	; (80073d0 <HAL_RCC_ClockConfig+0x244>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d121      	bne.n	800732c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80072e8:	2301      	movs	r3, #1
 80072ea:	e0f6      	b.n	80074da <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	2b03      	cmp	r3, #3
 80072f2:	d107      	bne.n	8007304 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80072f4:	4b36      	ldr	r3, [pc, #216]	; (80073d0 <HAL_RCC_ClockConfig+0x244>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d115      	bne.n	800732c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007300:	2301      	movs	r3, #1
 8007302:	e0ea      	b.n	80074da <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	2b01      	cmp	r3, #1
 800730a:	d107      	bne.n	800731c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800730c:	4b30      	ldr	r3, [pc, #192]	; (80073d0 <HAL_RCC_ClockConfig+0x244>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007314:	2b00      	cmp	r3, #0
 8007316:	d109      	bne.n	800732c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007318:	2301      	movs	r3, #1
 800731a:	e0de      	b.n	80074da <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800731c:	4b2c      	ldr	r3, [pc, #176]	; (80073d0 <HAL_RCC_ClockConfig+0x244>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f003 0304 	and.w	r3, r3, #4
 8007324:	2b00      	cmp	r3, #0
 8007326:	d101      	bne.n	800732c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007328:	2301      	movs	r3, #1
 800732a:	e0d6      	b.n	80074da <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800732c:	4b28      	ldr	r3, [pc, #160]	; (80073d0 <HAL_RCC_ClockConfig+0x244>)
 800732e:	691b      	ldr	r3, [r3, #16]
 8007330:	f023 0207 	bic.w	r2, r3, #7
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	4925      	ldr	r1, [pc, #148]	; (80073d0 <HAL_RCC_ClockConfig+0x244>)
 800733a:	4313      	orrs	r3, r2
 800733c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800733e:	f7fb fdd7 	bl	8002ef0 <HAL_GetTick>
 8007342:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007344:	e00a      	b.n	800735c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007346:	f7fb fdd3 	bl	8002ef0 <HAL_GetTick>
 800734a:	4602      	mov	r2, r0
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	1ad3      	subs	r3, r2, r3
 8007350:	f241 3288 	movw	r2, #5000	; 0x1388
 8007354:	4293      	cmp	r3, r2
 8007356:	d901      	bls.n	800735c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007358:	2303      	movs	r3, #3
 800735a:	e0be      	b.n	80074da <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800735c:	4b1c      	ldr	r3, [pc, #112]	; (80073d0 <HAL_RCC_ClockConfig+0x244>)
 800735e:	691b      	ldr	r3, [r3, #16]
 8007360:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	00db      	lsls	r3, r3, #3
 800736a:	429a      	cmp	r2, r3
 800736c:	d1eb      	bne.n	8007346 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f003 0302 	and.w	r3, r3, #2
 8007376:	2b00      	cmp	r3, #0
 8007378:	d010      	beq.n	800739c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	68da      	ldr	r2, [r3, #12]
 800737e:	4b14      	ldr	r3, [pc, #80]	; (80073d0 <HAL_RCC_ClockConfig+0x244>)
 8007380:	699b      	ldr	r3, [r3, #24]
 8007382:	f003 030f 	and.w	r3, r3, #15
 8007386:	429a      	cmp	r2, r3
 8007388:	d208      	bcs.n	800739c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800738a:	4b11      	ldr	r3, [pc, #68]	; (80073d0 <HAL_RCC_ClockConfig+0x244>)
 800738c:	699b      	ldr	r3, [r3, #24]
 800738e:	f023 020f 	bic.w	r2, r3, #15
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	68db      	ldr	r3, [r3, #12]
 8007396:	490e      	ldr	r1, [pc, #56]	; (80073d0 <HAL_RCC_ClockConfig+0x244>)
 8007398:	4313      	orrs	r3, r2
 800739a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800739c:	4b0b      	ldr	r3, [pc, #44]	; (80073cc <HAL_RCC_ClockConfig+0x240>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f003 030f 	and.w	r3, r3, #15
 80073a4:	683a      	ldr	r2, [r7, #0]
 80073a6:	429a      	cmp	r2, r3
 80073a8:	d214      	bcs.n	80073d4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073aa:	4b08      	ldr	r3, [pc, #32]	; (80073cc <HAL_RCC_ClockConfig+0x240>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f023 020f 	bic.w	r2, r3, #15
 80073b2:	4906      	ldr	r1, [pc, #24]	; (80073cc <HAL_RCC_ClockConfig+0x240>)
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	4313      	orrs	r3, r2
 80073b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80073ba:	4b04      	ldr	r3, [pc, #16]	; (80073cc <HAL_RCC_ClockConfig+0x240>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f003 030f 	and.w	r3, r3, #15
 80073c2:	683a      	ldr	r2, [r7, #0]
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d005      	beq.n	80073d4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80073c8:	2301      	movs	r3, #1
 80073ca:	e086      	b.n	80074da <HAL_RCC_ClockConfig+0x34e>
 80073cc:	52002000 	.word	0x52002000
 80073d0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f003 0304 	and.w	r3, r3, #4
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d010      	beq.n	8007402 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	691a      	ldr	r2, [r3, #16]
 80073e4:	4b3f      	ldr	r3, [pc, #252]	; (80074e4 <HAL_RCC_ClockConfig+0x358>)
 80073e6:	699b      	ldr	r3, [r3, #24]
 80073e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d208      	bcs.n	8007402 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80073f0:	4b3c      	ldr	r3, [pc, #240]	; (80074e4 <HAL_RCC_ClockConfig+0x358>)
 80073f2:	699b      	ldr	r3, [r3, #24]
 80073f4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	691b      	ldr	r3, [r3, #16]
 80073fc:	4939      	ldr	r1, [pc, #228]	; (80074e4 <HAL_RCC_ClockConfig+0x358>)
 80073fe:	4313      	orrs	r3, r2
 8007400:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f003 0308 	and.w	r3, r3, #8
 800740a:	2b00      	cmp	r3, #0
 800740c:	d010      	beq.n	8007430 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	695a      	ldr	r2, [r3, #20]
 8007412:	4b34      	ldr	r3, [pc, #208]	; (80074e4 <HAL_RCC_ClockConfig+0x358>)
 8007414:	69db      	ldr	r3, [r3, #28]
 8007416:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800741a:	429a      	cmp	r2, r3
 800741c:	d208      	bcs.n	8007430 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800741e:	4b31      	ldr	r3, [pc, #196]	; (80074e4 <HAL_RCC_ClockConfig+0x358>)
 8007420:	69db      	ldr	r3, [r3, #28]
 8007422:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	695b      	ldr	r3, [r3, #20]
 800742a:	492e      	ldr	r1, [pc, #184]	; (80074e4 <HAL_RCC_ClockConfig+0x358>)
 800742c:	4313      	orrs	r3, r2
 800742e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f003 0310 	and.w	r3, r3, #16
 8007438:	2b00      	cmp	r3, #0
 800743a:	d010      	beq.n	800745e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	699a      	ldr	r2, [r3, #24]
 8007440:	4b28      	ldr	r3, [pc, #160]	; (80074e4 <HAL_RCC_ClockConfig+0x358>)
 8007442:	69db      	ldr	r3, [r3, #28]
 8007444:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007448:	429a      	cmp	r2, r3
 800744a:	d208      	bcs.n	800745e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800744c:	4b25      	ldr	r3, [pc, #148]	; (80074e4 <HAL_RCC_ClockConfig+0x358>)
 800744e:	69db      	ldr	r3, [r3, #28]
 8007450:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	699b      	ldr	r3, [r3, #24]
 8007458:	4922      	ldr	r1, [pc, #136]	; (80074e4 <HAL_RCC_ClockConfig+0x358>)
 800745a:	4313      	orrs	r3, r2
 800745c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f003 0320 	and.w	r3, r3, #32
 8007466:	2b00      	cmp	r3, #0
 8007468:	d010      	beq.n	800748c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	69da      	ldr	r2, [r3, #28]
 800746e:	4b1d      	ldr	r3, [pc, #116]	; (80074e4 <HAL_RCC_ClockConfig+0x358>)
 8007470:	6a1b      	ldr	r3, [r3, #32]
 8007472:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007476:	429a      	cmp	r2, r3
 8007478:	d208      	bcs.n	800748c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800747a:	4b1a      	ldr	r3, [pc, #104]	; (80074e4 <HAL_RCC_ClockConfig+0x358>)
 800747c:	6a1b      	ldr	r3, [r3, #32]
 800747e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	69db      	ldr	r3, [r3, #28]
 8007486:	4917      	ldr	r1, [pc, #92]	; (80074e4 <HAL_RCC_ClockConfig+0x358>)
 8007488:	4313      	orrs	r3, r2
 800748a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800748c:	f000 f834 	bl	80074f8 <HAL_RCC_GetSysClockFreq>
 8007490:	4602      	mov	r2, r0
 8007492:	4b14      	ldr	r3, [pc, #80]	; (80074e4 <HAL_RCC_ClockConfig+0x358>)
 8007494:	699b      	ldr	r3, [r3, #24]
 8007496:	0a1b      	lsrs	r3, r3, #8
 8007498:	f003 030f 	and.w	r3, r3, #15
 800749c:	4912      	ldr	r1, [pc, #72]	; (80074e8 <HAL_RCC_ClockConfig+0x35c>)
 800749e:	5ccb      	ldrb	r3, [r1, r3]
 80074a0:	f003 031f 	and.w	r3, r3, #31
 80074a4:	fa22 f303 	lsr.w	r3, r2, r3
 80074a8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80074aa:	4b0e      	ldr	r3, [pc, #56]	; (80074e4 <HAL_RCC_ClockConfig+0x358>)
 80074ac:	699b      	ldr	r3, [r3, #24]
 80074ae:	f003 030f 	and.w	r3, r3, #15
 80074b2:	4a0d      	ldr	r2, [pc, #52]	; (80074e8 <HAL_RCC_ClockConfig+0x35c>)
 80074b4:	5cd3      	ldrb	r3, [r2, r3]
 80074b6:	f003 031f 	and.w	r3, r3, #31
 80074ba:	693a      	ldr	r2, [r7, #16]
 80074bc:	fa22 f303 	lsr.w	r3, r2, r3
 80074c0:	4a0a      	ldr	r2, [pc, #40]	; (80074ec <HAL_RCC_ClockConfig+0x360>)
 80074c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80074c4:	4a0a      	ldr	r2, [pc, #40]	; (80074f0 <HAL_RCC_ClockConfig+0x364>)
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80074ca:	4b0a      	ldr	r3, [pc, #40]	; (80074f4 <HAL_RCC_ClockConfig+0x368>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4618      	mov	r0, r3
 80074d0:	f7fb fcc4 	bl	8002e5c <HAL_InitTick>
 80074d4:	4603      	mov	r3, r0
 80074d6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80074d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3718      	adds	r7, #24
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}
 80074e2:	bf00      	nop
 80074e4:	58024400 	.word	0x58024400
 80074e8:	0800f314 	.word	0x0800f314
 80074ec:	24000028 	.word	0x24000028
 80074f0:	24000024 	.word	0x24000024
 80074f4:	2400002c 	.word	0x2400002c

080074f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b089      	sub	sp, #36	; 0x24
 80074fc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80074fe:	4bb3      	ldr	r3, [pc, #716]	; (80077cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007500:	691b      	ldr	r3, [r3, #16]
 8007502:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007506:	2b18      	cmp	r3, #24
 8007508:	f200 8155 	bhi.w	80077b6 <HAL_RCC_GetSysClockFreq+0x2be>
 800750c:	a201      	add	r2, pc, #4	; (adr r2, 8007514 <HAL_RCC_GetSysClockFreq+0x1c>)
 800750e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007512:	bf00      	nop
 8007514:	08007579 	.word	0x08007579
 8007518:	080077b7 	.word	0x080077b7
 800751c:	080077b7 	.word	0x080077b7
 8007520:	080077b7 	.word	0x080077b7
 8007524:	080077b7 	.word	0x080077b7
 8007528:	080077b7 	.word	0x080077b7
 800752c:	080077b7 	.word	0x080077b7
 8007530:	080077b7 	.word	0x080077b7
 8007534:	0800759f 	.word	0x0800759f
 8007538:	080077b7 	.word	0x080077b7
 800753c:	080077b7 	.word	0x080077b7
 8007540:	080077b7 	.word	0x080077b7
 8007544:	080077b7 	.word	0x080077b7
 8007548:	080077b7 	.word	0x080077b7
 800754c:	080077b7 	.word	0x080077b7
 8007550:	080077b7 	.word	0x080077b7
 8007554:	080075a5 	.word	0x080075a5
 8007558:	080077b7 	.word	0x080077b7
 800755c:	080077b7 	.word	0x080077b7
 8007560:	080077b7 	.word	0x080077b7
 8007564:	080077b7 	.word	0x080077b7
 8007568:	080077b7 	.word	0x080077b7
 800756c:	080077b7 	.word	0x080077b7
 8007570:	080077b7 	.word	0x080077b7
 8007574:	080075ab 	.word	0x080075ab
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007578:	4b94      	ldr	r3, [pc, #592]	; (80077cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f003 0320 	and.w	r3, r3, #32
 8007580:	2b00      	cmp	r3, #0
 8007582:	d009      	beq.n	8007598 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007584:	4b91      	ldr	r3, [pc, #580]	; (80077cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	08db      	lsrs	r3, r3, #3
 800758a:	f003 0303 	and.w	r3, r3, #3
 800758e:	4a90      	ldr	r2, [pc, #576]	; (80077d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007590:	fa22 f303 	lsr.w	r3, r2, r3
 8007594:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007596:	e111      	b.n	80077bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007598:	4b8d      	ldr	r3, [pc, #564]	; (80077d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800759a:	61bb      	str	r3, [r7, #24]
      break;
 800759c:	e10e      	b.n	80077bc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800759e:	4b8d      	ldr	r3, [pc, #564]	; (80077d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80075a0:	61bb      	str	r3, [r7, #24]
      break;
 80075a2:	e10b      	b.n	80077bc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80075a4:	4b8c      	ldr	r3, [pc, #560]	; (80077d8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80075a6:	61bb      	str	r3, [r7, #24]
      break;
 80075a8:	e108      	b.n	80077bc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80075aa:	4b88      	ldr	r3, [pc, #544]	; (80077cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ae:	f003 0303 	and.w	r3, r3, #3
 80075b2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80075b4:	4b85      	ldr	r3, [pc, #532]	; (80077cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075b8:	091b      	lsrs	r3, r3, #4
 80075ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80075be:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80075c0:	4b82      	ldr	r3, [pc, #520]	; (80077cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c4:	f003 0301 	and.w	r3, r3, #1
 80075c8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80075ca:	4b80      	ldr	r3, [pc, #512]	; (80077cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075ce:	08db      	lsrs	r3, r3, #3
 80075d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80075d4:	68fa      	ldr	r2, [r7, #12]
 80075d6:	fb02 f303 	mul.w	r3, r2, r3
 80075da:	ee07 3a90 	vmov	s15, r3
 80075de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075e2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	f000 80e1 	beq.w	80077b0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	2b02      	cmp	r3, #2
 80075f2:	f000 8083 	beq.w	80076fc <HAL_RCC_GetSysClockFreq+0x204>
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	2b02      	cmp	r3, #2
 80075fa:	f200 80a1 	bhi.w	8007740 <HAL_RCC_GetSysClockFreq+0x248>
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d003      	beq.n	800760c <HAL_RCC_GetSysClockFreq+0x114>
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	2b01      	cmp	r3, #1
 8007608:	d056      	beq.n	80076b8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800760a:	e099      	b.n	8007740 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800760c:	4b6f      	ldr	r3, [pc, #444]	; (80077cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f003 0320 	and.w	r3, r3, #32
 8007614:	2b00      	cmp	r3, #0
 8007616:	d02d      	beq.n	8007674 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007618:	4b6c      	ldr	r3, [pc, #432]	; (80077cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	08db      	lsrs	r3, r3, #3
 800761e:	f003 0303 	and.w	r3, r3, #3
 8007622:	4a6b      	ldr	r2, [pc, #428]	; (80077d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007624:	fa22 f303 	lsr.w	r3, r2, r3
 8007628:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	ee07 3a90 	vmov	s15, r3
 8007630:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	ee07 3a90 	vmov	s15, r3
 800763a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800763e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007642:	4b62      	ldr	r3, [pc, #392]	; (80077cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007646:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800764a:	ee07 3a90 	vmov	s15, r3
 800764e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007652:	ed97 6a02 	vldr	s12, [r7, #8]
 8007656:	eddf 5a61 	vldr	s11, [pc, #388]	; 80077dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800765a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800765e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007662:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007666:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800766a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800766e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007672:	e087      	b.n	8007784 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	ee07 3a90 	vmov	s15, r3
 800767a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800767e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80077e0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007682:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007686:	4b51      	ldr	r3, [pc, #324]	; (80077cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800768a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800768e:	ee07 3a90 	vmov	s15, r3
 8007692:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007696:	ed97 6a02 	vldr	s12, [r7, #8]
 800769a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80077dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800769e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80076b6:	e065      	b.n	8007784 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	ee07 3a90 	vmov	s15, r3
 80076be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076c2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80077e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80076c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076ca:	4b40      	ldr	r3, [pc, #256]	; (80077cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076d2:	ee07 3a90 	vmov	s15, r3
 80076d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076da:	ed97 6a02 	vldr	s12, [r7, #8]
 80076de:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80077dc <HAL_RCC_GetSysClockFreq+0x2e4>
 80076e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80076fa:	e043      	b.n	8007784 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	ee07 3a90 	vmov	s15, r3
 8007702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007706:	eddf 6a38 	vldr	s13, [pc, #224]	; 80077e8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800770a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800770e:	4b2f      	ldr	r3, [pc, #188]	; (80077cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007716:	ee07 3a90 	vmov	s15, r3
 800771a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800771e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007722:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80077dc <HAL_RCC_GetSysClockFreq+0x2e4>
 8007726:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800772a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800772e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800773a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800773e:	e021      	b.n	8007784 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	ee07 3a90 	vmov	s15, r3
 8007746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800774a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80077e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800774e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007752:	4b1e      	ldr	r3, [pc, #120]	; (80077cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800775a:	ee07 3a90 	vmov	s15, r3
 800775e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007762:	ed97 6a02 	vldr	s12, [r7, #8]
 8007766:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80077dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800776a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800776e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007772:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007776:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800777a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800777e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007782:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007784:	4b11      	ldr	r3, [pc, #68]	; (80077cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007788:	0a5b      	lsrs	r3, r3, #9
 800778a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800778e:	3301      	adds	r3, #1
 8007790:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	ee07 3a90 	vmov	s15, r3
 8007798:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800779c:	edd7 6a07 	vldr	s13, [r7, #28]
 80077a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077a8:	ee17 3a90 	vmov	r3, s15
 80077ac:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80077ae:	e005      	b.n	80077bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80077b0:	2300      	movs	r3, #0
 80077b2:	61bb      	str	r3, [r7, #24]
      break;
 80077b4:	e002      	b.n	80077bc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80077b6:	4b07      	ldr	r3, [pc, #28]	; (80077d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80077b8:	61bb      	str	r3, [r7, #24]
      break;
 80077ba:	bf00      	nop
  }

  return sysclockfreq;
 80077bc:	69bb      	ldr	r3, [r7, #24]
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3724      	adds	r7, #36	; 0x24
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr
 80077ca:	bf00      	nop
 80077cc:	58024400 	.word	0x58024400
 80077d0:	03d09000 	.word	0x03d09000
 80077d4:	003d0900 	.word	0x003d0900
 80077d8:	017d7840 	.word	0x017d7840
 80077dc:	46000000 	.word	0x46000000
 80077e0:	4c742400 	.word	0x4c742400
 80077e4:	4a742400 	.word	0x4a742400
 80077e8:	4bbebc20 	.word	0x4bbebc20

080077ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b082      	sub	sp, #8
 80077f0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80077f2:	f7ff fe81 	bl	80074f8 <HAL_RCC_GetSysClockFreq>
 80077f6:	4602      	mov	r2, r0
 80077f8:	4b10      	ldr	r3, [pc, #64]	; (800783c <HAL_RCC_GetHCLKFreq+0x50>)
 80077fa:	699b      	ldr	r3, [r3, #24]
 80077fc:	0a1b      	lsrs	r3, r3, #8
 80077fe:	f003 030f 	and.w	r3, r3, #15
 8007802:	490f      	ldr	r1, [pc, #60]	; (8007840 <HAL_RCC_GetHCLKFreq+0x54>)
 8007804:	5ccb      	ldrb	r3, [r1, r3]
 8007806:	f003 031f 	and.w	r3, r3, #31
 800780a:	fa22 f303 	lsr.w	r3, r2, r3
 800780e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007810:	4b0a      	ldr	r3, [pc, #40]	; (800783c <HAL_RCC_GetHCLKFreq+0x50>)
 8007812:	699b      	ldr	r3, [r3, #24]
 8007814:	f003 030f 	and.w	r3, r3, #15
 8007818:	4a09      	ldr	r2, [pc, #36]	; (8007840 <HAL_RCC_GetHCLKFreq+0x54>)
 800781a:	5cd3      	ldrb	r3, [r2, r3]
 800781c:	f003 031f 	and.w	r3, r3, #31
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	fa22 f303 	lsr.w	r3, r2, r3
 8007826:	4a07      	ldr	r2, [pc, #28]	; (8007844 <HAL_RCC_GetHCLKFreq+0x58>)
 8007828:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800782a:	4a07      	ldr	r2, [pc, #28]	; (8007848 <HAL_RCC_GetHCLKFreq+0x5c>)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007830:	4b04      	ldr	r3, [pc, #16]	; (8007844 <HAL_RCC_GetHCLKFreq+0x58>)
 8007832:	681b      	ldr	r3, [r3, #0]
}
 8007834:	4618      	mov	r0, r3
 8007836:	3708      	adds	r7, #8
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}
 800783c:	58024400 	.word	0x58024400
 8007840:	0800f314 	.word	0x0800f314
 8007844:	24000028 	.word	0x24000028
 8007848:	24000024 	.word	0x24000024

0800784c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007850:	f7ff ffcc 	bl	80077ec <HAL_RCC_GetHCLKFreq>
 8007854:	4602      	mov	r2, r0
 8007856:	4b06      	ldr	r3, [pc, #24]	; (8007870 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007858:	69db      	ldr	r3, [r3, #28]
 800785a:	091b      	lsrs	r3, r3, #4
 800785c:	f003 0307 	and.w	r3, r3, #7
 8007860:	4904      	ldr	r1, [pc, #16]	; (8007874 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007862:	5ccb      	ldrb	r3, [r1, r3]
 8007864:	f003 031f 	and.w	r3, r3, #31
 8007868:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800786c:	4618      	mov	r0, r3
 800786e:	bd80      	pop	{r7, pc}
 8007870:	58024400 	.word	0x58024400
 8007874:	0800f314 	.word	0x0800f314

08007878 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800787c:	f7ff ffb6 	bl	80077ec <HAL_RCC_GetHCLKFreq>
 8007880:	4602      	mov	r2, r0
 8007882:	4b06      	ldr	r3, [pc, #24]	; (800789c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007884:	69db      	ldr	r3, [r3, #28]
 8007886:	0a1b      	lsrs	r3, r3, #8
 8007888:	f003 0307 	and.w	r3, r3, #7
 800788c:	4904      	ldr	r1, [pc, #16]	; (80078a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800788e:	5ccb      	ldrb	r3, [r1, r3]
 8007890:	f003 031f 	and.w	r3, r3, #31
 8007894:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007898:	4618      	mov	r0, r3
 800789a:	bd80      	pop	{r7, pc}
 800789c:	58024400 	.word	0x58024400
 80078a0:	0800f314 	.word	0x0800f314

080078a4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80078a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80078a8:	b0ca      	sub	sp, #296	; 0x128
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80078b0:	2300      	movs	r3, #0
 80078b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80078b6:	2300      	movs	r3, #0
 80078b8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80078bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80078c8:	2500      	movs	r5, #0
 80078ca:	ea54 0305 	orrs.w	r3, r4, r5
 80078ce:	d049      	beq.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80078d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078d6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80078da:	d02f      	beq.n	800793c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80078dc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80078e0:	d828      	bhi.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80078e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80078e6:	d01a      	beq.n	800791e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80078e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80078ec:	d822      	bhi.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d003      	beq.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0x56>
 80078f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078f6:	d007      	beq.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80078f8:	e01c      	b.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078fa:	4bb8      	ldr	r3, [pc, #736]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80078fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078fe:	4ab7      	ldr	r2, [pc, #732]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007904:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007906:	e01a      	b.n	800793e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007908:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800790c:	3308      	adds	r3, #8
 800790e:	2102      	movs	r1, #2
 8007910:	4618      	mov	r0, r3
 8007912:	f002 fb61 	bl	8009fd8 <RCCEx_PLL2_Config>
 8007916:	4603      	mov	r3, r0
 8007918:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800791c:	e00f      	b.n	800793e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800791e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007922:	3328      	adds	r3, #40	; 0x28
 8007924:	2102      	movs	r1, #2
 8007926:	4618      	mov	r0, r3
 8007928:	f002 fc08 	bl	800a13c <RCCEx_PLL3_Config>
 800792c:	4603      	mov	r3, r0
 800792e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007932:	e004      	b.n	800793e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007934:	2301      	movs	r3, #1
 8007936:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800793a:	e000      	b.n	800793e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800793c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800793e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007942:	2b00      	cmp	r3, #0
 8007944:	d10a      	bne.n	800795c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007946:	4ba5      	ldr	r3, [pc, #660]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007948:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800794a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800794e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007952:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007954:	4aa1      	ldr	r2, [pc, #644]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007956:	430b      	orrs	r3, r1
 8007958:	6513      	str	r3, [r2, #80]	; 0x50
 800795a:	e003      	b.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800795c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007960:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007964:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800796c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8007970:	f04f 0900 	mov.w	r9, #0
 8007974:	ea58 0309 	orrs.w	r3, r8, r9
 8007978:	d047      	beq.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800797a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800797e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007980:	2b04      	cmp	r3, #4
 8007982:	d82a      	bhi.n	80079da <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007984:	a201      	add	r2, pc, #4	; (adr r2, 800798c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800798a:	bf00      	nop
 800798c:	080079a1 	.word	0x080079a1
 8007990:	080079af 	.word	0x080079af
 8007994:	080079c5 	.word	0x080079c5
 8007998:	080079e3 	.word	0x080079e3
 800799c:	080079e3 	.word	0x080079e3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079a0:	4b8e      	ldr	r3, [pc, #568]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80079a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079a4:	4a8d      	ldr	r2, [pc, #564]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80079a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80079ac:	e01a      	b.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80079ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079b2:	3308      	adds	r3, #8
 80079b4:	2100      	movs	r1, #0
 80079b6:	4618      	mov	r0, r3
 80079b8:	f002 fb0e 	bl	8009fd8 <RCCEx_PLL2_Config>
 80079bc:	4603      	mov	r3, r0
 80079be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80079c2:	e00f      	b.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80079c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079c8:	3328      	adds	r3, #40	; 0x28
 80079ca:	2100      	movs	r1, #0
 80079cc:	4618      	mov	r0, r3
 80079ce:	f002 fbb5 	bl	800a13c <RCCEx_PLL3_Config>
 80079d2:	4603      	mov	r3, r0
 80079d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80079d8:	e004      	b.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079da:	2301      	movs	r3, #1
 80079dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80079e0:	e000      	b.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80079e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d10a      	bne.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80079ec:	4b7b      	ldr	r3, [pc, #492]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80079ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079f0:	f023 0107 	bic.w	r1, r3, #7
 80079f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079fa:	4a78      	ldr	r2, [pc, #480]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80079fc:	430b      	orrs	r3, r1
 80079fe:	6513      	str	r3, [r2, #80]	; 0x50
 8007a00:	e003      	b.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a06:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a12:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8007a16:	f04f 0b00 	mov.w	fp, #0
 8007a1a:	ea5a 030b 	orrs.w	r3, sl, fp
 8007a1e:	d04c      	beq.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a2a:	d030      	beq.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8007a2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a30:	d829      	bhi.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007a32:	2bc0      	cmp	r3, #192	; 0xc0
 8007a34:	d02d      	beq.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007a36:	2bc0      	cmp	r3, #192	; 0xc0
 8007a38:	d825      	bhi.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007a3a:	2b80      	cmp	r3, #128	; 0x80
 8007a3c:	d018      	beq.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007a3e:	2b80      	cmp	r3, #128	; 0x80
 8007a40:	d821      	bhi.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d002      	beq.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8007a46:	2b40      	cmp	r3, #64	; 0x40
 8007a48:	d007      	beq.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8007a4a:	e01c      	b.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a4c:	4b63      	ldr	r3, [pc, #396]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a50:	4a62      	ldr	r2, [pc, #392]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007a58:	e01c      	b.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a5e:	3308      	adds	r3, #8
 8007a60:	2100      	movs	r1, #0
 8007a62:	4618      	mov	r0, r3
 8007a64:	f002 fab8 	bl	8009fd8 <RCCEx_PLL2_Config>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007a6e:	e011      	b.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007a70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a74:	3328      	adds	r3, #40	; 0x28
 8007a76:	2100      	movs	r1, #0
 8007a78:	4618      	mov	r0, r3
 8007a7a:	f002 fb5f 	bl	800a13c <RCCEx_PLL3_Config>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007a84:	e006      	b.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a86:	2301      	movs	r3, #1
 8007a88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007a8c:	e002      	b.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007a8e:	bf00      	nop
 8007a90:	e000      	b.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007a92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a94:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d10a      	bne.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007a9c:	4b4f      	ldr	r3, [pc, #316]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007aa0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8007aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007aa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007aaa:	4a4c      	ldr	r2, [pc, #304]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007aac:	430b      	orrs	r3, r1
 8007aae:	6513      	str	r3, [r2, #80]	; 0x50
 8007ab0:	e003      	b.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ab2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ab6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8007ac6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007aca:	2300      	movs	r3, #0
 8007acc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007ad0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8007ad4:	460b      	mov	r3, r1
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	d053      	beq.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ade:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007ae2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007ae6:	d035      	beq.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007ae8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007aec:	d82e      	bhi.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007aee:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007af2:	d031      	beq.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007af4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007af8:	d828      	bhi.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007afa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007afe:	d01a      	beq.n	8007b36 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007b00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b04:	d822      	bhi.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d003      	beq.n	8007b12 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007b0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b0e:	d007      	beq.n	8007b20 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007b10:	e01c      	b.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b12:	4b32      	ldr	r3, [pc, #200]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b16:	4a31      	ldr	r2, [pc, #196]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b1c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007b1e:	e01c      	b.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b24:	3308      	adds	r3, #8
 8007b26:	2100      	movs	r1, #0
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f002 fa55 	bl	8009fd8 <RCCEx_PLL2_Config>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007b34:	e011      	b.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b3a:	3328      	adds	r3, #40	; 0x28
 8007b3c:	2100      	movs	r1, #0
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f002 fafc 	bl	800a13c <RCCEx_PLL3_Config>
 8007b44:	4603      	mov	r3, r0
 8007b46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007b4a:	e006      	b.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007b52:	e002      	b.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007b54:	bf00      	nop
 8007b56:	e000      	b.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007b58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d10b      	bne.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007b62:	4b1e      	ldr	r3, [pc, #120]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b66:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8007b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b6e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007b72:	4a1a      	ldr	r2, [pc, #104]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b74:	430b      	orrs	r3, r1
 8007b76:	6593      	str	r3, [r2, #88]	; 0x58
 8007b78:	e003      	b.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b7e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b8a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8007b8e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007b92:	2300      	movs	r3, #0
 8007b94:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007b98:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8007b9c:	460b      	mov	r3, r1
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	d056      	beq.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ba6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007baa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007bae:	d038      	beq.n	8007c22 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007bb0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007bb4:	d831      	bhi.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007bb6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007bba:	d034      	beq.n	8007c26 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007bbc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007bc0:	d82b      	bhi.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007bc2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007bc6:	d01d      	beq.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007bc8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007bcc:	d825      	bhi.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d006      	beq.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007bd2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007bd6:	d00a      	beq.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007bd8:	e01f      	b.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007bda:	bf00      	nop
 8007bdc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007be0:	4ba2      	ldr	r3, [pc, #648]	; (8007e6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007be4:	4aa1      	ldr	r2, [pc, #644]	; (8007e6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007be6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007bec:	e01c      	b.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bf2:	3308      	adds	r3, #8
 8007bf4:	2100      	movs	r1, #0
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f002 f9ee 	bl	8009fd8 <RCCEx_PLL2_Config>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007c02:	e011      	b.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c08:	3328      	adds	r3, #40	; 0x28
 8007c0a:	2100      	movs	r1, #0
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f002 fa95 	bl	800a13c <RCCEx_PLL3_Config>
 8007c12:	4603      	mov	r3, r0
 8007c14:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007c18:	e006      	b.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007c20:	e002      	b.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007c22:	bf00      	nop
 8007c24:	e000      	b.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007c26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c28:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d10b      	bne.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007c30:	4b8e      	ldr	r3, [pc, #568]	; (8007e6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c34:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8007c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c3c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007c40:	4a8a      	ldr	r2, [pc, #552]	; (8007e6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c42:	430b      	orrs	r3, r1
 8007c44:	6593      	str	r3, [r2, #88]	; 0x58
 8007c46:	e003      	b.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c4c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007c50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c58:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8007c5c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007c60:	2300      	movs	r3, #0
 8007c62:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007c66:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8007c6a:	460b      	mov	r3, r1
 8007c6c:	4313      	orrs	r3, r2
 8007c6e:	d03a      	beq.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c76:	2b30      	cmp	r3, #48	; 0x30
 8007c78:	d01f      	beq.n	8007cba <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007c7a:	2b30      	cmp	r3, #48	; 0x30
 8007c7c:	d819      	bhi.n	8007cb2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007c7e:	2b20      	cmp	r3, #32
 8007c80:	d00c      	beq.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007c82:	2b20      	cmp	r3, #32
 8007c84:	d815      	bhi.n	8007cb2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d019      	beq.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007c8a:	2b10      	cmp	r3, #16
 8007c8c:	d111      	bne.n	8007cb2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c8e:	4b77      	ldr	r3, [pc, #476]	; (8007e6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c92:	4a76      	ldr	r2, [pc, #472]	; (8007e6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c98:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007c9a:	e011      	b.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007c9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ca0:	3308      	adds	r3, #8
 8007ca2:	2102      	movs	r1, #2
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f002 f997 	bl	8009fd8 <RCCEx_PLL2_Config>
 8007caa:	4603      	mov	r3, r0
 8007cac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007cb0:	e006      	b.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007cb8:	e002      	b.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007cba:	bf00      	nop
 8007cbc:	e000      	b.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007cbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cc0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d10a      	bne.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007cc8:	4b68      	ldr	r3, [pc, #416]	; (8007e6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007cca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ccc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8007cd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cd6:	4a65      	ldr	r2, [pc, #404]	; (8007e6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007cd8:	430b      	orrs	r3, r1
 8007cda:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007cdc:	e003      	b.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ce2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cee:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8007cf2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007cfc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8007d00:	460b      	mov	r3, r1
 8007d02:	4313      	orrs	r3, r2
 8007d04:	d051      	beq.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d10:	d035      	beq.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007d12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d16:	d82e      	bhi.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007d18:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007d1c:	d031      	beq.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007d1e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007d22:	d828      	bhi.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007d24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d28:	d01a      	beq.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007d2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d2e:	d822      	bhi.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d003      	beq.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007d34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d38:	d007      	beq.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007d3a:	e01c      	b.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d3c:	4b4b      	ldr	r3, [pc, #300]	; (8007e6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d40:	4a4a      	ldr	r2, [pc, #296]	; (8007e6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007d48:	e01c      	b.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d4e:	3308      	adds	r3, #8
 8007d50:	2100      	movs	r1, #0
 8007d52:	4618      	mov	r0, r3
 8007d54:	f002 f940 	bl	8009fd8 <RCCEx_PLL2_Config>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007d5e:	e011      	b.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d64:	3328      	adds	r3, #40	; 0x28
 8007d66:	2100      	movs	r1, #0
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f002 f9e7 	bl	800a13c <RCCEx_PLL3_Config>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007d74:	e006      	b.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d76:	2301      	movs	r3, #1
 8007d78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007d7c:	e002      	b.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007d7e:	bf00      	nop
 8007d80:	e000      	b.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007d82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d84:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d10a      	bne.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007d8c:	4b37      	ldr	r3, [pc, #220]	; (8007e6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d90:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8007d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d9a:	4a34      	ldr	r2, [pc, #208]	; (8007e6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d9c:	430b      	orrs	r3, r1
 8007d9e:	6513      	str	r3, [r2, #80]	; 0x50
 8007da0:	e003      	b.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007da2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007da6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8007db6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007dba:	2300      	movs	r3, #0
 8007dbc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007dc0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8007dc4:	460b      	mov	r3, r1
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	d056      	beq.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007dd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007dd4:	d033      	beq.n	8007e3e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007dd6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007dda:	d82c      	bhi.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007ddc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007de0:	d02f      	beq.n	8007e42 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007de2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007de6:	d826      	bhi.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007de8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007dec:	d02b      	beq.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007dee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007df2:	d820      	bhi.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007df4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007df8:	d012      	beq.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007dfa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007dfe:	d81a      	bhi.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d022      	beq.n	8007e4a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007e04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e08:	d115      	bne.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e0e:	3308      	adds	r3, #8
 8007e10:	2101      	movs	r1, #1
 8007e12:	4618      	mov	r0, r3
 8007e14:	f002 f8e0 	bl	8009fd8 <RCCEx_PLL2_Config>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007e1e:	e015      	b.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e24:	3328      	adds	r3, #40	; 0x28
 8007e26:	2101      	movs	r1, #1
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f002 f987 	bl	800a13c <RCCEx_PLL3_Config>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007e34:	e00a      	b.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e36:	2301      	movs	r3, #1
 8007e38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007e3c:	e006      	b.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007e3e:	bf00      	nop
 8007e40:	e004      	b.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007e42:	bf00      	nop
 8007e44:	e002      	b.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007e46:	bf00      	nop
 8007e48:	e000      	b.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007e4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d10d      	bne.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007e54:	4b05      	ldr	r3, [pc, #20]	; (8007e6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e58:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8007e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e62:	4a02      	ldr	r2, [pc, #8]	; (8007e6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e64:	430b      	orrs	r3, r1
 8007e66:	6513      	str	r3, [r2, #80]	; 0x50
 8007e68:	e006      	b.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007e6a:	bf00      	nop
 8007e6c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e74:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e80:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8007e84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007e88:	2300      	movs	r3, #0
 8007e8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007e8e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8007e92:	460b      	mov	r3, r1
 8007e94:	4313      	orrs	r3, r2
 8007e96:	d055      	beq.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e9c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007ea0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ea4:	d033      	beq.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007ea6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007eaa:	d82c      	bhi.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007eac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007eb0:	d02f      	beq.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007eb6:	d826      	bhi.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007eb8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007ebc:	d02b      	beq.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007ebe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007ec2:	d820      	bhi.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007ec4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ec8:	d012      	beq.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007eca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ece:	d81a      	bhi.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d022      	beq.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007ed4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ed8:	d115      	bne.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ede:	3308      	adds	r3, #8
 8007ee0:	2101      	movs	r1, #1
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f002 f878 	bl	8009fd8 <RCCEx_PLL2_Config>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007eee:	e015      	b.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ef4:	3328      	adds	r3, #40	; 0x28
 8007ef6:	2101      	movs	r1, #1
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f002 f91f 	bl	800a13c <RCCEx_PLL3_Config>
 8007efe:	4603      	mov	r3, r0
 8007f00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007f04:	e00a      	b.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007f06:	2301      	movs	r3, #1
 8007f08:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007f0c:	e006      	b.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007f0e:	bf00      	nop
 8007f10:	e004      	b.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007f12:	bf00      	nop
 8007f14:	e002      	b.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007f16:	bf00      	nop
 8007f18:	e000      	b.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007f1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f1c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d10b      	bne.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007f24:	4ba3      	ldr	r3, [pc, #652]	; (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f28:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007f2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f30:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007f34:	4a9f      	ldr	r2, [pc, #636]	; (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f36:	430b      	orrs	r3, r1
 8007f38:	6593      	str	r3, [r2, #88]	; 0x58
 8007f3a:	e003      	b.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f3c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f40:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f4c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8007f50:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007f54:	2300      	movs	r3, #0
 8007f56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007f5a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007f5e:	460b      	mov	r3, r1
 8007f60:	4313      	orrs	r3, r2
 8007f62:	d037      	beq.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007f64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f6e:	d00e      	beq.n	8007f8e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007f70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f74:	d816      	bhi.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d018      	beq.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007f7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f7e:	d111      	bne.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f80:	4b8c      	ldr	r3, [pc, #560]	; (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f84:	4a8b      	ldr	r2, [pc, #556]	; (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007f8c:	e00f      	b.n	8007fae <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007f8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f92:	3308      	adds	r3, #8
 8007f94:	2101      	movs	r1, #1
 8007f96:	4618      	mov	r0, r3
 8007f98:	f002 f81e 	bl	8009fd8 <RCCEx_PLL2_Config>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007fa2:	e004      	b.n	8007fae <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007faa:	e000      	b.n	8007fae <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007fac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d10a      	bne.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007fb6:	4b7f      	ldr	r3, [pc, #508]	; (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007fb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fba:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fc4:	4a7b      	ldr	r2, [pc, #492]	; (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007fc6:	430b      	orrs	r3, r1
 8007fc8:	6513      	str	r3, [r2, #80]	; 0x50
 8007fca:	e003      	b.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fcc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007fd0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007fd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fdc:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8007fe0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007fea:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8007fee:	460b      	mov	r3, r1
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	d039      	beq.n	8008068 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ff8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ffa:	2b03      	cmp	r3, #3
 8007ffc:	d81c      	bhi.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007ffe:	a201      	add	r2, pc, #4	; (adr r2, 8008004 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8008000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008004:	08008041 	.word	0x08008041
 8008008:	08008015 	.word	0x08008015
 800800c:	08008023 	.word	0x08008023
 8008010:	08008041 	.word	0x08008041
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008014:	4b67      	ldr	r3, [pc, #412]	; (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008018:	4a66      	ldr	r2, [pc, #408]	; (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800801a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800801e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008020:	e00f      	b.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008022:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008026:	3308      	adds	r3, #8
 8008028:	2102      	movs	r1, #2
 800802a:	4618      	mov	r0, r3
 800802c:	f001 ffd4 	bl	8009fd8 <RCCEx_PLL2_Config>
 8008030:	4603      	mov	r3, r0
 8008032:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008036:	e004      	b.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008038:	2301      	movs	r3, #1
 800803a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800803e:	e000      	b.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8008040:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008042:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008046:	2b00      	cmp	r3, #0
 8008048:	d10a      	bne.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800804a:	4b5a      	ldr	r3, [pc, #360]	; (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800804c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800804e:	f023 0103 	bic.w	r1, r3, #3
 8008052:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008056:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008058:	4a56      	ldr	r2, [pc, #344]	; (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800805a:	430b      	orrs	r3, r1
 800805c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800805e:	e003      	b.n	8008068 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008060:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008064:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008068:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800806c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008070:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8008074:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008078:	2300      	movs	r3, #0
 800807a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800807e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8008082:	460b      	mov	r3, r1
 8008084:	4313      	orrs	r3, r2
 8008086:	f000 809f 	beq.w	80081c8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800808a:	4b4b      	ldr	r3, [pc, #300]	; (80081b8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4a4a      	ldr	r2, [pc, #296]	; (80081b8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008090:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008094:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008096:	f7fa ff2b 	bl	8002ef0 <HAL_GetTick>
 800809a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800809e:	e00b      	b.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80080a0:	f7fa ff26 	bl	8002ef0 <HAL_GetTick>
 80080a4:	4602      	mov	r2, r0
 80080a6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80080aa:	1ad3      	subs	r3, r2, r3
 80080ac:	2b64      	cmp	r3, #100	; 0x64
 80080ae:	d903      	bls.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80080b0:	2303      	movs	r3, #3
 80080b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80080b6:	e005      	b.n	80080c4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80080b8:	4b3f      	ldr	r3, [pc, #252]	; (80081b8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d0ed      	beq.n	80080a0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80080c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d179      	bne.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80080cc:	4b39      	ldr	r3, [pc, #228]	; (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80080d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80080d8:	4053      	eors	r3, r2
 80080da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d015      	beq.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80080e2:	4b34      	ldr	r3, [pc, #208]	; (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080ea:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80080ee:	4b31      	ldr	r3, [pc, #196]	; (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080f2:	4a30      	ldr	r2, [pc, #192]	; (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080f8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80080fa:	4b2e      	ldr	r3, [pc, #184]	; (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080fe:	4a2d      	ldr	r2, [pc, #180]	; (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008100:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008104:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008106:	4a2b      	ldr	r2, [pc, #172]	; (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008108:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800810c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800810e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008112:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008116:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800811a:	d118      	bne.n	800814e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800811c:	f7fa fee8 	bl	8002ef0 <HAL_GetTick>
 8008120:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008124:	e00d      	b.n	8008142 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008126:	f7fa fee3 	bl	8002ef0 <HAL_GetTick>
 800812a:	4602      	mov	r2, r0
 800812c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008130:	1ad2      	subs	r2, r2, r3
 8008132:	f241 3388 	movw	r3, #5000	; 0x1388
 8008136:	429a      	cmp	r2, r3
 8008138:	d903      	bls.n	8008142 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800813a:	2303      	movs	r3, #3
 800813c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8008140:	e005      	b.n	800814e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008142:	4b1c      	ldr	r3, [pc, #112]	; (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008146:	f003 0302 	and.w	r3, r3, #2
 800814a:	2b00      	cmp	r3, #0
 800814c:	d0eb      	beq.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800814e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008152:	2b00      	cmp	r3, #0
 8008154:	d129      	bne.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008156:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800815a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800815e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008162:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008166:	d10e      	bne.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8008168:	4b12      	ldr	r3, [pc, #72]	; (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800816a:	691b      	ldr	r3, [r3, #16]
 800816c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8008170:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008174:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008178:	091a      	lsrs	r2, r3, #4
 800817a:	4b10      	ldr	r3, [pc, #64]	; (80081bc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800817c:	4013      	ands	r3, r2
 800817e:	4a0d      	ldr	r2, [pc, #52]	; (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008180:	430b      	orrs	r3, r1
 8008182:	6113      	str	r3, [r2, #16]
 8008184:	e005      	b.n	8008192 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8008186:	4b0b      	ldr	r3, [pc, #44]	; (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008188:	691b      	ldr	r3, [r3, #16]
 800818a:	4a0a      	ldr	r2, [pc, #40]	; (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800818c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008190:	6113      	str	r3, [r2, #16]
 8008192:	4b08      	ldr	r3, [pc, #32]	; (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008194:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8008196:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800819a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800819e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80081a2:	4a04      	ldr	r2, [pc, #16]	; (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80081a4:	430b      	orrs	r3, r1
 80081a6:	6713      	str	r3, [r2, #112]	; 0x70
 80081a8:	e00e      	b.n	80081c8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80081aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80081ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80081b2:	e009      	b.n	80081c8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80081b4:	58024400 	.word	0x58024400
 80081b8:	58024800 	.word	0x58024800
 80081bc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80081c4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80081c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081d0:	f002 0301 	and.w	r3, r2, #1
 80081d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80081d8:	2300      	movs	r3, #0
 80081da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80081de:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80081e2:	460b      	mov	r3, r1
 80081e4:	4313      	orrs	r3, r2
 80081e6:	f000 8089 	beq.w	80082fc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80081ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80081f0:	2b28      	cmp	r3, #40	; 0x28
 80081f2:	d86b      	bhi.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80081f4:	a201      	add	r2, pc, #4	; (adr r2, 80081fc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80081f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081fa:	bf00      	nop
 80081fc:	080082d5 	.word	0x080082d5
 8008200:	080082cd 	.word	0x080082cd
 8008204:	080082cd 	.word	0x080082cd
 8008208:	080082cd 	.word	0x080082cd
 800820c:	080082cd 	.word	0x080082cd
 8008210:	080082cd 	.word	0x080082cd
 8008214:	080082cd 	.word	0x080082cd
 8008218:	080082cd 	.word	0x080082cd
 800821c:	080082a1 	.word	0x080082a1
 8008220:	080082cd 	.word	0x080082cd
 8008224:	080082cd 	.word	0x080082cd
 8008228:	080082cd 	.word	0x080082cd
 800822c:	080082cd 	.word	0x080082cd
 8008230:	080082cd 	.word	0x080082cd
 8008234:	080082cd 	.word	0x080082cd
 8008238:	080082cd 	.word	0x080082cd
 800823c:	080082b7 	.word	0x080082b7
 8008240:	080082cd 	.word	0x080082cd
 8008244:	080082cd 	.word	0x080082cd
 8008248:	080082cd 	.word	0x080082cd
 800824c:	080082cd 	.word	0x080082cd
 8008250:	080082cd 	.word	0x080082cd
 8008254:	080082cd 	.word	0x080082cd
 8008258:	080082cd 	.word	0x080082cd
 800825c:	080082d5 	.word	0x080082d5
 8008260:	080082cd 	.word	0x080082cd
 8008264:	080082cd 	.word	0x080082cd
 8008268:	080082cd 	.word	0x080082cd
 800826c:	080082cd 	.word	0x080082cd
 8008270:	080082cd 	.word	0x080082cd
 8008274:	080082cd 	.word	0x080082cd
 8008278:	080082cd 	.word	0x080082cd
 800827c:	080082d5 	.word	0x080082d5
 8008280:	080082cd 	.word	0x080082cd
 8008284:	080082cd 	.word	0x080082cd
 8008288:	080082cd 	.word	0x080082cd
 800828c:	080082cd 	.word	0x080082cd
 8008290:	080082cd 	.word	0x080082cd
 8008294:	080082cd 	.word	0x080082cd
 8008298:	080082cd 	.word	0x080082cd
 800829c:	080082d5 	.word	0x080082d5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80082a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082a4:	3308      	adds	r3, #8
 80082a6:	2101      	movs	r1, #1
 80082a8:	4618      	mov	r0, r3
 80082aa:	f001 fe95 	bl	8009fd8 <RCCEx_PLL2_Config>
 80082ae:	4603      	mov	r3, r0
 80082b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80082b4:	e00f      	b.n	80082d6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80082b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082ba:	3328      	adds	r3, #40	; 0x28
 80082bc:	2101      	movs	r1, #1
 80082be:	4618      	mov	r0, r3
 80082c0:	f001 ff3c 	bl	800a13c <RCCEx_PLL3_Config>
 80082c4:	4603      	mov	r3, r0
 80082c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80082ca:	e004      	b.n	80082d6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80082cc:	2301      	movs	r3, #1
 80082ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80082d2:	e000      	b.n	80082d6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80082d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d10a      	bne.n	80082f4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80082de:	4bbf      	ldr	r3, [pc, #764]	; (80085dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80082e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082e2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80082e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082ec:	4abb      	ldr	r2, [pc, #748]	; (80085dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80082ee:	430b      	orrs	r3, r1
 80082f0:	6553      	str	r3, [r2, #84]	; 0x54
 80082f2:	e003      	b.n	80082fc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80082f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80082fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008304:	f002 0302 	and.w	r3, r2, #2
 8008308:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800830c:	2300      	movs	r3, #0
 800830e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008312:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8008316:	460b      	mov	r3, r1
 8008318:	4313      	orrs	r3, r2
 800831a:	d041      	beq.n	80083a0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800831c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008320:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008322:	2b05      	cmp	r3, #5
 8008324:	d824      	bhi.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8008326:	a201      	add	r2, pc, #4	; (adr r2, 800832c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8008328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800832c:	08008379 	.word	0x08008379
 8008330:	08008345 	.word	0x08008345
 8008334:	0800835b 	.word	0x0800835b
 8008338:	08008379 	.word	0x08008379
 800833c:	08008379 	.word	0x08008379
 8008340:	08008379 	.word	0x08008379
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008344:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008348:	3308      	adds	r3, #8
 800834a:	2101      	movs	r1, #1
 800834c:	4618      	mov	r0, r3
 800834e:	f001 fe43 	bl	8009fd8 <RCCEx_PLL2_Config>
 8008352:	4603      	mov	r3, r0
 8008354:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008358:	e00f      	b.n	800837a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800835a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800835e:	3328      	adds	r3, #40	; 0x28
 8008360:	2101      	movs	r1, #1
 8008362:	4618      	mov	r0, r3
 8008364:	f001 feea 	bl	800a13c <RCCEx_PLL3_Config>
 8008368:	4603      	mov	r3, r0
 800836a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800836e:	e004      	b.n	800837a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008370:	2301      	movs	r3, #1
 8008372:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008376:	e000      	b.n	800837a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8008378:	bf00      	nop
    }

    if (ret == HAL_OK)
 800837a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800837e:	2b00      	cmp	r3, #0
 8008380:	d10a      	bne.n	8008398 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008382:	4b96      	ldr	r3, [pc, #600]	; (80085dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008386:	f023 0107 	bic.w	r1, r3, #7
 800838a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800838e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008390:	4a92      	ldr	r2, [pc, #584]	; (80085dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008392:	430b      	orrs	r3, r1
 8008394:	6553      	str	r3, [r2, #84]	; 0x54
 8008396:	e003      	b.n	80083a0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008398:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800839c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80083a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a8:	f002 0304 	and.w	r3, r2, #4
 80083ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80083b0:	2300      	movs	r3, #0
 80083b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80083b6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80083ba:	460b      	mov	r3, r1
 80083bc:	4313      	orrs	r3, r2
 80083be:	d044      	beq.n	800844a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80083c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80083c8:	2b05      	cmp	r3, #5
 80083ca:	d825      	bhi.n	8008418 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80083cc:	a201      	add	r2, pc, #4	; (adr r2, 80083d4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80083ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083d2:	bf00      	nop
 80083d4:	08008421 	.word	0x08008421
 80083d8:	080083ed 	.word	0x080083ed
 80083dc:	08008403 	.word	0x08008403
 80083e0:	08008421 	.word	0x08008421
 80083e4:	08008421 	.word	0x08008421
 80083e8:	08008421 	.word	0x08008421
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80083ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083f0:	3308      	adds	r3, #8
 80083f2:	2101      	movs	r1, #1
 80083f4:	4618      	mov	r0, r3
 80083f6:	f001 fdef 	bl	8009fd8 <RCCEx_PLL2_Config>
 80083fa:	4603      	mov	r3, r0
 80083fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008400:	e00f      	b.n	8008422 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008402:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008406:	3328      	adds	r3, #40	; 0x28
 8008408:	2101      	movs	r1, #1
 800840a:	4618      	mov	r0, r3
 800840c:	f001 fe96 	bl	800a13c <RCCEx_PLL3_Config>
 8008410:	4603      	mov	r3, r0
 8008412:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008416:	e004      	b.n	8008422 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008418:	2301      	movs	r3, #1
 800841a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800841e:	e000      	b.n	8008422 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8008420:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008422:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008426:	2b00      	cmp	r3, #0
 8008428:	d10b      	bne.n	8008442 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800842a:	4b6c      	ldr	r3, [pc, #432]	; (80085dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800842c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800842e:	f023 0107 	bic.w	r1, r3, #7
 8008432:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008436:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800843a:	4a68      	ldr	r2, [pc, #416]	; (80085dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800843c:	430b      	orrs	r3, r1
 800843e:	6593      	str	r3, [r2, #88]	; 0x58
 8008440:	e003      	b.n	800844a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008442:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008446:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800844a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800844e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008452:	f002 0320 	and.w	r3, r2, #32
 8008456:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800845a:	2300      	movs	r3, #0
 800845c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008460:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008464:	460b      	mov	r3, r1
 8008466:	4313      	orrs	r3, r2
 8008468:	d055      	beq.n	8008516 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800846a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800846e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008472:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008476:	d033      	beq.n	80084e0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8008478:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800847c:	d82c      	bhi.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800847e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008482:	d02f      	beq.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8008484:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008488:	d826      	bhi.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800848a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800848e:	d02b      	beq.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8008490:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008494:	d820      	bhi.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008496:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800849a:	d012      	beq.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800849c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084a0:	d81a      	bhi.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d022      	beq.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80084a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80084aa:	d115      	bne.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80084ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084b0:	3308      	adds	r3, #8
 80084b2:	2100      	movs	r1, #0
 80084b4:	4618      	mov	r0, r3
 80084b6:	f001 fd8f 	bl	8009fd8 <RCCEx_PLL2_Config>
 80084ba:	4603      	mov	r3, r0
 80084bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80084c0:	e015      	b.n	80084ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80084c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084c6:	3328      	adds	r3, #40	; 0x28
 80084c8:	2102      	movs	r1, #2
 80084ca:	4618      	mov	r0, r3
 80084cc:	f001 fe36 	bl	800a13c <RCCEx_PLL3_Config>
 80084d0:	4603      	mov	r3, r0
 80084d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80084d6:	e00a      	b.n	80084ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80084d8:	2301      	movs	r3, #1
 80084da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80084de:	e006      	b.n	80084ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80084e0:	bf00      	nop
 80084e2:	e004      	b.n	80084ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80084e4:	bf00      	nop
 80084e6:	e002      	b.n	80084ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80084e8:	bf00      	nop
 80084ea:	e000      	b.n	80084ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80084ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d10b      	bne.n	800850e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80084f6:	4b39      	ldr	r3, [pc, #228]	; (80085dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80084f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084fa:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80084fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008506:	4a35      	ldr	r2, [pc, #212]	; (80085dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008508:	430b      	orrs	r3, r1
 800850a:	6553      	str	r3, [r2, #84]	; 0x54
 800850c:	e003      	b.n	8008516 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800850e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008512:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008516:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800851a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800851e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8008522:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008526:	2300      	movs	r3, #0
 8008528:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800852c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8008530:	460b      	mov	r3, r1
 8008532:	4313      	orrs	r3, r2
 8008534:	d058      	beq.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008536:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800853a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800853e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008542:	d033      	beq.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8008544:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008548:	d82c      	bhi.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800854a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800854e:	d02f      	beq.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8008550:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008554:	d826      	bhi.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008556:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800855a:	d02b      	beq.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800855c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008560:	d820      	bhi.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008562:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008566:	d012      	beq.n	800858e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008568:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800856c:	d81a      	bhi.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800856e:	2b00      	cmp	r3, #0
 8008570:	d022      	beq.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008572:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008576:	d115      	bne.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008578:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800857c:	3308      	adds	r3, #8
 800857e:	2100      	movs	r1, #0
 8008580:	4618      	mov	r0, r3
 8008582:	f001 fd29 	bl	8009fd8 <RCCEx_PLL2_Config>
 8008586:	4603      	mov	r3, r0
 8008588:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800858c:	e015      	b.n	80085ba <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800858e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008592:	3328      	adds	r3, #40	; 0x28
 8008594:	2102      	movs	r1, #2
 8008596:	4618      	mov	r0, r3
 8008598:	f001 fdd0 	bl	800a13c <RCCEx_PLL3_Config>
 800859c:	4603      	mov	r3, r0
 800859e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80085a2:	e00a      	b.n	80085ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80085a4:	2301      	movs	r3, #1
 80085a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80085aa:	e006      	b.n	80085ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80085ac:	bf00      	nop
 80085ae:	e004      	b.n	80085ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80085b0:	bf00      	nop
 80085b2:	e002      	b.n	80085ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80085b4:	bf00      	nop
 80085b6:	e000      	b.n	80085ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80085b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d10e      	bne.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80085c2:	4b06      	ldr	r3, [pc, #24]	; (80085dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80085c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085c6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80085ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80085d2:	4a02      	ldr	r2, [pc, #8]	; (80085dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80085d4:	430b      	orrs	r3, r1
 80085d6:	6593      	str	r3, [r2, #88]	; 0x58
 80085d8:	e006      	b.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80085da:	bf00      	nop
 80085dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80085e4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80085e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085f0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80085f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80085f8:	2300      	movs	r3, #0
 80085fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80085fe:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8008602:	460b      	mov	r3, r1
 8008604:	4313      	orrs	r3, r2
 8008606:	d055      	beq.n	80086b4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008608:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800860c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008610:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008614:	d033      	beq.n	800867e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8008616:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800861a:	d82c      	bhi.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800861c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008620:	d02f      	beq.n	8008682 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8008622:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008626:	d826      	bhi.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008628:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800862c:	d02b      	beq.n	8008686 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800862e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008632:	d820      	bhi.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008634:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008638:	d012      	beq.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800863a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800863e:	d81a      	bhi.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008640:	2b00      	cmp	r3, #0
 8008642:	d022      	beq.n	800868a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8008644:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008648:	d115      	bne.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800864a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800864e:	3308      	adds	r3, #8
 8008650:	2100      	movs	r1, #0
 8008652:	4618      	mov	r0, r3
 8008654:	f001 fcc0 	bl	8009fd8 <RCCEx_PLL2_Config>
 8008658:	4603      	mov	r3, r0
 800865a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800865e:	e015      	b.n	800868c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008660:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008664:	3328      	adds	r3, #40	; 0x28
 8008666:	2102      	movs	r1, #2
 8008668:	4618      	mov	r0, r3
 800866a:	f001 fd67 	bl	800a13c <RCCEx_PLL3_Config>
 800866e:	4603      	mov	r3, r0
 8008670:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008674:	e00a      	b.n	800868c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008676:	2301      	movs	r3, #1
 8008678:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800867c:	e006      	b.n	800868c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800867e:	bf00      	nop
 8008680:	e004      	b.n	800868c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008682:	bf00      	nop
 8008684:	e002      	b.n	800868c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008686:	bf00      	nop
 8008688:	e000      	b.n	800868c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800868a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800868c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008690:	2b00      	cmp	r3, #0
 8008692:	d10b      	bne.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008694:	4ba1      	ldr	r3, [pc, #644]	; (800891c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008698:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800869c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80086a4:	4a9d      	ldr	r2, [pc, #628]	; (800891c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80086a6:	430b      	orrs	r3, r1
 80086a8:	6593      	str	r3, [r2, #88]	; 0x58
 80086aa:	e003      	b.n	80086b4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80086b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80086b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086bc:	f002 0308 	and.w	r3, r2, #8
 80086c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80086c4:	2300      	movs	r3, #0
 80086c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80086ca:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80086ce:	460b      	mov	r3, r1
 80086d0:	4313      	orrs	r3, r2
 80086d2:	d01e      	beq.n	8008712 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80086d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086e0:	d10c      	bne.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80086e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086e6:	3328      	adds	r3, #40	; 0x28
 80086e8:	2102      	movs	r1, #2
 80086ea:	4618      	mov	r0, r3
 80086ec:	f001 fd26 	bl	800a13c <RCCEx_PLL3_Config>
 80086f0:	4603      	mov	r3, r0
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d002      	beq.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80086f6:	2301      	movs	r3, #1
 80086f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80086fc:	4b87      	ldr	r3, [pc, #540]	; (800891c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80086fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008700:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008704:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008708:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800870c:	4a83      	ldr	r2, [pc, #524]	; (800891c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800870e:	430b      	orrs	r3, r1
 8008710:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008712:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800871a:	f002 0310 	and.w	r3, r2, #16
 800871e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008722:	2300      	movs	r3, #0
 8008724:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008728:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800872c:	460b      	mov	r3, r1
 800872e:	4313      	orrs	r3, r2
 8008730:	d01e      	beq.n	8008770 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008732:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008736:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800873a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800873e:	d10c      	bne.n	800875a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008740:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008744:	3328      	adds	r3, #40	; 0x28
 8008746:	2102      	movs	r1, #2
 8008748:	4618      	mov	r0, r3
 800874a:	f001 fcf7 	bl	800a13c <RCCEx_PLL3_Config>
 800874e:	4603      	mov	r3, r0
 8008750:	2b00      	cmp	r3, #0
 8008752:	d002      	beq.n	800875a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8008754:	2301      	movs	r3, #1
 8008756:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800875a:	4b70      	ldr	r3, [pc, #448]	; (800891c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800875c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800875e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008762:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008766:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800876a:	4a6c      	ldr	r2, [pc, #432]	; (800891c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800876c:	430b      	orrs	r3, r1
 800876e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008770:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008778:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800877c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008780:	2300      	movs	r3, #0
 8008782:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008786:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800878a:	460b      	mov	r3, r1
 800878c:	4313      	orrs	r3, r2
 800878e:	d03e      	beq.n	800880e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008790:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008794:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008798:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800879c:	d022      	beq.n	80087e4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800879e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80087a2:	d81b      	bhi.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d003      	beq.n	80087b0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80087a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087ac:	d00b      	beq.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80087ae:	e015      	b.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80087b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087b4:	3308      	adds	r3, #8
 80087b6:	2100      	movs	r1, #0
 80087b8:	4618      	mov	r0, r3
 80087ba:	f001 fc0d 	bl	8009fd8 <RCCEx_PLL2_Config>
 80087be:	4603      	mov	r3, r0
 80087c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80087c4:	e00f      	b.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80087c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087ca:	3328      	adds	r3, #40	; 0x28
 80087cc:	2102      	movs	r1, #2
 80087ce:	4618      	mov	r0, r3
 80087d0:	f001 fcb4 	bl	800a13c <RCCEx_PLL3_Config>
 80087d4:	4603      	mov	r3, r0
 80087d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80087da:	e004      	b.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80087dc:	2301      	movs	r3, #1
 80087de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80087e2:	e000      	b.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80087e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d10b      	bne.n	8008806 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80087ee:	4b4b      	ldr	r3, [pc, #300]	; (800891c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80087f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087f2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80087f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80087fe:	4a47      	ldr	r2, [pc, #284]	; (800891c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008800:	430b      	orrs	r3, r1
 8008802:	6593      	str	r3, [r2, #88]	; 0x58
 8008804:	e003      	b.n	800880e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008806:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800880a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800880e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008816:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800881a:	67bb      	str	r3, [r7, #120]	; 0x78
 800881c:	2300      	movs	r3, #0
 800881e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008820:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8008824:	460b      	mov	r3, r1
 8008826:	4313      	orrs	r3, r2
 8008828:	d03b      	beq.n	80088a2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800882a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800882e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008832:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008836:	d01f      	beq.n	8008878 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008838:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800883c:	d818      	bhi.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800883e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008842:	d003      	beq.n	800884c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8008844:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008848:	d007      	beq.n	800885a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800884a:	e011      	b.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800884c:	4b33      	ldr	r3, [pc, #204]	; (800891c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800884e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008850:	4a32      	ldr	r2, [pc, #200]	; (800891c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008852:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008856:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008858:	e00f      	b.n	800887a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800885a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800885e:	3328      	adds	r3, #40	; 0x28
 8008860:	2101      	movs	r1, #1
 8008862:	4618      	mov	r0, r3
 8008864:	f001 fc6a 	bl	800a13c <RCCEx_PLL3_Config>
 8008868:	4603      	mov	r3, r0
 800886a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800886e:	e004      	b.n	800887a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008870:	2301      	movs	r3, #1
 8008872:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008876:	e000      	b.n	800887a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8008878:	bf00      	nop
    }

    if (ret == HAL_OK)
 800887a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800887e:	2b00      	cmp	r3, #0
 8008880:	d10b      	bne.n	800889a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008882:	4b26      	ldr	r3, [pc, #152]	; (800891c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008886:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800888a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800888e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008892:	4a22      	ldr	r2, [pc, #136]	; (800891c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008894:	430b      	orrs	r3, r1
 8008896:	6553      	str	r3, [r2, #84]	; 0x54
 8008898:	e003      	b.n	80088a2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800889a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800889e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80088a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088aa:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80088ae:	673b      	str	r3, [r7, #112]	; 0x70
 80088b0:	2300      	movs	r3, #0
 80088b2:	677b      	str	r3, [r7, #116]	; 0x74
 80088b4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80088b8:	460b      	mov	r3, r1
 80088ba:	4313      	orrs	r3, r2
 80088bc:	d034      	beq.n	8008928 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80088be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d003      	beq.n	80088d0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80088c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088cc:	d007      	beq.n	80088de <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80088ce:	e011      	b.n	80088f4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088d0:	4b12      	ldr	r3, [pc, #72]	; (800891c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80088d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088d4:	4a11      	ldr	r2, [pc, #68]	; (800891c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80088d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80088dc:	e00e      	b.n	80088fc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80088de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088e2:	3308      	adds	r3, #8
 80088e4:	2102      	movs	r1, #2
 80088e6:	4618      	mov	r0, r3
 80088e8:	f001 fb76 	bl	8009fd8 <RCCEx_PLL2_Config>
 80088ec:	4603      	mov	r3, r0
 80088ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80088f2:	e003      	b.n	80088fc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80088f4:	2301      	movs	r3, #1
 80088f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80088fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008900:	2b00      	cmp	r3, #0
 8008902:	d10d      	bne.n	8008920 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008904:	4b05      	ldr	r3, [pc, #20]	; (800891c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008908:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800890c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008910:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008912:	4a02      	ldr	r2, [pc, #8]	; (800891c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008914:	430b      	orrs	r3, r1
 8008916:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008918:	e006      	b.n	8008928 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800891a:	bf00      	nop
 800891c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008920:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008924:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008928:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800892c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008930:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8008934:	66bb      	str	r3, [r7, #104]	; 0x68
 8008936:	2300      	movs	r3, #0
 8008938:	66fb      	str	r3, [r7, #108]	; 0x6c
 800893a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800893e:	460b      	mov	r3, r1
 8008940:	4313      	orrs	r3, r2
 8008942:	d00c      	beq.n	800895e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008944:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008948:	3328      	adds	r3, #40	; 0x28
 800894a:	2102      	movs	r1, #2
 800894c:	4618      	mov	r0, r3
 800894e:	f001 fbf5 	bl	800a13c <RCCEx_PLL3_Config>
 8008952:	4603      	mov	r3, r0
 8008954:	2b00      	cmp	r3, #0
 8008956:	d002      	beq.n	800895e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008958:	2301      	movs	r3, #1
 800895a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800895e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008966:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800896a:	663b      	str	r3, [r7, #96]	; 0x60
 800896c:	2300      	movs	r3, #0
 800896e:	667b      	str	r3, [r7, #100]	; 0x64
 8008970:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8008974:	460b      	mov	r3, r1
 8008976:	4313      	orrs	r3, r2
 8008978:	d038      	beq.n	80089ec <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800897a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800897e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008982:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008986:	d018      	beq.n	80089ba <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008988:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800898c:	d811      	bhi.n	80089b2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800898e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008992:	d014      	beq.n	80089be <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008994:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008998:	d80b      	bhi.n	80089b2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800899a:	2b00      	cmp	r3, #0
 800899c:	d011      	beq.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800899e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089a2:	d106      	bne.n	80089b2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089a4:	4bc3      	ldr	r3, [pc, #780]	; (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80089a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089a8:	4ac2      	ldr	r2, [pc, #776]	; (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80089aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80089b0:	e008      	b.n	80089c4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80089b2:	2301      	movs	r3, #1
 80089b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80089b8:	e004      	b.n	80089c4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80089ba:	bf00      	nop
 80089bc:	e002      	b.n	80089c4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80089be:	bf00      	nop
 80089c0:	e000      	b.n	80089c4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80089c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d10b      	bne.n	80089e4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80089cc:	4bb9      	ldr	r3, [pc, #740]	; (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80089ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089d0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80089d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80089dc:	4ab5      	ldr	r2, [pc, #724]	; (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80089de:	430b      	orrs	r3, r1
 80089e0:	6553      	str	r3, [r2, #84]	; 0x54
 80089e2:	e003      	b.n	80089ec <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80089e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80089ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80089f8:	65bb      	str	r3, [r7, #88]	; 0x58
 80089fa:	2300      	movs	r3, #0
 80089fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80089fe:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8008a02:	460b      	mov	r3, r1
 8008a04:	4313      	orrs	r3, r2
 8008a06:	d009      	beq.n	8008a1c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008a08:	4baa      	ldr	r3, [pc, #680]	; (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a0c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a16:	4aa7      	ldr	r2, [pc, #668]	; (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a18:	430b      	orrs	r3, r1
 8008a1a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008a1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a24:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8008a28:	653b      	str	r3, [r7, #80]	; 0x50
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	657b      	str	r3, [r7, #84]	; 0x54
 8008a2e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8008a32:	460b      	mov	r3, r1
 8008a34:	4313      	orrs	r3, r2
 8008a36:	d00a      	beq.n	8008a4e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008a38:	4b9e      	ldr	r3, [pc, #632]	; (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a3a:	691b      	ldr	r3, [r3, #16]
 8008a3c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8008a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a44:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008a48:	4a9a      	ldr	r2, [pc, #616]	; (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a4a:	430b      	orrs	r3, r1
 8008a4c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008a4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a56:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8008a5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a60:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8008a64:	460b      	mov	r3, r1
 8008a66:	4313      	orrs	r3, r2
 8008a68:	d009      	beq.n	8008a7e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008a6a:	4b92      	ldr	r3, [pc, #584]	; (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a6e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8008a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a78:	4a8e      	ldr	r2, [pc, #568]	; (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a7a:	430b      	orrs	r3, r1
 8008a7c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a86:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8008a8a:	643b      	str	r3, [r7, #64]	; 0x40
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	647b      	str	r3, [r7, #68]	; 0x44
 8008a90:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8008a94:	460b      	mov	r3, r1
 8008a96:	4313      	orrs	r3, r2
 8008a98:	d00e      	beq.n	8008ab8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008a9a:	4b86      	ldr	r3, [pc, #536]	; (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a9c:	691b      	ldr	r3, [r3, #16]
 8008a9e:	4a85      	ldr	r2, [pc, #532]	; (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008aa0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008aa4:	6113      	str	r3, [r2, #16]
 8008aa6:	4b83      	ldr	r3, [pc, #524]	; (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008aa8:	6919      	ldr	r1, [r3, #16]
 8008aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008aae:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008ab2:	4a80      	ldr	r2, [pc, #512]	; (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008ab4:	430b      	orrs	r3, r1
 8008ab6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008ab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8008ac4:	63bb      	str	r3, [r7, #56]	; 0x38
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008aca:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8008ace:	460b      	mov	r3, r1
 8008ad0:	4313      	orrs	r3, r2
 8008ad2:	d009      	beq.n	8008ae8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008ad4:	4b77      	ldr	r3, [pc, #476]	; (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ad8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8008adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ae2:	4a74      	ldr	r2, [pc, #464]	; (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008ae4:	430b      	orrs	r3, r1
 8008ae6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af0:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8008af4:	633b      	str	r3, [r7, #48]	; 0x30
 8008af6:	2300      	movs	r3, #0
 8008af8:	637b      	str	r3, [r7, #52]	; 0x34
 8008afa:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8008afe:	460b      	mov	r3, r1
 8008b00:	4313      	orrs	r3, r2
 8008b02:	d00a      	beq.n	8008b1a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008b04:	4b6b      	ldr	r3, [pc, #428]	; (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b08:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8008b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b14:	4a67      	ldr	r2, [pc, #412]	; (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b16:	430b      	orrs	r3, r1
 8008b18:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b22:	2100      	movs	r1, #0
 8008b24:	62b9      	str	r1, [r7, #40]	; 0x28
 8008b26:	f003 0301 	and.w	r3, r3, #1
 8008b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b2c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8008b30:	460b      	mov	r3, r1
 8008b32:	4313      	orrs	r3, r2
 8008b34:	d011      	beq.n	8008b5a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b3a:	3308      	adds	r3, #8
 8008b3c:	2100      	movs	r1, #0
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f001 fa4a 	bl	8009fd8 <RCCEx_PLL2_Config>
 8008b44:	4603      	mov	r3, r0
 8008b46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008b4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d003      	beq.n	8008b5a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b56:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b62:	2100      	movs	r1, #0
 8008b64:	6239      	str	r1, [r7, #32]
 8008b66:	f003 0302 	and.w	r3, r3, #2
 8008b6a:	627b      	str	r3, [r7, #36]	; 0x24
 8008b6c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008b70:	460b      	mov	r3, r1
 8008b72:	4313      	orrs	r3, r2
 8008b74:	d011      	beq.n	8008b9a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b7a:	3308      	adds	r3, #8
 8008b7c:	2101      	movs	r1, #1
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f001 fa2a 	bl	8009fd8 <RCCEx_PLL2_Config>
 8008b84:	4603      	mov	r3, r0
 8008b86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008b8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d003      	beq.n	8008b9a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b96:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba2:	2100      	movs	r1, #0
 8008ba4:	61b9      	str	r1, [r7, #24]
 8008ba6:	f003 0304 	and.w	r3, r3, #4
 8008baa:	61fb      	str	r3, [r7, #28]
 8008bac:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008bb0:	460b      	mov	r3, r1
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	d011      	beq.n	8008bda <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bba:	3308      	adds	r3, #8
 8008bbc:	2102      	movs	r1, #2
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f001 fa0a 	bl	8009fd8 <RCCEx_PLL2_Config>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008bca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d003      	beq.n	8008bda <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bd2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008bd6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be2:	2100      	movs	r1, #0
 8008be4:	6139      	str	r1, [r7, #16]
 8008be6:	f003 0308 	and.w	r3, r3, #8
 8008bea:	617b      	str	r3, [r7, #20]
 8008bec:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008bf0:	460b      	mov	r3, r1
 8008bf2:	4313      	orrs	r3, r2
 8008bf4:	d011      	beq.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bfa:	3328      	adds	r3, #40	; 0x28
 8008bfc:	2100      	movs	r1, #0
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f001 fa9c 	bl	800a13c <RCCEx_PLL3_Config>
 8008c04:	4603      	mov	r3, r0
 8008c06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8008c0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d003      	beq.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c16:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c22:	2100      	movs	r1, #0
 8008c24:	60b9      	str	r1, [r7, #8]
 8008c26:	f003 0310 	and.w	r3, r3, #16
 8008c2a:	60fb      	str	r3, [r7, #12]
 8008c2c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008c30:	460b      	mov	r3, r1
 8008c32:	4313      	orrs	r3, r2
 8008c34:	d011      	beq.n	8008c5a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c3a:	3328      	adds	r3, #40	; 0x28
 8008c3c:	2101      	movs	r1, #1
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f001 fa7c 	bl	800a13c <RCCEx_PLL3_Config>
 8008c44:	4603      	mov	r3, r0
 8008c46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008c4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d003      	beq.n	8008c5a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c56:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c62:	2100      	movs	r1, #0
 8008c64:	6039      	str	r1, [r7, #0]
 8008c66:	f003 0320 	and.w	r3, r3, #32
 8008c6a:	607b      	str	r3, [r7, #4]
 8008c6c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008c70:	460b      	mov	r3, r1
 8008c72:	4313      	orrs	r3, r2
 8008c74:	d011      	beq.n	8008c9a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008c76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c7a:	3328      	adds	r3, #40	; 0x28
 8008c7c:	2102      	movs	r1, #2
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f001 fa5c 	bl	800a13c <RCCEx_PLL3_Config>
 8008c84:	4603      	mov	r3, r0
 8008c86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008c8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d003      	beq.n	8008c9a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c96:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8008c9a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d101      	bne.n	8008ca6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	e000      	b.n	8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008ca6:	2301      	movs	r3, #1
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008cb4:	58024400 	.word	0x58024400

08008cb8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b090      	sub	sp, #64	; 0x40
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008cc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008cc6:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8008cca:	430b      	orrs	r3, r1
 8008ccc:	f040 8094 	bne.w	8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008cd0:	4b9e      	ldr	r3, [pc, #632]	; (8008f4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008cd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cd4:	f003 0307 	and.w	r3, r3, #7
 8008cd8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cdc:	2b04      	cmp	r3, #4
 8008cde:	f200 8087 	bhi.w	8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008ce2:	a201      	add	r2, pc, #4	; (adr r2, 8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ce8:	08008cfd 	.word	0x08008cfd
 8008cec:	08008d25 	.word	0x08008d25
 8008cf0:	08008d4d 	.word	0x08008d4d
 8008cf4:	08008de9 	.word	0x08008de9
 8008cf8:	08008d75 	.word	0x08008d75
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008cfc:	4b93      	ldr	r3, [pc, #588]	; (8008f4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d08:	d108      	bne.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008d0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f001 f810 	bl	8009d34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d18:	f000 bd45 	b.w	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d20:	f000 bd41 	b.w	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008d24:	4b89      	ldr	r3, [pc, #548]	; (8008f4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008d30:	d108      	bne.n	8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d32:	f107 0318 	add.w	r3, r7, #24
 8008d36:	4618      	mov	r0, r3
 8008d38:	f000 fd54 	bl	80097e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008d3c:	69bb      	ldr	r3, [r7, #24]
 8008d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d40:	f000 bd31 	b.w	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d44:	2300      	movs	r3, #0
 8008d46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d48:	f000 bd2d 	b.w	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008d4c:	4b7f      	ldr	r3, [pc, #508]	; (8008f4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d58:	d108      	bne.n	8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d5a:	f107 030c 	add.w	r3, r7, #12
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f000 fe94 	bl	8009a8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d68:	f000 bd1d 	b.w	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d70:	f000 bd19 	b.w	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008d74:	4b75      	ldr	r3, [pc, #468]	; (8008f4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008d76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d78:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008d7c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008d7e:	4b73      	ldr	r3, [pc, #460]	; (8008f4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f003 0304 	and.w	r3, r3, #4
 8008d86:	2b04      	cmp	r3, #4
 8008d88:	d10c      	bne.n	8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d109      	bne.n	8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d90:	4b6e      	ldr	r3, [pc, #440]	; (8008f4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	08db      	lsrs	r3, r3, #3
 8008d96:	f003 0303 	and.w	r3, r3, #3
 8008d9a:	4a6d      	ldr	r2, [pc, #436]	; (8008f50 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008d9c:	fa22 f303 	lsr.w	r3, r2, r3
 8008da0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008da2:	e01f      	b.n	8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008da4:	4b69      	ldr	r3, [pc, #420]	; (8008f4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008db0:	d106      	bne.n	8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8008db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008db4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008db8:	d102      	bne.n	8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008dba:	4b66      	ldr	r3, [pc, #408]	; (8008f54 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008dbe:	e011      	b.n	8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008dc0:	4b62      	ldr	r3, [pc, #392]	; (8008f4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008dc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008dcc:	d106      	bne.n	8008ddc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008dd4:	d102      	bne.n	8008ddc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008dd6:	4b60      	ldr	r3, [pc, #384]	; (8008f58 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008dda:	e003      	b.n	8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008de0:	f000 bce1 	b.w	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008de4:	f000 bcdf 	b.w	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008de8:	4b5c      	ldr	r3, [pc, #368]	; (8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008dea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008dec:	f000 bcdb 	b.w	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008df0:	2300      	movs	r3, #0
 8008df2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008df4:	f000 bcd7 	b.w	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008df8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008dfc:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8008e00:	430b      	orrs	r3, r1
 8008e02:	f040 80ad 	bne.w	8008f60 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8008e06:	4b51      	ldr	r3, [pc, #324]	; (8008f4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008e08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e0a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8008e0e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e16:	d056      	beq.n	8008ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8008e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e1e:	f200 8090 	bhi.w	8008f42 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e24:	2bc0      	cmp	r3, #192	; 0xc0
 8008e26:	f000 8088 	beq.w	8008f3a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8008e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e2c:	2bc0      	cmp	r3, #192	; 0xc0
 8008e2e:	f200 8088 	bhi.w	8008f42 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e34:	2b80      	cmp	r3, #128	; 0x80
 8008e36:	d032      	beq.n	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8008e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e3a:	2b80      	cmp	r3, #128	; 0x80
 8008e3c:	f200 8081 	bhi.w	8008f42 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d003      	beq.n	8008e4e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8008e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e48:	2b40      	cmp	r3, #64	; 0x40
 8008e4a:	d014      	beq.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8008e4c:	e079      	b.n	8008f42 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008e4e:	4b3f      	ldr	r3, [pc, #252]	; (8008f4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e5a:	d108      	bne.n	8008e6e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e60:	4618      	mov	r0, r3
 8008e62:	f000 ff67 	bl	8009d34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e68:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e6a:	f000 bc9c 	b.w	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e72:	f000 bc98 	b.w	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e76:	4b35      	ldr	r3, [pc, #212]	; (8008f4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e82:	d108      	bne.n	8008e96 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e84:	f107 0318 	add.w	r3, r7, #24
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f000 fcab 	bl	80097e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008e8e:	69bb      	ldr	r3, [r7, #24]
 8008e90:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e92:	f000 bc88 	b.w	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e96:	2300      	movs	r3, #0
 8008e98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e9a:	f000 bc84 	b.w	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008e9e:	4b2b      	ldr	r3, [pc, #172]	; (8008f4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ea6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008eaa:	d108      	bne.n	8008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008eac:	f107 030c 	add.w	r3, r7, #12
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f000 fdeb 	bl	8009a8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008eba:	f000 bc74 	b.w	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ec2:	f000 bc70 	b.w	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008ec6:	4b21      	ldr	r3, [pc, #132]	; (8008f4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008eca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008ece:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008ed0:	4b1e      	ldr	r3, [pc, #120]	; (8008f4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f003 0304 	and.w	r3, r3, #4
 8008ed8:	2b04      	cmp	r3, #4
 8008eda:	d10c      	bne.n	8008ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8008edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d109      	bne.n	8008ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ee2:	4b1a      	ldr	r3, [pc, #104]	; (8008f4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	08db      	lsrs	r3, r3, #3
 8008ee8:	f003 0303 	and.w	r3, r3, #3
 8008eec:	4a18      	ldr	r2, [pc, #96]	; (8008f50 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008eee:	fa22 f303 	lsr.w	r3, r2, r3
 8008ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ef4:	e01f      	b.n	8008f36 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008ef6:	4b15      	ldr	r3, [pc, #84]	; (8008f4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008efe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f02:	d106      	bne.n	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8008f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f0a:	d102      	bne.n	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008f0c:	4b11      	ldr	r3, [pc, #68]	; (8008f54 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f10:	e011      	b.n	8008f36 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008f12:	4b0e      	ldr	r3, [pc, #56]	; (8008f4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f1e:	d106      	bne.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8008f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f26:	d102      	bne.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008f28:	4b0b      	ldr	r3, [pc, #44]	; (8008f58 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f2c:	e003      	b.n	8008f36 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008f32:	f000 bc38 	b.w	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008f36:	f000 bc36 	b.w	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008f3a:	4b08      	ldr	r3, [pc, #32]	; (8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f3e:	f000 bc32 	b.w	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008f42:	2300      	movs	r3, #0
 8008f44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f46:	f000 bc2e 	b.w	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008f4a:	bf00      	nop
 8008f4c:	58024400 	.word	0x58024400
 8008f50:	03d09000 	.word	0x03d09000
 8008f54:	003d0900 	.word	0x003d0900
 8008f58:	017d7840 	.word	0x017d7840
 8008f5c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008f60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f64:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8008f68:	430b      	orrs	r3, r1
 8008f6a:	f040 809c 	bne.w	80090a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8008f6e:	4b9e      	ldr	r3, [pc, #632]	; (80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f72:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8008f76:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f7a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008f7e:	d054      	beq.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8008f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f82:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008f86:	f200 808b 	bhi.w	80090a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f8c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008f90:	f000 8083 	beq.w	800909a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8008f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f96:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008f9a:	f200 8081 	bhi.w	80090a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fa0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008fa4:	d02f      	beq.n	8009006 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8008fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fa8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008fac:	d878      	bhi.n	80090a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d004      	beq.n	8008fbe <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8008fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fb6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008fba:	d012      	beq.n	8008fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8008fbc:	e070      	b.n	80090a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008fbe:	4b8a      	ldr	r3, [pc, #552]	; (80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fc6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008fca:	d107      	bne.n	8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008fcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f000 feaf 	bl	8009d34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fda:	e3e4      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008fdc:	2300      	movs	r3, #0
 8008fde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008fe0:	e3e1      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008fe2:	4b81      	ldr	r3, [pc, #516]	; (80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008fea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008fee:	d107      	bne.n	8009000 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ff0:	f107 0318 	add.w	r3, r7, #24
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f000 fbf5 	bl	80097e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008ffa:	69bb      	ldr	r3, [r7, #24]
 8008ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ffe:	e3d2      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009000:	2300      	movs	r3, #0
 8009002:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009004:	e3cf      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009006:	4b78      	ldr	r3, [pc, #480]	; (80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800900e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009012:	d107      	bne.n	8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009014:	f107 030c 	add.w	r3, r7, #12
 8009018:	4618      	mov	r0, r3
 800901a:	f000 fd37 	bl	8009a8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009022:	e3c0      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009024:	2300      	movs	r3, #0
 8009026:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009028:	e3bd      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800902a:	4b6f      	ldr	r3, [pc, #444]	; (80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800902c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800902e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009032:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009034:	4b6c      	ldr	r3, [pc, #432]	; (80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f003 0304 	and.w	r3, r3, #4
 800903c:	2b04      	cmp	r3, #4
 800903e:	d10c      	bne.n	800905a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8009040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009042:	2b00      	cmp	r3, #0
 8009044:	d109      	bne.n	800905a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009046:	4b68      	ldr	r3, [pc, #416]	; (80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	08db      	lsrs	r3, r3, #3
 800904c:	f003 0303 	and.w	r3, r3, #3
 8009050:	4a66      	ldr	r2, [pc, #408]	; (80091ec <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009052:	fa22 f303 	lsr.w	r3, r2, r3
 8009056:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009058:	e01e      	b.n	8009098 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800905a:	4b63      	ldr	r3, [pc, #396]	; (80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009062:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009066:	d106      	bne.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8009068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800906a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800906e:	d102      	bne.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009070:	4b5f      	ldr	r3, [pc, #380]	; (80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8009072:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009074:	e010      	b.n	8009098 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009076:	4b5c      	ldr	r3, [pc, #368]	; (80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800907e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009082:	d106      	bne.n	8009092 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8009084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009086:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800908a:	d102      	bne.n	8009092 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800908c:	4b59      	ldr	r3, [pc, #356]	; (80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800908e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009090:	e002      	b.n	8009098 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009092:	2300      	movs	r3, #0
 8009094:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009096:	e386      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009098:	e385      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800909a:	4b57      	ldr	r3, [pc, #348]	; (80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800909c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800909e:	e382      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80090a0:	2300      	movs	r3, #0
 80090a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80090a4:	e37f      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80090a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090aa:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 80090ae:	430b      	orrs	r3, r1
 80090b0:	f040 80a7 	bne.w	8009202 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80090b4:	4b4c      	ldr	r3, [pc, #304]	; (80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80090b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090b8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80090bc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80090be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80090c4:	d055      	beq.n	8009172 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80090c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80090cc:	f200 8096 	bhi.w	80091fc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80090d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090d2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80090d6:	f000 8084 	beq.w	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80090da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090dc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80090e0:	f200 808c 	bhi.w	80091fc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80090e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80090ea:	d030      	beq.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80090ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80090f2:	f200 8083 	bhi.w	80091fc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80090f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d004      	beq.n	8009106 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80090fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009102:	d012      	beq.n	800912a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8009104:	e07a      	b.n	80091fc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009106:	4b38      	ldr	r3, [pc, #224]	; (80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800910e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009112:	d107      	bne.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009114:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009118:	4618      	mov	r0, r3
 800911a:	f000 fe0b 	bl	8009d34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800911e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009120:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009122:	e340      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009124:	2300      	movs	r3, #0
 8009126:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009128:	e33d      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800912a:	4b2f      	ldr	r3, [pc, #188]	; (80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009132:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009136:	d107      	bne.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009138:	f107 0318 	add.w	r3, r7, #24
 800913c:	4618      	mov	r0, r3
 800913e:	f000 fb51 	bl	80097e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009142:	69bb      	ldr	r3, [r7, #24]
 8009144:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009146:	e32e      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009148:	2300      	movs	r3, #0
 800914a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800914c:	e32b      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800914e:	4b26      	ldr	r3, [pc, #152]	; (80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009156:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800915a:	d107      	bne.n	800916c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800915c:	f107 030c 	add.w	r3, r7, #12
 8009160:	4618      	mov	r0, r3
 8009162:	f000 fc93 	bl	8009a8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800916a:	e31c      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800916c:	2300      	movs	r3, #0
 800916e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009170:	e319      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009172:	4b1d      	ldr	r3, [pc, #116]	; (80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009176:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800917a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800917c:	4b1a      	ldr	r3, [pc, #104]	; (80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f003 0304 	and.w	r3, r3, #4
 8009184:	2b04      	cmp	r3, #4
 8009186:	d10c      	bne.n	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8009188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800918a:	2b00      	cmp	r3, #0
 800918c:	d109      	bne.n	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800918e:	4b16      	ldr	r3, [pc, #88]	; (80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	08db      	lsrs	r3, r3, #3
 8009194:	f003 0303 	and.w	r3, r3, #3
 8009198:	4a14      	ldr	r2, [pc, #80]	; (80091ec <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800919a:	fa22 f303 	lsr.w	r3, r2, r3
 800919e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80091a0:	e01e      	b.n	80091e0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80091a2:	4b11      	ldr	r3, [pc, #68]	; (80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091ae:	d106      	bne.n	80091be <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80091b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80091b6:	d102      	bne.n	80091be <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80091b8:	4b0d      	ldr	r3, [pc, #52]	; (80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80091ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80091bc:	e010      	b.n	80091e0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80091be:	4b0a      	ldr	r3, [pc, #40]	; (80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80091ca:	d106      	bne.n	80091da <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80091cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091d2:	d102      	bne.n	80091da <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80091d4:	4b07      	ldr	r3, [pc, #28]	; (80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80091d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80091d8:	e002      	b.n	80091e0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80091da:	2300      	movs	r3, #0
 80091dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80091de:	e2e2      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80091e0:	e2e1      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80091e2:	4b05      	ldr	r3, [pc, #20]	; (80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80091e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091e6:	e2de      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80091e8:	58024400 	.word	0x58024400
 80091ec:	03d09000 	.word	0x03d09000
 80091f0:	003d0900 	.word	0x003d0900
 80091f4:	017d7840 	.word	0x017d7840
 80091f8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80091fc:	2300      	movs	r3, #0
 80091fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009200:	e2d1      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009202:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009206:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800920a:	430b      	orrs	r3, r1
 800920c:	f040 809c 	bne.w	8009348 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8009210:	4b93      	ldr	r3, [pc, #588]	; (8009460 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009214:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8009218:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800921a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800921c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009220:	d054      	beq.n	80092cc <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8009222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009224:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009228:	f200 808b 	bhi.w	8009342 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800922c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800922e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009232:	f000 8083 	beq.w	800933c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8009236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009238:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800923c:	f200 8081 	bhi.w	8009342 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009242:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009246:	d02f      	beq.n	80092a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8009248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800924a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800924e:	d878      	bhi.n	8009342 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009252:	2b00      	cmp	r3, #0
 8009254:	d004      	beq.n	8009260 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8009256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009258:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800925c:	d012      	beq.n	8009284 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800925e:	e070      	b.n	8009342 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009260:	4b7f      	ldr	r3, [pc, #508]	; (8009460 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009268:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800926c:	d107      	bne.n	800927e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800926e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009272:	4618      	mov	r0, r3
 8009274:	f000 fd5e 	bl	8009d34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800927a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800927c:	e293      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800927e:	2300      	movs	r3, #0
 8009280:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009282:	e290      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009284:	4b76      	ldr	r3, [pc, #472]	; (8009460 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800928c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009290:	d107      	bne.n	80092a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009292:	f107 0318 	add.w	r3, r7, #24
 8009296:	4618      	mov	r0, r3
 8009298:	f000 faa4 	bl	80097e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800929c:	69bb      	ldr	r3, [r7, #24]
 800929e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092a0:	e281      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80092a2:	2300      	movs	r3, #0
 80092a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092a6:	e27e      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80092a8:	4b6d      	ldr	r3, [pc, #436]	; (8009460 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80092b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092b4:	d107      	bne.n	80092c6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80092b6:	f107 030c 	add.w	r3, r7, #12
 80092ba:	4618      	mov	r0, r3
 80092bc:	f000 fbe6 	bl	8009a8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092c4:	e26f      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80092c6:	2300      	movs	r3, #0
 80092c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092ca:	e26c      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80092cc:	4b64      	ldr	r3, [pc, #400]	; (8009460 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80092ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80092d4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80092d6:	4b62      	ldr	r3, [pc, #392]	; (8009460 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f003 0304 	and.w	r3, r3, #4
 80092de:	2b04      	cmp	r3, #4
 80092e0:	d10c      	bne.n	80092fc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80092e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d109      	bne.n	80092fc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80092e8:	4b5d      	ldr	r3, [pc, #372]	; (8009460 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	08db      	lsrs	r3, r3, #3
 80092ee:	f003 0303 	and.w	r3, r3, #3
 80092f2:	4a5c      	ldr	r2, [pc, #368]	; (8009464 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80092f4:	fa22 f303 	lsr.w	r3, r2, r3
 80092f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092fa:	e01e      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80092fc:	4b58      	ldr	r3, [pc, #352]	; (8009460 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009304:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009308:	d106      	bne.n	8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800930a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800930c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009310:	d102      	bne.n	8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009312:	4b55      	ldr	r3, [pc, #340]	; (8009468 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009314:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009316:	e010      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009318:	4b51      	ldr	r3, [pc, #324]	; (8009460 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009320:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009324:	d106      	bne.n	8009334 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8009326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009328:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800932c:	d102      	bne.n	8009334 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800932e:	4b4f      	ldr	r3, [pc, #316]	; (800946c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009330:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009332:	e002      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009334:	2300      	movs	r3, #0
 8009336:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009338:	e235      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800933a:	e234      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800933c:	4b4c      	ldr	r3, [pc, #304]	; (8009470 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800933e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009340:	e231      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009342:	2300      	movs	r3, #0
 8009344:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009346:	e22e      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8009348:	e9d7 2300 	ldrd	r2, r3, [r7]
 800934c:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8009350:	430b      	orrs	r3, r1
 8009352:	f040 808f 	bne.w	8009474 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8009356:	4b42      	ldr	r3, [pc, #264]	; (8009460 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009358:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800935a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800935e:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8009360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009362:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009366:	d06b      	beq.n	8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8009368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800936a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800936e:	d874      	bhi.n	800945a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009372:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009376:	d056      	beq.n	8009426 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8009378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800937a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800937e:	d86c      	bhi.n	800945a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009382:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009386:	d03b      	beq.n	8009400 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8009388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800938a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800938e:	d864      	bhi.n	800945a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009392:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009396:	d021      	beq.n	80093dc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8009398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800939a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800939e:	d85c      	bhi.n	800945a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80093a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d004      	beq.n	80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80093a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093ac:	d004      	beq.n	80093b8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80093ae:	e054      	b.n	800945a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80093b0:	f7fe fa4c 	bl	800784c <HAL_RCC_GetPCLK1Freq>
 80093b4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80093b6:	e1f6      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80093b8:	4b29      	ldr	r3, [pc, #164]	; (8009460 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80093c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80093c4:	d107      	bne.n	80093d6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093c6:	f107 0318 	add.w	r3, r7, #24
 80093ca:	4618      	mov	r0, r3
 80093cc:	f000 fa0a 	bl	80097e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80093d0:	69fb      	ldr	r3, [r7, #28]
 80093d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80093d4:	e1e7      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80093d6:	2300      	movs	r3, #0
 80093d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093da:	e1e4      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80093dc:	4b20      	ldr	r3, [pc, #128]	; (8009460 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80093e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093e8:	d107      	bne.n	80093fa <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80093ea:	f107 030c 	add.w	r3, r7, #12
 80093ee:	4618      	mov	r0, r3
 80093f0:	f000 fb4c 	bl	8009a8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80093f8:	e1d5      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80093fa:	2300      	movs	r3, #0
 80093fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093fe:	e1d2      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009400:	4b17      	ldr	r3, [pc, #92]	; (8009460 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f003 0304 	and.w	r3, r3, #4
 8009408:	2b04      	cmp	r3, #4
 800940a:	d109      	bne.n	8009420 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800940c:	4b14      	ldr	r3, [pc, #80]	; (8009460 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	08db      	lsrs	r3, r3, #3
 8009412:	f003 0303 	and.w	r3, r3, #3
 8009416:	4a13      	ldr	r2, [pc, #76]	; (8009464 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8009418:	fa22 f303 	lsr.w	r3, r2, r3
 800941c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800941e:	e1c2      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009420:	2300      	movs	r3, #0
 8009422:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009424:	e1bf      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009426:	4b0e      	ldr	r3, [pc, #56]	; (8009460 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800942e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009432:	d102      	bne.n	800943a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8009434:	4b0c      	ldr	r3, [pc, #48]	; (8009468 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009436:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009438:	e1b5      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800943a:	2300      	movs	r3, #0
 800943c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800943e:	e1b2      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009440:	4b07      	ldr	r3, [pc, #28]	; (8009460 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009448:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800944c:	d102      	bne.n	8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800944e:	4b07      	ldr	r3, [pc, #28]	; (800946c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009450:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009452:	e1a8      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009454:	2300      	movs	r3, #0
 8009456:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009458:	e1a5      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800945a:	2300      	movs	r3, #0
 800945c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800945e:	e1a2      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009460:	58024400 	.word	0x58024400
 8009464:	03d09000 	.word	0x03d09000
 8009468:	003d0900 	.word	0x003d0900
 800946c:	017d7840 	.word	0x017d7840
 8009470:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009474:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009478:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800947c:	430b      	orrs	r3, r1
 800947e:	d173      	bne.n	8009568 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8009480:	4b9c      	ldr	r3, [pc, #624]	; (80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009484:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009488:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800948a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800948c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009490:	d02f      	beq.n	80094f2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8009492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009494:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009498:	d863      	bhi.n	8009562 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800949a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800949c:	2b00      	cmp	r3, #0
 800949e:	d004      	beq.n	80094aa <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80094a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094a6:	d012      	beq.n	80094ce <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80094a8:	e05b      	b.n	8009562 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80094aa:	4b92      	ldr	r3, [pc, #584]	; (80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80094b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80094b6:	d107      	bne.n	80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80094b8:	f107 0318 	add.w	r3, r7, #24
 80094bc:	4618      	mov	r0, r3
 80094be:	f000 f991 	bl	80097e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80094c2:	69bb      	ldr	r3, [r7, #24]
 80094c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094c6:	e16e      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80094c8:	2300      	movs	r3, #0
 80094ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80094cc:	e16b      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80094ce:	4b89      	ldr	r3, [pc, #548]	; (80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80094d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094da:	d107      	bne.n	80094ec <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80094dc:	f107 030c 	add.w	r3, r7, #12
 80094e0:	4618      	mov	r0, r3
 80094e2:	f000 fad3 	bl	8009a8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80094e6:	697b      	ldr	r3, [r7, #20]
 80094e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094ea:	e15c      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80094ec:	2300      	movs	r3, #0
 80094ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80094f0:	e159      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80094f2:	4b80      	ldr	r3, [pc, #512]	; (80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80094f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80094fa:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80094fc:	4b7d      	ldr	r3, [pc, #500]	; (80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f003 0304 	and.w	r3, r3, #4
 8009504:	2b04      	cmp	r3, #4
 8009506:	d10c      	bne.n	8009522 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8009508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800950a:	2b00      	cmp	r3, #0
 800950c:	d109      	bne.n	8009522 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800950e:	4b79      	ldr	r3, [pc, #484]	; (80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	08db      	lsrs	r3, r3, #3
 8009514:	f003 0303 	and.w	r3, r3, #3
 8009518:	4a77      	ldr	r2, [pc, #476]	; (80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800951a:	fa22 f303 	lsr.w	r3, r2, r3
 800951e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009520:	e01e      	b.n	8009560 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009522:	4b74      	ldr	r3, [pc, #464]	; (80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800952a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800952e:	d106      	bne.n	800953e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8009530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009532:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009536:	d102      	bne.n	800953e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009538:	4b70      	ldr	r3, [pc, #448]	; (80096fc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800953a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800953c:	e010      	b.n	8009560 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800953e:	4b6d      	ldr	r3, [pc, #436]	; (80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009546:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800954a:	d106      	bne.n	800955a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800954c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800954e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009552:	d102      	bne.n	800955a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009554:	4b6a      	ldr	r3, [pc, #424]	; (8009700 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009556:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009558:	e002      	b.n	8009560 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800955a:	2300      	movs	r3, #0
 800955c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800955e:	e122      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009560:	e121      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009562:	2300      	movs	r3, #0
 8009564:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009566:	e11e      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009568:	e9d7 2300 	ldrd	r2, r3, [r7]
 800956c:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8009570:	430b      	orrs	r3, r1
 8009572:	d133      	bne.n	80095dc <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8009574:	4b5f      	ldr	r3, [pc, #380]	; (80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009576:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009578:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800957c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800957e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009580:	2b00      	cmp	r3, #0
 8009582:	d004      	beq.n	800958e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8009584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009586:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800958a:	d012      	beq.n	80095b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800958c:	e023      	b.n	80095d6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800958e:	4b59      	ldr	r3, [pc, #356]	; (80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009596:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800959a:	d107      	bne.n	80095ac <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800959c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80095a0:	4618      	mov	r0, r3
 80095a2:	f000 fbc7 	bl	8009d34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80095a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095aa:	e0fc      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80095ac:	2300      	movs	r3, #0
 80095ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095b0:	e0f9      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80095b2:	4b50      	ldr	r3, [pc, #320]	; (80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80095ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80095be:	d107      	bne.n	80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095c0:	f107 0318 	add.w	r3, r7, #24
 80095c4:	4618      	mov	r0, r3
 80095c6:	f000 f90d 	bl	80097e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80095ca:	6a3b      	ldr	r3, [r7, #32]
 80095cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095ce:	e0ea      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80095d0:	2300      	movs	r3, #0
 80095d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095d4:	e0e7      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80095d6:	2300      	movs	r3, #0
 80095d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095da:	e0e4      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80095dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095e0:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 80095e4:	430b      	orrs	r3, r1
 80095e6:	f040 808d 	bne.w	8009704 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80095ea:	4b42      	ldr	r3, [pc, #264]	; (80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80095ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095ee:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80095f2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80095f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80095fa:	d06b      	beq.n	80096d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80095fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009602:	d874      	bhi.n	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009606:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800960a:	d056      	beq.n	80096ba <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800960c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800960e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009612:	d86c      	bhi.n	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009616:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800961a:	d03b      	beq.n	8009694 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800961c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800961e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009622:	d864      	bhi.n	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009626:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800962a:	d021      	beq.n	8009670 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800962c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800962e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009632:	d85c      	bhi.n	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009636:	2b00      	cmp	r3, #0
 8009638:	d004      	beq.n	8009644 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800963a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800963c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009640:	d004      	beq.n	800964c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8009642:	e054      	b.n	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009644:	f000 f8b8 	bl	80097b8 <HAL_RCCEx_GetD3PCLK1Freq>
 8009648:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800964a:	e0ac      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800964c:	4b29      	ldr	r3, [pc, #164]	; (80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009654:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009658:	d107      	bne.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800965a:	f107 0318 	add.w	r3, r7, #24
 800965e:	4618      	mov	r0, r3
 8009660:	f000 f8c0 	bl	80097e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009664:	69fb      	ldr	r3, [r7, #28]
 8009666:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009668:	e09d      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800966a:	2300      	movs	r3, #0
 800966c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800966e:	e09a      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009670:	4b20      	ldr	r3, [pc, #128]	; (80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009678:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800967c:	d107      	bne.n	800968e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800967e:	f107 030c 	add.w	r3, r7, #12
 8009682:	4618      	mov	r0, r3
 8009684:	f000 fa02 	bl	8009a8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009688:	693b      	ldr	r3, [r7, #16]
 800968a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800968c:	e08b      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800968e:	2300      	movs	r3, #0
 8009690:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009692:	e088      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009694:	4b17      	ldr	r3, [pc, #92]	; (80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f003 0304 	and.w	r3, r3, #4
 800969c:	2b04      	cmp	r3, #4
 800969e:	d109      	bne.n	80096b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80096a0:	4b14      	ldr	r3, [pc, #80]	; (80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	08db      	lsrs	r3, r3, #3
 80096a6:	f003 0303 	and.w	r3, r3, #3
 80096aa:	4a13      	ldr	r2, [pc, #76]	; (80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80096ac:	fa22 f303 	lsr.w	r3, r2, r3
 80096b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096b2:	e078      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80096b4:	2300      	movs	r3, #0
 80096b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80096b8:	e075      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80096ba:	4b0e      	ldr	r3, [pc, #56]	; (80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096c6:	d102      	bne.n	80096ce <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 80096c8:	4b0c      	ldr	r3, [pc, #48]	; (80096fc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80096ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096cc:	e06b      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80096ce:	2300      	movs	r3, #0
 80096d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80096d2:	e068      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80096d4:	4b07      	ldr	r3, [pc, #28]	; (80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80096e0:	d102      	bne.n	80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 80096e2:	4b07      	ldr	r3, [pc, #28]	; (8009700 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80096e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096e6:	e05e      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80096e8:	2300      	movs	r3, #0
 80096ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80096ec:	e05b      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80096ee:	2300      	movs	r3, #0
 80096f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80096f2:	e058      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80096f4:	58024400 	.word	0x58024400
 80096f8:	03d09000 	.word	0x03d09000
 80096fc:	003d0900 	.word	0x003d0900
 8009700:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009704:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009708:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800970c:	430b      	orrs	r3, r1
 800970e:	d148      	bne.n	80097a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009710:	4b27      	ldr	r3, [pc, #156]	; (80097b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009714:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009718:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800971a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800971c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009720:	d02a      	beq.n	8009778 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8009722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009724:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009728:	d838      	bhi.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800972a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800972c:	2b00      	cmp	r3, #0
 800972e:	d004      	beq.n	800973a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8009730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009732:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009736:	d00d      	beq.n	8009754 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8009738:	e030      	b.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800973a:	4b1d      	ldr	r3, [pc, #116]	; (80097b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009742:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009746:	d102      	bne.n	800974e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8009748:	4b1a      	ldr	r3, [pc, #104]	; (80097b4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800974a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800974c:	e02b      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800974e:	2300      	movs	r3, #0
 8009750:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009752:	e028      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009754:	4b16      	ldr	r3, [pc, #88]	; (80097b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800975c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009760:	d107      	bne.n	8009772 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009762:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009766:	4618      	mov	r0, r3
 8009768:	f000 fae4 	bl	8009d34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800976c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800976e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009770:	e019      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009772:	2300      	movs	r3, #0
 8009774:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009776:	e016      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009778:	4b0d      	ldr	r3, [pc, #52]	; (80097b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009780:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009784:	d107      	bne.n	8009796 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009786:	f107 0318 	add.w	r3, r7, #24
 800978a:	4618      	mov	r0, r3
 800978c:	f000 f82a 	bl	80097e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009790:	69fb      	ldr	r3, [r7, #28]
 8009792:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009794:	e007      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009796:	2300      	movs	r3, #0
 8009798:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800979a:	e004      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800979c:	2300      	movs	r3, #0
 800979e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80097a0:	e001      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 80097a2:	2300      	movs	r3, #0
 80097a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 80097a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	3740      	adds	r7, #64	; 0x40
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}
 80097b0:	58024400 	.word	0x58024400
 80097b4:	017d7840 	.word	0x017d7840

080097b8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80097bc:	f7fe f816 	bl	80077ec <HAL_RCC_GetHCLKFreq>
 80097c0:	4602      	mov	r2, r0
 80097c2:	4b06      	ldr	r3, [pc, #24]	; (80097dc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80097c4:	6a1b      	ldr	r3, [r3, #32]
 80097c6:	091b      	lsrs	r3, r3, #4
 80097c8:	f003 0307 	and.w	r3, r3, #7
 80097cc:	4904      	ldr	r1, [pc, #16]	; (80097e0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80097ce:	5ccb      	ldrb	r3, [r1, r3]
 80097d0:	f003 031f 	and.w	r3, r3, #31
 80097d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80097d8:	4618      	mov	r0, r3
 80097da:	bd80      	pop	{r7, pc}
 80097dc:	58024400 	.word	0x58024400
 80097e0:	0800f314 	.word	0x0800f314

080097e4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80097e4:	b480      	push	{r7}
 80097e6:	b089      	sub	sp, #36	; 0x24
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80097ec:	4ba1      	ldr	r3, [pc, #644]	; (8009a74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097f0:	f003 0303 	and.w	r3, r3, #3
 80097f4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80097f6:	4b9f      	ldr	r3, [pc, #636]	; (8009a74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097fa:	0b1b      	lsrs	r3, r3, #12
 80097fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009800:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009802:	4b9c      	ldr	r3, [pc, #624]	; (8009a74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009806:	091b      	lsrs	r3, r3, #4
 8009808:	f003 0301 	and.w	r3, r3, #1
 800980c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800980e:	4b99      	ldr	r3, [pc, #612]	; (8009a74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009812:	08db      	lsrs	r3, r3, #3
 8009814:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009818:	693a      	ldr	r2, [r7, #16]
 800981a:	fb02 f303 	mul.w	r3, r2, r3
 800981e:	ee07 3a90 	vmov	s15, r3
 8009822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009826:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	2b00      	cmp	r3, #0
 800982e:	f000 8111 	beq.w	8009a54 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009832:	69bb      	ldr	r3, [r7, #24]
 8009834:	2b02      	cmp	r3, #2
 8009836:	f000 8083 	beq.w	8009940 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800983a:	69bb      	ldr	r3, [r7, #24]
 800983c:	2b02      	cmp	r3, #2
 800983e:	f200 80a1 	bhi.w	8009984 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009842:	69bb      	ldr	r3, [r7, #24]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d003      	beq.n	8009850 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009848:	69bb      	ldr	r3, [r7, #24]
 800984a:	2b01      	cmp	r3, #1
 800984c:	d056      	beq.n	80098fc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800984e:	e099      	b.n	8009984 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009850:	4b88      	ldr	r3, [pc, #544]	; (8009a74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f003 0320 	and.w	r3, r3, #32
 8009858:	2b00      	cmp	r3, #0
 800985a:	d02d      	beq.n	80098b8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800985c:	4b85      	ldr	r3, [pc, #532]	; (8009a74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	08db      	lsrs	r3, r3, #3
 8009862:	f003 0303 	and.w	r3, r3, #3
 8009866:	4a84      	ldr	r2, [pc, #528]	; (8009a78 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009868:	fa22 f303 	lsr.w	r3, r2, r3
 800986c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800986e:	68bb      	ldr	r3, [r7, #8]
 8009870:	ee07 3a90 	vmov	s15, r3
 8009874:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009878:	697b      	ldr	r3, [r7, #20]
 800987a:	ee07 3a90 	vmov	s15, r3
 800987e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009882:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009886:	4b7b      	ldr	r3, [pc, #492]	; (8009a74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800988a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800988e:	ee07 3a90 	vmov	s15, r3
 8009892:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009896:	ed97 6a03 	vldr	s12, [r7, #12]
 800989a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009a7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800989e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098b2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80098b6:	e087      	b.n	80099c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	ee07 3a90 	vmov	s15, r3
 80098be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098c2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009a80 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80098c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098ca:	4b6a      	ldr	r3, [pc, #424]	; (8009a74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098d2:	ee07 3a90 	vmov	s15, r3
 80098d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098da:	ed97 6a03 	vldr	s12, [r7, #12]
 80098de:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009a7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80098e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80098fa:	e065      	b.n	80099c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80098fc:	697b      	ldr	r3, [r7, #20]
 80098fe:	ee07 3a90 	vmov	s15, r3
 8009902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009906:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009a84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800990a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800990e:	4b59      	ldr	r3, [pc, #356]	; (8009a74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009912:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009916:	ee07 3a90 	vmov	s15, r3
 800991a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800991e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009922:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009a7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009926:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800992a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800992e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009932:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009936:	ee67 7a27 	vmul.f32	s15, s14, s15
 800993a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800993e:	e043      	b.n	80099c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009940:	697b      	ldr	r3, [r7, #20]
 8009942:	ee07 3a90 	vmov	s15, r3
 8009946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800994a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009a88 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800994e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009952:	4b48      	ldr	r3, [pc, #288]	; (8009a74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009956:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800995a:	ee07 3a90 	vmov	s15, r3
 800995e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009962:	ed97 6a03 	vldr	s12, [r7, #12]
 8009966:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009a7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800996a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800996e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009972:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009976:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800997a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800997e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009982:	e021      	b.n	80099c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009984:	697b      	ldr	r3, [r7, #20]
 8009986:	ee07 3a90 	vmov	s15, r3
 800998a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800998e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009a84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009992:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009996:	4b37      	ldr	r3, [pc, #220]	; (8009a74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800999a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800999e:	ee07 3a90 	vmov	s15, r3
 80099a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80099aa:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009a7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80099ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80099c6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80099c8:	4b2a      	ldr	r3, [pc, #168]	; (8009a74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099cc:	0a5b      	lsrs	r3, r3, #9
 80099ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099d2:	ee07 3a90 	vmov	s15, r3
 80099d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80099de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80099e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099ee:	ee17 2a90 	vmov	r2, s15
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80099f6:	4b1f      	ldr	r3, [pc, #124]	; (8009a74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099fa:	0c1b      	lsrs	r3, r3, #16
 80099fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a00:	ee07 3a90 	vmov	s15, r3
 8009a04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a10:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a1c:	ee17 2a90 	vmov	r2, s15
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009a24:	4b13      	ldr	r3, [pc, #76]	; (8009a74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a28:	0e1b      	lsrs	r3, r3, #24
 8009a2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a2e:	ee07 3a90 	vmov	s15, r3
 8009a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a4a:	ee17 2a90 	vmov	r2, s15
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009a52:	e008      	b.n	8009a66 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2200      	movs	r2, #0
 8009a58:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2200      	movs	r2, #0
 8009a64:	609a      	str	r2, [r3, #8]
}
 8009a66:	bf00      	nop
 8009a68:	3724      	adds	r7, #36	; 0x24
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a70:	4770      	bx	lr
 8009a72:	bf00      	nop
 8009a74:	58024400 	.word	0x58024400
 8009a78:	03d09000 	.word	0x03d09000
 8009a7c:	46000000 	.word	0x46000000
 8009a80:	4c742400 	.word	0x4c742400
 8009a84:	4a742400 	.word	0x4a742400
 8009a88:	4bbebc20 	.word	0x4bbebc20

08009a8c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	b089      	sub	sp, #36	; 0x24
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009a94:	4ba1      	ldr	r3, [pc, #644]	; (8009d1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a98:	f003 0303 	and.w	r3, r3, #3
 8009a9c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009a9e:	4b9f      	ldr	r3, [pc, #636]	; (8009d1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aa2:	0d1b      	lsrs	r3, r3, #20
 8009aa4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009aa8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009aaa:	4b9c      	ldr	r3, [pc, #624]	; (8009d1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aae:	0a1b      	lsrs	r3, r3, #8
 8009ab0:	f003 0301 	and.w	r3, r3, #1
 8009ab4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009ab6:	4b99      	ldr	r3, [pc, #612]	; (8009d1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009aba:	08db      	lsrs	r3, r3, #3
 8009abc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009ac0:	693a      	ldr	r2, [r7, #16]
 8009ac2:	fb02 f303 	mul.w	r3, r2, r3
 8009ac6:	ee07 3a90 	vmov	s15, r3
 8009aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ace:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	f000 8111 	beq.w	8009cfc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009ada:	69bb      	ldr	r3, [r7, #24]
 8009adc:	2b02      	cmp	r3, #2
 8009ade:	f000 8083 	beq.w	8009be8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009ae2:	69bb      	ldr	r3, [r7, #24]
 8009ae4:	2b02      	cmp	r3, #2
 8009ae6:	f200 80a1 	bhi.w	8009c2c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009aea:	69bb      	ldr	r3, [r7, #24]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d003      	beq.n	8009af8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009af0:	69bb      	ldr	r3, [r7, #24]
 8009af2:	2b01      	cmp	r3, #1
 8009af4:	d056      	beq.n	8009ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009af6:	e099      	b.n	8009c2c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009af8:	4b88      	ldr	r3, [pc, #544]	; (8009d1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f003 0320 	and.w	r3, r3, #32
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d02d      	beq.n	8009b60 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009b04:	4b85      	ldr	r3, [pc, #532]	; (8009d1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	08db      	lsrs	r3, r3, #3
 8009b0a:	f003 0303 	and.w	r3, r3, #3
 8009b0e:	4a84      	ldr	r2, [pc, #528]	; (8009d20 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009b10:	fa22 f303 	lsr.w	r3, r2, r3
 8009b14:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	ee07 3a90 	vmov	s15, r3
 8009b1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	ee07 3a90 	vmov	s15, r3
 8009b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b2e:	4b7b      	ldr	r3, [pc, #492]	; (8009d1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b36:	ee07 3a90 	vmov	s15, r3
 8009b3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b42:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009d24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009b46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b5a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009b5e:	e087      	b.n	8009c70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009b60:	697b      	ldr	r3, [r7, #20]
 8009b62:	ee07 3a90 	vmov	s15, r3
 8009b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b6a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009d28 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009b6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b72:	4b6a      	ldr	r3, [pc, #424]	; (8009d1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b7a:	ee07 3a90 	vmov	s15, r3
 8009b7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b82:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b86:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009d24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009b8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009ba2:	e065      	b.n	8009c70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009ba4:	697b      	ldr	r3, [r7, #20]
 8009ba6:	ee07 3a90 	vmov	s15, r3
 8009baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009d2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009bb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bb6:	4b59      	ldr	r3, [pc, #356]	; (8009d1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bbe:	ee07 3a90 	vmov	s15, r3
 8009bc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bca:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009d24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009bce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009be2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009be6:	e043      	b.n	8009c70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009be8:	697b      	ldr	r3, [r7, #20]
 8009bea:	ee07 3a90 	vmov	s15, r3
 8009bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bf2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009d30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009bf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bfa:	4b48      	ldr	r3, [pc, #288]	; (8009d1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c02:	ee07 3a90 	vmov	s15, r3
 8009c06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c0e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009d24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009c12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c2a:	e021      	b.n	8009c70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009c2c:	697b      	ldr	r3, [r7, #20]
 8009c2e:	ee07 3a90 	vmov	s15, r3
 8009c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c36:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009d2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009c3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c3e:	4b37      	ldr	r3, [pc, #220]	; (8009d1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c46:	ee07 3a90 	vmov	s15, r3
 8009c4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c52:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009d24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009c56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c6e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009c70:	4b2a      	ldr	r3, [pc, #168]	; (8009d1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c74:	0a5b      	lsrs	r3, r3, #9
 8009c76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c7a:	ee07 3a90 	vmov	s15, r3
 8009c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c86:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c96:	ee17 2a90 	vmov	r2, s15
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009c9e:	4b1f      	ldr	r3, [pc, #124]	; (8009d1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ca2:	0c1b      	lsrs	r3, r3, #16
 8009ca4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ca8:	ee07 3a90 	vmov	s15, r3
 8009cac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cb0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009cb4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009cb8:	edd7 6a07 	vldr	s13, [r7, #28]
 8009cbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009cc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009cc4:	ee17 2a90 	vmov	r2, s15
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009ccc:	4b13      	ldr	r3, [pc, #76]	; (8009d1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cd0:	0e1b      	lsrs	r3, r3, #24
 8009cd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cd6:	ee07 3a90 	vmov	s15, r3
 8009cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cde:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009ce2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ce6:	edd7 6a07 	vldr	s13, [r7, #28]
 8009cea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009cee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009cf2:	ee17 2a90 	vmov	r2, s15
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009cfa:	e008      	b.n	8009d0e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2200      	movs	r2, #0
 8009d00:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2200      	movs	r2, #0
 8009d06:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	609a      	str	r2, [r3, #8]
}
 8009d0e:	bf00      	nop
 8009d10:	3724      	adds	r7, #36	; 0x24
 8009d12:	46bd      	mov	sp, r7
 8009d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d18:	4770      	bx	lr
 8009d1a:	bf00      	nop
 8009d1c:	58024400 	.word	0x58024400
 8009d20:	03d09000 	.word	0x03d09000
 8009d24:	46000000 	.word	0x46000000
 8009d28:	4c742400 	.word	0x4c742400
 8009d2c:	4a742400 	.word	0x4a742400
 8009d30:	4bbebc20 	.word	0x4bbebc20

08009d34 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009d34:	b480      	push	{r7}
 8009d36:	b089      	sub	sp, #36	; 0x24
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009d3c:	4ba0      	ldr	r3, [pc, #640]	; (8009fc0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d40:	f003 0303 	and.w	r3, r3, #3
 8009d44:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009d46:	4b9e      	ldr	r3, [pc, #632]	; (8009fc0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d4a:	091b      	lsrs	r3, r3, #4
 8009d4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009d50:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009d52:	4b9b      	ldr	r3, [pc, #620]	; (8009fc0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d56:	f003 0301 	and.w	r3, r3, #1
 8009d5a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009d5c:	4b98      	ldr	r3, [pc, #608]	; (8009fc0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d60:	08db      	lsrs	r3, r3, #3
 8009d62:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009d66:	693a      	ldr	r2, [r7, #16]
 8009d68:	fb02 f303 	mul.w	r3, r2, r3
 8009d6c:	ee07 3a90 	vmov	s15, r3
 8009d70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d74:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009d78:	697b      	ldr	r3, [r7, #20]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	f000 8111 	beq.w	8009fa2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009d80:	69bb      	ldr	r3, [r7, #24]
 8009d82:	2b02      	cmp	r3, #2
 8009d84:	f000 8083 	beq.w	8009e8e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009d88:	69bb      	ldr	r3, [r7, #24]
 8009d8a:	2b02      	cmp	r3, #2
 8009d8c:	f200 80a1 	bhi.w	8009ed2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009d90:	69bb      	ldr	r3, [r7, #24]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d003      	beq.n	8009d9e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009d96:	69bb      	ldr	r3, [r7, #24]
 8009d98:	2b01      	cmp	r3, #1
 8009d9a:	d056      	beq.n	8009e4a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009d9c:	e099      	b.n	8009ed2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d9e:	4b88      	ldr	r3, [pc, #544]	; (8009fc0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f003 0320 	and.w	r3, r3, #32
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d02d      	beq.n	8009e06 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009daa:	4b85      	ldr	r3, [pc, #532]	; (8009fc0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	08db      	lsrs	r3, r3, #3
 8009db0:	f003 0303 	and.w	r3, r3, #3
 8009db4:	4a83      	ldr	r2, [pc, #524]	; (8009fc4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009db6:	fa22 f303 	lsr.w	r3, r2, r3
 8009dba:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	ee07 3a90 	vmov	s15, r3
 8009dc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	ee07 3a90 	vmov	s15, r3
 8009dcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dd0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dd4:	4b7a      	ldr	r3, [pc, #488]	; (8009fc0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ddc:	ee07 3a90 	vmov	s15, r3
 8009de0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009de4:	ed97 6a03 	vldr	s12, [r7, #12]
 8009de8:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009fc8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009dec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009df0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009df4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009df8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009dfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e00:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009e04:	e087      	b.n	8009f16 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009e06:	697b      	ldr	r3, [r7, #20]
 8009e08:	ee07 3a90 	vmov	s15, r3
 8009e0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e10:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009fcc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009e14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e18:	4b69      	ldr	r3, [pc, #420]	; (8009fc0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e20:	ee07 3a90 	vmov	s15, r3
 8009e24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e28:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e2c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009fc8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009e30:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e44:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e48:	e065      	b.n	8009f16 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009e4a:	697b      	ldr	r3, [r7, #20]
 8009e4c:	ee07 3a90 	vmov	s15, r3
 8009e50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e54:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009fd0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009e58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e5c:	4b58      	ldr	r3, [pc, #352]	; (8009fc0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e64:	ee07 3a90 	vmov	s15, r3
 8009e68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e6c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e70:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009fc8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009e74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e88:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e8c:	e043      	b.n	8009f16 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009e8e:	697b      	ldr	r3, [r7, #20]
 8009e90:	ee07 3a90 	vmov	s15, r3
 8009e94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e98:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009fd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009e9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ea0:	4b47      	ldr	r3, [pc, #284]	; (8009fc0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ea4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ea8:	ee07 3a90 	vmov	s15, r3
 8009eac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009eb0:	ed97 6a03 	vldr	s12, [r7, #12]
 8009eb4:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009fc8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009eb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ebc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ec0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ec4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ec8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ecc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009ed0:	e021      	b.n	8009f16 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009ed2:	697b      	ldr	r3, [r7, #20]
 8009ed4:	ee07 3a90 	vmov	s15, r3
 8009ed8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009edc:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009fcc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009ee0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ee4:	4b36      	ldr	r3, [pc, #216]	; (8009fc0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ee8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009eec:	ee07 3a90 	vmov	s15, r3
 8009ef0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ef4:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ef8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009fc8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009efc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f10:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009f14:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8009f16:	4b2a      	ldr	r3, [pc, #168]	; (8009fc0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f1a:	0a5b      	lsrs	r3, r3, #9
 8009f1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f20:	ee07 3a90 	vmov	s15, r3
 8009f24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f2c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f30:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f3c:	ee17 2a90 	vmov	r2, s15
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009f44:	4b1e      	ldr	r3, [pc, #120]	; (8009fc0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f48:	0c1b      	lsrs	r3, r3, #16
 8009f4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f4e:	ee07 3a90 	vmov	s15, r3
 8009f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f6a:	ee17 2a90 	vmov	r2, s15
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8009f72:	4b13      	ldr	r3, [pc, #76]	; (8009fc0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f76:	0e1b      	lsrs	r3, r3, #24
 8009f78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f7c:	ee07 3a90 	vmov	s15, r3
 8009f80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f88:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f8c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f98:	ee17 2a90 	vmov	r2, s15
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009fa0:	e008      	b.n	8009fb4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2200      	movs	r2, #0
 8009fac:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	609a      	str	r2, [r3, #8]
}
 8009fb4:	bf00      	nop
 8009fb6:	3724      	adds	r7, #36	; 0x24
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbe:	4770      	bx	lr
 8009fc0:	58024400 	.word	0x58024400
 8009fc4:	03d09000 	.word	0x03d09000
 8009fc8:	46000000 	.word	0x46000000
 8009fcc:	4c742400 	.word	0x4c742400
 8009fd0:	4a742400 	.word	0x4a742400
 8009fd4:	4bbebc20 	.word	0x4bbebc20

08009fd8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b084      	sub	sp, #16
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
 8009fe0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009fe6:	4b53      	ldr	r3, [pc, #332]	; (800a134 <RCCEx_PLL2_Config+0x15c>)
 8009fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fea:	f003 0303 	and.w	r3, r3, #3
 8009fee:	2b03      	cmp	r3, #3
 8009ff0:	d101      	bne.n	8009ff6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009ff2:	2301      	movs	r3, #1
 8009ff4:	e099      	b.n	800a12a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009ff6:	4b4f      	ldr	r3, [pc, #316]	; (800a134 <RCCEx_PLL2_Config+0x15c>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	4a4e      	ldr	r2, [pc, #312]	; (800a134 <RCCEx_PLL2_Config+0x15c>)
 8009ffc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a000:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a002:	f7f8 ff75 	bl	8002ef0 <HAL_GetTick>
 800a006:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a008:	e008      	b.n	800a01c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a00a:	f7f8 ff71 	bl	8002ef0 <HAL_GetTick>
 800a00e:	4602      	mov	r2, r0
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	1ad3      	subs	r3, r2, r3
 800a014:	2b02      	cmp	r3, #2
 800a016:	d901      	bls.n	800a01c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a018:	2303      	movs	r3, #3
 800a01a:	e086      	b.n	800a12a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a01c:	4b45      	ldr	r3, [pc, #276]	; (800a134 <RCCEx_PLL2_Config+0x15c>)
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a024:	2b00      	cmp	r3, #0
 800a026:	d1f0      	bne.n	800a00a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a028:	4b42      	ldr	r3, [pc, #264]	; (800a134 <RCCEx_PLL2_Config+0x15c>)
 800a02a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a02c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	031b      	lsls	r3, r3, #12
 800a036:	493f      	ldr	r1, [pc, #252]	; (800a134 <RCCEx_PLL2_Config+0x15c>)
 800a038:	4313      	orrs	r3, r2
 800a03a:	628b      	str	r3, [r1, #40]	; 0x28
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	685b      	ldr	r3, [r3, #4]
 800a040:	3b01      	subs	r3, #1
 800a042:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	689b      	ldr	r3, [r3, #8]
 800a04a:	3b01      	subs	r3, #1
 800a04c:	025b      	lsls	r3, r3, #9
 800a04e:	b29b      	uxth	r3, r3
 800a050:	431a      	orrs	r2, r3
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	68db      	ldr	r3, [r3, #12]
 800a056:	3b01      	subs	r3, #1
 800a058:	041b      	lsls	r3, r3, #16
 800a05a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a05e:	431a      	orrs	r2, r3
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	691b      	ldr	r3, [r3, #16]
 800a064:	3b01      	subs	r3, #1
 800a066:	061b      	lsls	r3, r3, #24
 800a068:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a06c:	4931      	ldr	r1, [pc, #196]	; (800a134 <RCCEx_PLL2_Config+0x15c>)
 800a06e:	4313      	orrs	r3, r2
 800a070:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a072:	4b30      	ldr	r3, [pc, #192]	; (800a134 <RCCEx_PLL2_Config+0x15c>)
 800a074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a076:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	695b      	ldr	r3, [r3, #20]
 800a07e:	492d      	ldr	r1, [pc, #180]	; (800a134 <RCCEx_PLL2_Config+0x15c>)
 800a080:	4313      	orrs	r3, r2
 800a082:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a084:	4b2b      	ldr	r3, [pc, #172]	; (800a134 <RCCEx_PLL2_Config+0x15c>)
 800a086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a088:	f023 0220 	bic.w	r2, r3, #32
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	699b      	ldr	r3, [r3, #24]
 800a090:	4928      	ldr	r1, [pc, #160]	; (800a134 <RCCEx_PLL2_Config+0x15c>)
 800a092:	4313      	orrs	r3, r2
 800a094:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a096:	4b27      	ldr	r3, [pc, #156]	; (800a134 <RCCEx_PLL2_Config+0x15c>)
 800a098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a09a:	4a26      	ldr	r2, [pc, #152]	; (800a134 <RCCEx_PLL2_Config+0x15c>)
 800a09c:	f023 0310 	bic.w	r3, r3, #16
 800a0a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a0a2:	4b24      	ldr	r3, [pc, #144]	; (800a134 <RCCEx_PLL2_Config+0x15c>)
 800a0a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a0a6:	4b24      	ldr	r3, [pc, #144]	; (800a138 <RCCEx_PLL2_Config+0x160>)
 800a0a8:	4013      	ands	r3, r2
 800a0aa:	687a      	ldr	r2, [r7, #4]
 800a0ac:	69d2      	ldr	r2, [r2, #28]
 800a0ae:	00d2      	lsls	r2, r2, #3
 800a0b0:	4920      	ldr	r1, [pc, #128]	; (800a134 <RCCEx_PLL2_Config+0x15c>)
 800a0b2:	4313      	orrs	r3, r2
 800a0b4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a0b6:	4b1f      	ldr	r3, [pc, #124]	; (800a134 <RCCEx_PLL2_Config+0x15c>)
 800a0b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ba:	4a1e      	ldr	r2, [pc, #120]	; (800a134 <RCCEx_PLL2_Config+0x15c>)
 800a0bc:	f043 0310 	orr.w	r3, r3, #16
 800a0c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d106      	bne.n	800a0d6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a0c8:	4b1a      	ldr	r3, [pc, #104]	; (800a134 <RCCEx_PLL2_Config+0x15c>)
 800a0ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0cc:	4a19      	ldr	r2, [pc, #100]	; (800a134 <RCCEx_PLL2_Config+0x15c>)
 800a0ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a0d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a0d4:	e00f      	b.n	800a0f6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	2b01      	cmp	r3, #1
 800a0da:	d106      	bne.n	800a0ea <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a0dc:	4b15      	ldr	r3, [pc, #84]	; (800a134 <RCCEx_PLL2_Config+0x15c>)
 800a0de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0e0:	4a14      	ldr	r2, [pc, #80]	; (800a134 <RCCEx_PLL2_Config+0x15c>)
 800a0e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a0e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a0e8:	e005      	b.n	800a0f6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a0ea:	4b12      	ldr	r3, [pc, #72]	; (800a134 <RCCEx_PLL2_Config+0x15c>)
 800a0ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ee:	4a11      	ldr	r2, [pc, #68]	; (800a134 <RCCEx_PLL2_Config+0x15c>)
 800a0f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a0f4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a0f6:	4b0f      	ldr	r3, [pc, #60]	; (800a134 <RCCEx_PLL2_Config+0x15c>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	4a0e      	ldr	r2, [pc, #56]	; (800a134 <RCCEx_PLL2_Config+0x15c>)
 800a0fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a100:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a102:	f7f8 fef5 	bl	8002ef0 <HAL_GetTick>
 800a106:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a108:	e008      	b.n	800a11c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a10a:	f7f8 fef1 	bl	8002ef0 <HAL_GetTick>
 800a10e:	4602      	mov	r2, r0
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	1ad3      	subs	r3, r2, r3
 800a114:	2b02      	cmp	r3, #2
 800a116:	d901      	bls.n	800a11c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a118:	2303      	movs	r3, #3
 800a11a:	e006      	b.n	800a12a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a11c:	4b05      	ldr	r3, [pc, #20]	; (800a134 <RCCEx_PLL2_Config+0x15c>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a124:	2b00      	cmp	r3, #0
 800a126:	d0f0      	beq.n	800a10a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a128:	7bfb      	ldrb	r3, [r7, #15]
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3710      	adds	r7, #16
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}
 800a132:	bf00      	nop
 800a134:	58024400 	.word	0x58024400
 800a138:	ffff0007 	.word	0xffff0007

0800a13c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b084      	sub	sp, #16
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
 800a144:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a146:	2300      	movs	r3, #0
 800a148:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a14a:	4b53      	ldr	r3, [pc, #332]	; (800a298 <RCCEx_PLL3_Config+0x15c>)
 800a14c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a14e:	f003 0303 	and.w	r3, r3, #3
 800a152:	2b03      	cmp	r3, #3
 800a154:	d101      	bne.n	800a15a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a156:	2301      	movs	r3, #1
 800a158:	e099      	b.n	800a28e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a15a:	4b4f      	ldr	r3, [pc, #316]	; (800a298 <RCCEx_PLL3_Config+0x15c>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	4a4e      	ldr	r2, [pc, #312]	; (800a298 <RCCEx_PLL3_Config+0x15c>)
 800a160:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a164:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a166:	f7f8 fec3 	bl	8002ef0 <HAL_GetTick>
 800a16a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a16c:	e008      	b.n	800a180 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a16e:	f7f8 febf 	bl	8002ef0 <HAL_GetTick>
 800a172:	4602      	mov	r2, r0
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	1ad3      	subs	r3, r2, r3
 800a178:	2b02      	cmp	r3, #2
 800a17a:	d901      	bls.n	800a180 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a17c:	2303      	movs	r3, #3
 800a17e:	e086      	b.n	800a28e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a180:	4b45      	ldr	r3, [pc, #276]	; (800a298 <RCCEx_PLL3_Config+0x15c>)
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d1f0      	bne.n	800a16e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a18c:	4b42      	ldr	r3, [pc, #264]	; (800a298 <RCCEx_PLL3_Config+0x15c>)
 800a18e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a190:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	051b      	lsls	r3, r3, #20
 800a19a:	493f      	ldr	r1, [pc, #252]	; (800a298 <RCCEx_PLL3_Config+0x15c>)
 800a19c:	4313      	orrs	r3, r2
 800a19e:	628b      	str	r3, [r1, #40]	; 0x28
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	685b      	ldr	r3, [r3, #4]
 800a1a4:	3b01      	subs	r3, #1
 800a1a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	689b      	ldr	r3, [r3, #8]
 800a1ae:	3b01      	subs	r3, #1
 800a1b0:	025b      	lsls	r3, r3, #9
 800a1b2:	b29b      	uxth	r3, r3
 800a1b4:	431a      	orrs	r2, r3
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	68db      	ldr	r3, [r3, #12]
 800a1ba:	3b01      	subs	r3, #1
 800a1bc:	041b      	lsls	r3, r3, #16
 800a1be:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a1c2:	431a      	orrs	r2, r3
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	691b      	ldr	r3, [r3, #16]
 800a1c8:	3b01      	subs	r3, #1
 800a1ca:	061b      	lsls	r3, r3, #24
 800a1cc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a1d0:	4931      	ldr	r1, [pc, #196]	; (800a298 <RCCEx_PLL3_Config+0x15c>)
 800a1d2:	4313      	orrs	r3, r2
 800a1d4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a1d6:	4b30      	ldr	r3, [pc, #192]	; (800a298 <RCCEx_PLL3_Config+0x15c>)
 800a1d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1da:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	695b      	ldr	r3, [r3, #20]
 800a1e2:	492d      	ldr	r1, [pc, #180]	; (800a298 <RCCEx_PLL3_Config+0x15c>)
 800a1e4:	4313      	orrs	r3, r2
 800a1e6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a1e8:	4b2b      	ldr	r3, [pc, #172]	; (800a298 <RCCEx_PLL3_Config+0x15c>)
 800a1ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1ec:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	699b      	ldr	r3, [r3, #24]
 800a1f4:	4928      	ldr	r1, [pc, #160]	; (800a298 <RCCEx_PLL3_Config+0x15c>)
 800a1f6:	4313      	orrs	r3, r2
 800a1f8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a1fa:	4b27      	ldr	r3, [pc, #156]	; (800a298 <RCCEx_PLL3_Config+0x15c>)
 800a1fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1fe:	4a26      	ldr	r2, [pc, #152]	; (800a298 <RCCEx_PLL3_Config+0x15c>)
 800a200:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a204:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a206:	4b24      	ldr	r3, [pc, #144]	; (800a298 <RCCEx_PLL3_Config+0x15c>)
 800a208:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a20a:	4b24      	ldr	r3, [pc, #144]	; (800a29c <RCCEx_PLL3_Config+0x160>)
 800a20c:	4013      	ands	r3, r2
 800a20e:	687a      	ldr	r2, [r7, #4]
 800a210:	69d2      	ldr	r2, [r2, #28]
 800a212:	00d2      	lsls	r2, r2, #3
 800a214:	4920      	ldr	r1, [pc, #128]	; (800a298 <RCCEx_PLL3_Config+0x15c>)
 800a216:	4313      	orrs	r3, r2
 800a218:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a21a:	4b1f      	ldr	r3, [pc, #124]	; (800a298 <RCCEx_PLL3_Config+0x15c>)
 800a21c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a21e:	4a1e      	ldr	r2, [pc, #120]	; (800a298 <RCCEx_PLL3_Config+0x15c>)
 800a220:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a224:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d106      	bne.n	800a23a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a22c:	4b1a      	ldr	r3, [pc, #104]	; (800a298 <RCCEx_PLL3_Config+0x15c>)
 800a22e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a230:	4a19      	ldr	r2, [pc, #100]	; (800a298 <RCCEx_PLL3_Config+0x15c>)
 800a232:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a236:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a238:	e00f      	b.n	800a25a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	2b01      	cmp	r3, #1
 800a23e:	d106      	bne.n	800a24e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a240:	4b15      	ldr	r3, [pc, #84]	; (800a298 <RCCEx_PLL3_Config+0x15c>)
 800a242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a244:	4a14      	ldr	r2, [pc, #80]	; (800a298 <RCCEx_PLL3_Config+0x15c>)
 800a246:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a24a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a24c:	e005      	b.n	800a25a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a24e:	4b12      	ldr	r3, [pc, #72]	; (800a298 <RCCEx_PLL3_Config+0x15c>)
 800a250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a252:	4a11      	ldr	r2, [pc, #68]	; (800a298 <RCCEx_PLL3_Config+0x15c>)
 800a254:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a258:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a25a:	4b0f      	ldr	r3, [pc, #60]	; (800a298 <RCCEx_PLL3_Config+0x15c>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	4a0e      	ldr	r2, [pc, #56]	; (800a298 <RCCEx_PLL3_Config+0x15c>)
 800a260:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a264:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a266:	f7f8 fe43 	bl	8002ef0 <HAL_GetTick>
 800a26a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a26c:	e008      	b.n	800a280 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a26e:	f7f8 fe3f 	bl	8002ef0 <HAL_GetTick>
 800a272:	4602      	mov	r2, r0
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	1ad3      	subs	r3, r2, r3
 800a278:	2b02      	cmp	r3, #2
 800a27a:	d901      	bls.n	800a280 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a27c:	2303      	movs	r3, #3
 800a27e:	e006      	b.n	800a28e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a280:	4b05      	ldr	r3, [pc, #20]	; (800a298 <RCCEx_PLL3_Config+0x15c>)
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d0f0      	beq.n	800a26e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a28c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a28e:	4618      	mov	r0, r3
 800a290:	3710      	adds	r7, #16
 800a292:	46bd      	mov	sp, r7
 800a294:	bd80      	pop	{r7, pc}
 800a296:	bf00      	nop
 800a298:	58024400 	.word	0x58024400
 800a29c:	ffff0007 	.word	0xffff0007

0800a2a0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b084      	sub	sp, #16
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a2a8:	2301      	movs	r3, #1
 800a2aa:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d071      	beq.n	800a396 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a2b8:	b2db      	uxtb	r3, r3
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d106      	bne.n	800a2cc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800a2c6:	6878      	ldr	r0, [r7, #4]
 800a2c8:	f7f8 f8fa 	bl	80024c0 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2202      	movs	r2, #2
 800a2d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	68db      	ldr	r3, [r3, #12]
 800a2da:	f003 0310 	and.w	r3, r3, #16
 800a2de:	2b10      	cmp	r3, #16
 800a2e0:	d050      	beq.n	800a384 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	22ca      	movs	r2, #202	; 0xca
 800a2e8:	625a      	str	r2, [r3, #36]	; 0x24
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	2253      	movs	r2, #83	; 0x53
 800a2f0:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	f000 fa4a 	bl	800a78c <RTC_EnterInitMode>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800a2fc:	7bfb      	ldrb	r3, [r7, #15]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d124      	bne.n	800a34c <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	6899      	ldr	r1, [r3, #8]
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681a      	ldr	r2, [r3, #0]
 800a30c:	4b24      	ldr	r3, [pc, #144]	; (800a3a0 <HAL_RTC_Init+0x100>)
 800a30e:	400b      	ands	r3, r1
 800a310:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	6899      	ldr	r1, [r3, #8]
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	685a      	ldr	r2, [r3, #4]
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	691b      	ldr	r3, [r3, #16]
 800a320:	431a      	orrs	r2, r3
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	699b      	ldr	r3, [r3, #24]
 800a326:	431a      	orrs	r2, r3
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	430a      	orrs	r2, r1
 800a32e:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	689b      	ldr	r3, [r3, #8]
 800a334:	0419      	lsls	r1, r3, #16
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	68da      	ldr	r2, [r3, #12]
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	430a      	orrs	r2, r1
 800a340:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	f000 fa56 	bl	800a7f4 <RTC_ExitInitMode>
 800a348:	4603      	mov	r3, r0
 800a34a:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800a34c:	7bfb      	ldrb	r3, [r7, #15]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d113      	bne.n	800a37a <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f022 0203 	bic.w	r2, r2, #3
 800a360:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	69da      	ldr	r2, [r3, #28]
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	695b      	ldr	r3, [r3, #20]
 800a370:	431a      	orrs	r2, r3
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	430a      	orrs	r2, r1
 800a378:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	22ff      	movs	r2, #255	; 0xff
 800a380:	625a      	str	r2, [r3, #36]	; 0x24
 800a382:	e001      	b.n	800a388 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800a384:	2300      	movs	r3, #0
 800a386:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800a388:	7bfb      	ldrb	r3, [r7, #15]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d103      	bne.n	800a396 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2201      	movs	r2, #1
 800a392:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800a396:	7bfb      	ldrb	r3, [r7, #15]
}
 800a398:	4618      	mov	r0, r3
 800a39a:	3710      	adds	r7, #16
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bd80      	pop	{r7, pc}
 800a3a0:	ff8fffbf 	.word	0xff8fffbf

0800a3a4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a3a4:	b590      	push	{r4, r7, lr}
 800a3a6:	b087      	sub	sp, #28
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	60f8      	str	r0, [r7, #12]
 800a3ac:	60b9      	str	r1, [r7, #8]
 800a3ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a3b6:	2b01      	cmp	r3, #1
 800a3b8:	d101      	bne.n	800a3be <HAL_RTC_SetTime+0x1a>
 800a3ba:	2302      	movs	r3, #2
 800a3bc:	e089      	b.n	800a4d2 <HAL_RTC_SetTime+0x12e>
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	2201      	movs	r2, #1
 800a3c2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	2202      	movs	r2, #2
 800a3ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	22ca      	movs	r2, #202	; 0xca
 800a3d4:	625a      	str	r2, [r3, #36]	; 0x24
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	2253      	movs	r2, #83	; 0x53
 800a3dc:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a3de:	68f8      	ldr	r0, [r7, #12]
 800a3e0:	f000 f9d4 	bl	800a78c <RTC_EnterInitMode>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800a3e8:	7cfb      	ldrb	r3, [r7, #19]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d161      	bne.n	800a4b2 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d126      	bne.n	800a442 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	689b      	ldr	r3, [r3, #8]
 800a3fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d102      	bne.n	800a408 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800a402:	68bb      	ldr	r3, [r7, #8]
 800a404:	2200      	movs	r2, #0
 800a406:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	781b      	ldrb	r3, [r3, #0]
 800a40c:	4618      	mov	r0, r3
 800a40e:	f000 fa2f 	bl	800a870 <RTC_ByteToBcd2>
 800a412:	4603      	mov	r3, r0
 800a414:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	785b      	ldrb	r3, [r3, #1]
 800a41a:	4618      	mov	r0, r3
 800a41c:	f000 fa28 	bl	800a870 <RTC_ByteToBcd2>
 800a420:	4603      	mov	r3, r0
 800a422:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a424:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	789b      	ldrb	r3, [r3, #2]
 800a42a:	4618      	mov	r0, r3
 800a42c:	f000 fa20 	bl	800a870 <RTC_ByteToBcd2>
 800a430:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a432:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800a436:	68bb      	ldr	r3, [r7, #8]
 800a438:	78db      	ldrb	r3, [r3, #3]
 800a43a:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a43c:	4313      	orrs	r3, r2
 800a43e:	617b      	str	r3, [r7, #20]
 800a440:	e018      	b.n	800a474 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	689b      	ldr	r3, [r3, #8]
 800a448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d102      	bne.n	800a456 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	2200      	movs	r2, #0
 800a454:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	781b      	ldrb	r3, [r3, #0]
 800a45a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	785b      	ldrb	r3, [r3, #1]
 800a460:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a462:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800a464:	68ba      	ldr	r2, [r7, #8]
 800a466:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a468:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800a46a:	68bb      	ldr	r3, [r7, #8]
 800a46c:	78db      	ldrb	r3, [r3, #3]
 800a46e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a470:	4313      	orrs	r3, r2
 800a472:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	681a      	ldr	r2, [r3, #0]
 800a478:	6979      	ldr	r1, [r7, #20]
 800a47a:	4b18      	ldr	r3, [pc, #96]	; (800a4dc <HAL_RTC_SetTime+0x138>)
 800a47c:	400b      	ands	r3, r1
 800a47e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	689a      	ldr	r2, [r3, #8]
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a48e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	6899      	ldr	r1, [r3, #8]
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	68da      	ldr	r2, [r3, #12]
 800a49a:	68bb      	ldr	r3, [r7, #8]
 800a49c:	691b      	ldr	r3, [r3, #16]
 800a49e:	431a      	orrs	r2, r3
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	430a      	orrs	r2, r1
 800a4a6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a4a8:	68f8      	ldr	r0, [r7, #12]
 800a4aa:	f000 f9a3 	bl	800a7f4 <RTC_ExitInitMode>
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	22ff      	movs	r2, #255	; 0xff
 800a4b8:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800a4ba:	7cfb      	ldrb	r3, [r7, #19]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d103      	bne.n	800a4c8 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	2201      	movs	r2, #1
 800a4c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800a4d0:	7cfb      	ldrb	r3, [r7, #19]
}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	371c      	adds	r7, #28
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd90      	pop	{r4, r7, pc}
 800a4da:	bf00      	nop
 800a4dc:	007f7f7f 	.word	0x007f7f7f

0800a4e0 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b086      	sub	sp, #24
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	60f8      	str	r0, [r7, #12]
 800a4e8:	60b9      	str	r1, [r7, #8]
 800a4ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	691b      	ldr	r3, [r3, #16]
 800a4fc:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	681a      	ldr	r2, [r3, #0]
 800a50a:	4b22      	ldr	r3, [pc, #136]	; (800a594 <HAL_RTC_GetTime+0xb4>)
 800a50c:	4013      	ands	r3, r2
 800a50e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800a510:	697b      	ldr	r3, [r7, #20]
 800a512:	0c1b      	lsrs	r3, r3, #16
 800a514:	b2db      	uxtb	r3, r3
 800a516:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a51a:	b2da      	uxtb	r2, r3
 800a51c:	68bb      	ldr	r3, [r7, #8]
 800a51e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800a520:	697b      	ldr	r3, [r7, #20]
 800a522:	0a1b      	lsrs	r3, r3, #8
 800a524:	b2db      	uxtb	r3, r3
 800a526:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a52a:	b2da      	uxtb	r2, r3
 800a52c:	68bb      	ldr	r3, [r7, #8]
 800a52e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800a530:	697b      	ldr	r3, [r7, #20]
 800a532:	b2db      	uxtb	r3, r3
 800a534:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a538:	b2da      	uxtb	r2, r3
 800a53a:	68bb      	ldr	r3, [r7, #8]
 800a53c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	0d9b      	lsrs	r3, r3, #22
 800a542:	b2db      	uxtb	r3, r3
 800a544:	f003 0301 	and.w	r3, r3, #1
 800a548:	b2da      	uxtb	r2, r3
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d11a      	bne.n	800a58a <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	781b      	ldrb	r3, [r3, #0]
 800a558:	4618      	mov	r0, r3
 800a55a:	f000 f9a9 	bl	800a8b0 <RTC_Bcd2ToByte>
 800a55e:	4603      	mov	r3, r0
 800a560:	461a      	mov	r2, r3
 800a562:	68bb      	ldr	r3, [r7, #8]
 800a564:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	785b      	ldrb	r3, [r3, #1]
 800a56a:	4618      	mov	r0, r3
 800a56c:	f000 f9a0 	bl	800a8b0 <RTC_Bcd2ToByte>
 800a570:	4603      	mov	r3, r0
 800a572:	461a      	mov	r2, r3
 800a574:	68bb      	ldr	r3, [r7, #8]
 800a576:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	789b      	ldrb	r3, [r3, #2]
 800a57c:	4618      	mov	r0, r3
 800a57e:	f000 f997 	bl	800a8b0 <RTC_Bcd2ToByte>
 800a582:	4603      	mov	r3, r0
 800a584:	461a      	mov	r2, r3
 800a586:	68bb      	ldr	r3, [r7, #8]
 800a588:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800a58a:	2300      	movs	r3, #0
}
 800a58c:	4618      	mov	r0, r3
 800a58e:	3718      	adds	r7, #24
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}
 800a594:	007f7f7f 	.word	0x007f7f7f

0800a598 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a598:	b590      	push	{r4, r7, lr}
 800a59a:	b087      	sub	sp, #28
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	60f8      	str	r0, [r7, #12]
 800a5a0:	60b9      	str	r1, [r7, #8]
 800a5a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a5aa:	2b01      	cmp	r3, #1
 800a5ac:	d101      	bne.n	800a5b2 <HAL_RTC_SetDate+0x1a>
 800a5ae:	2302      	movs	r3, #2
 800a5b0:	e073      	b.n	800a69a <HAL_RTC_SetDate+0x102>
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	2201      	movs	r2, #1
 800a5b6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	2202      	movs	r2, #2
 800a5be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d10e      	bne.n	800a5e6 <HAL_RTC_SetDate+0x4e>
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	785b      	ldrb	r3, [r3, #1]
 800a5cc:	f003 0310 	and.w	r3, r3, #16
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d008      	beq.n	800a5e6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800a5d4:	68bb      	ldr	r3, [r7, #8]
 800a5d6:	785b      	ldrb	r3, [r3, #1]
 800a5d8:	f023 0310 	bic.w	r3, r3, #16
 800a5dc:	b2db      	uxtb	r3, r3
 800a5de:	330a      	adds	r3, #10
 800a5e0:	b2da      	uxtb	r2, r3
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d11c      	bne.n	800a626 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800a5ec:	68bb      	ldr	r3, [r7, #8]
 800a5ee:	78db      	ldrb	r3, [r3, #3]
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	f000 f93d 	bl	800a870 <RTC_ByteToBcd2>
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a5fa:	68bb      	ldr	r3, [r7, #8]
 800a5fc:	785b      	ldrb	r3, [r3, #1]
 800a5fe:	4618      	mov	r0, r3
 800a600:	f000 f936 	bl	800a870 <RTC_ByteToBcd2>
 800a604:	4603      	mov	r3, r0
 800a606:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800a608:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	789b      	ldrb	r3, [r3, #2]
 800a60e:	4618      	mov	r0, r3
 800a610:	f000 f92e 	bl	800a870 <RTC_ByteToBcd2>
 800a614:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a616:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	781b      	ldrb	r3, [r3, #0]
 800a61e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800a620:	4313      	orrs	r3, r2
 800a622:	617b      	str	r3, [r7, #20]
 800a624:	e00e      	b.n	800a644 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	78db      	ldrb	r3, [r3, #3]
 800a62a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800a62c:	68bb      	ldr	r3, [r7, #8]
 800a62e:	785b      	ldrb	r3, [r3, #1]
 800a630:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800a632:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800a634:	68ba      	ldr	r2, [r7, #8]
 800a636:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800a638:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800a63a:	68bb      	ldr	r3, [r7, #8]
 800a63c:	781b      	ldrb	r3, [r3, #0]
 800a63e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800a640:	4313      	orrs	r3, r2
 800a642:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	22ca      	movs	r2, #202	; 0xca
 800a64a:	625a      	str	r2, [r3, #36]	; 0x24
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	2253      	movs	r2, #83	; 0x53
 800a652:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a654:	68f8      	ldr	r0, [r7, #12]
 800a656:	f000 f899 	bl	800a78c <RTC_EnterInitMode>
 800a65a:	4603      	mov	r3, r0
 800a65c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800a65e:	7cfb      	ldrb	r3, [r7, #19]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d10a      	bne.n	800a67a <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	681a      	ldr	r2, [r3, #0]
 800a668:	6979      	ldr	r1, [r7, #20]
 800a66a:	4b0e      	ldr	r3, [pc, #56]	; (800a6a4 <HAL_RTC_SetDate+0x10c>)
 800a66c:	400b      	ands	r3, r1
 800a66e:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a670:	68f8      	ldr	r0, [r7, #12]
 800a672:	f000 f8bf 	bl	800a7f4 <RTC_ExitInitMode>
 800a676:	4603      	mov	r3, r0
 800a678:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	22ff      	movs	r2, #255	; 0xff
 800a680:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800a682:	7cfb      	ldrb	r3, [r7, #19]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d103      	bne.n	800a690 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	2201      	movs	r2, #1
 800a68c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	2200      	movs	r2, #0
 800a694:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800a698:	7cfb      	ldrb	r3, [r7, #19]


}
 800a69a:	4618      	mov	r0, r3
 800a69c:	371c      	adds	r7, #28
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	bd90      	pop	{r4, r7, pc}
 800a6a2:	bf00      	nop
 800a6a4:	00ffff3f 	.word	0x00ffff3f

0800a6a8 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b086      	sub	sp, #24
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	60f8      	str	r0, [r7, #12]
 800a6b0:	60b9      	str	r1, [r7, #8]
 800a6b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	685a      	ldr	r2, [r3, #4]
 800a6ba:	4b21      	ldr	r3, [pc, #132]	; (800a740 <HAL_RTC_GetDate+0x98>)
 800a6bc:	4013      	ands	r3, r2
 800a6be:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800a6c0:	697b      	ldr	r3, [r7, #20]
 800a6c2:	0c1b      	lsrs	r3, r3, #16
 800a6c4:	b2da      	uxtb	r2, r3
 800a6c6:	68bb      	ldr	r3, [r7, #8]
 800a6c8:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800a6ca:	697b      	ldr	r3, [r7, #20]
 800a6cc:	0a1b      	lsrs	r3, r3, #8
 800a6ce:	b2db      	uxtb	r3, r3
 800a6d0:	f003 031f 	and.w	r3, r3, #31
 800a6d4:	b2da      	uxtb	r2, r3
 800a6d6:	68bb      	ldr	r3, [r7, #8]
 800a6d8:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800a6da:	697b      	ldr	r3, [r7, #20]
 800a6dc:	b2db      	uxtb	r3, r3
 800a6de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a6e2:	b2da      	uxtb	r2, r3
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800a6e8:	697b      	ldr	r3, [r7, #20]
 800a6ea:	0b5b      	lsrs	r3, r3, #13
 800a6ec:	b2db      	uxtb	r3, r3
 800a6ee:	f003 0307 	and.w	r3, r3, #7
 800a6f2:	b2da      	uxtb	r2, r3
 800a6f4:	68bb      	ldr	r3, [r7, #8]
 800a6f6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d11a      	bne.n	800a734 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800a6fe:	68bb      	ldr	r3, [r7, #8]
 800a700:	78db      	ldrb	r3, [r3, #3]
 800a702:	4618      	mov	r0, r3
 800a704:	f000 f8d4 	bl	800a8b0 <RTC_Bcd2ToByte>
 800a708:	4603      	mov	r3, r0
 800a70a:	461a      	mov	r2, r3
 800a70c:	68bb      	ldr	r3, [r7, #8]
 800a70e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800a710:	68bb      	ldr	r3, [r7, #8]
 800a712:	785b      	ldrb	r3, [r3, #1]
 800a714:	4618      	mov	r0, r3
 800a716:	f000 f8cb 	bl	800a8b0 <RTC_Bcd2ToByte>
 800a71a:	4603      	mov	r3, r0
 800a71c:	461a      	mov	r2, r3
 800a71e:	68bb      	ldr	r3, [r7, #8]
 800a720:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	789b      	ldrb	r3, [r3, #2]
 800a726:	4618      	mov	r0, r3
 800a728:	f000 f8c2 	bl	800a8b0 <RTC_Bcd2ToByte>
 800a72c:	4603      	mov	r3, r0
 800a72e:	461a      	mov	r2, r3
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800a734:	2300      	movs	r3, #0
}
 800a736:	4618      	mov	r0, r3
 800a738:	3718      	adds	r7, #24
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}
 800a73e:	bf00      	nop
 800a740:	00ffff3f 	.word	0x00ffff3f

0800a744 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b084      	sub	sp, #16
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	4a0d      	ldr	r2, [pc, #52]	; (800a788 <HAL_RTC_WaitForSynchro+0x44>)
 800a752:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800a754:	f7f8 fbcc 	bl	8002ef0 <HAL_GetTick>
 800a758:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a75a:	e009      	b.n	800a770 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a75c:	f7f8 fbc8 	bl	8002ef0 <HAL_GetTick>
 800a760:	4602      	mov	r2, r0
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	1ad3      	subs	r3, r2, r3
 800a766:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a76a:	d901      	bls.n	800a770 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800a76c:	2303      	movs	r3, #3
 800a76e:	e007      	b.n	800a780 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	68db      	ldr	r3, [r3, #12]
 800a776:	f003 0320 	and.w	r3, r3, #32
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d0ee      	beq.n	800a75c <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800a77e:	2300      	movs	r3, #0
}
 800a780:	4618      	mov	r0, r3
 800a782:	3710      	adds	r7, #16
 800a784:	46bd      	mov	sp, r7
 800a786:	bd80      	pop	{r7, pc}
 800a788:	0003ff5f 	.word	0x0003ff5f

0800a78c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b084      	sub	sp, #16
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a794:	2300      	movs	r3, #0
 800a796:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	68db      	ldr	r3, [r3, #12]
 800a79e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d120      	bne.n	800a7e8 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f04f 32ff 	mov.w	r2, #4294967295
 800a7ae:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800a7b0:	f7f8 fb9e 	bl	8002ef0 <HAL_GetTick>
 800a7b4:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a7b6:	e00d      	b.n	800a7d4 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800a7b8:	f7f8 fb9a 	bl	8002ef0 <HAL_GetTick>
 800a7bc:	4602      	mov	r2, r0
 800a7be:	68bb      	ldr	r3, [r7, #8]
 800a7c0:	1ad3      	subs	r3, r2, r3
 800a7c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a7c6:	d905      	bls.n	800a7d4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800a7c8:	2303      	movs	r3, #3
 800a7ca:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2203      	movs	r2, #3
 800a7d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	68db      	ldr	r3, [r3, #12]
 800a7da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d102      	bne.n	800a7e8 <RTC_EnterInitMode+0x5c>
 800a7e2:	7bfb      	ldrb	r3, [r7, #15]
 800a7e4:	2b03      	cmp	r3, #3
 800a7e6:	d1e7      	bne.n	800a7b8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800a7e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	3710      	adds	r7, #16
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}
	...

0800a7f4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b084      	sub	sp, #16
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 800a800:	4b1a      	ldr	r3, [pc, #104]	; (800a86c <RTC_ExitInitMode+0x78>)
 800a802:	68db      	ldr	r3, [r3, #12]
 800a804:	4a19      	ldr	r2, [pc, #100]	; (800a86c <RTC_ExitInitMode+0x78>)
 800a806:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a80a:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800a80c:	4b17      	ldr	r3, [pc, #92]	; (800a86c <RTC_ExitInitMode+0x78>)
 800a80e:	689b      	ldr	r3, [r3, #8]
 800a810:	f003 0320 	and.w	r3, r3, #32
 800a814:	2b00      	cmp	r3, #0
 800a816:	d10c      	bne.n	800a832 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a818:	6878      	ldr	r0, [r7, #4]
 800a81a:	f7ff ff93 	bl	800a744 <HAL_RTC_WaitForSynchro>
 800a81e:	4603      	mov	r3, r0
 800a820:	2b00      	cmp	r3, #0
 800a822:	d01e      	beq.n	800a862 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2203      	movs	r2, #3
 800a828:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800a82c:	2303      	movs	r3, #3
 800a82e:	73fb      	strb	r3, [r7, #15]
 800a830:	e017      	b.n	800a862 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a832:	4b0e      	ldr	r3, [pc, #56]	; (800a86c <RTC_ExitInitMode+0x78>)
 800a834:	689b      	ldr	r3, [r3, #8]
 800a836:	4a0d      	ldr	r2, [pc, #52]	; (800a86c <RTC_ExitInitMode+0x78>)
 800a838:	f023 0320 	bic.w	r3, r3, #32
 800a83c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f7ff ff80 	bl	800a744 <HAL_RTC_WaitForSynchro>
 800a844:	4603      	mov	r3, r0
 800a846:	2b00      	cmp	r3, #0
 800a848:	d005      	beq.n	800a856 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2203      	movs	r2, #3
 800a84e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800a852:	2303      	movs	r3, #3
 800a854:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a856:	4b05      	ldr	r3, [pc, #20]	; (800a86c <RTC_ExitInitMode+0x78>)
 800a858:	689b      	ldr	r3, [r3, #8]
 800a85a:	4a04      	ldr	r2, [pc, #16]	; (800a86c <RTC_ExitInitMode+0x78>)
 800a85c:	f043 0320 	orr.w	r3, r3, #32
 800a860:	6093      	str	r3, [r2, #8]
  }

  return status;
 800a862:	7bfb      	ldrb	r3, [r7, #15]
}
 800a864:	4618      	mov	r0, r3
 800a866:	3710      	adds	r7, #16
 800a868:	46bd      	mov	sp, r7
 800a86a:	bd80      	pop	{r7, pc}
 800a86c:	58004000 	.word	0x58004000

0800a870 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800a870:	b480      	push	{r7}
 800a872:	b085      	sub	sp, #20
 800a874:	af00      	add	r7, sp, #0
 800a876:	4603      	mov	r3, r0
 800a878:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800a87a:	2300      	movs	r3, #0
 800a87c:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800a87e:	79fb      	ldrb	r3, [r7, #7]
 800a880:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800a882:	e005      	b.n	800a890 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	3301      	adds	r3, #1
 800a888:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800a88a:	7afb      	ldrb	r3, [r7, #11]
 800a88c:	3b0a      	subs	r3, #10
 800a88e:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800a890:	7afb      	ldrb	r3, [r7, #11]
 800a892:	2b09      	cmp	r3, #9
 800a894:	d8f6      	bhi.n	800a884 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	b2db      	uxtb	r3, r3
 800a89a:	011b      	lsls	r3, r3, #4
 800a89c:	b2da      	uxtb	r2, r3
 800a89e:	7afb      	ldrb	r3, [r7, #11]
 800a8a0:	4313      	orrs	r3, r2
 800a8a2:	b2db      	uxtb	r3, r3
}
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	3714      	adds	r7, #20
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ae:	4770      	bx	lr

0800a8b0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800a8b0:	b480      	push	{r7}
 800a8b2:	b085      	sub	sp, #20
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800a8ba:	79fb      	ldrb	r3, [r7, #7]
 800a8bc:	091b      	lsrs	r3, r3, #4
 800a8be:	b2db      	uxtb	r3, r3
 800a8c0:	461a      	mov	r2, r3
 800a8c2:	0092      	lsls	r2, r2, #2
 800a8c4:	4413      	add	r3, r2
 800a8c6:	005b      	lsls	r3, r3, #1
 800a8c8:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800a8ca:	79fb      	ldrb	r3, [r7, #7]
 800a8cc:	f003 030f 	and.w	r3, r3, #15
 800a8d0:	b2da      	uxtb	r2, r3
 800a8d2:	7bfb      	ldrb	r3, [r7, #15]
 800a8d4:	4413      	add	r3, r2
 800a8d6:	b2db      	uxtb	r3, r3
}
 800a8d8:	4618      	mov	r0, r3
 800a8da:	3714      	adds	r7, #20
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e2:	4770      	bx	lr

0800a8e4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b08a      	sub	sp, #40	; 0x28
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d101      	bne.n	800a8f6 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	e28e      	b.n	800ae14 <HAL_SAI_Init+0x530>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800a8f6:	f7f8 fb2b 	bl	8002f50 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a900:	2b01      	cmp	r3, #1
 800a902:	d113      	bne.n	800a92c <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	4a96      	ldr	r2, [pc, #600]	; (800ab64 <HAL_SAI_Init+0x280>)
 800a90a:	4293      	cmp	r3, r2
 800a90c:	d004      	beq.n	800a918 <HAL_SAI_Init+0x34>
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	4a95      	ldr	r2, [pc, #596]	; (800ab68 <HAL_SAI_Init+0x284>)
 800a914:	4293      	cmp	r3, r2
 800a916:	d107      	bne.n	800a928 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800a91c:	2b01      	cmp	r3, #1
 800a91e:	d103      	bne.n	800a928 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800a924:	2b00      	cmp	r3, #0
 800a926:	d001      	beq.n	800a92c <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 800a928:	2301      	movs	r3, #1
 800a92a:	e273      	b.n	800ae14 <HAL_SAI_Init+0x530>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	4a8c      	ldr	r2, [pc, #560]	; (800ab64 <HAL_SAI_Init+0x280>)
 800a932:	4293      	cmp	r3, r2
 800a934:	d004      	beq.n	800a940 <HAL_SAI_Init+0x5c>
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	4a8c      	ldr	r2, [pc, #560]	; (800ab6c <HAL_SAI_Init+0x288>)
 800a93c:	4293      	cmp	r3, r2
 800a93e:	d102      	bne.n	800a946 <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 800a940:	4b8b      	ldr	r3, [pc, #556]	; (800ab70 <HAL_SAI_Init+0x28c>)
 800a942:	61bb      	str	r3, [r7, #24]
 800a944:	e028      	b.n	800a998 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	4a8a      	ldr	r2, [pc, #552]	; (800ab74 <HAL_SAI_Init+0x290>)
 800a94c:	4293      	cmp	r3, r2
 800a94e:	d004      	beq.n	800a95a <HAL_SAI_Init+0x76>
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	4a88      	ldr	r2, [pc, #544]	; (800ab78 <HAL_SAI_Init+0x294>)
 800a956:	4293      	cmp	r3, r2
 800a958:	d102      	bne.n	800a960 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 800a95a:	4b88      	ldr	r3, [pc, #544]	; (800ab7c <HAL_SAI_Init+0x298>)
 800a95c:	61bb      	str	r3, [r7, #24]
 800a95e:	e01b      	b.n	800a998 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	4a86      	ldr	r2, [pc, #536]	; (800ab80 <HAL_SAI_Init+0x29c>)
 800a966:	4293      	cmp	r3, r2
 800a968:	d004      	beq.n	800a974 <HAL_SAI_Init+0x90>
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	4a85      	ldr	r2, [pc, #532]	; (800ab84 <HAL_SAI_Init+0x2a0>)
 800a970:	4293      	cmp	r3, r2
 800a972:	d102      	bne.n	800a97a <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 800a974:	4b84      	ldr	r3, [pc, #528]	; (800ab88 <HAL_SAI_Init+0x2a4>)
 800a976:	61bb      	str	r3, [r7, #24]
 800a978:	e00e      	b.n	800a998 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	4a7a      	ldr	r2, [pc, #488]	; (800ab68 <HAL_SAI_Init+0x284>)
 800a980:	4293      	cmp	r3, r2
 800a982:	d004      	beq.n	800a98e <HAL_SAI_Init+0xaa>
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	4a80      	ldr	r2, [pc, #512]	; (800ab8c <HAL_SAI_Init+0x2a8>)
 800a98a:	4293      	cmp	r3, r2
 800a98c:	d102      	bne.n	800a994 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 800a98e:	4b80      	ldr	r3, [pc, #512]	; (800ab90 <HAL_SAI_Init+0x2ac>)
 800a990:	61bb      	str	r3, [r7, #24]
 800a992:	e001      	b.n	800a998 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800a994:	2301      	movs	r3, #1
 800a996:	e23d      	b.n	800ae14 <HAL_SAI_Init+0x530>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800a99e:	b2db      	uxtb	r3, r3
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d106      	bne.n	800a9b2 <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800a9ac:	6878      	ldr	r0, [r7, #4]
 800a9ae:	f7f8 f859 	bl	8002a64 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	f000 fa40 	bl	800ae38 <SAI_Disable>
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d001      	beq.n	800a9c2 <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 800a9be:	2301      	movs	r3, #1
 800a9c0:	e228      	b.n	800ae14 <HAL_SAI_Init+0x530>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2202      	movs	r2, #2
 800a9c6:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	68db      	ldr	r3, [r3, #12]
 800a9ce:	2b02      	cmp	r3, #2
 800a9d0:	d00c      	beq.n	800a9ec <HAL_SAI_Init+0x108>
 800a9d2:	2b02      	cmp	r3, #2
 800a9d4:	d80d      	bhi.n	800a9f2 <HAL_SAI_Init+0x10e>
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d002      	beq.n	800a9e0 <HAL_SAI_Init+0xfc>
 800a9da:	2b01      	cmp	r3, #1
 800a9dc:	d003      	beq.n	800a9e6 <HAL_SAI_Init+0x102>
 800a9de:	e008      	b.n	800a9f2 <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a9e4:	e008      	b.n	800a9f8 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800a9e6:	2310      	movs	r3, #16
 800a9e8:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a9ea:	e005      	b.n	800a9f8 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800a9ec:	2320      	movs	r3, #32
 800a9ee:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a9f0:	e002      	b.n	800a9f8 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a9f6:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	689b      	ldr	r3, [r3, #8]
 800a9fc:	2b05      	cmp	r3, #5
 800a9fe:	d832      	bhi.n	800aa66 <HAL_SAI_Init+0x182>
 800aa00:	a201      	add	r2, pc, #4	; (adr r2, 800aa08 <HAL_SAI_Init+0x124>)
 800aa02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa06:	bf00      	nop
 800aa08:	0800aa21 	.word	0x0800aa21
 800aa0c:	0800aa27 	.word	0x0800aa27
 800aa10:	0800aa2f 	.word	0x0800aa2f
 800aa14:	0800aa37 	.word	0x0800aa37
 800aa18:	0800aa47 	.word	0x0800aa47
 800aa1c:	0800aa57 	.word	0x0800aa57
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800aa20:	2300      	movs	r3, #0
 800aa22:	61fb      	str	r3, [r7, #28]
      break;
 800aa24:	e022      	b.n	800aa6c <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800aa26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa2a:	61fb      	str	r3, [r7, #28]
      break;
 800aa2c:	e01e      	b.n	800aa6c <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800aa2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aa32:	61fb      	str	r3, [r7, #28]
      break;
 800aa34:	e01a      	b.n	800aa6c <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800aa36:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aa3a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800aa3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa3e:	f043 0301 	orr.w	r3, r3, #1
 800aa42:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800aa44:	e012      	b.n	800aa6c <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800aa46:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aa4a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 800aa4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa4e:	f043 0302 	orr.w	r3, r3, #2
 800aa52:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800aa54:	e00a      	b.n	800aa6c <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800aa56:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aa5a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800aa5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa5e:	f043 0303 	orr.w	r3, r3, #3
 800aa62:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800aa64:	e002      	b.n	800aa6c <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800aa66:	2300      	movs	r3, #0
 800aa68:	61fb      	str	r3, [r7, #28]
      break;
 800aa6a:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 800aa6c:	69bb      	ldr	r3, [r7, #24]
 800aa6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa70:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	6a1b      	ldr	r3, [r3, #32]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	f000 80c5 	beq.w	800ac06 <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	4a37      	ldr	r2, [pc, #220]	; (800ab64 <HAL_SAI_Init+0x280>)
 800aa86:	4293      	cmp	r3, r2
 800aa88:	d004      	beq.n	800aa94 <HAL_SAI_Init+0x1b0>
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	4a37      	ldr	r2, [pc, #220]	; (800ab6c <HAL_SAI_Init+0x288>)
 800aa90:	4293      	cmp	r3, r2
 800aa92:	d106      	bne.n	800aaa2 <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800aa94:	f44f 7080 	mov.w	r0, #256	; 0x100
 800aa98:	f04f 0100 	mov.w	r1, #0
 800aa9c:	f7fe f90c 	bl	8008cb8 <HAL_RCCEx_GetPeriphCLKFreq>
 800aaa0:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	4a33      	ldr	r2, [pc, #204]	; (800ab74 <HAL_SAI_Init+0x290>)
 800aaa8:	4293      	cmp	r3, r2
 800aaaa:	d004      	beq.n	800aab6 <HAL_SAI_Init+0x1d2>
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	4a31      	ldr	r2, [pc, #196]	; (800ab78 <HAL_SAI_Init+0x294>)
 800aab2:	4293      	cmp	r3, r2
 800aab4:	d106      	bne.n	800aac4 <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800aab6:	f44f 7000 	mov.w	r0, #512	; 0x200
 800aaba:	f04f 0100 	mov.w	r1, #0
 800aabe:	f7fe f8fb 	bl	8008cb8 <HAL_RCCEx_GetPeriphCLKFreq>
 800aac2:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	4a2d      	ldr	r2, [pc, #180]	; (800ab80 <HAL_SAI_Init+0x29c>)
 800aaca:	4293      	cmp	r3, r2
 800aacc:	d004      	beq.n	800aad8 <HAL_SAI_Init+0x1f4>
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	4a2c      	ldr	r2, [pc, #176]	; (800ab84 <HAL_SAI_Init+0x2a0>)
 800aad4:	4293      	cmp	r3, r2
 800aad6:	d106      	bne.n	800aae6 <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 800aad8:	f44f 7000 	mov.w	r0, #512	; 0x200
 800aadc:	f04f 0100 	mov.w	r1, #0
 800aae0:	f7fe f8ea 	bl	8008cb8 <HAL_RCCEx_GetPeriphCLKFreq>
 800aae4:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	4a1f      	ldr	r2, [pc, #124]	; (800ab68 <HAL_SAI_Init+0x284>)
 800aaec:	4293      	cmp	r3, r2
 800aaee:	d106      	bne.n	800aafe <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800aaf0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800aaf4:	f04f 0100 	mov.w	r1, #0
 800aaf8:	f7fe f8de 	bl	8008cb8 <HAL_RCCEx_GetPeriphCLKFreq>
 800aafc:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	4a22      	ldr	r2, [pc, #136]	; (800ab8c <HAL_SAI_Init+0x2a8>)
 800ab04:	4293      	cmp	r3, r2
 800ab06:	d106      	bne.n	800ab16 <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800ab08:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800ab0c:	f04f 0100 	mov.w	r1, #0
 800ab10:	f7fe f8d2 	bl	8008cb8 <HAL_RCCEx_GetPeriphCLKFreq>
 800ab14:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	699b      	ldr	r3, [r3, #24]
 800ab1a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800ab1e:	d139      	bne.n	800ab94 <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab24:	2b04      	cmp	r3, #4
 800ab26:	d102      	bne.n	800ab2e <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800ab28:	2340      	movs	r3, #64	; 0x40
 800ab2a:	60fb      	str	r3, [r7, #12]
 800ab2c:	e00a      	b.n	800ab44 <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab32:	2b08      	cmp	r3, #8
 800ab34:	d103      	bne.n	800ab3e <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800ab36:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ab3a:	60fb      	str	r3, [r7, #12]
 800ab3c:	e002      	b.n	800ab44 <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab42:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800ab44:	697a      	ldr	r2, [r7, #20]
 800ab46:	4613      	mov	r3, r2
 800ab48:	009b      	lsls	r3, r3, #2
 800ab4a:	4413      	add	r3, r2
 800ab4c:	005b      	lsls	r3, r3, #1
 800ab4e:	4619      	mov	r1, r3
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	6a1b      	ldr	r3, [r3, #32]
 800ab54:	68fa      	ldr	r2, [r7, #12]
 800ab56:	fb02 f303 	mul.w	r3, r2, r3
 800ab5a:	fbb1 f3f3 	udiv	r3, r1, r3
 800ab5e:	613b      	str	r3, [r7, #16]
 800ab60:	e030      	b.n	800abc4 <HAL_SAI_Init+0x2e0>
 800ab62:	bf00      	nop
 800ab64:	40015804 	.word	0x40015804
 800ab68:	58005404 	.word	0x58005404
 800ab6c:	40015824 	.word	0x40015824
 800ab70:	40015800 	.word	0x40015800
 800ab74:	40015c04 	.word	0x40015c04
 800ab78:	40015c24 	.word	0x40015c24
 800ab7c:	40015c00 	.word	0x40015c00
 800ab80:	40016004 	.word	0x40016004
 800ab84:	40016024 	.word	0x40016024
 800ab88:	40016000 	.word	0x40016000
 800ab8c:	58005424 	.word	0x58005424
 800ab90:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ab9c:	d101      	bne.n	800aba2 <HAL_SAI_Init+0x2be>
 800ab9e:	2302      	movs	r3, #2
 800aba0:	e000      	b.n	800aba4 <HAL_SAI_Init+0x2c0>
 800aba2:	2301      	movs	r3, #1
 800aba4:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800aba6:	697a      	ldr	r2, [r7, #20]
 800aba8:	4613      	mov	r3, r2
 800abaa:	009b      	lsls	r3, r3, #2
 800abac:	4413      	add	r3, r2
 800abae:	005b      	lsls	r3, r3, #1
 800abb0:	4619      	mov	r1, r3
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	6a1b      	ldr	r3, [r3, #32]
 800abb6:	68ba      	ldr	r2, [r7, #8]
 800abb8:	fb02 f303 	mul.w	r3, r2, r3
 800abbc:	021b      	lsls	r3, r3, #8
 800abbe:	fbb1 f3f3 	udiv	r3, r1, r3
 800abc2:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800abc4:	693b      	ldr	r3, [r7, #16]
 800abc6:	4a95      	ldr	r2, [pc, #596]	; (800ae1c <HAL_SAI_Init+0x538>)
 800abc8:	fba2 2303 	umull	r2, r3, r2, r3
 800abcc:	08da      	lsrs	r2, r3, #3
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800abd2:	6939      	ldr	r1, [r7, #16]
 800abd4:	4b91      	ldr	r3, [pc, #580]	; (800ae1c <HAL_SAI_Init+0x538>)
 800abd6:	fba3 2301 	umull	r2, r3, r3, r1
 800abda:	08da      	lsrs	r2, r3, #3
 800abdc:	4613      	mov	r3, r2
 800abde:	009b      	lsls	r3, r3, #2
 800abe0:	4413      	add	r3, r2
 800abe2:	005b      	lsls	r3, r3, #1
 800abe4:	1aca      	subs	r2, r1, r3
 800abe6:	2a08      	cmp	r2, #8
 800abe8:	d904      	bls.n	800abf4 <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abee:	1c5a      	adds	r2, r3, #1
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abf8:	2b04      	cmp	r3, #4
 800abfa:	d104      	bne.n	800ac06 <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac00:	085a      	lsrs	r2, r3, #1
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	685b      	ldr	r3, [r3, #4]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d003      	beq.n	800ac16 <HAL_SAI_Init+0x332>
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	685b      	ldr	r3, [r3, #4]
 800ac12:	2b02      	cmp	r3, #2
 800ac14:	d109      	bne.n	800ac2a <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac1a:	2b01      	cmp	r3, #1
 800ac1c:	d101      	bne.n	800ac22 <HAL_SAI_Init+0x33e>
 800ac1e:	2300      	movs	r3, #0
 800ac20:	e001      	b.n	800ac26 <HAL_SAI_Init+0x342>
 800ac22:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ac26:	623b      	str	r3, [r7, #32]
 800ac28:	e008      	b.n	800ac3c <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac2e:	2b01      	cmp	r3, #1
 800ac30:	d102      	bne.n	800ac38 <HAL_SAI_Init+0x354>
 800ac32:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ac36:	e000      	b.n	800ac3a <HAL_SAI_Init+0x356>
 800ac38:	2300      	movs	r3, #0
 800ac3a:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800ac3c:	f7f8 f988 	bl	8002f50 <HAL_GetREVID>
 800ac40:	4603      	mov	r3, r0
 800ac42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac46:	d331      	bcc.n	800acac <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	6819      	ldr	r1, [r3, #0]
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681a      	ldr	r2, [r3, #0]
 800ac52:	4b73      	ldr	r3, [pc, #460]	; (800ae20 <HAL_SAI_Init+0x53c>)
 800ac54:	400b      	ands	r3, r1
 800ac56:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	6819      	ldr	r1, [r3, #0]
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	685a      	ldr	r2, [r3, #4]
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac66:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ac6c:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac72:	431a      	orrs	r2, r3
 800ac74:	6a3b      	ldr	r3, [r7, #32]
 800ac76:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800ac78:	69fb      	ldr	r3, [r7, #28]
 800ac7a:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800ac80:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	695b      	ldr	r3, [r3, #20]
 800ac86:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ac8c:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac92:	051b      	lsls	r3, r3, #20
 800ac94:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800ac9a:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	691b      	ldr	r3, [r3, #16]
 800aca0:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	430a      	orrs	r2, r1
 800aca8:	601a      	str	r2, [r3, #0]
 800acaa:	e02d      	b.n	800ad08 <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	6819      	ldr	r1, [r3, #0]
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681a      	ldr	r2, [r3, #0]
 800acb6:	4b5b      	ldr	r3, [pc, #364]	; (800ae24 <HAL_SAI_Init+0x540>)
 800acb8:	400b      	ands	r3, r1
 800acba:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	6819      	ldr	r1, [r3, #0]
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	685a      	ldr	r2, [r3, #4]
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acca:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800acd0:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acd6:	431a      	orrs	r2, r3
 800acd8:	6a3b      	ldr	r3, [r7, #32]
 800acda:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800acdc:	69fb      	ldr	r3, [r7, #28]
 800acde:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800ace4:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	695b      	ldr	r3, [r3, #20]
 800acea:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800acf0:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acf6:	051b      	lsls	r3, r3, #20
 800acf8:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800acfe:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	430a      	orrs	r2, r1
 800ad06:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	6859      	ldr	r1, [r3, #4]
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681a      	ldr	r2, [r3, #0]
 800ad12:	4b45      	ldr	r3, [pc, #276]	; (800ae28 <HAL_SAI_Init+0x544>)
 800ad14:	400b      	ands	r3, r1
 800ad16:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	6859      	ldr	r1, [r3, #4]
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	69da      	ldr	r2, [r3, #28]
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad26:	431a      	orrs	r2, r3
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad2c:	431a      	orrs	r2, r3
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	430a      	orrs	r2, r1
 800ad34:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	6899      	ldr	r1, [r3, #8]
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681a      	ldr	r2, [r3, #0]
 800ad40:	4b3a      	ldr	r3, [pc, #232]	; (800ae2c <HAL_SAI_Init+0x548>)
 800ad42:	400b      	ands	r3, r1
 800ad44:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	6899      	ldr	r1, [r3, #8]
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad50:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800ad56:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 800ad5c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 800ad62:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad68:	3b01      	subs	r3, #1
 800ad6a:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800ad6c:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	430a      	orrs	r2, r1
 800ad74:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	68d9      	ldr	r1, [r3, #12]
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681a      	ldr	r2, [r3, #0]
 800ad80:	f24f 0320 	movw	r3, #61472	; 0xf020
 800ad84:	400b      	ands	r3, r1
 800ad86:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	68d9      	ldr	r1, [r3, #12]
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad96:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad9c:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800ad9e:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ada4:	3b01      	subs	r3, #1
 800ada6:	021b      	lsls	r3, r3, #8
 800ada8:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	430a      	orrs	r2, r1
 800adb0:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	4a1e      	ldr	r2, [pc, #120]	; (800ae30 <HAL_SAI_Init+0x54c>)
 800adb8:	4293      	cmp	r3, r2
 800adba:	d004      	beq.n	800adc6 <HAL_SAI_Init+0x4e2>
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	4a1c      	ldr	r2, [pc, #112]	; (800ae34 <HAL_SAI_Init+0x550>)
 800adc2:	4293      	cmp	r3, r2
 800adc4:	d119      	bne.n	800adfa <HAL_SAI_Init+0x516>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800adc6:	69bb      	ldr	r3, [r7, #24]
 800adc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adca:	f023 0201 	bic.w	r2, r3, #1
 800adce:	69bb      	ldr	r3, [r7, #24]
 800add0:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800add8:	2b01      	cmp	r3, #1
 800adda:	d10e      	bne.n	800adfa <HAL_SAI_Init+0x516>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ade4:	3b01      	subs	r3, #1
 800ade6:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800ade8:	431a      	orrs	r2, r3
 800adea:	69bb      	ldr	r3, [r7, #24]
 800adec:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800adee:	69bb      	ldr	r3, [r7, #24]
 800adf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adf2:	f043 0201 	orr.w	r2, r3, #1
 800adf6:	69bb      	ldr	r3, [r7, #24]
 800adf8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	2200      	movs	r2, #0
 800adfe:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	2201      	movs	r2, #1
 800ae06:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 800ae12:	2300      	movs	r3, #0
}
 800ae14:	4618      	mov	r0, r3
 800ae16:	3728      	adds	r7, #40	; 0x28
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}
 800ae1c:	cccccccd 	.word	0xcccccccd
 800ae20:	f005c010 	.word	0xf005c010
 800ae24:	f805c010 	.word	0xf805c010
 800ae28:	ffff1ff0 	.word	0xffff1ff0
 800ae2c:	fff88000 	.word	0xfff88000
 800ae30:	40015804 	.word	0x40015804
 800ae34:	58005404 	.word	0x58005404

0800ae38 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800ae38:	b480      	push	{r7}
 800ae3a:	b085      	sub	sp, #20
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800ae40:	4b18      	ldr	r3, [pc, #96]	; (800aea4 <SAI_Disable+0x6c>)
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	4a18      	ldr	r2, [pc, #96]	; (800aea8 <SAI_Disable+0x70>)
 800ae46:	fba2 2303 	umull	r2, r3, r2, r3
 800ae4a:	0b1b      	lsrs	r3, r3, #12
 800ae4c:	009b      	lsls	r3, r3, #2
 800ae4e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800ae50:	2300      	movs	r3, #0
 800ae52:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	681a      	ldr	r2, [r3, #0]
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800ae62:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d10a      	bne.n	800ae80 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ae70:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 800ae7a:	2303      	movs	r3, #3
 800ae7c:	72fb      	strb	r3, [r7, #11]
      break;
 800ae7e:	e009      	b.n	800ae94 <SAI_Disable+0x5c>
    }
    count--;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	3b01      	subs	r3, #1
 800ae84:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d1e7      	bne.n	800ae64 <SAI_Disable+0x2c>

  return status;
 800ae94:	7afb      	ldrb	r3, [r7, #11]
}
 800ae96:	4618      	mov	r0, r3
 800ae98:	3714      	adds	r7, #20
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea0:	4770      	bx	lr
 800aea2:	bf00      	nop
 800aea4:	24000024 	.word	0x24000024
 800aea8:	95cbec1b 	.word	0x95cbec1b

0800aeac <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b082      	sub	sp, #8
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
 800aeb4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d101      	bne.n	800aec0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800aebc:	2301      	movs	r3, #1
 800aebe:	e02b      	b.n	800af18 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800aec6:	b2db      	uxtb	r3, r3
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d106      	bne.n	800aeda <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2200      	movs	r2, #0
 800aed0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800aed4:	6878      	ldr	r0, [r7, #4]
 800aed6:	f7f7 fdbb 	bl	8002a50 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	2202      	movs	r2, #2
 800aede:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681a      	ldr	r2, [r3, #0]
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	3304      	adds	r3, #4
 800aeea:	4619      	mov	r1, r3
 800aeec:	4610      	mov	r0, r2
 800aeee:	f003 f905 	bl	800e0fc <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6818      	ldr	r0, [r3, #0]
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	685b      	ldr	r3, [r3, #4]
 800aefa:	461a      	mov	r2, r3
 800aefc:	6839      	ldr	r1, [r7, #0]
 800aefe:	f003 f959 	bl	800e1b4 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800af02:	4b07      	ldr	r3, [pc, #28]	; (800af20 <HAL_SDRAM_Init+0x74>)
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	4a06      	ldr	r2, [pc, #24]	; (800af20 <HAL_SDRAM_Init+0x74>)
 800af08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800af0c:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	2201      	movs	r2, #1
 800af12:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800af16:	2300      	movs	r3, #0
}
 800af18:	4618      	mov	r0, r3
 800af1a:	3708      	adds	r7, #8
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bd80      	pop	{r7, pc}
 800af20:	52004000 	.word	0x52004000

0800af24 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b084      	sub	sp, #16
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d101      	bne.n	800af36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800af32:	2301      	movs	r3, #1
 800af34:	e10f      	b.n	800b156 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	2200      	movs	r2, #0
 800af3a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	4a87      	ldr	r2, [pc, #540]	; (800b160 <HAL_SPI_Init+0x23c>)
 800af42:	4293      	cmp	r3, r2
 800af44:	d00f      	beq.n	800af66 <HAL_SPI_Init+0x42>
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	4a86      	ldr	r2, [pc, #536]	; (800b164 <HAL_SPI_Init+0x240>)
 800af4c:	4293      	cmp	r3, r2
 800af4e:	d00a      	beq.n	800af66 <HAL_SPI_Init+0x42>
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	4a84      	ldr	r2, [pc, #528]	; (800b168 <HAL_SPI_Init+0x244>)
 800af56:	4293      	cmp	r3, r2
 800af58:	d005      	beq.n	800af66 <HAL_SPI_Init+0x42>
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	68db      	ldr	r3, [r3, #12]
 800af5e:	2b0f      	cmp	r3, #15
 800af60:	d901      	bls.n	800af66 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800af62:	2301      	movs	r3, #1
 800af64:	e0f7      	b.n	800b156 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800af66:	6878      	ldr	r0, [r7, #4]
 800af68:	f000 f900 	bl	800b16c <SPI_GetPacketSize>
 800af6c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	4a7b      	ldr	r2, [pc, #492]	; (800b160 <HAL_SPI_Init+0x23c>)
 800af74:	4293      	cmp	r3, r2
 800af76:	d00c      	beq.n	800af92 <HAL_SPI_Init+0x6e>
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	4a79      	ldr	r2, [pc, #484]	; (800b164 <HAL_SPI_Init+0x240>)
 800af7e:	4293      	cmp	r3, r2
 800af80:	d007      	beq.n	800af92 <HAL_SPI_Init+0x6e>
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	4a78      	ldr	r2, [pc, #480]	; (800b168 <HAL_SPI_Init+0x244>)
 800af88:	4293      	cmp	r3, r2
 800af8a:	d002      	beq.n	800af92 <HAL_SPI_Init+0x6e>
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	2b08      	cmp	r3, #8
 800af90:	d811      	bhi.n	800afb6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800af96:	4a72      	ldr	r2, [pc, #456]	; (800b160 <HAL_SPI_Init+0x23c>)
 800af98:	4293      	cmp	r3, r2
 800af9a:	d009      	beq.n	800afb0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	4a70      	ldr	r2, [pc, #448]	; (800b164 <HAL_SPI_Init+0x240>)
 800afa2:	4293      	cmp	r3, r2
 800afa4:	d004      	beq.n	800afb0 <HAL_SPI_Init+0x8c>
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	4a6f      	ldr	r2, [pc, #444]	; (800b168 <HAL_SPI_Init+0x244>)
 800afac:	4293      	cmp	r3, r2
 800afae:	d104      	bne.n	800afba <HAL_SPI_Init+0x96>
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	2b10      	cmp	r3, #16
 800afb4:	d901      	bls.n	800afba <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800afb6:	2301      	movs	r3, #1
 800afb8:	e0cd      	b.n	800b156 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800afc0:	b2db      	uxtb	r3, r3
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d106      	bne.n	800afd4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	2200      	movs	r2, #0
 800afca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800afce:	6878      	ldr	r0, [r7, #4]
 800afd0:	f7f7 faa8 	bl	8002524 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2202      	movs	r2, #2
 800afd8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	681a      	ldr	r2, [r3, #0]
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	f022 0201 	bic.w	r2, r2, #1
 800afea:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	689b      	ldr	r3, [r3, #8]
 800aff2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800aff6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	699b      	ldr	r3, [r3, #24]
 800affc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b000:	d119      	bne.n	800b036 <HAL_SPI_Init+0x112>
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	685b      	ldr	r3, [r3, #4]
 800b006:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b00a:	d103      	bne.n	800b014 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b010:	2b00      	cmp	r3, #0
 800b012:	d008      	beq.n	800b026 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d10c      	bne.n	800b036 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b020:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b024:	d107      	bne.n	800b036 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	681a      	ldr	r2, [r3, #0]
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b034:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	685b      	ldr	r3, [r3, #4]
 800b03a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d00f      	beq.n	800b062 <HAL_SPI_Init+0x13e>
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	68db      	ldr	r3, [r3, #12]
 800b046:	2b06      	cmp	r3, #6
 800b048:	d90b      	bls.n	800b062 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	430a      	orrs	r2, r1
 800b05e:	601a      	str	r2, [r3, #0]
 800b060:	e007      	b.n	800b072 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	681a      	ldr	r2, [r3, #0]
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b070:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	69da      	ldr	r2, [r3, #28]
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b07a:	431a      	orrs	r2, r3
 800b07c:	68bb      	ldr	r3, [r7, #8]
 800b07e:	431a      	orrs	r2, r3
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b084:	ea42 0103 	orr.w	r1, r2, r3
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	68da      	ldr	r2, [r3, #12]
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	430a      	orrs	r2, r1
 800b092:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b09c:	431a      	orrs	r2, r3
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0a2:	431a      	orrs	r2, r3
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	699b      	ldr	r3, [r3, #24]
 800b0a8:	431a      	orrs	r2, r3
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	691b      	ldr	r3, [r3, #16]
 800b0ae:	431a      	orrs	r2, r3
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	695b      	ldr	r3, [r3, #20]
 800b0b4:	431a      	orrs	r2, r3
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	6a1b      	ldr	r3, [r3, #32]
 800b0ba:	431a      	orrs	r2, r3
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	685b      	ldr	r3, [r3, #4]
 800b0c0:	431a      	orrs	r2, r3
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0c6:	431a      	orrs	r2, r3
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	689b      	ldr	r3, [r3, #8]
 800b0cc:	431a      	orrs	r2, r3
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b0d2:	ea42 0103 	orr.w	r1, r2, r3
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	430a      	orrs	r2, r1
 800b0e0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	685b      	ldr	r3, [r3, #4]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d113      	bne.n	800b112 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	689b      	ldr	r3, [r3, #8]
 800b0f0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b0fc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	689b      	ldr	r3, [r3, #8]
 800b104:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b110:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	f022 0201 	bic.w	r2, r2, #1
 800b120:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	685b      	ldr	r3, [r3, #4]
 800b126:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d00a      	beq.n	800b144 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	68db      	ldr	r3, [r3, #12]
 800b134:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	430a      	orrs	r2, r1
 800b142:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2200      	movs	r2, #0
 800b148:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2201      	movs	r2, #1
 800b150:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800b154:	2300      	movs	r3, #0
}
 800b156:	4618      	mov	r0, r3
 800b158:	3710      	adds	r7, #16
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bd80      	pop	{r7, pc}
 800b15e:	bf00      	nop
 800b160:	40013000 	.word	0x40013000
 800b164:	40003800 	.word	0x40003800
 800b168:	40003c00 	.word	0x40003c00

0800b16c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800b16c:	b480      	push	{r7}
 800b16e:	b085      	sub	sp, #20
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b178:	095b      	lsrs	r3, r3, #5
 800b17a:	3301      	adds	r3, #1
 800b17c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	68db      	ldr	r3, [r3, #12]
 800b182:	3301      	adds	r3, #1
 800b184:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b186:	68bb      	ldr	r3, [r7, #8]
 800b188:	3307      	adds	r3, #7
 800b18a:	08db      	lsrs	r3, r3, #3
 800b18c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b18e:	68bb      	ldr	r3, [r7, #8]
 800b190:	68fa      	ldr	r2, [r7, #12]
 800b192:	fb02 f303 	mul.w	r3, r2, r3
}
 800b196:	4618      	mov	r0, r3
 800b198:	3714      	adds	r7, #20
 800b19a:	46bd      	mov	sp, r7
 800b19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a0:	4770      	bx	lr

0800b1a2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b1a2:	b580      	push	{r7, lr}
 800b1a4:	b082      	sub	sp, #8
 800b1a6:	af00      	add	r7, sp, #0
 800b1a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d101      	bne.n	800b1b4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b1b0:	2301      	movs	r3, #1
 800b1b2:	e049      	b.n	800b248 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b1ba:	b2db      	uxtb	r3, r3
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d106      	bne.n	800b1ce <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	f7f7 fa75 	bl	80026b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	2202      	movs	r2, #2
 800b1d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681a      	ldr	r2, [r3, #0]
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	3304      	adds	r3, #4
 800b1de:	4619      	mov	r1, r3
 800b1e0:	4610      	mov	r0, r2
 800b1e2:	f000 f99d 	bl	800b520 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	2201      	movs	r2, #1
 800b1ea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	2201      	movs	r2, #1
 800b1f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	2201      	movs	r2, #1
 800b1fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2201      	movs	r2, #1
 800b202:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	2201      	movs	r2, #1
 800b20a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	2201      	movs	r2, #1
 800b212:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	2201      	movs	r2, #1
 800b21a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	2201      	movs	r2, #1
 800b222:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	2201      	movs	r2, #1
 800b22a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	2201      	movs	r2, #1
 800b232:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2201      	movs	r2, #1
 800b23a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	2201      	movs	r2, #1
 800b242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b246:	2300      	movs	r3, #0
}
 800b248:	4618      	mov	r0, r3
 800b24a:	3708      	adds	r7, #8
 800b24c:	46bd      	mov	sp, r7
 800b24e:	bd80      	pop	{r7, pc}

0800b250 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b250:	b480      	push	{r7}
 800b252:	b085      	sub	sp, #20
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b25e:	b2db      	uxtb	r3, r3
 800b260:	2b01      	cmp	r3, #1
 800b262:	d001      	beq.n	800b268 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800b264:	2301      	movs	r3, #1
 800b266:	e04c      	b.n	800b302 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2202      	movs	r2, #2
 800b26c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	4a26      	ldr	r2, [pc, #152]	; (800b310 <HAL_TIM_Base_Start+0xc0>)
 800b276:	4293      	cmp	r3, r2
 800b278:	d022      	beq.n	800b2c0 <HAL_TIM_Base_Start+0x70>
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b282:	d01d      	beq.n	800b2c0 <HAL_TIM_Base_Start+0x70>
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	4a22      	ldr	r2, [pc, #136]	; (800b314 <HAL_TIM_Base_Start+0xc4>)
 800b28a:	4293      	cmp	r3, r2
 800b28c:	d018      	beq.n	800b2c0 <HAL_TIM_Base_Start+0x70>
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	4a21      	ldr	r2, [pc, #132]	; (800b318 <HAL_TIM_Base_Start+0xc8>)
 800b294:	4293      	cmp	r3, r2
 800b296:	d013      	beq.n	800b2c0 <HAL_TIM_Base_Start+0x70>
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	4a1f      	ldr	r2, [pc, #124]	; (800b31c <HAL_TIM_Base_Start+0xcc>)
 800b29e:	4293      	cmp	r3, r2
 800b2a0:	d00e      	beq.n	800b2c0 <HAL_TIM_Base_Start+0x70>
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	4a1e      	ldr	r2, [pc, #120]	; (800b320 <HAL_TIM_Base_Start+0xd0>)
 800b2a8:	4293      	cmp	r3, r2
 800b2aa:	d009      	beq.n	800b2c0 <HAL_TIM_Base_Start+0x70>
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	4a1c      	ldr	r2, [pc, #112]	; (800b324 <HAL_TIM_Base_Start+0xd4>)
 800b2b2:	4293      	cmp	r3, r2
 800b2b4:	d004      	beq.n	800b2c0 <HAL_TIM_Base_Start+0x70>
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	4a1b      	ldr	r2, [pc, #108]	; (800b328 <HAL_TIM_Base_Start+0xd8>)
 800b2bc:	4293      	cmp	r3, r2
 800b2be:	d115      	bne.n	800b2ec <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	689a      	ldr	r2, [r3, #8]
 800b2c6:	4b19      	ldr	r3, [pc, #100]	; (800b32c <HAL_TIM_Base_Start+0xdc>)
 800b2c8:	4013      	ands	r3, r2
 800b2ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	2b06      	cmp	r3, #6
 800b2d0:	d015      	beq.n	800b2fe <HAL_TIM_Base_Start+0xae>
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b2d8:	d011      	beq.n	800b2fe <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	681a      	ldr	r2, [r3, #0]
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	f042 0201 	orr.w	r2, r2, #1
 800b2e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b2ea:	e008      	b.n	800b2fe <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	681a      	ldr	r2, [r3, #0]
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	f042 0201 	orr.w	r2, r2, #1
 800b2fa:	601a      	str	r2, [r3, #0]
 800b2fc:	e000      	b.n	800b300 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b2fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b300:	2300      	movs	r3, #0
}
 800b302:	4618      	mov	r0, r3
 800b304:	3714      	adds	r7, #20
 800b306:	46bd      	mov	sp, r7
 800b308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30c:	4770      	bx	lr
 800b30e:	bf00      	nop
 800b310:	40010000 	.word	0x40010000
 800b314:	40000400 	.word	0x40000400
 800b318:	40000800 	.word	0x40000800
 800b31c:	40000c00 	.word	0x40000c00
 800b320:	40010400 	.word	0x40010400
 800b324:	40001800 	.word	0x40001800
 800b328:	40014000 	.word	0x40014000
 800b32c:	00010007 	.word	0x00010007

0800b330 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b084      	sub	sp, #16
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
 800b338:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b33a:	2300      	movs	r3, #0
 800b33c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b344:	2b01      	cmp	r3, #1
 800b346:	d101      	bne.n	800b34c <HAL_TIM_ConfigClockSource+0x1c>
 800b348:	2302      	movs	r3, #2
 800b34a:	e0dc      	b.n	800b506 <HAL_TIM_ConfigClockSource+0x1d6>
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2201      	movs	r2, #1
 800b350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2202      	movs	r2, #2
 800b358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	689b      	ldr	r3, [r3, #8]
 800b362:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b364:	68ba      	ldr	r2, [r7, #8]
 800b366:	4b6a      	ldr	r3, [pc, #424]	; (800b510 <HAL_TIM_ConfigClockSource+0x1e0>)
 800b368:	4013      	ands	r3, r2
 800b36a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b36c:	68bb      	ldr	r3, [r7, #8]
 800b36e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b372:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	68ba      	ldr	r2, [r7, #8]
 800b37a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	4a64      	ldr	r2, [pc, #400]	; (800b514 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b382:	4293      	cmp	r3, r2
 800b384:	f000 80a9 	beq.w	800b4da <HAL_TIM_ConfigClockSource+0x1aa>
 800b388:	4a62      	ldr	r2, [pc, #392]	; (800b514 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b38a:	4293      	cmp	r3, r2
 800b38c:	f200 80ae 	bhi.w	800b4ec <HAL_TIM_ConfigClockSource+0x1bc>
 800b390:	4a61      	ldr	r2, [pc, #388]	; (800b518 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b392:	4293      	cmp	r3, r2
 800b394:	f000 80a1 	beq.w	800b4da <HAL_TIM_ConfigClockSource+0x1aa>
 800b398:	4a5f      	ldr	r2, [pc, #380]	; (800b518 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b39a:	4293      	cmp	r3, r2
 800b39c:	f200 80a6 	bhi.w	800b4ec <HAL_TIM_ConfigClockSource+0x1bc>
 800b3a0:	4a5e      	ldr	r2, [pc, #376]	; (800b51c <HAL_TIM_ConfigClockSource+0x1ec>)
 800b3a2:	4293      	cmp	r3, r2
 800b3a4:	f000 8099 	beq.w	800b4da <HAL_TIM_ConfigClockSource+0x1aa>
 800b3a8:	4a5c      	ldr	r2, [pc, #368]	; (800b51c <HAL_TIM_ConfigClockSource+0x1ec>)
 800b3aa:	4293      	cmp	r3, r2
 800b3ac:	f200 809e 	bhi.w	800b4ec <HAL_TIM_ConfigClockSource+0x1bc>
 800b3b0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b3b4:	f000 8091 	beq.w	800b4da <HAL_TIM_ConfigClockSource+0x1aa>
 800b3b8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b3bc:	f200 8096 	bhi.w	800b4ec <HAL_TIM_ConfigClockSource+0x1bc>
 800b3c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b3c4:	f000 8089 	beq.w	800b4da <HAL_TIM_ConfigClockSource+0x1aa>
 800b3c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b3cc:	f200 808e 	bhi.w	800b4ec <HAL_TIM_ConfigClockSource+0x1bc>
 800b3d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b3d4:	d03e      	beq.n	800b454 <HAL_TIM_ConfigClockSource+0x124>
 800b3d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b3da:	f200 8087 	bhi.w	800b4ec <HAL_TIM_ConfigClockSource+0x1bc>
 800b3de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3e2:	f000 8086 	beq.w	800b4f2 <HAL_TIM_ConfigClockSource+0x1c2>
 800b3e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3ea:	d87f      	bhi.n	800b4ec <HAL_TIM_ConfigClockSource+0x1bc>
 800b3ec:	2b70      	cmp	r3, #112	; 0x70
 800b3ee:	d01a      	beq.n	800b426 <HAL_TIM_ConfigClockSource+0xf6>
 800b3f0:	2b70      	cmp	r3, #112	; 0x70
 800b3f2:	d87b      	bhi.n	800b4ec <HAL_TIM_ConfigClockSource+0x1bc>
 800b3f4:	2b60      	cmp	r3, #96	; 0x60
 800b3f6:	d050      	beq.n	800b49a <HAL_TIM_ConfigClockSource+0x16a>
 800b3f8:	2b60      	cmp	r3, #96	; 0x60
 800b3fa:	d877      	bhi.n	800b4ec <HAL_TIM_ConfigClockSource+0x1bc>
 800b3fc:	2b50      	cmp	r3, #80	; 0x50
 800b3fe:	d03c      	beq.n	800b47a <HAL_TIM_ConfigClockSource+0x14a>
 800b400:	2b50      	cmp	r3, #80	; 0x50
 800b402:	d873      	bhi.n	800b4ec <HAL_TIM_ConfigClockSource+0x1bc>
 800b404:	2b40      	cmp	r3, #64	; 0x40
 800b406:	d058      	beq.n	800b4ba <HAL_TIM_ConfigClockSource+0x18a>
 800b408:	2b40      	cmp	r3, #64	; 0x40
 800b40a:	d86f      	bhi.n	800b4ec <HAL_TIM_ConfigClockSource+0x1bc>
 800b40c:	2b30      	cmp	r3, #48	; 0x30
 800b40e:	d064      	beq.n	800b4da <HAL_TIM_ConfigClockSource+0x1aa>
 800b410:	2b30      	cmp	r3, #48	; 0x30
 800b412:	d86b      	bhi.n	800b4ec <HAL_TIM_ConfigClockSource+0x1bc>
 800b414:	2b20      	cmp	r3, #32
 800b416:	d060      	beq.n	800b4da <HAL_TIM_ConfigClockSource+0x1aa>
 800b418:	2b20      	cmp	r3, #32
 800b41a:	d867      	bhi.n	800b4ec <HAL_TIM_ConfigClockSource+0x1bc>
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d05c      	beq.n	800b4da <HAL_TIM_ConfigClockSource+0x1aa>
 800b420:	2b10      	cmp	r3, #16
 800b422:	d05a      	beq.n	800b4da <HAL_TIM_ConfigClockSource+0x1aa>
 800b424:	e062      	b.n	800b4ec <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	6818      	ldr	r0, [r3, #0]
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	6899      	ldr	r1, [r3, #8]
 800b42e:	683b      	ldr	r3, [r7, #0]
 800b430:	685a      	ldr	r2, [r3, #4]
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	68db      	ldr	r3, [r3, #12]
 800b436:	f000 f98b 	bl	800b750 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	689b      	ldr	r3, [r3, #8]
 800b440:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b442:	68bb      	ldr	r3, [r7, #8]
 800b444:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b448:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	68ba      	ldr	r2, [r7, #8]
 800b450:	609a      	str	r2, [r3, #8]
      break;
 800b452:	e04f      	b.n	800b4f4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	6818      	ldr	r0, [r3, #0]
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	6899      	ldr	r1, [r3, #8]
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	685a      	ldr	r2, [r3, #4]
 800b460:	683b      	ldr	r3, [r7, #0]
 800b462:	68db      	ldr	r3, [r3, #12]
 800b464:	f000 f974 	bl	800b750 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	689a      	ldr	r2, [r3, #8]
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b476:	609a      	str	r2, [r3, #8]
      break;
 800b478:	e03c      	b.n	800b4f4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	6818      	ldr	r0, [r3, #0]
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	6859      	ldr	r1, [r3, #4]
 800b482:	683b      	ldr	r3, [r7, #0]
 800b484:	68db      	ldr	r3, [r3, #12]
 800b486:	461a      	mov	r2, r3
 800b488:	f000 f8e4 	bl	800b654 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	2150      	movs	r1, #80	; 0x50
 800b492:	4618      	mov	r0, r3
 800b494:	f000 f93e 	bl	800b714 <TIM_ITRx_SetConfig>
      break;
 800b498:	e02c      	b.n	800b4f4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	6818      	ldr	r0, [r3, #0]
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	6859      	ldr	r1, [r3, #4]
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	68db      	ldr	r3, [r3, #12]
 800b4a6:	461a      	mov	r2, r3
 800b4a8:	f000 f903 	bl	800b6b2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	2160      	movs	r1, #96	; 0x60
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	f000 f92e 	bl	800b714 <TIM_ITRx_SetConfig>
      break;
 800b4b8:	e01c      	b.n	800b4f4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	6818      	ldr	r0, [r3, #0]
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	6859      	ldr	r1, [r3, #4]
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	68db      	ldr	r3, [r3, #12]
 800b4c6:	461a      	mov	r2, r3
 800b4c8:	f000 f8c4 	bl	800b654 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	2140      	movs	r1, #64	; 0x40
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	f000 f91e 	bl	800b714 <TIM_ITRx_SetConfig>
      break;
 800b4d8:	e00c      	b.n	800b4f4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681a      	ldr	r2, [r3, #0]
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	4619      	mov	r1, r3
 800b4e4:	4610      	mov	r0, r2
 800b4e6:	f000 f915 	bl	800b714 <TIM_ITRx_SetConfig>
      break;
 800b4ea:	e003      	b.n	800b4f4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b4ec:	2301      	movs	r3, #1
 800b4ee:	73fb      	strb	r3, [r7, #15]
      break;
 800b4f0:	e000      	b.n	800b4f4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800b4f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2201      	movs	r2, #1
 800b4f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2200      	movs	r2, #0
 800b500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b504:	7bfb      	ldrb	r3, [r7, #15]
}
 800b506:	4618      	mov	r0, r3
 800b508:	3710      	adds	r7, #16
 800b50a:	46bd      	mov	sp, r7
 800b50c:	bd80      	pop	{r7, pc}
 800b50e:	bf00      	nop
 800b510:	ffceff88 	.word	0xffceff88
 800b514:	00100040 	.word	0x00100040
 800b518:	00100030 	.word	0x00100030
 800b51c:	00100020 	.word	0x00100020

0800b520 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b520:	b480      	push	{r7}
 800b522:	b085      	sub	sp, #20
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
 800b528:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	4a40      	ldr	r2, [pc, #256]	; (800b634 <TIM_Base_SetConfig+0x114>)
 800b534:	4293      	cmp	r3, r2
 800b536:	d013      	beq.n	800b560 <TIM_Base_SetConfig+0x40>
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b53e:	d00f      	beq.n	800b560 <TIM_Base_SetConfig+0x40>
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	4a3d      	ldr	r2, [pc, #244]	; (800b638 <TIM_Base_SetConfig+0x118>)
 800b544:	4293      	cmp	r3, r2
 800b546:	d00b      	beq.n	800b560 <TIM_Base_SetConfig+0x40>
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	4a3c      	ldr	r2, [pc, #240]	; (800b63c <TIM_Base_SetConfig+0x11c>)
 800b54c:	4293      	cmp	r3, r2
 800b54e:	d007      	beq.n	800b560 <TIM_Base_SetConfig+0x40>
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	4a3b      	ldr	r2, [pc, #236]	; (800b640 <TIM_Base_SetConfig+0x120>)
 800b554:	4293      	cmp	r3, r2
 800b556:	d003      	beq.n	800b560 <TIM_Base_SetConfig+0x40>
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	4a3a      	ldr	r2, [pc, #232]	; (800b644 <TIM_Base_SetConfig+0x124>)
 800b55c:	4293      	cmp	r3, r2
 800b55e:	d108      	bne.n	800b572 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b566:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	685b      	ldr	r3, [r3, #4]
 800b56c:	68fa      	ldr	r2, [r7, #12]
 800b56e:	4313      	orrs	r3, r2
 800b570:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	4a2f      	ldr	r2, [pc, #188]	; (800b634 <TIM_Base_SetConfig+0x114>)
 800b576:	4293      	cmp	r3, r2
 800b578:	d01f      	beq.n	800b5ba <TIM_Base_SetConfig+0x9a>
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b580:	d01b      	beq.n	800b5ba <TIM_Base_SetConfig+0x9a>
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	4a2c      	ldr	r2, [pc, #176]	; (800b638 <TIM_Base_SetConfig+0x118>)
 800b586:	4293      	cmp	r3, r2
 800b588:	d017      	beq.n	800b5ba <TIM_Base_SetConfig+0x9a>
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	4a2b      	ldr	r2, [pc, #172]	; (800b63c <TIM_Base_SetConfig+0x11c>)
 800b58e:	4293      	cmp	r3, r2
 800b590:	d013      	beq.n	800b5ba <TIM_Base_SetConfig+0x9a>
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	4a2a      	ldr	r2, [pc, #168]	; (800b640 <TIM_Base_SetConfig+0x120>)
 800b596:	4293      	cmp	r3, r2
 800b598:	d00f      	beq.n	800b5ba <TIM_Base_SetConfig+0x9a>
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	4a29      	ldr	r2, [pc, #164]	; (800b644 <TIM_Base_SetConfig+0x124>)
 800b59e:	4293      	cmp	r3, r2
 800b5a0:	d00b      	beq.n	800b5ba <TIM_Base_SetConfig+0x9a>
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	4a28      	ldr	r2, [pc, #160]	; (800b648 <TIM_Base_SetConfig+0x128>)
 800b5a6:	4293      	cmp	r3, r2
 800b5a8:	d007      	beq.n	800b5ba <TIM_Base_SetConfig+0x9a>
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	4a27      	ldr	r2, [pc, #156]	; (800b64c <TIM_Base_SetConfig+0x12c>)
 800b5ae:	4293      	cmp	r3, r2
 800b5b0:	d003      	beq.n	800b5ba <TIM_Base_SetConfig+0x9a>
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	4a26      	ldr	r2, [pc, #152]	; (800b650 <TIM_Base_SetConfig+0x130>)
 800b5b6:	4293      	cmp	r3, r2
 800b5b8:	d108      	bne.n	800b5cc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b5c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b5c2:	683b      	ldr	r3, [r7, #0]
 800b5c4:	68db      	ldr	r3, [r3, #12]
 800b5c6:	68fa      	ldr	r2, [r7, #12]
 800b5c8:	4313      	orrs	r3, r2
 800b5ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	695b      	ldr	r3, [r3, #20]
 800b5d6:	4313      	orrs	r3, r2
 800b5d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	68fa      	ldr	r2, [r7, #12]
 800b5de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	689a      	ldr	r2, [r3, #8]
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b5e8:	683b      	ldr	r3, [r7, #0]
 800b5ea:	681a      	ldr	r2, [r3, #0]
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	4a10      	ldr	r2, [pc, #64]	; (800b634 <TIM_Base_SetConfig+0x114>)
 800b5f4:	4293      	cmp	r3, r2
 800b5f6:	d00f      	beq.n	800b618 <TIM_Base_SetConfig+0xf8>
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	4a12      	ldr	r2, [pc, #72]	; (800b644 <TIM_Base_SetConfig+0x124>)
 800b5fc:	4293      	cmp	r3, r2
 800b5fe:	d00b      	beq.n	800b618 <TIM_Base_SetConfig+0xf8>
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	4a11      	ldr	r2, [pc, #68]	; (800b648 <TIM_Base_SetConfig+0x128>)
 800b604:	4293      	cmp	r3, r2
 800b606:	d007      	beq.n	800b618 <TIM_Base_SetConfig+0xf8>
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	4a10      	ldr	r2, [pc, #64]	; (800b64c <TIM_Base_SetConfig+0x12c>)
 800b60c:	4293      	cmp	r3, r2
 800b60e:	d003      	beq.n	800b618 <TIM_Base_SetConfig+0xf8>
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	4a0f      	ldr	r2, [pc, #60]	; (800b650 <TIM_Base_SetConfig+0x130>)
 800b614:	4293      	cmp	r3, r2
 800b616:	d103      	bne.n	800b620 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b618:	683b      	ldr	r3, [r7, #0]
 800b61a:	691a      	ldr	r2, [r3, #16]
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2201      	movs	r2, #1
 800b624:	615a      	str	r2, [r3, #20]
}
 800b626:	bf00      	nop
 800b628:	3714      	adds	r7, #20
 800b62a:	46bd      	mov	sp, r7
 800b62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b630:	4770      	bx	lr
 800b632:	bf00      	nop
 800b634:	40010000 	.word	0x40010000
 800b638:	40000400 	.word	0x40000400
 800b63c:	40000800 	.word	0x40000800
 800b640:	40000c00 	.word	0x40000c00
 800b644:	40010400 	.word	0x40010400
 800b648:	40014000 	.word	0x40014000
 800b64c:	40014400 	.word	0x40014400
 800b650:	40014800 	.word	0x40014800

0800b654 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b654:	b480      	push	{r7}
 800b656:	b087      	sub	sp, #28
 800b658:	af00      	add	r7, sp, #0
 800b65a:	60f8      	str	r0, [r7, #12]
 800b65c:	60b9      	str	r1, [r7, #8]
 800b65e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	6a1b      	ldr	r3, [r3, #32]
 800b664:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	6a1b      	ldr	r3, [r3, #32]
 800b66a:	f023 0201 	bic.w	r2, r3, #1
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	699b      	ldr	r3, [r3, #24]
 800b676:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b678:	693b      	ldr	r3, [r7, #16]
 800b67a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b67e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	011b      	lsls	r3, r3, #4
 800b684:	693a      	ldr	r2, [r7, #16]
 800b686:	4313      	orrs	r3, r2
 800b688:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b68a:	697b      	ldr	r3, [r7, #20]
 800b68c:	f023 030a 	bic.w	r3, r3, #10
 800b690:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b692:	697a      	ldr	r2, [r7, #20]
 800b694:	68bb      	ldr	r3, [r7, #8]
 800b696:	4313      	orrs	r3, r2
 800b698:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	693a      	ldr	r2, [r7, #16]
 800b69e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	697a      	ldr	r2, [r7, #20]
 800b6a4:	621a      	str	r2, [r3, #32]
}
 800b6a6:	bf00      	nop
 800b6a8:	371c      	adds	r7, #28
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b0:	4770      	bx	lr

0800b6b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b6b2:	b480      	push	{r7}
 800b6b4:	b087      	sub	sp, #28
 800b6b6:	af00      	add	r7, sp, #0
 800b6b8:	60f8      	str	r0, [r7, #12]
 800b6ba:	60b9      	str	r1, [r7, #8]
 800b6bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	6a1b      	ldr	r3, [r3, #32]
 800b6c2:	f023 0210 	bic.w	r2, r3, #16
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	699b      	ldr	r3, [r3, #24]
 800b6ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	6a1b      	ldr	r3, [r3, #32]
 800b6d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b6d6:	697b      	ldr	r3, [r7, #20]
 800b6d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b6dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	031b      	lsls	r3, r3, #12
 800b6e2:	697a      	ldr	r2, [r7, #20]
 800b6e4:	4313      	orrs	r3, r2
 800b6e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b6e8:	693b      	ldr	r3, [r7, #16]
 800b6ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b6ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b6f0:	68bb      	ldr	r3, [r7, #8]
 800b6f2:	011b      	lsls	r3, r3, #4
 800b6f4:	693a      	ldr	r2, [r7, #16]
 800b6f6:	4313      	orrs	r3, r2
 800b6f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	697a      	ldr	r2, [r7, #20]
 800b6fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	693a      	ldr	r2, [r7, #16]
 800b704:	621a      	str	r2, [r3, #32]
}
 800b706:	bf00      	nop
 800b708:	371c      	adds	r7, #28
 800b70a:	46bd      	mov	sp, r7
 800b70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b710:	4770      	bx	lr
	...

0800b714 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b714:	b480      	push	{r7}
 800b716:	b085      	sub	sp, #20
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
 800b71c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	689b      	ldr	r3, [r3, #8]
 800b722:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b724:	68fa      	ldr	r2, [r7, #12]
 800b726:	4b09      	ldr	r3, [pc, #36]	; (800b74c <TIM_ITRx_SetConfig+0x38>)
 800b728:	4013      	ands	r3, r2
 800b72a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b72c:	683a      	ldr	r2, [r7, #0]
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	4313      	orrs	r3, r2
 800b732:	f043 0307 	orr.w	r3, r3, #7
 800b736:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	68fa      	ldr	r2, [r7, #12]
 800b73c:	609a      	str	r2, [r3, #8]
}
 800b73e:	bf00      	nop
 800b740:	3714      	adds	r7, #20
 800b742:	46bd      	mov	sp, r7
 800b744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b748:	4770      	bx	lr
 800b74a:	bf00      	nop
 800b74c:	ffcfff8f 	.word	0xffcfff8f

0800b750 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b750:	b480      	push	{r7}
 800b752:	b087      	sub	sp, #28
 800b754:	af00      	add	r7, sp, #0
 800b756:	60f8      	str	r0, [r7, #12]
 800b758:	60b9      	str	r1, [r7, #8]
 800b75a:	607a      	str	r2, [r7, #4]
 800b75c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	689b      	ldr	r3, [r3, #8]
 800b762:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b764:	697b      	ldr	r3, [r7, #20]
 800b766:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b76a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b76c:	683b      	ldr	r3, [r7, #0]
 800b76e:	021a      	lsls	r2, r3, #8
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	431a      	orrs	r2, r3
 800b774:	68bb      	ldr	r3, [r7, #8]
 800b776:	4313      	orrs	r3, r2
 800b778:	697a      	ldr	r2, [r7, #20]
 800b77a:	4313      	orrs	r3, r2
 800b77c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	697a      	ldr	r2, [r7, #20]
 800b782:	609a      	str	r2, [r3, #8]
}
 800b784:	bf00      	nop
 800b786:	371c      	adds	r7, #28
 800b788:	46bd      	mov	sp, r7
 800b78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78e:	4770      	bx	lr

0800b790 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b790:	b480      	push	{r7}
 800b792:	b085      	sub	sp, #20
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
 800b798:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b7a0:	2b01      	cmp	r3, #1
 800b7a2:	d101      	bne.n	800b7a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b7a4:	2302      	movs	r3, #2
 800b7a6:	e06d      	b.n	800b884 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	2201      	movs	r2, #1
 800b7ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2202      	movs	r2, #2
 800b7b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	685b      	ldr	r3, [r3, #4]
 800b7be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	689b      	ldr	r3, [r3, #8]
 800b7c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	4a30      	ldr	r2, [pc, #192]	; (800b890 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b7ce:	4293      	cmp	r3, r2
 800b7d0:	d004      	beq.n	800b7dc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	4a2f      	ldr	r2, [pc, #188]	; (800b894 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b7d8:	4293      	cmp	r3, r2
 800b7da:	d108      	bne.n	800b7ee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b7e2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	685b      	ldr	r3, [r3, #4]
 800b7e8:	68fa      	ldr	r2, [r7, #12]
 800b7ea:	4313      	orrs	r3, r2
 800b7ec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b7f4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	68fa      	ldr	r2, [r7, #12]
 800b7fc:	4313      	orrs	r3, r2
 800b7fe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	68fa      	ldr	r2, [r7, #12]
 800b806:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	4a20      	ldr	r2, [pc, #128]	; (800b890 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b80e:	4293      	cmp	r3, r2
 800b810:	d022      	beq.n	800b858 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b81a:	d01d      	beq.n	800b858 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	4a1d      	ldr	r2, [pc, #116]	; (800b898 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b822:	4293      	cmp	r3, r2
 800b824:	d018      	beq.n	800b858 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	4a1c      	ldr	r2, [pc, #112]	; (800b89c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b82c:	4293      	cmp	r3, r2
 800b82e:	d013      	beq.n	800b858 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	4a1a      	ldr	r2, [pc, #104]	; (800b8a0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b836:	4293      	cmp	r3, r2
 800b838:	d00e      	beq.n	800b858 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	4a15      	ldr	r2, [pc, #84]	; (800b894 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b840:	4293      	cmp	r3, r2
 800b842:	d009      	beq.n	800b858 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	4a16      	ldr	r2, [pc, #88]	; (800b8a4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b84a:	4293      	cmp	r3, r2
 800b84c:	d004      	beq.n	800b858 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	4a15      	ldr	r2, [pc, #84]	; (800b8a8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b854:	4293      	cmp	r3, r2
 800b856:	d10c      	bne.n	800b872 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b858:	68bb      	ldr	r3, [r7, #8]
 800b85a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b85e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	689b      	ldr	r3, [r3, #8]
 800b864:	68ba      	ldr	r2, [r7, #8]
 800b866:	4313      	orrs	r3, r2
 800b868:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	68ba      	ldr	r2, [r7, #8]
 800b870:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	2201      	movs	r2, #1
 800b876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	2200      	movs	r2, #0
 800b87e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b882:	2300      	movs	r3, #0
}
 800b884:	4618      	mov	r0, r3
 800b886:	3714      	adds	r7, #20
 800b888:	46bd      	mov	sp, r7
 800b88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88e:	4770      	bx	lr
 800b890:	40010000 	.word	0x40010000
 800b894:	40010400 	.word	0x40010400
 800b898:	40000400 	.word	0x40000400
 800b89c:	40000800 	.word	0x40000800
 800b8a0:	40000c00 	.word	0x40000c00
 800b8a4:	40001800 	.word	0x40001800
 800b8a8:	40014000 	.word	0x40014000

0800b8ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b082      	sub	sp, #8
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d101      	bne.n	800b8be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b8ba:	2301      	movs	r3, #1
 800b8bc:	e042      	b.n	800b944 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d106      	bne.n	800b8d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b8d0:	6878      	ldr	r0, [r7, #4]
 800b8d2:	f7f6 ff13 	bl	80026fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	2224      	movs	r2, #36	; 0x24
 800b8da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	681a      	ldr	r2, [r3, #0]
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	f022 0201 	bic.w	r2, r2, #1
 800b8ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b8ee:	6878      	ldr	r0, [r7, #4]
 800b8f0:	f000 fce0 	bl	800c2b4 <UART_SetConfig>
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	2b01      	cmp	r3, #1
 800b8f8:	d101      	bne.n	800b8fe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b8fa:	2301      	movs	r3, #1
 800b8fc:	e022      	b.n	800b944 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b902:	2b00      	cmp	r3, #0
 800b904:	d002      	beq.n	800b90c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b906:	6878      	ldr	r0, [r7, #4]
 800b908:	f001 fa3c 	bl	800cd84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	685a      	ldr	r2, [r3, #4]
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b91a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	689a      	ldr	r2, [r3, #8]
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b92a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	681a      	ldr	r2, [r3, #0]
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	f042 0201 	orr.w	r2, r2, #1
 800b93a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b93c:	6878      	ldr	r0, [r7, #4]
 800b93e:	f001 fac3 	bl	800cec8 <UART_CheckIdleState>
 800b942:	4603      	mov	r3, r0
}
 800b944:	4618      	mov	r0, r3
 800b946:	3708      	adds	r7, #8
 800b948:	46bd      	mov	sp, r7
 800b94a:	bd80      	pop	{r7, pc}

0800b94c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b08a      	sub	sp, #40	; 0x28
 800b950:	af02      	add	r7, sp, #8
 800b952:	60f8      	str	r0, [r7, #12]
 800b954:	60b9      	str	r1, [r7, #8]
 800b956:	603b      	str	r3, [r7, #0]
 800b958:	4613      	mov	r3, r2
 800b95a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b962:	2b20      	cmp	r3, #32
 800b964:	d17b      	bne.n	800ba5e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800b966:	68bb      	ldr	r3, [r7, #8]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d002      	beq.n	800b972 <HAL_UART_Transmit+0x26>
 800b96c:	88fb      	ldrh	r3, [r7, #6]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d101      	bne.n	800b976 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b972:	2301      	movs	r3, #1
 800b974:	e074      	b.n	800ba60 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	2200      	movs	r2, #0
 800b97a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	2221      	movs	r2, #33	; 0x21
 800b982:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b986:	f7f7 fab3 	bl	8002ef0 <HAL_GetTick>
 800b98a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	88fa      	ldrh	r2, [r7, #6]
 800b990:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	88fa      	ldrh	r2, [r7, #6]
 800b998:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	689b      	ldr	r3, [r3, #8]
 800b9a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b9a4:	d108      	bne.n	800b9b8 <HAL_UART_Transmit+0x6c>
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	691b      	ldr	r3, [r3, #16]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d104      	bne.n	800b9b8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b9b2:	68bb      	ldr	r3, [r7, #8]
 800b9b4:	61bb      	str	r3, [r7, #24]
 800b9b6:	e003      	b.n	800b9c0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b9b8:	68bb      	ldr	r3, [r7, #8]
 800b9ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b9bc:	2300      	movs	r3, #0
 800b9be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b9c0:	e030      	b.n	800ba24 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b9c2:	683b      	ldr	r3, [r7, #0]
 800b9c4:	9300      	str	r3, [sp, #0]
 800b9c6:	697b      	ldr	r3, [r7, #20]
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	2180      	movs	r1, #128	; 0x80
 800b9cc:	68f8      	ldr	r0, [r7, #12]
 800b9ce:	f001 fb25 	bl	800d01c <UART_WaitOnFlagUntilTimeout>
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d005      	beq.n	800b9e4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	2220      	movs	r2, #32
 800b9dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800b9e0:	2303      	movs	r3, #3
 800b9e2:	e03d      	b.n	800ba60 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800b9e4:	69fb      	ldr	r3, [r7, #28]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d10b      	bne.n	800ba02 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b9ea:	69bb      	ldr	r3, [r7, #24]
 800b9ec:	881b      	ldrh	r3, [r3, #0]
 800b9ee:	461a      	mov	r2, r3
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b9f8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b9fa:	69bb      	ldr	r3, [r7, #24]
 800b9fc:	3302      	adds	r3, #2
 800b9fe:	61bb      	str	r3, [r7, #24]
 800ba00:	e007      	b.n	800ba12 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ba02:	69fb      	ldr	r3, [r7, #28]
 800ba04:	781a      	ldrb	r2, [r3, #0]
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ba0c:	69fb      	ldr	r3, [r7, #28]
 800ba0e:	3301      	adds	r3, #1
 800ba10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ba18:	b29b      	uxth	r3, r3
 800ba1a:	3b01      	subs	r3, #1
 800ba1c:	b29a      	uxth	r2, r3
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ba2a:	b29b      	uxth	r3, r3
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d1c8      	bne.n	800b9c2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ba30:	683b      	ldr	r3, [r7, #0]
 800ba32:	9300      	str	r3, [sp, #0]
 800ba34:	697b      	ldr	r3, [r7, #20]
 800ba36:	2200      	movs	r2, #0
 800ba38:	2140      	movs	r1, #64	; 0x40
 800ba3a:	68f8      	ldr	r0, [r7, #12]
 800ba3c:	f001 faee 	bl	800d01c <UART_WaitOnFlagUntilTimeout>
 800ba40:	4603      	mov	r3, r0
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d005      	beq.n	800ba52 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	2220      	movs	r2, #32
 800ba4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800ba4e:	2303      	movs	r3, #3
 800ba50:	e006      	b.n	800ba60 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	2220      	movs	r2, #32
 800ba56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	e000      	b.n	800ba60 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800ba5e:	2302      	movs	r3, #2
  }
}
 800ba60:	4618      	mov	r0, r3
 800ba62:	3720      	adds	r7, #32
 800ba64:	46bd      	mov	sp, r7
 800ba66:	bd80      	pop	{r7, pc}

0800ba68 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b08a      	sub	sp, #40	; 0x28
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	60f8      	str	r0, [r7, #12]
 800ba70:	60b9      	str	r1, [r7, #8]
 800ba72:	4613      	mov	r3, r2
 800ba74:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ba7c:	2b20      	cmp	r3, #32
 800ba7e:	d137      	bne.n	800baf0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800ba80:	68bb      	ldr	r3, [r7, #8]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d002      	beq.n	800ba8c <HAL_UART_Receive_IT+0x24>
 800ba86:	88fb      	ldrh	r3, [r7, #6]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d101      	bne.n	800ba90 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800ba8c:	2301      	movs	r3, #1
 800ba8e:	e030      	b.n	800baf2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	2200      	movs	r2, #0
 800ba94:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	4a18      	ldr	r2, [pc, #96]	; (800bafc <HAL_UART_Receive_IT+0x94>)
 800ba9c:	4293      	cmp	r3, r2
 800ba9e:	d01f      	beq.n	800bae0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	685b      	ldr	r3, [r3, #4]
 800baa6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d018      	beq.n	800bae0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bab4:	697b      	ldr	r3, [r7, #20]
 800bab6:	e853 3f00 	ldrex	r3, [r3]
 800baba:	613b      	str	r3, [r7, #16]
   return(result);
 800babc:	693b      	ldr	r3, [r7, #16]
 800babe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bac2:	627b      	str	r3, [r7, #36]	; 0x24
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	461a      	mov	r2, r3
 800baca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bacc:	623b      	str	r3, [r7, #32]
 800bace:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bad0:	69f9      	ldr	r1, [r7, #28]
 800bad2:	6a3a      	ldr	r2, [r7, #32]
 800bad4:	e841 2300 	strex	r3, r2, [r1]
 800bad8:	61bb      	str	r3, [r7, #24]
   return(result);
 800bada:	69bb      	ldr	r3, [r7, #24]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d1e6      	bne.n	800baae <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800bae0:	88fb      	ldrh	r3, [r7, #6]
 800bae2:	461a      	mov	r2, r3
 800bae4:	68b9      	ldr	r1, [r7, #8]
 800bae6:	68f8      	ldr	r0, [r7, #12]
 800bae8:	f001 fb00 	bl	800d0ec <UART_Start_Receive_IT>
 800baec:	4603      	mov	r3, r0
 800baee:	e000      	b.n	800baf2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800baf0:	2302      	movs	r3, #2
  }
}
 800baf2:	4618      	mov	r0, r3
 800baf4:	3728      	adds	r7, #40	; 0x28
 800baf6:	46bd      	mov	sp, r7
 800baf8:	bd80      	pop	{r7, pc}
 800bafa:	bf00      	nop
 800bafc:	58000c00 	.word	0x58000c00

0800bb00 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b0ba      	sub	sp, #232	; 0xe8
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	69db      	ldr	r3, [r3, #28]
 800bb0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	689b      	ldr	r3, [r3, #8]
 800bb22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800bb26:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800bb2a:	f640 030f 	movw	r3, #2063	; 0x80f
 800bb2e:	4013      	ands	r3, r2
 800bb30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800bb34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d11b      	bne.n	800bb74 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bb3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb40:	f003 0320 	and.w	r3, r3, #32
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d015      	beq.n	800bb74 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bb48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb4c:	f003 0320 	and.w	r3, r3, #32
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d105      	bne.n	800bb60 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bb54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bb58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d009      	beq.n	800bb74 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	f000 8377 	beq.w	800c258 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb6e:	6878      	ldr	r0, [r7, #4]
 800bb70:	4798      	blx	r3
      }
      return;
 800bb72:	e371      	b.n	800c258 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800bb74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	f000 8123 	beq.w	800bdc4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800bb7e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800bb82:	4b8d      	ldr	r3, [pc, #564]	; (800bdb8 <HAL_UART_IRQHandler+0x2b8>)
 800bb84:	4013      	ands	r3, r2
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d106      	bne.n	800bb98 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800bb8a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800bb8e:	4b8b      	ldr	r3, [pc, #556]	; (800bdbc <HAL_UART_IRQHandler+0x2bc>)
 800bb90:	4013      	ands	r3, r2
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	f000 8116 	beq.w	800bdc4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bb98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb9c:	f003 0301 	and.w	r3, r3, #1
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d011      	beq.n	800bbc8 <HAL_UART_IRQHandler+0xc8>
 800bba4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d00b      	beq.n	800bbc8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	2201      	movs	r2, #1
 800bbb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bbbe:	f043 0201 	orr.w	r2, r3, #1
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bbc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbcc:	f003 0302 	and.w	r3, r3, #2
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d011      	beq.n	800bbf8 <HAL_UART_IRQHandler+0xf8>
 800bbd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bbd8:	f003 0301 	and.w	r3, r3, #1
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d00b      	beq.n	800bbf8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	2202      	movs	r2, #2
 800bbe6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bbee:	f043 0204 	orr.w	r2, r3, #4
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bbf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbfc:	f003 0304 	and.w	r3, r3, #4
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d011      	beq.n	800bc28 <HAL_UART_IRQHandler+0x128>
 800bc04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc08:	f003 0301 	and.w	r3, r3, #1
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d00b      	beq.n	800bc28 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	2204      	movs	r2, #4
 800bc16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc1e:	f043 0202 	orr.w	r2, r3, #2
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bc28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc2c:	f003 0308 	and.w	r3, r3, #8
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d017      	beq.n	800bc64 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bc34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc38:	f003 0320 	and.w	r3, r3, #32
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d105      	bne.n	800bc4c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800bc40:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800bc44:	4b5c      	ldr	r3, [pc, #368]	; (800bdb8 <HAL_UART_IRQHandler+0x2b8>)
 800bc46:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d00b      	beq.n	800bc64 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	2208      	movs	r2, #8
 800bc52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc5a:	f043 0208 	orr.w	r2, r3, #8
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bc64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d012      	beq.n	800bc96 <HAL_UART_IRQHandler+0x196>
 800bc70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d00c      	beq.n	800bc96 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bc84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc8c:	f043 0220 	orr.w	r2, r3, #32
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	f000 82dd 	beq.w	800c25c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bca6:	f003 0320 	and.w	r3, r3, #32
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d013      	beq.n	800bcd6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bcae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bcb2:	f003 0320 	and.w	r3, r3, #32
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d105      	bne.n	800bcc6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bcba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bcbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d007      	beq.n	800bcd6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d003      	beq.n	800bcd6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bcd2:	6878      	ldr	r0, [r7, #4]
 800bcd4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bcdc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	689b      	ldr	r3, [r3, #8]
 800bce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcea:	2b40      	cmp	r3, #64	; 0x40
 800bcec:	d005      	beq.n	800bcfa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bcee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bcf2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d054      	beq.n	800bda4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bcfa:	6878      	ldr	r0, [r7, #4]
 800bcfc:	f001 fb18 	bl	800d330 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	689b      	ldr	r3, [r3, #8]
 800bd06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd0a:	2b40      	cmp	r3, #64	; 0x40
 800bd0c:	d146      	bne.n	800bd9c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	3308      	adds	r3, #8
 800bd14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd18:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bd1c:	e853 3f00 	ldrex	r3, [r3]
 800bd20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bd24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bd28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	3308      	adds	r3, #8
 800bd36:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bd3a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bd3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd42:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bd46:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bd4a:	e841 2300 	strex	r3, r2, [r1]
 800bd4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bd52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d1d9      	bne.n	800bd0e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d017      	beq.n	800bd94 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bd6a:	4a15      	ldr	r2, [pc, #84]	; (800bdc0 <HAL_UART_IRQHandler+0x2c0>)
 800bd6c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bd74:	4618      	mov	r0, r3
 800bd76:	f7f8 fddd 	bl	8004934 <HAL_DMA_Abort_IT>
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d019      	beq.n	800bdb4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bd86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd88:	687a      	ldr	r2, [r7, #4]
 800bd8a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800bd8e:	4610      	mov	r0, r2
 800bd90:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd92:	e00f      	b.n	800bdb4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bd94:	6878      	ldr	r0, [r7, #4]
 800bd96:	f000 fa77 	bl	800c288 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd9a:	e00b      	b.n	800bdb4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bd9c:	6878      	ldr	r0, [r7, #4]
 800bd9e:	f000 fa73 	bl	800c288 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bda2:	e007      	b.n	800bdb4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bda4:	6878      	ldr	r0, [r7, #4]
 800bda6:	f000 fa6f 	bl	800c288 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	2200      	movs	r2, #0
 800bdae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800bdb2:	e253      	b.n	800c25c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bdb4:	bf00      	nop
    return;
 800bdb6:	e251      	b.n	800c25c <HAL_UART_IRQHandler+0x75c>
 800bdb8:	10000001 	.word	0x10000001
 800bdbc:	04000120 	.word	0x04000120
 800bdc0:	0800d3fd 	.word	0x0800d3fd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bdc8:	2b01      	cmp	r3, #1
 800bdca:	f040 81e7 	bne.w	800c19c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800bdce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bdd2:	f003 0310 	and.w	r3, r3, #16
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	f000 81e0 	beq.w	800c19c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800bddc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bde0:	f003 0310 	and.w	r3, r3, #16
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	f000 81d9 	beq.w	800c19c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	2210      	movs	r2, #16
 800bdf0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	689b      	ldr	r3, [r3, #8]
 800bdf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bdfc:	2b40      	cmp	r3, #64	; 0x40
 800bdfe:	f040 8151 	bne.w	800c0a4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	4a96      	ldr	r2, [pc, #600]	; (800c064 <HAL_UART_IRQHandler+0x564>)
 800be0c:	4293      	cmp	r3, r2
 800be0e:	d068      	beq.n	800bee2 <HAL_UART_IRQHandler+0x3e2>
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	4a93      	ldr	r2, [pc, #588]	; (800c068 <HAL_UART_IRQHandler+0x568>)
 800be1a:	4293      	cmp	r3, r2
 800be1c:	d061      	beq.n	800bee2 <HAL_UART_IRQHandler+0x3e2>
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	4a91      	ldr	r2, [pc, #580]	; (800c06c <HAL_UART_IRQHandler+0x56c>)
 800be28:	4293      	cmp	r3, r2
 800be2a:	d05a      	beq.n	800bee2 <HAL_UART_IRQHandler+0x3e2>
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	4a8e      	ldr	r2, [pc, #568]	; (800c070 <HAL_UART_IRQHandler+0x570>)
 800be36:	4293      	cmp	r3, r2
 800be38:	d053      	beq.n	800bee2 <HAL_UART_IRQHandler+0x3e2>
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	4a8c      	ldr	r2, [pc, #560]	; (800c074 <HAL_UART_IRQHandler+0x574>)
 800be44:	4293      	cmp	r3, r2
 800be46:	d04c      	beq.n	800bee2 <HAL_UART_IRQHandler+0x3e2>
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	4a89      	ldr	r2, [pc, #548]	; (800c078 <HAL_UART_IRQHandler+0x578>)
 800be52:	4293      	cmp	r3, r2
 800be54:	d045      	beq.n	800bee2 <HAL_UART_IRQHandler+0x3e2>
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	4a87      	ldr	r2, [pc, #540]	; (800c07c <HAL_UART_IRQHandler+0x57c>)
 800be60:	4293      	cmp	r3, r2
 800be62:	d03e      	beq.n	800bee2 <HAL_UART_IRQHandler+0x3e2>
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	4a84      	ldr	r2, [pc, #528]	; (800c080 <HAL_UART_IRQHandler+0x580>)
 800be6e:	4293      	cmp	r3, r2
 800be70:	d037      	beq.n	800bee2 <HAL_UART_IRQHandler+0x3e2>
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	4a82      	ldr	r2, [pc, #520]	; (800c084 <HAL_UART_IRQHandler+0x584>)
 800be7c:	4293      	cmp	r3, r2
 800be7e:	d030      	beq.n	800bee2 <HAL_UART_IRQHandler+0x3e2>
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	4a7f      	ldr	r2, [pc, #508]	; (800c088 <HAL_UART_IRQHandler+0x588>)
 800be8a:	4293      	cmp	r3, r2
 800be8c:	d029      	beq.n	800bee2 <HAL_UART_IRQHandler+0x3e2>
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	4a7d      	ldr	r2, [pc, #500]	; (800c08c <HAL_UART_IRQHandler+0x58c>)
 800be98:	4293      	cmp	r3, r2
 800be9a:	d022      	beq.n	800bee2 <HAL_UART_IRQHandler+0x3e2>
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	4a7a      	ldr	r2, [pc, #488]	; (800c090 <HAL_UART_IRQHandler+0x590>)
 800bea6:	4293      	cmp	r3, r2
 800bea8:	d01b      	beq.n	800bee2 <HAL_UART_IRQHandler+0x3e2>
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	4a78      	ldr	r2, [pc, #480]	; (800c094 <HAL_UART_IRQHandler+0x594>)
 800beb4:	4293      	cmp	r3, r2
 800beb6:	d014      	beq.n	800bee2 <HAL_UART_IRQHandler+0x3e2>
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	4a75      	ldr	r2, [pc, #468]	; (800c098 <HAL_UART_IRQHandler+0x598>)
 800bec2:	4293      	cmp	r3, r2
 800bec4:	d00d      	beq.n	800bee2 <HAL_UART_IRQHandler+0x3e2>
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	4a73      	ldr	r2, [pc, #460]	; (800c09c <HAL_UART_IRQHandler+0x59c>)
 800bed0:	4293      	cmp	r3, r2
 800bed2:	d006      	beq.n	800bee2 <HAL_UART_IRQHandler+0x3e2>
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	4a70      	ldr	r2, [pc, #448]	; (800c0a0 <HAL_UART_IRQHandler+0x5a0>)
 800bede:	4293      	cmp	r3, r2
 800bee0:	d106      	bne.n	800bef0 <HAL_UART_IRQHandler+0x3f0>
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	685b      	ldr	r3, [r3, #4]
 800beec:	b29b      	uxth	r3, r3
 800beee:	e005      	b.n	800befc <HAL_UART_IRQHandler+0x3fc>
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	685b      	ldr	r3, [r3, #4]
 800befa:	b29b      	uxth	r3, r3
 800befc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bf00:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	f000 81ab 	beq.w	800c260 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bf10:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bf14:	429a      	cmp	r2, r3
 800bf16:	f080 81a3 	bcs.w	800c260 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bf20:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf2a:	69db      	ldr	r3, [r3, #28]
 800bf2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf30:	f000 8087 	beq.w	800c042 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bf40:	e853 3f00 	ldrex	r3, [r3]
 800bf44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bf48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bf4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bf50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	461a      	mov	r2, r3
 800bf5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bf5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bf62:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf66:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bf6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bf6e:	e841 2300 	strex	r3, r2, [r1]
 800bf72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bf76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d1da      	bne.n	800bf34 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	3308      	adds	r3, #8
 800bf84:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bf88:	e853 3f00 	ldrex	r3, [r3]
 800bf8c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bf8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bf90:	f023 0301 	bic.w	r3, r3, #1
 800bf94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	3308      	adds	r3, #8
 800bf9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bfa2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bfa6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfa8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bfaa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bfae:	e841 2300 	strex	r3, r2, [r1]
 800bfb2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bfb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d1e1      	bne.n	800bf7e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	3308      	adds	r3, #8
 800bfc0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bfc4:	e853 3f00 	ldrex	r3, [r3]
 800bfc8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bfca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bfcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bfd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	3308      	adds	r3, #8
 800bfda:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bfde:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bfe0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfe2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bfe4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bfe6:	e841 2300 	strex	r3, r2, [r1]
 800bfea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bfec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d1e3      	bne.n	800bfba <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	2220      	movs	r2, #32
 800bff6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	2200      	movs	r2, #0
 800bffe:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c006:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c008:	e853 3f00 	ldrex	r3, [r3]
 800c00c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c00e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c010:	f023 0310 	bic.w	r3, r3, #16
 800c014:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	461a      	mov	r2, r3
 800c01e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c022:	65bb      	str	r3, [r7, #88]	; 0x58
 800c024:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c026:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c028:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c02a:	e841 2300 	strex	r3, r2, [r1]
 800c02e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c030:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c032:	2b00      	cmp	r3, #0
 800c034:	d1e4      	bne.n	800c000 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c03c:	4618      	mov	r0, r3
 800c03e:	f7f8 f95b 	bl	80042f8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	2202      	movs	r2, #2
 800c046:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c054:	b29b      	uxth	r3, r3
 800c056:	1ad3      	subs	r3, r2, r3
 800c058:	b29b      	uxth	r3, r3
 800c05a:	4619      	mov	r1, r3
 800c05c:	6878      	ldr	r0, [r7, #4]
 800c05e:	f000 f91d 	bl	800c29c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c062:	e0fd      	b.n	800c260 <HAL_UART_IRQHandler+0x760>
 800c064:	40020010 	.word	0x40020010
 800c068:	40020028 	.word	0x40020028
 800c06c:	40020040 	.word	0x40020040
 800c070:	40020058 	.word	0x40020058
 800c074:	40020070 	.word	0x40020070
 800c078:	40020088 	.word	0x40020088
 800c07c:	400200a0 	.word	0x400200a0
 800c080:	400200b8 	.word	0x400200b8
 800c084:	40020410 	.word	0x40020410
 800c088:	40020428 	.word	0x40020428
 800c08c:	40020440 	.word	0x40020440
 800c090:	40020458 	.word	0x40020458
 800c094:	40020470 	.word	0x40020470
 800c098:	40020488 	.word	0x40020488
 800c09c:	400204a0 	.word	0x400204a0
 800c0a0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c0b0:	b29b      	uxth	r3, r3
 800c0b2:	1ad3      	subs	r3, r2, r3
 800c0b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c0be:	b29b      	uxth	r3, r3
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	f000 80cf 	beq.w	800c264 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800c0c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	f000 80ca 	beq.w	800c264 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0d8:	e853 3f00 	ldrex	r3, [r3]
 800c0dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c0de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c0e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	461a      	mov	r2, r3
 800c0ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c0f2:	647b      	str	r3, [r7, #68]	; 0x44
 800c0f4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c0f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c0fa:	e841 2300 	strex	r3, r2, [r1]
 800c0fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c102:	2b00      	cmp	r3, #0
 800c104:	d1e4      	bne.n	800c0d0 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	3308      	adds	r3, #8
 800c10c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c10e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c110:	e853 3f00 	ldrex	r3, [r3]
 800c114:	623b      	str	r3, [r7, #32]
   return(result);
 800c116:	6a3a      	ldr	r2, [r7, #32]
 800c118:	4b55      	ldr	r3, [pc, #340]	; (800c270 <HAL_UART_IRQHandler+0x770>)
 800c11a:	4013      	ands	r3, r2
 800c11c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	3308      	adds	r3, #8
 800c126:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c12a:	633a      	str	r2, [r7, #48]	; 0x30
 800c12c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c12e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c130:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c132:	e841 2300 	strex	r3, r2, [r1]
 800c136:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d1e3      	bne.n	800c106 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	2220      	movs	r2, #32
 800c142:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	2200      	movs	r2, #0
 800c14a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	2200      	movs	r2, #0
 800c150:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c158:	693b      	ldr	r3, [r7, #16]
 800c15a:	e853 3f00 	ldrex	r3, [r3]
 800c15e:	60fb      	str	r3, [r7, #12]
   return(result);
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	f023 0310 	bic.w	r3, r3, #16
 800c166:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	461a      	mov	r2, r3
 800c170:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c174:	61fb      	str	r3, [r7, #28]
 800c176:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c178:	69b9      	ldr	r1, [r7, #24]
 800c17a:	69fa      	ldr	r2, [r7, #28]
 800c17c:	e841 2300 	strex	r3, r2, [r1]
 800c180:	617b      	str	r3, [r7, #20]
   return(result);
 800c182:	697b      	ldr	r3, [r7, #20]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d1e4      	bne.n	800c152 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	2202      	movs	r2, #2
 800c18c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c18e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c192:	4619      	mov	r1, r3
 800c194:	6878      	ldr	r0, [r7, #4]
 800c196:	f000 f881 	bl	800c29c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c19a:	e063      	b.n	800c264 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c19c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d00e      	beq.n	800c1c6 <HAL_UART_IRQHandler+0x6c6>
 800c1a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c1ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d008      	beq.n	800c1c6 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c1bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c1be:	6878      	ldr	r0, [r7, #4]
 800c1c0:	f001 fe7a 	bl	800deb8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c1c4:	e051      	b.n	800c26a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c1c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d014      	beq.n	800c1fc <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c1d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c1d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d105      	bne.n	800c1ea <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c1de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c1e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d008      	beq.n	800c1fc <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d03a      	beq.n	800c268 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c1f6:	6878      	ldr	r0, [r7, #4]
 800c1f8:	4798      	blx	r3
    }
    return;
 800c1fa:	e035      	b.n	800c268 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c1fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c204:	2b00      	cmp	r3, #0
 800c206:	d009      	beq.n	800c21c <HAL_UART_IRQHandler+0x71c>
 800c208:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c20c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c210:	2b00      	cmp	r3, #0
 800c212:	d003      	beq.n	800c21c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800c214:	6878      	ldr	r0, [r7, #4]
 800c216:	f001 f907 	bl	800d428 <UART_EndTransmit_IT>
    return;
 800c21a:	e026      	b.n	800c26a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c21c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c220:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c224:	2b00      	cmp	r3, #0
 800c226:	d009      	beq.n	800c23c <HAL_UART_IRQHandler+0x73c>
 800c228:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c22c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c230:	2b00      	cmp	r3, #0
 800c232:	d003      	beq.n	800c23c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c234:	6878      	ldr	r0, [r7, #4]
 800c236:	f001 fe53 	bl	800dee0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c23a:	e016      	b.n	800c26a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c23c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c240:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c244:	2b00      	cmp	r3, #0
 800c246:	d010      	beq.n	800c26a <HAL_UART_IRQHandler+0x76a>
 800c248:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	da0c      	bge.n	800c26a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c250:	6878      	ldr	r0, [r7, #4]
 800c252:	f001 fe3b 	bl	800decc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c256:	e008      	b.n	800c26a <HAL_UART_IRQHandler+0x76a>
      return;
 800c258:	bf00      	nop
 800c25a:	e006      	b.n	800c26a <HAL_UART_IRQHandler+0x76a>
    return;
 800c25c:	bf00      	nop
 800c25e:	e004      	b.n	800c26a <HAL_UART_IRQHandler+0x76a>
      return;
 800c260:	bf00      	nop
 800c262:	e002      	b.n	800c26a <HAL_UART_IRQHandler+0x76a>
      return;
 800c264:	bf00      	nop
 800c266:	e000      	b.n	800c26a <HAL_UART_IRQHandler+0x76a>
    return;
 800c268:	bf00      	nop
  }
}
 800c26a:	37e8      	adds	r7, #232	; 0xe8
 800c26c:	46bd      	mov	sp, r7
 800c26e:	bd80      	pop	{r7, pc}
 800c270:	effffffe 	.word	0xeffffffe

0800c274 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c274:	b480      	push	{r7}
 800c276:	b083      	sub	sp, #12
 800c278:	af00      	add	r7, sp, #0
 800c27a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c27c:	bf00      	nop
 800c27e:	370c      	adds	r7, #12
 800c280:	46bd      	mov	sp, r7
 800c282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c286:	4770      	bx	lr

0800c288 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c288:	b480      	push	{r7}
 800c28a:	b083      	sub	sp, #12
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c290:	bf00      	nop
 800c292:	370c      	adds	r7, #12
 800c294:	46bd      	mov	sp, r7
 800c296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29a:	4770      	bx	lr

0800c29c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c29c:	b480      	push	{r7}
 800c29e:	b083      	sub	sp, #12
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]
 800c2a4:	460b      	mov	r3, r1
 800c2a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c2a8:	bf00      	nop
 800c2aa:	370c      	adds	r7, #12
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b2:	4770      	bx	lr

0800c2b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c2b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c2b8:	b092      	sub	sp, #72	; 0x48
 800c2ba:	af00      	add	r7, sp, #0
 800c2bc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c2be:	2300      	movs	r3, #0
 800c2c0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c2c4:	697b      	ldr	r3, [r7, #20]
 800c2c6:	689a      	ldr	r2, [r3, #8]
 800c2c8:	697b      	ldr	r3, [r7, #20]
 800c2ca:	691b      	ldr	r3, [r3, #16]
 800c2cc:	431a      	orrs	r2, r3
 800c2ce:	697b      	ldr	r3, [r7, #20]
 800c2d0:	695b      	ldr	r3, [r3, #20]
 800c2d2:	431a      	orrs	r2, r3
 800c2d4:	697b      	ldr	r3, [r7, #20]
 800c2d6:	69db      	ldr	r3, [r3, #28]
 800c2d8:	4313      	orrs	r3, r2
 800c2da:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c2dc:	697b      	ldr	r3, [r7, #20]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	681a      	ldr	r2, [r3, #0]
 800c2e2:	4bbe      	ldr	r3, [pc, #760]	; (800c5dc <UART_SetConfig+0x328>)
 800c2e4:	4013      	ands	r3, r2
 800c2e6:	697a      	ldr	r2, [r7, #20]
 800c2e8:	6812      	ldr	r2, [r2, #0]
 800c2ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c2ec:	430b      	orrs	r3, r1
 800c2ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c2f0:	697b      	ldr	r3, [r7, #20]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	685b      	ldr	r3, [r3, #4]
 800c2f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c2fa:	697b      	ldr	r3, [r7, #20]
 800c2fc:	68da      	ldr	r2, [r3, #12]
 800c2fe:	697b      	ldr	r3, [r7, #20]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	430a      	orrs	r2, r1
 800c304:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c306:	697b      	ldr	r3, [r7, #20]
 800c308:	699b      	ldr	r3, [r3, #24]
 800c30a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c30c:	697b      	ldr	r3, [r7, #20]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	4ab3      	ldr	r2, [pc, #716]	; (800c5e0 <UART_SetConfig+0x32c>)
 800c312:	4293      	cmp	r3, r2
 800c314:	d004      	beq.n	800c320 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c316:	697b      	ldr	r3, [r7, #20]
 800c318:	6a1b      	ldr	r3, [r3, #32]
 800c31a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c31c:	4313      	orrs	r3, r2
 800c31e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c320:	697b      	ldr	r3, [r7, #20]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	689a      	ldr	r2, [r3, #8]
 800c326:	4baf      	ldr	r3, [pc, #700]	; (800c5e4 <UART_SetConfig+0x330>)
 800c328:	4013      	ands	r3, r2
 800c32a:	697a      	ldr	r2, [r7, #20]
 800c32c:	6812      	ldr	r2, [r2, #0]
 800c32e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c330:	430b      	orrs	r3, r1
 800c332:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c334:	697b      	ldr	r3, [r7, #20]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c33a:	f023 010f 	bic.w	r1, r3, #15
 800c33e:	697b      	ldr	r3, [r7, #20]
 800c340:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c342:	697b      	ldr	r3, [r7, #20]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	430a      	orrs	r2, r1
 800c348:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c34a:	697b      	ldr	r3, [r7, #20]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	4aa6      	ldr	r2, [pc, #664]	; (800c5e8 <UART_SetConfig+0x334>)
 800c350:	4293      	cmp	r3, r2
 800c352:	d177      	bne.n	800c444 <UART_SetConfig+0x190>
 800c354:	4ba5      	ldr	r3, [pc, #660]	; (800c5ec <UART_SetConfig+0x338>)
 800c356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c358:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c35c:	2b28      	cmp	r3, #40	; 0x28
 800c35e:	d86d      	bhi.n	800c43c <UART_SetConfig+0x188>
 800c360:	a201      	add	r2, pc, #4	; (adr r2, 800c368 <UART_SetConfig+0xb4>)
 800c362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c366:	bf00      	nop
 800c368:	0800c40d 	.word	0x0800c40d
 800c36c:	0800c43d 	.word	0x0800c43d
 800c370:	0800c43d 	.word	0x0800c43d
 800c374:	0800c43d 	.word	0x0800c43d
 800c378:	0800c43d 	.word	0x0800c43d
 800c37c:	0800c43d 	.word	0x0800c43d
 800c380:	0800c43d 	.word	0x0800c43d
 800c384:	0800c43d 	.word	0x0800c43d
 800c388:	0800c415 	.word	0x0800c415
 800c38c:	0800c43d 	.word	0x0800c43d
 800c390:	0800c43d 	.word	0x0800c43d
 800c394:	0800c43d 	.word	0x0800c43d
 800c398:	0800c43d 	.word	0x0800c43d
 800c39c:	0800c43d 	.word	0x0800c43d
 800c3a0:	0800c43d 	.word	0x0800c43d
 800c3a4:	0800c43d 	.word	0x0800c43d
 800c3a8:	0800c41d 	.word	0x0800c41d
 800c3ac:	0800c43d 	.word	0x0800c43d
 800c3b0:	0800c43d 	.word	0x0800c43d
 800c3b4:	0800c43d 	.word	0x0800c43d
 800c3b8:	0800c43d 	.word	0x0800c43d
 800c3bc:	0800c43d 	.word	0x0800c43d
 800c3c0:	0800c43d 	.word	0x0800c43d
 800c3c4:	0800c43d 	.word	0x0800c43d
 800c3c8:	0800c425 	.word	0x0800c425
 800c3cc:	0800c43d 	.word	0x0800c43d
 800c3d0:	0800c43d 	.word	0x0800c43d
 800c3d4:	0800c43d 	.word	0x0800c43d
 800c3d8:	0800c43d 	.word	0x0800c43d
 800c3dc:	0800c43d 	.word	0x0800c43d
 800c3e0:	0800c43d 	.word	0x0800c43d
 800c3e4:	0800c43d 	.word	0x0800c43d
 800c3e8:	0800c42d 	.word	0x0800c42d
 800c3ec:	0800c43d 	.word	0x0800c43d
 800c3f0:	0800c43d 	.word	0x0800c43d
 800c3f4:	0800c43d 	.word	0x0800c43d
 800c3f8:	0800c43d 	.word	0x0800c43d
 800c3fc:	0800c43d 	.word	0x0800c43d
 800c400:	0800c43d 	.word	0x0800c43d
 800c404:	0800c43d 	.word	0x0800c43d
 800c408:	0800c435 	.word	0x0800c435
 800c40c:	2301      	movs	r3, #1
 800c40e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c412:	e222      	b.n	800c85a <UART_SetConfig+0x5a6>
 800c414:	2304      	movs	r3, #4
 800c416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c41a:	e21e      	b.n	800c85a <UART_SetConfig+0x5a6>
 800c41c:	2308      	movs	r3, #8
 800c41e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c422:	e21a      	b.n	800c85a <UART_SetConfig+0x5a6>
 800c424:	2310      	movs	r3, #16
 800c426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c42a:	e216      	b.n	800c85a <UART_SetConfig+0x5a6>
 800c42c:	2320      	movs	r3, #32
 800c42e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c432:	e212      	b.n	800c85a <UART_SetConfig+0x5a6>
 800c434:	2340      	movs	r3, #64	; 0x40
 800c436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c43a:	e20e      	b.n	800c85a <UART_SetConfig+0x5a6>
 800c43c:	2380      	movs	r3, #128	; 0x80
 800c43e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c442:	e20a      	b.n	800c85a <UART_SetConfig+0x5a6>
 800c444:	697b      	ldr	r3, [r7, #20]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	4a69      	ldr	r2, [pc, #420]	; (800c5f0 <UART_SetConfig+0x33c>)
 800c44a:	4293      	cmp	r3, r2
 800c44c:	d130      	bne.n	800c4b0 <UART_SetConfig+0x1fc>
 800c44e:	4b67      	ldr	r3, [pc, #412]	; (800c5ec <UART_SetConfig+0x338>)
 800c450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c452:	f003 0307 	and.w	r3, r3, #7
 800c456:	2b05      	cmp	r3, #5
 800c458:	d826      	bhi.n	800c4a8 <UART_SetConfig+0x1f4>
 800c45a:	a201      	add	r2, pc, #4	; (adr r2, 800c460 <UART_SetConfig+0x1ac>)
 800c45c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c460:	0800c479 	.word	0x0800c479
 800c464:	0800c481 	.word	0x0800c481
 800c468:	0800c489 	.word	0x0800c489
 800c46c:	0800c491 	.word	0x0800c491
 800c470:	0800c499 	.word	0x0800c499
 800c474:	0800c4a1 	.word	0x0800c4a1
 800c478:	2300      	movs	r3, #0
 800c47a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c47e:	e1ec      	b.n	800c85a <UART_SetConfig+0x5a6>
 800c480:	2304      	movs	r3, #4
 800c482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c486:	e1e8      	b.n	800c85a <UART_SetConfig+0x5a6>
 800c488:	2308      	movs	r3, #8
 800c48a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c48e:	e1e4      	b.n	800c85a <UART_SetConfig+0x5a6>
 800c490:	2310      	movs	r3, #16
 800c492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c496:	e1e0      	b.n	800c85a <UART_SetConfig+0x5a6>
 800c498:	2320      	movs	r3, #32
 800c49a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c49e:	e1dc      	b.n	800c85a <UART_SetConfig+0x5a6>
 800c4a0:	2340      	movs	r3, #64	; 0x40
 800c4a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4a6:	e1d8      	b.n	800c85a <UART_SetConfig+0x5a6>
 800c4a8:	2380      	movs	r3, #128	; 0x80
 800c4aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4ae:	e1d4      	b.n	800c85a <UART_SetConfig+0x5a6>
 800c4b0:	697b      	ldr	r3, [r7, #20]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	4a4f      	ldr	r2, [pc, #316]	; (800c5f4 <UART_SetConfig+0x340>)
 800c4b6:	4293      	cmp	r3, r2
 800c4b8:	d130      	bne.n	800c51c <UART_SetConfig+0x268>
 800c4ba:	4b4c      	ldr	r3, [pc, #304]	; (800c5ec <UART_SetConfig+0x338>)
 800c4bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4be:	f003 0307 	and.w	r3, r3, #7
 800c4c2:	2b05      	cmp	r3, #5
 800c4c4:	d826      	bhi.n	800c514 <UART_SetConfig+0x260>
 800c4c6:	a201      	add	r2, pc, #4	; (adr r2, 800c4cc <UART_SetConfig+0x218>)
 800c4c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4cc:	0800c4e5 	.word	0x0800c4e5
 800c4d0:	0800c4ed 	.word	0x0800c4ed
 800c4d4:	0800c4f5 	.word	0x0800c4f5
 800c4d8:	0800c4fd 	.word	0x0800c4fd
 800c4dc:	0800c505 	.word	0x0800c505
 800c4e0:	0800c50d 	.word	0x0800c50d
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4ea:	e1b6      	b.n	800c85a <UART_SetConfig+0x5a6>
 800c4ec:	2304      	movs	r3, #4
 800c4ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4f2:	e1b2      	b.n	800c85a <UART_SetConfig+0x5a6>
 800c4f4:	2308      	movs	r3, #8
 800c4f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4fa:	e1ae      	b.n	800c85a <UART_SetConfig+0x5a6>
 800c4fc:	2310      	movs	r3, #16
 800c4fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c502:	e1aa      	b.n	800c85a <UART_SetConfig+0x5a6>
 800c504:	2320      	movs	r3, #32
 800c506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c50a:	e1a6      	b.n	800c85a <UART_SetConfig+0x5a6>
 800c50c:	2340      	movs	r3, #64	; 0x40
 800c50e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c512:	e1a2      	b.n	800c85a <UART_SetConfig+0x5a6>
 800c514:	2380      	movs	r3, #128	; 0x80
 800c516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c51a:	e19e      	b.n	800c85a <UART_SetConfig+0x5a6>
 800c51c:	697b      	ldr	r3, [r7, #20]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	4a35      	ldr	r2, [pc, #212]	; (800c5f8 <UART_SetConfig+0x344>)
 800c522:	4293      	cmp	r3, r2
 800c524:	d130      	bne.n	800c588 <UART_SetConfig+0x2d4>
 800c526:	4b31      	ldr	r3, [pc, #196]	; (800c5ec <UART_SetConfig+0x338>)
 800c528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c52a:	f003 0307 	and.w	r3, r3, #7
 800c52e:	2b05      	cmp	r3, #5
 800c530:	d826      	bhi.n	800c580 <UART_SetConfig+0x2cc>
 800c532:	a201      	add	r2, pc, #4	; (adr r2, 800c538 <UART_SetConfig+0x284>)
 800c534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c538:	0800c551 	.word	0x0800c551
 800c53c:	0800c559 	.word	0x0800c559
 800c540:	0800c561 	.word	0x0800c561
 800c544:	0800c569 	.word	0x0800c569
 800c548:	0800c571 	.word	0x0800c571
 800c54c:	0800c579 	.word	0x0800c579
 800c550:	2300      	movs	r3, #0
 800c552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c556:	e180      	b.n	800c85a <UART_SetConfig+0x5a6>
 800c558:	2304      	movs	r3, #4
 800c55a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c55e:	e17c      	b.n	800c85a <UART_SetConfig+0x5a6>
 800c560:	2308      	movs	r3, #8
 800c562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c566:	e178      	b.n	800c85a <UART_SetConfig+0x5a6>
 800c568:	2310      	movs	r3, #16
 800c56a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c56e:	e174      	b.n	800c85a <UART_SetConfig+0x5a6>
 800c570:	2320      	movs	r3, #32
 800c572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c576:	e170      	b.n	800c85a <UART_SetConfig+0x5a6>
 800c578:	2340      	movs	r3, #64	; 0x40
 800c57a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c57e:	e16c      	b.n	800c85a <UART_SetConfig+0x5a6>
 800c580:	2380      	movs	r3, #128	; 0x80
 800c582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c586:	e168      	b.n	800c85a <UART_SetConfig+0x5a6>
 800c588:	697b      	ldr	r3, [r7, #20]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	4a1b      	ldr	r2, [pc, #108]	; (800c5fc <UART_SetConfig+0x348>)
 800c58e:	4293      	cmp	r3, r2
 800c590:	d142      	bne.n	800c618 <UART_SetConfig+0x364>
 800c592:	4b16      	ldr	r3, [pc, #88]	; (800c5ec <UART_SetConfig+0x338>)
 800c594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c596:	f003 0307 	and.w	r3, r3, #7
 800c59a:	2b05      	cmp	r3, #5
 800c59c:	d838      	bhi.n	800c610 <UART_SetConfig+0x35c>
 800c59e:	a201      	add	r2, pc, #4	; (adr r2, 800c5a4 <UART_SetConfig+0x2f0>)
 800c5a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5a4:	0800c5bd 	.word	0x0800c5bd
 800c5a8:	0800c5c5 	.word	0x0800c5c5
 800c5ac:	0800c5cd 	.word	0x0800c5cd
 800c5b0:	0800c5d5 	.word	0x0800c5d5
 800c5b4:	0800c601 	.word	0x0800c601
 800c5b8:	0800c609 	.word	0x0800c609
 800c5bc:	2300      	movs	r3, #0
 800c5be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5c2:	e14a      	b.n	800c85a <UART_SetConfig+0x5a6>
 800c5c4:	2304      	movs	r3, #4
 800c5c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5ca:	e146      	b.n	800c85a <UART_SetConfig+0x5a6>
 800c5cc:	2308      	movs	r3, #8
 800c5ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5d2:	e142      	b.n	800c85a <UART_SetConfig+0x5a6>
 800c5d4:	2310      	movs	r3, #16
 800c5d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5da:	e13e      	b.n	800c85a <UART_SetConfig+0x5a6>
 800c5dc:	cfff69f3 	.word	0xcfff69f3
 800c5e0:	58000c00 	.word	0x58000c00
 800c5e4:	11fff4ff 	.word	0x11fff4ff
 800c5e8:	40011000 	.word	0x40011000
 800c5ec:	58024400 	.word	0x58024400
 800c5f0:	40004400 	.word	0x40004400
 800c5f4:	40004800 	.word	0x40004800
 800c5f8:	40004c00 	.word	0x40004c00
 800c5fc:	40005000 	.word	0x40005000
 800c600:	2320      	movs	r3, #32
 800c602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c606:	e128      	b.n	800c85a <UART_SetConfig+0x5a6>
 800c608:	2340      	movs	r3, #64	; 0x40
 800c60a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c60e:	e124      	b.n	800c85a <UART_SetConfig+0x5a6>
 800c610:	2380      	movs	r3, #128	; 0x80
 800c612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c616:	e120      	b.n	800c85a <UART_SetConfig+0x5a6>
 800c618:	697b      	ldr	r3, [r7, #20]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	4acb      	ldr	r2, [pc, #812]	; (800c94c <UART_SetConfig+0x698>)
 800c61e:	4293      	cmp	r3, r2
 800c620:	d176      	bne.n	800c710 <UART_SetConfig+0x45c>
 800c622:	4bcb      	ldr	r3, [pc, #812]	; (800c950 <UART_SetConfig+0x69c>)
 800c624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c626:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c62a:	2b28      	cmp	r3, #40	; 0x28
 800c62c:	d86c      	bhi.n	800c708 <UART_SetConfig+0x454>
 800c62e:	a201      	add	r2, pc, #4	; (adr r2, 800c634 <UART_SetConfig+0x380>)
 800c630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c634:	0800c6d9 	.word	0x0800c6d9
 800c638:	0800c709 	.word	0x0800c709
 800c63c:	0800c709 	.word	0x0800c709
 800c640:	0800c709 	.word	0x0800c709
 800c644:	0800c709 	.word	0x0800c709
 800c648:	0800c709 	.word	0x0800c709
 800c64c:	0800c709 	.word	0x0800c709
 800c650:	0800c709 	.word	0x0800c709
 800c654:	0800c6e1 	.word	0x0800c6e1
 800c658:	0800c709 	.word	0x0800c709
 800c65c:	0800c709 	.word	0x0800c709
 800c660:	0800c709 	.word	0x0800c709
 800c664:	0800c709 	.word	0x0800c709
 800c668:	0800c709 	.word	0x0800c709
 800c66c:	0800c709 	.word	0x0800c709
 800c670:	0800c709 	.word	0x0800c709
 800c674:	0800c6e9 	.word	0x0800c6e9
 800c678:	0800c709 	.word	0x0800c709
 800c67c:	0800c709 	.word	0x0800c709
 800c680:	0800c709 	.word	0x0800c709
 800c684:	0800c709 	.word	0x0800c709
 800c688:	0800c709 	.word	0x0800c709
 800c68c:	0800c709 	.word	0x0800c709
 800c690:	0800c709 	.word	0x0800c709
 800c694:	0800c6f1 	.word	0x0800c6f1
 800c698:	0800c709 	.word	0x0800c709
 800c69c:	0800c709 	.word	0x0800c709
 800c6a0:	0800c709 	.word	0x0800c709
 800c6a4:	0800c709 	.word	0x0800c709
 800c6a8:	0800c709 	.word	0x0800c709
 800c6ac:	0800c709 	.word	0x0800c709
 800c6b0:	0800c709 	.word	0x0800c709
 800c6b4:	0800c6f9 	.word	0x0800c6f9
 800c6b8:	0800c709 	.word	0x0800c709
 800c6bc:	0800c709 	.word	0x0800c709
 800c6c0:	0800c709 	.word	0x0800c709
 800c6c4:	0800c709 	.word	0x0800c709
 800c6c8:	0800c709 	.word	0x0800c709
 800c6cc:	0800c709 	.word	0x0800c709
 800c6d0:	0800c709 	.word	0x0800c709
 800c6d4:	0800c701 	.word	0x0800c701
 800c6d8:	2301      	movs	r3, #1
 800c6da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6de:	e0bc      	b.n	800c85a <UART_SetConfig+0x5a6>
 800c6e0:	2304      	movs	r3, #4
 800c6e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6e6:	e0b8      	b.n	800c85a <UART_SetConfig+0x5a6>
 800c6e8:	2308      	movs	r3, #8
 800c6ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6ee:	e0b4      	b.n	800c85a <UART_SetConfig+0x5a6>
 800c6f0:	2310      	movs	r3, #16
 800c6f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6f6:	e0b0      	b.n	800c85a <UART_SetConfig+0x5a6>
 800c6f8:	2320      	movs	r3, #32
 800c6fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6fe:	e0ac      	b.n	800c85a <UART_SetConfig+0x5a6>
 800c700:	2340      	movs	r3, #64	; 0x40
 800c702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c706:	e0a8      	b.n	800c85a <UART_SetConfig+0x5a6>
 800c708:	2380      	movs	r3, #128	; 0x80
 800c70a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c70e:	e0a4      	b.n	800c85a <UART_SetConfig+0x5a6>
 800c710:	697b      	ldr	r3, [r7, #20]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	4a8f      	ldr	r2, [pc, #572]	; (800c954 <UART_SetConfig+0x6a0>)
 800c716:	4293      	cmp	r3, r2
 800c718:	d130      	bne.n	800c77c <UART_SetConfig+0x4c8>
 800c71a:	4b8d      	ldr	r3, [pc, #564]	; (800c950 <UART_SetConfig+0x69c>)
 800c71c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c71e:	f003 0307 	and.w	r3, r3, #7
 800c722:	2b05      	cmp	r3, #5
 800c724:	d826      	bhi.n	800c774 <UART_SetConfig+0x4c0>
 800c726:	a201      	add	r2, pc, #4	; (adr r2, 800c72c <UART_SetConfig+0x478>)
 800c728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c72c:	0800c745 	.word	0x0800c745
 800c730:	0800c74d 	.word	0x0800c74d
 800c734:	0800c755 	.word	0x0800c755
 800c738:	0800c75d 	.word	0x0800c75d
 800c73c:	0800c765 	.word	0x0800c765
 800c740:	0800c76d 	.word	0x0800c76d
 800c744:	2300      	movs	r3, #0
 800c746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c74a:	e086      	b.n	800c85a <UART_SetConfig+0x5a6>
 800c74c:	2304      	movs	r3, #4
 800c74e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c752:	e082      	b.n	800c85a <UART_SetConfig+0x5a6>
 800c754:	2308      	movs	r3, #8
 800c756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c75a:	e07e      	b.n	800c85a <UART_SetConfig+0x5a6>
 800c75c:	2310      	movs	r3, #16
 800c75e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c762:	e07a      	b.n	800c85a <UART_SetConfig+0x5a6>
 800c764:	2320      	movs	r3, #32
 800c766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c76a:	e076      	b.n	800c85a <UART_SetConfig+0x5a6>
 800c76c:	2340      	movs	r3, #64	; 0x40
 800c76e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c772:	e072      	b.n	800c85a <UART_SetConfig+0x5a6>
 800c774:	2380      	movs	r3, #128	; 0x80
 800c776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c77a:	e06e      	b.n	800c85a <UART_SetConfig+0x5a6>
 800c77c:	697b      	ldr	r3, [r7, #20]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	4a75      	ldr	r2, [pc, #468]	; (800c958 <UART_SetConfig+0x6a4>)
 800c782:	4293      	cmp	r3, r2
 800c784:	d130      	bne.n	800c7e8 <UART_SetConfig+0x534>
 800c786:	4b72      	ldr	r3, [pc, #456]	; (800c950 <UART_SetConfig+0x69c>)
 800c788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c78a:	f003 0307 	and.w	r3, r3, #7
 800c78e:	2b05      	cmp	r3, #5
 800c790:	d826      	bhi.n	800c7e0 <UART_SetConfig+0x52c>
 800c792:	a201      	add	r2, pc, #4	; (adr r2, 800c798 <UART_SetConfig+0x4e4>)
 800c794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c798:	0800c7b1 	.word	0x0800c7b1
 800c79c:	0800c7b9 	.word	0x0800c7b9
 800c7a0:	0800c7c1 	.word	0x0800c7c1
 800c7a4:	0800c7c9 	.word	0x0800c7c9
 800c7a8:	0800c7d1 	.word	0x0800c7d1
 800c7ac:	0800c7d9 	.word	0x0800c7d9
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7b6:	e050      	b.n	800c85a <UART_SetConfig+0x5a6>
 800c7b8:	2304      	movs	r3, #4
 800c7ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7be:	e04c      	b.n	800c85a <UART_SetConfig+0x5a6>
 800c7c0:	2308      	movs	r3, #8
 800c7c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7c6:	e048      	b.n	800c85a <UART_SetConfig+0x5a6>
 800c7c8:	2310      	movs	r3, #16
 800c7ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7ce:	e044      	b.n	800c85a <UART_SetConfig+0x5a6>
 800c7d0:	2320      	movs	r3, #32
 800c7d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7d6:	e040      	b.n	800c85a <UART_SetConfig+0x5a6>
 800c7d8:	2340      	movs	r3, #64	; 0x40
 800c7da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7de:	e03c      	b.n	800c85a <UART_SetConfig+0x5a6>
 800c7e0:	2380      	movs	r3, #128	; 0x80
 800c7e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7e6:	e038      	b.n	800c85a <UART_SetConfig+0x5a6>
 800c7e8:	697b      	ldr	r3, [r7, #20]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	4a5b      	ldr	r2, [pc, #364]	; (800c95c <UART_SetConfig+0x6a8>)
 800c7ee:	4293      	cmp	r3, r2
 800c7f0:	d130      	bne.n	800c854 <UART_SetConfig+0x5a0>
 800c7f2:	4b57      	ldr	r3, [pc, #348]	; (800c950 <UART_SetConfig+0x69c>)
 800c7f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c7f6:	f003 0307 	and.w	r3, r3, #7
 800c7fa:	2b05      	cmp	r3, #5
 800c7fc:	d826      	bhi.n	800c84c <UART_SetConfig+0x598>
 800c7fe:	a201      	add	r2, pc, #4	; (adr r2, 800c804 <UART_SetConfig+0x550>)
 800c800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c804:	0800c81d 	.word	0x0800c81d
 800c808:	0800c825 	.word	0x0800c825
 800c80c:	0800c82d 	.word	0x0800c82d
 800c810:	0800c835 	.word	0x0800c835
 800c814:	0800c83d 	.word	0x0800c83d
 800c818:	0800c845 	.word	0x0800c845
 800c81c:	2302      	movs	r3, #2
 800c81e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c822:	e01a      	b.n	800c85a <UART_SetConfig+0x5a6>
 800c824:	2304      	movs	r3, #4
 800c826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c82a:	e016      	b.n	800c85a <UART_SetConfig+0x5a6>
 800c82c:	2308      	movs	r3, #8
 800c82e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c832:	e012      	b.n	800c85a <UART_SetConfig+0x5a6>
 800c834:	2310      	movs	r3, #16
 800c836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c83a:	e00e      	b.n	800c85a <UART_SetConfig+0x5a6>
 800c83c:	2320      	movs	r3, #32
 800c83e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c842:	e00a      	b.n	800c85a <UART_SetConfig+0x5a6>
 800c844:	2340      	movs	r3, #64	; 0x40
 800c846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c84a:	e006      	b.n	800c85a <UART_SetConfig+0x5a6>
 800c84c:	2380      	movs	r3, #128	; 0x80
 800c84e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c852:	e002      	b.n	800c85a <UART_SetConfig+0x5a6>
 800c854:	2380      	movs	r3, #128	; 0x80
 800c856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c85a:	697b      	ldr	r3, [r7, #20]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	4a3f      	ldr	r2, [pc, #252]	; (800c95c <UART_SetConfig+0x6a8>)
 800c860:	4293      	cmp	r3, r2
 800c862:	f040 80f8 	bne.w	800ca56 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c866:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c86a:	2b20      	cmp	r3, #32
 800c86c:	dc46      	bgt.n	800c8fc <UART_SetConfig+0x648>
 800c86e:	2b02      	cmp	r3, #2
 800c870:	f2c0 8082 	blt.w	800c978 <UART_SetConfig+0x6c4>
 800c874:	3b02      	subs	r3, #2
 800c876:	2b1e      	cmp	r3, #30
 800c878:	d87e      	bhi.n	800c978 <UART_SetConfig+0x6c4>
 800c87a:	a201      	add	r2, pc, #4	; (adr r2, 800c880 <UART_SetConfig+0x5cc>)
 800c87c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c880:	0800c903 	.word	0x0800c903
 800c884:	0800c979 	.word	0x0800c979
 800c888:	0800c90b 	.word	0x0800c90b
 800c88c:	0800c979 	.word	0x0800c979
 800c890:	0800c979 	.word	0x0800c979
 800c894:	0800c979 	.word	0x0800c979
 800c898:	0800c91b 	.word	0x0800c91b
 800c89c:	0800c979 	.word	0x0800c979
 800c8a0:	0800c979 	.word	0x0800c979
 800c8a4:	0800c979 	.word	0x0800c979
 800c8a8:	0800c979 	.word	0x0800c979
 800c8ac:	0800c979 	.word	0x0800c979
 800c8b0:	0800c979 	.word	0x0800c979
 800c8b4:	0800c979 	.word	0x0800c979
 800c8b8:	0800c92b 	.word	0x0800c92b
 800c8bc:	0800c979 	.word	0x0800c979
 800c8c0:	0800c979 	.word	0x0800c979
 800c8c4:	0800c979 	.word	0x0800c979
 800c8c8:	0800c979 	.word	0x0800c979
 800c8cc:	0800c979 	.word	0x0800c979
 800c8d0:	0800c979 	.word	0x0800c979
 800c8d4:	0800c979 	.word	0x0800c979
 800c8d8:	0800c979 	.word	0x0800c979
 800c8dc:	0800c979 	.word	0x0800c979
 800c8e0:	0800c979 	.word	0x0800c979
 800c8e4:	0800c979 	.word	0x0800c979
 800c8e8:	0800c979 	.word	0x0800c979
 800c8ec:	0800c979 	.word	0x0800c979
 800c8f0:	0800c979 	.word	0x0800c979
 800c8f4:	0800c979 	.word	0x0800c979
 800c8f8:	0800c96b 	.word	0x0800c96b
 800c8fc:	2b40      	cmp	r3, #64	; 0x40
 800c8fe:	d037      	beq.n	800c970 <UART_SetConfig+0x6bc>
 800c900:	e03a      	b.n	800c978 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c902:	f7fc ff59 	bl	80097b8 <HAL_RCCEx_GetD3PCLK1Freq>
 800c906:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c908:	e03c      	b.n	800c984 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c90a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c90e:	4618      	mov	r0, r3
 800c910:	f7fc ff68 	bl	80097e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c916:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c918:	e034      	b.n	800c984 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c91a:	f107 0318 	add.w	r3, r7, #24
 800c91e:	4618      	mov	r0, r3
 800c920:	f7fd f8b4 	bl	8009a8c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c924:	69fb      	ldr	r3, [r7, #28]
 800c926:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c928:	e02c      	b.n	800c984 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c92a:	4b09      	ldr	r3, [pc, #36]	; (800c950 <UART_SetConfig+0x69c>)
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	f003 0320 	and.w	r3, r3, #32
 800c932:	2b00      	cmp	r3, #0
 800c934:	d016      	beq.n	800c964 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c936:	4b06      	ldr	r3, [pc, #24]	; (800c950 <UART_SetConfig+0x69c>)
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	08db      	lsrs	r3, r3, #3
 800c93c:	f003 0303 	and.w	r3, r3, #3
 800c940:	4a07      	ldr	r2, [pc, #28]	; (800c960 <UART_SetConfig+0x6ac>)
 800c942:	fa22 f303 	lsr.w	r3, r2, r3
 800c946:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c948:	e01c      	b.n	800c984 <UART_SetConfig+0x6d0>
 800c94a:	bf00      	nop
 800c94c:	40011400 	.word	0x40011400
 800c950:	58024400 	.word	0x58024400
 800c954:	40007800 	.word	0x40007800
 800c958:	40007c00 	.word	0x40007c00
 800c95c:	58000c00 	.word	0x58000c00
 800c960:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c964:	4b9d      	ldr	r3, [pc, #628]	; (800cbdc <UART_SetConfig+0x928>)
 800c966:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c968:	e00c      	b.n	800c984 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c96a:	4b9d      	ldr	r3, [pc, #628]	; (800cbe0 <UART_SetConfig+0x92c>)
 800c96c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c96e:	e009      	b.n	800c984 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c970:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c974:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c976:	e005      	b.n	800c984 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c978:	2300      	movs	r3, #0
 800c97a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c97c:	2301      	movs	r3, #1
 800c97e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c982:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c986:	2b00      	cmp	r3, #0
 800c988:	f000 81de 	beq.w	800cd48 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c98c:	697b      	ldr	r3, [r7, #20]
 800c98e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c990:	4a94      	ldr	r2, [pc, #592]	; (800cbe4 <UART_SetConfig+0x930>)
 800c992:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c996:	461a      	mov	r2, r3
 800c998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c99a:	fbb3 f3f2 	udiv	r3, r3, r2
 800c99e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c9a0:	697b      	ldr	r3, [r7, #20]
 800c9a2:	685a      	ldr	r2, [r3, #4]
 800c9a4:	4613      	mov	r3, r2
 800c9a6:	005b      	lsls	r3, r3, #1
 800c9a8:	4413      	add	r3, r2
 800c9aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c9ac:	429a      	cmp	r2, r3
 800c9ae:	d305      	bcc.n	800c9bc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c9b0:	697b      	ldr	r3, [r7, #20]
 800c9b2:	685b      	ldr	r3, [r3, #4]
 800c9b4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c9b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c9b8:	429a      	cmp	r2, r3
 800c9ba:	d903      	bls.n	800c9c4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c9bc:	2301      	movs	r3, #1
 800c9be:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c9c2:	e1c1      	b.n	800cd48 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c9c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	60bb      	str	r3, [r7, #8]
 800c9ca:	60fa      	str	r2, [r7, #12]
 800c9cc:	697b      	ldr	r3, [r7, #20]
 800c9ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9d0:	4a84      	ldr	r2, [pc, #528]	; (800cbe4 <UART_SetConfig+0x930>)
 800c9d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c9d6:	b29b      	uxth	r3, r3
 800c9d8:	2200      	movs	r2, #0
 800c9da:	603b      	str	r3, [r7, #0]
 800c9dc:	607a      	str	r2, [r7, #4]
 800c9de:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c9e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c9e6:	f7f3 fcd3 	bl	8000390 <__aeabi_uldivmod>
 800c9ea:	4602      	mov	r2, r0
 800c9ec:	460b      	mov	r3, r1
 800c9ee:	4610      	mov	r0, r2
 800c9f0:	4619      	mov	r1, r3
 800c9f2:	f04f 0200 	mov.w	r2, #0
 800c9f6:	f04f 0300 	mov.w	r3, #0
 800c9fa:	020b      	lsls	r3, r1, #8
 800c9fc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ca00:	0202      	lsls	r2, r0, #8
 800ca02:	6979      	ldr	r1, [r7, #20]
 800ca04:	6849      	ldr	r1, [r1, #4]
 800ca06:	0849      	lsrs	r1, r1, #1
 800ca08:	2000      	movs	r0, #0
 800ca0a:	460c      	mov	r4, r1
 800ca0c:	4605      	mov	r5, r0
 800ca0e:	eb12 0804 	adds.w	r8, r2, r4
 800ca12:	eb43 0905 	adc.w	r9, r3, r5
 800ca16:	697b      	ldr	r3, [r7, #20]
 800ca18:	685b      	ldr	r3, [r3, #4]
 800ca1a:	2200      	movs	r2, #0
 800ca1c:	469a      	mov	sl, r3
 800ca1e:	4693      	mov	fp, r2
 800ca20:	4652      	mov	r2, sl
 800ca22:	465b      	mov	r3, fp
 800ca24:	4640      	mov	r0, r8
 800ca26:	4649      	mov	r1, r9
 800ca28:	f7f3 fcb2 	bl	8000390 <__aeabi_uldivmod>
 800ca2c:	4602      	mov	r2, r0
 800ca2e:	460b      	mov	r3, r1
 800ca30:	4613      	mov	r3, r2
 800ca32:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ca34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ca3a:	d308      	bcc.n	800ca4e <UART_SetConfig+0x79a>
 800ca3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ca42:	d204      	bcs.n	800ca4e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800ca44:	697b      	ldr	r3, [r7, #20]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ca4a:	60da      	str	r2, [r3, #12]
 800ca4c:	e17c      	b.n	800cd48 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800ca4e:	2301      	movs	r3, #1
 800ca50:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ca54:	e178      	b.n	800cd48 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ca56:	697b      	ldr	r3, [r7, #20]
 800ca58:	69db      	ldr	r3, [r3, #28]
 800ca5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ca5e:	f040 80c5 	bne.w	800cbec <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800ca62:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ca66:	2b20      	cmp	r3, #32
 800ca68:	dc48      	bgt.n	800cafc <UART_SetConfig+0x848>
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	db7b      	blt.n	800cb66 <UART_SetConfig+0x8b2>
 800ca6e:	2b20      	cmp	r3, #32
 800ca70:	d879      	bhi.n	800cb66 <UART_SetConfig+0x8b2>
 800ca72:	a201      	add	r2, pc, #4	; (adr r2, 800ca78 <UART_SetConfig+0x7c4>)
 800ca74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca78:	0800cb03 	.word	0x0800cb03
 800ca7c:	0800cb0b 	.word	0x0800cb0b
 800ca80:	0800cb67 	.word	0x0800cb67
 800ca84:	0800cb67 	.word	0x0800cb67
 800ca88:	0800cb13 	.word	0x0800cb13
 800ca8c:	0800cb67 	.word	0x0800cb67
 800ca90:	0800cb67 	.word	0x0800cb67
 800ca94:	0800cb67 	.word	0x0800cb67
 800ca98:	0800cb23 	.word	0x0800cb23
 800ca9c:	0800cb67 	.word	0x0800cb67
 800caa0:	0800cb67 	.word	0x0800cb67
 800caa4:	0800cb67 	.word	0x0800cb67
 800caa8:	0800cb67 	.word	0x0800cb67
 800caac:	0800cb67 	.word	0x0800cb67
 800cab0:	0800cb67 	.word	0x0800cb67
 800cab4:	0800cb67 	.word	0x0800cb67
 800cab8:	0800cb33 	.word	0x0800cb33
 800cabc:	0800cb67 	.word	0x0800cb67
 800cac0:	0800cb67 	.word	0x0800cb67
 800cac4:	0800cb67 	.word	0x0800cb67
 800cac8:	0800cb67 	.word	0x0800cb67
 800cacc:	0800cb67 	.word	0x0800cb67
 800cad0:	0800cb67 	.word	0x0800cb67
 800cad4:	0800cb67 	.word	0x0800cb67
 800cad8:	0800cb67 	.word	0x0800cb67
 800cadc:	0800cb67 	.word	0x0800cb67
 800cae0:	0800cb67 	.word	0x0800cb67
 800cae4:	0800cb67 	.word	0x0800cb67
 800cae8:	0800cb67 	.word	0x0800cb67
 800caec:	0800cb67 	.word	0x0800cb67
 800caf0:	0800cb67 	.word	0x0800cb67
 800caf4:	0800cb67 	.word	0x0800cb67
 800caf8:	0800cb59 	.word	0x0800cb59
 800cafc:	2b40      	cmp	r3, #64	; 0x40
 800cafe:	d02e      	beq.n	800cb5e <UART_SetConfig+0x8aa>
 800cb00:	e031      	b.n	800cb66 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cb02:	f7fa fea3 	bl	800784c <HAL_RCC_GetPCLK1Freq>
 800cb06:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cb08:	e033      	b.n	800cb72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cb0a:	f7fa feb5 	bl	8007878 <HAL_RCC_GetPCLK2Freq>
 800cb0e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cb10:	e02f      	b.n	800cb72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cb16:	4618      	mov	r0, r3
 800cb18:	f7fc fe64 	bl	80097e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cb1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb20:	e027      	b.n	800cb72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cb22:	f107 0318 	add.w	r3, r7, #24
 800cb26:	4618      	mov	r0, r3
 800cb28:	f7fc ffb0 	bl	8009a8c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cb2c:	69fb      	ldr	r3, [r7, #28]
 800cb2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb30:	e01f      	b.n	800cb72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cb32:	4b2d      	ldr	r3, [pc, #180]	; (800cbe8 <UART_SetConfig+0x934>)
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	f003 0320 	and.w	r3, r3, #32
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d009      	beq.n	800cb52 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cb3e:	4b2a      	ldr	r3, [pc, #168]	; (800cbe8 <UART_SetConfig+0x934>)
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	08db      	lsrs	r3, r3, #3
 800cb44:	f003 0303 	and.w	r3, r3, #3
 800cb48:	4a24      	ldr	r2, [pc, #144]	; (800cbdc <UART_SetConfig+0x928>)
 800cb4a:	fa22 f303 	lsr.w	r3, r2, r3
 800cb4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cb50:	e00f      	b.n	800cb72 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800cb52:	4b22      	ldr	r3, [pc, #136]	; (800cbdc <UART_SetConfig+0x928>)
 800cb54:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb56:	e00c      	b.n	800cb72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cb58:	4b21      	ldr	r3, [pc, #132]	; (800cbe0 <UART_SetConfig+0x92c>)
 800cb5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb5c:	e009      	b.n	800cb72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cb5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cb62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb64:	e005      	b.n	800cb72 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800cb66:	2300      	movs	r3, #0
 800cb68:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800cb6a:	2301      	movs	r3, #1
 800cb6c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800cb70:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cb72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	f000 80e7 	beq.w	800cd48 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cb7a:	697b      	ldr	r3, [r7, #20]
 800cb7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb7e:	4a19      	ldr	r2, [pc, #100]	; (800cbe4 <UART_SetConfig+0x930>)
 800cb80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cb84:	461a      	mov	r2, r3
 800cb86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb88:	fbb3 f3f2 	udiv	r3, r3, r2
 800cb8c:	005a      	lsls	r2, r3, #1
 800cb8e:	697b      	ldr	r3, [r7, #20]
 800cb90:	685b      	ldr	r3, [r3, #4]
 800cb92:	085b      	lsrs	r3, r3, #1
 800cb94:	441a      	add	r2, r3
 800cb96:	697b      	ldr	r3, [r7, #20]
 800cb98:	685b      	ldr	r3, [r3, #4]
 800cb9a:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb9e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cba2:	2b0f      	cmp	r3, #15
 800cba4:	d916      	bls.n	800cbd4 <UART_SetConfig+0x920>
 800cba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cba8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cbac:	d212      	bcs.n	800cbd4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cbae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbb0:	b29b      	uxth	r3, r3
 800cbb2:	f023 030f 	bic.w	r3, r3, #15
 800cbb6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cbb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbba:	085b      	lsrs	r3, r3, #1
 800cbbc:	b29b      	uxth	r3, r3
 800cbbe:	f003 0307 	and.w	r3, r3, #7
 800cbc2:	b29a      	uxth	r2, r3
 800cbc4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cbc6:	4313      	orrs	r3, r2
 800cbc8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800cbca:	697b      	ldr	r3, [r7, #20]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800cbd0:	60da      	str	r2, [r3, #12]
 800cbd2:	e0b9      	b.n	800cd48 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800cbd4:	2301      	movs	r3, #1
 800cbd6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800cbda:	e0b5      	b.n	800cd48 <UART_SetConfig+0xa94>
 800cbdc:	03d09000 	.word	0x03d09000
 800cbe0:	003d0900 	.word	0x003d0900
 800cbe4:	0800f324 	.word	0x0800f324
 800cbe8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800cbec:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800cbf0:	2b20      	cmp	r3, #32
 800cbf2:	dc49      	bgt.n	800cc88 <UART_SetConfig+0x9d4>
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	db7c      	blt.n	800ccf2 <UART_SetConfig+0xa3e>
 800cbf8:	2b20      	cmp	r3, #32
 800cbfa:	d87a      	bhi.n	800ccf2 <UART_SetConfig+0xa3e>
 800cbfc:	a201      	add	r2, pc, #4	; (adr r2, 800cc04 <UART_SetConfig+0x950>)
 800cbfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc02:	bf00      	nop
 800cc04:	0800cc8f 	.word	0x0800cc8f
 800cc08:	0800cc97 	.word	0x0800cc97
 800cc0c:	0800ccf3 	.word	0x0800ccf3
 800cc10:	0800ccf3 	.word	0x0800ccf3
 800cc14:	0800cc9f 	.word	0x0800cc9f
 800cc18:	0800ccf3 	.word	0x0800ccf3
 800cc1c:	0800ccf3 	.word	0x0800ccf3
 800cc20:	0800ccf3 	.word	0x0800ccf3
 800cc24:	0800ccaf 	.word	0x0800ccaf
 800cc28:	0800ccf3 	.word	0x0800ccf3
 800cc2c:	0800ccf3 	.word	0x0800ccf3
 800cc30:	0800ccf3 	.word	0x0800ccf3
 800cc34:	0800ccf3 	.word	0x0800ccf3
 800cc38:	0800ccf3 	.word	0x0800ccf3
 800cc3c:	0800ccf3 	.word	0x0800ccf3
 800cc40:	0800ccf3 	.word	0x0800ccf3
 800cc44:	0800ccbf 	.word	0x0800ccbf
 800cc48:	0800ccf3 	.word	0x0800ccf3
 800cc4c:	0800ccf3 	.word	0x0800ccf3
 800cc50:	0800ccf3 	.word	0x0800ccf3
 800cc54:	0800ccf3 	.word	0x0800ccf3
 800cc58:	0800ccf3 	.word	0x0800ccf3
 800cc5c:	0800ccf3 	.word	0x0800ccf3
 800cc60:	0800ccf3 	.word	0x0800ccf3
 800cc64:	0800ccf3 	.word	0x0800ccf3
 800cc68:	0800ccf3 	.word	0x0800ccf3
 800cc6c:	0800ccf3 	.word	0x0800ccf3
 800cc70:	0800ccf3 	.word	0x0800ccf3
 800cc74:	0800ccf3 	.word	0x0800ccf3
 800cc78:	0800ccf3 	.word	0x0800ccf3
 800cc7c:	0800ccf3 	.word	0x0800ccf3
 800cc80:	0800ccf3 	.word	0x0800ccf3
 800cc84:	0800cce5 	.word	0x0800cce5
 800cc88:	2b40      	cmp	r3, #64	; 0x40
 800cc8a:	d02e      	beq.n	800ccea <UART_SetConfig+0xa36>
 800cc8c:	e031      	b.n	800ccf2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cc8e:	f7fa fddd 	bl	800784c <HAL_RCC_GetPCLK1Freq>
 800cc92:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cc94:	e033      	b.n	800ccfe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cc96:	f7fa fdef 	bl	8007878 <HAL_RCC_GetPCLK2Freq>
 800cc9a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cc9c:	e02f      	b.n	800ccfe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cc9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cca2:	4618      	mov	r0, r3
 800cca4:	f7fc fd9e 	bl	80097e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ccac:	e027      	b.n	800ccfe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ccae:	f107 0318 	add.w	r3, r7, #24
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	f7fc feea 	bl	8009a8c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ccb8:	69fb      	ldr	r3, [r7, #28]
 800ccba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ccbc:	e01f      	b.n	800ccfe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ccbe:	4b2d      	ldr	r3, [pc, #180]	; (800cd74 <UART_SetConfig+0xac0>)
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	f003 0320 	and.w	r3, r3, #32
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d009      	beq.n	800ccde <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ccca:	4b2a      	ldr	r3, [pc, #168]	; (800cd74 <UART_SetConfig+0xac0>)
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	08db      	lsrs	r3, r3, #3
 800ccd0:	f003 0303 	and.w	r3, r3, #3
 800ccd4:	4a28      	ldr	r2, [pc, #160]	; (800cd78 <UART_SetConfig+0xac4>)
 800ccd6:	fa22 f303 	lsr.w	r3, r2, r3
 800ccda:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ccdc:	e00f      	b.n	800ccfe <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800ccde:	4b26      	ldr	r3, [pc, #152]	; (800cd78 <UART_SetConfig+0xac4>)
 800cce0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cce2:	e00c      	b.n	800ccfe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cce4:	4b25      	ldr	r3, [pc, #148]	; (800cd7c <UART_SetConfig+0xac8>)
 800cce6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cce8:	e009      	b.n	800ccfe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ccea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ccee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ccf0:	e005      	b.n	800ccfe <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ccf6:	2301      	movs	r3, #1
 800ccf8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ccfc:	bf00      	nop
    }

    if (pclk != 0U)
 800ccfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d021      	beq.n	800cd48 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cd04:	697b      	ldr	r3, [r7, #20]
 800cd06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd08:	4a1d      	ldr	r2, [pc, #116]	; (800cd80 <UART_SetConfig+0xacc>)
 800cd0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cd0e:	461a      	mov	r2, r3
 800cd10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd12:	fbb3 f2f2 	udiv	r2, r3, r2
 800cd16:	697b      	ldr	r3, [r7, #20]
 800cd18:	685b      	ldr	r3, [r3, #4]
 800cd1a:	085b      	lsrs	r3, r3, #1
 800cd1c:	441a      	add	r2, r3
 800cd1e:	697b      	ldr	r3, [r7, #20]
 800cd20:	685b      	ldr	r3, [r3, #4]
 800cd22:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd26:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cd28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd2a:	2b0f      	cmp	r3, #15
 800cd2c:	d909      	bls.n	800cd42 <UART_SetConfig+0xa8e>
 800cd2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd34:	d205      	bcs.n	800cd42 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cd36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd38:	b29a      	uxth	r2, r3
 800cd3a:	697b      	ldr	r3, [r7, #20]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	60da      	str	r2, [r3, #12]
 800cd40:	e002      	b.n	800cd48 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800cd42:	2301      	movs	r3, #1
 800cd44:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cd48:	697b      	ldr	r3, [r7, #20]
 800cd4a:	2201      	movs	r2, #1
 800cd4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800cd50:	697b      	ldr	r3, [r7, #20]
 800cd52:	2201      	movs	r2, #1
 800cd54:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cd58:	697b      	ldr	r3, [r7, #20]
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800cd5e:	697b      	ldr	r3, [r7, #20]
 800cd60:	2200      	movs	r2, #0
 800cd62:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800cd64:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800cd68:	4618      	mov	r0, r3
 800cd6a:	3748      	adds	r7, #72	; 0x48
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cd72:	bf00      	nop
 800cd74:	58024400 	.word	0x58024400
 800cd78:	03d09000 	.word	0x03d09000
 800cd7c:	003d0900 	.word	0x003d0900
 800cd80:	0800f324 	.word	0x0800f324

0800cd84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cd84:	b480      	push	{r7}
 800cd86:	b083      	sub	sp, #12
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd90:	f003 0301 	and.w	r3, r3, #1
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d00a      	beq.n	800cdae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	685b      	ldr	r3, [r3, #4]
 800cd9e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	430a      	orrs	r2, r1
 800cdac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdb2:	f003 0302 	and.w	r3, r3, #2
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d00a      	beq.n	800cdd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	685b      	ldr	r3, [r3, #4]
 800cdc0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	430a      	orrs	r2, r1
 800cdce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdd4:	f003 0304 	and.w	r3, r3, #4
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d00a      	beq.n	800cdf2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	685b      	ldr	r3, [r3, #4]
 800cde2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	430a      	orrs	r2, r1
 800cdf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdf6:	f003 0308 	and.w	r3, r3, #8
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d00a      	beq.n	800ce14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	685b      	ldr	r3, [r3, #4]
 800ce04:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	430a      	orrs	r2, r1
 800ce12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce18:	f003 0310 	and.w	r3, r3, #16
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d00a      	beq.n	800ce36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	689b      	ldr	r3, [r3, #8]
 800ce26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	430a      	orrs	r2, r1
 800ce34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce3a:	f003 0320 	and.w	r3, r3, #32
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d00a      	beq.n	800ce58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	689b      	ldr	r3, [r3, #8]
 800ce48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	430a      	orrs	r2, r1
 800ce56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d01a      	beq.n	800ce9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	685b      	ldr	r3, [r3, #4]
 800ce6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	430a      	orrs	r2, r1
 800ce78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ce82:	d10a      	bne.n	800ce9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	685b      	ldr	r3, [r3, #4]
 800ce8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	430a      	orrs	r2, r1
 800ce98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d00a      	beq.n	800cebc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	685b      	ldr	r3, [r3, #4]
 800ceac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	430a      	orrs	r2, r1
 800ceba:	605a      	str	r2, [r3, #4]
  }
}
 800cebc:	bf00      	nop
 800cebe:	370c      	adds	r7, #12
 800cec0:	46bd      	mov	sp, r7
 800cec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec6:	4770      	bx	lr

0800cec8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b098      	sub	sp, #96	; 0x60
 800cecc:	af02      	add	r7, sp, #8
 800cece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	2200      	movs	r2, #0
 800ced4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ced8:	f7f6 f80a 	bl	8002ef0 <HAL_GetTick>
 800cedc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	f003 0308 	and.w	r3, r3, #8
 800cee8:	2b08      	cmp	r3, #8
 800ceea:	d12f      	bne.n	800cf4c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ceec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cef0:	9300      	str	r3, [sp, #0]
 800cef2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cef4:	2200      	movs	r2, #0
 800cef6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cefa:	6878      	ldr	r0, [r7, #4]
 800cefc:	f000 f88e 	bl	800d01c <UART_WaitOnFlagUntilTimeout>
 800cf00:	4603      	mov	r3, r0
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d022      	beq.n	800cf4c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf0e:	e853 3f00 	ldrex	r3, [r3]
 800cf12:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cf14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cf1a:	653b      	str	r3, [r7, #80]	; 0x50
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	461a      	mov	r2, r3
 800cf22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf24:	647b      	str	r3, [r7, #68]	; 0x44
 800cf26:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf28:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cf2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cf2c:	e841 2300 	strex	r3, r2, [r1]
 800cf30:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cf32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d1e6      	bne.n	800cf06 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	2220      	movs	r2, #32
 800cf3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	2200      	movs	r2, #0
 800cf44:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cf48:	2303      	movs	r3, #3
 800cf4a:	e063      	b.n	800d014 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	f003 0304 	and.w	r3, r3, #4
 800cf56:	2b04      	cmp	r3, #4
 800cf58:	d149      	bne.n	800cfee <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cf5a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cf5e:	9300      	str	r3, [sp, #0]
 800cf60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cf62:	2200      	movs	r2, #0
 800cf64:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800cf68:	6878      	ldr	r0, [r7, #4]
 800cf6a:	f000 f857 	bl	800d01c <UART_WaitOnFlagUntilTimeout>
 800cf6e:	4603      	mov	r3, r0
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d03c      	beq.n	800cfee <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf7c:	e853 3f00 	ldrex	r3, [r3]
 800cf80:	623b      	str	r3, [r7, #32]
   return(result);
 800cf82:	6a3b      	ldr	r3, [r7, #32]
 800cf84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cf88:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	461a      	mov	r2, r3
 800cf90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf92:	633b      	str	r3, [r7, #48]	; 0x30
 800cf94:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cf98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf9a:	e841 2300 	strex	r3, r2, [r1]
 800cf9e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cfa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d1e6      	bne.n	800cf74 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	3308      	adds	r3, #8
 800cfac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfae:	693b      	ldr	r3, [r7, #16]
 800cfb0:	e853 3f00 	ldrex	r3, [r3]
 800cfb4:	60fb      	str	r3, [r7, #12]
   return(result);
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	f023 0301 	bic.w	r3, r3, #1
 800cfbc:	64bb      	str	r3, [r7, #72]	; 0x48
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	3308      	adds	r3, #8
 800cfc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cfc6:	61fa      	str	r2, [r7, #28]
 800cfc8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfca:	69b9      	ldr	r1, [r7, #24]
 800cfcc:	69fa      	ldr	r2, [r7, #28]
 800cfce:	e841 2300 	strex	r3, r2, [r1]
 800cfd2:	617b      	str	r3, [r7, #20]
   return(result);
 800cfd4:	697b      	ldr	r3, [r7, #20]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d1e5      	bne.n	800cfa6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	2220      	movs	r2, #32
 800cfde:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	2200      	movs	r2, #0
 800cfe6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cfea:	2303      	movs	r3, #3
 800cfec:	e012      	b.n	800d014 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	2220      	movs	r2, #32
 800cff2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	2220      	movs	r2, #32
 800cffa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	2200      	movs	r2, #0
 800d002:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	2200      	movs	r2, #0
 800d008:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	2200      	movs	r2, #0
 800d00e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d012:	2300      	movs	r3, #0
}
 800d014:	4618      	mov	r0, r3
 800d016:	3758      	adds	r7, #88	; 0x58
 800d018:	46bd      	mov	sp, r7
 800d01a:	bd80      	pop	{r7, pc}

0800d01c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b084      	sub	sp, #16
 800d020:	af00      	add	r7, sp, #0
 800d022:	60f8      	str	r0, [r7, #12]
 800d024:	60b9      	str	r1, [r7, #8]
 800d026:	603b      	str	r3, [r7, #0]
 800d028:	4613      	mov	r3, r2
 800d02a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d02c:	e049      	b.n	800d0c2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d02e:	69bb      	ldr	r3, [r7, #24]
 800d030:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d034:	d045      	beq.n	800d0c2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d036:	f7f5 ff5b 	bl	8002ef0 <HAL_GetTick>
 800d03a:	4602      	mov	r2, r0
 800d03c:	683b      	ldr	r3, [r7, #0]
 800d03e:	1ad3      	subs	r3, r2, r3
 800d040:	69ba      	ldr	r2, [r7, #24]
 800d042:	429a      	cmp	r2, r3
 800d044:	d302      	bcc.n	800d04c <UART_WaitOnFlagUntilTimeout+0x30>
 800d046:	69bb      	ldr	r3, [r7, #24]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d101      	bne.n	800d050 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d04c:	2303      	movs	r3, #3
 800d04e:	e048      	b.n	800d0e2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	f003 0304 	and.w	r3, r3, #4
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d031      	beq.n	800d0c2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	69db      	ldr	r3, [r3, #28]
 800d064:	f003 0308 	and.w	r3, r3, #8
 800d068:	2b08      	cmp	r3, #8
 800d06a:	d110      	bne.n	800d08e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	2208      	movs	r2, #8
 800d072:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800d074:	68f8      	ldr	r0, [r7, #12]
 800d076:	f000 f95b 	bl	800d330 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	2208      	movs	r2, #8
 800d07e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	2200      	movs	r2, #0
 800d086:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800d08a:	2301      	movs	r3, #1
 800d08c:	e029      	b.n	800d0e2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	69db      	ldr	r3, [r3, #28]
 800d094:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d098:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d09c:	d111      	bne.n	800d0c2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d0a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d0a8:	68f8      	ldr	r0, [r7, #12]
 800d0aa:	f000 f941 	bl	800d330 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	2220      	movs	r2, #32
 800d0b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	2200      	movs	r2, #0
 800d0ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800d0be:	2303      	movs	r3, #3
 800d0c0:	e00f      	b.n	800d0e2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	69da      	ldr	r2, [r3, #28]
 800d0c8:	68bb      	ldr	r3, [r7, #8]
 800d0ca:	4013      	ands	r3, r2
 800d0cc:	68ba      	ldr	r2, [r7, #8]
 800d0ce:	429a      	cmp	r2, r3
 800d0d0:	bf0c      	ite	eq
 800d0d2:	2301      	moveq	r3, #1
 800d0d4:	2300      	movne	r3, #0
 800d0d6:	b2db      	uxtb	r3, r3
 800d0d8:	461a      	mov	r2, r3
 800d0da:	79fb      	ldrb	r3, [r7, #7]
 800d0dc:	429a      	cmp	r2, r3
 800d0de:	d0a6      	beq.n	800d02e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d0e0:	2300      	movs	r3, #0
}
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	3710      	adds	r7, #16
 800d0e6:	46bd      	mov	sp, r7
 800d0e8:	bd80      	pop	{r7, pc}
	...

0800d0ec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d0ec:	b480      	push	{r7}
 800d0ee:	b0a3      	sub	sp, #140	; 0x8c
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	60f8      	str	r0, [r7, #12]
 800d0f4:	60b9      	str	r1, [r7, #8]
 800d0f6:	4613      	mov	r3, r2
 800d0f8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	68ba      	ldr	r2, [r7, #8]
 800d0fe:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	88fa      	ldrh	r2, [r7, #6]
 800d104:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	88fa      	ldrh	r2, [r7, #6]
 800d10c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	2200      	movs	r2, #0
 800d114:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	689b      	ldr	r3, [r3, #8]
 800d11a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d11e:	d10e      	bne.n	800d13e <UART_Start_Receive_IT+0x52>
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	691b      	ldr	r3, [r3, #16]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d105      	bne.n	800d134 <UART_Start_Receive_IT+0x48>
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800d12e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d132:	e02d      	b.n	800d190 <UART_Start_Receive_IT+0xa4>
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	22ff      	movs	r2, #255	; 0xff
 800d138:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d13c:	e028      	b.n	800d190 <UART_Start_Receive_IT+0xa4>
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	689b      	ldr	r3, [r3, #8]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d10d      	bne.n	800d162 <UART_Start_Receive_IT+0x76>
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	691b      	ldr	r3, [r3, #16]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d104      	bne.n	800d158 <UART_Start_Receive_IT+0x6c>
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	22ff      	movs	r2, #255	; 0xff
 800d152:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d156:	e01b      	b.n	800d190 <UART_Start_Receive_IT+0xa4>
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	227f      	movs	r2, #127	; 0x7f
 800d15c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d160:	e016      	b.n	800d190 <UART_Start_Receive_IT+0xa4>
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	689b      	ldr	r3, [r3, #8]
 800d166:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d16a:	d10d      	bne.n	800d188 <UART_Start_Receive_IT+0x9c>
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	691b      	ldr	r3, [r3, #16]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d104      	bne.n	800d17e <UART_Start_Receive_IT+0x92>
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	227f      	movs	r2, #127	; 0x7f
 800d178:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d17c:	e008      	b.n	800d190 <UART_Start_Receive_IT+0xa4>
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	223f      	movs	r2, #63	; 0x3f
 800d182:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d186:	e003      	b.n	800d190 <UART_Start_Receive_IT+0xa4>
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	2200      	movs	r2, #0
 800d18c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	2200      	movs	r2, #0
 800d194:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	2222      	movs	r2, #34	; 0x22
 800d19c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	3308      	adds	r3, #8
 800d1a6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d1aa:	e853 3f00 	ldrex	r3, [r3]
 800d1ae:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800d1b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d1b2:	f043 0301 	orr.w	r3, r3, #1
 800d1b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	3308      	adds	r3, #8
 800d1c0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800d1c4:	673a      	str	r2, [r7, #112]	; 0x70
 800d1c6:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1c8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800d1ca:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d1cc:	e841 2300 	strex	r3, r2, [r1]
 800d1d0:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800d1d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d1e3      	bne.n	800d1a0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d1dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d1e0:	d14f      	bne.n	800d282 <UART_Start_Receive_IT+0x196>
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d1e8:	88fa      	ldrh	r2, [r7, #6]
 800d1ea:	429a      	cmp	r2, r3
 800d1ec:	d349      	bcc.n	800d282 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	689b      	ldr	r3, [r3, #8]
 800d1f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d1f6:	d107      	bne.n	800d208 <UART_Start_Receive_IT+0x11c>
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	691b      	ldr	r3, [r3, #16]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d103      	bne.n	800d208 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	4a47      	ldr	r2, [pc, #284]	; (800d320 <UART_Start_Receive_IT+0x234>)
 800d204:	675a      	str	r2, [r3, #116]	; 0x74
 800d206:	e002      	b.n	800d20e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	4a46      	ldr	r2, [pc, #280]	; (800d324 <UART_Start_Receive_IT+0x238>)
 800d20c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	691b      	ldr	r3, [r3, #16]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d01a      	beq.n	800d24c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d21c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d21e:	e853 3f00 	ldrex	r3, [r3]
 800d222:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d224:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d226:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d22a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	461a      	mov	r2, r3
 800d234:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d238:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d23a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d23c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d23e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d240:	e841 2300 	strex	r3, r2, [r1]
 800d244:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d246:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d1e4      	bne.n	800d216 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	3308      	adds	r3, #8
 800d252:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d256:	e853 3f00 	ldrex	r3, [r3]
 800d25a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d25c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d25e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d262:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	3308      	adds	r3, #8
 800d26a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800d26c:	64ba      	str	r2, [r7, #72]	; 0x48
 800d26e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d270:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d272:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d274:	e841 2300 	strex	r3, r2, [r1]
 800d278:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d27a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d1e5      	bne.n	800d24c <UART_Start_Receive_IT+0x160>
 800d280:	e046      	b.n	800d310 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	689b      	ldr	r3, [r3, #8]
 800d286:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d28a:	d107      	bne.n	800d29c <UART_Start_Receive_IT+0x1b0>
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	691b      	ldr	r3, [r3, #16]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d103      	bne.n	800d29c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	4a24      	ldr	r2, [pc, #144]	; (800d328 <UART_Start_Receive_IT+0x23c>)
 800d298:	675a      	str	r2, [r3, #116]	; 0x74
 800d29a:	e002      	b.n	800d2a2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	4a23      	ldr	r2, [pc, #140]	; (800d32c <UART_Start_Receive_IT+0x240>)
 800d2a0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	691b      	ldr	r3, [r3, #16]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d019      	beq.n	800d2de <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2b2:	e853 3f00 	ldrex	r3, [r3]
 800d2b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2ba:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800d2be:	677b      	str	r3, [r7, #116]	; 0x74
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	461a      	mov	r2, r3
 800d2c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d2c8:	637b      	str	r3, [r7, #52]	; 0x34
 800d2ca:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d2ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d2d0:	e841 2300 	strex	r3, r2, [r1]
 800d2d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d2d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d1e6      	bne.n	800d2aa <UART_Start_Receive_IT+0x1be>
 800d2dc:	e018      	b.n	800d310 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2e4:	697b      	ldr	r3, [r7, #20]
 800d2e6:	e853 3f00 	ldrex	r3, [r3]
 800d2ea:	613b      	str	r3, [r7, #16]
   return(result);
 800d2ec:	693b      	ldr	r3, [r7, #16]
 800d2ee:	f043 0320 	orr.w	r3, r3, #32
 800d2f2:	67bb      	str	r3, [r7, #120]	; 0x78
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	461a      	mov	r2, r3
 800d2fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d2fc:	623b      	str	r3, [r7, #32]
 800d2fe:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d300:	69f9      	ldr	r1, [r7, #28]
 800d302:	6a3a      	ldr	r2, [r7, #32]
 800d304:	e841 2300 	strex	r3, r2, [r1]
 800d308:	61bb      	str	r3, [r7, #24]
   return(result);
 800d30a:	69bb      	ldr	r3, [r7, #24]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d1e6      	bne.n	800d2de <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800d310:	2300      	movs	r3, #0
}
 800d312:	4618      	mov	r0, r3
 800d314:	378c      	adds	r7, #140	; 0x8c
 800d316:	46bd      	mov	sp, r7
 800d318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d31c:	4770      	bx	lr
 800d31e:	bf00      	nop
 800d320:	0800db51 	.word	0x0800db51
 800d324:	0800d7f1 	.word	0x0800d7f1
 800d328:	0800d639 	.word	0x0800d639
 800d32c:	0800d481 	.word	0x0800d481

0800d330 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d330:	b480      	push	{r7}
 800d332:	b095      	sub	sp, #84	; 0x54
 800d334:	af00      	add	r7, sp, #0
 800d336:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d33e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d340:	e853 3f00 	ldrex	r3, [r3]
 800d344:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d348:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d34c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	461a      	mov	r2, r3
 800d354:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d356:	643b      	str	r3, [r7, #64]	; 0x40
 800d358:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d35a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d35c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d35e:	e841 2300 	strex	r3, r2, [r1]
 800d362:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d366:	2b00      	cmp	r3, #0
 800d368:	d1e6      	bne.n	800d338 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	3308      	adds	r3, #8
 800d370:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d372:	6a3b      	ldr	r3, [r7, #32]
 800d374:	e853 3f00 	ldrex	r3, [r3]
 800d378:	61fb      	str	r3, [r7, #28]
   return(result);
 800d37a:	69fa      	ldr	r2, [r7, #28]
 800d37c:	4b1e      	ldr	r3, [pc, #120]	; (800d3f8 <UART_EndRxTransfer+0xc8>)
 800d37e:	4013      	ands	r3, r2
 800d380:	64bb      	str	r3, [r7, #72]	; 0x48
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	3308      	adds	r3, #8
 800d388:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d38a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d38c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d38e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d390:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d392:	e841 2300 	strex	r3, r2, [r1]
 800d396:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d1e5      	bne.n	800d36a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d3a2:	2b01      	cmp	r3, #1
 800d3a4:	d118      	bne.n	800d3d8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	e853 3f00 	ldrex	r3, [r3]
 800d3b2:	60bb      	str	r3, [r7, #8]
   return(result);
 800d3b4:	68bb      	ldr	r3, [r7, #8]
 800d3b6:	f023 0310 	bic.w	r3, r3, #16
 800d3ba:	647b      	str	r3, [r7, #68]	; 0x44
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	461a      	mov	r2, r3
 800d3c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d3c4:	61bb      	str	r3, [r7, #24]
 800d3c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3c8:	6979      	ldr	r1, [r7, #20]
 800d3ca:	69ba      	ldr	r2, [r7, #24]
 800d3cc:	e841 2300 	strex	r3, r2, [r1]
 800d3d0:	613b      	str	r3, [r7, #16]
   return(result);
 800d3d2:	693b      	ldr	r3, [r7, #16]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d1e6      	bne.n	800d3a6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	2220      	movs	r2, #32
 800d3dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	2200      	movs	r2, #0
 800d3ea:	675a      	str	r2, [r3, #116]	; 0x74
}
 800d3ec:	bf00      	nop
 800d3ee:	3754      	adds	r7, #84	; 0x54
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f6:	4770      	bx	lr
 800d3f8:	effffffe 	.word	0xeffffffe

0800d3fc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b084      	sub	sp, #16
 800d400:	af00      	add	r7, sp, #0
 800d402:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d408:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	2200      	movs	r2, #0
 800d40e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	2200      	movs	r2, #0
 800d416:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d41a:	68f8      	ldr	r0, [r7, #12]
 800d41c:	f7fe ff34 	bl	800c288 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d420:	bf00      	nop
 800d422:	3710      	adds	r7, #16
 800d424:	46bd      	mov	sp, r7
 800d426:	bd80      	pop	{r7, pc}

0800d428 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d428:	b580      	push	{r7, lr}
 800d42a:	b088      	sub	sp, #32
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	e853 3f00 	ldrex	r3, [r3]
 800d43c:	60bb      	str	r3, [r7, #8]
   return(result);
 800d43e:	68bb      	ldr	r3, [r7, #8]
 800d440:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d444:	61fb      	str	r3, [r7, #28]
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	461a      	mov	r2, r3
 800d44c:	69fb      	ldr	r3, [r7, #28]
 800d44e:	61bb      	str	r3, [r7, #24]
 800d450:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d452:	6979      	ldr	r1, [r7, #20]
 800d454:	69ba      	ldr	r2, [r7, #24]
 800d456:	e841 2300 	strex	r3, r2, [r1]
 800d45a:	613b      	str	r3, [r7, #16]
   return(result);
 800d45c:	693b      	ldr	r3, [r7, #16]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d1e6      	bne.n	800d430 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	2220      	movs	r2, #32
 800d466:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	2200      	movs	r2, #0
 800d46e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d470:	6878      	ldr	r0, [r7, #4]
 800d472:	f7fe feff 	bl	800c274 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d476:	bf00      	nop
 800d478:	3720      	adds	r7, #32
 800d47a:	46bd      	mov	sp, r7
 800d47c:	bd80      	pop	{r7, pc}
	...

0800d480 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d480:	b580      	push	{r7, lr}
 800d482:	b09c      	sub	sp, #112	; 0x70
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d48e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d498:	2b22      	cmp	r3, #34	; 0x22
 800d49a:	f040 80be 	bne.w	800d61a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4a4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d4a8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800d4ac:	b2d9      	uxtb	r1, r3
 800d4ae:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800d4b2:	b2da      	uxtb	r2, r3
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d4b8:	400a      	ands	r2, r1
 800d4ba:	b2d2      	uxtb	r2, r2
 800d4bc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d4c2:	1c5a      	adds	r2, r3, #1
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d4ce:	b29b      	uxth	r3, r3
 800d4d0:	3b01      	subs	r3, #1
 800d4d2:	b29a      	uxth	r2, r3
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d4e0:	b29b      	uxth	r3, r3
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	f040 80a1 	bne.w	800d62a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4f0:	e853 3f00 	ldrex	r3, [r3]
 800d4f4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d4f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d4f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d4fc:	66bb      	str	r3, [r7, #104]	; 0x68
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	461a      	mov	r2, r3
 800d504:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d506:	65bb      	str	r3, [r7, #88]	; 0x58
 800d508:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d50a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d50c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d50e:	e841 2300 	strex	r3, r2, [r1]
 800d512:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d514:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d516:	2b00      	cmp	r3, #0
 800d518:	d1e6      	bne.n	800d4e8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	3308      	adds	r3, #8
 800d520:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d524:	e853 3f00 	ldrex	r3, [r3]
 800d528:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d52a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d52c:	f023 0301 	bic.w	r3, r3, #1
 800d530:	667b      	str	r3, [r7, #100]	; 0x64
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	3308      	adds	r3, #8
 800d538:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d53a:	647a      	str	r2, [r7, #68]	; 0x44
 800d53c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d53e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d540:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d542:	e841 2300 	strex	r3, r2, [r1]
 800d546:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d548:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d1e5      	bne.n	800d51a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	2220      	movs	r2, #32
 800d552:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	2200      	movs	r2, #0
 800d55a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	2200      	movs	r2, #0
 800d560:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	4a33      	ldr	r2, [pc, #204]	; (800d634 <UART_RxISR_8BIT+0x1b4>)
 800d568:	4293      	cmp	r3, r2
 800d56a:	d01f      	beq.n	800d5ac <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	685b      	ldr	r3, [r3, #4]
 800d572:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d576:	2b00      	cmp	r3, #0
 800d578:	d018      	beq.n	800d5ac <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d582:	e853 3f00 	ldrex	r3, [r3]
 800d586:	623b      	str	r3, [r7, #32]
   return(result);
 800d588:	6a3b      	ldr	r3, [r7, #32]
 800d58a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d58e:	663b      	str	r3, [r7, #96]	; 0x60
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	461a      	mov	r2, r3
 800d596:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d598:	633b      	str	r3, [r7, #48]	; 0x30
 800d59a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d59c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d59e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d5a0:	e841 2300 	strex	r3, r2, [r1]
 800d5a4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d5a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d1e6      	bne.n	800d57a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d5b0:	2b01      	cmp	r3, #1
 800d5b2:	d12e      	bne.n	800d612 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5c0:	693b      	ldr	r3, [r7, #16]
 800d5c2:	e853 3f00 	ldrex	r3, [r3]
 800d5c6:	60fb      	str	r3, [r7, #12]
   return(result);
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	f023 0310 	bic.w	r3, r3, #16
 800d5ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	461a      	mov	r2, r3
 800d5d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d5d8:	61fb      	str	r3, [r7, #28]
 800d5da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5dc:	69b9      	ldr	r1, [r7, #24]
 800d5de:	69fa      	ldr	r2, [r7, #28]
 800d5e0:	e841 2300 	strex	r3, r2, [r1]
 800d5e4:	617b      	str	r3, [r7, #20]
   return(result);
 800d5e6:	697b      	ldr	r3, [r7, #20]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d1e6      	bne.n	800d5ba <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	69db      	ldr	r3, [r3, #28]
 800d5f2:	f003 0310 	and.w	r3, r3, #16
 800d5f6:	2b10      	cmp	r3, #16
 800d5f8:	d103      	bne.n	800d602 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	2210      	movs	r2, #16
 800d600:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d608:	4619      	mov	r1, r3
 800d60a:	6878      	ldr	r0, [r7, #4]
 800d60c:	f7fe fe46 	bl	800c29c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d610:	e00b      	b.n	800d62a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800d612:	6878      	ldr	r0, [r7, #4]
 800d614:	f7f4 fa62 	bl	8001adc <HAL_UART_RxCpltCallback>
}
 800d618:	e007      	b.n	800d62a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	699a      	ldr	r2, [r3, #24]
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	f042 0208 	orr.w	r2, r2, #8
 800d628:	619a      	str	r2, [r3, #24]
}
 800d62a:	bf00      	nop
 800d62c:	3770      	adds	r7, #112	; 0x70
 800d62e:	46bd      	mov	sp, r7
 800d630:	bd80      	pop	{r7, pc}
 800d632:	bf00      	nop
 800d634:	58000c00 	.word	0x58000c00

0800d638 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d638:	b580      	push	{r7, lr}
 800d63a:	b09c      	sub	sp, #112	; 0x70
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d646:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d650:	2b22      	cmp	r3, #34	; 0x22
 800d652:	f040 80be 	bne.w	800d7d2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d65c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d664:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800d666:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800d66a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800d66e:	4013      	ands	r3, r2
 800d670:	b29a      	uxth	r2, r3
 800d672:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d674:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d67a:	1c9a      	adds	r2, r3, #2
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d686:	b29b      	uxth	r3, r3
 800d688:	3b01      	subs	r3, #1
 800d68a:	b29a      	uxth	r2, r3
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d698:	b29b      	uxth	r3, r3
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	f040 80a1 	bne.w	800d7e2 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d6a8:	e853 3f00 	ldrex	r3, [r3]
 800d6ac:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800d6ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d6b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d6b4:	667b      	str	r3, [r7, #100]	; 0x64
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	461a      	mov	r2, r3
 800d6bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d6be:	657b      	str	r3, [r7, #84]	; 0x54
 800d6c0:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6c2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d6c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d6c6:	e841 2300 	strex	r3, r2, [r1]
 800d6ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d6cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d1e6      	bne.n	800d6a0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	3308      	adds	r3, #8
 800d6d8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6dc:	e853 3f00 	ldrex	r3, [r3]
 800d6e0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d6e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6e4:	f023 0301 	bic.w	r3, r3, #1
 800d6e8:	663b      	str	r3, [r7, #96]	; 0x60
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	3308      	adds	r3, #8
 800d6f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d6f2:	643a      	str	r2, [r7, #64]	; 0x40
 800d6f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6f6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d6f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d6fa:	e841 2300 	strex	r3, r2, [r1]
 800d6fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d702:	2b00      	cmp	r3, #0
 800d704:	d1e5      	bne.n	800d6d2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	2220      	movs	r2, #32
 800d70a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	2200      	movs	r2, #0
 800d712:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	2200      	movs	r2, #0
 800d718:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	4a33      	ldr	r2, [pc, #204]	; (800d7ec <UART_RxISR_16BIT+0x1b4>)
 800d720:	4293      	cmp	r3, r2
 800d722:	d01f      	beq.n	800d764 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	685b      	ldr	r3, [r3, #4]
 800d72a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d018      	beq.n	800d764 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d738:	6a3b      	ldr	r3, [r7, #32]
 800d73a:	e853 3f00 	ldrex	r3, [r3]
 800d73e:	61fb      	str	r3, [r7, #28]
   return(result);
 800d740:	69fb      	ldr	r3, [r7, #28]
 800d742:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d746:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	461a      	mov	r2, r3
 800d74e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d750:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d752:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d754:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d756:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d758:	e841 2300 	strex	r3, r2, [r1]
 800d75c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d75e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d760:	2b00      	cmp	r3, #0
 800d762:	d1e6      	bne.n	800d732 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d768:	2b01      	cmp	r3, #1
 800d76a:	d12e      	bne.n	800d7ca <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	2200      	movs	r2, #0
 800d770:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	e853 3f00 	ldrex	r3, [r3]
 800d77e:	60bb      	str	r3, [r7, #8]
   return(result);
 800d780:	68bb      	ldr	r3, [r7, #8]
 800d782:	f023 0310 	bic.w	r3, r3, #16
 800d786:	65bb      	str	r3, [r7, #88]	; 0x58
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	461a      	mov	r2, r3
 800d78e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d790:	61bb      	str	r3, [r7, #24]
 800d792:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d794:	6979      	ldr	r1, [r7, #20]
 800d796:	69ba      	ldr	r2, [r7, #24]
 800d798:	e841 2300 	strex	r3, r2, [r1]
 800d79c:	613b      	str	r3, [r7, #16]
   return(result);
 800d79e:	693b      	ldr	r3, [r7, #16]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d1e6      	bne.n	800d772 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	69db      	ldr	r3, [r3, #28]
 800d7aa:	f003 0310 	and.w	r3, r3, #16
 800d7ae:	2b10      	cmp	r3, #16
 800d7b0:	d103      	bne.n	800d7ba <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	2210      	movs	r2, #16
 800d7b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d7c0:	4619      	mov	r1, r3
 800d7c2:	6878      	ldr	r0, [r7, #4]
 800d7c4:	f7fe fd6a 	bl	800c29c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d7c8:	e00b      	b.n	800d7e2 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800d7ca:	6878      	ldr	r0, [r7, #4]
 800d7cc:	f7f4 f986 	bl	8001adc <HAL_UART_RxCpltCallback>
}
 800d7d0:	e007      	b.n	800d7e2 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	699a      	ldr	r2, [r3, #24]
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	f042 0208 	orr.w	r2, r2, #8
 800d7e0:	619a      	str	r2, [r3, #24]
}
 800d7e2:	bf00      	nop
 800d7e4:	3770      	adds	r7, #112	; 0x70
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	bd80      	pop	{r7, pc}
 800d7ea:	bf00      	nop
 800d7ec:	58000c00 	.word	0x58000c00

0800d7f0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b0ac      	sub	sp, #176	; 0xb0
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d7fe:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	69db      	ldr	r3, [r3, #28]
 800d808:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	689b      	ldr	r3, [r3, #8]
 800d81c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d826:	2b22      	cmp	r3, #34	; 0x22
 800d828:	f040 8180 	bne.w	800db2c <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d832:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d836:	e123      	b.n	800da80 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d83e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d842:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800d846:	b2d9      	uxtb	r1, r3
 800d848:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800d84c:	b2da      	uxtb	r2, r3
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d852:	400a      	ands	r2, r1
 800d854:	b2d2      	uxtb	r2, r2
 800d856:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d85c:	1c5a      	adds	r2, r3, #1
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d868:	b29b      	uxth	r3, r3
 800d86a:	3b01      	subs	r3, #1
 800d86c:	b29a      	uxth	r2, r3
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	69db      	ldr	r3, [r3, #28]
 800d87a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d87e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d882:	f003 0307 	and.w	r3, r3, #7
 800d886:	2b00      	cmp	r3, #0
 800d888:	d053      	beq.n	800d932 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d88a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d88e:	f003 0301 	and.w	r3, r3, #1
 800d892:	2b00      	cmp	r3, #0
 800d894:	d011      	beq.n	800d8ba <UART_RxISR_8BIT_FIFOEN+0xca>
 800d896:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d89a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d00b      	beq.n	800d8ba <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	2201      	movs	r2, #1
 800d8a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d8b0:	f043 0201 	orr.w	r2, r3, #1
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d8ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d8be:	f003 0302 	and.w	r3, r3, #2
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d011      	beq.n	800d8ea <UART_RxISR_8BIT_FIFOEN+0xfa>
 800d8c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d8ca:	f003 0301 	and.w	r3, r3, #1
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d00b      	beq.n	800d8ea <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	2202      	movs	r2, #2
 800d8d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d8e0:	f043 0204 	orr.w	r2, r3, #4
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d8ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d8ee:	f003 0304 	and.w	r3, r3, #4
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d011      	beq.n	800d91a <UART_RxISR_8BIT_FIFOEN+0x12a>
 800d8f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d8fa:	f003 0301 	and.w	r3, r3, #1
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d00b      	beq.n	800d91a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	2204      	movs	r2, #4
 800d908:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d910:	f043 0202 	orr.w	r2, r3, #2
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d920:	2b00      	cmp	r3, #0
 800d922:	d006      	beq.n	800d932 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d924:	6878      	ldr	r0, [r7, #4]
 800d926:	f7fe fcaf 	bl	800c288 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	2200      	movs	r2, #0
 800d92e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d938:	b29b      	uxth	r3, r3
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	f040 80a0 	bne.w	800da80 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d946:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d948:	e853 3f00 	ldrex	r3, [r3]
 800d94c:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800d94e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d950:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d954:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	461a      	mov	r2, r3
 800d95e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d962:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d964:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d966:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800d968:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800d96a:	e841 2300 	strex	r3, r2, [r1]
 800d96e:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800d970:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d972:	2b00      	cmp	r3, #0
 800d974:	d1e4      	bne.n	800d940 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	3308      	adds	r3, #8
 800d97c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d97e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d980:	e853 3f00 	ldrex	r3, [r3]
 800d984:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800d986:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d988:	4b6e      	ldr	r3, [pc, #440]	; (800db44 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800d98a:	4013      	ands	r3, r2
 800d98c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	3308      	adds	r3, #8
 800d996:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d99a:	66ba      	str	r2, [r7, #104]	; 0x68
 800d99c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d99e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800d9a0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d9a2:	e841 2300 	strex	r3, r2, [r1]
 800d9a6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800d9a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d1e3      	bne.n	800d976 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	2220      	movs	r2, #32
 800d9b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	2200      	movs	r2, #0
 800d9ba:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	2200      	movs	r2, #0
 800d9c0:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	4a60      	ldr	r2, [pc, #384]	; (800db48 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800d9c8:	4293      	cmp	r3, r2
 800d9ca:	d021      	beq.n	800da10 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	685b      	ldr	r3, [r3, #4]
 800d9d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d01a      	beq.n	800da10 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d9e2:	e853 3f00 	ldrex	r3, [r3]
 800d9e6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800d9e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d9ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d9ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	461a      	mov	r2, r3
 800d9f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d9fc:	657b      	str	r3, [r7, #84]	; 0x54
 800d9fe:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da00:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800da02:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800da04:	e841 2300 	strex	r3, r2, [r1]
 800da08:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800da0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d1e4      	bne.n	800d9da <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da14:	2b01      	cmp	r3, #1
 800da16:	d130      	bne.n	800da7a <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	2200      	movs	r2, #0
 800da1c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da26:	e853 3f00 	ldrex	r3, [r3]
 800da2a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800da2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da2e:	f023 0310 	bic.w	r3, r3, #16
 800da32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	461a      	mov	r2, r3
 800da3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800da40:	643b      	str	r3, [r7, #64]	; 0x40
 800da42:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da44:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800da46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800da48:	e841 2300 	strex	r3, r2, [r1]
 800da4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800da4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da50:	2b00      	cmp	r3, #0
 800da52:	d1e4      	bne.n	800da1e <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	69db      	ldr	r3, [r3, #28]
 800da5a:	f003 0310 	and.w	r3, r3, #16
 800da5e:	2b10      	cmp	r3, #16
 800da60:	d103      	bne.n	800da6a <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	2210      	movs	r2, #16
 800da68:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800da70:	4619      	mov	r1, r3
 800da72:	6878      	ldr	r0, [r7, #4]
 800da74:	f7fe fc12 	bl	800c29c <HAL_UARTEx_RxEventCallback>
 800da78:	e002      	b.n	800da80 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800da7a:	6878      	ldr	r0, [r7, #4]
 800da7c:	f7f4 f82e 	bl	8001adc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800da80:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800da84:	2b00      	cmp	r3, #0
 800da86:	d006      	beq.n	800da96 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800da88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800da8c:	f003 0320 	and.w	r3, r3, #32
 800da90:	2b00      	cmp	r3, #0
 800da92:	f47f aed1 	bne.w	800d838 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800da9c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800daa0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d049      	beq.n	800db3c <UART_RxISR_8BIT_FIFOEN+0x34c>
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800daae:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800dab2:	429a      	cmp	r2, r3
 800dab4:	d242      	bcs.n	800db3c <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	3308      	adds	r3, #8
 800dabc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dabe:	6a3b      	ldr	r3, [r7, #32]
 800dac0:	e853 3f00 	ldrex	r3, [r3]
 800dac4:	61fb      	str	r3, [r7, #28]
   return(result);
 800dac6:	69fb      	ldr	r3, [r7, #28]
 800dac8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dacc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	3308      	adds	r3, #8
 800dad6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800dada:	62fa      	str	r2, [r7, #44]	; 0x2c
 800dadc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dade:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dae0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dae2:	e841 2300 	strex	r3, r2, [r1]
 800dae6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daea:	2b00      	cmp	r3, #0
 800daec:	d1e3      	bne.n	800dab6 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	4a16      	ldr	r2, [pc, #88]	; (800db4c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800daf2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	e853 3f00 	ldrex	r3, [r3]
 800db00:	60bb      	str	r3, [r7, #8]
   return(result);
 800db02:	68bb      	ldr	r3, [r7, #8]
 800db04:	f043 0320 	orr.w	r3, r3, #32
 800db08:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	461a      	mov	r2, r3
 800db12:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800db16:	61bb      	str	r3, [r7, #24]
 800db18:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db1a:	6979      	ldr	r1, [r7, #20]
 800db1c:	69ba      	ldr	r2, [r7, #24]
 800db1e:	e841 2300 	strex	r3, r2, [r1]
 800db22:	613b      	str	r3, [r7, #16]
   return(result);
 800db24:	693b      	ldr	r3, [r7, #16]
 800db26:	2b00      	cmp	r3, #0
 800db28:	d1e4      	bne.n	800daf4 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800db2a:	e007      	b.n	800db3c <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	699a      	ldr	r2, [r3, #24]
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	f042 0208 	orr.w	r2, r2, #8
 800db3a:	619a      	str	r2, [r3, #24]
}
 800db3c:	bf00      	nop
 800db3e:	37b0      	adds	r7, #176	; 0xb0
 800db40:	46bd      	mov	sp, r7
 800db42:	bd80      	pop	{r7, pc}
 800db44:	effffffe 	.word	0xeffffffe
 800db48:	58000c00 	.word	0x58000c00
 800db4c:	0800d481 	.word	0x0800d481

0800db50 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800db50:	b580      	push	{r7, lr}
 800db52:	b0ae      	sub	sp, #184	; 0xb8
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800db5e:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	69db      	ldr	r3, [r3, #28]
 800db68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	689b      	ldr	r3, [r3, #8]
 800db7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800db86:	2b22      	cmp	r3, #34	; 0x22
 800db88:	f040 8184 	bne.w	800de94 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800db92:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800db96:	e127      	b.n	800dde8 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db9e:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dba6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800dbaa:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800dbae:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800dbb2:	4013      	ands	r3, r2
 800dbb4:	b29a      	uxth	r2, r3
 800dbb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800dbba:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dbc0:	1c9a      	adds	r2, r3, #2
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dbcc:	b29b      	uxth	r3, r3
 800dbce:	3b01      	subs	r3, #1
 800dbd0:	b29a      	uxth	r2, r3
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	69db      	ldr	r3, [r3, #28]
 800dbde:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800dbe2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dbe6:	f003 0307 	and.w	r3, r3, #7
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d053      	beq.n	800dc96 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800dbee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dbf2:	f003 0301 	and.w	r3, r3, #1
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d011      	beq.n	800dc1e <UART_RxISR_16BIT_FIFOEN+0xce>
 800dbfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800dbfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d00b      	beq.n	800dc1e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	2201      	movs	r2, #1
 800dc0c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dc14:	f043 0201 	orr.w	r2, r3, #1
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dc1e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dc22:	f003 0302 	and.w	r3, r3, #2
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d011      	beq.n	800dc4e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800dc2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800dc2e:	f003 0301 	and.w	r3, r3, #1
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d00b      	beq.n	800dc4e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	2202      	movs	r2, #2
 800dc3c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dc44:	f043 0204 	orr.w	r2, r3, #4
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dc4e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dc52:	f003 0304 	and.w	r3, r3, #4
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d011      	beq.n	800dc7e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800dc5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800dc5e:	f003 0301 	and.w	r3, r3, #1
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d00b      	beq.n	800dc7e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	2204      	movs	r2, #4
 800dc6c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dc74:	f043 0202 	orr.w	r2, r3, #2
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d006      	beq.n	800dc96 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800dc88:	6878      	ldr	r0, [r7, #4]
 800dc8a:	f7fe fafd 	bl	800c288 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	2200      	movs	r2, #0
 800dc92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dc9c:	b29b      	uxth	r3, r3
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	f040 80a2 	bne.w	800dde8 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcaa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dcac:	e853 3f00 	ldrex	r3, [r3]
 800dcb0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800dcb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dcb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dcb8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	461a      	mov	r2, r3
 800dcc2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800dcc6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800dcca:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dccc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800dcce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800dcd2:	e841 2300 	strex	r3, r2, [r1]
 800dcd6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800dcd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d1e2      	bne.n	800dca4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	3308      	adds	r3, #8
 800dce4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dce6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dce8:	e853 3f00 	ldrex	r3, [r3]
 800dcec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800dcee:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800dcf0:	4b6e      	ldr	r3, [pc, #440]	; (800deac <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800dcf2:	4013      	ands	r3, r2
 800dcf4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	3308      	adds	r3, #8
 800dcfe:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800dd02:	66fa      	str	r2, [r7, #108]	; 0x6c
 800dd04:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd06:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800dd08:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800dd0a:	e841 2300 	strex	r3, r2, [r1]
 800dd0e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800dd10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d1e3      	bne.n	800dcde <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	2220      	movs	r2, #32
 800dd1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	2200      	movs	r2, #0
 800dd22:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	2200      	movs	r2, #0
 800dd28:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	4a60      	ldr	r2, [pc, #384]	; (800deb0 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800dd30:	4293      	cmp	r3, r2
 800dd32:	d021      	beq.n	800dd78 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	685b      	ldr	r3, [r3, #4]
 800dd3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d01a      	beq.n	800dd78 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd4a:	e853 3f00 	ldrex	r3, [r3]
 800dd4e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800dd50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd52:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800dd56:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	461a      	mov	r2, r3
 800dd60:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dd64:	65bb      	str	r3, [r7, #88]	; 0x58
 800dd66:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd68:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800dd6a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800dd6c:	e841 2300 	strex	r3, r2, [r1]
 800dd70:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800dd72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d1e4      	bne.n	800dd42 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd7c:	2b01      	cmp	r3, #1
 800dd7e:	d130      	bne.n	800dde2 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	2200      	movs	r2, #0
 800dd84:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd8e:	e853 3f00 	ldrex	r3, [r3]
 800dd92:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800dd94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd96:	f023 0310 	bic.w	r3, r3, #16
 800dd9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	461a      	mov	r2, r3
 800dda4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dda8:	647b      	str	r3, [r7, #68]	; 0x44
 800ddaa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ddae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ddb0:	e841 2300 	strex	r3, r2, [r1]
 800ddb4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ddb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d1e4      	bne.n	800dd86 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	69db      	ldr	r3, [r3, #28]
 800ddc2:	f003 0310 	and.w	r3, r3, #16
 800ddc6:	2b10      	cmp	r3, #16
 800ddc8:	d103      	bne.n	800ddd2 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	2210      	movs	r2, #16
 800ddd0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ddd8:	4619      	mov	r1, r3
 800ddda:	6878      	ldr	r0, [r7, #4]
 800dddc:	f7fe fa5e 	bl	800c29c <HAL_UARTEx_RxEventCallback>
 800dde0:	e002      	b.n	800dde8 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800dde2:	6878      	ldr	r0, [r7, #4]
 800dde4:	f7f3 fe7a 	bl	8001adc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800dde8:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d006      	beq.n	800ddfe <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800ddf0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ddf4:	f003 0320 	and.w	r3, r3, #32
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	f47f aecd 	bne.w	800db98 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800de04:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800de08:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d049      	beq.n	800dea4 <UART_RxISR_16BIT_FIFOEN+0x354>
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800de16:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800de1a:	429a      	cmp	r2, r3
 800de1c:	d242      	bcs.n	800dea4 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	3308      	adds	r3, #8
 800de24:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de28:	e853 3f00 	ldrex	r3, [r3]
 800de2c:	623b      	str	r3, [r7, #32]
   return(result);
 800de2e:	6a3b      	ldr	r3, [r7, #32]
 800de30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800de34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	3308      	adds	r3, #8
 800de3e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800de42:	633a      	str	r2, [r7, #48]	; 0x30
 800de44:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800de48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de4a:	e841 2300 	strex	r3, r2, [r1]
 800de4e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800de50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de52:	2b00      	cmp	r3, #0
 800de54:	d1e3      	bne.n	800de1e <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	4a16      	ldr	r2, [pc, #88]	; (800deb4 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800de5a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de62:	693b      	ldr	r3, [r7, #16]
 800de64:	e853 3f00 	ldrex	r3, [r3]
 800de68:	60fb      	str	r3, [r7, #12]
   return(result);
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	f043 0320 	orr.w	r3, r3, #32
 800de70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	461a      	mov	r2, r3
 800de7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800de7e:	61fb      	str	r3, [r7, #28]
 800de80:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de82:	69b9      	ldr	r1, [r7, #24]
 800de84:	69fa      	ldr	r2, [r7, #28]
 800de86:	e841 2300 	strex	r3, r2, [r1]
 800de8a:	617b      	str	r3, [r7, #20]
   return(result);
 800de8c:	697b      	ldr	r3, [r7, #20]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d1e4      	bne.n	800de5c <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800de92:	e007      	b.n	800dea4 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	699a      	ldr	r2, [r3, #24]
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	f042 0208 	orr.w	r2, r2, #8
 800dea2:	619a      	str	r2, [r3, #24]
}
 800dea4:	bf00      	nop
 800dea6:	37b8      	adds	r7, #184	; 0xb8
 800dea8:	46bd      	mov	sp, r7
 800deaa:	bd80      	pop	{r7, pc}
 800deac:	effffffe 	.word	0xeffffffe
 800deb0:	58000c00 	.word	0x58000c00
 800deb4:	0800d639 	.word	0x0800d639

0800deb8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800deb8:	b480      	push	{r7}
 800deba:	b083      	sub	sp, #12
 800debc:	af00      	add	r7, sp, #0
 800debe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800dec0:	bf00      	nop
 800dec2:	370c      	adds	r7, #12
 800dec4:	46bd      	mov	sp, r7
 800dec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deca:	4770      	bx	lr

0800decc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800decc:	b480      	push	{r7}
 800dece:	b083      	sub	sp, #12
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ded4:	bf00      	nop
 800ded6:	370c      	adds	r7, #12
 800ded8:	46bd      	mov	sp, r7
 800deda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dede:	4770      	bx	lr

0800dee0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800dee0:	b480      	push	{r7}
 800dee2:	b083      	sub	sp, #12
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800dee8:	bf00      	nop
 800deea:	370c      	adds	r7, #12
 800deec:	46bd      	mov	sp, r7
 800deee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def2:	4770      	bx	lr

0800def4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800def4:	b480      	push	{r7}
 800def6:	b085      	sub	sp, #20
 800def8:	af00      	add	r7, sp, #0
 800defa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800df02:	2b01      	cmp	r3, #1
 800df04:	d101      	bne.n	800df0a <HAL_UARTEx_DisableFifoMode+0x16>
 800df06:	2302      	movs	r3, #2
 800df08:	e027      	b.n	800df5a <HAL_UARTEx_DisableFifoMode+0x66>
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	2201      	movs	r2, #1
 800df0e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	2224      	movs	r2, #36	; 0x24
 800df16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	681a      	ldr	r2, [r3, #0]
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	f022 0201 	bic.w	r2, r2, #1
 800df30:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800df38:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	2200      	movs	r2, #0
 800df3e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	68fa      	ldr	r2, [r7, #12]
 800df46:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	2220      	movs	r2, #32
 800df4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	2200      	movs	r2, #0
 800df54:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800df58:	2300      	movs	r3, #0
}
 800df5a:	4618      	mov	r0, r3
 800df5c:	3714      	adds	r7, #20
 800df5e:	46bd      	mov	sp, r7
 800df60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df64:	4770      	bx	lr

0800df66 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800df66:	b580      	push	{r7, lr}
 800df68:	b084      	sub	sp, #16
 800df6a:	af00      	add	r7, sp, #0
 800df6c:	6078      	str	r0, [r7, #4]
 800df6e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800df76:	2b01      	cmp	r3, #1
 800df78:	d101      	bne.n	800df7e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800df7a:	2302      	movs	r3, #2
 800df7c:	e02d      	b.n	800dfda <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	2201      	movs	r2, #1
 800df82:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	2224      	movs	r2, #36	; 0x24
 800df8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	681a      	ldr	r2, [r3, #0]
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	f022 0201 	bic.w	r2, r2, #1
 800dfa4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	689b      	ldr	r3, [r3, #8]
 800dfac:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	683a      	ldr	r2, [r7, #0]
 800dfb6:	430a      	orrs	r2, r1
 800dfb8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dfba:	6878      	ldr	r0, [r7, #4]
 800dfbc:	f000 f850 	bl	800e060 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	68fa      	ldr	r2, [r7, #12]
 800dfc6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	2220      	movs	r2, #32
 800dfcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	2200      	movs	r2, #0
 800dfd4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800dfd8:	2300      	movs	r3, #0
}
 800dfda:	4618      	mov	r0, r3
 800dfdc:	3710      	adds	r7, #16
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	bd80      	pop	{r7, pc}

0800dfe2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dfe2:	b580      	push	{r7, lr}
 800dfe4:	b084      	sub	sp, #16
 800dfe6:	af00      	add	r7, sp, #0
 800dfe8:	6078      	str	r0, [r7, #4]
 800dfea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800dff2:	2b01      	cmp	r3, #1
 800dff4:	d101      	bne.n	800dffa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800dff6:	2302      	movs	r3, #2
 800dff8:	e02d      	b.n	800e056 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	2201      	movs	r2, #1
 800dffe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	2224      	movs	r2, #36	; 0x24
 800e006:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	681a      	ldr	r2, [r3, #0]
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	f022 0201 	bic.w	r2, r2, #1
 800e020:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	689b      	ldr	r3, [r3, #8]
 800e028:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	683a      	ldr	r2, [r7, #0]
 800e032:	430a      	orrs	r2, r1
 800e034:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e036:	6878      	ldr	r0, [r7, #4]
 800e038:	f000 f812 	bl	800e060 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	68fa      	ldr	r2, [r7, #12]
 800e042:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	2220      	movs	r2, #32
 800e048:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	2200      	movs	r2, #0
 800e050:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e054:	2300      	movs	r3, #0
}
 800e056:	4618      	mov	r0, r3
 800e058:	3710      	adds	r7, #16
 800e05a:	46bd      	mov	sp, r7
 800e05c:	bd80      	pop	{r7, pc}
	...

0800e060 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e060:	b480      	push	{r7}
 800e062:	b085      	sub	sp, #20
 800e064:	af00      	add	r7, sp, #0
 800e066:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d108      	bne.n	800e082 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	2201      	movs	r2, #1
 800e074:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	2201      	movs	r2, #1
 800e07c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e080:	e031      	b.n	800e0e6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e082:	2310      	movs	r3, #16
 800e084:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e086:	2310      	movs	r3, #16
 800e088:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	689b      	ldr	r3, [r3, #8]
 800e090:	0e5b      	lsrs	r3, r3, #25
 800e092:	b2db      	uxtb	r3, r3
 800e094:	f003 0307 	and.w	r3, r3, #7
 800e098:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	689b      	ldr	r3, [r3, #8]
 800e0a0:	0f5b      	lsrs	r3, r3, #29
 800e0a2:	b2db      	uxtb	r3, r3
 800e0a4:	f003 0307 	and.w	r3, r3, #7
 800e0a8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e0aa:	7bbb      	ldrb	r3, [r7, #14]
 800e0ac:	7b3a      	ldrb	r2, [r7, #12]
 800e0ae:	4911      	ldr	r1, [pc, #68]	; (800e0f4 <UARTEx_SetNbDataToProcess+0x94>)
 800e0b0:	5c8a      	ldrb	r2, [r1, r2]
 800e0b2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e0b6:	7b3a      	ldrb	r2, [r7, #12]
 800e0b8:	490f      	ldr	r1, [pc, #60]	; (800e0f8 <UARTEx_SetNbDataToProcess+0x98>)
 800e0ba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e0bc:	fb93 f3f2 	sdiv	r3, r3, r2
 800e0c0:	b29a      	uxth	r2, r3
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e0c8:	7bfb      	ldrb	r3, [r7, #15]
 800e0ca:	7b7a      	ldrb	r2, [r7, #13]
 800e0cc:	4909      	ldr	r1, [pc, #36]	; (800e0f4 <UARTEx_SetNbDataToProcess+0x94>)
 800e0ce:	5c8a      	ldrb	r2, [r1, r2]
 800e0d0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e0d4:	7b7a      	ldrb	r2, [r7, #13]
 800e0d6:	4908      	ldr	r1, [pc, #32]	; (800e0f8 <UARTEx_SetNbDataToProcess+0x98>)
 800e0d8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e0da:	fb93 f3f2 	sdiv	r3, r3, r2
 800e0de:	b29a      	uxth	r2, r3
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800e0e6:	bf00      	nop
 800e0e8:	3714      	adds	r7, #20
 800e0ea:	46bd      	mov	sp, r7
 800e0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f0:	4770      	bx	lr
 800e0f2:	bf00      	nop
 800e0f4:	0800f33c 	.word	0x0800f33c
 800e0f8:	0800f344 	.word	0x0800f344

0800e0fc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800e0fc:	b480      	push	{r7}
 800e0fe:	b083      	sub	sp, #12
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
 800e104:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800e106:	683b      	ldr	r3, [r7, #0]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d121      	bne.n	800e152 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	681a      	ldr	r2, [r3, #0]
 800e112:	4b27      	ldr	r3, [pc, #156]	; (800e1b0 <FMC_SDRAM_Init+0xb4>)
 800e114:	4013      	ands	r3, r2
 800e116:	683a      	ldr	r2, [r7, #0]
 800e118:	6851      	ldr	r1, [r2, #4]
 800e11a:	683a      	ldr	r2, [r7, #0]
 800e11c:	6892      	ldr	r2, [r2, #8]
 800e11e:	4311      	orrs	r1, r2
 800e120:	683a      	ldr	r2, [r7, #0]
 800e122:	68d2      	ldr	r2, [r2, #12]
 800e124:	4311      	orrs	r1, r2
 800e126:	683a      	ldr	r2, [r7, #0]
 800e128:	6912      	ldr	r2, [r2, #16]
 800e12a:	4311      	orrs	r1, r2
 800e12c:	683a      	ldr	r2, [r7, #0]
 800e12e:	6952      	ldr	r2, [r2, #20]
 800e130:	4311      	orrs	r1, r2
 800e132:	683a      	ldr	r2, [r7, #0]
 800e134:	6992      	ldr	r2, [r2, #24]
 800e136:	4311      	orrs	r1, r2
 800e138:	683a      	ldr	r2, [r7, #0]
 800e13a:	69d2      	ldr	r2, [r2, #28]
 800e13c:	4311      	orrs	r1, r2
 800e13e:	683a      	ldr	r2, [r7, #0]
 800e140:	6a12      	ldr	r2, [r2, #32]
 800e142:	4311      	orrs	r1, r2
 800e144:	683a      	ldr	r2, [r7, #0]
 800e146:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800e148:	430a      	orrs	r2, r1
 800e14a:	431a      	orrs	r2, r3
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	601a      	str	r2, [r3, #0]
 800e150:	e026      	b.n	800e1a0 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800e15a:	683b      	ldr	r3, [r7, #0]
 800e15c:	69d9      	ldr	r1, [r3, #28]
 800e15e:	683b      	ldr	r3, [r7, #0]
 800e160:	6a1b      	ldr	r3, [r3, #32]
 800e162:	4319      	orrs	r1, r3
 800e164:	683b      	ldr	r3, [r7, #0]
 800e166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e168:	430b      	orrs	r3, r1
 800e16a:	431a      	orrs	r2, r3
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	685a      	ldr	r2, [r3, #4]
 800e174:	4b0e      	ldr	r3, [pc, #56]	; (800e1b0 <FMC_SDRAM_Init+0xb4>)
 800e176:	4013      	ands	r3, r2
 800e178:	683a      	ldr	r2, [r7, #0]
 800e17a:	6851      	ldr	r1, [r2, #4]
 800e17c:	683a      	ldr	r2, [r7, #0]
 800e17e:	6892      	ldr	r2, [r2, #8]
 800e180:	4311      	orrs	r1, r2
 800e182:	683a      	ldr	r2, [r7, #0]
 800e184:	68d2      	ldr	r2, [r2, #12]
 800e186:	4311      	orrs	r1, r2
 800e188:	683a      	ldr	r2, [r7, #0]
 800e18a:	6912      	ldr	r2, [r2, #16]
 800e18c:	4311      	orrs	r1, r2
 800e18e:	683a      	ldr	r2, [r7, #0]
 800e190:	6952      	ldr	r2, [r2, #20]
 800e192:	4311      	orrs	r1, r2
 800e194:	683a      	ldr	r2, [r7, #0]
 800e196:	6992      	ldr	r2, [r2, #24]
 800e198:	430a      	orrs	r2, r1
 800e19a:	431a      	orrs	r2, r3
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800e1a0:	2300      	movs	r3, #0
}
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	370c      	adds	r7, #12
 800e1a6:	46bd      	mov	sp, r7
 800e1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ac:	4770      	bx	lr
 800e1ae:	bf00      	nop
 800e1b0:	ffff8000 	.word	0xffff8000

0800e1b4 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800e1b4:	b480      	push	{r7}
 800e1b6:	b085      	sub	sp, #20
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	60f8      	str	r0, [r7, #12]
 800e1bc:	60b9      	str	r1, [r7, #8]
 800e1be:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d128      	bne.n	800e218 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	689b      	ldr	r3, [r3, #8]
 800e1ca:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800e1ce:	68bb      	ldr	r3, [r7, #8]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	1e59      	subs	r1, r3, #1
 800e1d4:	68bb      	ldr	r3, [r7, #8]
 800e1d6:	685b      	ldr	r3, [r3, #4]
 800e1d8:	3b01      	subs	r3, #1
 800e1da:	011b      	lsls	r3, r3, #4
 800e1dc:	4319      	orrs	r1, r3
 800e1de:	68bb      	ldr	r3, [r7, #8]
 800e1e0:	689b      	ldr	r3, [r3, #8]
 800e1e2:	3b01      	subs	r3, #1
 800e1e4:	021b      	lsls	r3, r3, #8
 800e1e6:	4319      	orrs	r1, r3
 800e1e8:	68bb      	ldr	r3, [r7, #8]
 800e1ea:	68db      	ldr	r3, [r3, #12]
 800e1ec:	3b01      	subs	r3, #1
 800e1ee:	031b      	lsls	r3, r3, #12
 800e1f0:	4319      	orrs	r1, r3
 800e1f2:	68bb      	ldr	r3, [r7, #8]
 800e1f4:	691b      	ldr	r3, [r3, #16]
 800e1f6:	3b01      	subs	r3, #1
 800e1f8:	041b      	lsls	r3, r3, #16
 800e1fa:	4319      	orrs	r1, r3
 800e1fc:	68bb      	ldr	r3, [r7, #8]
 800e1fe:	695b      	ldr	r3, [r3, #20]
 800e200:	3b01      	subs	r3, #1
 800e202:	051b      	lsls	r3, r3, #20
 800e204:	4319      	orrs	r1, r3
 800e206:	68bb      	ldr	r3, [r7, #8]
 800e208:	699b      	ldr	r3, [r3, #24]
 800e20a:	3b01      	subs	r3, #1
 800e20c:	061b      	lsls	r3, r3, #24
 800e20e:	430b      	orrs	r3, r1
 800e210:	431a      	orrs	r2, r3
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	609a      	str	r2, [r3, #8]
 800e216:	e02d      	b.n	800e274 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	689a      	ldr	r2, [r3, #8]
 800e21c:	4b19      	ldr	r3, [pc, #100]	; (800e284 <FMC_SDRAM_Timing_Init+0xd0>)
 800e21e:	4013      	ands	r3, r2
 800e220:	68ba      	ldr	r2, [r7, #8]
 800e222:	68d2      	ldr	r2, [r2, #12]
 800e224:	3a01      	subs	r2, #1
 800e226:	0311      	lsls	r1, r2, #12
 800e228:	68ba      	ldr	r2, [r7, #8]
 800e22a:	6952      	ldr	r2, [r2, #20]
 800e22c:	3a01      	subs	r2, #1
 800e22e:	0512      	lsls	r2, r2, #20
 800e230:	430a      	orrs	r2, r1
 800e232:	431a      	orrs	r2, r3
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	68db      	ldr	r3, [r3, #12]
 800e23c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800e240:	68bb      	ldr	r3, [r7, #8]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	1e59      	subs	r1, r3, #1
 800e246:	68bb      	ldr	r3, [r7, #8]
 800e248:	685b      	ldr	r3, [r3, #4]
 800e24a:	3b01      	subs	r3, #1
 800e24c:	011b      	lsls	r3, r3, #4
 800e24e:	4319      	orrs	r1, r3
 800e250:	68bb      	ldr	r3, [r7, #8]
 800e252:	689b      	ldr	r3, [r3, #8]
 800e254:	3b01      	subs	r3, #1
 800e256:	021b      	lsls	r3, r3, #8
 800e258:	4319      	orrs	r1, r3
 800e25a:	68bb      	ldr	r3, [r7, #8]
 800e25c:	691b      	ldr	r3, [r3, #16]
 800e25e:	3b01      	subs	r3, #1
 800e260:	041b      	lsls	r3, r3, #16
 800e262:	4319      	orrs	r1, r3
 800e264:	68bb      	ldr	r3, [r7, #8]
 800e266:	699b      	ldr	r3, [r3, #24]
 800e268:	3b01      	subs	r3, #1
 800e26a:	061b      	lsls	r3, r3, #24
 800e26c:	430b      	orrs	r3, r1
 800e26e:	431a      	orrs	r2, r3
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800e274:	2300      	movs	r3, #0
}
 800e276:	4618      	mov	r0, r3
 800e278:	3714      	adds	r7, #20
 800e27a:	46bd      	mov	sp, r7
 800e27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e280:	4770      	bx	lr
 800e282:	bf00      	nop
 800e284:	ff0f0fff 	.word	0xff0f0fff

0800e288 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e288:	b084      	sub	sp, #16
 800e28a:	b580      	push	{r7, lr}
 800e28c:	b084      	sub	sp, #16
 800e28e:	af00      	add	r7, sp, #0
 800e290:	6078      	str	r0, [r7, #4]
 800e292:	f107 001c 	add.w	r0, r7, #28
 800e296:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e29a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e29c:	2b01      	cmp	r3, #1
 800e29e:	d120      	bne.n	800e2e2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	68da      	ldr	r2, [r3, #12]
 800e2b0:	4b2a      	ldr	r3, [pc, #168]	; (800e35c <USB_CoreInit+0xd4>)
 800e2b2:	4013      	ands	r3, r2
 800e2b4:	687a      	ldr	r2, [r7, #4]
 800e2b6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	68db      	ldr	r3, [r3, #12]
 800e2bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800e2c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e2c6:	2b01      	cmp	r3, #1
 800e2c8:	d105      	bne.n	800e2d6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	68db      	ldr	r3, [r3, #12]
 800e2ce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e2d6:	6878      	ldr	r0, [r7, #4]
 800e2d8:	f000 faac 	bl	800e834 <USB_CoreReset>
 800e2dc:	4603      	mov	r3, r0
 800e2de:	73fb      	strb	r3, [r7, #15]
 800e2e0:	e01a      	b.n	800e318 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	68db      	ldr	r3, [r3, #12]
 800e2e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e2ee:	6878      	ldr	r0, [r7, #4]
 800e2f0:	f000 faa0 	bl	800e834 <USB_CoreReset>
 800e2f4:	4603      	mov	r3, r0
 800e2f6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800e2f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d106      	bne.n	800e30c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e302:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	639a      	str	r2, [r3, #56]	; 0x38
 800e30a:	e005      	b.n	800e318 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e310:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800e318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e31a:	2b01      	cmp	r3, #1
 800e31c:	d116      	bne.n	800e34c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e322:	b29a      	uxth	r2, r3
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e32c:	4b0c      	ldr	r3, [pc, #48]	; (800e360 <USB_CoreInit+0xd8>)
 800e32e:	4313      	orrs	r3, r2
 800e330:	687a      	ldr	r2, [r7, #4]
 800e332:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	689b      	ldr	r3, [r3, #8]
 800e338:	f043 0206 	orr.w	r2, r3, #6
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	689b      	ldr	r3, [r3, #8]
 800e344:	f043 0220 	orr.w	r2, r3, #32
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800e34c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e34e:	4618      	mov	r0, r3
 800e350:	3710      	adds	r7, #16
 800e352:	46bd      	mov	sp, r7
 800e354:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e358:	b004      	add	sp, #16
 800e35a:	4770      	bx	lr
 800e35c:	ffbdffbf 	.word	0xffbdffbf
 800e360:	03ee0000 	.word	0x03ee0000

0800e364 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e364:	b480      	push	{r7}
 800e366:	b083      	sub	sp, #12
 800e368:	af00      	add	r7, sp, #0
 800e36a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	689b      	ldr	r3, [r3, #8]
 800e370:	f023 0201 	bic.w	r2, r3, #1
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e378:	2300      	movs	r3, #0
}
 800e37a:	4618      	mov	r0, r3
 800e37c:	370c      	adds	r7, #12
 800e37e:	46bd      	mov	sp, r7
 800e380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e384:	4770      	bx	lr

0800e386 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800e386:	b580      	push	{r7, lr}
 800e388:	b084      	sub	sp, #16
 800e38a:	af00      	add	r7, sp, #0
 800e38c:	6078      	str	r0, [r7, #4]
 800e38e:	460b      	mov	r3, r1
 800e390:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800e392:	2300      	movs	r3, #0
 800e394:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	68db      	ldr	r3, [r3, #12]
 800e39a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800e3a2:	78fb      	ldrb	r3, [r7, #3]
 800e3a4:	2b01      	cmp	r3, #1
 800e3a6:	d115      	bne.n	800e3d4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	68db      	ldr	r3, [r3, #12]
 800e3ac:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800e3b4:	2001      	movs	r0, #1
 800e3b6:	f7f4 fda7 	bl	8002f08 <HAL_Delay>
      ms++;
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	3301      	adds	r3, #1
 800e3be:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800e3c0:	6878      	ldr	r0, [r7, #4]
 800e3c2:	f000 fa29 	bl	800e818 <USB_GetMode>
 800e3c6:	4603      	mov	r3, r0
 800e3c8:	2b01      	cmp	r3, #1
 800e3ca:	d01e      	beq.n	800e40a <USB_SetCurrentMode+0x84>
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	2b31      	cmp	r3, #49	; 0x31
 800e3d0:	d9f0      	bls.n	800e3b4 <USB_SetCurrentMode+0x2e>
 800e3d2:	e01a      	b.n	800e40a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800e3d4:	78fb      	ldrb	r3, [r7, #3]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d115      	bne.n	800e406 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	68db      	ldr	r3, [r3, #12]
 800e3de:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800e3e6:	2001      	movs	r0, #1
 800e3e8:	f7f4 fd8e 	bl	8002f08 <HAL_Delay>
      ms++;
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	3301      	adds	r3, #1
 800e3f0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800e3f2:	6878      	ldr	r0, [r7, #4]
 800e3f4:	f000 fa10 	bl	800e818 <USB_GetMode>
 800e3f8:	4603      	mov	r3, r0
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d005      	beq.n	800e40a <USB_SetCurrentMode+0x84>
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	2b31      	cmp	r3, #49	; 0x31
 800e402:	d9f0      	bls.n	800e3e6 <USB_SetCurrentMode+0x60>
 800e404:	e001      	b.n	800e40a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800e406:	2301      	movs	r3, #1
 800e408:	e005      	b.n	800e416 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	2b32      	cmp	r3, #50	; 0x32
 800e40e:	d101      	bne.n	800e414 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800e410:	2301      	movs	r3, #1
 800e412:	e000      	b.n	800e416 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800e414:	2300      	movs	r3, #0
}
 800e416:	4618      	mov	r0, r3
 800e418:	3710      	adds	r7, #16
 800e41a:	46bd      	mov	sp, r7
 800e41c:	bd80      	pop	{r7, pc}
	...

0800e420 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e420:	b084      	sub	sp, #16
 800e422:	b580      	push	{r7, lr}
 800e424:	b086      	sub	sp, #24
 800e426:	af00      	add	r7, sp, #0
 800e428:	6078      	str	r0, [r7, #4]
 800e42a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800e42e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800e432:	2300      	movs	r3, #0
 800e434:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800e43a:	2300      	movs	r3, #0
 800e43c:	613b      	str	r3, [r7, #16]
 800e43e:	e009      	b.n	800e454 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800e440:	687a      	ldr	r2, [r7, #4]
 800e442:	693b      	ldr	r3, [r7, #16]
 800e444:	3340      	adds	r3, #64	; 0x40
 800e446:	009b      	lsls	r3, r3, #2
 800e448:	4413      	add	r3, r2
 800e44a:	2200      	movs	r2, #0
 800e44c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800e44e:	693b      	ldr	r3, [r7, #16]
 800e450:	3301      	adds	r3, #1
 800e452:	613b      	str	r3, [r7, #16]
 800e454:	693b      	ldr	r3, [r7, #16]
 800e456:	2b0e      	cmp	r3, #14
 800e458:	d9f2      	bls.n	800e440 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800e45a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d11c      	bne.n	800e49a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e466:	685b      	ldr	r3, [r3, #4]
 800e468:	68fa      	ldr	r2, [r7, #12]
 800e46a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e46e:	f043 0302 	orr.w	r3, r3, #2
 800e472:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e478:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	601a      	str	r2, [r3, #0]
 800e498:	e005      	b.n	800e4a6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e49e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e4ac:	461a      	mov	r2, r3
 800e4ae:	2300      	movs	r3, #0
 800e4b0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e4b8:	4619      	mov	r1, r3
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e4c0:	461a      	mov	r2, r3
 800e4c2:	680b      	ldr	r3, [r1, #0]
 800e4c4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e4c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4c8:	2b01      	cmp	r3, #1
 800e4ca:	d10c      	bne.n	800e4e6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800e4cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d104      	bne.n	800e4dc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800e4d2:	2100      	movs	r1, #0
 800e4d4:	6878      	ldr	r0, [r7, #4]
 800e4d6:	f000 f965 	bl	800e7a4 <USB_SetDevSpeed>
 800e4da:	e008      	b.n	800e4ee <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800e4dc:	2101      	movs	r1, #1
 800e4de:	6878      	ldr	r0, [r7, #4]
 800e4e0:	f000 f960 	bl	800e7a4 <USB_SetDevSpeed>
 800e4e4:	e003      	b.n	800e4ee <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800e4e6:	2103      	movs	r1, #3
 800e4e8:	6878      	ldr	r0, [r7, #4]
 800e4ea:	f000 f95b 	bl	800e7a4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e4ee:	2110      	movs	r1, #16
 800e4f0:	6878      	ldr	r0, [r7, #4]
 800e4f2:	f000 f8f3 	bl	800e6dc <USB_FlushTxFifo>
 800e4f6:	4603      	mov	r3, r0
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d001      	beq.n	800e500 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800e4fc:	2301      	movs	r3, #1
 800e4fe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e500:	6878      	ldr	r0, [r7, #4]
 800e502:	f000 f91f 	bl	800e744 <USB_FlushRxFifo>
 800e506:	4603      	mov	r3, r0
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d001      	beq.n	800e510 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800e50c:	2301      	movs	r3, #1
 800e50e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e516:	461a      	mov	r2, r3
 800e518:	2300      	movs	r3, #0
 800e51a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e522:	461a      	mov	r2, r3
 800e524:	2300      	movs	r3, #0
 800e526:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e52e:	461a      	mov	r2, r3
 800e530:	2300      	movs	r3, #0
 800e532:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e534:	2300      	movs	r3, #0
 800e536:	613b      	str	r3, [r7, #16]
 800e538:	e043      	b.n	800e5c2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e53a:	693b      	ldr	r3, [r7, #16]
 800e53c:	015a      	lsls	r2, r3, #5
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	4413      	add	r3, r2
 800e542:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e54c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e550:	d118      	bne.n	800e584 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800e552:	693b      	ldr	r3, [r7, #16]
 800e554:	2b00      	cmp	r3, #0
 800e556:	d10a      	bne.n	800e56e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800e558:	693b      	ldr	r3, [r7, #16]
 800e55a:	015a      	lsls	r2, r3, #5
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	4413      	add	r3, r2
 800e560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e564:	461a      	mov	r2, r3
 800e566:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e56a:	6013      	str	r3, [r2, #0]
 800e56c:	e013      	b.n	800e596 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800e56e:	693b      	ldr	r3, [r7, #16]
 800e570:	015a      	lsls	r2, r3, #5
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	4413      	add	r3, r2
 800e576:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e57a:	461a      	mov	r2, r3
 800e57c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e580:	6013      	str	r3, [r2, #0]
 800e582:	e008      	b.n	800e596 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800e584:	693b      	ldr	r3, [r7, #16]
 800e586:	015a      	lsls	r2, r3, #5
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	4413      	add	r3, r2
 800e58c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e590:	461a      	mov	r2, r3
 800e592:	2300      	movs	r3, #0
 800e594:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800e596:	693b      	ldr	r3, [r7, #16]
 800e598:	015a      	lsls	r2, r3, #5
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	4413      	add	r3, r2
 800e59e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5a2:	461a      	mov	r2, r3
 800e5a4:	2300      	movs	r3, #0
 800e5a6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800e5a8:	693b      	ldr	r3, [r7, #16]
 800e5aa:	015a      	lsls	r2, r3, #5
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	4413      	add	r3, r2
 800e5b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5b4:	461a      	mov	r2, r3
 800e5b6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e5ba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e5bc:	693b      	ldr	r3, [r7, #16]
 800e5be:	3301      	adds	r3, #1
 800e5c0:	613b      	str	r3, [r7, #16]
 800e5c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5c4:	693a      	ldr	r2, [r7, #16]
 800e5c6:	429a      	cmp	r2, r3
 800e5c8:	d3b7      	bcc.n	800e53a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e5ca:	2300      	movs	r3, #0
 800e5cc:	613b      	str	r3, [r7, #16]
 800e5ce:	e043      	b.n	800e658 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e5d0:	693b      	ldr	r3, [r7, #16]
 800e5d2:	015a      	lsls	r2, r3, #5
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	4413      	add	r3, r2
 800e5d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e5e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e5e6:	d118      	bne.n	800e61a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800e5e8:	693b      	ldr	r3, [r7, #16]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d10a      	bne.n	800e604 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800e5ee:	693b      	ldr	r3, [r7, #16]
 800e5f0:	015a      	lsls	r2, r3, #5
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	4413      	add	r3, r2
 800e5f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e5fa:	461a      	mov	r2, r3
 800e5fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e600:	6013      	str	r3, [r2, #0]
 800e602:	e013      	b.n	800e62c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e604:	693b      	ldr	r3, [r7, #16]
 800e606:	015a      	lsls	r2, r3, #5
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	4413      	add	r3, r2
 800e60c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e610:	461a      	mov	r2, r3
 800e612:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e616:	6013      	str	r3, [r2, #0]
 800e618:	e008      	b.n	800e62c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e61a:	693b      	ldr	r3, [r7, #16]
 800e61c:	015a      	lsls	r2, r3, #5
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	4413      	add	r3, r2
 800e622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e626:	461a      	mov	r2, r3
 800e628:	2300      	movs	r3, #0
 800e62a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800e62c:	693b      	ldr	r3, [r7, #16]
 800e62e:	015a      	lsls	r2, r3, #5
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	4413      	add	r3, r2
 800e634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e638:	461a      	mov	r2, r3
 800e63a:	2300      	movs	r3, #0
 800e63c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e63e:	693b      	ldr	r3, [r7, #16]
 800e640:	015a      	lsls	r2, r3, #5
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	4413      	add	r3, r2
 800e646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e64a:	461a      	mov	r2, r3
 800e64c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e650:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e652:	693b      	ldr	r3, [r7, #16]
 800e654:	3301      	adds	r3, #1
 800e656:	613b      	str	r3, [r7, #16]
 800e658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e65a:	693a      	ldr	r2, [r7, #16]
 800e65c:	429a      	cmp	r2, r3
 800e65e:	d3b7      	bcc.n	800e5d0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e666:	691b      	ldr	r3, [r3, #16]
 800e668:	68fa      	ldr	r2, [r7, #12]
 800e66a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e66e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e672:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	2200      	movs	r2, #0
 800e678:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800e680:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e684:	2b00      	cmp	r3, #0
 800e686:	d105      	bne.n	800e694 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	699b      	ldr	r3, [r3, #24]
 800e68c:	f043 0210 	orr.w	r2, r3, #16
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	699a      	ldr	r2, [r3, #24]
 800e698:	4b0e      	ldr	r3, [pc, #56]	; (800e6d4 <USB_DevInit+0x2b4>)
 800e69a:	4313      	orrs	r3, r2
 800e69c:	687a      	ldr	r2, [r7, #4]
 800e69e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800e6a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d005      	beq.n	800e6b2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	699b      	ldr	r3, [r3, #24]
 800e6aa:	f043 0208 	orr.w	r2, r3, #8
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800e6b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e6b4:	2b01      	cmp	r3, #1
 800e6b6:	d105      	bne.n	800e6c4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	699a      	ldr	r2, [r3, #24]
 800e6bc:	4b06      	ldr	r3, [pc, #24]	; (800e6d8 <USB_DevInit+0x2b8>)
 800e6be:	4313      	orrs	r3, r2
 800e6c0:	687a      	ldr	r2, [r7, #4]
 800e6c2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800e6c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	3718      	adds	r7, #24
 800e6ca:	46bd      	mov	sp, r7
 800e6cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e6d0:	b004      	add	sp, #16
 800e6d2:	4770      	bx	lr
 800e6d4:	803c3800 	.word	0x803c3800
 800e6d8:	40000004 	.word	0x40000004

0800e6dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e6dc:	b480      	push	{r7}
 800e6de:	b085      	sub	sp, #20
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	6078      	str	r0, [r7, #4]
 800e6e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e6e6:	2300      	movs	r3, #0
 800e6e8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	3301      	adds	r3, #1
 800e6ee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	4a13      	ldr	r2, [pc, #76]	; (800e740 <USB_FlushTxFifo+0x64>)
 800e6f4:	4293      	cmp	r3, r2
 800e6f6:	d901      	bls.n	800e6fc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800e6f8:	2303      	movs	r3, #3
 800e6fa:	e01b      	b.n	800e734 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	691b      	ldr	r3, [r3, #16]
 800e700:	2b00      	cmp	r3, #0
 800e702:	daf2      	bge.n	800e6ea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800e704:	2300      	movs	r3, #0
 800e706:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e708:	683b      	ldr	r3, [r7, #0]
 800e70a:	019b      	lsls	r3, r3, #6
 800e70c:	f043 0220 	orr.w	r2, r3, #32
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	3301      	adds	r3, #1
 800e718:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	4a08      	ldr	r2, [pc, #32]	; (800e740 <USB_FlushTxFifo+0x64>)
 800e71e:	4293      	cmp	r3, r2
 800e720:	d901      	bls.n	800e726 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800e722:	2303      	movs	r3, #3
 800e724:	e006      	b.n	800e734 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	691b      	ldr	r3, [r3, #16]
 800e72a:	f003 0320 	and.w	r3, r3, #32
 800e72e:	2b20      	cmp	r3, #32
 800e730:	d0f0      	beq.n	800e714 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800e732:	2300      	movs	r3, #0
}
 800e734:	4618      	mov	r0, r3
 800e736:	3714      	adds	r7, #20
 800e738:	46bd      	mov	sp, r7
 800e73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e73e:	4770      	bx	lr
 800e740:	00030d40 	.word	0x00030d40

0800e744 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e744:	b480      	push	{r7}
 800e746:	b085      	sub	sp, #20
 800e748:	af00      	add	r7, sp, #0
 800e74a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e74c:	2300      	movs	r3, #0
 800e74e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	3301      	adds	r3, #1
 800e754:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	4a11      	ldr	r2, [pc, #68]	; (800e7a0 <USB_FlushRxFifo+0x5c>)
 800e75a:	4293      	cmp	r3, r2
 800e75c:	d901      	bls.n	800e762 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800e75e:	2303      	movs	r3, #3
 800e760:	e018      	b.n	800e794 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	691b      	ldr	r3, [r3, #16]
 800e766:	2b00      	cmp	r3, #0
 800e768:	daf2      	bge.n	800e750 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800e76a:	2300      	movs	r3, #0
 800e76c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	2210      	movs	r2, #16
 800e772:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	3301      	adds	r3, #1
 800e778:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	4a08      	ldr	r2, [pc, #32]	; (800e7a0 <USB_FlushRxFifo+0x5c>)
 800e77e:	4293      	cmp	r3, r2
 800e780:	d901      	bls.n	800e786 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800e782:	2303      	movs	r3, #3
 800e784:	e006      	b.n	800e794 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	691b      	ldr	r3, [r3, #16]
 800e78a:	f003 0310 	and.w	r3, r3, #16
 800e78e:	2b10      	cmp	r3, #16
 800e790:	d0f0      	beq.n	800e774 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800e792:	2300      	movs	r3, #0
}
 800e794:	4618      	mov	r0, r3
 800e796:	3714      	adds	r7, #20
 800e798:	46bd      	mov	sp, r7
 800e79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e79e:	4770      	bx	lr
 800e7a0:	00030d40 	.word	0x00030d40

0800e7a4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800e7a4:	b480      	push	{r7}
 800e7a6:	b085      	sub	sp, #20
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	6078      	str	r0, [r7, #4]
 800e7ac:	460b      	mov	r3, r1
 800e7ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e7ba:	681a      	ldr	r2, [r3, #0]
 800e7bc:	78fb      	ldrb	r3, [r7, #3]
 800e7be:	68f9      	ldr	r1, [r7, #12]
 800e7c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e7c4:	4313      	orrs	r3, r2
 800e7c6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800e7c8:	2300      	movs	r3, #0
}
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	3714      	adds	r7, #20
 800e7ce:	46bd      	mov	sp, r7
 800e7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d4:	4770      	bx	lr

0800e7d6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e7d6:	b480      	push	{r7}
 800e7d8:	b085      	sub	sp, #20
 800e7da:	af00      	add	r7, sp, #0
 800e7dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	68fa      	ldr	r2, [r7, #12]
 800e7ec:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e7f0:	f023 0303 	bic.w	r3, r3, #3
 800e7f4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e7fc:	685b      	ldr	r3, [r3, #4]
 800e7fe:	68fa      	ldr	r2, [r7, #12]
 800e800:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e804:	f043 0302 	orr.w	r3, r3, #2
 800e808:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e80a:	2300      	movs	r3, #0
}
 800e80c:	4618      	mov	r0, r3
 800e80e:	3714      	adds	r7, #20
 800e810:	46bd      	mov	sp, r7
 800e812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e816:	4770      	bx	lr

0800e818 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800e818:	b480      	push	{r7}
 800e81a:	b083      	sub	sp, #12
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	695b      	ldr	r3, [r3, #20]
 800e824:	f003 0301 	and.w	r3, r3, #1
}
 800e828:	4618      	mov	r0, r3
 800e82a:	370c      	adds	r7, #12
 800e82c:	46bd      	mov	sp, r7
 800e82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e832:	4770      	bx	lr

0800e834 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e834:	b480      	push	{r7}
 800e836:	b085      	sub	sp, #20
 800e838:	af00      	add	r7, sp, #0
 800e83a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e83c:	2300      	movs	r3, #0
 800e83e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	3301      	adds	r3, #1
 800e844:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	4a13      	ldr	r2, [pc, #76]	; (800e898 <USB_CoreReset+0x64>)
 800e84a:	4293      	cmp	r3, r2
 800e84c:	d901      	bls.n	800e852 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800e84e:	2303      	movs	r3, #3
 800e850:	e01b      	b.n	800e88a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	691b      	ldr	r3, [r3, #16]
 800e856:	2b00      	cmp	r3, #0
 800e858:	daf2      	bge.n	800e840 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e85a:	2300      	movs	r3, #0
 800e85c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	691b      	ldr	r3, [r3, #16]
 800e862:	f043 0201 	orr.w	r2, r3, #1
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	3301      	adds	r3, #1
 800e86e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	4a09      	ldr	r2, [pc, #36]	; (800e898 <USB_CoreReset+0x64>)
 800e874:	4293      	cmp	r3, r2
 800e876:	d901      	bls.n	800e87c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800e878:	2303      	movs	r3, #3
 800e87a:	e006      	b.n	800e88a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	691b      	ldr	r3, [r3, #16]
 800e880:	f003 0301 	and.w	r3, r3, #1
 800e884:	2b01      	cmp	r3, #1
 800e886:	d0f0      	beq.n	800e86a <USB_CoreReset+0x36>

  return HAL_OK;
 800e888:	2300      	movs	r3, #0
}
 800e88a:	4618      	mov	r0, r3
 800e88c:	3714      	adds	r7, #20
 800e88e:	46bd      	mov	sp, r7
 800e890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e894:	4770      	bx	lr
 800e896:	bf00      	nop
 800e898:	00030d40 	.word	0x00030d40

0800e89c <__errno>:
 800e89c:	4b01      	ldr	r3, [pc, #4]	; (800e8a4 <__errno+0x8>)
 800e89e:	6818      	ldr	r0, [r3, #0]
 800e8a0:	4770      	bx	lr
 800e8a2:	bf00      	nop
 800e8a4:	24000034 	.word	0x24000034

0800e8a8 <__libc_init_array>:
 800e8a8:	b570      	push	{r4, r5, r6, lr}
 800e8aa:	4d0d      	ldr	r5, [pc, #52]	; (800e8e0 <__libc_init_array+0x38>)
 800e8ac:	4c0d      	ldr	r4, [pc, #52]	; (800e8e4 <__libc_init_array+0x3c>)
 800e8ae:	1b64      	subs	r4, r4, r5
 800e8b0:	10a4      	asrs	r4, r4, #2
 800e8b2:	2600      	movs	r6, #0
 800e8b4:	42a6      	cmp	r6, r4
 800e8b6:	d109      	bne.n	800e8cc <__libc_init_array+0x24>
 800e8b8:	4d0b      	ldr	r5, [pc, #44]	; (800e8e8 <__libc_init_array+0x40>)
 800e8ba:	4c0c      	ldr	r4, [pc, #48]	; (800e8ec <__libc_init_array+0x44>)
 800e8bc:	f000 fc8e 	bl	800f1dc <_init>
 800e8c0:	1b64      	subs	r4, r4, r5
 800e8c2:	10a4      	asrs	r4, r4, #2
 800e8c4:	2600      	movs	r6, #0
 800e8c6:	42a6      	cmp	r6, r4
 800e8c8:	d105      	bne.n	800e8d6 <__libc_init_array+0x2e>
 800e8ca:	bd70      	pop	{r4, r5, r6, pc}
 800e8cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800e8d0:	4798      	blx	r3
 800e8d2:	3601      	adds	r6, #1
 800e8d4:	e7ee      	b.n	800e8b4 <__libc_init_array+0xc>
 800e8d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800e8da:	4798      	blx	r3
 800e8dc:	3601      	adds	r6, #1
 800e8de:	e7f2      	b.n	800e8c6 <__libc_init_array+0x1e>
 800e8e0:	0800f388 	.word	0x0800f388
 800e8e4:	0800f388 	.word	0x0800f388
 800e8e8:	0800f388 	.word	0x0800f388
 800e8ec:	0800f38c 	.word	0x0800f38c

0800e8f0 <memcpy>:
 800e8f0:	440a      	add	r2, r1
 800e8f2:	4291      	cmp	r1, r2
 800e8f4:	f100 33ff 	add.w	r3, r0, #4294967295
 800e8f8:	d100      	bne.n	800e8fc <memcpy+0xc>
 800e8fa:	4770      	bx	lr
 800e8fc:	b510      	push	{r4, lr}
 800e8fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e902:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e906:	4291      	cmp	r1, r2
 800e908:	d1f9      	bne.n	800e8fe <memcpy+0xe>
 800e90a:	bd10      	pop	{r4, pc}

0800e90c <memset>:
 800e90c:	4402      	add	r2, r0
 800e90e:	4603      	mov	r3, r0
 800e910:	4293      	cmp	r3, r2
 800e912:	d100      	bne.n	800e916 <memset+0xa>
 800e914:	4770      	bx	lr
 800e916:	f803 1b01 	strb.w	r1, [r3], #1
 800e91a:	e7f9      	b.n	800e910 <memset+0x4>

0800e91c <siprintf>:
 800e91c:	b40e      	push	{r1, r2, r3}
 800e91e:	b500      	push	{lr}
 800e920:	b09c      	sub	sp, #112	; 0x70
 800e922:	ab1d      	add	r3, sp, #116	; 0x74
 800e924:	9002      	str	r0, [sp, #8]
 800e926:	9006      	str	r0, [sp, #24]
 800e928:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e92c:	4809      	ldr	r0, [pc, #36]	; (800e954 <siprintf+0x38>)
 800e92e:	9107      	str	r1, [sp, #28]
 800e930:	9104      	str	r1, [sp, #16]
 800e932:	4909      	ldr	r1, [pc, #36]	; (800e958 <siprintf+0x3c>)
 800e934:	f853 2b04 	ldr.w	r2, [r3], #4
 800e938:	9105      	str	r1, [sp, #20]
 800e93a:	6800      	ldr	r0, [r0, #0]
 800e93c:	9301      	str	r3, [sp, #4]
 800e93e:	a902      	add	r1, sp, #8
 800e940:	f000 f868 	bl	800ea14 <_svfiprintf_r>
 800e944:	9b02      	ldr	r3, [sp, #8]
 800e946:	2200      	movs	r2, #0
 800e948:	701a      	strb	r2, [r3, #0]
 800e94a:	b01c      	add	sp, #112	; 0x70
 800e94c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e950:	b003      	add	sp, #12
 800e952:	4770      	bx	lr
 800e954:	24000034 	.word	0x24000034
 800e958:	ffff0208 	.word	0xffff0208

0800e95c <__ssputs_r>:
 800e95c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e960:	688e      	ldr	r6, [r1, #8]
 800e962:	429e      	cmp	r6, r3
 800e964:	4682      	mov	sl, r0
 800e966:	460c      	mov	r4, r1
 800e968:	4690      	mov	r8, r2
 800e96a:	461f      	mov	r7, r3
 800e96c:	d838      	bhi.n	800e9e0 <__ssputs_r+0x84>
 800e96e:	898a      	ldrh	r2, [r1, #12]
 800e970:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e974:	d032      	beq.n	800e9dc <__ssputs_r+0x80>
 800e976:	6825      	ldr	r5, [r4, #0]
 800e978:	6909      	ldr	r1, [r1, #16]
 800e97a:	eba5 0901 	sub.w	r9, r5, r1
 800e97e:	6965      	ldr	r5, [r4, #20]
 800e980:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e984:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e988:	3301      	adds	r3, #1
 800e98a:	444b      	add	r3, r9
 800e98c:	106d      	asrs	r5, r5, #1
 800e98e:	429d      	cmp	r5, r3
 800e990:	bf38      	it	cc
 800e992:	461d      	movcc	r5, r3
 800e994:	0553      	lsls	r3, r2, #21
 800e996:	d531      	bpl.n	800e9fc <__ssputs_r+0xa0>
 800e998:	4629      	mov	r1, r5
 800e99a:	f000 fb55 	bl	800f048 <_malloc_r>
 800e99e:	4606      	mov	r6, r0
 800e9a0:	b950      	cbnz	r0, 800e9b8 <__ssputs_r+0x5c>
 800e9a2:	230c      	movs	r3, #12
 800e9a4:	f8ca 3000 	str.w	r3, [sl]
 800e9a8:	89a3      	ldrh	r3, [r4, #12]
 800e9aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e9ae:	81a3      	strh	r3, [r4, #12]
 800e9b0:	f04f 30ff 	mov.w	r0, #4294967295
 800e9b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9b8:	6921      	ldr	r1, [r4, #16]
 800e9ba:	464a      	mov	r2, r9
 800e9bc:	f7ff ff98 	bl	800e8f0 <memcpy>
 800e9c0:	89a3      	ldrh	r3, [r4, #12]
 800e9c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e9c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e9ca:	81a3      	strh	r3, [r4, #12]
 800e9cc:	6126      	str	r6, [r4, #16]
 800e9ce:	6165      	str	r5, [r4, #20]
 800e9d0:	444e      	add	r6, r9
 800e9d2:	eba5 0509 	sub.w	r5, r5, r9
 800e9d6:	6026      	str	r6, [r4, #0]
 800e9d8:	60a5      	str	r5, [r4, #8]
 800e9da:	463e      	mov	r6, r7
 800e9dc:	42be      	cmp	r6, r7
 800e9de:	d900      	bls.n	800e9e2 <__ssputs_r+0x86>
 800e9e0:	463e      	mov	r6, r7
 800e9e2:	6820      	ldr	r0, [r4, #0]
 800e9e4:	4632      	mov	r2, r6
 800e9e6:	4641      	mov	r1, r8
 800e9e8:	f000 faa8 	bl	800ef3c <memmove>
 800e9ec:	68a3      	ldr	r3, [r4, #8]
 800e9ee:	1b9b      	subs	r3, r3, r6
 800e9f0:	60a3      	str	r3, [r4, #8]
 800e9f2:	6823      	ldr	r3, [r4, #0]
 800e9f4:	4433      	add	r3, r6
 800e9f6:	6023      	str	r3, [r4, #0]
 800e9f8:	2000      	movs	r0, #0
 800e9fa:	e7db      	b.n	800e9b4 <__ssputs_r+0x58>
 800e9fc:	462a      	mov	r2, r5
 800e9fe:	f000 fb97 	bl	800f130 <_realloc_r>
 800ea02:	4606      	mov	r6, r0
 800ea04:	2800      	cmp	r0, #0
 800ea06:	d1e1      	bne.n	800e9cc <__ssputs_r+0x70>
 800ea08:	6921      	ldr	r1, [r4, #16]
 800ea0a:	4650      	mov	r0, sl
 800ea0c:	f000 fab0 	bl	800ef70 <_free_r>
 800ea10:	e7c7      	b.n	800e9a2 <__ssputs_r+0x46>
	...

0800ea14 <_svfiprintf_r>:
 800ea14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea18:	4698      	mov	r8, r3
 800ea1a:	898b      	ldrh	r3, [r1, #12]
 800ea1c:	061b      	lsls	r3, r3, #24
 800ea1e:	b09d      	sub	sp, #116	; 0x74
 800ea20:	4607      	mov	r7, r0
 800ea22:	460d      	mov	r5, r1
 800ea24:	4614      	mov	r4, r2
 800ea26:	d50e      	bpl.n	800ea46 <_svfiprintf_r+0x32>
 800ea28:	690b      	ldr	r3, [r1, #16]
 800ea2a:	b963      	cbnz	r3, 800ea46 <_svfiprintf_r+0x32>
 800ea2c:	2140      	movs	r1, #64	; 0x40
 800ea2e:	f000 fb0b 	bl	800f048 <_malloc_r>
 800ea32:	6028      	str	r0, [r5, #0]
 800ea34:	6128      	str	r0, [r5, #16]
 800ea36:	b920      	cbnz	r0, 800ea42 <_svfiprintf_r+0x2e>
 800ea38:	230c      	movs	r3, #12
 800ea3a:	603b      	str	r3, [r7, #0]
 800ea3c:	f04f 30ff 	mov.w	r0, #4294967295
 800ea40:	e0d1      	b.n	800ebe6 <_svfiprintf_r+0x1d2>
 800ea42:	2340      	movs	r3, #64	; 0x40
 800ea44:	616b      	str	r3, [r5, #20]
 800ea46:	2300      	movs	r3, #0
 800ea48:	9309      	str	r3, [sp, #36]	; 0x24
 800ea4a:	2320      	movs	r3, #32
 800ea4c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ea50:	f8cd 800c 	str.w	r8, [sp, #12]
 800ea54:	2330      	movs	r3, #48	; 0x30
 800ea56:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ec00 <_svfiprintf_r+0x1ec>
 800ea5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ea5e:	f04f 0901 	mov.w	r9, #1
 800ea62:	4623      	mov	r3, r4
 800ea64:	469a      	mov	sl, r3
 800ea66:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ea6a:	b10a      	cbz	r2, 800ea70 <_svfiprintf_r+0x5c>
 800ea6c:	2a25      	cmp	r2, #37	; 0x25
 800ea6e:	d1f9      	bne.n	800ea64 <_svfiprintf_r+0x50>
 800ea70:	ebba 0b04 	subs.w	fp, sl, r4
 800ea74:	d00b      	beq.n	800ea8e <_svfiprintf_r+0x7a>
 800ea76:	465b      	mov	r3, fp
 800ea78:	4622      	mov	r2, r4
 800ea7a:	4629      	mov	r1, r5
 800ea7c:	4638      	mov	r0, r7
 800ea7e:	f7ff ff6d 	bl	800e95c <__ssputs_r>
 800ea82:	3001      	adds	r0, #1
 800ea84:	f000 80aa 	beq.w	800ebdc <_svfiprintf_r+0x1c8>
 800ea88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ea8a:	445a      	add	r2, fp
 800ea8c:	9209      	str	r2, [sp, #36]	; 0x24
 800ea8e:	f89a 3000 	ldrb.w	r3, [sl]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	f000 80a2 	beq.w	800ebdc <_svfiprintf_r+0x1c8>
 800ea98:	2300      	movs	r3, #0
 800ea9a:	f04f 32ff 	mov.w	r2, #4294967295
 800ea9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eaa2:	f10a 0a01 	add.w	sl, sl, #1
 800eaa6:	9304      	str	r3, [sp, #16]
 800eaa8:	9307      	str	r3, [sp, #28]
 800eaaa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eaae:	931a      	str	r3, [sp, #104]	; 0x68
 800eab0:	4654      	mov	r4, sl
 800eab2:	2205      	movs	r2, #5
 800eab4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eab8:	4851      	ldr	r0, [pc, #324]	; (800ec00 <_svfiprintf_r+0x1ec>)
 800eaba:	f7f1 fc19 	bl	80002f0 <memchr>
 800eabe:	9a04      	ldr	r2, [sp, #16]
 800eac0:	b9d8      	cbnz	r0, 800eafa <_svfiprintf_r+0xe6>
 800eac2:	06d0      	lsls	r0, r2, #27
 800eac4:	bf44      	itt	mi
 800eac6:	2320      	movmi	r3, #32
 800eac8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eacc:	0711      	lsls	r1, r2, #28
 800eace:	bf44      	itt	mi
 800ead0:	232b      	movmi	r3, #43	; 0x2b
 800ead2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ead6:	f89a 3000 	ldrb.w	r3, [sl]
 800eada:	2b2a      	cmp	r3, #42	; 0x2a
 800eadc:	d015      	beq.n	800eb0a <_svfiprintf_r+0xf6>
 800eade:	9a07      	ldr	r2, [sp, #28]
 800eae0:	4654      	mov	r4, sl
 800eae2:	2000      	movs	r0, #0
 800eae4:	f04f 0c0a 	mov.w	ip, #10
 800eae8:	4621      	mov	r1, r4
 800eaea:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eaee:	3b30      	subs	r3, #48	; 0x30
 800eaf0:	2b09      	cmp	r3, #9
 800eaf2:	d94e      	bls.n	800eb92 <_svfiprintf_r+0x17e>
 800eaf4:	b1b0      	cbz	r0, 800eb24 <_svfiprintf_r+0x110>
 800eaf6:	9207      	str	r2, [sp, #28]
 800eaf8:	e014      	b.n	800eb24 <_svfiprintf_r+0x110>
 800eafa:	eba0 0308 	sub.w	r3, r0, r8
 800eafe:	fa09 f303 	lsl.w	r3, r9, r3
 800eb02:	4313      	orrs	r3, r2
 800eb04:	9304      	str	r3, [sp, #16]
 800eb06:	46a2      	mov	sl, r4
 800eb08:	e7d2      	b.n	800eab0 <_svfiprintf_r+0x9c>
 800eb0a:	9b03      	ldr	r3, [sp, #12]
 800eb0c:	1d19      	adds	r1, r3, #4
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	9103      	str	r1, [sp, #12]
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	bfbb      	ittet	lt
 800eb16:	425b      	neglt	r3, r3
 800eb18:	f042 0202 	orrlt.w	r2, r2, #2
 800eb1c:	9307      	strge	r3, [sp, #28]
 800eb1e:	9307      	strlt	r3, [sp, #28]
 800eb20:	bfb8      	it	lt
 800eb22:	9204      	strlt	r2, [sp, #16]
 800eb24:	7823      	ldrb	r3, [r4, #0]
 800eb26:	2b2e      	cmp	r3, #46	; 0x2e
 800eb28:	d10c      	bne.n	800eb44 <_svfiprintf_r+0x130>
 800eb2a:	7863      	ldrb	r3, [r4, #1]
 800eb2c:	2b2a      	cmp	r3, #42	; 0x2a
 800eb2e:	d135      	bne.n	800eb9c <_svfiprintf_r+0x188>
 800eb30:	9b03      	ldr	r3, [sp, #12]
 800eb32:	1d1a      	adds	r2, r3, #4
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	9203      	str	r2, [sp, #12]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	bfb8      	it	lt
 800eb3c:	f04f 33ff 	movlt.w	r3, #4294967295
 800eb40:	3402      	adds	r4, #2
 800eb42:	9305      	str	r3, [sp, #20]
 800eb44:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ec10 <_svfiprintf_r+0x1fc>
 800eb48:	7821      	ldrb	r1, [r4, #0]
 800eb4a:	2203      	movs	r2, #3
 800eb4c:	4650      	mov	r0, sl
 800eb4e:	f7f1 fbcf 	bl	80002f0 <memchr>
 800eb52:	b140      	cbz	r0, 800eb66 <_svfiprintf_r+0x152>
 800eb54:	2340      	movs	r3, #64	; 0x40
 800eb56:	eba0 000a 	sub.w	r0, r0, sl
 800eb5a:	fa03 f000 	lsl.w	r0, r3, r0
 800eb5e:	9b04      	ldr	r3, [sp, #16]
 800eb60:	4303      	orrs	r3, r0
 800eb62:	3401      	adds	r4, #1
 800eb64:	9304      	str	r3, [sp, #16]
 800eb66:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb6a:	4826      	ldr	r0, [pc, #152]	; (800ec04 <_svfiprintf_r+0x1f0>)
 800eb6c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eb70:	2206      	movs	r2, #6
 800eb72:	f7f1 fbbd 	bl	80002f0 <memchr>
 800eb76:	2800      	cmp	r0, #0
 800eb78:	d038      	beq.n	800ebec <_svfiprintf_r+0x1d8>
 800eb7a:	4b23      	ldr	r3, [pc, #140]	; (800ec08 <_svfiprintf_r+0x1f4>)
 800eb7c:	bb1b      	cbnz	r3, 800ebc6 <_svfiprintf_r+0x1b2>
 800eb7e:	9b03      	ldr	r3, [sp, #12]
 800eb80:	3307      	adds	r3, #7
 800eb82:	f023 0307 	bic.w	r3, r3, #7
 800eb86:	3308      	adds	r3, #8
 800eb88:	9303      	str	r3, [sp, #12]
 800eb8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb8c:	4433      	add	r3, r6
 800eb8e:	9309      	str	r3, [sp, #36]	; 0x24
 800eb90:	e767      	b.n	800ea62 <_svfiprintf_r+0x4e>
 800eb92:	fb0c 3202 	mla	r2, ip, r2, r3
 800eb96:	460c      	mov	r4, r1
 800eb98:	2001      	movs	r0, #1
 800eb9a:	e7a5      	b.n	800eae8 <_svfiprintf_r+0xd4>
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	3401      	adds	r4, #1
 800eba0:	9305      	str	r3, [sp, #20]
 800eba2:	4619      	mov	r1, r3
 800eba4:	f04f 0c0a 	mov.w	ip, #10
 800eba8:	4620      	mov	r0, r4
 800ebaa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ebae:	3a30      	subs	r2, #48	; 0x30
 800ebb0:	2a09      	cmp	r2, #9
 800ebb2:	d903      	bls.n	800ebbc <_svfiprintf_r+0x1a8>
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d0c5      	beq.n	800eb44 <_svfiprintf_r+0x130>
 800ebb8:	9105      	str	r1, [sp, #20]
 800ebba:	e7c3      	b.n	800eb44 <_svfiprintf_r+0x130>
 800ebbc:	fb0c 2101 	mla	r1, ip, r1, r2
 800ebc0:	4604      	mov	r4, r0
 800ebc2:	2301      	movs	r3, #1
 800ebc4:	e7f0      	b.n	800eba8 <_svfiprintf_r+0x194>
 800ebc6:	ab03      	add	r3, sp, #12
 800ebc8:	9300      	str	r3, [sp, #0]
 800ebca:	462a      	mov	r2, r5
 800ebcc:	4b0f      	ldr	r3, [pc, #60]	; (800ec0c <_svfiprintf_r+0x1f8>)
 800ebce:	a904      	add	r1, sp, #16
 800ebd0:	4638      	mov	r0, r7
 800ebd2:	f3af 8000 	nop.w
 800ebd6:	1c42      	adds	r2, r0, #1
 800ebd8:	4606      	mov	r6, r0
 800ebda:	d1d6      	bne.n	800eb8a <_svfiprintf_r+0x176>
 800ebdc:	89ab      	ldrh	r3, [r5, #12]
 800ebde:	065b      	lsls	r3, r3, #25
 800ebe0:	f53f af2c 	bmi.w	800ea3c <_svfiprintf_r+0x28>
 800ebe4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ebe6:	b01d      	add	sp, #116	; 0x74
 800ebe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebec:	ab03      	add	r3, sp, #12
 800ebee:	9300      	str	r3, [sp, #0]
 800ebf0:	462a      	mov	r2, r5
 800ebf2:	4b06      	ldr	r3, [pc, #24]	; (800ec0c <_svfiprintf_r+0x1f8>)
 800ebf4:	a904      	add	r1, sp, #16
 800ebf6:	4638      	mov	r0, r7
 800ebf8:	f000 f87a 	bl	800ecf0 <_printf_i>
 800ebfc:	e7eb      	b.n	800ebd6 <_svfiprintf_r+0x1c2>
 800ebfe:	bf00      	nop
 800ec00:	0800f34c 	.word	0x0800f34c
 800ec04:	0800f356 	.word	0x0800f356
 800ec08:	00000000 	.word	0x00000000
 800ec0c:	0800e95d 	.word	0x0800e95d
 800ec10:	0800f352 	.word	0x0800f352

0800ec14 <_printf_common>:
 800ec14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec18:	4616      	mov	r6, r2
 800ec1a:	4699      	mov	r9, r3
 800ec1c:	688a      	ldr	r2, [r1, #8]
 800ec1e:	690b      	ldr	r3, [r1, #16]
 800ec20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ec24:	4293      	cmp	r3, r2
 800ec26:	bfb8      	it	lt
 800ec28:	4613      	movlt	r3, r2
 800ec2a:	6033      	str	r3, [r6, #0]
 800ec2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ec30:	4607      	mov	r7, r0
 800ec32:	460c      	mov	r4, r1
 800ec34:	b10a      	cbz	r2, 800ec3a <_printf_common+0x26>
 800ec36:	3301      	adds	r3, #1
 800ec38:	6033      	str	r3, [r6, #0]
 800ec3a:	6823      	ldr	r3, [r4, #0]
 800ec3c:	0699      	lsls	r1, r3, #26
 800ec3e:	bf42      	ittt	mi
 800ec40:	6833      	ldrmi	r3, [r6, #0]
 800ec42:	3302      	addmi	r3, #2
 800ec44:	6033      	strmi	r3, [r6, #0]
 800ec46:	6825      	ldr	r5, [r4, #0]
 800ec48:	f015 0506 	ands.w	r5, r5, #6
 800ec4c:	d106      	bne.n	800ec5c <_printf_common+0x48>
 800ec4e:	f104 0a19 	add.w	sl, r4, #25
 800ec52:	68e3      	ldr	r3, [r4, #12]
 800ec54:	6832      	ldr	r2, [r6, #0]
 800ec56:	1a9b      	subs	r3, r3, r2
 800ec58:	42ab      	cmp	r3, r5
 800ec5a:	dc26      	bgt.n	800ecaa <_printf_common+0x96>
 800ec5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ec60:	1e13      	subs	r3, r2, #0
 800ec62:	6822      	ldr	r2, [r4, #0]
 800ec64:	bf18      	it	ne
 800ec66:	2301      	movne	r3, #1
 800ec68:	0692      	lsls	r2, r2, #26
 800ec6a:	d42b      	bmi.n	800ecc4 <_printf_common+0xb0>
 800ec6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ec70:	4649      	mov	r1, r9
 800ec72:	4638      	mov	r0, r7
 800ec74:	47c0      	blx	r8
 800ec76:	3001      	adds	r0, #1
 800ec78:	d01e      	beq.n	800ecb8 <_printf_common+0xa4>
 800ec7a:	6823      	ldr	r3, [r4, #0]
 800ec7c:	68e5      	ldr	r5, [r4, #12]
 800ec7e:	6832      	ldr	r2, [r6, #0]
 800ec80:	f003 0306 	and.w	r3, r3, #6
 800ec84:	2b04      	cmp	r3, #4
 800ec86:	bf08      	it	eq
 800ec88:	1aad      	subeq	r5, r5, r2
 800ec8a:	68a3      	ldr	r3, [r4, #8]
 800ec8c:	6922      	ldr	r2, [r4, #16]
 800ec8e:	bf0c      	ite	eq
 800ec90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ec94:	2500      	movne	r5, #0
 800ec96:	4293      	cmp	r3, r2
 800ec98:	bfc4      	itt	gt
 800ec9a:	1a9b      	subgt	r3, r3, r2
 800ec9c:	18ed      	addgt	r5, r5, r3
 800ec9e:	2600      	movs	r6, #0
 800eca0:	341a      	adds	r4, #26
 800eca2:	42b5      	cmp	r5, r6
 800eca4:	d11a      	bne.n	800ecdc <_printf_common+0xc8>
 800eca6:	2000      	movs	r0, #0
 800eca8:	e008      	b.n	800ecbc <_printf_common+0xa8>
 800ecaa:	2301      	movs	r3, #1
 800ecac:	4652      	mov	r2, sl
 800ecae:	4649      	mov	r1, r9
 800ecb0:	4638      	mov	r0, r7
 800ecb2:	47c0      	blx	r8
 800ecb4:	3001      	adds	r0, #1
 800ecb6:	d103      	bne.n	800ecc0 <_printf_common+0xac>
 800ecb8:	f04f 30ff 	mov.w	r0, #4294967295
 800ecbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecc0:	3501      	adds	r5, #1
 800ecc2:	e7c6      	b.n	800ec52 <_printf_common+0x3e>
 800ecc4:	18e1      	adds	r1, r4, r3
 800ecc6:	1c5a      	adds	r2, r3, #1
 800ecc8:	2030      	movs	r0, #48	; 0x30
 800ecca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ecce:	4422      	add	r2, r4
 800ecd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ecd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ecd8:	3302      	adds	r3, #2
 800ecda:	e7c7      	b.n	800ec6c <_printf_common+0x58>
 800ecdc:	2301      	movs	r3, #1
 800ecde:	4622      	mov	r2, r4
 800ece0:	4649      	mov	r1, r9
 800ece2:	4638      	mov	r0, r7
 800ece4:	47c0      	blx	r8
 800ece6:	3001      	adds	r0, #1
 800ece8:	d0e6      	beq.n	800ecb8 <_printf_common+0xa4>
 800ecea:	3601      	adds	r6, #1
 800ecec:	e7d9      	b.n	800eca2 <_printf_common+0x8e>
	...

0800ecf0 <_printf_i>:
 800ecf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ecf4:	7e0f      	ldrb	r7, [r1, #24]
 800ecf6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ecf8:	2f78      	cmp	r7, #120	; 0x78
 800ecfa:	4691      	mov	r9, r2
 800ecfc:	4680      	mov	r8, r0
 800ecfe:	460c      	mov	r4, r1
 800ed00:	469a      	mov	sl, r3
 800ed02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ed06:	d807      	bhi.n	800ed18 <_printf_i+0x28>
 800ed08:	2f62      	cmp	r7, #98	; 0x62
 800ed0a:	d80a      	bhi.n	800ed22 <_printf_i+0x32>
 800ed0c:	2f00      	cmp	r7, #0
 800ed0e:	f000 80d8 	beq.w	800eec2 <_printf_i+0x1d2>
 800ed12:	2f58      	cmp	r7, #88	; 0x58
 800ed14:	f000 80a3 	beq.w	800ee5e <_printf_i+0x16e>
 800ed18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ed1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ed20:	e03a      	b.n	800ed98 <_printf_i+0xa8>
 800ed22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ed26:	2b15      	cmp	r3, #21
 800ed28:	d8f6      	bhi.n	800ed18 <_printf_i+0x28>
 800ed2a:	a101      	add	r1, pc, #4	; (adr r1, 800ed30 <_printf_i+0x40>)
 800ed2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ed30:	0800ed89 	.word	0x0800ed89
 800ed34:	0800ed9d 	.word	0x0800ed9d
 800ed38:	0800ed19 	.word	0x0800ed19
 800ed3c:	0800ed19 	.word	0x0800ed19
 800ed40:	0800ed19 	.word	0x0800ed19
 800ed44:	0800ed19 	.word	0x0800ed19
 800ed48:	0800ed9d 	.word	0x0800ed9d
 800ed4c:	0800ed19 	.word	0x0800ed19
 800ed50:	0800ed19 	.word	0x0800ed19
 800ed54:	0800ed19 	.word	0x0800ed19
 800ed58:	0800ed19 	.word	0x0800ed19
 800ed5c:	0800eea9 	.word	0x0800eea9
 800ed60:	0800edcd 	.word	0x0800edcd
 800ed64:	0800ee8b 	.word	0x0800ee8b
 800ed68:	0800ed19 	.word	0x0800ed19
 800ed6c:	0800ed19 	.word	0x0800ed19
 800ed70:	0800eecb 	.word	0x0800eecb
 800ed74:	0800ed19 	.word	0x0800ed19
 800ed78:	0800edcd 	.word	0x0800edcd
 800ed7c:	0800ed19 	.word	0x0800ed19
 800ed80:	0800ed19 	.word	0x0800ed19
 800ed84:	0800ee93 	.word	0x0800ee93
 800ed88:	682b      	ldr	r3, [r5, #0]
 800ed8a:	1d1a      	adds	r2, r3, #4
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	602a      	str	r2, [r5, #0]
 800ed90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ed94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ed98:	2301      	movs	r3, #1
 800ed9a:	e0a3      	b.n	800eee4 <_printf_i+0x1f4>
 800ed9c:	6820      	ldr	r0, [r4, #0]
 800ed9e:	6829      	ldr	r1, [r5, #0]
 800eda0:	0606      	lsls	r6, r0, #24
 800eda2:	f101 0304 	add.w	r3, r1, #4
 800eda6:	d50a      	bpl.n	800edbe <_printf_i+0xce>
 800eda8:	680e      	ldr	r6, [r1, #0]
 800edaa:	602b      	str	r3, [r5, #0]
 800edac:	2e00      	cmp	r6, #0
 800edae:	da03      	bge.n	800edb8 <_printf_i+0xc8>
 800edb0:	232d      	movs	r3, #45	; 0x2d
 800edb2:	4276      	negs	r6, r6
 800edb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800edb8:	485e      	ldr	r0, [pc, #376]	; (800ef34 <_printf_i+0x244>)
 800edba:	230a      	movs	r3, #10
 800edbc:	e019      	b.n	800edf2 <_printf_i+0x102>
 800edbe:	680e      	ldr	r6, [r1, #0]
 800edc0:	602b      	str	r3, [r5, #0]
 800edc2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800edc6:	bf18      	it	ne
 800edc8:	b236      	sxthne	r6, r6
 800edca:	e7ef      	b.n	800edac <_printf_i+0xbc>
 800edcc:	682b      	ldr	r3, [r5, #0]
 800edce:	6820      	ldr	r0, [r4, #0]
 800edd0:	1d19      	adds	r1, r3, #4
 800edd2:	6029      	str	r1, [r5, #0]
 800edd4:	0601      	lsls	r1, r0, #24
 800edd6:	d501      	bpl.n	800eddc <_printf_i+0xec>
 800edd8:	681e      	ldr	r6, [r3, #0]
 800edda:	e002      	b.n	800ede2 <_printf_i+0xf2>
 800eddc:	0646      	lsls	r6, r0, #25
 800edde:	d5fb      	bpl.n	800edd8 <_printf_i+0xe8>
 800ede0:	881e      	ldrh	r6, [r3, #0]
 800ede2:	4854      	ldr	r0, [pc, #336]	; (800ef34 <_printf_i+0x244>)
 800ede4:	2f6f      	cmp	r7, #111	; 0x6f
 800ede6:	bf0c      	ite	eq
 800ede8:	2308      	moveq	r3, #8
 800edea:	230a      	movne	r3, #10
 800edec:	2100      	movs	r1, #0
 800edee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800edf2:	6865      	ldr	r5, [r4, #4]
 800edf4:	60a5      	str	r5, [r4, #8]
 800edf6:	2d00      	cmp	r5, #0
 800edf8:	bfa2      	ittt	ge
 800edfa:	6821      	ldrge	r1, [r4, #0]
 800edfc:	f021 0104 	bicge.w	r1, r1, #4
 800ee00:	6021      	strge	r1, [r4, #0]
 800ee02:	b90e      	cbnz	r6, 800ee08 <_printf_i+0x118>
 800ee04:	2d00      	cmp	r5, #0
 800ee06:	d04d      	beq.n	800eea4 <_printf_i+0x1b4>
 800ee08:	4615      	mov	r5, r2
 800ee0a:	fbb6 f1f3 	udiv	r1, r6, r3
 800ee0e:	fb03 6711 	mls	r7, r3, r1, r6
 800ee12:	5dc7      	ldrb	r7, [r0, r7]
 800ee14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ee18:	4637      	mov	r7, r6
 800ee1a:	42bb      	cmp	r3, r7
 800ee1c:	460e      	mov	r6, r1
 800ee1e:	d9f4      	bls.n	800ee0a <_printf_i+0x11a>
 800ee20:	2b08      	cmp	r3, #8
 800ee22:	d10b      	bne.n	800ee3c <_printf_i+0x14c>
 800ee24:	6823      	ldr	r3, [r4, #0]
 800ee26:	07de      	lsls	r6, r3, #31
 800ee28:	d508      	bpl.n	800ee3c <_printf_i+0x14c>
 800ee2a:	6923      	ldr	r3, [r4, #16]
 800ee2c:	6861      	ldr	r1, [r4, #4]
 800ee2e:	4299      	cmp	r1, r3
 800ee30:	bfde      	ittt	le
 800ee32:	2330      	movle	r3, #48	; 0x30
 800ee34:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ee38:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ee3c:	1b52      	subs	r2, r2, r5
 800ee3e:	6122      	str	r2, [r4, #16]
 800ee40:	f8cd a000 	str.w	sl, [sp]
 800ee44:	464b      	mov	r3, r9
 800ee46:	aa03      	add	r2, sp, #12
 800ee48:	4621      	mov	r1, r4
 800ee4a:	4640      	mov	r0, r8
 800ee4c:	f7ff fee2 	bl	800ec14 <_printf_common>
 800ee50:	3001      	adds	r0, #1
 800ee52:	d14c      	bne.n	800eeee <_printf_i+0x1fe>
 800ee54:	f04f 30ff 	mov.w	r0, #4294967295
 800ee58:	b004      	add	sp, #16
 800ee5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee5e:	4835      	ldr	r0, [pc, #212]	; (800ef34 <_printf_i+0x244>)
 800ee60:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ee64:	6829      	ldr	r1, [r5, #0]
 800ee66:	6823      	ldr	r3, [r4, #0]
 800ee68:	f851 6b04 	ldr.w	r6, [r1], #4
 800ee6c:	6029      	str	r1, [r5, #0]
 800ee6e:	061d      	lsls	r5, r3, #24
 800ee70:	d514      	bpl.n	800ee9c <_printf_i+0x1ac>
 800ee72:	07df      	lsls	r7, r3, #31
 800ee74:	bf44      	itt	mi
 800ee76:	f043 0320 	orrmi.w	r3, r3, #32
 800ee7a:	6023      	strmi	r3, [r4, #0]
 800ee7c:	b91e      	cbnz	r6, 800ee86 <_printf_i+0x196>
 800ee7e:	6823      	ldr	r3, [r4, #0]
 800ee80:	f023 0320 	bic.w	r3, r3, #32
 800ee84:	6023      	str	r3, [r4, #0]
 800ee86:	2310      	movs	r3, #16
 800ee88:	e7b0      	b.n	800edec <_printf_i+0xfc>
 800ee8a:	6823      	ldr	r3, [r4, #0]
 800ee8c:	f043 0320 	orr.w	r3, r3, #32
 800ee90:	6023      	str	r3, [r4, #0]
 800ee92:	2378      	movs	r3, #120	; 0x78
 800ee94:	4828      	ldr	r0, [pc, #160]	; (800ef38 <_printf_i+0x248>)
 800ee96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ee9a:	e7e3      	b.n	800ee64 <_printf_i+0x174>
 800ee9c:	0659      	lsls	r1, r3, #25
 800ee9e:	bf48      	it	mi
 800eea0:	b2b6      	uxthmi	r6, r6
 800eea2:	e7e6      	b.n	800ee72 <_printf_i+0x182>
 800eea4:	4615      	mov	r5, r2
 800eea6:	e7bb      	b.n	800ee20 <_printf_i+0x130>
 800eea8:	682b      	ldr	r3, [r5, #0]
 800eeaa:	6826      	ldr	r6, [r4, #0]
 800eeac:	6961      	ldr	r1, [r4, #20]
 800eeae:	1d18      	adds	r0, r3, #4
 800eeb0:	6028      	str	r0, [r5, #0]
 800eeb2:	0635      	lsls	r5, r6, #24
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	d501      	bpl.n	800eebc <_printf_i+0x1cc>
 800eeb8:	6019      	str	r1, [r3, #0]
 800eeba:	e002      	b.n	800eec2 <_printf_i+0x1d2>
 800eebc:	0670      	lsls	r0, r6, #25
 800eebe:	d5fb      	bpl.n	800eeb8 <_printf_i+0x1c8>
 800eec0:	8019      	strh	r1, [r3, #0]
 800eec2:	2300      	movs	r3, #0
 800eec4:	6123      	str	r3, [r4, #16]
 800eec6:	4615      	mov	r5, r2
 800eec8:	e7ba      	b.n	800ee40 <_printf_i+0x150>
 800eeca:	682b      	ldr	r3, [r5, #0]
 800eecc:	1d1a      	adds	r2, r3, #4
 800eece:	602a      	str	r2, [r5, #0]
 800eed0:	681d      	ldr	r5, [r3, #0]
 800eed2:	6862      	ldr	r2, [r4, #4]
 800eed4:	2100      	movs	r1, #0
 800eed6:	4628      	mov	r0, r5
 800eed8:	f7f1 fa0a 	bl	80002f0 <memchr>
 800eedc:	b108      	cbz	r0, 800eee2 <_printf_i+0x1f2>
 800eede:	1b40      	subs	r0, r0, r5
 800eee0:	6060      	str	r0, [r4, #4]
 800eee2:	6863      	ldr	r3, [r4, #4]
 800eee4:	6123      	str	r3, [r4, #16]
 800eee6:	2300      	movs	r3, #0
 800eee8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eeec:	e7a8      	b.n	800ee40 <_printf_i+0x150>
 800eeee:	6923      	ldr	r3, [r4, #16]
 800eef0:	462a      	mov	r2, r5
 800eef2:	4649      	mov	r1, r9
 800eef4:	4640      	mov	r0, r8
 800eef6:	47d0      	blx	sl
 800eef8:	3001      	adds	r0, #1
 800eefa:	d0ab      	beq.n	800ee54 <_printf_i+0x164>
 800eefc:	6823      	ldr	r3, [r4, #0]
 800eefe:	079b      	lsls	r3, r3, #30
 800ef00:	d413      	bmi.n	800ef2a <_printf_i+0x23a>
 800ef02:	68e0      	ldr	r0, [r4, #12]
 800ef04:	9b03      	ldr	r3, [sp, #12]
 800ef06:	4298      	cmp	r0, r3
 800ef08:	bfb8      	it	lt
 800ef0a:	4618      	movlt	r0, r3
 800ef0c:	e7a4      	b.n	800ee58 <_printf_i+0x168>
 800ef0e:	2301      	movs	r3, #1
 800ef10:	4632      	mov	r2, r6
 800ef12:	4649      	mov	r1, r9
 800ef14:	4640      	mov	r0, r8
 800ef16:	47d0      	blx	sl
 800ef18:	3001      	adds	r0, #1
 800ef1a:	d09b      	beq.n	800ee54 <_printf_i+0x164>
 800ef1c:	3501      	adds	r5, #1
 800ef1e:	68e3      	ldr	r3, [r4, #12]
 800ef20:	9903      	ldr	r1, [sp, #12]
 800ef22:	1a5b      	subs	r3, r3, r1
 800ef24:	42ab      	cmp	r3, r5
 800ef26:	dcf2      	bgt.n	800ef0e <_printf_i+0x21e>
 800ef28:	e7eb      	b.n	800ef02 <_printf_i+0x212>
 800ef2a:	2500      	movs	r5, #0
 800ef2c:	f104 0619 	add.w	r6, r4, #25
 800ef30:	e7f5      	b.n	800ef1e <_printf_i+0x22e>
 800ef32:	bf00      	nop
 800ef34:	0800f35d 	.word	0x0800f35d
 800ef38:	0800f36e 	.word	0x0800f36e

0800ef3c <memmove>:
 800ef3c:	4288      	cmp	r0, r1
 800ef3e:	b510      	push	{r4, lr}
 800ef40:	eb01 0402 	add.w	r4, r1, r2
 800ef44:	d902      	bls.n	800ef4c <memmove+0x10>
 800ef46:	4284      	cmp	r4, r0
 800ef48:	4623      	mov	r3, r4
 800ef4a:	d807      	bhi.n	800ef5c <memmove+0x20>
 800ef4c:	1e43      	subs	r3, r0, #1
 800ef4e:	42a1      	cmp	r1, r4
 800ef50:	d008      	beq.n	800ef64 <memmove+0x28>
 800ef52:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ef56:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ef5a:	e7f8      	b.n	800ef4e <memmove+0x12>
 800ef5c:	4402      	add	r2, r0
 800ef5e:	4601      	mov	r1, r0
 800ef60:	428a      	cmp	r2, r1
 800ef62:	d100      	bne.n	800ef66 <memmove+0x2a>
 800ef64:	bd10      	pop	{r4, pc}
 800ef66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ef6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ef6e:	e7f7      	b.n	800ef60 <memmove+0x24>

0800ef70 <_free_r>:
 800ef70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ef72:	2900      	cmp	r1, #0
 800ef74:	d044      	beq.n	800f000 <_free_r+0x90>
 800ef76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ef7a:	9001      	str	r0, [sp, #4]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	f1a1 0404 	sub.w	r4, r1, #4
 800ef82:	bfb8      	it	lt
 800ef84:	18e4      	addlt	r4, r4, r3
 800ef86:	f000 f913 	bl	800f1b0 <__malloc_lock>
 800ef8a:	4a1e      	ldr	r2, [pc, #120]	; (800f004 <_free_r+0x94>)
 800ef8c:	9801      	ldr	r0, [sp, #4]
 800ef8e:	6813      	ldr	r3, [r2, #0]
 800ef90:	b933      	cbnz	r3, 800efa0 <_free_r+0x30>
 800ef92:	6063      	str	r3, [r4, #4]
 800ef94:	6014      	str	r4, [r2, #0]
 800ef96:	b003      	add	sp, #12
 800ef98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ef9c:	f000 b90e 	b.w	800f1bc <__malloc_unlock>
 800efa0:	42a3      	cmp	r3, r4
 800efa2:	d908      	bls.n	800efb6 <_free_r+0x46>
 800efa4:	6825      	ldr	r5, [r4, #0]
 800efa6:	1961      	adds	r1, r4, r5
 800efa8:	428b      	cmp	r3, r1
 800efaa:	bf01      	itttt	eq
 800efac:	6819      	ldreq	r1, [r3, #0]
 800efae:	685b      	ldreq	r3, [r3, #4]
 800efb0:	1949      	addeq	r1, r1, r5
 800efb2:	6021      	streq	r1, [r4, #0]
 800efb4:	e7ed      	b.n	800ef92 <_free_r+0x22>
 800efb6:	461a      	mov	r2, r3
 800efb8:	685b      	ldr	r3, [r3, #4]
 800efba:	b10b      	cbz	r3, 800efc0 <_free_r+0x50>
 800efbc:	42a3      	cmp	r3, r4
 800efbe:	d9fa      	bls.n	800efb6 <_free_r+0x46>
 800efc0:	6811      	ldr	r1, [r2, #0]
 800efc2:	1855      	adds	r5, r2, r1
 800efc4:	42a5      	cmp	r5, r4
 800efc6:	d10b      	bne.n	800efe0 <_free_r+0x70>
 800efc8:	6824      	ldr	r4, [r4, #0]
 800efca:	4421      	add	r1, r4
 800efcc:	1854      	adds	r4, r2, r1
 800efce:	42a3      	cmp	r3, r4
 800efd0:	6011      	str	r1, [r2, #0]
 800efd2:	d1e0      	bne.n	800ef96 <_free_r+0x26>
 800efd4:	681c      	ldr	r4, [r3, #0]
 800efd6:	685b      	ldr	r3, [r3, #4]
 800efd8:	6053      	str	r3, [r2, #4]
 800efda:	4421      	add	r1, r4
 800efdc:	6011      	str	r1, [r2, #0]
 800efde:	e7da      	b.n	800ef96 <_free_r+0x26>
 800efe0:	d902      	bls.n	800efe8 <_free_r+0x78>
 800efe2:	230c      	movs	r3, #12
 800efe4:	6003      	str	r3, [r0, #0]
 800efe6:	e7d6      	b.n	800ef96 <_free_r+0x26>
 800efe8:	6825      	ldr	r5, [r4, #0]
 800efea:	1961      	adds	r1, r4, r5
 800efec:	428b      	cmp	r3, r1
 800efee:	bf04      	itt	eq
 800eff0:	6819      	ldreq	r1, [r3, #0]
 800eff2:	685b      	ldreq	r3, [r3, #4]
 800eff4:	6063      	str	r3, [r4, #4]
 800eff6:	bf04      	itt	eq
 800eff8:	1949      	addeq	r1, r1, r5
 800effa:	6021      	streq	r1, [r4, #0]
 800effc:	6054      	str	r4, [r2, #4]
 800effe:	e7ca      	b.n	800ef96 <_free_r+0x26>
 800f000:	b003      	add	sp, #12
 800f002:	bd30      	pop	{r4, r5, pc}
 800f004:	24000dc8 	.word	0x24000dc8

0800f008 <sbrk_aligned>:
 800f008:	b570      	push	{r4, r5, r6, lr}
 800f00a:	4e0e      	ldr	r6, [pc, #56]	; (800f044 <sbrk_aligned+0x3c>)
 800f00c:	460c      	mov	r4, r1
 800f00e:	6831      	ldr	r1, [r6, #0]
 800f010:	4605      	mov	r5, r0
 800f012:	b911      	cbnz	r1, 800f01a <sbrk_aligned+0x12>
 800f014:	f000 f8bc 	bl	800f190 <_sbrk_r>
 800f018:	6030      	str	r0, [r6, #0]
 800f01a:	4621      	mov	r1, r4
 800f01c:	4628      	mov	r0, r5
 800f01e:	f000 f8b7 	bl	800f190 <_sbrk_r>
 800f022:	1c43      	adds	r3, r0, #1
 800f024:	d00a      	beq.n	800f03c <sbrk_aligned+0x34>
 800f026:	1cc4      	adds	r4, r0, #3
 800f028:	f024 0403 	bic.w	r4, r4, #3
 800f02c:	42a0      	cmp	r0, r4
 800f02e:	d007      	beq.n	800f040 <sbrk_aligned+0x38>
 800f030:	1a21      	subs	r1, r4, r0
 800f032:	4628      	mov	r0, r5
 800f034:	f000 f8ac 	bl	800f190 <_sbrk_r>
 800f038:	3001      	adds	r0, #1
 800f03a:	d101      	bne.n	800f040 <sbrk_aligned+0x38>
 800f03c:	f04f 34ff 	mov.w	r4, #4294967295
 800f040:	4620      	mov	r0, r4
 800f042:	bd70      	pop	{r4, r5, r6, pc}
 800f044:	24000dcc 	.word	0x24000dcc

0800f048 <_malloc_r>:
 800f048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f04c:	1ccd      	adds	r5, r1, #3
 800f04e:	f025 0503 	bic.w	r5, r5, #3
 800f052:	3508      	adds	r5, #8
 800f054:	2d0c      	cmp	r5, #12
 800f056:	bf38      	it	cc
 800f058:	250c      	movcc	r5, #12
 800f05a:	2d00      	cmp	r5, #0
 800f05c:	4607      	mov	r7, r0
 800f05e:	db01      	blt.n	800f064 <_malloc_r+0x1c>
 800f060:	42a9      	cmp	r1, r5
 800f062:	d905      	bls.n	800f070 <_malloc_r+0x28>
 800f064:	230c      	movs	r3, #12
 800f066:	603b      	str	r3, [r7, #0]
 800f068:	2600      	movs	r6, #0
 800f06a:	4630      	mov	r0, r6
 800f06c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f070:	4e2e      	ldr	r6, [pc, #184]	; (800f12c <_malloc_r+0xe4>)
 800f072:	f000 f89d 	bl	800f1b0 <__malloc_lock>
 800f076:	6833      	ldr	r3, [r6, #0]
 800f078:	461c      	mov	r4, r3
 800f07a:	bb34      	cbnz	r4, 800f0ca <_malloc_r+0x82>
 800f07c:	4629      	mov	r1, r5
 800f07e:	4638      	mov	r0, r7
 800f080:	f7ff ffc2 	bl	800f008 <sbrk_aligned>
 800f084:	1c43      	adds	r3, r0, #1
 800f086:	4604      	mov	r4, r0
 800f088:	d14d      	bne.n	800f126 <_malloc_r+0xde>
 800f08a:	6834      	ldr	r4, [r6, #0]
 800f08c:	4626      	mov	r6, r4
 800f08e:	2e00      	cmp	r6, #0
 800f090:	d140      	bne.n	800f114 <_malloc_r+0xcc>
 800f092:	6823      	ldr	r3, [r4, #0]
 800f094:	4631      	mov	r1, r6
 800f096:	4638      	mov	r0, r7
 800f098:	eb04 0803 	add.w	r8, r4, r3
 800f09c:	f000 f878 	bl	800f190 <_sbrk_r>
 800f0a0:	4580      	cmp	r8, r0
 800f0a2:	d13a      	bne.n	800f11a <_malloc_r+0xd2>
 800f0a4:	6821      	ldr	r1, [r4, #0]
 800f0a6:	3503      	adds	r5, #3
 800f0a8:	1a6d      	subs	r5, r5, r1
 800f0aa:	f025 0503 	bic.w	r5, r5, #3
 800f0ae:	3508      	adds	r5, #8
 800f0b0:	2d0c      	cmp	r5, #12
 800f0b2:	bf38      	it	cc
 800f0b4:	250c      	movcc	r5, #12
 800f0b6:	4629      	mov	r1, r5
 800f0b8:	4638      	mov	r0, r7
 800f0ba:	f7ff ffa5 	bl	800f008 <sbrk_aligned>
 800f0be:	3001      	adds	r0, #1
 800f0c0:	d02b      	beq.n	800f11a <_malloc_r+0xd2>
 800f0c2:	6823      	ldr	r3, [r4, #0]
 800f0c4:	442b      	add	r3, r5
 800f0c6:	6023      	str	r3, [r4, #0]
 800f0c8:	e00e      	b.n	800f0e8 <_malloc_r+0xa0>
 800f0ca:	6822      	ldr	r2, [r4, #0]
 800f0cc:	1b52      	subs	r2, r2, r5
 800f0ce:	d41e      	bmi.n	800f10e <_malloc_r+0xc6>
 800f0d0:	2a0b      	cmp	r2, #11
 800f0d2:	d916      	bls.n	800f102 <_malloc_r+0xba>
 800f0d4:	1961      	adds	r1, r4, r5
 800f0d6:	42a3      	cmp	r3, r4
 800f0d8:	6025      	str	r5, [r4, #0]
 800f0da:	bf18      	it	ne
 800f0dc:	6059      	strne	r1, [r3, #4]
 800f0de:	6863      	ldr	r3, [r4, #4]
 800f0e0:	bf08      	it	eq
 800f0e2:	6031      	streq	r1, [r6, #0]
 800f0e4:	5162      	str	r2, [r4, r5]
 800f0e6:	604b      	str	r3, [r1, #4]
 800f0e8:	4638      	mov	r0, r7
 800f0ea:	f104 060b 	add.w	r6, r4, #11
 800f0ee:	f000 f865 	bl	800f1bc <__malloc_unlock>
 800f0f2:	f026 0607 	bic.w	r6, r6, #7
 800f0f6:	1d23      	adds	r3, r4, #4
 800f0f8:	1af2      	subs	r2, r6, r3
 800f0fa:	d0b6      	beq.n	800f06a <_malloc_r+0x22>
 800f0fc:	1b9b      	subs	r3, r3, r6
 800f0fe:	50a3      	str	r3, [r4, r2]
 800f100:	e7b3      	b.n	800f06a <_malloc_r+0x22>
 800f102:	6862      	ldr	r2, [r4, #4]
 800f104:	42a3      	cmp	r3, r4
 800f106:	bf0c      	ite	eq
 800f108:	6032      	streq	r2, [r6, #0]
 800f10a:	605a      	strne	r2, [r3, #4]
 800f10c:	e7ec      	b.n	800f0e8 <_malloc_r+0xa0>
 800f10e:	4623      	mov	r3, r4
 800f110:	6864      	ldr	r4, [r4, #4]
 800f112:	e7b2      	b.n	800f07a <_malloc_r+0x32>
 800f114:	4634      	mov	r4, r6
 800f116:	6876      	ldr	r6, [r6, #4]
 800f118:	e7b9      	b.n	800f08e <_malloc_r+0x46>
 800f11a:	230c      	movs	r3, #12
 800f11c:	603b      	str	r3, [r7, #0]
 800f11e:	4638      	mov	r0, r7
 800f120:	f000 f84c 	bl	800f1bc <__malloc_unlock>
 800f124:	e7a1      	b.n	800f06a <_malloc_r+0x22>
 800f126:	6025      	str	r5, [r4, #0]
 800f128:	e7de      	b.n	800f0e8 <_malloc_r+0xa0>
 800f12a:	bf00      	nop
 800f12c:	24000dc8 	.word	0x24000dc8

0800f130 <_realloc_r>:
 800f130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f134:	4680      	mov	r8, r0
 800f136:	4614      	mov	r4, r2
 800f138:	460e      	mov	r6, r1
 800f13a:	b921      	cbnz	r1, 800f146 <_realloc_r+0x16>
 800f13c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f140:	4611      	mov	r1, r2
 800f142:	f7ff bf81 	b.w	800f048 <_malloc_r>
 800f146:	b92a      	cbnz	r2, 800f154 <_realloc_r+0x24>
 800f148:	f7ff ff12 	bl	800ef70 <_free_r>
 800f14c:	4625      	mov	r5, r4
 800f14e:	4628      	mov	r0, r5
 800f150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f154:	f000 f838 	bl	800f1c8 <_malloc_usable_size_r>
 800f158:	4284      	cmp	r4, r0
 800f15a:	4607      	mov	r7, r0
 800f15c:	d802      	bhi.n	800f164 <_realloc_r+0x34>
 800f15e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f162:	d812      	bhi.n	800f18a <_realloc_r+0x5a>
 800f164:	4621      	mov	r1, r4
 800f166:	4640      	mov	r0, r8
 800f168:	f7ff ff6e 	bl	800f048 <_malloc_r>
 800f16c:	4605      	mov	r5, r0
 800f16e:	2800      	cmp	r0, #0
 800f170:	d0ed      	beq.n	800f14e <_realloc_r+0x1e>
 800f172:	42bc      	cmp	r4, r7
 800f174:	4622      	mov	r2, r4
 800f176:	4631      	mov	r1, r6
 800f178:	bf28      	it	cs
 800f17a:	463a      	movcs	r2, r7
 800f17c:	f7ff fbb8 	bl	800e8f0 <memcpy>
 800f180:	4631      	mov	r1, r6
 800f182:	4640      	mov	r0, r8
 800f184:	f7ff fef4 	bl	800ef70 <_free_r>
 800f188:	e7e1      	b.n	800f14e <_realloc_r+0x1e>
 800f18a:	4635      	mov	r5, r6
 800f18c:	e7df      	b.n	800f14e <_realloc_r+0x1e>
	...

0800f190 <_sbrk_r>:
 800f190:	b538      	push	{r3, r4, r5, lr}
 800f192:	4d06      	ldr	r5, [pc, #24]	; (800f1ac <_sbrk_r+0x1c>)
 800f194:	2300      	movs	r3, #0
 800f196:	4604      	mov	r4, r0
 800f198:	4608      	mov	r0, r1
 800f19a:	602b      	str	r3, [r5, #0]
 800f19c:	f7f3 fd3a 	bl	8002c14 <_sbrk>
 800f1a0:	1c43      	adds	r3, r0, #1
 800f1a2:	d102      	bne.n	800f1aa <_sbrk_r+0x1a>
 800f1a4:	682b      	ldr	r3, [r5, #0]
 800f1a6:	b103      	cbz	r3, 800f1aa <_sbrk_r+0x1a>
 800f1a8:	6023      	str	r3, [r4, #0]
 800f1aa:	bd38      	pop	{r3, r4, r5, pc}
 800f1ac:	24000dd0 	.word	0x24000dd0

0800f1b0 <__malloc_lock>:
 800f1b0:	4801      	ldr	r0, [pc, #4]	; (800f1b8 <__malloc_lock+0x8>)
 800f1b2:	f000 b811 	b.w	800f1d8 <__retarget_lock_acquire_recursive>
 800f1b6:	bf00      	nop
 800f1b8:	24000dd4 	.word	0x24000dd4

0800f1bc <__malloc_unlock>:
 800f1bc:	4801      	ldr	r0, [pc, #4]	; (800f1c4 <__malloc_unlock+0x8>)
 800f1be:	f000 b80c 	b.w	800f1da <__retarget_lock_release_recursive>
 800f1c2:	bf00      	nop
 800f1c4:	24000dd4 	.word	0x24000dd4

0800f1c8 <_malloc_usable_size_r>:
 800f1c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f1cc:	1f18      	subs	r0, r3, #4
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	bfbc      	itt	lt
 800f1d2:	580b      	ldrlt	r3, [r1, r0]
 800f1d4:	18c0      	addlt	r0, r0, r3
 800f1d6:	4770      	bx	lr

0800f1d8 <__retarget_lock_acquire_recursive>:
 800f1d8:	4770      	bx	lr

0800f1da <__retarget_lock_release_recursive>:
 800f1da:	4770      	bx	lr

0800f1dc <_init>:
 800f1dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1de:	bf00      	nop
 800f1e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1e2:	bc08      	pop	{r3}
 800f1e4:	469e      	mov	lr, r3
 800f1e6:	4770      	bx	lr

0800f1e8 <_fini>:
 800f1e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1ea:	bf00      	nop
 800f1ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1ee:	bc08      	pop	{r3}
 800f1f0:	469e      	mov	lr, r3
 800f1f2:	4770      	bx	lr
